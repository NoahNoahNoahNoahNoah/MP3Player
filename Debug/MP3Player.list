
MP3Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015e00  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002db8  08015fe0  08015fe0  00025fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018d98  08018d98  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08018d98  08018d98  00028d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018da0  08018da0  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018da0  08018da0  00028da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018da4  08018da4  00028da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08018da8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000571c  200000ec  08018e94  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20005808  08018e94  00035808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00043569  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000895e  00000000  00000000  00073685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000035e0  00000000  00000000  0007bfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00003260  00000000  00000000  0007f5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f02b  00000000  00000000  00082828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00044281  00000000  00000000  00091853  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010104b  00000000  00000000  000d5ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d6b1f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000eda0  00000000  00000000  001d6b70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	08015fc8 	.word	0x08015fc8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f0 	.word	0x200000f0
 800021c:	08015fc8 	.word	0x08015fc8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f003 f820 	bl	800360c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f882 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fb70 	bl	8000cb4 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d4:	f000 f91e 	bl	8000814 <MX_ADC1_Init>
  MX_DAC_Init();
 80005d8:	f000 f96e 	bl	80008b8 <MX_DAC_Init>
  MX_DFSDM1_Init();
 80005dc:	f000 f996 	bl	800090c <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 80005e0:	f000 f9cc 	bl	800097c <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 80005e4:	f000 fa34 	bl	8000a50 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 80005e8:	f000 fd02 	bl	8000ff0 <MX_FSMC_Init>
  MX_I2S2_Init();
 80005ec:	f000 fa94 	bl	8000b18 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 80005f0:	f000 fac0 	bl	8000b74 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 80005f4:	f000 faea 	bl	8000bcc <MX_SDIO_SD_Init>
  MX_UART10_Init();
 80005f8:	f000 fb08 	bl	8000c0c <MX_UART10_Init>
  MX_USART6_UART_Init();
 80005fc:	f000 fb30 	bl	8000c60 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000600:	f000 fa5c 	bl	8000abc <MX_I2C2_Init>
  MX_FATFS_Init();
 8000604:	f00b ff3e 	bl	800c484 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  MX_UART10_Init();
 8000608:	f000 fb00 	bl	8000c0c <MX_UART10_Init>
  MX_USART6_UART_Init();
 800060c:	f000 fb28 	bl	8000c60 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000610:	f000 fa54 	bl	8000abc <MX_I2C2_Init>
  BSP_LCD_Init();
 8000614:	f002 fb03 	bl	8002c1e <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000618:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800061c:	f002 fbbe 	bl	8002d9c <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000620:	2100      	movs	r1, #0
 8000622:	2000      	movs	r0, #0
 8000624:	f002 f944 	bl	80028b0 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 8000628:	481c      	ldr	r0, [pc, #112]	; (800069c <main+0xd8>)
 800062a:	f002 fba7 	bl	8002d7c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800062e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000632:	f002 fb83 	bl	8002d3c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000636:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800063a:	f002 fb8f 	bl	8002d5c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project ...", CENTER_MODE);
 800063e:	2301      	movs	r3, #1
 8000640:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <main+0xdc>)
 8000642:	2170      	movs	r1, #112	; 0x70
 8000644:	2000      	movs	r0, #0
 8000646:	f002 fc09 	bl	8002e5c <BSP_LCD_DisplayStringAt>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800064a:	f010 fb5b 	bl	8010d04 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of audioBufferMutex */
  audioBufferMutexHandle = osMutexNew(&audioBufferMutex_attributes);
 800064e:	4815      	ldr	r0, [pc, #84]	; (80006a4 <main+0xe0>)
 8000650:	f010 fce0 	bl	8011014 <osMutexNew>
 8000654:	4603      	mov	r3, r0
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <main+0xe4>)
 8000658:	6013      	str	r3, [r2, #0]

  /* creation of buttonBufferMutex */
  buttonBufferMutexHandle = osMutexNew(&buttonBufferMutex_attributes);
 800065a:	4814      	ldr	r0, [pc, #80]	; (80006ac <main+0xe8>)
 800065c:	f010 fcda 	bl	8011014 <osMutexNew>
 8000660:	4603      	mov	r3, r0
 8000662:	4a13      	ldr	r2, [pc, #76]	; (80006b0 <main+0xec>)
 8000664:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of audioBufferSem */
  audioBufferSemHandle = osSemaphoreNew(1, 1, &audioBufferSem_attributes);
 8000666:	4a13      	ldr	r2, [pc, #76]	; (80006b4 <main+0xf0>)
 8000668:	2101      	movs	r1, #1
 800066a:	2001      	movs	r0, #1
 800066c:	f010 fd6c 	bl	8011148 <osSemaphoreNew>
 8000670:	4603      	mov	r3, r0
 8000672:	4a11      	ldr	r2, [pc, #68]	; (80006b8 <main+0xf4>)
 8000674:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000676:	4a11      	ldr	r2, [pc, #68]	; (80006bc <main+0xf8>)
 8000678:	2100      	movs	r1, #0
 800067a:	4811      	ldr	r0, [pc, #68]	; (80006c0 <main+0xfc>)
 800067c:	f010 fbf6 	bl	8010e6c <osThreadNew>
 8000680:	4603      	mov	r3, r0
 8000682:	4a10      	ldr	r2, [pc, #64]	; (80006c4 <main+0x100>)
 8000684:	6013      	str	r3, [r2, #0]

  /* creation of initializeSDCar */
  initializeSDCarHandle = osThreadNew(StartInitializeSDCard, NULL, &initializeSDCar_attributes);
 8000686:	4a10      	ldr	r2, [pc, #64]	; (80006c8 <main+0x104>)
 8000688:	2100      	movs	r1, #0
 800068a:	4810      	ldr	r0, [pc, #64]	; (80006cc <main+0x108>)
 800068c:	f010 fbee 	bl	8010e6c <osThreadNew>
 8000690:	4603      	mov	r3, r0
 8000692:	4a0f      	ldr	r2, [pc, #60]	; (80006d0 <main+0x10c>)
 8000694:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000696:	f010 fb8b 	bl	8010db0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800069a:	e7fe      	b.n	800069a <main+0xd6>
 800069c:	2000004c 	.word	0x2000004c
 80006a0:	08016034 	.word	0x08016034
 80006a4:	08016110 	.word	0x08016110
 80006a8:	200004ec 	.word	0x200004ec
 80006ac:	08016120 	.word	0x08016120
 80006b0:	200004f0 	.word	0x200004f0
 80006b4:	08016130 	.word	0x08016130
 80006b8:	200004f4 	.word	0x200004f4
 80006bc:	080160c8 	.word	0x080160c8
 80006c0:	08001155 	.word	0x08001155
 80006c4:	200004e4 	.word	0x200004e4
 80006c8:	080160ec 	.word	0x080160ec
 80006cc:	08001175 	.word	0x08001175
 80006d0:	200004e8 	.word	0x200004e8

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b0aa      	sub	sp, #168	; 0xa8
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80006de:	2234      	movs	r2, #52	; 0x34
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f014 fd68 	bl	80151b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006f8:	f107 0308 	add.w	r3, r7, #8
 80006fc:	2258      	movs	r2, #88	; 0x58
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f014 fd59 	bl	80151b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b40      	ldr	r3, [pc, #256]	; (800080c <SystemClock_Config+0x138>)
 800070c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800070e:	4a3f      	ldr	r2, [pc, #252]	; (800080c <SystemClock_Config+0x138>)
 8000710:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000714:	6413      	str	r3, [r2, #64]	; 0x40
 8000716:	4b3d      	ldr	r3, [pc, #244]	; (800080c <SystemClock_Config+0x138>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b3a      	ldr	r3, [pc, #232]	; (8000810 <SystemClock_Config+0x13c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4a39      	ldr	r2, [pc, #228]	; (8000810 <SystemClock_Config+0x13c>)
 800072c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000730:	6013      	str	r3, [r2, #0]
 8000732:	4b37      	ldr	r3, [pc, #220]	; (8000810 <SystemClock_Config+0x13c>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800073e:	2303      	movs	r3, #3
 8000740:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000742:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000746:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074e:	2310      	movs	r3, #16
 8000750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000754:	2302      	movs	r3, #2
 8000756:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800075a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800075e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000762:	230f      	movs	r3, #15
 8000764:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000768:	2390      	movs	r3, #144	; 0x90
 800076a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800076e:	2302      	movs	r3, #2
 8000770:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000774:	2305      	movs	r3, #5
 8000776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800077a:	2302      	movs	r3, #2
 800077c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000780:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000784:	4618      	mov	r0, r3
 8000786:	f007 fbe9 	bl	8007f5c <HAL_RCC_OscConfig>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000790:	f000 fd52 	bl	8001238 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	230f      	movs	r3, #15
 8000796:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000798:	2300      	movs	r3, #0
 800079a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800079c:	2300      	movs	r3, #0
 800079e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 fdd2 	bl	8007358 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xea>
  {
    Error_Handler();
 80007ba:	f000 fd3d 	bl	8001238 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 80007be:	f240 1371 	movw	r3, #369	; 0x171
 80007c2:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80007c4:	2332      	movs	r3, #50	; 0x32
 80007c6:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 80007c8:	230c      	movs	r3, #12
 80007ca:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80007d0:	2302      	movs	r3, #2
 80007d2:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80007d4:	2300      	movs	r3, #0
 80007d6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 80007d8:	2300      	movs	r3, #0
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 80007dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007e0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 80007e2:	2300      	movs	r3, #0
 80007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 80007ea:	2300      	movs	r3, #0
 80007ec:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ee:	f107 0308 	add.w	r3, r7, #8
 80007f2:	4618      	mov	r0, r3
 80007f4:	f006 ffc2 	bl	800777c <HAL_RCCEx_PeriphCLKConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 80007fe:	f000 fd1b 	bl	8001238 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	37a8      	adds	r7, #168	; 0xa8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000826:	4b21      	ldr	r3, [pc, #132]	; (80008ac <MX_ADC1_Init+0x98>)
 8000828:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <MX_ADC1_Init+0x9c>)
 800082a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <MX_ADC1_Init+0x98>)
 800082e:	2200      	movs	r2, #0
 8000830:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000832:	4b1e      	ldr	r3, [pc, #120]	; (80008ac <MX_ADC1_Init+0x98>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <MX_ADC1_Init+0x98>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800083e:	4b1b      	ldr	r3, [pc, #108]	; (80008ac <MX_ADC1_Init+0x98>)
 8000840:	2200      	movs	r2, #0
 8000842:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <MX_ADC1_Init+0x98>)
 8000846:	2200      	movs	r2, #0
 8000848:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084c:	4b17      	ldr	r3, [pc, #92]	; (80008ac <MX_ADC1_Init+0x98>)
 800084e:	2200      	movs	r2, #0
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000852:	4b16      	ldr	r3, [pc, #88]	; (80008ac <MX_ADC1_Init+0x98>)
 8000854:	4a17      	ldr	r2, [pc, #92]	; (80008b4 <MX_ADC1_Init+0xa0>)
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_ADC1_Init+0x98>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <MX_ADC1_Init+0x98>)
 8000860:	2201      	movs	r2, #1
 8000862:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000864:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_ADC1_Init+0x98>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_ADC1_Init+0x98>)
 800086e:	2201      	movs	r2, #1
 8000870:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000872:	480e      	ldr	r0, [pc, #56]	; (80008ac <MX_ADC1_Init+0x98>)
 8000874:	f002 ff30 	bl	80036d8 <HAL_ADC_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800087e:	f000 fcdb 	bl	8001238 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000882:	230a      	movs	r3, #10
 8000884:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800088a:	2300      	movs	r3, #0
 800088c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088e:	463b      	mov	r3, r7
 8000890:	4619      	mov	r1, r3
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <MX_ADC1_Init+0x98>)
 8000894:	f002 ff64 	bl	8003760 <HAL_ADC_ConfigChannel>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800089e:	f000 fccb 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a2:	bf00      	nop
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000108 	.word	0x20000108
 80008b0:	40012000 	.word	0x40012000
 80008b4:	0f000001 	.word	0x0f000001

080008b8 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008be:	463b      	mov	r3, r7
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_DAC_Init+0x4c>)
 80008c8:	4a0f      	ldr	r2, [pc, #60]	; (8000908 <MX_DAC_Init+0x50>)
 80008ca:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008cc:	480d      	ldr	r0, [pc, #52]	; (8000904 <MX_DAC_Init+0x4c>)
 80008ce:	f003 fa57 	bl	8003d80 <HAL_DAC_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008d8:	f000 fcae 	bl	8001238 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008dc:	2300      	movs	r3, #0
 80008de:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008e4:	463b      	mov	r3, r7
 80008e6:	2200      	movs	r2, #0
 80008e8:	4619      	mov	r1, r3
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <MX_DAC_Init+0x4c>)
 80008ec:	f003 fabe 	bl	8003e6c <HAL_DAC_ConfigChannel>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80008f6:	f000 fc9f 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	20000150 	.word	0x20000150
 8000908:	40007400 	.word	0x40007400

0800090c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000910:	4b18      	ldr	r3, [pc, #96]	; (8000974 <MX_DFSDM1_Init+0x68>)
 8000912:	4a19      	ldr	r2, [pc, #100]	; (8000978 <MX_DFSDM1_Init+0x6c>)
 8000914:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000916:	4b17      	ldr	r3, [pc, #92]	; (8000974 <MX_DFSDM1_Init+0x68>)
 8000918:	2201      	movs	r2, #1
 800091a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800091c:	4b15      	ldr	r3, [pc, #84]	; (8000974 <MX_DFSDM1_Init+0x68>)
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000922:	4b14      	ldr	r3, [pc, #80]	; (8000974 <MX_DFSDM1_Init+0x68>)
 8000924:	2202      	movs	r2, #2
 8000926:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <MX_DFSDM1_Init+0x68>)
 800092a:	2200      	movs	r2, #0
 800092c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800092e:	4b11      	ldr	r3, [pc, #68]	; (8000974 <MX_DFSDM1_Init+0x68>)
 8000930:	2200      	movs	r2, #0
 8000932:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <MX_DFSDM1_Init+0x68>)
 8000936:	2200      	movs	r2, #0
 8000938:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800093a:	4b0e      	ldr	r3, [pc, #56]	; (8000974 <MX_DFSDM1_Init+0x68>)
 800093c:	2202      	movs	r2, #2
 800093e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_DFSDM1_Init+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <MX_DFSDM1_Init+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_DFSDM1_Init+0x68>)
 800094e:	2201      	movs	r2, #1
 8000950:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <MX_DFSDM1_Init+0x68>)
 8000954:	2200      	movs	r2, #0
 8000956:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <MX_DFSDM1_Init+0x68>)
 800095a:	2200      	movs	r2, #0
 800095c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 800095e:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_DFSDM1_Init+0x68>)
 8000960:	f003 fadc 	bl	8003f1c <HAL_DFSDM_ChannelInit>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800096a:	f000 fc65 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800096e:	bf00      	nop
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000164 	.word	0x20000164
 8000978:	40016020 	.word	0x40016020

0800097c <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000980:	4b2f      	ldr	r3, [pc, #188]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 8000982:	4a30      	ldr	r2, [pc, #192]	; (8000a44 <MX_DFSDM2_Init+0xc8>)
 8000984:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000986:	4b2e      	ldr	r3, [pc, #184]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 8000988:	2201      	movs	r2, #1
 800098a:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800098c:	4b2c      	ldr	r3, [pc, #176]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 8000994:	2202      	movs	r2, #2
 8000996:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800099e:	4b28      	ldr	r3, [pc, #160]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009a4:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80009aa:	4b25      	ldr	r3, [pc, #148]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 80009ac:	2202      	movs	r2, #2
 80009ae:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80009b0:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009b6:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 80009bc:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 80009be:	2201      	movs	r2, #1
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 80009ce:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_DFSDM2_Init+0xc4>)
 80009d0:	f003 faa4 	bl	8003f1c <HAL_DFSDM_ChannelInit>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d001      	beq.n	80009de <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 80009da:	f000 fc2d 	bl	8001238 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 80009de:	4b1a      	ldr	r3, [pc, #104]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 80009e0:	4a1a      	ldr	r2, [pc, #104]	; (8000a4c <MX_DFSDM2_Init+0xd0>)
 80009e2:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 80009e4:	4b18      	ldr	r3, [pc, #96]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 80009e6:	2201      	movs	r2, #1
 80009e8:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80009ea:	4b17      	ldr	r3, [pc, #92]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 80009f0:	4b15      	ldr	r3, [pc, #84]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 80009f2:	2202      	movs	r2, #2
 80009f4:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80009f6:	4b14      	ldr	r3, [pc, #80]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80009fc:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000a02:	4b11      	ldr	r3, [pc, #68]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000a08:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 8000a0a:	2202      	movs	r2, #2
 8000a0c:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 8000a20:	4b09      	ldr	r3, [pc, #36]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 8000a26:	4b08      	ldr	r3, [pc, #32]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <MX_DFSDM2_Init+0xcc>)
 8000a2e:	f003 fa75 	bl	8003f1c <HAL_DFSDM_ChannelInit>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 8000a38:	f000 fbfe 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2000019c 	.word	0x2000019c
 8000a44:	40016420 	.word	0x40016420
 8000a48:	200001d4 	.word	0x200001d4
 8000a4c:	400164e0 	.word	0x400164e0

08000a50 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 8000a54:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a56:	4a17      	ldr	r2, [pc, #92]	; (8000ab4 <MX_FMPI2C1_Init+0x64>)
 8000a58:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a5c:	4a16      	ldr	r2, [pc, #88]	; (8000ab8 <MX_FMPI2C1_Init+0x68>)
 8000a5e:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000a60:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a68:	2201      	movs	r2, #1
 8000a6a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000a84:	4b0a      	ldr	r3, [pc, #40]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000a8a:	4809      	ldr	r0, [pc, #36]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a8c:	f003 fe0c 	bl	80046a8 <HAL_FMPI2C_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000a96:	f000 fbcf 	bl	8001238 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <MX_FMPI2C1_Init+0x60>)
 8000a9e:	f003 fe92 	bl	80047c6 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000aa8:	f000 fbc6 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000020c 	.word	0x2000020c
 8000ab4:	40006000 	.word	0x40006000
 8000ab8:	00303d5b 	.word	0x00303d5b

08000abc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000ac2:	4a13      	ldr	r2, [pc, #76]	; (8000b10 <MX_I2C2_Init+0x54>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000ac8:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <MX_I2C2_Init+0x58>)
 8000aca:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000acc:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad8:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_I2C2_Init+0x50>)
 8000afa:	f005 fd83 	bl	8006604 <HAL_I2C_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b04:	f000 fb98 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000258 	.word	0x20000258
 8000b10:	40005800 	.word	0x40005800
 8000b14:	000186a0 	.word	0x000186a0

08000b18 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b1e:	4a14      	ldr	r2, [pc, #80]	; (8000b70 <MX_I2S2_Init+0x58>)
 8000b20:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000b22:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b28:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b3c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b40:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000b44:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000b46:	4b09      	ldr	r3, [pc, #36]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000b52:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	; (8000b6c <MX_I2S2_Init+0x54>)
 8000b5a:	f005 fe97 	bl	800688c <HAL_I2S_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000b64:	f000 fb68 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	200002ac 	.word	0x200002ac
 8000b70:	40003800 	.word	0x40003800

08000b74 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b7a:	4a13      	ldr	r2, [pc, #76]	; (8000bc8 <MX_QUADSPI_Init+0x54>)
 8000b7c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b80:	22ff      	movs	r2, #255	; 0xff
 8000b82:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b86:	2201      	movs	r2, #1
 8000b88:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_QUADSPI_Init+0x50>)
 8000bb0:	f006 fb10 	bl	80071d4 <HAL_QSPI_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000bba:	f000 fb3d 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200002f4 	.word	0x200002f4
 8000bc8:	a0001000 	.word	0xa0001000

08000bcc <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <MX_SDIO_SD_Init+0x38>)
 8000bd2:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <MX_SDIO_SD_Init+0x3c>)
 8000bd4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000bd6:	4b0b      	ldr	r3, [pc, #44]	; (8000c04 <MX_SDIO_SD_Init+0x38>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000bdc:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <MX_SDIO_SD_Init+0x38>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <MX_SDIO_SD_Init+0x38>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000be8:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <MX_SDIO_SD_Init+0x38>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <MX_SDIO_SD_Init+0x38>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000bf4:	4b03      	ldr	r3, [pc, #12]	; (8000c04 <MX_SDIO_SD_Init+0x38>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	20000340 	.word	0x20000340
 8000c08:	40012c00 	.word	0x40012c00

08000c0c <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000c10:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_UART10_Init+0x4c>)
 8000c12:	4a12      	ldr	r2, [pc, #72]	; (8000c5c <MX_UART10_Init+0x50>)
 8000c14:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000c16:	4b10      	ldr	r3, [pc, #64]	; (8000c58 <MX_UART10_Init+0x4c>)
 8000c18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c1c:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_UART10_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_UART10_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000c2a:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <MX_UART10_Init+0x4c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000c30:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_UART10_Init+0x4c>)
 8000c32:	220c      	movs	r2, #12
 8000c34:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <MX_UART10_Init+0x4c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_UART10_Init+0x4c>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000c42:	4805      	ldr	r0, [pc, #20]	; (8000c58 <MX_UART10_Init+0x4c>)
 8000c44:	f009 f934 	bl	8009eb0 <HAL_UART_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000c4e:	f000 faf3 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	200003c4 	.word	0x200003c4
 8000c5c:	40011c00 	.word	0x40011c00

08000c60 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c64:	4b11      	ldr	r3, [pc, #68]	; (8000cac <MX_USART6_UART_Init+0x4c>)
 8000c66:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_USART6_UART_Init+0x50>)
 8000c68:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c6a:	4b10      	ldr	r3, [pc, #64]	; (8000cac <MX_USART6_UART_Init+0x4c>)
 8000c6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c70:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c72:	4b0e      	ldr	r3, [pc, #56]	; (8000cac <MX_USART6_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <MX_USART6_UART_Init+0x4c>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <MX_USART6_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c84:	4b09      	ldr	r3, [pc, #36]	; (8000cac <MX_USART6_UART_Init+0x4c>)
 8000c86:	220c      	movs	r2, #12
 8000c88:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <MX_USART6_UART_Init+0x4c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <MX_USART6_UART_Init+0x4c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c96:	4805      	ldr	r0, [pc, #20]	; (8000cac <MX_USART6_UART_Init+0x4c>)
 8000c98:	f009 f90a 	bl	8009eb0 <HAL_UART_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000ca2:	f000 fac9 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000404 	.word	0x20000404
 8000cb0:	40011400 	.word	0x40011400

08000cb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08e      	sub	sp, #56	; 0x38
 8000cb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	605a      	str	r2, [r3, #4]
 8000cc4:	609a      	str	r2, [r3, #8]
 8000cc6:	60da      	str	r2, [r3, #12]
 8000cc8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
 8000cce:	4bb0      	ldr	r3, [pc, #704]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4aaf      	ldr	r2, [pc, #700]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4bad      	ldr	r3, [pc, #692]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	623b      	str	r3, [r7, #32]
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	4ba9      	ldr	r3, [pc, #676]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4aa8      	ldr	r2, [pc, #672]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4ba6      	ldr	r3, [pc, #664]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	4ba2      	ldr	r3, [pc, #648]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4aa1      	ldr	r2, [pc, #644]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d0c:	f043 0320 	orr.w	r3, r3, #32
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b9f      	ldr	r3, [pc, #636]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0320 	and.w	r3, r3, #32
 8000d1a:	61bb      	str	r3, [r7, #24]
 8000d1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	4b9b      	ldr	r3, [pc, #620]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a9a      	ldr	r2, [pc, #616]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b98      	ldr	r3, [pc, #608]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b94      	ldr	r3, [pc, #592]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a93      	ldr	r2, [pc, #588]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b91      	ldr	r3, [pc, #580]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b8d      	ldr	r3, [pc, #564]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a8c      	ldr	r2, [pc, #560]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b8a      	ldr	r3, [pc, #552]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b86      	ldr	r3, [pc, #536]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a85      	ldr	r2, [pc, #532]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b83      	ldr	r3, [pc, #524]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b7f      	ldr	r3, [pc, #508]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a7e      	ldr	r2, [pc, #504]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b7c      	ldr	r3, [pc, #496]	; (8000f90 <MX_GPIO_Init+0x2dc>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2138      	movs	r1, #56	; 0x38
 8000dae:	4879      	ldr	r0, [pc, #484]	; (8000f94 <MX_GPIO_Init+0x2e0>)
 8000db0:	f003 ff00 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2120      	movs	r1, #32
 8000db8:	4877      	ldr	r0, [pc, #476]	; (8000f98 <MX_GPIO_Init+0x2e4>)
 8000dba:	f003 fefb 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000dc4:	4875      	ldr	r0, [pc, #468]	; (8000f9c <MX_GPIO_Init+0x2e8>)
 8000dc6:	f003 fef5 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	4873      	ldr	r0, [pc, #460]	; (8000fa0 <MX_GPIO_Init+0x2ec>)
 8000dd2:	f003 feef 	bl	8004bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000dd6:	2338      	movs	r3, #56	; 0x38
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dde:	2300      	movs	r3, #0
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de2:	2300      	movs	r3, #0
 8000de4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dea:	4619      	mov	r1, r3
 8000dec:	4869      	ldr	r0, [pc, #420]	; (8000f94 <MX_GPIO_Init+0x2e0>)
 8000dee:	f003 fd35 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000df2:	2340      	movs	r3, #64	; 0x40
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df6:	2302      	movs	r3, #2
 8000df8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000e02:	2303      	movs	r3, #3
 8000e04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4861      	ldr	r0, [pc, #388]	; (8000f94 <MX_GPIO_Init+0x2e0>)
 8000e0e:	f003 fd25 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000e12:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	485f      	ldr	r0, [pc, #380]	; (8000fa4 <MX_GPIO_Init+0x2f0>)
 8000e28:	f003 fd18 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e30:	4b5d      	ldr	r3, [pc, #372]	; (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000e32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4856      	ldr	r0, [pc, #344]	; (8000f98 <MX_GPIO_Init+0x2e4>)
 8000e40:	f003 fd0c 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000e44:	2301      	movs	r3, #1
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e48:	4b57      	ldr	r3, [pc, #348]	; (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4855      	ldr	r0, [pc, #340]	; (8000fac <MX_GPIO_Init+0x2f8>)
 8000e58:	f003 fd00 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000e5c:	2320      	movs	r3, #32
 8000e5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e60:	2301      	movs	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4849      	ldr	r0, [pc, #292]	; (8000f98 <MX_GPIO_Init+0x2e4>)
 8000e74:	f003 fcf2 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	4842      	ldr	r0, [pc, #264]	; (8000f9c <MX_GPIO_Init+0x2e8>)
 8000e94:	f003 fce2 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000e98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9e:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	483d      	ldr	r0, [pc, #244]	; (8000fa4 <MX_GPIO_Init+0x2f0>)
 8000eae:	f003 fcd5 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000eb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000ec4:	2307      	movs	r3, #7
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4833      	ldr	r0, [pc, #204]	; (8000f9c <MX_GPIO_Init+0x2e8>)
 8000ed0:	f003 fcc4 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000ed4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	482b      	ldr	r0, [pc, #172]	; (8000f9c <MX_GPIO_Init+0x2e8>)
 8000eee:	f003 fcb5 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000ef2:	f248 0380 	movw	r3, #32896	; 0x8080
 8000ef6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef8:	4b2b      	ldr	r3, [pc, #172]	; (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000efa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4826      	ldr	r0, [pc, #152]	; (8000fa0 <MX_GPIO_Init+0x2ec>)
 8000f08:	f003 fca8 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f12:	2301      	movs	r3, #1
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	4619      	mov	r1, r3
 8000f24:	481e      	ldr	r0, [pc, #120]	; (8000fa0 <MX_GPIO_Init+0x2ec>)
 8000f26:	f003 fc99 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000f2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	2302      	movs	r3, #2
 8000f32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f34:	2300      	movs	r3, #0
 8000f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f44:	4619      	mov	r1, r3
 8000f46:	4819      	ldr	r0, [pc, #100]	; (8000fac <MX_GPIO_Init+0x2f8>)
 8000f48:	f003 fc88 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f5e:	4619      	mov	r1, r3
 8000f60:	480f      	ldr	r0, [pc, #60]	; (8000fa0 <MX_GPIO_Init+0x2ec>)
 8000f62:	f003 fc7b 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000f66:	2330      	movs	r3, #48	; 0x30
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f76:	2306      	movs	r3, #6
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4806      	ldr	r0, [pc, #24]	; (8000f9c <MX_GPIO_Init+0x2e8>)
 8000f82:	f003 fc6b 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f86:	2340      	movs	r3, #64	; 0x40
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <MX_GPIO_Init+0x2f4>)
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f8e:	e00f      	b.n	8000fb0 <MX_GPIO_Init+0x2fc>
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40020800 	.word	0x40020800
 8000f9c:	40020400 	.word	0x40020400
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	40021400 	.word	0x40021400
 8000fa8:	10110000 	.word	0x10110000
 8000fac:	40020000 	.word	0x40020000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_GPIO_Init+0x338>)
 8000fbc:	f003 fc4e 	bl	800485c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000fc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <MX_GPIO_Init+0x338>)
 8000fde:	f003 fc3d 	bl	800485c <HAL_GPIO_Init>

}
 8000fe2:	bf00      	nop
 8000fe4:	3738      	adds	r7, #56	; 0x38
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40020400 	.word	0x40020400

08000ff0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001008:	4b4f      	ldr	r3, [pc, #316]	; (8001148 <MX_FSMC_Init+0x158>)
 800100a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800100e:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <MX_FSMC_Init+0x158>)
 8001012:	4a4e      	ldr	r2, [pc, #312]	; (800114c <MX_FSMC_Init+0x15c>)
 8001014:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001016:	4b4c      	ldr	r3, [pc, #304]	; (8001148 <MX_FSMC_Init+0x158>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 800101c:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <MX_FSMC_Init+0x158>)
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <MX_FSMC_Init+0x158>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001028:	4b47      	ldr	r3, [pc, #284]	; (8001148 <MX_FSMC_Init+0x158>)
 800102a:	2210      	movs	r2, #16
 800102c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800102e:	4b46      	ldr	r3, [pc, #280]	; (8001148 <MX_FSMC_Init+0x158>)
 8001030:	2200      	movs	r2, #0
 8001032:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001034:	4b44      	ldr	r3, [pc, #272]	; (8001148 <MX_FSMC_Init+0x158>)
 8001036:	2200      	movs	r2, #0
 8001038:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800103a:	4b43      	ldr	r3, [pc, #268]	; (8001148 <MX_FSMC_Init+0x158>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <MX_FSMC_Init+0x158>)
 8001042:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001046:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <MX_FSMC_Init+0x158>)
 800104a:	2200      	movs	r2, #0
 800104c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800104e:	4b3e      	ldr	r3, [pc, #248]	; (8001148 <MX_FSMC_Init+0x158>)
 8001050:	2200      	movs	r2, #0
 8001052:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <MX_FSMC_Init+0x158>)
 8001056:	2200      	movs	r2, #0
 8001058:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <MX_FSMC_Init+0x158>)
 800105c:	2200      	movs	r2, #0
 800105e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001060:	4b39      	ldr	r3, [pc, #228]	; (8001148 <MX_FSMC_Init+0x158>)
 8001062:	2200      	movs	r2, #0
 8001064:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <MX_FSMC_Init+0x158>)
 8001068:	2200      	movs	r2, #0
 800106a:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800106c:	4b36      	ldr	r3, [pc, #216]	; (8001148 <MX_FSMC_Init+0x158>)
 800106e:	2200      	movs	r2, #0
 8001070:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001072:	230f      	movs	r3, #15
 8001074:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001076:	230f      	movs	r3, #15
 8001078:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800107a:	23ff      	movs	r3, #255	; 0xff
 800107c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800107e:	230f      	movs	r3, #15
 8001080:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001082:	2310      	movs	r3, #16
 8001084:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001086:	2311      	movs	r3, #17
 8001088:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800108a:	2300      	movs	r3, #0
 800108c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2200      	movs	r2, #0
 8001092:	4619      	mov	r1, r3
 8001094:	482c      	ldr	r0, [pc, #176]	; (8001148 <MX_FSMC_Init+0x158>)
 8001096:	f008 fc89 	bl	80099ac <HAL_SRAM_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 80010a0:	f000 f8ca 	bl	8001238 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 80010a4:	4b2a      	ldr	r3, [pc, #168]	; (8001150 <MX_FSMC_Init+0x160>)
 80010a6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80010aa:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80010ac:	4b28      	ldr	r3, [pc, #160]	; (8001150 <MX_FSMC_Init+0x160>)
 80010ae:	4a27      	ldr	r2, [pc, #156]	; (800114c <MX_FSMC_Init+0x15c>)
 80010b0:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 80010b2:	4b27      	ldr	r3, [pc, #156]	; (8001150 <MX_FSMC_Init+0x160>)
 80010b4:	2204      	movs	r2, #4
 80010b6:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80010b8:	4b25      	ldr	r3, [pc, #148]	; (8001150 <MX_FSMC_Init+0x160>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80010be:	4b24      	ldr	r3, [pc, #144]	; (8001150 <MX_FSMC_Init+0x160>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80010c4:	4b22      	ldr	r3, [pc, #136]	; (8001150 <MX_FSMC_Init+0x160>)
 80010c6:	2210      	movs	r2, #16
 80010c8:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80010ca:	4b21      	ldr	r3, [pc, #132]	; (8001150 <MX_FSMC_Init+0x160>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80010d0:	4b1f      	ldr	r3, [pc, #124]	; (8001150 <MX_FSMC_Init+0x160>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80010d6:	4b1e      	ldr	r3, [pc, #120]	; (8001150 <MX_FSMC_Init+0x160>)
 80010d8:	2200      	movs	r2, #0
 80010da:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80010dc:	4b1c      	ldr	r3, [pc, #112]	; (8001150 <MX_FSMC_Init+0x160>)
 80010de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010e2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010e4:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_FSMC_Init+0x160>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010ea:	4b19      	ldr	r3, [pc, #100]	; (8001150 <MX_FSMC_Init+0x160>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010f0:	4b17      	ldr	r3, [pc, #92]	; (8001150 <MX_FSMC_Init+0x160>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_FSMC_Init+0x160>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_FSMC_Init+0x160>)
 80010fe:	2200      	movs	r2, #0
 8001100:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <MX_FSMC_Init+0x160>)
 8001104:	2200      	movs	r2, #0
 8001106:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <MX_FSMC_Init+0x160>)
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 800110e:	230f      	movs	r3, #15
 8001110:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001112:	230f      	movs	r3, #15
 8001114:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001116:	23ff      	movs	r3, #255	; 0xff
 8001118:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800111a:	230f      	movs	r3, #15
 800111c:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800111e:	2310      	movs	r3, #16
 8001120:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001122:	2311      	movs	r3, #17
 8001124:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2200      	movs	r2, #0
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_FSMC_Init+0x160>)
 8001132:	f008 fc3b 	bl	80099ac <HAL_SRAM_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 800113c:	f000 f87c 	bl	8001238 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001140:	bf00      	nop
 8001142:	3720      	adds	r7, #32
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000444 	.word	0x20000444
 800114c:	a0000104 	.word	0xa0000104
 8001150:	20000494 	.word	0x20000494

08001154 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 800115c:	f013 fbe6 	bl	801492c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8001160:	2108      	movs	r1, #8
 8001162:	4803      	ldr	r0, [pc, #12]	; (8001170 <StartDefaultTask+0x1c>)
 8001164:	f003 fd3f 	bl	8004be6 <HAL_GPIO_TogglePin>
    osDelay(250);
 8001168:	20fa      	movs	r0, #250	; 0xfa
 800116a:	f00f ff25 	bl	8010fb8 <osDelay>
	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 800116e:	e7f7      	b.n	8001160 <StartDefaultTask+0xc>
 8001170:	40021000 	.word	0x40021000

08001174 <StartInitializeSDCard>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartInitializeSDCard */
void StartInitializeSDCard(void *argument)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b0ba      	sub	sp, #232	; 0xe8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
	FILE fil;
    FRESULT res;        /* API result code */
    BYTE work[8]; /* Work area (larger is better for processing time) */
    char line[100];

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 800117c:	2201      	movs	r2, #1
 800117e:	2120      	movs	r1, #32
 8001180:	4821      	ldr	r0, [pc, #132]	; (8001208 <StartInitializeSDCard+0x94>)
 8001182:	f003 fd17 	bl	8004bb4 <HAL_GPIO_WritePin>
   	f_mount(&fs, "", 0);
 8001186:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800118a:	2200      	movs	r2, #0
 800118c:	491f      	ldr	r1, [pc, #124]	; (800120c <StartInitializeSDCard+0x98>)
 800118e:	4618      	mov	r0, r3
 8001190:	f00f f93a 	bl	8010408 <f_mount>
   	res = f_open(&fil, "test1.txt", FA_READ);
 8001194:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001198:	2201      	movs	r2, #1
 800119a:	491d      	ldr	r1, [pc, #116]	; (8001210 <StartInitializeSDCard+0x9c>)
 800119c:	4618      	mov	r0, r3
 800119e:	f00f f997 	bl	80104d0 <f_open>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80011a8:	2200      	movs	r2, #0
 80011aa:	2120      	movs	r1, #32
 80011ac:	4816      	ldr	r0, [pc, #88]	; (8001208 <StartInitializeSDCard+0x94>)
 80011ae:	f003 fd01 	bl	8004bb4 <HAL_GPIO_WritePin>
   	if(res == FR_OK)
 80011b2:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d117      	bne.n	80011ea <StartInitializeSDCard+0x76>
   	{

   		for(;;)
   		{
   			if(f_gets(line, sizeof(line), &fil))
 80011ba:	f107 0278 	add.w	r2, r7, #120	; 0x78
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2164      	movs	r1, #100	; 0x64
 80011c4:	4618      	mov	r0, r3
 80011c6:	f00f fcb6 	bl	8010b36 <f_gets>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d004      	beq.n	80011da <StartInitializeSDCard+0x66>
   				printf(line);
 80011d0:	f107 030c 	add.w	r3, r7, #12
 80011d4:	4618      	mov	r0, r3
 80011d6:	f014 f8d7 	bl	8015388 <iprintf>
    		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 80011da:	2120      	movs	r1, #32
 80011dc:	480a      	ldr	r0, [pc, #40]	; (8001208 <StartInitializeSDCard+0x94>)
 80011de:	f003 fd02 	bl	8004be6 <HAL_GPIO_TogglePin>
    		osDelay(200);
 80011e2:	20c8      	movs	r0, #200	; 0xc8
 80011e4:	f00f fee8 	bl	8010fb8 <osDelay>
   			if(f_gets(line, sizeof(line), &fil))
 80011e8:	e7e7      	b.n	80011ba <StartInitializeSDCard+0x46>
    	}
   	}

    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2120      	movs	r1, #32
 80011ee:	4806      	ldr	r0, [pc, #24]	; (8001208 <StartInitializeSDCard+0x94>)
 80011f0:	f003 fce0 	bl	8004bb4 <HAL_GPIO_WritePin>
    free(fs);
 80011f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80011f8:	4618      	mov	r0, r3
 80011fa:	f013 ffc7 	bl	801518c <free>
  /* USER CODE END StartInitializeSDCard */
}
 80011fe:	bf00      	nop
 8001200:	37e8      	adds	r7, #232	; 0xe8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40020800 	.word	0x40020800
 800120c:	0801604c 	.word	0x0801604c
 8001210:	08016050 	.word	0x08016050

08001214 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a04      	ldr	r2, [pc, #16]	; (8001234 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d101      	bne.n	800122a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001226:	f002 fa13 	bl	8003650 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40001000 	.word	0x40001000

08001238 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <HAL_MspInit+0x58>)
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <HAL_MspInit+0x58>)
 8001258:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800125c:	6453      	str	r3, [r2, #68]	; 0x44
 800125e:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_MspInit+0x58>)
 8001260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001262:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	603b      	str	r3, [r7, #0]
 800126e:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <HAL_MspInit+0x58>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <HAL_MspInit+0x58>)
 8001274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001278:	6413      	str	r3, [r2, #64]	; 0x40
 800127a:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <HAL_MspInit+0x58>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001282:	603b      	str	r3, [r7, #0]
 8001284:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001286:	2200      	movs	r2, #0
 8001288:	2100      	movs	r1, #0
 800128a:	2005      	movs	r0, #5
 800128c:	f002 fd4e 	bl	8003d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001290:	2005      	movs	r0, #5
 8001292:	f002 fd67 	bl	8003d64 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40023800 	.word	0x40023800

080012a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 031c 	add.w	r3, r7, #28
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a31      	ldr	r2, [pc, #196]	; (8001388 <HAL_ADC_MspInit+0xe4>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d15b      	bne.n	800137e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
 80012ca:	4b30      	ldr	r3, [pc, #192]	; (800138c <HAL_ADC_MspInit+0xe8>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a2f      	ldr	r2, [pc, #188]	; (800138c <HAL_ADC_MspInit+0xe8>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b2d      	ldr	r3, [pc, #180]	; (800138c <HAL_ADC_MspInit+0xe8>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
 80012e6:	4b29      	ldr	r3, [pc, #164]	; (800138c <HAL_ADC_MspInit+0xe8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	4a28      	ldr	r2, [pc, #160]	; (800138c <HAL_ADC_MspInit+0xe8>)
 80012ec:	f043 0304 	orr.w	r3, r3, #4
 80012f0:	6313      	str	r3, [r2, #48]	; 0x30
 80012f2:	4b26      	ldr	r3, [pc, #152]	; (800138c <HAL_ADC_MspInit+0xe8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	f003 0304 	and.w	r3, r3, #4
 80012fa:	617b      	str	r3, [r7, #20]
 80012fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
 8001302:	4b22      	ldr	r3, [pc, #136]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	4a21      	ldr	r2, [pc, #132]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	; 0x30
 800130e:	4b1f      	ldr	r3, [pc, #124]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
 800131e:	4b1b      	ldr	r3, [pc, #108]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a1a      	ldr	r2, [pc, #104]	; (800138c <HAL_ADC_MspInit+0xe8>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b18      	ldr	r3, [pc, #96]	; (800138c <HAL_ADC_MspInit+0xe8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001336:	2311      	movs	r3, #17
 8001338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800133a:	2303      	movs	r3, #3
 800133c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4811      	ldr	r0, [pc, #68]	; (8001390 <HAL_ADC_MspInit+0xec>)
 800134a:	f003 fa87 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800134e:	2326      	movs	r3, #38	; 0x26
 8001350:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001352:	2303      	movs	r3, #3
 8001354:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	480c      	ldr	r0, [pc, #48]	; (8001394 <HAL_ADC_MspInit+0xf0>)
 8001362:	f003 fa7b 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001366:	2302      	movs	r3, #2
 8001368:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136a:	2303      	movs	r3, #3
 800136c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4807      	ldr	r0, [pc, #28]	; (8001398 <HAL_ADC_MspInit+0xf4>)
 800137a:	f003 fa6f 	bl	800485c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800137e:	bf00      	nop
 8001380:	3730      	adds	r7, #48	; 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40012000 	.word	0x40012000
 800138c:	40023800 	.word	0x40023800
 8001390:	40020800 	.word	0x40020800
 8001394:	40020000 	.word	0x40020000
 8001398:	40020400 	.word	0x40020400

0800139c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a1b      	ldr	r2, [pc, #108]	; (8001428 <HAL_DAC_MspInit+0x8c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12f      	bne.n	800141e <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_DAC_MspInit+0x90>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a19      	ldr	r2, [pc, #100]	; (800142c <HAL_DAC_MspInit+0x90>)
 80013c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b17      	ldr	r3, [pc, #92]	; (800142c <HAL_DAC_MspInit+0x90>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b13      	ldr	r3, [pc, #76]	; (800142c <HAL_DAC_MspInit+0x90>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <HAL_DAC_MspInit+0x90>)
 80013e4:	f043 0301 	orr.w	r3, r3, #1
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b10      	ldr	r3, [pc, #64]	; (800142c <HAL_DAC_MspInit+0x90>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0301 	and.w	r3, r3, #1
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80013f6:	2310      	movs	r3, #16
 80013f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013fa:	2303      	movs	r3, #3
 80013fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001402:	f107 0314 	add.w	r3, r7, #20
 8001406:	4619      	mov	r1, r3
 8001408:	4809      	ldr	r0, [pc, #36]	; (8001430 <HAL_DAC_MspInit+0x94>)
 800140a:	f003 fa27 	bl	800485c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2100      	movs	r1, #0
 8001412:	2036      	movs	r0, #54	; 0x36
 8001414:	f002 fc8a 	bl	8003d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001418:	2036      	movs	r0, #54	; 0x36
 800141a:	f002 fca3 	bl	8003d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	; 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40007400 	.word	0x40007400
 800142c:	40023800 	.word	0x40023800
 8001430:	40020000 	.word	0x40020000

08001434 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b08e      	sub	sp, #56	; 0x38
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800143c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
 800144a:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a77      	ldr	r2, [pc, #476]	; (8001630 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d00e      	beq.n	8001474 <HAL_DFSDM_ChannelMspInit+0x40>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a76      	ldr	r2, [pc, #472]	; (8001634 <HAL_DFSDM_ChannelMspInit+0x200>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d009      	beq.n	8001474 <HAL_DFSDM_ChannelMspInit+0x40>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a74      	ldr	r2, [pc, #464]	; (8001638 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d004      	beq.n	8001474 <HAL_DFSDM_ChannelMspInit+0x40>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a73      	ldr	r2, [pc, #460]	; (800163c <HAL_DFSDM_ChannelMspInit+0x208>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d154      	bne.n	800151e <HAL_DFSDM_ChannelMspInit+0xea>
 8001474:	4b72      	ldr	r3, [pc, #456]	; (8001640 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d150      	bne.n	800151e <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800147c:	2300      	movs	r3, #0
 800147e:	623b      	str	r3, [r7, #32]
 8001480:	4b70      	ldr	r3, [pc, #448]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	4a6f      	ldr	r2, [pc, #444]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800148a:	6453      	str	r3, [r2, #68]	; 0x44
 800148c:	4b6d      	ldr	r3, [pc, #436]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001494:	623b      	str	r3, [r7, #32]
 8001496:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001498:	2300      	movs	r3, #0
 800149a:	61fb      	str	r3, [r7, #28]
 800149c:	4b69      	ldr	r3, [pc, #420]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	4a68      	ldr	r2, [pc, #416]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6313      	str	r3, [r2, #48]	; 0x30
 80014a8:	4b66      	ldr	r3, [pc, #408]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	61fb      	str	r3, [r7, #28]
 80014b2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014b4:	2300      	movs	r3, #0
 80014b6:	61bb      	str	r3, [r7, #24]
 80014b8:	4b62      	ldr	r3, [pc, #392]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014bc:	4a61      	ldr	r2, [pc, #388]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014be:	f043 0308 	orr.w	r3, r3, #8
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
 80014c4:	4b5f      	ldr	r3, [pc, #380]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	f003 0308 	and.w	r3, r3, #8
 80014cc:	61bb      	str	r3, [r7, #24]
 80014ce:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80014d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80014e2:	2306      	movs	r3, #6
 80014e4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	4856      	ldr	r0, [pc, #344]	; (8001648 <HAL_DFSDM_ChannelMspInit+0x214>)
 80014ee:	f003 f9b5 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80014f2:	2340      	movs	r3, #64	; 0x40
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001502:	2306      	movs	r3, #6
 8001504:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001506:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150a:	4619      	mov	r1, r3
 800150c:	484f      	ldr	r0, [pc, #316]	; (800164c <HAL_DFSDM_ChannelMspInit+0x218>)
 800150e:	f003 f9a5 	bl	800485c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001512:	4b4b      	ldr	r3, [pc, #300]	; (8001640 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	3301      	adds	r3, #1
 8001518:	4a49      	ldr	r2, [pc, #292]	; (8001640 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800151a:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 800151c:	e084      	b.n	8001628 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a43      	ldr	r2, [pc, #268]	; (8001630 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d07f      	beq.n	8001628 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a41      	ldr	r2, [pc, #260]	; (8001634 <HAL_DFSDM_ChannelMspInit+0x200>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d07a      	beq.n	8001628 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a40      	ldr	r2, [pc, #256]	; (8001638 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d075      	beq.n	8001628 <HAL_DFSDM_ChannelMspInit+0x1f4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a3e      	ldr	r2, [pc, #248]	; (800163c <HAL_DFSDM_ChannelMspInit+0x208>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d070      	beq.n	8001628 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d16c      	bne.n	8001628 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
 8001552:	4b3c      	ldr	r3, [pc, #240]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a3b      	ldr	r2, [pc, #236]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001558:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b39      	ldr	r3, [pc, #228]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	613b      	str	r3, [r7, #16]
 800156e:	4b35      	ldr	r3, [pc, #212]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a34      	ldr	r2, [pc, #208]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b32      	ldr	r3, [pc, #200]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	4b2e      	ldr	r3, [pc, #184]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a2d      	ldr	r2, [pc, #180]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001590:	f043 0308 	orr.w	r3, r3, #8
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b2b      	ldr	r3, [pc, #172]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b27      	ldr	r3, [pc, #156]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015aa:	4a26      	ldr	r2, [pc, #152]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 80015ac:	f043 0302 	orr.w	r3, r3, #2
 80015b0:	6313      	str	r3, [r2, #48]	; 0x30
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_DFSDM_ChannelMspInit+0x210>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	f003 0302 	and.w	r3, r3, #2
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 80015ce:	2307      	movs	r3, #7
 80015d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d6:	4619      	mov	r1, r3
 80015d8:	481b      	ldr	r0, [pc, #108]	; (8001648 <HAL_DFSDM_ChannelMspInit+0x214>)
 80015da:	f003 f93f 	bl	800485c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 80015de:	2304      	movs	r3, #4
 80015e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ea:	2300      	movs	r3, #0
 80015ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80015ee:	2303      	movs	r3, #3
 80015f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	4619      	mov	r1, r3
 80015f8:	4814      	ldr	r0, [pc, #80]	; (800164c <HAL_DFSDM_ChannelMspInit+0x218>)
 80015fa:	f003 f92f 	bl	800485c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 800160e:	2306      	movs	r3, #6
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001616:	4619      	mov	r1, r3
 8001618:	480e      	ldr	r0, [pc, #56]	; (8001654 <HAL_DFSDM_ChannelMspInit+0x220>)
 800161a:	f003 f91f 	bl	800485c <HAL_GPIO_Init>
  DFSDM2_Init++;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	3738      	adds	r7, #56	; 0x38
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40016000 	.word	0x40016000
 8001634:	40016020 	.word	0x40016020
 8001638:	40016040 	.word	0x40016040
 800163c:	40016060 	.word	0x40016060
 8001640:	200004f8 	.word	0x200004f8
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020c00 	.word	0x40020c00
 8001650:	200004fc 	.word	0x200004fc
 8001654:	40020400 	.word	0x40020400

08001658 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b08a      	sub	sp, #40	; 0x28
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a19      	ldr	r2, [pc, #100]	; (80016dc <HAL_FMPI2C_MspInit+0x84>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d12b      	bne.n	80016d2 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <HAL_FMPI2C_MspInit+0x88>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001682:	4a17      	ldr	r2, [pc, #92]	; (80016e0 <HAL_FMPI2C_MspInit+0x88>)
 8001684:	f043 0304 	orr.w	r3, r3, #4
 8001688:	6313      	str	r3, [r2, #48]	; 0x30
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <HAL_FMPI2C_MspInit+0x88>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	f003 0304 	and.w	r3, r3, #4
 8001692:	613b      	str	r3, [r7, #16]
 8001694:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001696:	23c0      	movs	r3, #192	; 0xc0
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169a:	2312      	movs	r3, #18
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800169e:	2301      	movs	r3, #1
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 80016a6:	2304      	movs	r3, #4
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	480c      	ldr	r0, [pc, #48]	; (80016e4 <HAL_FMPI2C_MspInit+0x8c>)
 80016b2:	f003 f8d3 	bl	800485c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <HAL_FMPI2C_MspInit+0x88>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016be:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <HAL_FMPI2C_MspInit+0x88>)
 80016c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016c4:	6413      	str	r3, [r2, #64]	; 0x40
 80016c6:	4b06      	ldr	r3, [pc, #24]	; (80016e0 <HAL_FMPI2C_MspInit+0x88>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3728      	adds	r7, #40	; 0x28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40006000 	.word	0x40006000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020800 	.word	0x40020800

080016e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08a      	sub	sp, #40	; 0x28
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0314 	add.w	r3, r7, #20
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a19      	ldr	r2, [pc, #100]	; (800176c <HAL_I2C_MspInit+0x84>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d12c      	bne.n	8001764 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <HAL_I2C_MspInit+0x88>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a17      	ldr	r2, [pc, #92]	; (8001770 <HAL_I2C_MspInit+0x88>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b15      	ldr	r3, [pc, #84]	; (8001770 <HAL_I2C_MspInit+0x88>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	613b      	str	r3, [r7, #16]
 8001724:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001726:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800172a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800172c:	2312      	movs	r3, #18
 800172e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001730:	2301      	movs	r3, #1
 8001732:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001734:	2303      	movs	r3, #3
 8001736:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001738:	2304      	movs	r3, #4
 800173a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	4619      	mov	r1, r3
 8001742:	480c      	ldr	r0, [pc, #48]	; (8001774 <HAL_I2C_MspInit+0x8c>)
 8001744:	f003 f88a 	bl	800485c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	4b08      	ldr	r3, [pc, #32]	; (8001770 <HAL_I2C_MspInit+0x88>)
 800174e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001750:	4a07      	ldr	r2, [pc, #28]	; (8001770 <HAL_I2C_MspInit+0x88>)
 8001752:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001756:	6413      	str	r3, [r2, #64]	; 0x40
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_I2C_MspInit+0x88>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001764:	bf00      	nop
 8001766:	3728      	adds	r7, #40	; 0x28
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40005800 	.word	0x40005800
 8001770:	40023800 	.word	0x40023800
 8001774:	40020400 	.word	0x40020400

08001778 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_I2S_MspInit+0x15c>)
 8001796:	4293      	cmp	r3, r2
 8001798:	f040 8097 	bne.w	80018ca <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	4b4d      	ldr	r3, [pc, #308]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	4a4c      	ldr	r2, [pc, #304]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017aa:	6413      	str	r3, [r2, #64]	; 0x40
 80017ac:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b4:	61bb      	str	r3, [r7, #24]
 80017b6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
 80017bc:	4b46      	ldr	r3, [pc, #280]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c0:	4a45      	ldr	r2, [pc, #276]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6313      	str	r3, [r2, #48]	; 0x30
 80017c8:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a3e      	ldr	r2, [pc, #248]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	613b      	str	r3, [r7, #16]
 80017ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	4b38      	ldr	r3, [pc, #224]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	4a37      	ldr	r2, [pc, #220]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 80017fa:	f043 0308 	orr.w	r3, r3, #8
 80017fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001800:	4b35      	ldr	r3, [pc, #212]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 8001802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001804:	f003 0308 	and.w	r3, r3, #8
 8001808:	60fb      	str	r3, [r7, #12]
 800180a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800180c:	2300      	movs	r3, #0
 800180e:	60bb      	str	r3, [r7, #8]
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 8001812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001814:	4a30      	ldr	r2, [pc, #192]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	6313      	str	r3, [r2, #48]	; 0x30
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_I2S_MspInit+0x160>)
 800181e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001820:	f003 0302 	and.w	r3, r3, #2
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 8001828:	2304      	movs	r3, #4
 800182a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 8001838:	2306      	movs	r3, #6
 800183a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 800183c:	f107 031c 	add.w	r3, r7, #28
 8001840:	4619      	mov	r1, r3
 8001842:	4826      	ldr	r0, [pc, #152]	; (80018dc <HAL_I2S_MspInit+0x164>)
 8001844:	f003 f80a 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001848:	2308      	movs	r3, #8
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001858:	2305      	movs	r3, #5
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	481e      	ldr	r0, [pc, #120]	; (80018dc <HAL_I2S_MspInit+0x164>)
 8001864:	f002 fffa 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001868:	2308      	movs	r3, #8
 800186a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001878:	2305      	movs	r3, #5
 800187a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	4619      	mov	r1, r3
 8001882:	4817      	ldr	r0, [pc, #92]	; (80018e0 <HAL_I2S_MspInit+0x168>)
 8001884:	f002 ffea 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001888:	2308      	movs	r3, #8
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001898:	2305      	movs	r3, #5
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	4810      	ldr	r0, [pc, #64]	; (80018e4 <HAL_I2S_MspInit+0x16c>)
 80018a4:	f002 ffda 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 80018a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018ba:	2305      	movs	r3, #5
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 031c 	add.w	r3, r7, #28
 80018c2:	4619      	mov	r1, r3
 80018c4:	4808      	ldr	r0, [pc, #32]	; (80018e8 <HAL_I2S_MspInit+0x170>)
 80018c6:	f002 ffc9 	bl	800485c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80018ca:	bf00      	nop
 80018cc:	3730      	adds	r7, #48	; 0x30
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	40003800 	.word	0x40003800
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40020800 	.word	0x40020800
 80018e0:	40020000 	.word	0x40020000
 80018e4:	40020c00 	.word	0x40020c00
 80018e8:	40020400 	.word	0x40020400

080018ec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08e      	sub	sp, #56	; 0x38
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a56      	ldr	r2, [pc, #344]	; (8001a64 <HAL_QSPI_MspInit+0x178>)
 800190a:	4293      	cmp	r3, r2
 800190c:	f040 80a6 	bne.w	8001a5c <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	623b      	str	r3, [r7, #32]
 8001914:	4b54      	ldr	r3, [pc, #336]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 8001916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001918:	4a53      	ldr	r2, [pc, #332]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 800191a:	f043 0302 	orr.w	r3, r3, #2
 800191e:	6393      	str	r3, [r2, #56]	; 0x38
 8001920:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 8001922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001924:	f003 0302 	and.w	r3, r3, #2
 8001928:	623b      	str	r3, [r7, #32]
 800192a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	4b4d      	ldr	r3, [pc, #308]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	4a4c      	ldr	r2, [pc, #304]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 8001936:	f043 0310 	orr.w	r3, r3, #16
 800193a:	6313      	str	r3, [r2, #48]	; 0x30
 800193c:	4b4a      	ldr	r3, [pc, #296]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	f003 0310 	and.w	r3, r3, #16
 8001944:	61fb      	str	r3, [r7, #28]
 8001946:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	4a45      	ldr	r2, [pc, #276]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 8001952:	f043 0320 	orr.w	r3, r3, #32
 8001956:	6313      	str	r3, [r2, #48]	; 0x30
 8001958:	4b43      	ldr	r3, [pc, #268]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	f003 0320 	and.w	r3, r3, #32
 8001960:	61bb      	str	r3, [r7, #24]
 8001962:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4a3e      	ldr	r2, [pc, #248]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 800196e:	f043 0302 	orr.w	r3, r3, #2
 8001972:	6313      	str	r3, [r2, #48]	; 0x30
 8001974:	4b3c      	ldr	r3, [pc, #240]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 8001976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001978:	f003 0302 	and.w	r3, r3, #2
 800197c:	617b      	str	r3, [r7, #20]
 800197e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001980:	2300      	movs	r3, #0
 8001982:	613b      	str	r3, [r7, #16]
 8001984:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 8001986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001988:	4a37      	ldr	r2, [pc, #220]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6313      	str	r3, [r2, #48]	; 0x30
 8001990:	4b35      	ldr	r3, [pc, #212]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 8001992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	613b      	str	r3, [r7, #16]
 800199a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800199c:	2300      	movs	r3, #0
 800199e:	60fb      	str	r3, [r7, #12]
 80019a0:	4b31      	ldr	r3, [pc, #196]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 80019a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a4:	4a30      	ldr	r2, [pc, #192]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 80019a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019aa:	6313      	str	r3, [r2, #48]	; 0x30
 80019ac:	4b2e      	ldr	r3, [pc, #184]	; (8001a68 <HAL_QSPI_MspInit+0x17c>)
 80019ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 80019b8:	2304      	movs	r3, #4
 80019ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c4:	2303      	movs	r3, #3
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80019c8:	2309      	movs	r3, #9
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 80019cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d0:	4619      	mov	r1, r3
 80019d2:	4826      	ldr	r0, [pc, #152]	; (8001a6c <HAL_QSPI_MspInit+0x180>)
 80019d4:	f002 ff42 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 80019d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019de:	2302      	movs	r3, #2
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019ea:	230a      	movs	r3, #10
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019f2:	4619      	mov	r1, r3
 80019f4:	481e      	ldr	r0, [pc, #120]	; (8001a70 <HAL_QSPI_MspInit+0x184>)
 80019f6:	f002 ff31 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80019fa:	2304      	movs	r3, #4
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a06:	2303      	movs	r3, #3
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001a0a:	2309      	movs	r3, #9
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001a0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a12:	4619      	mov	r1, r3
 8001a14:	4817      	ldr	r0, [pc, #92]	; (8001a74 <HAL_QSPI_MspInit+0x188>)
 8001a16:	f002 ff21 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 8001a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a20:	2302      	movs	r3, #2
 8001a22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a24:	2300      	movs	r3, #0
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001a2c:	2309      	movs	r3, #9
 8001a2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 8001a30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a34:	4619      	mov	r1, r3
 8001a36:	4810      	ldr	r0, [pc, #64]	; (8001a78 <HAL_QSPI_MspInit+0x18c>)
 8001a38:	f002 ff10 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 8001a3c:	2340      	movs	r3, #64	; 0x40
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a4c:	230a      	movs	r3, #10
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a54:	4619      	mov	r1, r3
 8001a56:	4809      	ldr	r0, [pc, #36]	; (8001a7c <HAL_QSPI_MspInit+0x190>)
 8001a58:	f002 ff00 	bl	800485c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001a5c:	bf00      	nop
 8001a5e:	3738      	adds	r7, #56	; 0x38
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	a0001000 	.word	0xa0001000
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	40021400 	.word	0x40021400
 8001a74:	40020400 	.word	0x40020400
 8001a78:	40020c00 	.word	0x40020c00
 8001a7c:	40021800 	.word	0x40021800

08001a80 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b08a      	sub	sp, #40	; 0x28
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]
 8001a94:	60da      	str	r2, [r3, #12]
 8001a96:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a2c      	ldr	r2, [pc, #176]	; (8001b50 <HAL_SD_MspInit+0xd0>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d152      	bne.n	8001b48 <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <HAL_SD_MspInit+0xd4>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a2a      	ldr	r2, [pc, #168]	; (8001b54 <HAL_SD_MspInit+0xd4>)
 8001aac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b28      	ldr	r3, [pc, #160]	; (8001b54 <HAL_SD_MspInit+0xd4>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b24      	ldr	r3, [pc, #144]	; (8001b54 <HAL_SD_MspInit+0xd4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_SD_MspInit+0xd4>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b21      	ldr	r3, [pc, #132]	; (8001b54 <HAL_SD_MspInit+0xd4>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <HAL_SD_MspInit+0xd4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <HAL_SD_MspInit+0xd4>)
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <HAL_SD_MspInit+0xd4>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0304 	and.w	r3, r3, #4
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001af6:	2340      	movs	r3, #64	; 0x40
 8001af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b06:	230c      	movs	r3, #12
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4811      	ldr	r0, [pc, #68]	; (8001b58 <HAL_SD_MspInit+0xd8>)
 8001b12:	f002 fea3 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001b16:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b1a:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 0314 	add.w	r3, r7, #20
 8001b30:	4619      	mov	r1, r3
 8001b32:	480a      	ldr	r0, [pc, #40]	; (8001b5c <HAL_SD_MspInit+0xdc>)
 8001b34:	f002 fe92 	bl	800485c <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 10, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	210a      	movs	r1, #10
 8001b3c:	2031      	movs	r0, #49	; 0x31
 8001b3e:	f002 f8f5 	bl	8003d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001b42:	2031      	movs	r0, #49	; 0x31
 8001b44:	f002 f90e 	bl	8003d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	; 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40012c00 	.word	0x40012c00
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	40020800 	.word	0x40020800

08001b60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b08c      	sub	sp, #48	; 0x30
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b68:	f107 031c 	add.w	r3, r7, #28
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a33      	ldr	r2, [pc, #204]	; (8001c4c <HAL_UART_MspInit+0xec>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d12d      	bne.n	8001bde <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	4b32      	ldr	r3, [pc, #200]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	4a31      	ldr	r2, [pc, #196]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b90:	6453      	str	r3, [r2, #68]	; 0x44
 8001b92:	4b2f      	ldr	r3, [pc, #188]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9a:	61bb      	str	r3, [r7, #24]
 8001b9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	617b      	str	r3, [r7, #20]
 8001ba2:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001ba8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001bba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001bcc:	230b      	movs	r3, #11
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bd0:	f107 031c 	add.w	r3, r7, #28
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	481f      	ldr	r0, [pc, #124]	; (8001c54 <HAL_UART_MspInit+0xf4>)
 8001bd8:	f002 fe40 	bl	800485c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001bdc:	e031      	b.n	8001c42 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_UART_MspInit+0xf8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d12c      	bne.n	8001c42 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001be8:	2300      	movs	r3, #0
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	4b18      	ldr	r3, [pc, #96]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf0:	4a17      	ldr	r2, [pc, #92]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001bf2:	f043 0320 	orr.w	r3, r3, #32
 8001bf6:	6453      	str	r3, [r2, #68]	; 0x44
 8001bf8:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfc:	f003 0320 	and.w	r3, r3, #32
 8001c00:	613b      	str	r3, [r7, #16]
 8001c02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	4b11      	ldr	r3, [pc, #68]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4a10      	ldr	r2, [pc, #64]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c12:	6313      	str	r3, [r2, #48]	; 0x30
 8001c14:	4b0e      	ldr	r3, [pc, #56]	; (8001c50 <HAL_UART_MspInit+0xf0>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001c20:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001c24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c26:	2302      	movs	r3, #2
 8001c28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001c32:	2308      	movs	r3, #8
 8001c34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4805      	ldr	r0, [pc, #20]	; (8001c54 <HAL_UART_MspInit+0xf4>)
 8001c3e:	f002 fe0d 	bl	800485c <HAL_GPIO_Init>
}
 8001c42:	bf00      	nop
 8001c44:	3730      	adds	r7, #48	; 0x30
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40011c00 	.word	0x40011c00
 8001c50:	40023800 	.word	0x40023800
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40011400 	.word	0x40011400

08001c5c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001c70:	4b2c      	ldr	r3, [pc, #176]	; (8001d24 <HAL_FSMC_MspInit+0xc8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d151      	bne.n	8001d1c <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_FSMC_MspInit+0xc8>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	4b29      	ldr	r3, [pc, #164]	; (8001d28 <HAL_FSMC_MspInit+0xcc>)
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	4a28      	ldr	r2, [pc, #160]	; (8001d28 <HAL_FSMC_MspInit+0xcc>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6393      	str	r3, [r2, #56]	; 0x38
 8001c8e:	4b26      	ldr	r3, [pc, #152]	; (8001d28 <HAL_FSMC_MspInit+0xcc>)
 8001c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001c9a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001c9e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001cac:	230c      	movs	r3, #12
 8001cae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	481d      	ldr	r0, [pc, #116]	; (8001d2c <HAL_FSMC_MspInit+0xd0>)
 8001cb6:	f002 fdd1 	bl	800485c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001cba:	f240 433f 	movw	r3, #1087	; 0x43f
 8001cbe:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc8:	2303      	movs	r3, #3
 8001cca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ccc:	230c      	movs	r3, #12
 8001cce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cd0:	1d3b      	adds	r3, r7, #4
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4816      	ldr	r0, [pc, #88]	; (8001d30 <HAL_FSMC_MspInit+0xd4>)
 8001cd6:	f002 fdc1 	bl	800485c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001cda:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001cde:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001cec:	230c      	movs	r3, #12
 8001cee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cf0:	1d3b      	adds	r3, r7, #4
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480f      	ldr	r0, [pc, #60]	; (8001d34 <HAL_FSMC_MspInit+0xd8>)
 8001cf6:	f002 fdb1 	bl	800485c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001cfa:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001cfe:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001d0c:	230c      	movs	r3, #12
 8001d0e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d10:	1d3b      	adds	r3, r7, #4
 8001d12:	4619      	mov	r1, r3
 8001d14:	4808      	ldr	r0, [pc, #32]	; (8001d38 <HAL_FSMC_MspInit+0xdc>)
 8001d16:	f002 fda1 	bl	800485c <HAL_GPIO_Init>
 8001d1a:	e000      	b.n	8001d1e <HAL_FSMC_MspInit+0xc2>
    return;
 8001d1c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000500 	.word	0x20000500
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40021000 	.word	0x40021000
 8001d38:	40020c00 	.word	0x40020c00

08001d3c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001d44:	f7ff ff8a 	bl	8001c5c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08c      	sub	sp, #48	; 0x30
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	2036      	movs	r0, #54	; 0x36
 8001d66:	f001 ffe1 	bl	8003d2c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001d6a:	2036      	movs	r0, #54	; 0x36
 8001d6c:	f001 fffa 	bl	8003d64 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_InitTick+0xa0>)
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	4a1d      	ldr	r2, [pc, #116]	; (8001df0 <HAL_InitTick+0xa0>)
 8001d7a:	f043 0310 	orr.w	r3, r3, #16
 8001d7e:	6413      	str	r3, [r2, #64]	; 0x40
 8001d80:	4b1b      	ldr	r3, [pc, #108]	; (8001df0 <HAL_InitTick+0xa0>)
 8001d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d84:	f003 0310 	and.w	r3, r3, #16
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d8c:	f107 0210 	add.w	r2, r7, #16
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4611      	mov	r1, r2
 8001d96:	4618      	mov	r0, r3
 8001d98:	f005 fcbe 	bl	8007718 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d9c:	f005 fc94 	bl	80076c8 <HAL_RCC_GetPCLK1Freq>
 8001da0:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	4a13      	ldr	r2, [pc, #76]	; (8001df4 <HAL_InitTick+0xa4>)
 8001da6:	fba2 2303 	umull	r2, r3, r2, r3
 8001daa:	0c9b      	lsrs	r3, r3, #18
 8001dac:	3b01      	subs	r3, #1
 8001dae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <HAL_InitTick+0xa8>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <HAL_InitTick+0xac>)
 8001db4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <HAL_InitTick+0xa8>)
 8001db8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dbc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001dbe:	4a0e      	ldr	r2, [pc, #56]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dca:	4b0b      	ldr	r3, [pc, #44]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001dd0:	4809      	ldr	r0, [pc, #36]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dd2:	f007 fe2f 	bl	8009a34 <HAL_TIM_Base_Init>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d104      	bne.n	8001de6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001ddc:	4806      	ldr	r0, [pc, #24]	; (8001df8 <HAL_InitTick+0xa8>)
 8001dde:	f007 fe5e 	bl	8009a9e <HAL_TIM_Base_Start_IT>
 8001de2:	4603      	mov	r3, r0
 8001de4:	e000      	b.n	8001de8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3730      	adds	r7, #48	; 0x30
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40023800 	.word	0x40023800
 8001df4:	431bde83 	.word	0x431bde83
 8001df8:	20000504 	.word	0x20000504
 8001dfc:	40001000 	.word	0x40001000

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	e7fe      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e1e:	e7fe      	b.n	8001e1e <BusFault_Handler+0x4>

08001e20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <UsageFault_Handler+0x4>

08001e26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
	...

08001e44 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001e48:	4802      	ldr	r0, [pc, #8]	; (8001e54 <SDIO_IRQHandler+0x10>)
 8001e4a:	f006 fd2b 	bl	80088a4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000340 	.word	0x20000340

08001e58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <TIM6_DAC_IRQHandler+0x20>)
 8001e5e:	791b      	ldrb	r3, [r3, #4]
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001e66:	4804      	ldr	r0, [pc, #16]	; (8001e78 <TIM6_DAC_IRQHandler+0x20>)
 8001e68:	f001 ffac 	bl	8003dc4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <TIM6_DAC_IRQHandler+0x24>)
 8001e6e:	f007 fe3a 	bl	8009ae6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	20000150 	.word	0x20000150
 8001e7c:	20000504 	.word	0x20000504

08001e80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001e84:	4802      	ldr	r0, [pc, #8]	; (8001e90 <OTG_FS_IRQHandler+0x10>)
 8001e86:	f003 f959 	bl	800513c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20005534 	.word	0x20005534

08001e94 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	e00a      	b.n	8001ebc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ea6:	f3af 8000 	nop.w
 8001eaa:	4601      	mov	r1, r0
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	1c5a      	adds	r2, r3, #1
 8001eb0:	60ba      	str	r2, [r7, #8]
 8001eb2:	b2ca      	uxtb	r2, r1
 8001eb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbf0      	blt.n	8001ea6 <_read+0x12>
	}

return len;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e009      	b.n	8001ef4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	1c5a      	adds	r2, r3, #1
 8001ee4:	60ba      	str	r2, [r7, #8]
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dbf1      	blt.n	8001ee0 <_write+0x12>
	}
	return len;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_close>:

int _close(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_isatty>:

int _isatty(int file)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
	return 1;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	; (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	; (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	; (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f012 ffc8 	bl	8014f34 <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20050000 	.word	0x20050000
 8001fd0:	00000800 	.word	0x00000800
 8001fd4:	20000544 	.word	0x20000544
 8001fd8:	20005808 	.word	0x20005808

08001fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <SystemInit+0x28>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	4a07      	ldr	r2, [pc, #28]	; (8002004 <SystemInit+0x28>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <SystemInit+0x28>)
 8001ff2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ff6:	609a      	str	r2, [r3, #8]
#endif
}
 8001ff8:	bf00      	nop
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8002008:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002040 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 800200c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800200e:	e003      	b.n	8002018 <LoopCopyDataInit>

08002010 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002010:	4b0c      	ldr	r3, [pc, #48]	; (8002044 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002012:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002014:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002016:	3104      	adds	r1, #4

08002018 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002018:	480b      	ldr	r0, [pc, #44]	; (8002048 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800201a:	4b0c      	ldr	r3, [pc, #48]	; (800204c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800201c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800201e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002020:	d3f6      	bcc.n	8002010 <CopyDataInit>
  ldr  r2, =_sbss
 8002022:	4a0b      	ldr	r2, [pc, #44]	; (8002050 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002024:	e002      	b.n	800202c <LoopFillZerobss>

08002026 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8002026:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002028:	f842 3b04 	str.w	r3, [r2], #4

0800202c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800202c:	4b09      	ldr	r3, [pc, #36]	; (8002054 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800202e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002030:	d3f9      	bcc.n	8002026 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002032:	f7ff ffd3 	bl	8001fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002036:	f013 f879 	bl	801512c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800203a:	f7fe fac3 	bl	80005c4 <main>
  bx  lr    
 800203e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002040:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002044:	08018da8 	.word	0x08018da8
  ldr  r0, =_sdata
 8002048:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800204c:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8002050:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8002054:	20005808 	.word	0x20005808

08002058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC_IRQHandler>

0800205a <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b084      	sub	sp, #16
 800205e:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8002060:	f000 fd78 	bl	8002b54 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002064:	2200      	movs	r2, #0
 8002066:	2100      	movs	r1, #0
 8002068:	2010      	movs	r0, #16
 800206a:	f000 f9e4 	bl	8002436 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800206e:	200a      	movs	r0, #10
 8002070:	f000 fd97 	bl	8002ba2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8002074:	2200      	movs	r2, #0
 8002076:	2100      	movs	r1, #0
 8002078:	2001      	movs	r0, #1
 800207a:	f000 f9dc 	bl	8002436 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 800207e:	20c8      	movs	r0, #200	; 0xc8
 8002080:	f000 fd8f 	bl	8002ba2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8002084:	2200      	movs	r2, #0
 8002086:	2100      	movs	r1, #0
 8002088:	2011      	movs	r0, #17
 800208a:	f000 f9d4 	bl	8002436 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 800208e:	2078      	movs	r0, #120	; 0x78
 8002090:	f000 fd87 	bl	8002ba2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8002094:	2300      	movs	r3, #0
 8002096:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002098:	463b      	mov	r3, r7
 800209a:	2201      	movs	r2, #1
 800209c:	4619      	mov	r1, r3
 800209e:	2036      	movs	r0, #54	; 0x36
 80020a0:	f000 f9c9 	bl	8002436 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 80020a4:	2305      	movs	r3, #5
 80020a6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 80020a8:	463b      	mov	r3, r7
 80020aa:	2201      	movs	r2, #1
 80020ac:	4619      	mov	r1, r3
 80020ae:	203a      	movs	r0, #58	; 0x3a
 80020b0:	f000 f9c1 	bl	8002436 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 80020b4:	2200      	movs	r2, #0
 80020b6:	2100      	movs	r1, #0
 80020b8:	2021      	movs	r0, #33	; 0x21
 80020ba:	f000 f9bc 	bl	8002436 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 80020be:	2300      	movs	r3, #0
 80020c0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80020c2:	2300      	movs	r3, #0
 80020c4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80020c6:	2300      	movs	r3, #0
 80020c8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80020ca:	23ef      	movs	r3, #239	; 0xef
 80020cc:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80020ce:	463b      	mov	r3, r7
 80020d0:	2204      	movs	r2, #4
 80020d2:	4619      	mov	r1, r3
 80020d4:	202a      	movs	r0, #42	; 0x2a
 80020d6:	f000 f9ae 	bl	8002436 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 80020da:	2300      	movs	r3, #0
 80020dc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 80020de:	2300      	movs	r3, #0
 80020e0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80020e2:	2300      	movs	r3, #0
 80020e4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 80020e6:	23ef      	movs	r3, #239	; 0xef
 80020e8:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 80020ea:	463b      	mov	r3, r7
 80020ec:	2204      	movs	r2, #4
 80020ee:	4619      	mov	r1, r3
 80020f0:	202b      	movs	r0, #43	; 0x2b
 80020f2:	f000 f9a0 	bl	8002436 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 80020f6:	230c      	movs	r3, #12
 80020f8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 80020fa:	230c      	movs	r3, #12
 80020fc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 80020fe:	2300      	movs	r3, #0
 8002100:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8002102:	2333      	movs	r3, #51	; 0x33
 8002104:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8002106:	2333      	movs	r3, #51	; 0x33
 8002108:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 800210a:	463b      	mov	r3, r7
 800210c:	2205      	movs	r2, #5
 800210e:	4619      	mov	r1, r3
 8002110:	20b2      	movs	r0, #178	; 0xb2
 8002112:	f000 f990 	bl	8002436 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8002116:	2335      	movs	r3, #53	; 0x35
 8002118:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 800211a:	463b      	mov	r3, r7
 800211c:	2201      	movs	r2, #1
 800211e:	4619      	mov	r1, r3
 8002120:	20b7      	movs	r0, #183	; 0xb7
 8002122:	f000 f988 	bl	8002436 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8002126:	231f      	movs	r3, #31
 8002128:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 800212a:	463b      	mov	r3, r7
 800212c:	2201      	movs	r2, #1
 800212e:	4619      	mov	r1, r3
 8002130:	20bb      	movs	r0, #187	; 0xbb
 8002132:	f000 f980 	bl	8002436 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8002136:	232c      	movs	r3, #44	; 0x2c
 8002138:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 800213a:	463b      	mov	r3, r7
 800213c:	2201      	movs	r2, #1
 800213e:	4619      	mov	r1, r3
 8002140:	20c0      	movs	r0, #192	; 0xc0
 8002142:	f000 f978 	bl	8002436 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8002146:	2301      	movs	r3, #1
 8002148:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 800214a:	23c3      	movs	r3, #195	; 0xc3
 800214c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 800214e:	463b      	mov	r3, r7
 8002150:	2202      	movs	r2, #2
 8002152:	4619      	mov	r1, r3
 8002154:	20c2      	movs	r0, #194	; 0xc2
 8002156:	f000 f96e 	bl	8002436 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 800215a:	2320      	movs	r3, #32
 800215c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 800215e:	463b      	mov	r3, r7
 8002160:	2201      	movs	r2, #1
 8002162:	4619      	mov	r1, r3
 8002164:	20c4      	movs	r0, #196	; 0xc4
 8002166:	f000 f966 	bl	8002436 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 800216a:	230f      	movs	r3, #15
 800216c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 800216e:	463b      	mov	r3, r7
 8002170:	2201      	movs	r2, #1
 8002172:	4619      	mov	r1, r3
 8002174:	20c6      	movs	r0, #198	; 0xc6
 8002176:	f000 f95e 	bl	8002436 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 800217a:	23a4      	movs	r3, #164	; 0xa4
 800217c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 800217e:	23a1      	movs	r3, #161	; 0xa1
 8002180:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8002182:	463b      	mov	r3, r7
 8002184:	2201      	movs	r2, #1
 8002186:	4619      	mov	r1, r3
 8002188:	20d0      	movs	r0, #208	; 0xd0
 800218a:	f000 f954 	bl	8002436 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 800218e:	23d0      	movs	r3, #208	; 0xd0
 8002190:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8002192:	2308      	movs	r3, #8
 8002194:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8002196:	2311      	movs	r3, #17
 8002198:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 800219a:	2308      	movs	r3, #8
 800219c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 800219e:	230c      	movs	r3, #12
 80021a0:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 80021a2:	2315      	movs	r3, #21
 80021a4:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80021a6:	2339      	movs	r3, #57	; 0x39
 80021a8:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 80021aa:	2333      	movs	r3, #51	; 0x33
 80021ac:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 80021ae:	2350      	movs	r3, #80	; 0x50
 80021b0:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 80021b2:	2336      	movs	r3, #54	; 0x36
 80021b4:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 80021b6:	2313      	movs	r3, #19
 80021b8:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80021ba:	2314      	movs	r3, #20
 80021bc:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 80021be:	2329      	movs	r3, #41	; 0x29
 80021c0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 80021c2:	232d      	movs	r3, #45	; 0x2d
 80021c4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 80021c6:	463b      	mov	r3, r7
 80021c8:	220e      	movs	r2, #14
 80021ca:	4619      	mov	r1, r3
 80021cc:	20e0      	movs	r0, #224	; 0xe0
 80021ce:	f000 f932 	bl	8002436 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 80021d2:	23d0      	movs	r3, #208	; 0xd0
 80021d4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 80021d6:	2308      	movs	r3, #8
 80021d8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 80021da:	2310      	movs	r3, #16
 80021dc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 80021de:	2308      	movs	r3, #8
 80021e0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 80021e2:	2306      	movs	r3, #6
 80021e4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 80021e6:	2306      	movs	r3, #6
 80021e8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 80021ea:	2339      	movs	r3, #57	; 0x39
 80021ec:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 80021ee:	2344      	movs	r3, #68	; 0x44
 80021f0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 80021f2:	2351      	movs	r3, #81	; 0x51
 80021f4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 80021f6:	230b      	movs	r3, #11
 80021f8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 80021fa:	2316      	movs	r3, #22
 80021fc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 80021fe:	2314      	movs	r3, #20
 8002200:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8002202:	232f      	movs	r3, #47	; 0x2f
 8002204:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8002206:	2331      	movs	r3, #49	; 0x31
 8002208:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 800220a:	463b      	mov	r3, r7
 800220c:	220e      	movs	r2, #14
 800220e:	4619      	mov	r1, r3
 8002210:	20e1      	movs	r0, #225	; 0xe1
 8002212:	f000 f910 	bl	8002436 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8002216:	f000 f847 	bl	80022a8 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 800221a:	2300      	movs	r3, #0
 800221c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 800221e:	463b      	mov	r3, r7
 8002220:	2201      	movs	r2, #1
 8002222:	4619      	mov	r1, r3
 8002224:	2035      	movs	r0, #53	; 0x35
 8002226:	f000 f906 	bl	8002436 <ST7789H2_WriteReg>

}
 800222a:	bf00      	nop
 800222c:	3710      	adds	r7, #16
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b084      	sub	sp, #16
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8002240:	2300      	movs	r3, #0
 8002242:	723b      	strb	r3, [r7, #8]
 8002244:	e025      	b.n	8002292 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b02      	cmp	r3, #2
 800224a:	d120      	bne.n	800228e <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 800224c:	2300      	movs	r3, #0
 800224e:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8002250:	2300      	movs	r3, #0
 8002252:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8002254:	2301      	movs	r3, #1
 8002256:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8002258:	23f0      	movs	r3, #240	; 0xf0
 800225a:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 800225c:	2300      	movs	r3, #0
 800225e:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8002260:	2300      	movs	r3, #0
 8002262:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	2206      	movs	r2, #6
 800226a:	4619      	mov	r1, r3
 800226c:	2033      	movs	r0, #51	; 0x33
 800226e:	f000 f8e2 	bl	8002436 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8002272:	2300      	movs	r3, #0
 8002274:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8002276:	2350      	movs	r3, #80	; 0x50
 8002278:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 800227a:	f107 0308 	add.w	r3, r7, #8
 800227e:	2202      	movs	r2, #2
 8002280:	4619      	mov	r1, r3
 8002282:	2037      	movs	r0, #55	; 0x37
 8002284:	f000 f8d7 	bl	8002436 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002288:	23c0      	movs	r3, #192	; 0xc0
 800228a:	723b      	strb	r3, [r7, #8]
 800228c:	e001      	b.n	8002292 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 800228e:	2360      	movs	r3, #96	; 0x60
 8002290:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	2201      	movs	r2, #1
 8002298:	4619      	mov	r1, r3
 800229a:	2036      	movs	r0, #54	; 0x36
 800229c:	f000 f8cb 	bl	8002436 <ST7789H2_WriteReg>
}
 80022a0:	bf00      	nop
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	2029      	movs	r0, #41	; 0x29
 80022b2:	f000 f8c0 	bl	8002436 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 80022b6:	2200      	movs	r2, #0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2011      	movs	r0, #17
 80022bc:	f000 f8bb 	bl	8002436 <ST7789H2_WriteReg>
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 80022ca:	23fe      	movs	r3, #254	; 0xfe
 80022cc:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 80022ce:	1d3b      	adds	r3, r7, #4
 80022d0:	2201      	movs	r2, #1
 80022d2:	4619      	mov	r1, r3
 80022d4:	20bd      	movs	r0, #189	; 0xbd
 80022d6:	f000 f8ae 	bl	8002436 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 80022da:	2200      	movs	r2, #0
 80022dc:	2100      	movs	r1, #0
 80022de:	2010      	movs	r0, #16
 80022e0:	f000 f8a9 	bl	8002436 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 80022e4:	200a      	movs	r0, #10
 80022e6:	f000 fc5c 	bl	8002ba2 <LCD_IO_Delay>
}
 80022ea:	bf00      	nop
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 80022f6:	23f0      	movs	r3, #240	; 0xf0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8002306:	23f0      	movs	r3, #240	; 0xf0
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002312:	b580      	push	{r7, lr}
 8002314:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002316:	f000 fc1d 	bl	8002b54 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800231a:	2004      	movs	r0, #4
 800231c:	f000 f8ae 	bl	800247c <ST7789H2_ReadReg>
 8002320:	4603      	mov	r3, r0
 8002322:	b29b      	uxth	r3, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	bd80      	pop	{r7, pc}

08002328 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b084      	sub	sp, #16
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	460a      	mov	r2, r1
 8002332:	80fb      	strh	r3, [r7, #6]
 8002334:	4613      	mov	r3, r2
 8002336:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002338:	2300      	movs	r3, #0
 800233a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002342:	2300      	movs	r3, #0
 8002344:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8002346:	88fb      	ldrh	r3, [r7, #6]
 8002348:	b2db      	uxtb	r3, r3
 800234a:	3b11      	subs	r3, #17
 800234c:	b2db      	uxtb	r3, r3
 800234e:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002350:	f107 030c 	add.w	r3, r7, #12
 8002354:	2204      	movs	r2, #4
 8002356:	4619      	mov	r1, r3
 8002358:	202a      	movs	r0, #42	; 0x2a
 800235a:	f000 f86c 	bl	8002436 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 800235e:	2300      	movs	r3, #0
 8002360:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8002362:	88bb      	ldrh	r3, [r7, #4]
 8002364:	b2db      	uxtb	r3, r3
 8002366:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002368:	2300      	movs	r3, #0
 800236a:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 800236c:	88bb      	ldrh	r3, [r7, #4]
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3b11      	subs	r3, #17
 8002372:	b2db      	uxtb	r3, r3
 8002374:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002376:	f107 030c 	add.w	r3, r7, #12
 800237a:	2204      	movs	r2, #4
 800237c:	4619      	mov	r1, r3
 800237e:	202b      	movs	r0, #43	; 0x2b
 8002380:	f000 f859 	bl	8002436 <ST7789H2_WriteReg>
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	80fb      	strh	r3, [r7, #6]
 8002396:	460b      	mov	r3, r1
 8002398:	80bb      	strh	r3, [r7, #4]
 800239a:	4613      	mov	r3, r2
 800239c:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800239e:	88ba      	ldrh	r2, [r7, #4]
 80023a0:	88fb      	ldrh	r3, [r7, #6]
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff ffbf 	bl	8002328 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	202c      	movs	r0, #44	; 0x2c
 80023b0:	f000 f841 	bl	8002436 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80023b4:	887b      	ldrh	r3, [r7, #2]
 80023b6:	4618      	mov	r0, r3
 80023b8:	f000 fbd2 	bl	8002b60 <LCD_IO_WriteData>
}
 80023bc:	bf00      	nop
 80023be:	3708      	adds	r7, #8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	460a      	mov	r2, r1
 80023ce:	80fb      	strh	r3, [r7, #6]
 80023d0:	4613      	mov	r3, r2
 80023d2:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80023d4:	88ba      	ldrh	r2, [r7, #4]
 80023d6:	88fb      	ldrh	r3, [r7, #6]
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f7ff ffa4 	bl	8002328 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 80023e0:	88ba      	ldrh	r2, [r7, #4]
 80023e2:	88fb      	ldrh	r3, [r7, #6]
 80023e4:	4611      	mov	r1, r2
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 f9c4 	bl	8002774 <ST7789H2_ReadPixel_rgb888>
 80023ec:	4603      	mov	r3, r0
 80023ee:	461a      	mov	r2, r3
 80023f0:	733a      	strb	r2, [r7, #12]
 80023f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80023f6:	737a      	strb	r2, [r7, #13]
 80023f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80023fc:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 80023fe:	7b3b      	ldrb	r3, [r7, #12]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002404:	7b7b      	ldrb	r3, [r7, #13]
 8002406:	089b      	lsrs	r3, r3, #2
 8002408:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800240a:	7bbb      	ldrb	r3, [r7, #14]
 800240c:	08db      	lsrs	r3, r3, #3
 800240e:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002410:	7dfb      	ldrb	r3, [r7, #23]
 8002412:	b29b      	uxth	r3, r3
 8002414:	02db      	lsls	r3, r3, #11
 8002416:	b29a      	uxth	r2, r3
 8002418:	7dbb      	ldrb	r3, [r7, #22]
 800241a:	b29b      	uxth	r3, r3
 800241c:	015b      	lsls	r3, r3, #5
 800241e:	b29b      	uxth	r3, r3
 8002420:	4413      	add	r3, r2
 8002422:	b29a      	uxth	r2, r3
 8002424:	7d7b      	ldrb	r3, [r7, #21]
 8002426:	b29b      	uxth	r3, r3
 8002428:	4413      	add	r3, r2
 800242a:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800242c:	8a7b      	ldrh	r3, [r7, #18]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	4603      	mov	r3, r0
 800243e:	6039      	str	r1, [r7, #0]
 8002440:	71fb      	strb	r3, [r7, #7]
 8002442:	4613      	mov	r3, r2
 8002444:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	4618      	mov	r0, r3
 800244a:	f000 fb96 	bl	8002b7a <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
 8002452:	e00a      	b.n	800246a <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	4413      	add	r3, r2
 800245a:	781b      	ldrb	r3, [r3, #0]
 800245c:	b29b      	uxth	r3, r3
 800245e:	4618      	mov	r0, r3
 8002460:	f000 fb7e 	bl	8002b60 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	3301      	adds	r3, #1
 8002468:	73fb      	strb	r3, [r7, #15]
 800246a:	7bfa      	ldrb	r2, [r7, #15]
 800246c:	79bb      	ldrb	r3, [r7, #6]
 800246e:	429a      	cmp	r2, r3
 8002470:	d3f0      	bcc.n	8002454 <ST7789H2_WriteReg+0x1e>
  }
}
 8002472:	bf00      	nop
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fb76 	bl	8002b7a <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 800248e:	f000 fb81 	bl	8002b94 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002492:	f000 fb7f 	bl	8002b94 <LCD_IO_ReadData>
 8002496:	4603      	mov	r3, r0
 8002498:	b2db      	uxtb	r3, r3
}
 800249a:	4618      	mov	r0, r3
 800249c:	3708      	adds	r7, #8
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
	...

080024a4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80024a4:	b490      	push	{r4, r7}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4604      	mov	r4, r0
 80024ac:	4608      	mov	r0, r1
 80024ae:	4611      	mov	r1, r2
 80024b0:	461a      	mov	r2, r3
 80024b2:	4623      	mov	r3, r4
 80024b4:	80fb      	strh	r3, [r7, #6]
 80024b6:	4603      	mov	r3, r0
 80024b8:	80bb      	strh	r3, [r7, #4]
 80024ba:	460b      	mov	r3, r1
 80024bc:	807b      	strh	r3, [r7, #2]
 80024be:	4613      	mov	r3, r2
 80024c0:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80024c2:	88fb      	ldrh	r3, [r7, #6]
 80024c4:	2bef      	cmp	r3, #239	; 0xef
 80024c6:	d803      	bhi.n	80024d0 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80024c8:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <ST7789H2_SetDisplayWindow+0x94>)
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	8013      	strh	r3, [r2, #0]
 80024ce:	e002      	b.n	80024d6 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80024d0:	4b19      	ldr	r3, [pc, #100]	; (8002538 <ST7789H2_SetDisplayWindow+0x94>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80024d6:	88bb      	ldrh	r3, [r7, #4]
 80024d8:	2bef      	cmp	r3, #239	; 0xef
 80024da:	d803      	bhi.n	80024e4 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80024dc:	4a17      	ldr	r2, [pc, #92]	; (800253c <ST7789H2_SetDisplayWindow+0x98>)
 80024de:	88bb      	ldrh	r3, [r7, #4]
 80024e0:	8013      	strh	r3, [r2, #0]
 80024e2:	e002      	b.n	80024ea <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80024e4:	4b15      	ldr	r3, [pc, #84]	; (800253c <ST7789H2_SetDisplayWindow+0x98>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	4413      	add	r3, r2
 80024f0:	2bf0      	cmp	r3, #240	; 0xf0
 80024f2:	dc08      	bgt.n	8002506 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80024f4:	887a      	ldrh	r2, [r7, #2]
 80024f6:	88fb      	ldrh	r3, [r7, #6]
 80024f8:	4413      	add	r3, r2
 80024fa:	b29b      	uxth	r3, r3
 80024fc:	3b01      	subs	r3, #1
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b0f      	ldr	r3, [pc, #60]	; (8002540 <ST7789H2_SetDisplayWindow+0x9c>)
 8002502:	801a      	strh	r2, [r3, #0]
 8002504:	e002      	b.n	800250c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002506:	4b0e      	ldr	r3, [pc, #56]	; (8002540 <ST7789H2_SetDisplayWindow+0x9c>)
 8002508:	22ef      	movs	r2, #239	; 0xef
 800250a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800250c:	883a      	ldrh	r2, [r7, #0]
 800250e:	88bb      	ldrh	r3, [r7, #4]
 8002510:	4413      	add	r3, r2
 8002512:	2bf0      	cmp	r3, #240	; 0xf0
 8002514:	dc08      	bgt.n	8002528 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002516:	883a      	ldrh	r2, [r7, #0]
 8002518:	88bb      	ldrh	r3, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <ST7789H2_SetDisplayWindow+0xa0>)
 8002524:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002526:	e002      	b.n	800252e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <ST7789H2_SetDisplayWindow+0xa0>)
 800252a:	22ef      	movs	r2, #239	; 0xef
 800252c:	801a      	strh	r2, [r3, #0]
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bc90      	pop	{r4, r7}
 8002536:	4770      	bx	lr
 8002538:	20000548 	.word	0x20000548
 800253c:	2000054a 	.word	0x2000054a
 8002540:	2000003c 	.word	0x2000003c
 8002544:	2000003e 	.word	0x2000003e

08002548 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002548:	b590      	push	{r4, r7, lr}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	4604      	mov	r4, r0
 8002550:	4608      	mov	r0, r1
 8002552:	4611      	mov	r1, r2
 8002554:	461a      	mov	r2, r3
 8002556:	4623      	mov	r3, r4
 8002558:	80fb      	strh	r3, [r7, #6]
 800255a:	4603      	mov	r3, r0
 800255c:	80bb      	strh	r3, [r7, #4]
 800255e:	460b      	mov	r3, r1
 8002560:	807b      	strh	r3, [r7, #2]
 8002562:	4613      	mov	r3, r2
 8002564:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002566:	2300      	movs	r3, #0
 8002568:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800256a:	887a      	ldrh	r2, [r7, #2]
 800256c:	88bb      	ldrh	r3, [r7, #4]
 800256e:	4611      	mov	r1, r2
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fed9 	bl	8002328 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002576:	2200      	movs	r2, #0
 8002578:	2100      	movs	r1, #0
 800257a:	202c      	movs	r0, #44	; 0x2c
 800257c:	f7ff ff5b 	bl	8002436 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002580:	2300      	movs	r3, #0
 8002582:	81fb      	strh	r3, [r7, #14]
 8002584:	e006      	b.n	8002594 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	4618      	mov	r0, r3
 800258a:	f000 fae9 	bl	8002b60 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 800258e:	89fb      	ldrh	r3, [r7, #14]
 8002590:	3301      	adds	r3, #1
 8002592:	81fb      	strh	r3, [r7, #14]
 8002594:	89fa      	ldrh	r2, [r7, #14]
 8002596:	883b      	ldrh	r3, [r7, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d3f4      	bcc.n	8002586 <ST7789H2_DrawHLine+0x3e>
  }  
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3714      	adds	r7, #20
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd90      	pop	{r4, r7, pc}

080025a6 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80025a6:	b590      	push	{r4, r7, lr}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	4604      	mov	r4, r0
 80025ae:	4608      	mov	r0, r1
 80025b0:	4611      	mov	r1, r2
 80025b2:	461a      	mov	r2, r3
 80025b4:	4623      	mov	r3, r4
 80025b6:	80fb      	strh	r3, [r7, #6]
 80025b8:	4603      	mov	r3, r0
 80025ba:	80bb      	strh	r3, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	807b      	strh	r3, [r7, #2]
 80025c0:	4613      	mov	r3, r2
 80025c2:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80025c8:	887a      	ldrh	r2, [r7, #2]
 80025ca:	88bb      	ldrh	r3, [r7, #4]
 80025cc:	4611      	mov	r1, r2
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff feaa 	bl	8002328 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80025d4:	2200      	movs	r2, #0
 80025d6:	2100      	movs	r1, #0
 80025d8:	202c      	movs	r0, #44	; 0x2c
 80025da:	f7ff ff2c 	bl	8002436 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80025de:	2300      	movs	r3, #0
 80025e0:	81fb      	strh	r3, [r7, #14]
 80025e2:	e00b      	b.n	80025fc <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	89fb      	ldrh	r3, [r7, #14]
 80025e8:	4413      	add	r3, r2
 80025ea:	b299      	uxth	r1, r3
 80025ec:	88fa      	ldrh	r2, [r7, #6]
 80025ee:	88bb      	ldrh	r3, [r7, #4]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff fecb 	bl	800238c <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 80025f6:	89fb      	ldrh	r3, [r7, #14]
 80025f8:	3301      	adds	r3, #1
 80025fa:	81fb      	strh	r3, [r7, #14]
 80025fc:	89fa      	ldrh	r2, [r7, #14]
 80025fe:	883b      	ldrh	r3, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d3ef      	bcc.n	80025e4 <ST7789H2_DrawVLine+0x3e>
  }
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	bd90      	pop	{r4, r7, pc}
	...

08002610 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	603a      	str	r2, [r7, #0]
 800261a:	80fb      	strh	r3, [r7, #6]
 800261c:	460b      	mov	r3, r1
 800261e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
 8002624:	2300      	movs	r3, #0
 8002626:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 800262c:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <ST7789H2_DrawBitmap+0xe0>)
 800262e:	881a      	ldrh	r2, [r3, #0]
 8002630:	4b30      	ldr	r3, [pc, #192]	; (80026f4 <ST7789H2_DrawBitmap+0xe4>)
 8002632:	881b      	ldrh	r3, [r3, #0]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	b29b      	uxth	r3, r3
 8002638:	3301      	adds	r3, #1
 800263a:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 800263c:	4b2e      	ldr	r3, [pc, #184]	; (80026f8 <ST7789H2_DrawBitmap+0xe8>)
 800263e:	881a      	ldrh	r2, [r3, #0]
 8002640:	4b2e      	ldr	r3, [pc, #184]	; (80026fc <ST7789H2_DrawBitmap+0xec>)
 8002642:	881b      	ldrh	r3, [r3, #0]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	b29b      	uxth	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	3302      	adds	r3, #2
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b29b      	uxth	r3, r3
 8002654:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	3304      	adds	r3, #4
 800265a:	881b      	ldrh	r3, [r3, #0]
 800265c:	b29b      	uxth	r3, r3
 800265e:	041b      	lsls	r3, r3, #16
 8002660:	461a      	mov	r2, r3
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	330a      	adds	r3, #10
 800266c:	881b      	ldrh	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	330c      	adds	r3, #12
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	b29b      	uxth	r3, r3
 800267a:	041b      	lsls	r3, r3, #16
 800267c:	461a      	mov	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	4313      	orrs	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	085b      	lsrs	r3, r3, #1
 800268c:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	4413      	add	r3, r2
 8002694:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002696:	88ba      	ldrh	r2, [r7, #4]
 8002698:	89bb      	ldrh	r3, [r7, #12]
 800269a:	4413      	add	r3, r2
 800269c:	61fb      	str	r3, [r7, #28]
 800269e:	e01d      	b.n	80026dc <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	3b01      	subs	r3, #1
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	4611      	mov	r1, r2
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7ff fe3b 	bl	8002328 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b299      	uxth	r1, r3
 80026ba:	89fb      	ldrh	r3, [r7, #14]
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	fb02 f303 	mul.w	r3, r2, r3
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	4413      	add	r3, r2
 80026c8:	89fa      	ldrh	r2, [r7, #14]
 80026ca:	88f8      	ldrh	r0, [r7, #6]
 80026cc:	f000 f89c 	bl	8002808 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	3301      	adds	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	3b01      	subs	r3, #1
 80026da:	61fb      	str	r3, [r7, #28]
 80026dc:	88bb      	ldrh	r3, [r7, #4]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d8dd      	bhi.n	80026a0 <ST7789H2_DrawBitmap+0x90>
  }
}
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	3720      	adds	r7, #32
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000003c 	.word	0x2000003c
 80026f4:	20000548 	.word	0x20000548
 80026f8:	2000003e 	.word	0x2000003e
 80026fc:	2000054a 	.word	0x2000054a

08002700 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4623      	mov	r3, r4
 8002710:	80fb      	strh	r3, [r7, #6]
 8002712:	4603      	mov	r3, r0
 8002714:	80bb      	strh	r3, [r7, #4]
 8002716:	460b      	mov	r3, r1
 8002718:	807b      	strh	r3, [r7, #2]
 800271a:	4613      	mov	r3, r2
 800271c:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800271e:	2300      	movs	r3, #0
 8002720:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002722:	88bb      	ldrh	r3, [r7, #4]
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	e019      	b.n	800275c <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	b29a      	uxth	r2, r3
 800272c:	88fb      	ldrh	r3, [r7, #6]
 800272e:	4611      	mov	r1, r2
 8002730:	4618      	mov	r0, r3
 8002732:	f7ff fdf9 	bl	8002328 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	b299      	uxth	r1, r3
 800273a:	887b      	ldrh	r3, [r7, #2]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	fb02 f303 	mul.w	r3, r2, r3
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	6a3a      	ldr	r2, [r7, #32]
 8002746:	4413      	add	r3, r2
 8002748:	887a      	ldrh	r2, [r7, #2]
 800274a:	88f8      	ldrh	r0, [r7, #6]
 800274c:	f000 f85c 	bl	8002808 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	3301      	adds	r3, #1
 8002754:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	3301      	adds	r3, #1
 800275a:	60fb      	str	r3, [r7, #12]
 800275c:	88ba      	ldrh	r2, [r7, #4]
 800275e:	883b      	ldrh	r3, [r7, #0]
 8002760:	4413      	add	r3, r2
 8002762:	461a      	mov	r2, r3
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	4293      	cmp	r3, r2
 8002768:	d3de      	bcc.n	8002728 <ST7789H2_DrawRGBImage+0x28>
  }
}
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	bd90      	pop	{r4, r7, pc}

08002774 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	460a      	mov	r2, r1
 800277e:	80fb      	strh	r3, [r7, #6]
 8002780:	4613      	mov	r3, r2
 8002782:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002784:	88ba      	ldrh	r2, [r7, #4]
 8002786:	88fb      	ldrh	r3, [r7, #6]
 8002788:	4611      	mov	r1, r2
 800278a:	4618      	mov	r0, r3
 800278c:	f7ff fdcc 	bl	8002328 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002790:	2200      	movs	r2, #0
 8002792:	2100      	movs	r1, #0
 8002794:	202e      	movs	r0, #46	; 0x2e
 8002796:	f7ff fe4e 	bl	8002436 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 800279a:	f000 f9fb 	bl	8002b94 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 800279e:	f000 f9f9 	bl	8002b94 <LCD_IO_ReadData>
 80027a2:	4603      	mov	r3, r0
 80027a4:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80027a6:	f000 f9f5 	bl	8002b94 <LCD_IO_ReadData>
 80027aa:	4603      	mov	r3, r0
 80027ac:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80027ae:	8afb      	ldrh	r3, [r7, #22]
 80027b0:	121b      	asrs	r3, r3, #8
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f023 0303 	bic.w	r3, r3, #3
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80027bc:	8afb      	ldrh	r3, [r7, #22]
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	f023 0303 	bic.w	r3, r3, #3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80027c8:	8abb      	ldrh	r3, [r7, #20]
 80027ca:	121b      	asrs	r3, r3, #8
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f023 0303 	bic.w	r3, r3, #3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80027d6:	f107 0310 	add.w	r3, r7, #16
 80027da:	f107 020c 	add.w	r2, r7, #12
 80027de:	6812      	ldr	r2, [r2, #0]
 80027e0:	4611      	mov	r1, r2
 80027e2:	8019      	strh	r1, [r3, #0]
 80027e4:	3302      	adds	r3, #2
 80027e6:	0c12      	lsrs	r2, r2, #16
 80027e8:	701a      	strb	r2, [r3, #0]
 80027ea:	2300      	movs	r3, #0
 80027ec:	7c3a      	ldrb	r2, [r7, #16]
 80027ee:	f362 0307 	bfi	r3, r2, #0, #8
 80027f2:	7c7a      	ldrb	r2, [r7, #17]
 80027f4:	f362 230f 	bfi	r3, r2, #8, #8
 80027f8:	7cba      	ldrb	r2, [r7, #18]
 80027fa:	f362 4317 	bfi	r3, r2, #16, #8
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3718      	adds	r7, #24
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
	...

08002808 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	607b      	str	r3, [r7, #4]
 8002810:	4603      	mov	r3, r0
 8002812:	81fb      	strh	r3, [r7, #14]
 8002814:	460b      	mov	r3, r1
 8002816:	81bb      	strh	r3, [r7, #12]
 8002818:	4613      	mov	r3, r2
 800281a:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 800281c:	2300      	movs	r3, #0
 800281e:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002824:	2200      	movs	r2, #0
 8002826:	2100      	movs	r1, #0
 8002828:	202c      	movs	r0, #44	; 0x2c
 800282a:	f7ff fe04 	bl	8002436 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800282e:	89fb      	ldrh	r3, [r7, #14]
 8002830:	61bb      	str	r3, [r7, #24]
 8002832:	e029      	b.n	8002888 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002834:	4b1a      	ldr	r3, [pc, #104]	; (80028a0 <ST7789H2_DrawRGBHLine+0x98>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	4293      	cmp	r3, r2
 800283e:	d320      	bcc.n	8002882 <ST7789H2_DrawRGBHLine+0x7a>
 8002840:	4b18      	ldr	r3, [pc, #96]	; (80028a4 <ST7789H2_DrawRGBHLine+0x9c>)
 8002842:	881b      	ldrh	r3, [r3, #0]
 8002844:	89ba      	ldrh	r2, [r7, #12]
 8002846:	429a      	cmp	r2, r3
 8002848:	d31b      	bcc.n	8002882 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800284a:	4b17      	ldr	r3, [pc, #92]	; (80028a8 <ST7789H2_DrawRGBHLine+0xa0>)
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	4293      	cmp	r3, r2
 8002854:	d815      	bhi.n	8002882 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002856:	4b15      	ldr	r3, [pc, #84]	; (80028ac <ST7789H2_DrawRGBHLine+0xa4>)
 8002858:	881b      	ldrh	r3, [r3, #0]
 800285a:	89ba      	ldrh	r2, [r7, #12]
 800285c:	429a      	cmp	r2, r3
 800285e:	d810      	bhi.n	8002882 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002860:	897a      	ldrh	r2, [r7, #10]
 8002862:	89fb      	ldrh	r3, [r7, #14]
 8002864:	441a      	add	r2, r3
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	429a      	cmp	r2, r3
 800286a:	d007      	beq.n	800287c <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	697a      	ldr	r2, [r7, #20]
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f000 f972 	bl	8002b60 <LCD_IO_WriteData>
      }      
      i++;
 800287c:	69fb      	ldr	r3, [r7, #28]
 800287e:	3301      	adds	r3, #1
 8002880:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	3301      	adds	r3, #1
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	897a      	ldrh	r2, [r7, #10]
 800288a:	89fb      	ldrh	r3, [r7, #14]
 800288c:	4413      	add	r3, r2
 800288e:	461a      	mov	r2, r3
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4293      	cmp	r3, r2
 8002894:	d3ce      	bcc.n	8002834 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002896:	bf00      	nop
 8002898:	bf00      	nop
 800289a:	3720      	adds	r7, #32
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20000548 	.word	0x20000548
 80028a4:	2000054a 	.word	0x2000054a
 80028a8:	2000003c 	.word	0x2000003c
 80028ac:	2000003e 	.word	0x2000003e

080028b0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	460a      	mov	r2, r1
 80028ba:	71fb      	strb	r3, [r7, #7]
 80028bc:	4613      	mov	r3, r2
 80028be:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 80028c0:	2300      	movs	r3, #0
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	4b22      	ldr	r3, [pc, #136]	; (8002950 <BSP_PB_Init+0xa0>)
 80028c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c8:	4a21      	ldr	r2, [pc, #132]	; (8002950 <BSP_PB_Init+0xa0>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	6313      	str	r3, [r2, #48]	; 0x30
 80028d0:	4b1f      	ldr	r3, [pc, #124]	; (8002950 <BSP_PB_Init+0xa0>)
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80028dc:	79bb      	ldrb	r3, [r7, #6]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d111      	bne.n	8002906 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80028e2:	2301      	movs	r3, #1
 80028e4:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80028e6:	2300      	movs	r3, #0
 80028e8:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80028ea:	2302      	movs	r3, #2
 80028ec:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80028ee:	2302      	movs	r3, #2
 80028f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	4a17      	ldr	r2, [pc, #92]	; (8002954 <BSP_PB_Init+0xa4>)
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	f107 020c 	add.w	r2, r7, #12
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f001 ffab 	bl	800485c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002906:	79bb      	ldrb	r3, [r7, #6]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d11d      	bne.n	8002948 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800290c:	2301      	movs	r3, #1
 800290e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002910:	2302      	movs	r3, #2
 8002912:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002914:	2303      	movs	r3, #3
 8002916:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002918:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <BSP_PB_Init+0xa8>)
 800291a:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800291c:	79fb      	ldrb	r3, [r7, #7]
 800291e:	4a0d      	ldr	r2, [pc, #52]	; (8002954 <BSP_PB_Init+0xa4>)
 8002920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002924:	f107 020c 	add.w	r2, r7, #12
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f001 ff96 	bl	800485c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002930:	2306      	movs	r3, #6
 8002932:	b25b      	sxtb	r3, r3
 8002934:	2200      	movs	r2, #0
 8002936:	210f      	movs	r1, #15
 8002938:	4618      	mov	r0, r3
 800293a:	f001 f9f7 	bl	8003d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800293e:	2306      	movs	r3, #6
 8002940:	b25b      	sxtb	r3, r3
 8002942:	4618      	mov	r0, r3
 8002944:	f001 fa0e 	bl	8003d64 <HAL_NVIC_EnableIRQ>
  }
}
 8002948:	bf00      	nop
 800294a:	3720      	adds	r7, #32
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40023800 	.word	0x40023800
 8002954:	20000040 	.word	0x20000040
 8002958:	10110000 	.word	0x10110000

0800295c <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	613b      	str	r3, [r7, #16]
 8002966:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 8002968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296a:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6393      	str	r3, [r2, #56]	; 0x38
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 8002974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a32      	ldr	r2, [pc, #200]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 8002988:	f043 0308 	orr.w	r3, r3, #8
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0308 	and.w	r3, r3, #8
 8002996:	60fb      	str	r3, [r7, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]
 800299e:	4b2c      	ldr	r3, [pc, #176]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 80029a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a2:	4a2b      	ldr	r2, [pc, #172]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 80029a4:	f043 0310 	orr.w	r3, r3, #16
 80029a8:	6313      	str	r3, [r2, #48]	; 0x30
 80029aa:	4b29      	ldr	r3, [pc, #164]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 80029ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ae:	f003 0310 	and.w	r3, r3, #16
 80029b2:	60bb      	str	r3, [r7, #8]
 80029b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	4b25      	ldr	r3, [pc, #148]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 80029bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029be:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 80029c0:	f043 0320 	orr.w	r3, r3, #32
 80029c4:	6313      	str	r3, [r2, #48]	; 0x30
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 80029c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 80029dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
 80029e2:	4b1b      	ldr	r3, [pc, #108]	; (8002a50 <FMC_BANK3_MspInit+0xf4>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80029ee:	2302      	movs	r3, #2
 80029f0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80029f2:	2301      	movs	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80029f6:	2303      	movs	r3, #3
 80029f8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 80029fa:	230c      	movs	r3, #12
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 80029fe:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002a02:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002a04:	f107 0314 	add.w	r3, r7, #20
 8002a08:	4619      	mov	r1, r3
 8002a0a:	4812      	ldr	r0, [pc, #72]	; (8002a54 <FMC_BANK3_MspInit+0xf8>)
 8002a0c:	f001 ff26 	bl	800485c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002a10:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002a14:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480e      	ldr	r0, [pc, #56]	; (8002a58 <FMC_BANK3_MspInit+0xfc>)
 8002a1e:	f001 ff1d 	bl	800485c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a22:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002a26:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	480b      	ldr	r0, [pc, #44]	; (8002a5c <FMC_BANK3_MspInit+0x100>)
 8002a30:	f001 ff14 	bl	800485c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002a34:	f240 433f 	movw	r3, #1087	; 0x43f
 8002a38:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4807      	ldr	r0, [pc, #28]	; (8002a60 <FMC_BANK3_MspInit+0x104>)
 8002a42:	f001 ff0b 	bl	800485c <HAL_GPIO_Init>
}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	; 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020c00 	.word	0x40020c00
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40021400 	.word	0x40021400
 8002a60:	40021800 	.word	0x40021800

08002a64 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b09c      	sub	sp, #112	; 0x70
 8002a68:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002a6a:	f7ff ff77 	bl	800295c <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002a6e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002a72:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002a74:	4b1e      	ldr	r3, [pc, #120]	; (8002af0 <FMC_BANK3_Init+0x8c>)
 8002a76:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002a80:	2304      	movs	r3, #4
 8002a82:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002a84:	2301      	movs	r3, #1
 8002a86:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002a88:	2302      	movs	r3, #2
 8002a8a:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002a94:	2304      	movs	r3, #4
 8002a96:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002aa0:	2310      	movs	r3, #16
 8002aa2:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 8002ab4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ab8:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002aba:	2300      	movs	r3, #0
 8002abc:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002abe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ac2:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002acc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ad0:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002ada:	1d3a      	adds	r2, r7, #4
 8002adc:	1d39      	adds	r1, r7, #4
 8002ade:	f107 0320 	add.w	r3, r7, #32
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f006 ff62 	bl	80099ac <HAL_SRAM_Init>
}
 8002ae8:	bf00      	nop
 8002aea:	3770      	adds	r7, #112	; 0x70
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	a0000104 	.word	0xa0000104

08002af4 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002afe:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002b02:	88fb      	ldrh	r3, [r7, #6]
 8002b04:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b06:	f3bf 8f4f 	dsb	sy
}
 8002b0a:	bf00      	nop
  __DSB();
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002b22:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002b26:	79fa      	ldrb	r2, [r7, #7]
 8002b28:	b292      	uxth	r2, r2
 8002b2a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8002b2c:	f3bf 8f4f 	dsb	sy
}
 8002b30:	bf00      	nop
  __DSB();
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002b42:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002b46:	885b      	ldrh	r3, [r3, #2]
 8002b48:	b29b      	uxth	r3, r3
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002b58:	f7ff ff84 	bl	8002a64 <FMC_BANK3_Init>
}
 8002b5c:	bf00      	nop
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ffc1 	bl	8002af4 <FMC_BANK3_WriteData>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	4603      	mov	r3, r0
 8002b82:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002b84:	79fb      	ldrb	r3, [r7, #7]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ffc6 	bl	8002b18 <FMC_BANK3_WriteReg>
}
 8002b8c:	bf00      	nop
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002b98:	f7ff ffd1 	bl	8002b3e <FMC_BANK3_ReadData>
 8002b9c:	4603      	mov	r3, r0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 fd70 	bl	8003690 <HAL_Delay>
}
 8002bb0:	bf00      	nop
 8002bb2:	3708      	adds	r7, #8
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002bc0:	f000 f80e 	bl	8002be0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002bc4:	bf00      	nop
 8002bc6:	3708      	adds	r7, #8
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002bd4:	f000 f80b 	bl	8002bee <BSP_AUDIO_OUT_Error_CallBack>
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
}
 8002be4:	bf00      	nop
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	af00      	add	r7, sp, #0
}
 8002bf2:	bf00      	nop
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002c04:	f000 f804 	bl	8002c10 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002c08:	bf00      	nop
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002c14:	bf00      	nop
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002c22:	2001      	movs	r0, #1
 8002c24:	f000 f804 	bl	8002c30 <BSP_LCD_InitEx>
 8002c28:	4603      	mov	r3, r0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	bd80      	pop	{r7, pc}
	...

08002c30 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002c3c:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <BSP_LCD_InitEx+0xc0>)
 8002c3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c42:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002c44:	4b2a      	ldr	r3, [pc, #168]	; (8002cf0 <BSP_LCD_InitEx+0xc0>)
 8002c46:	4a2b      	ldr	r2, [pc, #172]	; (8002cf4 <BSP_LCD_InitEx+0xc4>)
 8002c48:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002c4a:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <BSP_LCD_InitEx+0xc0>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002c50:	f000 f9f0 	bl	8003034 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002c54:	2201      	movs	r2, #1
 8002c56:	2120      	movs	r1, #32
 8002c58:	4827      	ldr	r0, [pc, #156]	; (8002cf8 <BSP_LCD_InitEx+0xc8>)
 8002c5a:	f001 ffab 	bl	8004bb4 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c64:	4825      	ldr	r0, [pc, #148]	; (8002cfc <BSP_LCD_InitEx+0xcc>)
 8002c66:	f001 ffa5 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002c6a:	2005      	movs	r0, #5
 8002c6c:	f000 fd10 	bl	8003690 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002c70:	2201      	movs	r2, #1
 8002c72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c76:	4821      	ldr	r0, [pc, #132]	; (8002cfc <BSP_LCD_InitEx+0xcc>)
 8002c78:	f001 ff9c 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002c7c:	200a      	movs	r0, #10
 8002c7e:	f000 fd07 	bl	8003690 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002c82:	2200      	movs	r2, #0
 8002c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c88:	481c      	ldr	r0, [pc, #112]	; (8002cfc <BSP_LCD_InitEx+0xcc>)
 8002c8a:	f001 ff93 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002c8e:	2014      	movs	r0, #20
 8002c90:	f000 fcfe 	bl	8003690 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002c94:	2201      	movs	r2, #1
 8002c96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c9a:	4818      	ldr	r0, [pc, #96]	; (8002cfc <BSP_LCD_InitEx+0xcc>)
 8002c9c:	f001 ff8a 	bl	8004bb4 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002ca0:	200a      	movs	r0, #10
 8002ca2:	f000 fcf5 	bl	8003690 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002ca6:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <BSP_LCD_InitEx+0xd0>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	4798      	blx	r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b85      	cmp	r3, #133	; 0x85
 8002cb0:	d118      	bne.n	8002ce4 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8002cb2:	4b14      	ldr	r3, [pc, #80]	; (8002d04 <BSP_LCD_InitEx+0xd4>)
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <BSP_LCD_InitEx+0xd0>)
 8002cb6:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002cb8:	4b12      	ldr	r3, [pc, #72]	; (8002d04 <BSP_LCD_InitEx+0xd4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d103      	bne.n	8002cce <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f7ff fab3 	bl	8002232 <ST7789H2_SetOrientation>
 8002ccc:	e005      	b.n	8002cda <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d102      	bne.n	8002cda <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002cd4:	2002      	movs	r0, #2
 8002cd6:	f7ff faac 	bl	8002232 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002cda:	480b      	ldr	r0, [pc, #44]	; (8002d08 <BSP_LCD_InitEx+0xd8>)
 8002cdc:	f000 f84e 	bl	8002d7c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000054c 	.word	0x2000054c
 8002cf4:	20000044 	.word	0x20000044
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	40020400 	.word	0x40020400
 8002d00:	20000004 	.word	0x20000004
 8002d04:	20000558 	.word	0x20000558
 8002d08:	20000054 	.word	0x20000054

08002d0c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002d10:	4b03      	ldr	r3, [pc, #12]	; (8002d20 <BSP_LCD_GetXSize+0x14>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	4798      	blx	r3
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000558 	.word	0x20000558

08002d24 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <BSP_LCD_GetYSize+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2e:	4798      	blx	r3
 8002d30:	4603      	mov	r3, r0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	20000558 	.word	0x20000558

08002d3c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	4a03      	ldr	r2, [pc, #12]	; (8002d58 <BSP_LCD_SetTextColor+0x1c>)
 8002d4a:	6013      	str	r3, [r2, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	2000054c 	.word	0x2000054c

08002d5c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002d66:	88fb      	ldrh	r3, [r7, #6]
 8002d68:	4a03      	ldr	r2, [pc, #12]	; (8002d78 <BSP_LCD_SetBackColor+0x1c>)
 8002d6a:	6053      	str	r3, [r2, #4]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	2000054c 	.word	0x2000054c

08002d7c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002d84:	4a04      	ldr	r2, [pc, #16]	; (8002d98 <BSP_LCD_SetFont+0x1c>)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6093      	str	r3, [r2, #8]
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	2000054c 	.word	0x2000054c

08002d9c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002d9c:	b590      	push	{r4, r7, lr}
 8002d9e:	b087      	sub	sp, #28
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8002dae:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <BSP_LCD_Clear+0x68>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8002db4:	88fb      	ldrh	r3, [r7, #6]
 8002db6:	4a13      	ldr	r2, [pc, #76]	; (8002e04 <BSP_LCD_Clear+0x68>)
 8002db8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8002dba:	f7ff ffb3 	bl	8002d24 <BSP_LCD_GetYSize>
 8002dbe:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
 8002dc4:	e00d      	b.n	8002de2 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	b29c      	uxth	r4, r3
 8002dca:	f7ff ff9f 	bl	8002d0c <BSP_LCD_GetXSize>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4621      	mov	r1, r4
 8002dd6:	2000      	movs	r0, #0
 8002dd8:	f000 f8f2 	bl	8002fc0 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3301      	adds	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d3ed      	bcc.n	8002dc6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8002dea:	4a06      	ldr	r2, [pc, #24]	; (8002e04 <BSP_LCD_Clear+0x68>)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <BSP_LCD_Clear+0x68>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff ffa0 	bl	8002d3c <BSP_LCD_SetTextColor>
}
 8002dfc:	bf00      	nop
 8002dfe:	371c      	adds	r7, #28
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd90      	pop	{r4, r7, pc}
 8002e04:	2000054c 	.word	0x2000054c

08002e08 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
 8002e12:	460b      	mov	r3, r1
 8002e14:	80bb      	strh	r3, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002e1a:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <BSP_LCD_DisplayChar+0x50>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002e24:	490c      	ldr	r1, [pc, #48]	; (8002e58 <BSP_LCD_DisplayChar+0x50>)
 8002e26:	6889      	ldr	r1, [r1, #8]
 8002e28:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002e2a:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <BSP_LCD_DisplayChar+0x50>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	889b      	ldrh	r3, [r3, #4]
 8002e34:	3307      	adds	r3, #7
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	da00      	bge.n	8002e3c <BSP_LCD_DisplayChar+0x34>
 8002e3a:	3307      	adds	r3, #7
 8002e3c:	10db      	asrs	r3, r3, #3
 8002e3e:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002e42:	441a      	add	r2, r3
 8002e44:	88b9      	ldrh	r1, [r7, #4]
 8002e46:	88fb      	ldrh	r3, [r7, #6]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f000 f94f 	bl	80030ec <DrawChar>
}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	2000054c 	.word	0x2000054c

08002e5c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002e5c:	b590      	push	{r4, r7, lr}
 8002e5e:	b089      	sub	sp, #36	; 0x24
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60ba      	str	r2, [r7, #8]
 8002e64:	461a      	mov	r2, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	81fb      	strh	r3, [r7, #14]
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	81bb      	strh	r3, [r7, #12]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002e72:	2301      	movs	r3, #1
 8002e74:	83fb      	strh	r3, [r7, #30]
 8002e76:	2300      	movs	r3, #0
 8002e78:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002e86:	e002      	b.n	8002e8e <BSP_LCD_DisplayStringAt+0x32>
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	61bb      	str	r3, [r7, #24]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	1c5a      	adds	r2, r3, #1
 8002e92:	617a      	str	r2, [r7, #20]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1f6      	bne.n	8002e88 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002e9a:	f7ff ff37 	bl	8002d0c <BSP_LCD_GetXSize>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	4b38      	ldr	r3, [pc, #224]	; (8002f84 <BSP_LCD_DisplayStringAt+0x128>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	889b      	ldrh	r3, [r3, #4]
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002eac:	79fb      	ldrb	r3, [r7, #7]
 8002eae:	2b03      	cmp	r3, #3
 8002eb0:	d014      	beq.n	8002edc <BSP_LCD_DisplayStringAt+0x80>
 8002eb2:	2b03      	cmp	r3, #3
 8002eb4:	dc23      	bgt.n	8002efe <BSP_LCD_DisplayStringAt+0xa2>
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d002      	beq.n	8002ec0 <BSP_LCD_DisplayStringAt+0x64>
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d011      	beq.n	8002ee2 <BSP_LCD_DisplayStringAt+0x86>
 8002ebe:	e01e      	b.n	8002efe <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002ec0:	693a      	ldr	r2, [r7, #16]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <BSP_LCD_DisplayStringAt+0x128>)
 8002ec8:	6892      	ldr	r2, [r2, #8]
 8002eca:	8892      	ldrh	r2, [r2, #4]
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	085b      	lsrs	r3, r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	89fb      	ldrh	r3, [r7, #14]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	83fb      	strh	r3, [r7, #30]
      break;
 8002eda:	e013      	b.n	8002f04 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002edc:	89fb      	ldrh	r3, [r7, #14]
 8002ede:	83fb      	strh	r3, [r7, #30]
      break;
 8002ee0:	e010      	b.n	8002f04 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <BSP_LCD_DisplayStringAt+0x128>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	889b      	ldrh	r3, [r3, #4]
 8002ef0:	fb12 f303 	smulbb	r3, r2, r3
 8002ef4:	b29a      	uxth	r2, r3
 8002ef6:	89fb      	ldrh	r3, [r7, #14]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	83fb      	strh	r3, [r7, #30]
      break;
 8002efc:	e002      	b.n	8002f04 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 8002efe:	89fb      	ldrh	r3, [r7, #14]
 8002f00:	83fb      	strh	r3, [r7, #30]
      break;
 8002f02:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002f04:	8bfb      	ldrh	r3, [r7, #30]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <BSP_LCD_DisplayStringAt+0xb6>
 8002f0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	da15      	bge.n	8002f3e <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8002f12:	2301      	movs	r3, #1
 8002f14:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002f16:	e012      	b.n	8002f3e <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	781a      	ldrb	r2, [r3, #0]
 8002f1c:	89b9      	ldrh	r1, [r7, #12]
 8002f1e:	8bfb      	ldrh	r3, [r7, #30]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff71 	bl	8002e08 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002f26:	4b17      	ldr	r3, [pc, #92]	; (8002f84 <BSP_LCD_DisplayStringAt+0x128>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	889a      	ldrh	r2, [r3, #4]
 8002f2c:	8bfb      	ldrh	r3, [r7, #30]
 8002f2e:	4413      	add	r3, r2
 8002f30:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	3301      	adds	r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
    i++;
 8002f38:	8bbb      	ldrh	r3, [r7, #28]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2dc      	uxtb	r4, r3
 8002f4c:	f7ff fede 	bl	8002d0c <BSP_LCD_GetXSize>
 8002f50:	4601      	mov	r1, r0
 8002f52:	8bbb      	ldrh	r3, [r7, #28]
 8002f54:	4a0b      	ldr	r2, [pc, #44]	; (8002f84 <BSP_LCD_DisplayStringAt+0x128>)
 8002f56:	6892      	ldr	r2, [r2, #8]
 8002f58:	8892      	ldrh	r2, [r2, #4]
 8002f5a:	fb02 f303 	mul.w	r3, r2, r3
 8002f5e:	1acb      	subs	r3, r1, r3
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <BSP_LCD_DisplayStringAt+0x128>)
 8002f64:	6892      	ldr	r2, [r2, #8]
 8002f66:	8892      	ldrh	r2, [r2, #4]
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	bf2c      	ite	cs
 8002f6c:	2301      	movcs	r3, #1
 8002f6e:	2300      	movcc	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	4023      	ands	r3, r4
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1ce      	bne.n	8002f18 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	bf00      	nop
 8002f7e:	3724      	adds	r7, #36	; 0x24
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd90      	pop	{r4, r7, pc}
 8002f84:	2000054c 	.word	0x2000054c

08002f88 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	80fb      	strh	r3, [r7, #6]
 8002f92:	460b      	mov	r3, r1
 8002f94:	80bb      	strh	r3, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8002f9a:	4b08      	ldr	r3, [pc, #32]	; (8002fbc <BSP_LCD_DrawPixel+0x34>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695b      	ldr	r3, [r3, #20]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d006      	beq.n	8002fb2 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002fa4:	4b05      	ldr	r3, [pc, #20]	; (8002fbc <BSP_LCD_DrawPixel+0x34>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	887a      	ldrh	r2, [r7, #2]
 8002fac:	88b9      	ldrh	r1, [r7, #4]
 8002fae:	88f8      	ldrh	r0, [r7, #6]
 8002fb0:	4798      	blx	r3
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	20000558 	.word	0x20000558

08002fc0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002fc0:	b590      	push	{r4, r7, lr}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	80fb      	strh	r3, [r7, #6]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	80bb      	strh	r3, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002fd6:	4b15      	ldr	r3, [pc, #84]	; (800302c <BSP_LCD_DrawHLine+0x6c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	6a1b      	ldr	r3, [r3, #32]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00a      	beq.n	8002ff6 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002fe0:	4b12      	ldr	r3, [pc, #72]	; (800302c <BSP_LCD_DrawHLine+0x6c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6a1c      	ldr	r4, [r3, #32]
 8002fe6:	4b12      	ldr	r3, [pc, #72]	; (8003030 <BSP_LCD_DrawHLine+0x70>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	b298      	uxth	r0, r3
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	88ba      	ldrh	r2, [r7, #4]
 8002ff0:	88f9      	ldrh	r1, [r7, #6]
 8002ff2:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002ff4:	e015      	b.n	8003022 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	60fb      	str	r3, [r7, #12]
 8002ffa:	e00e      	b.n	800301a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	88fb      	ldrh	r3, [r7, #6]
 8003002:	4413      	add	r3, r2
 8003004:	b29b      	uxth	r3, r3
 8003006:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <BSP_LCD_DrawHLine+0x70>)
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	b292      	uxth	r2, r2
 800300c:	88b9      	ldrh	r1, [r7, #4]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff ffba 	bl	8002f88 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	3301      	adds	r3, #1
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	429a      	cmp	r2, r3
 8003020:	d3ec      	bcc.n	8002ffc <BSP_LCD_DrawHLine+0x3c>
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	bd90      	pop	{r4, r7, pc}
 800302a:	bf00      	nop
 800302c:	20000558 	.word	0x20000558
 8003030:	2000054c 	.word	0x2000054c

08003034 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 800303a:	2300      	movs	r3, #0
 800303c:	60bb      	str	r3, [r7, #8]
 800303e:	4b28      	ldr	r3, [pc, #160]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003042:	4a27      	ldr	r2, [pc, #156]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003044:	f043 0302 	orr.w	r3, r3, #2
 8003048:	6313      	str	r3, [r2, #48]	; 0x30
 800304a:	4b25      	ldr	r3, [pc, #148]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8003056:	2300      	movs	r3, #0
 8003058:	607b      	str	r3, [r7, #4]
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 800305c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305e:	4a20      	ldr	r2, [pc, #128]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003060:	f043 0302 	orr.w	r3, r3, #2
 8003064:	6313      	str	r3, [r2, #48]	; 0x30
 8003066:	4b1e      	ldr	r3, [pc, #120]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	607b      	str	r3, [r7, #4]
 8003070:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003072:	2300      	movs	r3, #0
 8003074:	603b      	str	r3, [r7, #0]
 8003076:	4b1a      	ldr	r3, [pc, #104]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800307a:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 800307c:	f043 0310 	orr.w	r3, r3, #16
 8003080:	6313      	str	r3, [r2, #48]	; 0x30
 8003082:	4b17      	ldr	r3, [pc, #92]	; (80030e0 <BSP_LCD_MspInit+0xac>)
 8003084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003086:	f003 0310 	and.w	r3, r3, #16
 800308a:	603b      	str	r3, [r7, #0]
 800308c:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 800308e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003092:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003094:	2300      	movs	r3, #0
 8003096:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003098:	2302      	movs	r3, #2
 800309a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800309c:	2301      	movs	r3, #1
 800309e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	4619      	mov	r1, r3
 80030a6:	480f      	ldr	r0, [pc, #60]	; (80030e4 <BSP_LCD_MspInit+0xb0>)
 80030a8:	f001 fbd8 	bl	800485c <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 80030ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80030b0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 80030b6:	f107 030c 	add.w	r3, r7, #12
 80030ba:	4619      	mov	r1, r3
 80030bc:	4809      	ldr	r0, [pc, #36]	; (80030e4 <BSP_LCD_MspInit+0xb0>)
 80030be:	f001 fbcd 	bl	800485c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 80030c2:	2320      	movs	r3, #32
 80030c4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80030c6:	2301      	movs	r3, #1
 80030c8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80030ca:	f107 030c 	add.w	r3, r7, #12
 80030ce:	4619      	mov	r1, r3
 80030d0:	4805      	ldr	r0, [pc, #20]	; (80030e8 <BSP_LCD_MspInit+0xb4>)
 80030d2:	f001 fbc3 	bl	800485c <HAL_GPIO_Init>
}
 80030d6:	bf00      	nop
 80030d8:	3720      	adds	r7, #32
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40023800 	.word	0x40023800
 80030e4:	40020400 	.word	0x40020400
 80030e8:	40021000 	.word	0x40021000

080030ec <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b088      	sub	sp, #32
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	4603      	mov	r3, r0
 80030f4:	603a      	str	r2, [r7, #0]
 80030f6:	80fb      	strh	r3, [r7, #6]
 80030f8:	460b      	mov	r3, r1
 80030fa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80030fc:	2300      	movs	r3, #0
 80030fe:	61fb      	str	r3, [r7, #28]
 8003100:	2300      	movs	r3, #0
 8003102:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8003104:	4b45      	ldr	r3, [pc, #276]	; (800321c <DrawChar+0x130>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	88db      	ldrh	r3, [r3, #6]
 800310a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 800310c:	4b43      	ldr	r3, [pc, #268]	; (800321c <DrawChar+0x130>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	889b      	ldrh	r3, [r3, #4]
 8003112:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003114:	8a3b      	ldrh	r3, [r7, #16]
 8003116:	3307      	adds	r3, #7
 8003118:	2b00      	cmp	r3, #0
 800311a:	da00      	bge.n	800311e <DrawChar+0x32>
 800311c:	3307      	adds	r3, #7
 800311e:	10db      	asrs	r3, r3, #3
 8003120:	b2db      	uxtb	r3, r3
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	b2da      	uxtb	r2, r3
 8003126:	8a3b      	ldrh	r3, [r7, #16]
 8003128:	b2db      	uxtb	r3, r3
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	e069      	b.n	8003208 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003134:	8a3b      	ldrh	r3, [r7, #16]
 8003136:	3307      	adds	r3, #7
 8003138:	2b00      	cmp	r3, #0
 800313a:	da00      	bge.n	800313e <DrawChar+0x52>
 800313c:	3307      	adds	r3, #7
 800313e:	10db      	asrs	r3, r3, #3
 8003140:	461a      	mov	r2, r3
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	fb02 f303 	mul.w	r3, r2, r3
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	4413      	add	r3, r2
 800314c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800314e:	8a3b      	ldrh	r3, [r7, #16]
 8003150:	3307      	adds	r3, #7
 8003152:	2b00      	cmp	r3, #0
 8003154:	da00      	bge.n	8003158 <DrawChar+0x6c>
 8003156:	3307      	adds	r3, #7
 8003158:	10db      	asrs	r3, r3, #3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d002      	beq.n	8003164 <DrawChar+0x78>
 800315e:	2b02      	cmp	r3, #2
 8003160:	d004      	beq.n	800316c <DrawChar+0x80>
 8003162:	e00c      	b.n	800317e <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	617b      	str	r3, [r7, #20]
      break;    
 800316a:	e016      	b.n	800319a <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	3201      	adds	r2, #1
 8003176:	7812      	ldrb	r2, [r2, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
      break;
 800317c:	e00d      	b.n	800319a <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	041a      	lsls	r2, r3, #16
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	3301      	adds	r3, #1
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	021b      	lsls	r3, r3, #8
 800318c:	4313      	orrs	r3, r2
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	3202      	adds	r2, #2
 8003192:	7812      	ldrb	r2, [r2, #0]
 8003194:	4313      	orrs	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
      break;
 8003198:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
 800319e:	e029      	b.n	80031f4 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80031a0:	8a3a      	ldrh	r2, [r7, #16]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	1ad2      	subs	r2, r2, r3
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	4413      	add	r3, r2
 80031aa:	3b01      	subs	r3, #1
 80031ac:	2201      	movs	r2, #1
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	461a      	mov	r2, r3
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4013      	ands	r3, r2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00c      	beq.n	80031d6 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 80031bc:	69bb      	ldr	r3, [r7, #24]
 80031be:	b29a      	uxth	r2, r3
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	4413      	add	r3, r2
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	4a15      	ldr	r2, [pc, #84]	; (800321c <DrawChar+0x130>)
 80031c8:	6812      	ldr	r2, [r2, #0]
 80031ca:	b292      	uxth	r2, r2
 80031cc:	88b9      	ldrh	r1, [r7, #4]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff feda 	bl	8002f88 <BSP_LCD_DrawPixel>
 80031d4:	e00b      	b.n	80031ee <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	b29a      	uxth	r2, r3
 80031da:	88fb      	ldrh	r3, [r7, #6]
 80031dc:	4413      	add	r3, r2
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4a0e      	ldr	r2, [pc, #56]	; (800321c <DrawChar+0x130>)
 80031e2:	6852      	ldr	r2, [r2, #4]
 80031e4:	b292      	uxth	r2, r2
 80031e6:	88b9      	ldrh	r1, [r7, #4]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff fecd 	bl	8002f88 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	3301      	adds	r3, #1
 80031f2:	61bb      	str	r3, [r7, #24]
 80031f4:	8a3b      	ldrh	r3, [r7, #16]
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d3d1      	bcc.n	80031a0 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 80031fc:	88bb      	ldrh	r3, [r7, #4]
 80031fe:	3301      	adds	r3, #1
 8003200:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	8a7b      	ldrh	r3, [r7, #18]
 800320a:	69fa      	ldr	r2, [r7, #28]
 800320c:	429a      	cmp	r2, r3
 800320e:	d391      	bcc.n	8003134 <DrawChar+0x48>
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3720      	adds	r7, #32
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	2000054c 	.word	0x2000054c

08003220 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{ 
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	71fb      	strb	r3, [r7, #7]
  
  /* uSD device interface configuration */
  uSdHandle.Instance = SDIO;
 800322a:	4b21      	ldr	r3, [pc, #132]	; (80032b0 <BSP_SD_Init+0x90>)
 800322c:	4a21      	ldr	r2, [pc, #132]	; (80032b4 <BSP_SD_Init+0x94>)
 800322e:	601a      	str	r2, [r3, #0]

  uSdHandle.Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003230:	4b1f      	ldr	r3, [pc, #124]	; (80032b0 <BSP_SD_Init+0x90>)
 8003232:	2200      	movs	r2, #0
 8003234:	605a      	str	r2, [r3, #4]
  uSdHandle.Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003236:	4b1e      	ldr	r3, [pc, #120]	; (80032b0 <BSP_SD_Init+0x90>)
 8003238:	2200      	movs	r2, #0
 800323a:	609a      	str	r2, [r3, #8]
  uSdHandle.Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800323c:	4b1c      	ldr	r3, [pc, #112]	; (80032b0 <BSP_SD_Init+0x90>)
 800323e:	2200      	movs	r2, #0
 8003240:	60da      	str	r2, [r3, #12]
  uSdHandle.Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003242:	4b1b      	ldr	r3, [pc, #108]	; (80032b0 <BSP_SD_Init+0x90>)
 8003244:	2200      	movs	r2, #0
 8003246:	611a      	str	r2, [r3, #16]
  uSdHandle.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_ENABLE;
 8003248:	4b19      	ldr	r3, [pc, #100]	; (80032b0 <BSP_SD_Init+0x90>)
 800324a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800324e:	615a      	str	r2, [r3, #20]
  uSdHandle.Init.ClockDiv            = SDIO_TRANSFER_CLK_DIV;
 8003250:	4b17      	ldr	r3, [pc, #92]	; (80032b0 <BSP_SD_Init+0x90>)
 8003252:	2200      	movs	r2, #0
 8003254:	619a      	str	r2, [r3, #24]
  
  /* Msp SD Detect pin initialization */
  BSP_SD_Detect_MspInit(&uSdHandle, NULL);
 8003256:	2100      	movs	r1, #0
 8003258:	4815      	ldr	r0, [pc, #84]	; (80032b0 <BSP_SD_Init+0x90>)
 800325a:	f000 f969 	bl	8003530 <BSP_SD_Detect_MspInit>
  
  /* Check if SD card is present */
  if(BSP_SD_IsDetected() != SD_PRESENT)
 800325e:	f000 f82b 	bl	80032b8 <BSP_SD_IsDetected>
 8003262:	4603      	mov	r3, r0
 8003264:	2b01      	cmp	r3, #1
 8003266:	d001      	beq.n	800326c <BSP_SD_Init+0x4c>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8003268:	2302      	movs	r3, #2
 800326a:	e01c      	b.n	80032a6 <BSP_SD_Init+0x86>
  }
  
  /* Msp SD initialization */
  BSP_SD_MspInit(&uSdHandle, NULL);
 800326c:	2100      	movs	r1, #0
 800326e:	4810      	ldr	r0, [pc, #64]	; (80032b0 <BSP_SD_Init+0x90>)
 8003270:	f000 f86a 	bl	8003348 <BSP_SD_MspInit>

  /* HAL SD initialization */
  if(HAL_SD_Init(&uSdHandle) != HAL_OK)
 8003274:	480e      	ldr	r0, [pc, #56]	; (80032b0 <BSP_SD_Init+0x90>)
 8003276:	f005 f8b1 	bl	80083dc <HAL_SD_Init>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <BSP_SD_Init+0x64>
  {
    sd_state = MSD_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	71fb      	strb	r3, [r7, #7]
  }
  
  /* Configure SD Bus width */
  if(sd_state == MSD_OK)
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10c      	bne.n	80032a4 <BSP_SD_Init+0x84>
  {
    /* Enable wide operation */
    if(HAL_SD_ConfigWideBusOperation(&uSdHandle, SDIO_BUS_WIDE_4B) != HAL_OK)
 800328a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800328e:	4808      	ldr	r0, [pc, #32]	; (80032b0 <BSP_SD_Init+0x90>)
 8003290:	f005 fe58 	bl	8008f44 <HAL_SD_ConfigWideBusOperation>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d002      	beq.n	80032a0 <BSP_SD_Init+0x80>
    {
      sd_state = MSD_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	71fb      	strb	r3, [r7, #7]
 800329e:	e001      	b.n	80032a4 <BSP_SD_Init+0x84>
    }
    else
    {
      sd_state = MSD_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	71fb      	strb	r3, [r7, #7]
    }
  }
  
  return  sd_state;
 80032a4:	79fb      	ldrb	r3, [r7, #7]
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	2000055c 	.word	0x2000055c
 80032b4:	40012c00 	.word	0x40012c00

080032b8 <BSP_SD_IsDetected>:
/**
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80032be:	2301      	movs	r3, #1
 80032c0:	71fb      	strb	r3, [r7, #7]
  
  /* Check SD card detect pin */
  if (HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) == GPIO_PIN_SET)
 80032c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80032c6:	4807      	ldr	r0, [pc, #28]	; (80032e4 <BSP_SD_IsDetected+0x2c>)
 80032c8:	f001 fc5c 	bl	8004b84 <HAL_GPIO_ReadPin>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <BSP_SD_IsDetected+0x1e>
  {
    status = SD_NOT_PRESENT;
 80032d2:	2300      	movs	r3, #0
 80032d4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80032d6:	79fb      	ldrb	r3, [r7, #7]
 80032d8:	b2db      	uxtb	r3, r3
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40021400 	.word	0x40021400

080032e8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{  
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  /* Read block(s) in DMA transfer mode */
  if(HAL_SD_ReadBlocks_DMA(&uSdHandle, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	68f9      	ldr	r1, [r7, #12]
 80032fa:	4806      	ldr	r0, [pc, #24]	; (8003314 <BSP_SD_ReadBlocks_DMA+0x2c>)
 80032fc:	f005 f8fe 	bl	80084fc <HAL_SD_ReadBlocks_DMA>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <BSP_SD_ReadBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <BSP_SD_ReadBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 800330a:	2300      	movs	r3, #0
  }
}
 800330c:	4618      	mov	r0, r3
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}
 8003314:	2000055c 	.word	0x2000055c

08003318 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{ 
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	60f8      	str	r0, [r7, #12]
 8003320:	60b9      	str	r1, [r7, #8]
 8003322:	607a      	str	r2, [r7, #4]
  /* Write block(s) in DMA transfer mode */
  if(HAL_SD_WriteBlocks_DMA(&uSdHandle, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68ba      	ldr	r2, [r7, #8]
 8003328:	68f9      	ldr	r1, [r7, #12]
 800332a:	4806      	ldr	r0, [pc, #24]	; (8003344 <BSP_SD_WriteBlocks_DMA+0x2c>)
 800332c:	f005 f9ce 	bl	80086cc <HAL_SD_WriteBlocks_DMA>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <BSP_SD_WriteBlocks_DMA+0x22>
  {
    return MSD_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e000      	b.n	800333c <BSP_SD_WriteBlocks_DMA+0x24>
  }
  else
  {
    return MSD_OK;
 800333a:	2300      	movs	r3, #0
  }
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	2000055c 	.word	0x2000055c

08003348 <BSP_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b08c      	sub	sp, #48	; 0x30
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);

  /* Enable SDIO clock */
  __HAL_RCC_SDIO_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	61bb      	str	r3, [r7, #24]
 8003356:	4b6f      	ldr	r3, [pc, #444]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 8003358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800335a:	4a6e      	ldr	r2, [pc, #440]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 800335c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003360:	6453      	str	r3, [r2, #68]	; 0x44
 8003362:	4b6c      	ldr	r3, [pc, #432]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 8003364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003366:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800336a:	61bb      	str	r3, [r7, #24]
 800336c:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable DMA2 clocks */
  __DMAx_TxRx_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	4b68      	ldr	r3, [pc, #416]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	4a67      	ldr	r2, [pc, #412]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 8003378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800337c:	6313      	str	r3, [r2, #48]	; 0x30
 800337e:	4b65      	ldr	r3, [pc, #404]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697b      	ldr	r3, [r7, #20]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
 800338e:	4b61      	ldr	r3, [pc, #388]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a60      	ldr	r2, [pc, #384]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 8003394:	f043 0304 	orr.w	r3, r3, #4
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b5e      	ldr	r3, [pc, #376]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0304 	and.w	r3, r3, #4
 80033a2:	613b      	str	r3, [r7, #16]
 80033a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033a6:	2300      	movs	r3, #0
 80033a8:	60fb      	str	r3, [r7, #12]
 80033aa:	4b5a      	ldr	r3, [pc, #360]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	4a59      	ldr	r2, [pc, #356]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	6313      	str	r3, [r2, #48]	; 0x30
 80033b6:	4b57      	ldr	r3, [pc, #348]	; (8003514 <BSP_SD_MspInit+0x1cc>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	f003 0301 	and.w	r3, r3, #1
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033c2:	2302      	movs	r3, #2
 80033c4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80033c6:	2301      	movs	r3, #1
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 80033ca:	2303      	movs	r3, #3
 80033cc:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = GPIO_AF12_SDIO;
 80033ce:	230c      	movs	r3, #12
 80033d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* GPIOC configuration: SD_D[0..3] and SD_clk */
  gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80033d2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80033d6:	61fb      	str	r3, [r7, #28]
   
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80033d8:	f107 031c 	add.w	r3, r7, #28
 80033dc:	4619      	mov	r1, r3
 80033de:	484e      	ldr	r0, [pc, #312]	; (8003518 <BSP_SD_MspInit+0x1d0>)
 80033e0:	f001 fa3c 	bl	800485c <HAL_GPIO_Init>

  /* GPIOA configuration: SD cmd */
  gpio_init_structure.Pin = GPIO_PIN_6;
 80033e4:	2340      	movs	r3, #64	; 0x40
 80033e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 80033e8:	f107 031c 	add.w	r3, r7, #28
 80033ec:	4619      	mov	r1, r3
 80033ee:	484b      	ldr	r0, [pc, #300]	; (800351c <BSP_SD_MspInit+0x1d4>)
 80033f0:	f001 fa34 	bl	800485c <HAL_GPIO_Init>

  /* NVIC configuration for SDIO interrupts */
  HAL_NVIC_SetPriority(SDIO_IRQn, 0x0E, 0x00);
 80033f4:	2200      	movs	r2, #0
 80033f6:	210e      	movs	r1, #14
 80033f8:	2031      	movs	r0, #49	; 0x31
 80033fa:	f000 fc97 	bl	8003d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80033fe:	2031      	movs	r0, #49	; 0x31
 8003400:	f000 fcb0 	bl	8003d64 <HAL_NVIC_EnableIRQ>
    
  /* Configure DMA Rx parameters */
  dma_rx_handle.Init.Channel             = SD_DMAx_Rx_CHANNEL;
 8003404:	4b46      	ldr	r3, [pc, #280]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003406:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800340a:	605a      	str	r2, [r3, #4]
  dma_rx_handle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800340c:	4b44      	ldr	r3, [pc, #272]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 800340e:	2200      	movs	r2, #0
 8003410:	609a      	str	r2, [r3, #8]
  dma_rx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003412:	4b43      	ldr	r3, [pc, #268]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003414:	2200      	movs	r2, #0
 8003416:	60da      	str	r2, [r3, #12]
  dma_rx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003418:	4b41      	ldr	r3, [pc, #260]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 800341a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800341e:	611a      	str	r2, [r3, #16]
  dma_rx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003420:	4b3f      	ldr	r3, [pc, #252]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003422:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003426:	615a      	str	r2, [r3, #20]
  dma_rx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003428:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 800342a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800342e:	619a      	str	r2, [r3, #24]
  dma_rx_handle.Init.Mode                = DMA_PFCTRL;
 8003430:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003432:	2220      	movs	r2, #32
 8003434:	61da      	str	r2, [r3, #28]
  dma_rx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 8003436:	4b3a      	ldr	r3, [pc, #232]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003438:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800343c:	621a      	str	r2, [r3, #32]
  dma_rx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800343e:	4b38      	ldr	r3, [pc, #224]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003440:	2204      	movs	r2, #4
 8003442:	625a      	str	r2, [r3, #36]	; 0x24
  dma_rx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003444:	4b36      	ldr	r3, [pc, #216]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003446:	2203      	movs	r2, #3
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
  dma_rx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 800344a:	4b35      	ldr	r3, [pc, #212]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 800344c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003450:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_rx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 8003452:	4b33      	ldr	r3, [pc, #204]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003454:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003458:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_rx_handle.Instance = SD_DMAx_Rx_STREAM;
 800345a:	4b31      	ldr	r3, [pc, #196]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 800345c:	4a31      	ldr	r2, [pc, #196]	; (8003524 <BSP_SD_MspInit+0x1dc>)
 800345e:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmarx, dma_rx_handle);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a2f      	ldr	r2, [pc, #188]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003464:	641a      	str	r2, [r3, #64]	; 0x40
 8003466:	4a2e      	ldr	r2, [pc, #184]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_rx_handle);
 800346c:	482c      	ldr	r0, [pc, #176]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 800346e:	f000 ff57 	bl	8004320 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_rx_handle);
 8003472:	482b      	ldr	r0, [pc, #172]	; (8003520 <BSP_SD_MspInit+0x1d8>)
 8003474:	f000 fea6 	bl	80041c4 <HAL_DMA_Init>
  
  /* Configure DMA Tx parameters */
  dma_tx_handle.Init.Channel             = SD_DMAx_Tx_CHANNEL;
 8003478:	4b2b      	ldr	r3, [pc, #172]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 800347a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800347e:	605a      	str	r2, [r3, #4]
  dma_tx_handle.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8003480:	4b29      	ldr	r3, [pc, #164]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 8003482:	2240      	movs	r2, #64	; 0x40
 8003484:	609a      	str	r2, [r3, #8]
  dma_tx_handle.Init.PeriphInc           = DMA_PINC_DISABLE;
 8003486:	4b28      	ldr	r3, [pc, #160]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 8003488:	2200      	movs	r2, #0
 800348a:	60da      	str	r2, [r3, #12]
  dma_tx_handle.Init.MemInc              = DMA_MINC_ENABLE;
 800348c:	4b26      	ldr	r3, [pc, #152]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 800348e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003492:	611a      	str	r2, [r3, #16]
  dma_tx_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003494:	4b24      	ldr	r3, [pc, #144]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 8003496:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800349a:	615a      	str	r2, [r3, #20]
  dma_tx_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800349c:	4b22      	ldr	r3, [pc, #136]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 800349e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034a2:	619a      	str	r2, [r3, #24]
  dma_tx_handle.Init.Mode                = DMA_PFCTRL;
 80034a4:	4b20      	ldr	r3, [pc, #128]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034a6:	2220      	movs	r2, #32
 80034a8:	61da      	str	r2, [r3, #28]
  dma_tx_handle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 80034aa:	4b1f      	ldr	r3, [pc, #124]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034ac:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80034b0:	621a      	str	r2, [r3, #32]
  dma_tx_handle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80034b2:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034b4:	2204      	movs	r2, #4
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24
  dma_tx_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034ba:	2203      	movs	r2, #3
 80034bc:	629a      	str	r2, [r3, #40]	; 0x28
  dma_tx_handle.Init.MemBurst            = DMA_MBURST_INC4;
 80034be:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034c0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034c4:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_tx_handle.Init.PeriphBurst         = DMA_PBURST_INC4;
 80034c6:	4b18      	ldr	r3, [pc, #96]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034c8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80034cc:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_tx_handle.Instance = SD_DMAx_Tx_STREAM;
 80034ce:	4b16      	ldr	r3, [pc, #88]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034d0:	4a16      	ldr	r2, [pc, #88]	; (800352c <BSP_SD_MspInit+0x1e4>)
 80034d2:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsd, hdmatx, dma_tx_handle);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a14      	ldr	r2, [pc, #80]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034d8:	63da      	str	r2, [r3, #60]	; 0x3c
 80034da:	4a13      	ldr	r2, [pc, #76]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_tx_handle);
 80034e0:	4811      	ldr	r0, [pc, #68]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034e2:	f000 ff1d 	bl	8004320 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_tx_handle); 
 80034e6:	4810      	ldr	r0, [pc, #64]	; (8003528 <BSP_SD_MspInit+0x1e0>)
 80034e8:	f000 fe6c 	bl	80041c4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Rx_IRQn, 0x0F, 0x00);
 80034ec:	2200      	movs	r2, #0
 80034ee:	210f      	movs	r1, #15
 80034f0:	203b      	movs	r0, #59	; 0x3b
 80034f2:	f000 fc1b 	bl	8003d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Rx_IRQn);
 80034f6:	203b      	movs	r0, #59	; 0x3b
 80034f8:	f000 fc34 	bl	8003d64 <HAL_NVIC_EnableIRQ>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SD_DMAx_Tx_IRQn, 0x0F, 0x00);
 80034fc:	2200      	movs	r2, #0
 80034fe:	210f      	movs	r1, #15
 8003500:	2045      	movs	r0, #69	; 0x45
 8003502:	f000 fc13 	bl	8003d2c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SD_DMAx_Tx_IRQn);
 8003506:	2045      	movs	r0, #69	; 0x45
 8003508:	f000 fc2c 	bl	8003d64 <HAL_NVIC_EnableIRQ>
}
 800350c:	bf00      	nop
 800350e:	3730      	adds	r7, #48	; 0x30
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40023800 	.word	0x40023800
 8003518:	40020800 	.word	0x40020800
 800351c:	40020000 	.word	0x40020000
 8003520:	200005e0 	.word	0x200005e0
 8003524:	40026458 	.word	0x40026458
 8003528:	20000640 	.word	0x20000640
 800352c:	400264a0 	.word	0x400264a0

08003530 <BSP_SD_Detect_MspInit>:
  * @brief  Initializes the SD Detect pin MSP.
  * @param  hsd: SD handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SD_Detect_MspInit(SD_HandleTypeDef *hsd, void *Params)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Params);
  
  SD_DETECT_GPIO_CLK_ENABLE();
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]
 800353e:	4b0f      	ldr	r3, [pc, #60]	; (800357c <BSP_SD_Detect_MspInit+0x4c>)
 8003540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003542:	4a0e      	ldr	r2, [pc, #56]	; (800357c <BSP_SD_Detect_MspInit+0x4c>)
 8003544:	f043 0320 	orr.w	r3, r3, #32
 8003548:	6313      	str	r3, [r2, #48]	; 0x30
 800354a:	4b0c      	ldr	r3, [pc, #48]	; (800357c <BSP_SD_Detect_MspInit+0x4c>)
 800354c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	60bb      	str	r3, [r7, #8]
 8003554:	68bb      	ldr	r3, [r7, #8]

  /* GPIO configuration in input for uSD_Detect signal */
  gpio_init_structure.Pin       = SD_DETECT_PIN;
 8003556:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800355a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800355c:	2300      	movs	r3, #0
 800355e:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003560:	2301      	movs	r3, #1
 8003562:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_HIGH;
 8003564:	2303      	movs	r3, #3
 8003566:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8003568:	f107 030c 	add.w	r3, r7, #12
 800356c:	4619      	mov	r1, r3
 800356e:	4804      	ldr	r0, [pc, #16]	; (8003580 <BSP_SD_Detect_MspInit+0x50>)
 8003570:	f001 f974 	bl	800485c <HAL_GPIO_Init>
}
 8003574:	bf00      	nop
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	40023800 	.word	0x40023800
 8003580:	40021400 	.word	0x40021400

08003584 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	af00      	add	r7, sp, #0
  return((HAL_SD_GetCardState(&uSdHandle) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003588:	4805      	ldr	r0, [pc, #20]	; (80035a0 <BSP_SD_GetCardState+0x1c>)
 800358a:	f005 fd57 	bl	800903c <HAL_SD_GetCardState>
 800358e:	4603      	mov	r3, r0
 8003590:	2b04      	cmp	r3, #4
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
}
 800359a:	4618      	mov	r0, r3
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	2000055c 	.word	0x2000055c

080035a4 <BSP_SD_GetCardInfo>:
/**
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&uSdHandle, CardInfo);
 80035ac:	6879      	ldr	r1, [r7, #4]
 80035ae:	4803      	ldr	r0, [pc, #12]	; (80035bc <BSP_SD_GetCardInfo+0x18>)
 80035b0:	f005 fc9c 	bl	8008eec <HAL_SD_GetCardInfo>
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	2000055c 	.word	0x2000055c

080035c0 <HAL_SD_AbortCallback>:
/**
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80035c8:	f000 f818 	bl	80035fc <BSP_SD_AbortCallback>
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_SD_TxCpltCallback>:
/**
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80035dc:	f009 f8e2 	bl	800c7a4 <BSP_SD_WriteCpltCallback>
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <HAL_SD_RxCpltCallback>:
/**
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80035f0:	f009 f8ea 	bl	800c7c8 <BSP_SD_ReadCpltCallback>
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <BSP_SD_AbortCallback>:

/**
  * @brief BSP SD Abort callbacks
  */
__weak void BSP_SD_AbortCallback(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0

}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003610:	4b0e      	ldr	r3, [pc, #56]	; (800364c <HAL_Init+0x40>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4a0d      	ldr	r2, [pc, #52]	; (800364c <HAL_Init+0x40>)
 8003616:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800361a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800361c:	4b0b      	ldr	r3, [pc, #44]	; (800364c <HAL_Init+0x40>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a0a      	ldr	r2, [pc, #40]	; (800364c <HAL_Init+0x40>)
 8003622:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003626:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003628:	4b08      	ldr	r3, [pc, #32]	; (800364c <HAL_Init+0x40>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a07      	ldr	r2, [pc, #28]	; (800364c <HAL_Init+0x40>)
 800362e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003634:	2003      	movs	r0, #3
 8003636:	f000 fb6e 	bl	8003d16 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800363a:	2000      	movs	r0, #0
 800363c:	f7fe fb88 	bl	8001d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003640:	f7fd fe02 	bl	8001248 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	40023c00 	.word	0x40023c00

08003650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_IncTick+0x20>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	4b06      	ldr	r3, [pc, #24]	; (8003674 <HAL_IncTick+0x24>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4413      	add	r3, r2
 8003660:	4a04      	ldr	r2, [pc, #16]	; (8003674 <HAL_IncTick+0x24>)
 8003662:	6013      	str	r3, [r2, #0]
}
 8003664:	bf00      	nop
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	20000060 	.word	0x20000060
 8003674:	200006a0 	.word	0x200006a0

08003678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return uwTick;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_GetTick+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	200006a0 	.word	0x200006a0

08003690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003698:	f7ff ffee 	bl	8003678 <HAL_GetTick>
 800369c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d005      	beq.n	80036b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036aa:	4b0a      	ldr	r3, [pc, #40]	; (80036d4 <HAL_Delay+0x44>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	461a      	mov	r2, r3
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036b6:	bf00      	nop
 80036b8:	f7ff ffde 	bl	8003678 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	68fa      	ldr	r2, [r7, #12]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d8f7      	bhi.n	80036b8 <HAL_Delay+0x28>
  {
  }
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000060 	.word	0x20000060

080036d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036e0:	2300      	movs	r3, #0
 80036e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e033      	b.n	8003756 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fd fdd4 	bl	80012a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 0310 	and.w	r3, r3, #16
 8003712:	2b00      	cmp	r3, #0
 8003714:	d118      	bne.n	8003748 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800371e:	f023 0302 	bic.w	r3, r3, #2
 8003722:	f043 0202 	orr.w	r2, r3, #2
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f94a 	bl	80039c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	f043 0201 	orr.w	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
 8003746:	e001      	b.n	800374c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003754:	7bfb      	ldrb	r3, [r7, #15]
}
 8003756:	4618      	mov	r0, r3
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003760:	b480      	push	{r7}
 8003762:	b085      	sub	sp, #20
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_ADC_ConfigChannel+0x1c>
 8003778:	2302      	movs	r3, #2
 800377a:	e113      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x244>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2b09      	cmp	r3, #9
 800378a:	d925      	bls.n	80037d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68d9      	ldr	r1, [r3, #12]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	b29b      	uxth	r3, r3
 8003798:	461a      	mov	r2, r3
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	3b1e      	subs	r3, #30
 80037a2:	2207      	movs	r2, #7
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43da      	mvns	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	400a      	ands	r2, r1
 80037b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	68d9      	ldr	r1, [r3, #12]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	4618      	mov	r0, r3
 80037c4:	4603      	mov	r3, r0
 80037c6:	005b      	lsls	r3, r3, #1
 80037c8:	4403      	add	r3, r0
 80037ca:	3b1e      	subs	r3, #30
 80037cc:	409a      	lsls	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	e022      	b.n	800381e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	6919      	ldr	r1, [r3, #16]
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	461a      	mov	r2, r3
 80037e6:	4613      	mov	r3, r2
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	4413      	add	r3, r2
 80037ec:	2207      	movs	r2, #7
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	400a      	ands	r2, r1
 80037fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	6919      	ldr	r1, [r3, #16]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689a      	ldr	r2, [r3, #8]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	b29b      	uxth	r3, r3
 800380c:	4618      	mov	r0, r3
 800380e:	4603      	mov	r3, r0
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	4403      	add	r3, r0
 8003814:	409a      	lsls	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b06      	cmp	r3, #6
 8003824:	d824      	bhi.n	8003870 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	4613      	mov	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	3b05      	subs	r3, #5
 8003838:	221f      	movs	r2, #31
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	43da      	mvns	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	400a      	ands	r2, r1
 8003846:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	b29b      	uxth	r3, r3
 8003854:	4618      	mov	r0, r3
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	685a      	ldr	r2, [r3, #4]
 800385a:	4613      	mov	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	4413      	add	r3, r2
 8003860:	3b05      	subs	r3, #5
 8003862:	fa00 f203 	lsl.w	r2, r0, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	635a      	str	r2, [r3, #52]	; 0x34
 800386e:	e04c      	b.n	800390a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	2b0c      	cmp	r3, #12
 8003876:	d824      	bhi.n	80038c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	3b23      	subs	r3, #35	; 0x23
 800388a:	221f      	movs	r2, #31
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43da      	mvns	r2, r3
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	400a      	ands	r2, r1
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	3b23      	subs	r3, #35	; 0x23
 80038b4:	fa00 f203 	lsl.w	r2, r0, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	631a      	str	r2, [r3, #48]	; 0x30
 80038c0:	e023      	b.n	800390a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4413      	add	r3, r2
 80038d2:	3b41      	subs	r3, #65	; 0x41
 80038d4:	221f      	movs	r2, #31
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43da      	mvns	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	400a      	ands	r2, r1
 80038e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685a      	ldr	r2, [r3, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	3b41      	subs	r3, #65	; 0x41
 80038fe:	fa00 f203 	lsl.w	r2, r0, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800390a:	4b29      	ldr	r3, [pc, #164]	; (80039b0 <HAL_ADC_ConfigChannel+0x250>)
 800390c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a28      	ldr	r2, [pc, #160]	; (80039b4 <HAL_ADC_ConfigChannel+0x254>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d10f      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1d8>
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b12      	cmp	r3, #18
 800391e:	d10b      	bne.n	8003938 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a1d      	ldr	r2, [pc, #116]	; (80039b4 <HAL_ADC_ConfigChannel+0x254>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d12b      	bne.n	800399a <HAL_ADC_ConfigChannel+0x23a>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_ADC_ConfigChannel+0x258>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <HAL_ADC_ConfigChannel+0x1f4>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b11      	cmp	r3, #17
 8003952:	d122      	bne.n	800399a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a11      	ldr	r2, [pc, #68]	; (80039b8 <HAL_ADC_ConfigChannel+0x258>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d111      	bne.n	800399a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003976:	4b11      	ldr	r3, [pc, #68]	; (80039bc <HAL_ADC_ConfigChannel+0x25c>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <HAL_ADC_ConfigChannel+0x260>)
 800397c:	fba2 2303 	umull	r2, r3, r2, r3
 8003980:	0c9a      	lsrs	r2, r3, #18
 8003982:	4613      	mov	r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800398c:	e002      	b.n	8003994 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3b01      	subs	r3, #1
 8003992:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f9      	bne.n	800398e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	3714      	adds	r7, #20
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	40012300 	.word	0x40012300
 80039b4:	40012000 	.word	0x40012000
 80039b8:	10000012 	.word	0x10000012
 80039bc:	20000000 	.word	0x20000000
 80039c0:	431bde83 	.word	0x431bde83

080039c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039cc:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <ADC_Init+0x1f0>)
 80039ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	685a      	ldr	r2, [r3, #4]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	431a      	orrs	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	6859      	ldr	r1, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	021a      	lsls	r2, r3, #8
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6859      	ldr	r1, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	689a      	ldr	r2, [r3, #8]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689a      	ldr	r2, [r3, #8]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6899      	ldr	r1, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a56:	4a58      	ldr	r2, [pc, #352]	; (8003bb8 <ADC_Init+0x1f4>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d022      	beq.n	8003aa2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	6899      	ldr	r1, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003a8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	6899      	ldr	r1, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	609a      	str	r2, [r3, #8]
 8003aa0:	e00f      	b.n	8003ac2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ab0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ac0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 0202 	bic.w	r2, r2, #2
 8003ad0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	6899      	ldr	r1, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	7e1b      	ldrb	r3, [r3, #24]
 8003adc:	005a      	lsls	r2, r3, #1
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01b      	beq.n	8003b28 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003afe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6859      	ldr	r1, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	3b01      	subs	r3, #1
 8003b1c:	035a      	lsls	r2, r3, #13
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	430a      	orrs	r2, r1
 8003b24:	605a      	str	r2, [r3, #4]
 8003b26:	e007      	b.n	8003b38 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685a      	ldr	r2, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	3b01      	subs	r3, #1
 8003b54:	051a      	lsls	r2, r3, #20
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	430a      	orrs	r2, r1
 8003b5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b7a:	025a      	lsls	r2, r3, #9
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6899      	ldr	r1, [r3, #8]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	029a      	lsls	r2, r3, #10
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
}
 8003ba8:	bf00      	nop
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	40012300 	.word	0x40012300
 8003bb8:	0f000001 	.word	0x0f000001

08003bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	f003 0307 	and.w	r3, r3, #7
 8003bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bcc:	4b0c      	ldr	r3, [pc, #48]	; (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bd2:	68ba      	ldr	r2, [r7, #8]
 8003bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003bd8:	4013      	ands	r3, r2
 8003bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bee:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <__NVIC_SetPriorityGrouping+0x44>)
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	60d3      	str	r3, [r2, #12]
}
 8003bf4:	bf00      	nop
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003c08:	4b04      	ldr	r3, [pc, #16]	; (8003c1c <__NVIC_GetPriorityGrouping+0x18>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	0a1b      	lsrs	r3, r3, #8
 8003c0e:	f003 0307 	and.w	r3, r3, #7
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	e000ed00 	.word	0xe000ed00

08003c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db0b      	blt.n	8003c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	4907      	ldr	r1, [pc, #28]	; (8003c58 <__NVIC_EnableIRQ+0x38>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2001      	movs	r0, #1
 8003c42:	fa00 f202 	lsl.w	r2, r0, r2
 8003c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	e000e100 	.word	0xe000e100

08003c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	6039      	str	r1, [r7, #0]
 8003c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	db0a      	blt.n	8003c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	490c      	ldr	r1, [pc, #48]	; (8003ca8 <__NVIC_SetPriority+0x4c>)
 8003c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c7a:	0112      	lsls	r2, r2, #4
 8003c7c:	b2d2      	uxtb	r2, r2
 8003c7e:	440b      	add	r3, r1
 8003c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c84:	e00a      	b.n	8003c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	4908      	ldr	r1, [pc, #32]	; (8003cac <__NVIC_SetPriority+0x50>)
 8003c8c:	79fb      	ldrb	r3, [r7, #7]
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	3b04      	subs	r3, #4
 8003c94:	0112      	lsls	r2, r2, #4
 8003c96:	b2d2      	uxtb	r2, r2
 8003c98:	440b      	add	r3, r1
 8003c9a:	761a      	strb	r2, [r3, #24]
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr
 8003ca8:	e000e100 	.word	0xe000e100
 8003cac:	e000ed00 	.word	0xe000ed00

08003cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	; 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	f1c3 0307 	rsb	r3, r3, #7
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	bf28      	it	cs
 8003cce:	2304      	movcs	r3, #4
 8003cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	2b06      	cmp	r3, #6
 8003cd8:	d902      	bls.n	8003ce0 <NVIC_EncodePriority+0x30>
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	3b03      	subs	r3, #3
 8003cde:	e000      	b.n	8003ce2 <NVIC_EncodePriority+0x32>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8003d02:	43d9      	mvns	r1, r3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d08:	4313      	orrs	r3, r2
         );
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3724      	adds	r7, #36	; 0x24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ff4c 	bl	8003bbc <__NVIC_SetPriorityGrouping>
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
 8003d38:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d3e:	f7ff ff61 	bl	8003c04 <__NVIC_GetPriorityGrouping>
 8003d42:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68b9      	ldr	r1, [r7, #8]
 8003d48:	6978      	ldr	r0, [r7, #20]
 8003d4a:	f7ff ffb1 	bl	8003cb0 <NVIC_EncodePriority>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d54:	4611      	mov	r1, r2
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7ff ff80 	bl	8003c5c <__NVIC_SetPriority>
}
 8003d5c:	bf00      	nop
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff ff54 	bl	8003c20 <__NVIC_EnableIRQ>
}
 8003d78:	bf00      	nop
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e014      	b.n	8003dbc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	791b      	ldrb	r3, [r3, #4]
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f7fd fafa 	bl	800139c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2202      	movs	r2, #2
 8003dac:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dda:	d118      	bne.n	8003e0e <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2204      	movs	r2, #4
 8003de0:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	f043 0201 	orr.w	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e06:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f000 f825 	bl	8003e58 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e1c:	d118      	bne.n	8003e50 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2204      	movs	r2, #4
 8003e22:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	f043 0202 	orr.w	r2, r3, #2
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003e38:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003e48:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f85b 	bl	8003f06 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003e50:	bf00      	nop
 8003e52:	3708      	adds	r7, #8
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8003e78:	2300      	movs	r3, #0
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	795b      	ldrb	r3, [r3, #5]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_DAC_ConfigChannel+0x20>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e036      	b.n	8003efa <HAL_DAC_ConfigChannel+0x8e>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2202      	movs	r2, #2
 8003e96:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003ea0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4013      	ands	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003ebe:	693a      	ldr	r2, [r7, #16]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	22c0      	movs	r2, #192	; 0xc0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43da      	mvns	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	400a      	ands	r2, r1
 8003eea:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	371c      	adds	r7, #28
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0cf      	b.n	80040ce <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a69      	ldr	r2, [pc, #420]	; (80040d8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00e      	beq.n	8003f56 <HAL_DFSDM_ChannelInit+0x3a>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4a67      	ldr	r2, [pc, #412]	; (80040dc <HAL_DFSDM_ChannelInit+0x1c0>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d009      	beq.n	8003f56 <HAL_DFSDM_ChannelInit+0x3a>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a66      	ldr	r2, [pc, #408]	; (80040e0 <HAL_DFSDM_ChannelInit+0x1c4>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d004      	beq.n	8003f56 <HAL_DFSDM_ChannelInit+0x3a>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a64      	ldr	r2, [pc, #400]	; (80040e4 <HAL_DFSDM_ChannelInit+0x1c8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d106      	bne.n	8003f64 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003f56:	4b64      	ldr	r3, [pc, #400]	; (80040e8 <HAL_DFSDM_ChannelInit+0x1cc>)
 8003f58:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8003f5a:	4b64      	ldr	r3, [pc, #400]	; (80040ec <HAL_DFSDM_ChannelInit+0x1d0>)
 8003f5c:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003f5e:	4b5e      	ldr	r3, [pc, #376]	; (80040d8 <HAL_DFSDM_ChannelInit+0x1bc>)
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	e005      	b.n	8003f70 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8003f64:	4b62      	ldr	r3, [pc, #392]	; (80040f0 <HAL_DFSDM_ChannelInit+0x1d4>)
 8003f66:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8003f68:	4b62      	ldr	r3, [pc, #392]	; (80040f4 <HAL_DFSDM_ChannelInit+0x1d8>)
 8003f6a:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8003f6c:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <HAL_DFSDM_ChannelInit+0x1dc>)
 8003f6e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 f8c1 	bl	80040fc <DFSDM_GetChannelFromInstance>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	693a      	ldr	r2, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0a0      	b.n	80040ce <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7fd fa51 	bl	8001434 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d125      	bne.n	8003ff0 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	431a      	orrs	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	791b      	ldrb	r3, [r3, #4]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d108      	bne.n	8003fe4 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	041b      	lsls	r3, r3, #16
 8003fde:	431a      	orrs	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003ffe:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800400e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8004014:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 020f 	bic.w	r2, r2, #15
 800402c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6819      	ldr	r1, [r3, #0]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 800403c:	431a      	orrs	r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	689a      	ldr	r2, [r3, #8]
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8004054:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6899      	ldr	r1, [r3, #8]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004064:	3b01      	subs	r3, #1
 8004066:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8004068:	431a      	orrs	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	430a      	orrs	r2, r1
 8004070:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f002 0207 	and.w	r2, r2, #7
 8004080:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6859      	ldr	r1, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800408c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004092:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8004094:	431a      	orrs	r2, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040ac:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f81e 	bl	80040fc <DFSDM_GetChannelFromInstance>
 80040c0:	4603      	mov	r3, r0
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	4413      	add	r3, r2
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3718      	adds	r7, #24
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
 80040d6:	bf00      	nop
 80040d8:	40016000 	.word	0x40016000
 80040dc:	40016020 	.word	0x40016020
 80040e0:	40016040 	.word	0x40016040
 80040e4:	40016060 	.word	0x40016060
 80040e8:	200006a4 	.word	0x200006a4
 80040ec:	200006a8 	.word	0x200006a8
 80040f0:	200006b8 	.word	0x200006b8
 80040f4:	200006bc 	.word	0x200006bc
 80040f8:	40016400 	.word	0x40016400

080040fc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b085      	sub	sp, #20
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a24      	ldr	r2, [pc, #144]	; (8004198 <DFSDM_GetChannelFromInstance+0x9c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <DFSDM_GetChannelFromInstance+0x18>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a23      	ldr	r2, [pc, #140]	; (800419c <DFSDM_GetChannelFromInstance+0xa0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d102      	bne.n	800411a <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
 8004118:	e037      	b.n	800418a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a20      	ldr	r2, [pc, #128]	; (80041a0 <DFSDM_GetChannelFromInstance+0xa4>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d003      	beq.n	800412a <DFSDM_GetChannelFromInstance+0x2e>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a1f      	ldr	r2, [pc, #124]	; (80041a4 <DFSDM_GetChannelFromInstance+0xa8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d102      	bne.n	8004130 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 800412a:	2301      	movs	r3, #1
 800412c:	60fb      	str	r3, [r7, #12]
 800412e:	e02c      	b.n	800418a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <DFSDM_GetChannelFromInstance+0xac>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <DFSDM_GetChannelFromInstance+0x44>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <DFSDM_GetChannelFromInstance+0xb0>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d102      	bne.n	8004146 <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8004140:	2302      	movs	r3, #2
 8004142:	60fb      	str	r3, [r7, #12]
 8004144:	e021      	b.n	800418a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a19      	ldr	r2, [pc, #100]	; (80041b0 <DFSDM_GetChannelFromInstance+0xb4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d003      	beq.n	8004156 <DFSDM_GetChannelFromInstance+0x5a>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <DFSDM_GetChannelFromInstance+0xb8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d102      	bne.n	800415c <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8004156:	2303      	movs	r3, #3
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	e016      	b.n	800418a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <DFSDM_GetChannelFromInstance+0xbc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d102      	bne.n	800416a <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8004164:	2304      	movs	r3, #4
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	e00f      	b.n	800418a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a13      	ldr	r2, [pc, #76]	; (80041bc <DFSDM_GetChannelFromInstance+0xc0>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d102      	bne.n	8004178 <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8004172:	2305      	movs	r3, #5
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	e008      	b.n	800418a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a11      	ldr	r2, [pc, #68]	; (80041c0 <DFSDM_GetChannelFromInstance+0xc4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d102      	bne.n	8004186 <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8004180:	2306      	movs	r3, #6
 8004182:	60fb      	str	r3, [r7, #12]
 8004184:	e001      	b.n	800418a <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8004186:	2307      	movs	r3, #7
 8004188:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	40016000 	.word	0x40016000
 800419c:	40016400 	.word	0x40016400
 80041a0:	40016020 	.word	0x40016020
 80041a4:	40016420 	.word	0x40016420
 80041a8:	40016040 	.word	0x40016040
 80041ac:	40016440 	.word	0x40016440
 80041b0:	40016060 	.word	0x40016060
 80041b4:	40016460 	.word	0x40016460
 80041b8:	40016480 	.word	0x40016480
 80041bc:	400164a0 	.word	0x400164a0
 80041c0:	400164c0 	.word	0x400164c0

080041c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80041d0:	f7ff fa52 	bl	8003678 <HAL_GetTick>
 80041d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e099      	b.n	8004314 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2202      	movs	r2, #2
 80041ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0201 	bic.w	r2, r2, #1
 80041fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004200:	e00f      	b.n	8004222 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004202:	f7ff fa39 	bl	8003678 <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b05      	cmp	r3, #5
 800420e:	d908      	bls.n	8004222 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2220      	movs	r2, #32
 8004214:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2203      	movs	r2, #3
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e078      	b.n	8004314 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e8      	bne.n	8004202 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4b38      	ldr	r3, [pc, #224]	; (800431c <HAL_DMA_Init+0x158>)
 800423c:	4013      	ands	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800424e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800425a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004266:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	4313      	orrs	r3, r2
 8004272:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b04      	cmp	r3, #4
 800427a:	d107      	bne.n	800428c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	4313      	orrs	r3, r2
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	697a      	ldr	r2, [r7, #20]
 8004292:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f023 0307 	bic.w	r3, r3, #7
 80042a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d117      	bne.n	80042e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00e      	beq.n	80042e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f971 	bl	80045b0 <DMA_CheckFifoParam>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2240      	movs	r2, #64	; 0x40
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80042e2:	2301      	movs	r3, #1
 80042e4:	e016      	b.n	8004314 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	697a      	ldr	r2, [r7, #20]
 80042ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f000 f928 	bl	8004544 <DMA_CalcBaseAndBitshift>
 80042f4:	4603      	mov	r3, r0
 80042f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fc:	223f      	movs	r2, #63	; 0x3f
 80042fe:	409a      	lsls	r2, r3
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	e010803f 	.word	0xe010803f

08004320 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e050      	b.n	80043d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b02      	cmp	r3, #2
 800433c:	d101      	bne.n	8004342 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800433e:	2302      	movs	r3, #2
 8004340:	e048      	b.n	80043d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 0201 	bic.w	r2, r2, #1
 8004350:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2200      	movs	r2, #0
 8004358:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2200      	movs	r2, #0
 8004360:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2200      	movs	r2, #0
 8004368:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2200      	movs	r2, #0
 8004370:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2200      	movs	r2, #0
 8004378:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2221      	movs	r2, #33	; 0x21
 8004380:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8de 	bl	8004544 <DMA_CalcBaseAndBitshift>
 8004388:	4603      	mov	r3, r0
 800438a:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	223f      	movs	r2, #63	; 0x3f
 80043b6:	409a      	lsls	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3710      	adds	r7, #16
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}

080043dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b086      	sub	sp, #24
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_DMA_Start_IT+0x26>
 80043fe:	2302      	movs	r3, #2
 8004400:	e040      	b.n	8004484 <HAL_DMA_Start_IT+0xa8>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b01      	cmp	r3, #1
 8004414:	d12f      	bne.n	8004476 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2202      	movs	r2, #2
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2200      	movs	r2, #0
 8004422:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	68b9      	ldr	r1, [r7, #8]
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f000 f85c 	bl	80044e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004434:	223f      	movs	r2, #63	; 0x3f
 8004436:	409a      	lsls	r2, r3
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f042 0216 	orr.w	r2, r2, #22
 800444a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	2b00      	cmp	r3, #0
 8004452:	d007      	beq.n	8004464 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f042 0208 	orr.w	r2, r2, #8
 8004462:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f042 0201 	orr.w	r2, r2, #1
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	e005      	b.n	8004482 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800447e:	2302      	movs	r3, #2
 8004480:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004482:	7dfb      	ldrb	r3, [r7, #23]
}
 8004484:	4618      	mov	r0, r3
 8004486:	3718      	adds	r7, #24
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b02      	cmp	r3, #2
 800449e:	d004      	beq.n	80044aa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2280      	movs	r2, #128	; 0x80
 80044a4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e00c      	b.n	80044c4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2205      	movs	r2, #5
 80044ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004504:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d108      	bne.n	8004528 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004526:	e007      	b.n	8004538 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3b10      	subs	r3, #16
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800455e:	4a13      	ldr	r2, [pc, #76]	; (80045ac <DMA_CalcBaseAndBitshift+0x68>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d909      	bls.n	8004586 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	659a      	str	r2, [r3, #88]	; 0x58
 8004584:	e007      	b.n	8004596 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	aaaaaaab 	.word	0xaaaaaaab
 80045ac:	08018c64 	.word	0x08018c64

080045b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d11f      	bne.n	800460a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d856      	bhi.n	800467e <DMA_CheckFifoParam+0xce>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <DMA_CheckFifoParam+0x28>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045fb 	.word	0x080045fb
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	0800467f 	.word	0x0800467f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d046      	beq.n	8004682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f8:	e043      	b.n	8004682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004602:	d140      	bne.n	8004686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004608:	e03d      	b.n	8004686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004612:	d121      	bne.n	8004658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d837      	bhi.n	800468a <DMA_CheckFifoParam+0xda>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <DMA_CheckFifoParam+0x70>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004631 	.word	0x08004631
 8004624:	08004637 	.word	0x08004637
 8004628:	08004631 	.word	0x08004631
 800462c:	08004649 	.word	0x08004649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e030      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d025      	beq.n	800468e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004646:	e022      	b.n	800468e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004650:	d11f      	bne.n	8004692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004656:	e01c      	b.n	8004692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d903      	bls.n	8004666 <DMA_CheckFifoParam+0xb6>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d003      	beq.n	800466c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004664:	e018      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      break;
 800466a:	e015      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e00b      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 800467e:	bf00      	nop
 8004680:	e00a      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004682:	bf00      	nop
 8004684:	e008      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004686:	bf00      	nop
 8004688:	e006      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468a:	bf00      	nop
 800468c:	e004      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468e:	bf00      	nop
 8004690:	e002      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;   
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
    }
  } 
  
  return status; 
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop

080046a8 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e081      	b.n	80047be <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fc ffc2 	bl	8001658 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2224      	movs	r2, #36	; 0x24
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685a      	ldr	r2, [r3, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004708:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d107      	bne.n	8004722 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689a      	ldr	r2, [r3, #8]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800471e:	609a      	str	r2, [r3, #8]
 8004720:	e006      	b.n	8004730 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689a      	ldr	r2, [r3, #8]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800472e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d104      	bne.n	8004742 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004740:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6812      	ldr	r2, [r2, #0]
 800474c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004754:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68da      	ldr	r2, [r3, #12]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004764:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	ea42 0103 	orr.w	r1, r2, r3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	021a      	lsls	r2, r3, #8
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	430a      	orrs	r2, r1
 800477e:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69d9      	ldr	r1, [r3, #28]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a1a      	ldr	r2, [r3, #32]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f042 0201 	orr.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2220      	movs	r2, #32
 80047aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3708      	adds	r7, #8
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b20      	cmp	r3, #32
 80047da:	d138      	bne.n	800484e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047e2:	2b01      	cmp	r3, #1
 80047e4:	d101      	bne.n	80047ea <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 80047e6:	2302      	movs	r3, #2
 80047e8:	e032      	b.n	8004850 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2201      	movs	r2, #1
 80047ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2224      	movs	r2, #36	; 0x24
 80047f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	681a      	ldr	r2, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0201 	bic.w	r2, r2, #1
 8004808:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004818:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6819      	ldr	r1, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	430a      	orrs	r2, r1
 8004828:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800485c:	b480      	push	{r7}
 800485e:	b089      	sub	sp, #36	; 0x24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004866:	2300      	movs	r3, #0
 8004868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800486a:	2300      	movs	r3, #0
 800486c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800486e:	2300      	movs	r3, #0
 8004870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004872:	2300      	movs	r3, #0
 8004874:	61fb      	str	r3, [r7, #28]
 8004876:	e165      	b.n	8004b44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004878:	2201      	movs	r2, #1
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	fa02 f303 	lsl.w	r3, r2, r3
 8004880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	4013      	ands	r3, r2
 800488a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	429a      	cmp	r2, r3
 8004892:	f040 8154 	bne.w	8004b3e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d00b      	beq.n	80048b6 <HAL_GPIO_Init+0x5a>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d007      	beq.n	80048b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80048aa:	2b11      	cmp	r3, #17
 80048ac:	d003      	beq.n	80048b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b12      	cmp	r3, #18
 80048b4:	d130      	bne.n	8004918 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	689b      	ldr	r3, [r3, #8]
 80048ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	005b      	lsls	r3, r3, #1
 80048c0:	2203      	movs	r2, #3
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	43db      	mvns	r3, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4013      	ands	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	fa02 f303 	lsl.w	r3, r2, r3
 80048da:	69ba      	ldr	r2, [r7, #24]
 80048dc:	4313      	orrs	r3, r2
 80048de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048ec:	2201      	movs	r2, #1
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	fa02 f303 	lsl.w	r3, r2, r3
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	f003 0201 	and.w	r2, r3, #1
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	4313      	orrs	r3, r2
 8004910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	69ba      	ldr	r2, [r7, #24]
 8004916:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	005b      	lsls	r3, r3, #1
 8004922:	2203      	movs	r2, #3
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	43db      	mvns	r3, r3
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	4013      	ands	r3, r2
 800492e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	689a      	ldr	r2, [r3, #8]
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	005b      	lsls	r3, r3, #1
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	2b02      	cmp	r3, #2
 800494e:	d003      	beq.n	8004958 <HAL_GPIO_Init+0xfc>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b12      	cmp	r3, #18
 8004956:	d123      	bne.n	80049a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004958:	69fb      	ldr	r3, [r7, #28]
 800495a:	08da      	lsrs	r2, r3, #3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3208      	adds	r2, #8
 8004960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	220f      	movs	r2, #15
 8004970:	fa02 f303 	lsl.w	r3, r2, r3
 8004974:	43db      	mvns	r3, r3
 8004976:	69ba      	ldr	r2, [r7, #24]
 8004978:	4013      	ands	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691a      	ldr	r2, [r3, #16]
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	08da      	lsrs	r2, r3, #3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	3208      	adds	r2, #8
 800499a:	69b9      	ldr	r1, [r7, #24]
 800499c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	005b      	lsls	r3, r3, #1
 80049aa:	2203      	movs	r2, #3
 80049ac:	fa02 f303 	lsl.w	r3, r2, r3
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f003 0203 	and.w	r2, r3, #3
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	69ba      	ldr	r2, [r7, #24]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	69ba      	ldr	r2, [r7, #24]
 80049d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 80ae 	beq.w	8004b3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
 80049e6:	4b5d      	ldr	r3, [pc, #372]	; (8004b5c <HAL_GPIO_Init+0x300>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	4a5c      	ldr	r2, [pc, #368]	; (8004b5c <HAL_GPIO_Init+0x300>)
 80049ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f0:	6453      	str	r3, [r2, #68]	; 0x44
 80049f2:	4b5a      	ldr	r3, [pc, #360]	; (8004b5c <HAL_GPIO_Init+0x300>)
 80049f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049fe:	4a58      	ldr	r2, [pc, #352]	; (8004b60 <HAL_GPIO_Init+0x304>)
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	089b      	lsrs	r3, r3, #2
 8004a04:	3302      	adds	r3, #2
 8004a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	220f      	movs	r2, #15
 8004a16:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1a:	43db      	mvns	r3, r3
 8004a1c:	69ba      	ldr	r2, [r7, #24]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a4f      	ldr	r2, [pc, #316]	; (8004b64 <HAL_GPIO_Init+0x308>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d025      	beq.n	8004a76 <HAL_GPIO_Init+0x21a>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a4e      	ldr	r2, [pc, #312]	; (8004b68 <HAL_GPIO_Init+0x30c>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d01f      	beq.n	8004a72 <HAL_GPIO_Init+0x216>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a4d      	ldr	r2, [pc, #308]	; (8004b6c <HAL_GPIO_Init+0x310>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d019      	beq.n	8004a6e <HAL_GPIO_Init+0x212>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a4c      	ldr	r2, [pc, #304]	; (8004b70 <HAL_GPIO_Init+0x314>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d013      	beq.n	8004a6a <HAL_GPIO_Init+0x20e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a4b      	ldr	r2, [pc, #300]	; (8004b74 <HAL_GPIO_Init+0x318>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d00d      	beq.n	8004a66 <HAL_GPIO_Init+0x20a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a4a      	ldr	r2, [pc, #296]	; (8004b78 <HAL_GPIO_Init+0x31c>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d007      	beq.n	8004a62 <HAL_GPIO_Init+0x206>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a49      	ldr	r2, [pc, #292]	; (8004b7c <HAL_GPIO_Init+0x320>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d101      	bne.n	8004a5e <HAL_GPIO_Init+0x202>
 8004a5a:	2306      	movs	r3, #6
 8004a5c:	e00c      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a5e:	2307      	movs	r3, #7
 8004a60:	e00a      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a62:	2305      	movs	r3, #5
 8004a64:	e008      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a66:	2304      	movs	r3, #4
 8004a68:	e006      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e004      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a6e:	2302      	movs	r3, #2
 8004a70:	e002      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <HAL_GPIO_Init+0x21c>
 8004a76:	2300      	movs	r3, #0
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	f002 0203 	and.w	r2, r2, #3
 8004a7e:	0092      	lsls	r2, r2, #2
 8004a80:	4093      	lsls	r3, r2
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a88:	4935      	ldr	r1, [pc, #212]	; (8004b60 <HAL_GPIO_Init+0x304>)
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	089b      	lsrs	r3, r3, #2
 8004a8e:	3302      	adds	r3, #2
 8004a90:	69ba      	ldr	r2, [r7, #24]
 8004a92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a96:	4b3a      	ldr	r3, [pc, #232]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	43db      	mvns	r3, r3
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d003      	beq.n	8004aba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004aba:	4a31      	ldr	r2, [pc, #196]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004ac0:	4b2f      	ldr	r3, [pc, #188]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	43db      	mvns	r3, r3
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	4013      	ands	r3, r2
 8004ace:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d003      	beq.n	8004ae4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ae4:	4a26      	ldr	r2, [pc, #152]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004aea:	4b25      	ldr	r3, [pc, #148]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	43db      	mvns	r3, r3
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	4013      	ands	r3, r2
 8004af8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004b06:	69ba      	ldr	r2, [r7, #24]
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004b0e:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004b14:	4b1a      	ldr	r3, [pc, #104]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	69ba      	ldr	r2, [r7, #24]
 8004b20:	4013      	ands	r3, r2
 8004b22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d003      	beq.n	8004b38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004b30:	69ba      	ldr	r2, [r7, #24]
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004b38:	4a11      	ldr	r2, [pc, #68]	; (8004b80 <HAL_GPIO_Init+0x324>)
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	3301      	adds	r3, #1
 8004b42:	61fb      	str	r3, [r7, #28]
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	2b0f      	cmp	r3, #15
 8004b48:	f67f ae96 	bls.w	8004878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b4c:	bf00      	nop
 8004b4e:	bf00      	nop
 8004b50:	3724      	adds	r7, #36	; 0x24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	40013800 	.word	0x40013800
 8004b64:	40020000 	.word	0x40020000
 8004b68:	40020400 	.word	0x40020400
 8004b6c:	40020800 	.word	0x40020800
 8004b70:	40020c00 	.word	0x40020c00
 8004b74:	40021000 	.word	0x40021000
 8004b78:	40021400 	.word	0x40021400
 8004b7c:	40021800 	.word	0x40021800
 8004b80:	40013c00 	.word	0x40013c00

08004b84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	691a      	ldr	r2, [r3, #16]
 8004b94:	887b      	ldrh	r3, [r7, #2]
 8004b96:	4013      	ands	r3, r2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	73fb      	strb	r3, [r7, #15]
 8004ba0:	e001      	b.n	8004ba6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	807b      	strh	r3, [r7, #2]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004bc4:	787b      	ldrb	r3, [r7, #1]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004bca:	887a      	ldrh	r2, [r7, #2]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004bd0:	e003      	b.n	8004bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004bd2:	887b      	ldrh	r3, [r7, #2]
 8004bd4:	041a      	lsls	r2, r3, #16
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	619a      	str	r2, [r3, #24]
}
 8004bda:	bf00      	nop
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
 8004bee:	460b      	mov	r3, r1
 8004bf0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	887b      	ldrh	r3, [r7, #2]
 8004bf8:	401a      	ands	r2, r3
 8004bfa:	887b      	ldrh	r3, [r7, #2]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d104      	bne.n	8004c0a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004c00:	887b      	ldrh	r3, [r7, #2]
 8004c02:	041a      	lsls	r2, r3, #16
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004c08:	e002      	b.n	8004c10 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004c0a:	887a      	ldrh	r2, [r7, #2]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	619a      	str	r2, [r3, #24]
}
 8004c10:	bf00      	nop
 8004c12:	370c      	adds	r7, #12
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1e:	b08f      	sub	sp, #60	; 0x3c
 8004c20:	af0a      	add	r7, sp, #40	; 0x28
 8004c22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e054      	b.n	8004cd8 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8004c3a:	b2db      	uxtb	r3, r3
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d106      	bne.n	8004c4e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f00f fec3 	bl	80149d4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2203      	movs	r2, #3
 8004c52:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d102      	bne.n	8004c68 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f006 fd35 	bl	800b6dc <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	603b      	str	r3, [r7, #0]
 8004c78:	687e      	ldr	r6, [r7, #4]
 8004c7a:	466d      	mov	r5, sp
 8004c7c:	f106 0410 	add.w	r4, r6, #16
 8004c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c90:	1d33      	adds	r3, r6, #4
 8004c92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c94:	6838      	ldr	r0, [r7, #0]
 8004c96:	f006 fcaf 	bl	800b5f8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2101      	movs	r1, #1
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f006 fd2c 	bl	800b6fe <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	603b      	str	r3, [r7, #0]
 8004cac:	687e      	ldr	r6, [r7, #4]
 8004cae:	466d      	mov	r5, sp
 8004cb0:	f106 0410 	add.w	r4, r6, #16
 8004cb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004cbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004cc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004cc4:	1d33      	adds	r3, r6, #4
 8004cc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004cc8:	6838      	ldr	r0, [r7, #0]
 8004cca:	f006 fe3f 	bl	800b94c <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ce0 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004ce0:	b590      	push	{r4, r7, lr}
 8004ce2:	b089      	sub	sp, #36	; 0x24
 8004ce4:	af04      	add	r7, sp, #16
 8004ce6:	6078      	str	r0, [r7, #4]
 8004ce8:	4608      	mov	r0, r1
 8004cea:	4611      	mov	r1, r2
 8004cec:	461a      	mov	r2, r3
 8004cee:	4603      	mov	r3, r0
 8004cf0:	70fb      	strb	r3, [r7, #3]
 8004cf2:	460b      	mov	r3, r1
 8004cf4:	70bb      	strb	r3, [r7, #2]
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d101      	bne.n	8004d08 <HAL_HCD_HC_Init+0x28>
 8004d04:	2302      	movs	r3, #2
 8004d06:	e07f      	b.n	8004e08 <HAL_HCD_HC_Init+0x128>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	6879      	ldr	r1, [r7, #4]
 8004d14:	4613      	mov	r3, r2
 8004d16:	009b      	lsls	r3, r3, #2
 8004d18:	4413      	add	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	440b      	add	r3, r1
 8004d1e:	333d      	adds	r3, #61	; 0x3d
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	6879      	ldr	r1, [r7, #4]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	4413      	add	r3, r2
 8004d2e:	00db      	lsls	r3, r3, #3
 8004d30:	440b      	add	r3, r1
 8004d32:	3338      	adds	r3, #56	; 0x38
 8004d34:	787a      	ldrb	r2, [r7, #1]
 8004d36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004d38:	78fa      	ldrb	r2, [r7, #3]
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	440b      	add	r3, r1
 8004d46:	3340      	adds	r3, #64	; 0x40
 8004d48:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004d4a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	4413      	add	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	440b      	add	r3, r1
 8004d5a:	3339      	adds	r3, #57	; 0x39
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004d60:	78fa      	ldrb	r2, [r7, #3]
 8004d62:	6879      	ldr	r1, [r7, #4]
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	440b      	add	r3, r1
 8004d6e:	333f      	adds	r3, #63	; 0x3f
 8004d70:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004d74:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8004d76:	78fa      	ldrb	r2, [r7, #3]
 8004d78:	78bb      	ldrb	r3, [r7, #2]
 8004d7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d7e:	b2d8      	uxtb	r0, r3
 8004d80:	6879      	ldr	r1, [r7, #4]
 8004d82:	4613      	mov	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	440b      	add	r3, r1
 8004d8c:	333a      	adds	r3, #58	; 0x3a
 8004d8e:	4602      	mov	r2, r0
 8004d90:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004d92:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	da0a      	bge.n	8004db0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004d9a:	78fa      	ldrb	r2, [r7, #3]
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	00db      	lsls	r3, r3, #3
 8004da6:	440b      	add	r3, r1
 8004da8:	333b      	adds	r3, #59	; 0x3b
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e009      	b.n	8004dc4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004db0:	78fa      	ldrb	r2, [r7, #3]
 8004db2:	6879      	ldr	r1, [r7, #4]
 8004db4:	4613      	mov	r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	4413      	add	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	440b      	add	r3, r1
 8004dbe:	333b      	adds	r3, #59	; 0x3b
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	6879      	ldr	r1, [r7, #4]
 8004dc8:	4613      	mov	r3, r2
 8004dca:	009b      	lsls	r3, r3, #2
 8004dcc:	4413      	add	r3, r2
 8004dce:	00db      	lsls	r3, r3, #3
 8004dd0:	440b      	add	r3, r1
 8004dd2:	333c      	adds	r3, #60	; 0x3c
 8004dd4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004dd8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6818      	ldr	r0, [r3, #0]
 8004dde:	787c      	ldrb	r4, [r7, #1]
 8004de0:	78ba      	ldrb	r2, [r7, #2]
 8004de2:	78f9      	ldrb	r1, [r7, #3]
 8004de4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004de6:	9302      	str	r3, [sp, #8]
 8004de8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	4623      	mov	r3, r4
 8004df6:	f006 ff25 	bl	800bc44 <USB_HC_Init>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd90      	pop	{r4, r7, pc}

08004e10 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d101      	bne.n	8004e2e <HAL_HCD_HC_Halt+0x1e>
 8004e2a:	2302      	movs	r3, #2
 8004e2c:	e00f      	b.n	8004e4e <HAL_HCD_HC_Halt+0x3e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2201      	movs	r2, #1
 8004e32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	4611      	mov	r1, r2
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f007 f95f 	bl	800c102 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3710      	adds	r7, #16
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
	...

08004e58 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	4608      	mov	r0, r1
 8004e62:	4611      	mov	r1, r2
 8004e64:	461a      	mov	r2, r3
 8004e66:	4603      	mov	r3, r0
 8004e68:	70fb      	strb	r3, [r7, #3]
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	70bb      	strb	r3, [r7, #2]
 8004e6e:	4613      	mov	r3, r2
 8004e70:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004e72:	78fa      	ldrb	r2, [r7, #3]
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	00db      	lsls	r3, r3, #3
 8004e7e:	440b      	add	r3, r1
 8004e80:	333b      	adds	r3, #59	; 0x3b
 8004e82:	78ba      	ldrb	r2, [r7, #2]
 8004e84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004e86:	78fa      	ldrb	r2, [r7, #3]
 8004e88:	6879      	ldr	r1, [r7, #4]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	00db      	lsls	r3, r3, #3
 8004e92:	440b      	add	r3, r1
 8004e94:	333f      	adds	r3, #63	; 0x3f
 8004e96:	787a      	ldrb	r2, [r7, #1]
 8004e98:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004e9a:	7c3b      	ldrb	r3, [r7, #16]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d114      	bne.n	8004eca <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004ea0:	78fa      	ldrb	r2, [r7, #3]
 8004ea2:	6879      	ldr	r1, [r7, #4]
 8004ea4:	4613      	mov	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4413      	add	r3, r2
 8004eaa:	00db      	lsls	r3, r3, #3
 8004eac:	440b      	add	r3, r1
 8004eae:	3342      	adds	r3, #66	; 0x42
 8004eb0:	2203      	movs	r2, #3
 8004eb2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4413      	add	r3, r2
 8004ebe:	00db      	lsls	r3, r3, #3
 8004ec0:	440b      	add	r3, r1
 8004ec2:	333d      	adds	r3, #61	; 0x3d
 8004ec4:	7f3a      	ldrb	r2, [r7, #28]
 8004ec6:	701a      	strb	r2, [r3, #0]
 8004ec8:	e009      	b.n	8004ede <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3342      	adds	r3, #66	; 0x42
 8004eda:	2202      	movs	r2, #2
 8004edc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004ede:	787b      	ldrb	r3, [r7, #1]
 8004ee0:	2b03      	cmp	r3, #3
 8004ee2:	f200 80d6 	bhi.w	8005092 <HAL_HCD_HC_SubmitRequest+0x23a>
 8004ee6:	a201      	add	r2, pc, #4	; (adr r2, 8004eec <HAL_HCD_HC_SubmitRequest+0x94>)
 8004ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eec:	08004efd 	.word	0x08004efd
 8004ef0:	0800507d 	.word	0x0800507d
 8004ef4:	08004f69 	.word	0x08004f69
 8004ef8:	08004ff3 	.word	0x08004ff3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004efc:	7c3b      	ldrb	r3, [r7, #16]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	f040 80c9 	bne.w	8005096 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004f04:	78bb      	ldrb	r3, [r7, #2]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f040 80c5 	bne.w	8005096 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004f0c:	8b3b      	ldrh	r3, [r7, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d109      	bne.n	8004f26 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	6879      	ldr	r1, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	440b      	add	r3, r1
 8004f20:	3351      	adds	r3, #81	; 0x51
 8004f22:	2201      	movs	r2, #1
 8004f24:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f26:	78fa      	ldrb	r2, [r7, #3]
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	4613      	mov	r3, r2
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	440b      	add	r3, r1
 8004f34:	3351      	adds	r3, #81	; 0x51
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d10a      	bne.n	8004f52 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	440b      	add	r3, r1
 8004f4a:	3342      	adds	r3, #66	; 0x42
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004f50:	e0a1      	b.n	8005096 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	4413      	add	r3, r2
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	440b      	add	r3, r1
 8004f60:	3342      	adds	r3, #66	; 0x42
 8004f62:	2202      	movs	r2, #2
 8004f64:	701a      	strb	r2, [r3, #0]
      break;
 8004f66:	e096      	b.n	8005096 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004f68:	78bb      	ldrb	r3, [r7, #2]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d120      	bne.n	8004fb0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	00db      	lsls	r3, r3, #3
 8004f7a:	440b      	add	r3, r1
 8004f7c:	3351      	adds	r3, #81	; 0x51
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10a      	bne.n	8004f9a <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004f84:	78fa      	ldrb	r2, [r7, #3]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	440b      	add	r3, r1
 8004f92:	3342      	adds	r3, #66	; 0x42
 8004f94:	2200      	movs	r2, #0
 8004f96:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004f98:	e07e      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4413      	add	r3, r2
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	440b      	add	r3, r1
 8004fa8:	3342      	adds	r3, #66	; 0x42
 8004faa:	2202      	movs	r2, #2
 8004fac:	701a      	strb	r2, [r3, #0]
      break;
 8004fae:	e073      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	4413      	add	r3, r2
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	440b      	add	r3, r1
 8004fbe:	3350      	adds	r3, #80	; 0x50
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10a      	bne.n	8004fdc <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	4413      	add	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	440b      	add	r3, r1
 8004fd4:	3342      	adds	r3, #66	; 0x42
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	701a      	strb	r2, [r3, #0]
      break;
 8004fda:	e05d      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	440b      	add	r3, r1
 8004fea:	3342      	adds	r3, #66	; 0x42
 8004fec:	2202      	movs	r2, #2
 8004fee:	701a      	strb	r2, [r3, #0]
      break;
 8004ff0:	e052      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004ff2:	78bb      	ldrb	r3, [r7, #2]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d120      	bne.n	800503a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	440b      	add	r3, r1
 8005006:	3351      	adds	r3, #81	; 0x51
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d10a      	bne.n	8005024 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	009b      	lsls	r3, r3, #2
 8005016:	4413      	add	r3, r2
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	440b      	add	r3, r1
 800501c:	3342      	adds	r3, #66	; 0x42
 800501e:	2200      	movs	r2, #0
 8005020:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8005022:	e039      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	00db      	lsls	r3, r3, #3
 8005030:	440b      	add	r3, r1
 8005032:	3342      	adds	r3, #66	; 0x42
 8005034:	2202      	movs	r2, #2
 8005036:	701a      	strb	r2, [r3, #0]
      break;
 8005038:	e02e      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800503a:	78fa      	ldrb	r2, [r7, #3]
 800503c:	6879      	ldr	r1, [r7, #4]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	00db      	lsls	r3, r3, #3
 8005046:	440b      	add	r3, r1
 8005048:	3350      	adds	r3, #80	; 0x50
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8005050:	78fa      	ldrb	r2, [r7, #3]
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	00db      	lsls	r3, r3, #3
 800505c:	440b      	add	r3, r1
 800505e:	3342      	adds	r3, #66	; 0x42
 8005060:	2200      	movs	r2, #0
 8005062:	701a      	strb	r2, [r3, #0]
      break;
 8005064:	e018      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8005066:	78fa      	ldrb	r2, [r7, #3]
 8005068:	6879      	ldr	r1, [r7, #4]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	440b      	add	r3, r1
 8005074:	3342      	adds	r3, #66	; 0x42
 8005076:	2202      	movs	r2, #2
 8005078:	701a      	strb	r2, [r3, #0]
      break;
 800507a:	e00d      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	440b      	add	r3, r1
 800508a:	3342      	adds	r3, #66	; 0x42
 800508c:	2200      	movs	r2, #0
 800508e:	701a      	strb	r2, [r3, #0]
      break;
 8005090:	e002      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8005092:	bf00      	nop
 8005094:	e000      	b.n	8005098 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8005096:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	6879      	ldr	r1, [r7, #4]
 800509c:	4613      	mov	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	4413      	add	r3, r2
 80050a2:	00db      	lsls	r3, r3, #3
 80050a4:	440b      	add	r3, r1
 80050a6:	3344      	adds	r3, #68	; 0x44
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	8b39      	ldrh	r1, [r7, #24]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	4403      	add	r3, r0
 80050bc:	3348      	adds	r3, #72	; 0x48
 80050be:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	6879      	ldr	r1, [r7, #4]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	00db      	lsls	r3, r3, #3
 80050cc:	440b      	add	r3, r1
 80050ce:	335c      	adds	r3, #92	; 0x5c
 80050d0:	2200      	movs	r2, #0
 80050d2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	4413      	add	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	440b      	add	r3, r1
 80050e2:	334c      	adds	r3, #76	; 0x4c
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80050e8:	78fa      	ldrb	r2, [r7, #3]
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	440b      	add	r3, r1
 80050f6:	3339      	adds	r3, #57	; 0x39
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80050fc:	78fa      	ldrb	r2, [r7, #3]
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	00db      	lsls	r3, r3, #3
 8005108:	440b      	add	r3, r1
 800510a:	335d      	adds	r3, #93	; 0x5d
 800510c:	2200      	movs	r2, #0
 800510e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6818      	ldr	r0, [r3, #0]
 8005114:	78fa      	ldrb	r2, [r7, #3]
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	3338      	adds	r3, #56	; 0x38
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	18d1      	adds	r1, r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	b2db      	uxtb	r3, r3
 800512a:	461a      	mov	r2, r3
 800512c:	f006 fe94 	bl	800be58 <USB_HC_StartXfer>
 8005130:	4603      	mov	r3, r0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop

0800513c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b086      	sub	sp, #24
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4618      	mov	r0, r3
 8005154:	f006 fbb7 	bl	800b8c6 <USB_GetMode>
 8005158:	4603      	mov	r3, r0
 800515a:	2b01      	cmp	r3, #1
 800515c:	f040 80ef 	bne.w	800533e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4618      	mov	r0, r3
 8005166:	f006 fb9b 	bl	800b8a0 <USB_ReadInterrupts>
 800516a:	4603      	mov	r3, r0
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 80e5 	beq.w	800533c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f006 fb92 	bl	800b8a0 <USB_ReadInterrupts>
 800517c:	4603      	mov	r3, r0
 800517e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005186:	d104      	bne.n	8005192 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005190:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4618      	mov	r0, r3
 8005198:	f006 fb82 	bl	800b8a0 <USB_ReadInterrupts>
 800519c:	4603      	mov	r3, r0
 800519e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051a6:	d104      	bne.n	80051b2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051b0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f006 fb72 	bl	800b8a0 <USB_ReadInterrupts>
 80051bc:	4603      	mov	r3, r0
 80051be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80051c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051c6:	d104      	bne.n	80051d2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80051d0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4618      	mov	r0, r3
 80051d8:	f006 fb62 	bl	800b8a0 <USB_ReadInterrupts>
 80051dc:	4603      	mov	r3, r0
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d103      	bne.n	80051ee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	2202      	movs	r2, #2
 80051ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f006 fb54 	bl	800b8a0 <USB_ReadInterrupts>
 80051f8:	4603      	mov	r3, r0
 80051fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80051fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005202:	d115      	bne.n	8005230 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800520c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d108      	bne.n	8005230 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f00f fc56 	bl	8014ad0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2101      	movs	r1, #1
 800522a:	4618      	mov	r0, r3
 800522c:	f006 fc44 	bl	800bab8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f006 fb33 	bl	800b8a0 <USB_ReadInterrupts>
 800523a:	4603      	mov	r3, r0
 800523c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005240:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005244:	d102      	bne.n	800524c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f001 f968 	bl	800651c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4618      	mov	r0, r3
 8005252:	f006 fb25 	bl	800b8a0 <USB_ReadInterrupts>
 8005256:	4603      	mov	r3, r0
 8005258:	f003 0308 	and.w	r3, r3, #8
 800525c:	2b08      	cmp	r3, #8
 800525e:	d106      	bne.n	800526e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f00f fc19 	bl	8014a98 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2208      	movs	r2, #8
 800526c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f006 fb14 	bl	800b8a0 <USB_ReadInterrupts>
 8005278:	4603      	mov	r3, r0
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005282:	d138      	bne.n	80052f6 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f006 ff29 	bl	800c0e0 <USB_HC_ReadInterrupt>
 800528e:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]
 8005294:	e025      	b.n	80052e2 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	fa22 f303 	lsr.w	r3, r2, r3
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d018      	beq.n	80052dc <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052c0:	d106      	bne.n	80052d0 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f8cf 	bl	800546c <HCD_HC_IN_IRQHandler>
 80052ce:	e005      	b.n	80052dc <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	b2db      	uxtb	r3, r3
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fcfd 	bl	8005cd6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	3301      	adds	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d3d4      	bcc.n	8005296 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f006 fad0 	bl	800b8a0 <USB_ReadInterrupts>
 8005300:	4603      	mov	r3, r0
 8005302:	f003 0310 	and.w	r3, r3, #16
 8005306:	2b10      	cmp	r3, #16
 8005308:	d101      	bne.n	800530e <HAL_HCD_IRQHandler+0x1d2>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <HAL_HCD_IRQHandler+0x1d4>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d014      	beq.n	800533e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	699a      	ldr	r2, [r3, #24]
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f022 0210 	bic.w	r2, r2, #16
 8005322:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f001 f84b 	bl	80063c0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	699a      	ldr	r2, [r3, #24]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0210 	orr.w	r2, r2, #16
 8005338:	619a      	str	r2, [r3, #24]
 800533a:	e000      	b.n	800533e <HAL_HCD_IRQHandler+0x202>
      return;
 800533c:	bf00      	nop
    }
  }
}
 800533e:	3718      	adds	r7, #24
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_HCD_Start+0x16>
 8005356:	2302      	movs	r3, #2
 8005358:	e013      	b.n	8005382 <HAL_HCD_Start+0x3e>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f006 f9a7 	bl	800b6ba <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	2101      	movs	r1, #1
 8005372:	4618      	mov	r0, r3
 8005374:	f006 fc04 	bl	800bb80 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2200      	movs	r2, #0
 800537c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8005380:	2300      	movs	r3, #0
}
 8005382:	4618      	mov	r0, r3
 8005384:	3708      	adds	r7, #8
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800538a:	b580      	push	{r7, lr}
 800538c:	b082      	sub	sp, #8
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8005398:	2b01      	cmp	r3, #1
 800539a:	d101      	bne.n	80053a0 <HAL_HCD_Stop+0x16>
 800539c:	2302      	movs	r3, #2
 800539e:	e00d      	b.n	80053bc <HAL_HCD_Stop+0x32>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f006 ffe3 	bl	800c378 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f006 fbab 	bl	800bb2c <USB_ResetPort>
 80053d6:	4603      	mov	r3, r0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	460b      	mov	r3, r1
 80053ea:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	4413      	add	r3, r2
 80053f6:	00db      	lsls	r3, r3, #3
 80053f8:	440b      	add	r3, r1
 80053fa:	335c      	adds	r3, #92	; 0x5c
 80053fc:	781b      	ldrb	r3, [r3, #0]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	6879      	ldr	r1, [r7, #4]
 800541a:	4613      	mov	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4413      	add	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	440b      	add	r3, r1
 8005424:	334c      	adds	r3, #76	; 0x4c
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f006 fbed 	bl	800bc20 <USB_GetCurrentFrame>
 8005446:	4603      	mov	r3, r0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3708      	adds	r7, #8
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f006 fbc8 	bl	800bbf2 <USB_GetHostSpeed>
 8005462:	4603      	mov	r3, r0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3708      	adds	r7, #8
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	460b      	mov	r3, r1
 8005476:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547e:	697b      	ldr	r3, [r7, #20]
 8005480:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005482:	78fb      	ldrb	r3, [r7, #3]
 8005484:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	4413      	add	r3, r2
 800548e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b04      	cmp	r3, #4
 800549a:	d119      	bne.n	80054d0 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a8:	461a      	mov	r2, r3
 80054aa:	2304      	movs	r3, #4
 80054ac:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	68fa      	ldr	r2, [r7, #12]
 80054be:	0151      	lsls	r1, r2, #5
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	440a      	add	r2, r1
 80054c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054c8:	f043 0302 	orr.w	r3, r3, #2
 80054cc:	60d3      	str	r3, [r2, #12]
 80054ce:	e0ce      	b.n	800566e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054e6:	d12c      	bne.n	8005542 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	015a      	lsls	r2, r3, #5
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054f4:	461a      	mov	r2, r3
 80054f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	440b      	add	r3, r1
 800550a:	335d      	adds	r3, #93	; 0x5d
 800550c:	2207      	movs	r2, #7
 800550e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4413      	add	r3, r2
 8005518:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551c:	68db      	ldr	r3, [r3, #12]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	0151      	lsls	r1, r2, #5
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	440a      	add	r2, r1
 8005526:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800552a:	f043 0302 	orr.w	r3, r3, #2
 800552e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	b2d2      	uxtb	r2, r2
 8005538:	4611      	mov	r1, r2
 800553a:	4618      	mov	r0, r3
 800553c:	f006 fde1 	bl	800c102 <USB_HC_Halt>
 8005540:	e095      	b.n	800566e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	015a      	lsls	r2, r3, #5
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4413      	add	r3, r2
 800554a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f003 0320 	and.w	r3, r3, #32
 8005554:	2b20      	cmp	r3, #32
 8005556:	d109      	bne.n	800556c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005564:	461a      	mov	r2, r3
 8005566:	2320      	movs	r3, #32
 8005568:	6093      	str	r3, [r2, #8]
 800556a:	e080      	b.n	800566e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	015a      	lsls	r2, r3, #5
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	4413      	add	r3, r2
 8005574:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 0308 	and.w	r3, r3, #8
 800557e:	2b08      	cmp	r3, #8
 8005580:	d134      	bne.n	80055ec <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4413      	add	r3, r2
 800558a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	440a      	add	r2, r1
 8005598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800559c:	f043 0302 	orr.w	r3, r3, #2
 80055a0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	68fa      	ldr	r2, [r7, #12]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	440b      	add	r3, r1
 80055b0:	335d      	adds	r3, #93	; 0x5d
 80055b2:	2205      	movs	r2, #5
 80055b4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c2:	461a      	mov	r2, r3
 80055c4:	2310      	movs	r3, #16
 80055c6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	461a      	mov	r2, r3
 80055d6:	2308      	movs	r3, #8
 80055d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f006 fd8c 	bl	800c102 <USB_HC_Halt>
 80055ea:	e040      	b.n	800566e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005602:	d134      	bne.n	800566e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	4413      	add	r3, r2
 800560c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	0151      	lsls	r1, r2, #5
 8005616:	693a      	ldr	r2, [r7, #16]
 8005618:	440a      	add	r2, r1
 800561a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800561e:	f043 0302 	orr.w	r3, r3, #2
 8005622:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	4611      	mov	r1, r2
 800562e:	4618      	mov	r0, r3
 8005630:	f006 fd67 	bl	800c102 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4413      	add	r3, r2
 800563c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005640:	461a      	mov	r2, r3
 8005642:	2310      	movs	r3, #16
 8005644:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4613      	mov	r3, r2
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	440b      	add	r3, r1
 8005654:	335d      	adds	r3, #93	; 0x5d
 8005656:	2208      	movs	r2, #8
 8005658:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	4413      	add	r3, r2
 8005662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005666:	461a      	mov	r2, r3
 8005668:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800566c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	015a      	lsls	r2, r3, #5
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	4413      	add	r3, r2
 8005676:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005680:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005684:	d122      	bne.n	80056cc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	0151      	lsls	r1, r2, #5
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	440a      	add	r2, r1
 800569c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056a0:	f043 0302 	orr.w	r3, r3, #2
 80056a4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	b2d2      	uxtb	r2, r2
 80056ae:	4611      	mov	r1, r2
 80056b0:	4618      	mov	r0, r3
 80056b2:	f006 fd26 	bl	800c102 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056c2:	461a      	mov	r2, r3
 80056c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056c8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80056ca:	e300      	b.n	8005cce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d8:	689b      	ldr	r3, [r3, #8]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b01      	cmp	r3, #1
 80056e0:	f040 80fd 	bne.w	80058de <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d01b      	beq.n	8005724 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80056ec:	6879      	ldr	r1, [r7, #4]
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4613      	mov	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	440b      	add	r3, r1
 80056fa:	3348      	adds	r3, #72	; 0x48
 80056fc:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	0159      	lsls	r1, r3, #5
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	440b      	add	r3, r1
 8005706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8005710:	1ad1      	subs	r1, r2, r3
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	00db      	lsls	r3, r3, #3
 800571e:	4403      	add	r3, r0
 8005720:	334c      	adds	r3, #76	; 0x4c
 8005722:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	440b      	add	r3, r1
 8005732:	335d      	adds	r3, #93	; 0x5d
 8005734:	2201      	movs	r2, #1
 8005736:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	4613      	mov	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	4413      	add	r3, r2
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	440b      	add	r3, r1
 8005746:	3358      	adds	r3, #88	; 0x58
 8005748:	2200      	movs	r2, #0
 800574a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	4413      	add	r3, r2
 8005754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005758:	461a      	mov	r2, r3
 800575a:	2301      	movs	r3, #1
 800575c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	68fa      	ldr	r2, [r7, #12]
 8005762:	4613      	mov	r3, r2
 8005764:	009b      	lsls	r3, r3, #2
 8005766:	4413      	add	r3, r2
 8005768:	00db      	lsls	r3, r3, #3
 800576a:	440b      	add	r3, r1
 800576c:	333f      	adds	r3, #63	; 0x3f
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00a      	beq.n	800578a <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005774:	6879      	ldr	r1, [r7, #4]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	00db      	lsls	r3, r3, #3
 8005780:	440b      	add	r3, r1
 8005782:	333f      	adds	r3, #63	; 0x3f
 8005784:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005786:	2b02      	cmp	r3, #2
 8005788:	d121      	bne.n	80057ce <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a4:	f043 0302 	orr.w	r3, r3, #2
 80057a8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68fa      	ldr	r2, [r7, #12]
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	4611      	mov	r1, r2
 80057b4:	4618      	mov	r0, r3
 80057b6:	f006 fca4 	bl	800c102 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	015a      	lsls	r2, r3, #5
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	4413      	add	r3, r2
 80057c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c6:	461a      	mov	r2, r3
 80057c8:	2310      	movs	r3, #16
 80057ca:	6093      	str	r3, [r2, #8]
 80057cc:	e070      	b.n	80058b0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4613      	mov	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	4413      	add	r3, r2
 80057d8:	00db      	lsls	r3, r3, #3
 80057da:	440b      	add	r3, r1
 80057dc:	333f      	adds	r3, #63	; 0x3f
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b03      	cmp	r3, #3
 80057e2:	d12a      	bne.n	800583a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	015a      	lsls	r2, r3, #5
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	4413      	add	r3, r2
 80057ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	0151      	lsls	r1, r2, #5
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	440a      	add	r2, r1
 80057fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005802:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005804:	6879      	ldr	r1, [r7, #4]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	4613      	mov	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	440b      	add	r3, r1
 8005812:	335c      	adds	r3, #92	; 0x5c
 8005814:	2201      	movs	r2, #1
 8005816:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	b2d8      	uxtb	r0, r3
 800581c:	6879      	ldr	r1, [r7, #4]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4613      	mov	r3, r2
 8005822:	009b      	lsls	r3, r3, #2
 8005824:	4413      	add	r3, r2
 8005826:	00db      	lsls	r3, r3, #3
 8005828:	440b      	add	r3, r1
 800582a:	335c      	adds	r3, #92	; 0x5c
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	4601      	mov	r1, r0
 8005832:	6878      	ldr	r0, [r7, #4]
 8005834:	f00f f95a 	bl	8014aec <HAL_HCD_HC_NotifyURBChange_Callback>
 8005838:	e03a      	b.n	80058b0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 800583a:	6879      	ldr	r1, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4613      	mov	r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	440b      	add	r3, r1
 8005848:	333f      	adds	r3, #63	; 0x3f
 800584a:	781b      	ldrb	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d12f      	bne.n	80058b0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4613      	mov	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	440b      	add	r3, r1
 800585e:	335c      	adds	r3, #92	; 0x5c
 8005860:	2201      	movs	r2, #1
 8005862:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4613      	mov	r3, r2
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	440b      	add	r3, r1
 8005872:	3350      	adds	r3, #80	; 0x50
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	f083 0301 	eor.w	r3, r3, #1
 800587a:	b2d8      	uxtb	r0, r3
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	68fa      	ldr	r2, [r7, #12]
 8005880:	4613      	mov	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	440b      	add	r3, r1
 800588a:	3350      	adds	r3, #80	; 0x50
 800588c:	4602      	mov	r2, r0
 800588e:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	b2d8      	uxtb	r0, r3
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4613      	mov	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4413      	add	r3, r2
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	440b      	add	r3, r1
 80058a2:	335c      	adds	r3, #92	; 0x5c
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	461a      	mov	r2, r3
 80058a8:	4601      	mov	r1, r0
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f00f f91e 	bl	8014aec <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	440b      	add	r3, r1
 80058be:	3350      	adds	r3, #80	; 0x50
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	f083 0301 	eor.w	r3, r3, #1
 80058c6:	b2d8      	uxtb	r0, r3
 80058c8:	6879      	ldr	r1, [r7, #4]
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4613      	mov	r3, r2
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	4413      	add	r3, r2
 80058d2:	00db      	lsls	r3, r3, #3
 80058d4:	440b      	add	r3, r1
 80058d6:	3350      	adds	r3, #80	; 0x50
 80058d8:	4602      	mov	r2, r0
 80058da:	701a      	strb	r2, [r3, #0]
}
 80058dc:	e1f7      	b.n	8005cce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	015a      	lsls	r2, r3, #5
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	4413      	add	r3, r2
 80058e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	f040 811a 	bne.w	8005b2a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	015a      	lsls	r2, r3, #5
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	4413      	add	r3, r2
 80058fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	68fa      	ldr	r2, [r7, #12]
 8005906:	0151      	lsls	r1, r2, #5
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	440a      	add	r2, r1
 800590c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005910:	f023 0302 	bic.w	r3, r3, #2
 8005914:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005916:	6879      	ldr	r1, [r7, #4]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4613      	mov	r3, r2
 800591c:	009b      	lsls	r3, r3, #2
 800591e:	4413      	add	r3, r2
 8005920:	00db      	lsls	r3, r3, #3
 8005922:	440b      	add	r3, r1
 8005924:	335d      	adds	r3, #93	; 0x5d
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b01      	cmp	r3, #1
 800592a:	d10a      	bne.n	8005942 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800592c:	6879      	ldr	r1, [r7, #4]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	00db      	lsls	r3, r3, #3
 8005938:	440b      	add	r3, r1
 800593a:	335c      	adds	r3, #92	; 0x5c
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
 8005940:	e0d9      	b.n	8005af6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005942:	6879      	ldr	r1, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4613      	mov	r3, r2
 8005948:	009b      	lsls	r3, r3, #2
 800594a:	4413      	add	r3, r2
 800594c:	00db      	lsls	r3, r3, #3
 800594e:	440b      	add	r3, r1
 8005950:	335d      	adds	r3, #93	; 0x5d
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	2b05      	cmp	r3, #5
 8005956:	d10a      	bne.n	800596e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005958:	6879      	ldr	r1, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	00db      	lsls	r3, r3, #3
 8005964:	440b      	add	r3, r1
 8005966:	335c      	adds	r3, #92	; 0x5c
 8005968:	2205      	movs	r2, #5
 800596a:	701a      	strb	r2, [r3, #0]
 800596c:	e0c3      	b.n	8005af6 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	440b      	add	r3, r1
 800597c:	335d      	adds	r3, #93	; 0x5d
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b06      	cmp	r3, #6
 8005982:	d00a      	beq.n	800599a <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	440b      	add	r3, r1
 8005992:	335d      	adds	r3, #93	; 0x5d
 8005994:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005996:	2b08      	cmp	r3, #8
 8005998:	d156      	bne.n	8005a48 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 800599a:	6879      	ldr	r1, [r7, #4]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	4613      	mov	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4413      	add	r3, r2
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	440b      	add	r3, r1
 80059a8:	3358      	adds	r3, #88	; 0x58
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	1c59      	adds	r1, r3, #1
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4613      	mov	r3, r2
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	00db      	lsls	r3, r3, #3
 80059ba:	4403      	add	r3, r0
 80059bc:	3358      	adds	r3, #88	; 0x58
 80059be:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	4613      	mov	r3, r2
 80059c6:	009b      	lsls	r3, r3, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	00db      	lsls	r3, r3, #3
 80059cc:	440b      	add	r3, r1
 80059ce:	3358      	adds	r3, #88	; 0x58
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d914      	bls.n	8005a00 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80059d6:	6879      	ldr	r1, [r7, #4]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4613      	mov	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	4413      	add	r3, r2
 80059e0:	00db      	lsls	r3, r3, #3
 80059e2:	440b      	add	r3, r1
 80059e4:	3358      	adds	r3, #88	; 0x58
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4613      	mov	r3, r2
 80059f0:	009b      	lsls	r3, r3, #2
 80059f2:	4413      	add	r3, r2
 80059f4:	00db      	lsls	r3, r3, #3
 80059f6:	440b      	add	r3, r1
 80059f8:	335c      	adds	r3, #92	; 0x5c
 80059fa:	2204      	movs	r2, #4
 80059fc:	701a      	strb	r2, [r3, #0]
 80059fe:	e009      	b.n	8005a14 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005a00:	6879      	ldr	r1, [r7, #4]
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4613      	mov	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4413      	add	r3, r2
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	440b      	add	r3, r1
 8005a0e:	335c      	adds	r3, #92	; 0x5c
 8005a10:	2202      	movs	r2, #2
 8005a12:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a2a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a32:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	015a      	lsls	r2, r3, #5
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a40:	461a      	mov	r2, r3
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	6013      	str	r3, [r2, #0]
 8005a46:	e056      	b.n	8005af6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4613      	mov	r3, r2
 8005a4e:	009b      	lsls	r3, r3, #2
 8005a50:	4413      	add	r3, r2
 8005a52:	00db      	lsls	r3, r3, #3
 8005a54:	440b      	add	r3, r1
 8005a56:	335d      	adds	r3, #93	; 0x5d
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d123      	bne.n	8005aa6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005a5e:	6879      	ldr	r1, [r7, #4]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	4613      	mov	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	4413      	add	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	440b      	add	r3, r1
 8005a6c:	335c      	adds	r3, #92	; 0x5c
 8005a6e:	2202      	movs	r2, #2
 8005a70:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005a88:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005a90:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	6013      	str	r3, [r2, #0]
 8005aa4:	e027      	b.n	8005af6 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8005aa6:	6879      	ldr	r1, [r7, #4]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	00db      	lsls	r3, r3, #3
 8005ab2:	440b      	add	r3, r1
 8005ab4:	335d      	adds	r3, #93	; 0x5d
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b07      	cmp	r3, #7
 8005aba:	d11c      	bne.n	8005af6 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	440b      	add	r3, r1
 8005aca:	3358      	adds	r3, #88	; 0x58
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	1c59      	adds	r1, r3, #1
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	4413      	add	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	4403      	add	r3, r0
 8005ade:	3358      	adds	r3, #88	; 0x58
 8005ae0:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	440b      	add	r3, r1
 8005af0:	335c      	adds	r3, #92	; 0x5c
 8005af2:	2204      	movs	r2, #4
 8005af4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b02:	461a      	mov	r2, r3
 8005b04:	2302      	movs	r3, #2
 8005b06:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	b2d8      	uxtb	r0, r3
 8005b0c:	6879      	ldr	r1, [r7, #4]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4613      	mov	r3, r2
 8005b12:	009b      	lsls	r3, r3, #2
 8005b14:	4413      	add	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	440b      	add	r3, r1
 8005b1a:	335c      	adds	r3, #92	; 0x5c
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	461a      	mov	r2, r3
 8005b20:	4601      	mov	r1, r0
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f00e ffe2 	bl	8014aec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005b28:	e0d1      	b.n	8005cce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b3c:	2b80      	cmp	r3, #128	; 0x80
 8005b3e:	d13e      	bne.n	8005bbe <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	0151      	lsls	r1, r2, #5
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	440a      	add	r2, r1
 8005b56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b5a:	f043 0302 	orr.w	r3, r3, #2
 8005b5e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8005b60:	6879      	ldr	r1, [r7, #4]
 8005b62:	68fa      	ldr	r2, [r7, #12]
 8005b64:	4613      	mov	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	00db      	lsls	r3, r3, #3
 8005b6c:	440b      	add	r3, r1
 8005b6e:	3358      	adds	r3, #88	; 0x58
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	1c59      	adds	r1, r3, #1
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	00db      	lsls	r3, r3, #3
 8005b80:	4403      	add	r3, r0
 8005b82:	3358      	adds	r3, #88	; 0x58
 8005b84:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	00db      	lsls	r3, r3, #3
 8005b92:	440b      	add	r3, r1
 8005b94:	335d      	adds	r3, #93	; 0x5d
 8005b96:	2206      	movs	r2, #6
 8005b98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	4611      	mov	r1, r2
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f006 faac 	bl	800c102 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	015a      	lsls	r2, r3, #5
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2380      	movs	r3, #128	; 0x80
 8005bba:	6093      	str	r3, [r2, #8]
}
 8005bbc:	e087      	b.n	8005cce <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f003 0310 	and.w	r3, r3, #16
 8005bd0:	2b10      	cmp	r3, #16
 8005bd2:	d17c      	bne.n	8005cce <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005bd4:	6879      	ldr	r1, [r7, #4]
 8005bd6:	68fa      	ldr	r2, [r7, #12]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	00db      	lsls	r3, r3, #3
 8005be0:	440b      	add	r3, r1
 8005be2:	333f      	adds	r3, #63	; 0x3f
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	2b03      	cmp	r3, #3
 8005be8:	d122      	bne.n	8005c30 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	440b      	add	r3, r1
 8005bf8:	3358      	adds	r3, #88	; 0x58
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	015a      	lsls	r2, r3, #5
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	4413      	add	r3, r2
 8005c06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	0151      	lsls	r1, r2, #5
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	440a      	add	r2, r1
 8005c14:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	b2d2      	uxtb	r2, r2
 8005c26:	4611      	mov	r1, r2
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f006 fa6a 	bl	800c102 <USB_HC_Halt>
 8005c2e:	e045      	b.n	8005cbc <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4613      	mov	r3, r2
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	440b      	add	r3, r1
 8005c3e:	333f      	adds	r3, #63	; 0x3f
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68fa      	ldr	r2, [r7, #12]
 8005c4a:	4613      	mov	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	4413      	add	r3, r2
 8005c50:	00db      	lsls	r3, r3, #3
 8005c52:	440b      	add	r3, r1
 8005c54:	333f      	adds	r3, #63	; 0x3f
 8005c56:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d12f      	bne.n	8005cbc <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	4613      	mov	r3, r2
 8005c62:	009b      	lsls	r3, r3, #2
 8005c64:	4413      	add	r3, r2
 8005c66:	00db      	lsls	r3, r3, #3
 8005c68:	440b      	add	r3, r1
 8005c6a:	3358      	adds	r3, #88	; 0x58
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d121      	bne.n	8005cbc <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8005c78:	6879      	ldr	r1, [r7, #4]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	00db      	lsls	r3, r3, #3
 8005c84:	440b      	add	r3, r1
 8005c86:	335d      	adds	r3, #93	; 0x5d
 8005c88:	2203      	movs	r2, #3
 8005c8a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	0151      	lsls	r1, r2, #5
 8005c9e:	693a      	ldr	r2, [r7, #16]
 8005ca0:	440a      	add	r2, r1
 8005ca2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ca6:	f043 0302 	orr.w	r3, r3, #2
 8005caa:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	4611      	mov	r1, r2
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f006 fa23 	bl	800c102 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	015a      	lsls	r2, r3, #5
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	4413      	add	r3, r2
 8005cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cc8:	461a      	mov	r2, r3
 8005cca:	2310      	movs	r3, #16
 8005ccc:	6093      	str	r3, [r2, #8]
}
 8005cce:	bf00      	nop
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b086      	sub	sp, #24
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 0304 	and.w	r3, r3, #4
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d119      	bne.n	8005d3a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d12:	461a      	mov	r2, r3
 8005d14:	2304      	movs	r3, #4
 8005d16:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	015a      	lsls	r2, r3, #5
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	4413      	add	r3, r2
 8005d20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d24:	68db      	ldr	r3, [r3, #12]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	0151      	lsls	r1, r2, #5
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	440a      	add	r2, r1
 8005d2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d32:	f043 0302 	orr.w	r3, r3, #2
 8005d36:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005d38:	e33e      	b.n	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	693b      	ldr	r3, [r7, #16]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	f003 0320 	and.w	r3, r3, #32
 8005d4c:	2b20      	cmp	r3, #32
 8005d4e:	d141      	bne.n	8005dd4 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2320      	movs	r3, #32
 8005d60:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4613      	mov	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	4413      	add	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	440b      	add	r3, r1
 8005d70:	333d      	adds	r3, #61	; 0x3d
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	f040 831f 	bne.w	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	00db      	lsls	r3, r3, #3
 8005d86:	440b      	add	r3, r1
 8005d88:	333d      	adds	r3, #61	; 0x3d
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005d8e:	6879      	ldr	r1, [r7, #4]
 8005d90:	68fa      	ldr	r2, [r7, #12]
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	00db      	lsls	r3, r3, #3
 8005d9a:	440b      	add	r3, r1
 8005d9c:	335c      	adds	r3, #92	; 0x5c
 8005d9e:	2202      	movs	r2, #2
 8005da0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbc:	f043 0302 	orr.w	r3, r3, #2
 8005dc0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	b2d2      	uxtb	r2, r2
 8005dca:	4611      	mov	r1, r2
 8005dcc:	4618      	mov	r0, r3
 8005dce:	f006 f998 	bl	800c102 <USB_HC_Halt>
}
 8005dd2:	e2f1      	b.n	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	015a      	lsls	r2, r3, #5
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	4413      	add	r3, r2
 8005ddc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de6:	2b40      	cmp	r3, #64	; 0x40
 8005de8:	d13f      	bne.n	8005e6a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8005dea:	6879      	ldr	r1, [r7, #4]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	4613      	mov	r3, r2
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	4413      	add	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	440b      	add	r3, r1
 8005df8:	335d      	adds	r3, #93	; 0x5d
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	68fa      	ldr	r2, [r7, #12]
 8005e02:	4613      	mov	r3, r2
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	440b      	add	r3, r1
 8005e0c:	333d      	adds	r3, #61	; 0x3d
 8005e0e:	2201      	movs	r2, #1
 8005e10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005e12:	6879      	ldr	r1, [r7, #4]
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4613      	mov	r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	4413      	add	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	440b      	add	r3, r1
 8005e20:	3358      	adds	r3, #88	; 0x58
 8005e22:	2200      	movs	r2, #0
 8005e24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	015a      	lsls	r2, r3, #5
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	4413      	add	r3, r2
 8005e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e32:	68db      	ldr	r3, [r3, #12]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	0151      	lsls	r1, r2, #5
 8005e38:	693a      	ldr	r2, [r7, #16]
 8005e3a:	440a      	add	r2, r1
 8005e3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e40:	f043 0302 	orr.w	r3, r3, #2
 8005e44:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	b2d2      	uxtb	r2, r2
 8005e4e:	4611      	mov	r1, r2
 8005e50:	4618      	mov	r0, r3
 8005e52:	f006 f956 	bl	800c102 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	015a      	lsls	r2, r3, #5
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e62:	461a      	mov	r2, r3
 8005e64:	2340      	movs	r3, #64	; 0x40
 8005e66:	6093      	str	r3, [r2, #8]
}
 8005e68:	e2a6      	b.n	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	015a      	lsls	r2, r3, #5
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	4413      	add	r3, r2
 8005e72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e80:	d122      	bne.n	8005ec8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	015a      	lsls	r2, r3, #5
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	4413      	add	r3, r2
 8005e8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	68fa      	ldr	r2, [r7, #12]
 8005e92:	0151      	lsls	r1, r2, #5
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	440a      	add	r2, r1
 8005e98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e9c:	f043 0302 	orr.w	r3, r3, #2
 8005ea0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	b2d2      	uxtb	r2, r2
 8005eaa:	4611      	mov	r1, r2
 8005eac:	4618      	mov	r0, r3
 8005eae:	f006 f928 	bl	800c102 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ec4:	6093      	str	r3, [r2, #8]
}
 8005ec6:	e277      	b.n	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	015a      	lsls	r2, r3, #5
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	4413      	add	r3, r2
 8005ed0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d135      	bne.n	8005f4a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005ede:	6879      	ldr	r1, [r7, #4]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4613      	mov	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	440b      	add	r3, r1
 8005eec:	3358      	adds	r3, #88	; 0x58
 8005eee:	2200      	movs	r2, #0
 8005ef0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	015a      	lsls	r2, r3, #5
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	4413      	add	r3, r2
 8005efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	68fa      	ldr	r2, [r7, #12]
 8005f02:	0151      	lsls	r1, r2, #5
 8005f04:	693a      	ldr	r2, [r7, #16]
 8005f06:	440a      	add	r2, r1
 8005f08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f0c:	f043 0302 	orr.w	r3, r3, #2
 8005f10:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	b2d2      	uxtb	r2, r2
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f006 f8f0 	bl	800c102 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2e:	461a      	mov	r2, r3
 8005f30:	2301      	movs	r3, #1
 8005f32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	00db      	lsls	r3, r3, #3
 8005f40:	440b      	add	r3, r1
 8005f42:	335d      	adds	r3, #93	; 0x5d
 8005f44:	2201      	movs	r2, #1
 8005f46:	701a      	strb	r2, [r3, #0]
}
 8005f48:	e236      	b.n	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	015a      	lsls	r2, r3, #5
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	4413      	add	r3, r2
 8005f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	f003 0308 	and.w	r3, r3, #8
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d12b      	bne.n	8005fb8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	693b      	ldr	r3, [r7, #16]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f6c:	461a      	mov	r2, r3
 8005f6e:	2308      	movs	r3, #8
 8005f70:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	015a      	lsls	r2, r3, #5
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	4413      	add	r3, r2
 8005f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	0151      	lsls	r1, r2, #5
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	440a      	add	r2, r1
 8005f88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005f8c:	f043 0302 	orr.w	r3, r3, #2
 8005f90:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f006 f8b0 	bl	800c102 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8005fa2:	6879      	ldr	r1, [r7, #4]
 8005fa4:	68fa      	ldr	r2, [r7, #12]
 8005fa6:	4613      	mov	r3, r2
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	4413      	add	r3, r2
 8005fac:	00db      	lsls	r3, r3, #3
 8005fae:	440b      	add	r3, r1
 8005fb0:	335d      	adds	r3, #93	; 0x5d
 8005fb2:	2205      	movs	r2, #5
 8005fb4:	701a      	strb	r2, [r3, #0]
}
 8005fb6:	e1ff      	b.n	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f003 0310 	and.w	r3, r3, #16
 8005fca:	2b10      	cmp	r3, #16
 8005fcc:	d155      	bne.n	800607a <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005fce:	6879      	ldr	r1, [r7, #4]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	00db      	lsls	r3, r3, #3
 8005fda:	440b      	add	r3, r1
 8005fdc:	3358      	adds	r3, #88	; 0x58
 8005fde:	2200      	movs	r2, #0
 8005fe0:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005fe2:	6879      	ldr	r1, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	4413      	add	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	440b      	add	r3, r1
 8005ff0:	335d      	adds	r3, #93	; 0x5d
 8005ff2:	2203      	movs	r2, #3
 8005ff4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	440b      	add	r3, r1
 8006004:	333d      	adds	r3, #61	; 0x3d
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d114      	bne.n	8006036 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	68fa      	ldr	r2, [r7, #12]
 8006010:	4613      	mov	r3, r2
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	440b      	add	r3, r1
 800601a:	333c      	adds	r3, #60	; 0x3c
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d109      	bne.n	8006036 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4613      	mov	r3, r2
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	4413      	add	r3, r2
 800602c:	00db      	lsls	r3, r3, #3
 800602e:	440b      	add	r3, r1
 8006030:	333d      	adds	r3, #61	; 0x3d
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	4413      	add	r3, r2
 800603e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	0151      	lsls	r1, r2, #5
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	440a      	add	r2, r1
 800604c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006050:	f043 0302 	orr.w	r3, r3, #2
 8006054:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	68fa      	ldr	r2, [r7, #12]
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	4611      	mov	r1, r2
 8006060:	4618      	mov	r0, r3
 8006062:	f006 f84e 	bl	800c102 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006072:	461a      	mov	r2, r3
 8006074:	2310      	movs	r3, #16
 8006076:	6093      	str	r3, [r2, #8]
}
 8006078:	e19e      	b.n	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4413      	add	r3, r2
 8006082:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608c:	2b80      	cmp	r3, #128	; 0x80
 800608e:	d12b      	bne.n	80060e8 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	4413      	add	r3, r2
 8006098:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80060aa:	f043 0302 	orr.w	r3, r3, #2
 80060ae:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68fa      	ldr	r2, [r7, #12]
 80060b6:	b2d2      	uxtb	r2, r2
 80060b8:	4611      	mov	r1, r2
 80060ba:	4618      	mov	r0, r3
 80060bc:	f006 f821 	bl	800c102 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80060c0:	6879      	ldr	r1, [r7, #4]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	4613      	mov	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	00db      	lsls	r3, r3, #3
 80060cc:	440b      	add	r3, r1
 80060ce:	335d      	adds	r3, #93	; 0x5d
 80060d0:	2206      	movs	r2, #6
 80060d2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060e0:	461a      	mov	r2, r3
 80060e2:	2380      	movs	r3, #128	; 0x80
 80060e4:	6093      	str	r3, [r2, #8]
}
 80060e6:	e167      	b.n	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	693b      	ldr	r3, [r7, #16]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fe:	d135      	bne.n	800616c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	4413      	add	r3, r2
 8006108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	440a      	add	r2, r1
 8006116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800611a:	f043 0302 	orr.w	r3, r3, #2
 800611e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	4611      	mov	r1, r2
 800612a:	4618      	mov	r0, r3
 800612c:	f005 ffe9 	bl	800c102 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	015a      	lsls	r2, r3, #5
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	4413      	add	r3, r2
 8006138:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800613c:	461a      	mov	r2, r3
 800613e:	2310      	movs	r3, #16
 8006140:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	4413      	add	r3, r2
 800614a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800614e:	461a      	mov	r2, r3
 8006150:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006154:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	68fa      	ldr	r2, [r7, #12]
 800615a:	4613      	mov	r3, r2
 800615c:	009b      	lsls	r3, r3, #2
 800615e:	4413      	add	r3, r2
 8006160:	00db      	lsls	r3, r3, #3
 8006162:	440b      	add	r3, r1
 8006164:	335d      	adds	r3, #93	; 0x5d
 8006166:	2208      	movs	r2, #8
 8006168:	701a      	strb	r2, [r3, #0]
}
 800616a:	e125      	b.n	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f003 0302 	and.w	r3, r3, #2
 800617e:	2b02      	cmp	r3, #2
 8006180:	f040 811a 	bne.w	80063b8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	015a      	lsls	r2, r3, #5
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	4413      	add	r3, r2
 800618c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	0151      	lsls	r1, r2, #5
 8006196:	693a      	ldr	r2, [r7, #16]
 8006198:	440a      	add	r2, r1
 800619a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800619e:	f023 0302 	bic.w	r3, r3, #2
 80061a2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	68fa      	ldr	r2, [r7, #12]
 80061a8:	4613      	mov	r3, r2
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	440b      	add	r3, r1
 80061b2:	335d      	adds	r3, #93	; 0x5d
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d137      	bne.n	800622a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80061ba:	6879      	ldr	r1, [r7, #4]
 80061bc:	68fa      	ldr	r2, [r7, #12]
 80061be:	4613      	mov	r3, r2
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	440b      	add	r3, r1
 80061c8:	335c      	adds	r3, #92	; 0x5c
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80061ce:	6879      	ldr	r1, [r7, #4]
 80061d0:	68fa      	ldr	r2, [r7, #12]
 80061d2:	4613      	mov	r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	4413      	add	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	440b      	add	r3, r1
 80061dc:	333f      	adds	r3, #63	; 0x3f
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d00b      	beq.n	80061fc <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	68fa      	ldr	r2, [r7, #12]
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	440b      	add	r3, r1
 80061f2:	333f      	adds	r3, #63	; 0x3f
 80061f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	f040 80c5 	bne.w	8006386 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80061fc:	6879      	ldr	r1, [r7, #4]
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	440b      	add	r3, r1
 800620a:	3351      	adds	r3, #81	; 0x51
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	f083 0301 	eor.w	r3, r3, #1
 8006212:	b2d8      	uxtb	r0, r3
 8006214:	6879      	ldr	r1, [r7, #4]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	4613      	mov	r3, r2
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	4413      	add	r3, r2
 800621e:	00db      	lsls	r3, r3, #3
 8006220:	440b      	add	r3, r1
 8006222:	3351      	adds	r3, #81	; 0x51
 8006224:	4602      	mov	r2, r0
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	e0ad      	b.n	8006386 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	4613      	mov	r3, r2
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	4413      	add	r3, r2
 8006234:	00db      	lsls	r3, r3, #3
 8006236:	440b      	add	r3, r1
 8006238:	335d      	adds	r3, #93	; 0x5d
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d10a      	bne.n	8006256 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4613      	mov	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4413      	add	r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	440b      	add	r3, r1
 800624e:	335c      	adds	r3, #92	; 0x5c
 8006250:	2202      	movs	r2, #2
 8006252:	701a      	strb	r2, [r3, #0]
 8006254:	e097      	b.n	8006386 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	4613      	mov	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	00db      	lsls	r3, r3, #3
 8006262:	440b      	add	r3, r1
 8006264:	335d      	adds	r3, #93	; 0x5d
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b04      	cmp	r3, #4
 800626a:	d10a      	bne.n	8006282 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	4613      	mov	r3, r2
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	4413      	add	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	440b      	add	r3, r1
 800627a:	335c      	adds	r3, #92	; 0x5c
 800627c:	2202      	movs	r2, #2
 800627e:	701a      	strb	r2, [r3, #0]
 8006280:	e081      	b.n	8006386 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	440b      	add	r3, r1
 8006290:	335d      	adds	r3, #93	; 0x5d
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b05      	cmp	r3, #5
 8006296:	d10a      	bne.n	80062ae <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	4613      	mov	r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	440b      	add	r3, r1
 80062a6:	335c      	adds	r3, #92	; 0x5c
 80062a8:	2205      	movs	r2, #5
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	e06b      	b.n	8006386 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4613      	mov	r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	440b      	add	r3, r1
 80062bc:	335d      	adds	r3, #93	; 0x5d
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	2b06      	cmp	r3, #6
 80062c2:	d00a      	beq.n	80062da <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	440b      	add	r3, r1
 80062d2:	335d      	adds	r3, #93	; 0x5d
 80062d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80062d6:	2b08      	cmp	r3, #8
 80062d8:	d155      	bne.n	8006386 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	440b      	add	r3, r1
 80062e8:	3358      	adds	r3, #88	; 0x58
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	1c59      	adds	r1, r3, #1
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	00db      	lsls	r3, r3, #3
 80062fa:	4403      	add	r3, r0
 80062fc:	3358      	adds	r3, #88	; 0x58
 80062fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8006300:	6879      	ldr	r1, [r7, #4]
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	4613      	mov	r3, r2
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	4413      	add	r3, r2
 800630a:	00db      	lsls	r3, r3, #3
 800630c:	440b      	add	r3, r1
 800630e:	3358      	adds	r3, #88	; 0x58
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2b03      	cmp	r3, #3
 8006314:	d914      	bls.n	8006340 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8006316:	6879      	ldr	r1, [r7, #4]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	00db      	lsls	r3, r3, #3
 8006322:	440b      	add	r3, r1
 8006324:	3358      	adds	r3, #88	; 0x58
 8006326:	2200      	movs	r2, #0
 8006328:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800632a:	6879      	ldr	r1, [r7, #4]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4613      	mov	r3, r2
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	00db      	lsls	r3, r3, #3
 8006336:	440b      	add	r3, r1
 8006338:	335c      	adds	r3, #92	; 0x5c
 800633a:	2204      	movs	r2, #4
 800633c:	701a      	strb	r2, [r3, #0]
 800633e:	e009      	b.n	8006354 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8006340:	6879      	ldr	r1, [r7, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	4613      	mov	r3, r2
 8006346:	009b      	lsls	r3, r3, #2
 8006348:	4413      	add	r3, r2
 800634a:	00db      	lsls	r3, r3, #3
 800634c:	440b      	add	r3, r1
 800634e:	335c      	adds	r3, #92	; 0x5c
 8006350:	2202      	movs	r2, #2
 8006352:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	4413      	add	r3, r2
 800635c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800636a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006372:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006380:	461a      	mov	r2, r3
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	015a      	lsls	r2, r3, #5
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	4413      	add	r3, r2
 800638e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006392:	461a      	mov	r2, r3
 8006394:	2302      	movs	r3, #2
 8006396:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	b2d8      	uxtb	r0, r3
 800639c:	6879      	ldr	r1, [r7, #4]
 800639e:	68fa      	ldr	r2, [r7, #12]
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	440b      	add	r3, r1
 80063aa:	335c      	adds	r3, #92	; 0x5c
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	461a      	mov	r2, r3
 80063b0:	4601      	mov	r1, r0
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f00e fb9a 	bl	8014aec <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80063b8:	bf00      	nop
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}

080063c0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b08a      	sub	sp, #40	; 0x28
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d0:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	6a1b      	ldr	r3, [r3, #32]
 80063d8:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	0c5b      	lsrs	r3, r3, #17
 80063e6:	f003 030f 	and.w	r3, r3, #15
 80063ea:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063f4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d004      	beq.n	8006406 <HCD_RXQLVL_IRQHandler+0x46>
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	2b05      	cmp	r3, #5
 8006400:	f000 8082 	beq.w	8006508 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006404:	e083      	b.n	800650e <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d07f      	beq.n	800650c <HCD_RXQLVL_IRQHandler+0x14c>
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	440b      	add	r3, r1
 800641a:	3344      	adds	r3, #68	; 0x44
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d074      	beq.n	800650c <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6818      	ldr	r0, [r3, #0]
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	440b      	add	r3, r1
 8006434:	3344      	adds	r3, #68	; 0x44
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	693a      	ldr	r2, [r7, #16]
 800643a:	b292      	uxth	r2, r2
 800643c:	4619      	mov	r1, r3
 800643e:	f005 fa06 	bl	800b84e <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8006442:	6879      	ldr	r1, [r7, #4]
 8006444:	69ba      	ldr	r2, [r7, #24]
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	00db      	lsls	r3, r3, #3
 800644e:	440b      	add	r3, r1
 8006450:	3344      	adds	r3, #68	; 0x44
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	18d1      	adds	r1, r2, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4403      	add	r3, r0
 8006466:	3344      	adds	r3, #68	; 0x44
 8006468:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	4613      	mov	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	00db      	lsls	r3, r3, #3
 8006476:	440b      	add	r3, r1
 8006478:	334c      	adds	r3, #76	; 0x4c
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	18d1      	adds	r1, r2, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	4613      	mov	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4413      	add	r3, r2
 800648a:	00db      	lsls	r3, r3, #3
 800648c:	4403      	add	r3, r0
 800648e:	334c      	adds	r3, #76	; 0x4c
 8006490:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	015a      	lsls	r2, r3, #5
 8006496:	6a3b      	ldr	r3, [r7, #32]
 8006498:	4413      	add	r3, r2
 800649a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800649e:	691a      	ldr	r2, [r3, #16]
 80064a0:	4b1d      	ldr	r3, [pc, #116]	; (8006518 <HCD_RXQLVL_IRQHandler+0x158>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d031      	beq.n	800650c <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80064be:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80064c6:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064d4:	461a      	mov	r2, r3
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	69ba      	ldr	r2, [r7, #24]
 80064de:	4613      	mov	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4413      	add	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	440b      	add	r3, r1
 80064e8:	3350      	adds	r3, #80	; 0x50
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	f083 0301 	eor.w	r3, r3, #1
 80064f0:	b2d8      	uxtb	r0, r3
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	4613      	mov	r3, r2
 80064f8:	009b      	lsls	r3, r3, #2
 80064fa:	4413      	add	r3, r2
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	440b      	add	r3, r1
 8006500:	3350      	adds	r3, #80	; 0x50
 8006502:	4602      	mov	r2, r0
 8006504:	701a      	strb	r2, [r3, #0]
      break;
 8006506:	e001      	b.n	800650c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8006508:	bf00      	nop
 800650a:	e000      	b.n	800650e <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 800650c:	bf00      	nop
  }
}
 800650e:	bf00      	nop
 8006510:	3728      	adds	r7, #40	; 0x28
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	1ff80000 	.word	0x1ff80000

0800651c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006548:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b02      	cmp	r3, #2
 8006552:	d10b      	bne.n	800656c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b01      	cmp	r3, #1
 800655c:	d102      	bne.n	8006564 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f00e faa8 	bl	8014ab4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f043 0302 	orr.w	r3, r3, #2
 800656a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b08      	cmp	r3, #8
 8006574:	d132      	bne.n	80065dc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f043 0308 	orr.w	r3, r3, #8
 800657c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 0304 	and.w	r3, r3, #4
 8006584:	2b04      	cmp	r3, #4
 8006586:	d126      	bne.n	80065d6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	699b      	ldr	r3, [r3, #24]
 800658c:	2b02      	cmp	r3, #2
 800658e:	d113      	bne.n	80065b8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006596:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800659a:	d106      	bne.n	80065aa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2102      	movs	r1, #2
 80065a2:	4618      	mov	r0, r3
 80065a4:	f005 fa88 	bl	800bab8 <USB_InitFSLSPClkSel>
 80065a8:	e011      	b.n	80065ce <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2101      	movs	r1, #1
 80065b0:	4618      	mov	r0, r3
 80065b2:	f005 fa81 	bl	800bab8 <USB_InitFSLSPClkSel>
 80065b6:	e00a      	b.n	80065ce <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d106      	bne.n	80065ce <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065c6:	461a      	mov	r2, r3
 80065c8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80065cc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f00e fa9e 	bl	8014b10 <HAL_HCD_PortEnabled_Callback>
 80065d4:	e002      	b.n	80065dc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f00e faa8 	bl	8014b2c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b20      	cmp	r3, #32
 80065e4:	d103      	bne.n	80065ee <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f043 0320 	orr.w	r3, r3, #32
 80065ec:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065f4:	461a      	mov	r2, r3
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	6013      	str	r3, [r2, #0]
}
 80065fa:	bf00      	nop
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
	...

08006604 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d101      	bne.n	8006616 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e12b      	b.n	800686e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d106      	bne.n	8006630 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2200      	movs	r2, #0
 8006626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fb f85c 	bl	80016e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2224      	movs	r2, #36	; 0x24
 8006634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006656:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006666:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006668:	f001 f82e 	bl	80076c8 <HAL_RCC_GetPCLK1Freq>
 800666c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	4a81      	ldr	r2, [pc, #516]	; (8006878 <HAL_I2C_Init+0x274>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d807      	bhi.n	8006688 <HAL_I2C_Init+0x84>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4a80      	ldr	r2, [pc, #512]	; (800687c <HAL_I2C_Init+0x278>)
 800667c:	4293      	cmp	r3, r2
 800667e:	bf94      	ite	ls
 8006680:	2301      	movls	r3, #1
 8006682:	2300      	movhi	r3, #0
 8006684:	b2db      	uxtb	r3, r3
 8006686:	e006      	b.n	8006696 <HAL_I2C_Init+0x92>
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	4a7d      	ldr	r2, [pc, #500]	; (8006880 <HAL_I2C_Init+0x27c>)
 800668c:	4293      	cmp	r3, r2
 800668e:	bf94      	ite	ls
 8006690:	2301      	movls	r3, #1
 8006692:	2300      	movhi	r3, #0
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e0e7      	b.n	800686e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	4a78      	ldr	r2, [pc, #480]	; (8006884 <HAL_I2C_Init+0x280>)
 80066a2:	fba2 2303 	umull	r2, r3, r2, r3
 80066a6:	0c9b      	lsrs	r3, r3, #18
 80066a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68ba      	ldr	r2, [r7, #8]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	4a6a      	ldr	r2, [pc, #424]	; (8006878 <HAL_I2C_Init+0x274>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d802      	bhi.n	80066d8 <HAL_I2C_Init+0xd4>
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	3301      	adds	r3, #1
 80066d6:	e009      	b.n	80066ec <HAL_I2C_Init+0xe8>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066de:	fb02 f303 	mul.w	r3, r2, r3
 80066e2:	4a69      	ldr	r2, [pc, #420]	; (8006888 <HAL_I2C_Init+0x284>)
 80066e4:	fba2 2303 	umull	r2, r3, r2, r3
 80066e8:	099b      	lsrs	r3, r3, #6
 80066ea:	3301      	adds	r3, #1
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	6812      	ldr	r2, [r2, #0]
 80066f0:	430b      	orrs	r3, r1
 80066f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80066fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	495c      	ldr	r1, [pc, #368]	; (8006878 <HAL_I2C_Init+0x274>)
 8006708:	428b      	cmp	r3, r1
 800670a:	d819      	bhi.n	8006740 <HAL_I2C_Init+0x13c>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	1e59      	subs	r1, r3, #1
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	fbb1 f3f3 	udiv	r3, r1, r3
 800671a:	1c59      	adds	r1, r3, #1
 800671c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006720:	400b      	ands	r3, r1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <HAL_I2C_Init+0x138>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	1e59      	subs	r1, r3, #1
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	005b      	lsls	r3, r3, #1
 8006730:	fbb1 f3f3 	udiv	r3, r1, r3
 8006734:	3301      	adds	r3, #1
 8006736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800673a:	e051      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 800673c:	2304      	movs	r3, #4
 800673e:	e04f      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d111      	bne.n	800676c <HAL_I2C_Init+0x168>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	1e58      	subs	r0, r3, #1
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6859      	ldr	r1, [r3, #4]
 8006750:	460b      	mov	r3, r1
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	440b      	add	r3, r1
 8006756:	fbb0 f3f3 	udiv	r3, r0, r3
 800675a:	3301      	adds	r3, #1
 800675c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006760:	2b00      	cmp	r3, #0
 8006762:	bf0c      	ite	eq
 8006764:	2301      	moveq	r3, #1
 8006766:	2300      	movne	r3, #0
 8006768:	b2db      	uxtb	r3, r3
 800676a:	e012      	b.n	8006792 <HAL_I2C_Init+0x18e>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	1e58      	subs	r0, r3, #1
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6859      	ldr	r1, [r3, #4]
 8006774:	460b      	mov	r3, r1
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	0099      	lsls	r1, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006782:	3301      	adds	r3, #1
 8006784:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006788:	2b00      	cmp	r3, #0
 800678a:	bf0c      	ite	eq
 800678c:	2301      	moveq	r3, #1
 800678e:	2300      	movne	r3, #0
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <HAL_I2C_Init+0x196>
 8006796:	2301      	movs	r3, #1
 8006798:	e022      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10e      	bne.n	80067c0 <HAL_I2C_Init+0x1bc>
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1e58      	subs	r0, r3, #1
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6859      	ldr	r1, [r3, #4]
 80067aa:	460b      	mov	r3, r1
 80067ac:	005b      	lsls	r3, r3, #1
 80067ae:	440b      	add	r3, r1
 80067b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80067b4:	3301      	adds	r3, #1
 80067b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067be:	e00f      	b.n	80067e0 <HAL_I2C_Init+0x1dc>
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	1e58      	subs	r0, r3, #1
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6859      	ldr	r1, [r3, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	009b      	lsls	r3, r3, #2
 80067cc:	440b      	add	r3, r1
 80067ce:	0099      	lsls	r1, r3, #2
 80067d0:	440b      	add	r3, r1
 80067d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80067d6:	3301      	adds	r3, #1
 80067d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067e0:	6879      	ldr	r1, [r7, #4]
 80067e2:	6809      	ldr	r1, [r1, #0]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	69da      	ldr	r2, [r3, #28]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	431a      	orrs	r2, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800680e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006812:	687a      	ldr	r2, [r7, #4]
 8006814:	6911      	ldr	r1, [r2, #16]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	68d2      	ldr	r2, [r2, #12]
 800681a:	4311      	orrs	r1, r2
 800681c:	687a      	ldr	r2, [r7, #4]
 800681e:	6812      	ldr	r2, [r2, #0]
 8006820:	430b      	orrs	r3, r1
 8006822:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	431a      	orrs	r2, r3
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	430a      	orrs	r2, r1
 800683e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f042 0201 	orr.w	r2, r2, #1
 800684e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2220      	movs	r2, #32
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	3710      	adds	r7, #16
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	000186a0 	.word	0x000186a0
 800687c:	001e847f 	.word	0x001e847f
 8006880:	003d08ff 	.word	0x003d08ff
 8006884:	431bde83 	.word	0x431bde83
 8006888:	10624dd3 	.word	0x10624dd3

0800688c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b088      	sub	sp, #32
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e154      	b.n	8006b48 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a98      	ldr	r2, [pc, #608]	; (8006b18 <HAL_I2S_Init+0x28c>)
 80068b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7fa ff5d 	bl	8001778 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2202      	movs	r2, #2
 80068c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	69db      	ldr	r3, [r3, #28]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	6812      	ldr	r2, [r2, #0]
 80068d0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80068d4:	f023 030f 	bic.w	r3, r3, #15
 80068d8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2202      	movs	r2, #2
 80068e0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	695b      	ldr	r3, [r3, #20]
 80068e6:	2b02      	cmp	r3, #2
 80068e8:	d06f      	beq.n	80069ca <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d102      	bne.n	80068f8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80068f2:	2310      	movs	r3, #16
 80068f4:	617b      	str	r3, [r7, #20]
 80068f6:	e001      	b.n	80068fc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80068f8:	2320      	movs	r3, #32
 80068fa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b20      	cmp	r3, #32
 8006902:	d802      	bhi.n	800690a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	005b      	lsls	r3, r3, #1
 8006908:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a83      	ldr	r2, [pc, #524]	; (8006b1c <HAL_I2S_Init+0x290>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d004      	beq.n	800691e <HAL_I2S_Init+0x92>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a81      	ldr	r2, [pc, #516]	; (8006b20 <HAL_I2S_Init+0x294>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d104      	bne.n	8006928 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 800691e:	2001      	movs	r0, #1
 8006920:	f001 f9b8 	bl	8007c94 <HAL_RCCEx_GetPeriphCLKFreq>
 8006924:	60f8      	str	r0, [r7, #12]
 8006926:	e003      	b.n	8006930 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8006928:	2002      	movs	r0, #2
 800692a:	f001 f9b3 	bl	8007c94 <HAL_RCCEx_GetPeriphCLKFreq>
 800692e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006938:	d125      	bne.n	8006986 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d010      	beq.n	8006964 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	fbb2 f2f3 	udiv	r2, r2, r3
 800694c:	4613      	mov	r3, r2
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	4413      	add	r3, r2
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	fbb2 f3f3 	udiv	r3, r2, r3
 800695e:	3305      	adds	r3, #5
 8006960:	613b      	str	r3, [r7, #16]
 8006962:	e01f      	b.n	80069a4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	fbb2 f2f3 	udiv	r2, r2, r3
 800696e:	4613      	mov	r3, r2
 8006970:	009b      	lsls	r3, r3, #2
 8006972:	4413      	add	r3, r2
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	461a      	mov	r2, r3
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006980:	3305      	adds	r3, #5
 8006982:	613b      	str	r3, [r7, #16]
 8006984:	e00e      	b.n	80069a4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	fbb2 f2f3 	udiv	r2, r2, r3
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	005b      	lsls	r3, r3, #1
 8006996:	461a      	mov	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	fbb2 f3f3 	udiv	r3, r2, r3
 80069a0:	3305      	adds	r3, #5
 80069a2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	4a5f      	ldr	r2, [pc, #380]	; (8006b24 <HAL_I2S_Init+0x298>)
 80069a8:	fba2 2303 	umull	r2, r3, r2, r3
 80069ac:	08db      	lsrs	r3, r3, #3
 80069ae:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	085b      	lsrs	r3, r3, #1
 80069c0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	021b      	lsls	r3, r3, #8
 80069c6:	61bb      	str	r3, [r7, #24]
 80069c8:	e003      	b.n	80069d2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80069ca:	2302      	movs	r3, #2
 80069cc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80069ce:	2300      	movs	r3, #0
 80069d0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d902      	bls.n	80069de <HAL_I2S_Init+0x152>
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	2bff      	cmp	r3, #255	; 0xff
 80069dc:	d907      	bls.n	80069ee <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e2:	f043 0210 	orr.w	r2, r3, #16
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80069ea:	2301      	movs	r3, #1
 80069ec:	e0ac      	b.n	8006b48 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	691a      	ldr	r2, [r3, #16]
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	ea42 0103 	orr.w	r1, r2, r3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69fa      	ldr	r2, [r7, #28]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	69db      	ldr	r3, [r3, #28]
 8006a08:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a0c:	f023 030f 	bic.w	r3, r3, #15
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6851      	ldr	r1, [r2, #4]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	6892      	ldr	r2, [r2, #8]
 8006a18:	4311      	orrs	r1, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68d2      	ldr	r2, [r2, #12]
 8006a1e:	4311      	orrs	r1, r2
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	6992      	ldr	r2, [r2, #24]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a30:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	689b      	ldr	r3, [r3, #8]
 8006a36:	2b30      	cmp	r3, #48	; 0x30
 8006a38:	d003      	beq.n	8006a42 <HAL_I2S_Init+0x1b6>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	2bb0      	cmp	r3, #176	; 0xb0
 8006a40:	d107      	bne.n	8006a52 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	69da      	ldr	r2, [r3, #28]
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a50:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d16e      	bne.n	8006b38 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a32      	ldr	r2, [pc, #200]	; (8006b28 <HAL_I2S_Init+0x29c>)
 8006a5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2d      	ldr	r2, [pc, #180]	; (8006b1c <HAL_I2S_Init+0x290>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d101      	bne.n	8006a6e <HAL_I2S_Init+0x1e2>
 8006a6a:	4b30      	ldr	r3, [pc, #192]	; (8006b2c <HAL_I2S_Init+0x2a0>)
 8006a6c:	e001      	b.n	8006a72 <HAL_I2S_Init+0x1e6>
 8006a6e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	6812      	ldr	r2, [r2, #0]
 8006a78:	4928      	ldr	r1, [pc, #160]	; (8006b1c <HAL_I2S_Init+0x290>)
 8006a7a:	428a      	cmp	r2, r1
 8006a7c:	d101      	bne.n	8006a82 <HAL_I2S_Init+0x1f6>
 8006a7e:	4a2b      	ldr	r2, [pc, #172]	; (8006b2c <HAL_I2S_Init+0x2a0>)
 8006a80:	e001      	b.n	8006a86 <HAL_I2S_Init+0x1fa>
 8006a82:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8006a86:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006a8a:	f023 030f 	bic.w	r3, r3, #15
 8006a8e:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a21      	ldr	r2, [pc, #132]	; (8006b1c <HAL_I2S_Init+0x290>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d101      	bne.n	8006a9e <HAL_I2S_Init+0x212>
 8006a9a:	4b24      	ldr	r3, [pc, #144]	; (8006b2c <HAL_I2S_Init+0x2a0>)
 8006a9c:	e001      	b.n	8006aa2 <HAL_I2S_Init+0x216>
 8006a9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006aa2:	2202      	movs	r2, #2
 8006aa4:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a1c      	ldr	r2, [pc, #112]	; (8006b1c <HAL_I2S_Init+0x290>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d101      	bne.n	8006ab4 <HAL_I2S_Init+0x228>
 8006ab0:	4b1e      	ldr	r3, [pc, #120]	; (8006b2c <HAL_I2S_Init+0x2a0>)
 8006ab2:	e001      	b.n	8006ab8 <HAL_I2S_Init+0x22c>
 8006ab4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006ab8:	69db      	ldr	r3, [r3, #28]
 8006aba:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	685b      	ldr	r3, [r3, #4]
 8006ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac4:	d003      	beq.n	8006ace <HAL_I2S_Init+0x242>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d103      	bne.n	8006ad6 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ad2:	613b      	str	r3, [r7, #16]
 8006ad4:	e001      	b.n	8006ada <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	b299      	uxth	r1, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	699b      	ldr	r3, [r3, #24]
 8006aee:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006af0:	4303      	orrs	r3, r0
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	430b      	orrs	r3, r1
 8006af6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8006af8:	4313      	orrs	r3, r2
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	897b      	ldrh	r3, [r7, #10]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006b06:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a03      	ldr	r2, [pc, #12]	; (8006b1c <HAL_I2S_Init+0x290>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d10e      	bne.n	8006b30 <HAL_I2S_Init+0x2a4>
 8006b12:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <HAL_I2S_Init+0x2a0>)
 8006b14:	e00e      	b.n	8006b34 <HAL_I2S_Init+0x2a8>
 8006b16:	bf00      	nop
 8006b18:	08006c0b 	.word	0x08006c0b
 8006b1c:	40003800 	.word	0x40003800
 8006b20:	40003c00 	.word	0x40003c00
 8006b24:	cccccccd 	.word	0xcccccccd
 8006b28:	08006d21 	.word	0x08006d21
 8006b2c:	40003400 	.word	0x40003400
 8006b30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006b34:	897a      	ldrh	r2, [r7, #10]
 8006b36:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3720      	adds	r7, #32
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	881a      	ldrh	r2, [r3, #0]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b68:	1c9a      	adds	r2, r3, #2
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	3b01      	subs	r3, #1
 8006b76:	b29a      	uxth	r2, r3
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b80:	b29b      	uxth	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d10e      	bne.n	8006ba4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	685a      	ldr	r2, [r3, #4]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006b94:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f7fc f80a 	bl	8002bb8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006ba4:	bf00      	nop
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68da      	ldr	r2, [r3, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc6:	1c9a      	adds	r2, r3, #2
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10e      	bne.n	8006c02 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	685a      	ldr	r2, [r3, #4]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006bf2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7fb fffd 	bl	8002bfc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b086      	sub	sp, #24
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c20:	b2db      	uxtb	r3, r3
 8006c22:	2b04      	cmp	r3, #4
 8006c24:	d13a      	bne.n	8006c9c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f003 0301 	and.w	r3, r3, #1
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d109      	bne.n	8006c44 <I2S_IRQHandler+0x3a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c3a:	2b40      	cmp	r3, #64	; 0x40
 8006c3c:	d102      	bne.n	8006c44 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff ffb4 	bl	8006bac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006c44:	697b      	ldr	r3, [r7, #20]
 8006c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c4a:	2b40      	cmp	r3, #64	; 0x40
 8006c4c:	d126      	bne.n	8006c9c <I2S_IRQHandler+0x92>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b20      	cmp	r3, #32
 8006c5a:	d11f      	bne.n	8006c9c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006c6a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	613b      	str	r3, [r7, #16]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	613b      	str	r3, [r7, #16]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8e:	f043 0202 	orr.w	r2, r3, #2
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7fb ff98 	bl	8002bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ca2:	b2db      	uxtb	r3, r3
 8006ca4:	2b03      	cmp	r3, #3
 8006ca6:	d136      	bne.n	8006d16 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f003 0302 	and.w	r3, r3, #2
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d109      	bne.n	8006cc6 <I2S_IRQHandler+0xbc>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cbc:	2b80      	cmp	r3, #128	; 0x80
 8006cbe:	d102      	bne.n	8006cc6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff ff45 	bl	8006b50 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	f003 0308 	and.w	r3, r3, #8
 8006ccc:	2b08      	cmp	r3, #8
 8006cce:	d122      	bne.n	8006d16 <I2S_IRQHandler+0x10c>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	f003 0320 	and.w	r3, r3, #32
 8006cda:	2b20      	cmp	r3, #32
 8006cdc:	d11b      	bne.n	8006d16 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	685a      	ldr	r2, [r3, #4]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006cec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006cee:	2300      	movs	r3, #0
 8006cf0:	60fb      	str	r3, [r7, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d08:	f043 0204 	orr.w	r2, r3, #4
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7fb ff5b 	bl	8002bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006d16:	bf00      	nop
 8006d18:	3718      	adds	r7, #24
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
	...

08006d20 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	4a92      	ldr	r2, [pc, #584]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d101      	bne.n	8006d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006d3a:	4b92      	ldr	r3, [pc, #584]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d3c:	e001      	b.n	8006d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	685b      	ldr	r3, [r3, #4]
 8006d4c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a8b      	ldr	r2, [pc, #556]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d101      	bne.n	8006d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006d58:	4b8a      	ldr	r3, [pc, #552]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d5a:	e001      	b.n	8006d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006d5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d6c:	d004      	beq.n	8006d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f040 8099 	bne.w	8006eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006d78:	69fb      	ldr	r3, [r7, #28]
 8006d7a:	f003 0302 	and.w	r3, r3, #2
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d107      	bne.n	8006d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d002      	beq.n	8006d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f925 	bl	8006fdc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d107      	bne.n	8006dac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f9c8 	bl	800713c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d13a      	bne.n	8006e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	f003 0320 	and.w	r3, r3, #32
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d035      	beq.n	8006e2c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a6e      	ldr	r2, [pc, #440]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d101      	bne.n	8006dce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006dca:	4b6e      	ldr	r3, [pc, #440]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dcc:	e001      	b.n	8006dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006dce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4969      	ldr	r1, [pc, #420]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dda:	428b      	cmp	r3, r1
 8006ddc:	d101      	bne.n	8006de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006dde:	4b69      	ldr	r3, [pc, #420]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006de0:	e001      	b.n	8006de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006de2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006de6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006dea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006dfa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	60fb      	str	r3, [r7, #12]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68db      	ldr	r3, [r3, #12]
 8006e06:	60fb      	str	r3, [r7, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2201      	movs	r2, #1
 8006e16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	f043 0202 	orr.w	r2, r3, #2
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fb fed0 	bl	8002bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	f003 0308 	and.w	r3, r3, #8
 8006e32:	2b08      	cmp	r3, #8
 8006e34:	f040 80c3 	bne.w	8006fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f003 0320 	and.w	r3, r3, #32
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 80bd 	beq.w	8006fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685a      	ldr	r2, [r3, #4]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006e52:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a49      	ldr	r2, [pc, #292]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d101      	bne.n	8006e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006e5e:	4b49      	ldr	r3, [pc, #292]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e60:	e001      	b.n	8006e66 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006e62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e66:	685a      	ldr	r2, [r3, #4]
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4944      	ldr	r1, [pc, #272]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e6e:	428b      	cmp	r3, r1
 8006e70:	d101      	bne.n	8006e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006e72:	4b44      	ldr	r3, [pc, #272]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e74:	e001      	b.n	8006e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006e76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006e7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006e7e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006e80:	2300      	movs	r3, #0
 8006e82:	60bb      	str	r3, [r7, #8]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	60bb      	str	r3, [r7, #8]
 8006e8c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2201      	movs	r2, #1
 8006e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e9a:	f043 0204 	orr.w	r2, r3, #4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7fb fe92 	bl	8002bcc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ea8:	e089      	b.n	8006fbe <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d107      	bne.n	8006ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d002      	beq.n	8006ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 f8be 	bl	8007040 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d107      	bne.n	8006ede <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d002      	beq.n	8006ede <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 f8fd 	bl	80070d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee4:	2b40      	cmp	r3, #64	; 0x40
 8006ee6:	d12f      	bne.n	8006f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d02a      	beq.n	8006f48 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	685a      	ldr	r2, [r3, #4]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006f00:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1e      	ldr	r2, [pc, #120]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d101      	bne.n	8006f10 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f0e:	e001      	b.n	8006f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006f10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4919      	ldr	r1, [pc, #100]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f1c:	428b      	cmp	r3, r1
 8006f1e:	d101      	bne.n	8006f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006f20:	4b18      	ldr	r3, [pc, #96]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f22:	e001      	b.n	8006f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006f24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f28:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f2c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2201      	movs	r2, #1
 8006f32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	f043 0202 	orr.w	r2, r3, #2
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fb fe42 	bl	8002bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006f48:	69bb      	ldr	r3, [r7, #24]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b08      	cmp	r3, #8
 8006f50:	d136      	bne.n	8006fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d031      	beq.n	8006fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a07      	ldr	r2, [pc, #28]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d101      	bne.n	8006f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006f66:	4b07      	ldr	r3, [pc, #28]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f68:	e001      	b.n	8006f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f6e:	685a      	ldr	r2, [r3, #4]
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4902      	ldr	r1, [pc, #8]	; (8006f80 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006f76:	428b      	cmp	r3, r1
 8006f78:	d106      	bne.n	8006f88 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006f7a:	4b02      	ldr	r3, [pc, #8]	; (8006f84 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006f7c:	e006      	b.n	8006f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006f7e:	bf00      	nop
 8006f80:	40003800 	.word	0x40003800
 8006f84:	40003400 	.word	0x40003400
 8006f88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006f8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006f90:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006fa0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fae:	f043 0204 	orr.w	r2, r3, #4
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f7fb fe08 	bl	8002bcc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006fbc:	e000      	b.n	8006fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006fbe:	bf00      	nop
}
 8006fc0:	bf00      	nop
 8006fc2:	3720      	adds	r7, #32
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	1c99      	adds	r1, r3, #2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6251      	str	r1, [r2, #36]	; 0x24
 8006fee:	881a      	ldrh	r2, [r3, #0]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	3b01      	subs	r3, #1
 8006ffe:	b29a      	uxth	r2, r3
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007008:	b29b      	uxth	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d113      	bne.n	8007036 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800701c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007022:	b29b      	uxth	r3, r3
 8007024:	2b00      	cmp	r3, #0
 8007026:	d106      	bne.n	8007036 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f7ff ffc9 	bl	8006fc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b082      	sub	sp, #8
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704c:	1c99      	adds	r1, r3, #2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6251      	str	r1, [r2, #36]	; 0x24
 8007052:	8819      	ldrh	r1, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4a1d      	ldr	r2, [pc, #116]	; (80070d0 <I2SEx_TxISR_I2SExt+0x90>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d101      	bne.n	8007062 <I2SEx_TxISR_I2SExt+0x22>
 800705e:	4b1d      	ldr	r3, [pc, #116]	; (80070d4 <I2SEx_TxISR_I2SExt+0x94>)
 8007060:	e001      	b.n	8007066 <I2SEx_TxISR_I2SExt+0x26>
 8007062:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007066:	460a      	mov	r2, r1
 8007068:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800706e:	b29b      	uxth	r3, r3
 8007070:	3b01      	subs	r3, #1
 8007072:	b29a      	uxth	r2, r3
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800707c:	b29b      	uxth	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d121      	bne.n	80070c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a12      	ldr	r2, [pc, #72]	; (80070d0 <I2SEx_TxISR_I2SExt+0x90>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d101      	bne.n	8007090 <I2SEx_TxISR_I2SExt+0x50>
 800708c:	4b11      	ldr	r3, [pc, #68]	; (80070d4 <I2SEx_TxISR_I2SExt+0x94>)
 800708e:	e001      	b.n	8007094 <I2SEx_TxISR_I2SExt+0x54>
 8007090:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007094:	685a      	ldr	r2, [r3, #4]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	490d      	ldr	r1, [pc, #52]	; (80070d0 <I2SEx_TxISR_I2SExt+0x90>)
 800709c:	428b      	cmp	r3, r1
 800709e:	d101      	bne.n	80070a4 <I2SEx_TxISR_I2SExt+0x64>
 80070a0:	4b0c      	ldr	r3, [pc, #48]	; (80070d4 <I2SEx_TxISR_I2SExt+0x94>)
 80070a2:	e001      	b.n	80070a8 <I2SEx_TxISR_I2SExt+0x68>
 80070a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80070a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80070ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d106      	bne.n	80070c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f7ff ff81 	bl	8006fc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	40003800 	.word	0x40003800
 80070d4:	40003400 	.word	0x40003400

080070d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68d8      	ldr	r0, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070ea:	1c99      	adds	r1, r3, #2
 80070ec:	687a      	ldr	r2, [r7, #4]
 80070ee:	62d1      	str	r1, [r2, #44]	; 0x2c
 80070f0:	b282      	uxth	r2, r0
 80070f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29a      	uxth	r2, r3
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b00      	cmp	r3, #0
 800710a:	d113      	bne.n	8007134 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800711a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007120:	b29b      	uxth	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d106      	bne.n	8007134 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f7ff ff4a 	bl	8006fc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007134:	bf00      	nop
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a20      	ldr	r2, [pc, #128]	; (80071cc <I2SEx_RxISR_I2SExt+0x90>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d101      	bne.n	8007152 <I2SEx_RxISR_I2SExt+0x16>
 800714e:	4b20      	ldr	r3, [pc, #128]	; (80071d0 <I2SEx_RxISR_I2SExt+0x94>)
 8007150:	e001      	b.n	8007156 <I2SEx_RxISR_I2SExt+0x1a>
 8007152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007156:	68d8      	ldr	r0, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	1c99      	adds	r1, r3, #2
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	62d1      	str	r1, [r2, #44]	; 0x2c
 8007162:	b282      	uxth	r2, r0
 8007164:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800716a:	b29b      	uxth	r3, r3
 800716c:	3b01      	subs	r3, #1
 800716e:	b29a      	uxth	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d121      	bne.n	80071c2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a12      	ldr	r2, [pc, #72]	; (80071cc <I2SEx_RxISR_I2SExt+0x90>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d101      	bne.n	800718c <I2SEx_RxISR_I2SExt+0x50>
 8007188:	4b11      	ldr	r3, [pc, #68]	; (80071d0 <I2SEx_RxISR_I2SExt+0x94>)
 800718a:	e001      	b.n	8007190 <I2SEx_RxISR_I2SExt+0x54>
 800718c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8007190:	685a      	ldr	r2, [r3, #4]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	490d      	ldr	r1, [pc, #52]	; (80071cc <I2SEx_RxISR_I2SExt+0x90>)
 8007198:	428b      	cmp	r3, r1
 800719a:	d101      	bne.n	80071a0 <I2SEx_RxISR_I2SExt+0x64>
 800719c:	4b0c      	ldr	r3, [pc, #48]	; (80071d0 <I2SEx_RxISR_I2SExt+0x94>)
 800719e:	e001      	b.n	80071a4 <I2SEx_RxISR_I2SExt+0x68>
 80071a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80071a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80071a8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d106      	bne.n	80071c2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7ff ff03 	bl	8006fc8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80071c2:	bf00      	nop
 80071c4:	3708      	adds	r7, #8
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	40003800 	.word	0x40003800
 80071d0:	40003400 	.word	0x40003400

080071d4 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af02      	add	r7, sp, #8
 80071da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80071dc:	f7fc fa4c 	bl	8003678 <HAL_GetTick>
 80071e0:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e069      	b.n	80072c0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071f2:	b2db      	uxtb	r3, r3
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d10b      	bne.n	8007210 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7fa fb73 	bl	80018ec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8007206:	f241 3188 	movw	r1, #5000	; 0x1388
 800720a:	6878      	ldr	r0, [r7, #4]
 800720c:	f000 f85e 	bl	80072cc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	3b01      	subs	r3, #1
 8007220:	021a      	lsls	r2, r3, #8
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800722e:	9300      	str	r3, [sp, #0]
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	2120      	movs	r1, #32
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f856 	bl	80072e8 <QSPI_WaitFlagStateUntilTimeout>
 800723c:	4603      	mov	r3, r0
 800723e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8007240:	7afb      	ldrb	r3, [r7, #11]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d137      	bne.n	80072b6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007250:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8007254:	687a      	ldr	r2, [r7, #4]
 8007256:	6852      	ldr	r2, [r2, #4]
 8007258:	0611      	lsls	r1, r2, #24
 800725a:	687a      	ldr	r2, [r7, #4]
 800725c:	68d2      	ldr	r2, [r2, #12]
 800725e:	4311      	orrs	r1, r2
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	69d2      	ldr	r2, [r2, #28]
 8007264:	4311      	orrs	r1, r2
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	6a12      	ldr	r2, [r2, #32]
 800726a:	4311      	orrs	r1, r2
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	6812      	ldr	r2, [r2, #0]
 8007270:	430b      	orrs	r3, r1
 8007272:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685a      	ldr	r2, [r3, #4]
 800727a:	4b13      	ldr	r3, [pc, #76]	; (80072c8 <HAL_QSPI_Init+0xf4>)
 800727c:	4013      	ands	r3, r2
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6912      	ldr	r2, [r2, #16]
 8007282:	0411      	lsls	r1, r2, #16
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6952      	ldr	r2, [r2, #20]
 8007288:	4311      	orrs	r1, r2
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6992      	ldr	r2, [r2, #24]
 800728e:	4311      	orrs	r1, r2
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	6812      	ldr	r2, [r2, #0]
 8007294:	430b      	orrs	r3, r1
 8007296:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	681a      	ldr	r2, [r3, #0]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f042 0201 	orr.w	r2, r2, #1
 80072a6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2201      	movs	r2, #1
 80072b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80072be:	7afb      	ldrb	r3, [r7, #11]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	3710      	adds	r7, #16
 80072c4:	46bd      	mov	sp, r7
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	ffe0f8fe 	.word	0xffe0f8fe

080072cc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	683a      	ldr	r2, [r7, #0]
 80072da:	649a      	str	r2, [r3, #72]	; 0x48
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80072f8:	e01a      	b.n	8007330 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d016      	beq.n	8007330 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007302:	f7fc f9b9 	bl	8003678 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	429a      	cmp	r2, r3
 8007310:	d302      	bcc.n	8007318 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10b      	bne.n	8007330 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2204      	movs	r2, #4
 800731c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007324:	f043 0201 	orr.w	r2, r3, #1
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	e00e      	b.n	800734e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	689a      	ldr	r2, [r3, #8]
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	4013      	ands	r3, r2
 800733a:	2b00      	cmp	r3, #0
 800733c:	bf14      	ite	ne
 800733e:	2301      	movne	r3, #1
 8007340:	2300      	moveq	r3, #0
 8007342:	b2db      	uxtb	r3, r3
 8007344:	461a      	mov	r2, r3
 8007346:	79fb      	ldrb	r3, [r7, #7]
 8007348:	429a      	cmp	r2, r3
 800734a:	d1d6      	bne.n	80072fa <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3710      	adds	r7, #16
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e0cc      	b.n	8007506 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800736c:	4b68      	ldr	r3, [pc, #416]	; (8007510 <HAL_RCC_ClockConfig+0x1b8>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 030f 	and.w	r3, r3, #15
 8007374:	683a      	ldr	r2, [r7, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d90c      	bls.n	8007394 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800737a:	4b65      	ldr	r3, [pc, #404]	; (8007510 <HAL_RCC_ClockConfig+0x1b8>)
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	b2d2      	uxtb	r2, r2
 8007380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007382:	4b63      	ldr	r3, [pc, #396]	; (8007510 <HAL_RCC_ClockConfig+0x1b8>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 030f 	and.w	r3, r3, #15
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d001      	beq.n	8007394 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e0b8      	b.n	8007506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d020      	beq.n	80073e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0304 	and.w	r3, r3, #4
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073ac:	4b59      	ldr	r3, [pc, #356]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	4a58      	ldr	r2, [pc, #352]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80073b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80073b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f003 0308 	and.w	r3, r3, #8
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d005      	beq.n	80073d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80073c4:	4b53      	ldr	r3, [pc, #332]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	4a52      	ldr	r2, [pc, #328]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80073ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80073ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073d0:	4b50      	ldr	r3, [pc, #320]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80073d2:	689b      	ldr	r3, [r3, #8]
 80073d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	494d      	ldr	r1, [pc, #308]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80073de:	4313      	orrs	r3, r2
 80073e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d044      	beq.n	8007478 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	685b      	ldr	r3, [r3, #4]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d107      	bne.n	8007406 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f6:	4b47      	ldr	r3, [pc, #284]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d119      	bne.n	8007436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e07f      	b.n	8007506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	2b02      	cmp	r3, #2
 800740c:	d003      	beq.n	8007416 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007412:	2b03      	cmp	r3, #3
 8007414:	d107      	bne.n	8007426 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007416:	4b3f      	ldr	r3, [pc, #252]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e06f      	b.n	8007506 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007426:	4b3b      	ldr	r3, [pc, #236]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f003 0302 	and.w	r3, r3, #2
 800742e:	2b00      	cmp	r3, #0
 8007430:	d101      	bne.n	8007436 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007432:	2301      	movs	r3, #1
 8007434:	e067      	b.n	8007506 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007436:	4b37      	ldr	r3, [pc, #220]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 8007438:	689b      	ldr	r3, [r3, #8]
 800743a:	f023 0203 	bic.w	r2, r3, #3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	4934      	ldr	r1, [pc, #208]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 8007444:	4313      	orrs	r3, r2
 8007446:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007448:	f7fc f916 	bl	8003678 <HAL_GetTick>
 800744c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800744e:	e00a      	b.n	8007466 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007450:	f7fc f912 	bl	8003678 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f241 3288 	movw	r2, #5000	; 0x1388
 800745e:	4293      	cmp	r3, r2
 8007460:	d901      	bls.n	8007466 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007462:	2303      	movs	r3, #3
 8007464:	e04f      	b.n	8007506 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007466:	4b2b      	ldr	r3, [pc, #172]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 020c 	and.w	r2, r3, #12
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	429a      	cmp	r2, r3
 8007476:	d1eb      	bne.n	8007450 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007478:	4b25      	ldr	r3, [pc, #148]	; (8007510 <HAL_RCC_ClockConfig+0x1b8>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f003 030f 	and.w	r3, r3, #15
 8007480:	683a      	ldr	r2, [r7, #0]
 8007482:	429a      	cmp	r2, r3
 8007484:	d20c      	bcs.n	80074a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007486:	4b22      	ldr	r3, [pc, #136]	; (8007510 <HAL_RCC_ClockConfig+0x1b8>)
 8007488:	683a      	ldr	r2, [r7, #0]
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800748e:	4b20      	ldr	r3, [pc, #128]	; (8007510 <HAL_RCC_ClockConfig+0x1b8>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d001      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e032      	b.n	8007506 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0304 	and.w	r3, r3, #4
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d008      	beq.n	80074be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074ac:	4b19      	ldr	r3, [pc, #100]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	4916      	ldr	r1, [pc, #88]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d009      	beq.n	80074de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074ca:	4b12      	ldr	r3, [pc, #72]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80074cc:	689b      	ldr	r3, [r3, #8]
 80074ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	691b      	ldr	r3, [r3, #16]
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	490e      	ldr	r1, [pc, #56]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80074da:	4313      	orrs	r3, r2
 80074dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80074de:	f000 f821 	bl	8007524 <HAL_RCC_GetSysClockFreq>
 80074e2:	4602      	mov	r2, r0
 80074e4:	4b0b      	ldr	r3, [pc, #44]	; (8007514 <HAL_RCC_ClockConfig+0x1bc>)
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	091b      	lsrs	r3, r3, #4
 80074ea:	f003 030f 	and.w	r3, r3, #15
 80074ee:	490a      	ldr	r1, [pc, #40]	; (8007518 <HAL_RCC_ClockConfig+0x1c0>)
 80074f0:	5ccb      	ldrb	r3, [r1, r3]
 80074f2:	fa22 f303 	lsr.w	r3, r2, r3
 80074f6:	4a09      	ldr	r2, [pc, #36]	; (800751c <HAL_RCC_ClockConfig+0x1c4>)
 80074f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80074fa:	4b09      	ldr	r3, [pc, #36]	; (8007520 <HAL_RCC_ClockConfig+0x1c8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fa fc26 	bl	8001d50 <HAL_InitTick>

  return HAL_OK;
 8007504:	2300      	movs	r3, #0
}
 8007506:	4618      	mov	r0, r3
 8007508:	3710      	adds	r7, #16
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	40023c00 	.word	0x40023c00
 8007514:	40023800 	.word	0x40023800
 8007518:	08016140 	.word	0x08016140
 800751c:	20000000 	.word	0x20000000
 8007520:	2000005c 	.word	0x2000005c

08007524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007524:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007528:	b090      	sub	sp, #64	; 0x40
 800752a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800752c:	2300      	movs	r3, #0
 800752e:	637b      	str	r3, [r7, #52]	; 0x34
 8007530:	2300      	movs	r3, #0
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007534:	2300      	movs	r3, #0
 8007536:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007538:	2300      	movs	r3, #0
 800753a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800753c:	4b59      	ldr	r3, [pc, #356]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	f003 030c 	and.w	r3, r3, #12
 8007544:	2b08      	cmp	r3, #8
 8007546:	d00d      	beq.n	8007564 <HAL_RCC_GetSysClockFreq+0x40>
 8007548:	2b08      	cmp	r3, #8
 800754a:	f200 80a1 	bhi.w	8007690 <HAL_RCC_GetSysClockFreq+0x16c>
 800754e:	2b00      	cmp	r3, #0
 8007550:	d002      	beq.n	8007558 <HAL_RCC_GetSysClockFreq+0x34>
 8007552:	2b04      	cmp	r3, #4
 8007554:	d003      	beq.n	800755e <HAL_RCC_GetSysClockFreq+0x3a>
 8007556:	e09b      	b.n	8007690 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007558:	4b53      	ldr	r3, [pc, #332]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800755a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800755c:	e09b      	b.n	8007696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800755e:	4b53      	ldr	r3, [pc, #332]	; (80076ac <HAL_RCC_GetSysClockFreq+0x188>)
 8007560:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007562:	e098      	b.n	8007696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007564:	4b4f      	ldr	r3, [pc, #316]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800756e:	4b4d      	ldr	r3, [pc, #308]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007576:	2b00      	cmp	r3, #0
 8007578:	d028      	beq.n	80075cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800757a:	4b4a      	ldr	r3, [pc, #296]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	099b      	lsrs	r3, r3, #6
 8007580:	2200      	movs	r2, #0
 8007582:	623b      	str	r3, [r7, #32]
 8007584:	627a      	str	r2, [r7, #36]	; 0x24
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800758c:	2100      	movs	r1, #0
 800758e:	4b47      	ldr	r3, [pc, #284]	; (80076ac <HAL_RCC_GetSysClockFreq+0x188>)
 8007590:	fb03 f201 	mul.w	r2, r3, r1
 8007594:	2300      	movs	r3, #0
 8007596:	fb00 f303 	mul.w	r3, r0, r3
 800759a:	4413      	add	r3, r2
 800759c:	4a43      	ldr	r2, [pc, #268]	; (80076ac <HAL_RCC_GetSysClockFreq+0x188>)
 800759e:	fba0 1202 	umull	r1, r2, r0, r2
 80075a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075a4:	460a      	mov	r2, r1
 80075a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80075a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075aa:	4413      	add	r3, r2
 80075ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b0:	2200      	movs	r2, #0
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	61fa      	str	r2, [r7, #28]
 80075b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80075ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80075be:	f7f8 fe7f 	bl	80002c0 <__aeabi_uldivmod>
 80075c2:	4602      	mov	r2, r0
 80075c4:	460b      	mov	r3, r1
 80075c6:	4613      	mov	r3, r2
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075ca:	e053      	b.n	8007674 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80075cc:	4b35      	ldr	r3, [pc, #212]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	099b      	lsrs	r3, r3, #6
 80075d2:	2200      	movs	r2, #0
 80075d4:	613b      	str	r3, [r7, #16]
 80075d6:	617a      	str	r2, [r7, #20]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80075de:	f04f 0b00 	mov.w	fp, #0
 80075e2:	4652      	mov	r2, sl
 80075e4:	465b      	mov	r3, fp
 80075e6:	f04f 0000 	mov.w	r0, #0
 80075ea:	f04f 0100 	mov.w	r1, #0
 80075ee:	0159      	lsls	r1, r3, #5
 80075f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80075f4:	0150      	lsls	r0, r2, #5
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	ebb2 080a 	subs.w	r8, r2, sl
 80075fe:	eb63 090b 	sbc.w	r9, r3, fp
 8007602:	f04f 0200 	mov.w	r2, #0
 8007606:	f04f 0300 	mov.w	r3, #0
 800760a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800760e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007612:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007616:	ebb2 0408 	subs.w	r4, r2, r8
 800761a:	eb63 0509 	sbc.w	r5, r3, r9
 800761e:	f04f 0200 	mov.w	r2, #0
 8007622:	f04f 0300 	mov.w	r3, #0
 8007626:	00eb      	lsls	r3, r5, #3
 8007628:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800762c:	00e2      	lsls	r2, r4, #3
 800762e:	4614      	mov	r4, r2
 8007630:	461d      	mov	r5, r3
 8007632:	eb14 030a 	adds.w	r3, r4, sl
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	eb45 030b 	adc.w	r3, r5, fp
 800763c:	607b      	str	r3, [r7, #4]
 800763e:	f04f 0200 	mov.w	r2, #0
 8007642:	f04f 0300 	mov.w	r3, #0
 8007646:	e9d7 4500 	ldrd	r4, r5, [r7]
 800764a:	4629      	mov	r1, r5
 800764c:	028b      	lsls	r3, r1, #10
 800764e:	4621      	mov	r1, r4
 8007650:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007654:	4621      	mov	r1, r4
 8007656:	028a      	lsls	r2, r1, #10
 8007658:	4610      	mov	r0, r2
 800765a:	4619      	mov	r1, r3
 800765c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800765e:	2200      	movs	r2, #0
 8007660:	60bb      	str	r3, [r7, #8]
 8007662:	60fa      	str	r2, [r7, #12]
 8007664:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007668:	f7f8 fe2a 	bl	80002c0 <__aeabi_uldivmod>
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	4613      	mov	r3, r2
 8007672:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007674:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	0c1b      	lsrs	r3, r3, #16
 800767a:	f003 0303 	and.w	r3, r3, #3
 800767e:	3301      	adds	r3, #1
 8007680:	005b      	lsls	r3, r3, #1
 8007682:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007684:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	fbb2 f3f3 	udiv	r3, r2, r3
 800768c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800768e:	e002      	b.n	8007696 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007690:	4b05      	ldr	r3, [pc, #20]	; (80076a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8007692:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007698:	4618      	mov	r0, r3
 800769a:	3740      	adds	r7, #64	; 0x40
 800769c:	46bd      	mov	sp, r7
 800769e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076a2:	bf00      	nop
 80076a4:	40023800 	.word	0x40023800
 80076a8:	00f42400 	.word	0x00f42400
 80076ac:	017d7840 	.word	0x017d7840

080076b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80076b4:	4b03      	ldr	r3, [pc, #12]	; (80076c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80076b6:	681b      	ldr	r3, [r3, #0]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000000 	.word	0x20000000

080076c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80076cc:	f7ff fff0 	bl	80076b0 <HAL_RCC_GetHCLKFreq>
 80076d0:	4602      	mov	r2, r0
 80076d2:	4b05      	ldr	r3, [pc, #20]	; (80076e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	0a9b      	lsrs	r3, r3, #10
 80076d8:	f003 0307 	and.w	r3, r3, #7
 80076dc:	4903      	ldr	r1, [pc, #12]	; (80076ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80076de:	5ccb      	ldrb	r3, [r1, r3]
 80076e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40023800 	.word	0x40023800
 80076ec:	08016150 	.word	0x08016150

080076f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80076f4:	f7ff ffdc 	bl	80076b0 <HAL_RCC_GetHCLKFreq>
 80076f8:	4602      	mov	r2, r0
 80076fa:	4b05      	ldr	r3, [pc, #20]	; (8007710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	0b5b      	lsrs	r3, r3, #13
 8007700:	f003 0307 	and.w	r3, r3, #7
 8007704:	4903      	ldr	r1, [pc, #12]	; (8007714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007706:	5ccb      	ldrb	r3, [r1, r3]
 8007708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800770c:	4618      	mov	r0, r3
 800770e:	bd80      	pop	{r7, pc}
 8007710:	40023800 	.word	0x40023800
 8007714:	08016150 	.word	0x08016150

08007718 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	220f      	movs	r2, #15
 8007726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007728:	4b12      	ldr	r3, [pc, #72]	; (8007774 <HAL_RCC_GetClockConfig+0x5c>)
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f003 0203 	and.w	r2, r3, #3
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007734:	4b0f      	ldr	r3, [pc, #60]	; (8007774 <HAL_RCC_GetClockConfig+0x5c>)
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007740:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <HAL_RCC_GetClockConfig+0x5c>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800774c:	4b09      	ldr	r3, [pc, #36]	; (8007774 <HAL_RCC_GetClockConfig+0x5c>)
 800774e:	689b      	ldr	r3, [r3, #8]
 8007750:	08db      	lsrs	r3, r3, #3
 8007752:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800775a:	4b07      	ldr	r3, [pc, #28]	; (8007778 <HAL_RCC_GetClockConfig+0x60>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 020f 	and.w	r2, r3, #15
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	601a      	str	r2, [r3, #0]
}
 8007766:	bf00      	nop
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	40023800 	.word	0x40023800
 8007778:	40023c00 	.word	0x40023c00

0800777c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b088      	sub	sp, #32
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8007788:	2300      	movs	r3, #0
 800778a:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 800778c:	2300      	movs	r3, #0
 800778e:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8007790:	2300      	movs	r3, #0
 8007792:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f003 0301 	and.w	r3, r3, #1
 800779c:	2b00      	cmp	r3, #0
 800779e:	d010      	beq.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80077a0:	4b7a      	ldr	r3, [pc, #488]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80077a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077a6:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	69db      	ldr	r3, [r3, #28]
 80077ae:	4977      	ldr	r1, [pc, #476]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80077b0:	4313      	orrs	r3, r2
 80077b2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	69db      	ldr	r3, [r3, #28]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d101      	bne.n	80077c2 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 80077be:	2301      	movs	r3, #1
 80077c0:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d010      	beq.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80077ce:	4b6f      	ldr	r3, [pc, #444]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80077d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077d4:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	496b      	ldr	r1, [pc, #428]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80077de:	4313      	orrs	r3, r2
 80077e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d101      	bne.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 80077ec:	2301      	movs	r3, #1
 80077ee:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d022      	beq.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 80077fc:	4b63      	ldr	r3, [pc, #396]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80077fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007802:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800780a:	4960      	ldr	r1, [pc, #384]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800780c:	4313      	orrs	r3, r2
 800780e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 800781a:	2301      	movs	r3, #1
 800781c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007826:	d10c      	bne.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8007828:	4b58      	ldr	r3, [pc, #352]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800782a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800782e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	3b01      	subs	r3, #1
 8007838:	021b      	lsls	r3, r3, #8
 800783a:	4954      	ldr	r1, [pc, #336]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800783c:	4313      	orrs	r3, r2
 800783e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d022      	beq.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 800784e:	4b4f      	ldr	r3, [pc, #316]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007854:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800785c:	494b      	ldr	r1, [pc, #300]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800785e:	4313      	orrs	r3, r2
 8007860:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800786c:	2301      	movs	r3, #1
 800786e:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007874:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007878:	d10c      	bne.n	8007894 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 800787a:	4b44      	ldr	r3, [pc, #272]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800787c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007880:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	3b01      	subs	r3, #1
 800788a:	021b      	lsls	r3, r3, #8
 800788c:	493f      	ldr	r1, [pc, #252]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800788e:	4313      	orrs	r3, r2
 8007890:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0308 	and.w	r3, r3, #8
 800789c:	2b00      	cmp	r3, #0
 800789e:	f000 808a 	beq.w	80079b6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80078a2:	2300      	movs	r3, #0
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	4b39      	ldr	r3, [pc, #228]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	4a38      	ldr	r2, [pc, #224]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80078ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078b0:	6413      	str	r3, [r2, #64]	; 0x40
 80078b2:	4b36      	ldr	r3, [pc, #216]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ba:	60fb      	str	r3, [r7, #12]
 80078bc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80078be:	4b34      	ldr	r3, [pc, #208]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a33      	ldr	r2, [pc, #204]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80078c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078c8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80078ca:	f7fb fed5 	bl	8003678 <HAL_GetTick>
 80078ce:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078d0:	e008      	b.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80078d2:	f7fb fed1 	bl	8003678 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	2b02      	cmp	r3, #2
 80078de:	d901      	bls.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 80078e0:	2303      	movs	r3, #3
 80078e2:	e1d1      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80078e4:	4b2a      	ldr	r3, [pc, #168]	; (8007990 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d0f0      	beq.n	80078d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80078f0:	4b26      	ldr	r3, [pc, #152]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 80078f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078f8:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d02f      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	429a      	cmp	r2, r3
 800790c:	d028      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800790e:	4b1f      	ldr	r3, [pc, #124]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007916:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007918:	4b1e      	ldr	r3, [pc, #120]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 800791a:	2201      	movs	r2, #1
 800791c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800791e:	4b1d      	ldr	r3, [pc, #116]	; (8007994 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8007920:	2200      	movs	r2, #0
 8007922:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007924:	4a19      	ldr	r2, [pc, #100]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007926:	697b      	ldr	r3, [r7, #20]
 8007928:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800792a:	4b18      	ldr	r3, [pc, #96]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 800792c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b01      	cmp	r3, #1
 8007934:	d114      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007936:	f7fb fe9f 	bl	8003678 <HAL_GetTick>
 800793a:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800793c:	e00a      	b.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800793e:	f7fb fe9b 	bl	8003678 <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	69bb      	ldr	r3, [r7, #24]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	f241 3288 	movw	r2, #5000	; 0x1388
 800794c:	4293      	cmp	r3, r2
 800794e:	d901      	bls.n	8007954 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e199      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007954:	4b0d      	ldr	r3, [pc, #52]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d0ee      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800796c:	d114      	bne.n	8007998 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 800796e:	4b07      	ldr	r3, [pc, #28]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800797e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007982:	4902      	ldr	r1, [pc, #8]	; (800798c <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8007984:	4313      	orrs	r3, r2
 8007986:	608b      	str	r3, [r1, #8]
 8007988:	e00c      	b.n	80079a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
 800798a:	bf00      	nop
 800798c:	40023800 	.word	0x40023800
 8007990:	40007000 	.word	0x40007000
 8007994:	42470e40 	.word	0x42470e40
 8007998:	4b89      	ldr	r3, [pc, #548]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	4a88      	ldr	r2, [pc, #544]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800799e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80079a2:	6093      	str	r3, [r2, #8]
 80079a4:	4b86      	ldr	r3, [pc, #536]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80079a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80079b0:	4983      	ldr	r1, [pc, #524]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80079b2:	4313      	orrs	r3, r2
 80079b4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 0304 	and.w	r3, r3, #4
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d004      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80079c8:	4b7e      	ldr	r3, [pc, #504]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 80079ca:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f003 0310 	and.w	r3, r3, #16
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00a      	beq.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80079d8:	4b79      	ldr	r3, [pc, #484]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80079da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e6:	4976      	ldr	r1, [pc, #472]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d011      	beq.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80079fa:	4b71      	ldr	r3, [pc, #452]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80079fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a00:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a08:	496d      	ldr	r1, [pc, #436]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a0a:	4313      	orrs	r3, r2
 8007a0c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a18:	d101      	bne.n	8007a1e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007a2a:	4b65      	ldr	r3, [pc, #404]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a30:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	4961      	ldr	r1, [pc, #388]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	d004      	beq.n	8007a50 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b80      	cmp	r3, #128	; 0x80
 8007a4c:	f040 80c6 	bne.w	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a50:	4b5d      	ldr	r3, [pc, #372]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007a52:	2200      	movs	r2, #0
 8007a54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a56:	f7fb fe0f 	bl	8003678 <HAL_GetTick>
 8007a5a:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007a5e:	f7fb fe0b 	bl	8003678 <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	69bb      	ldr	r3, [r7, #24]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e10b      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a70:	4b53      	ldr	r3, [pc, #332]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f0      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8007a7c:	4a53      	ldr	r2, [pc, #332]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a82:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f003 0301 	and.w	r3, r3, #1
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d003      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d023      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d003      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d019      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ac0:	d00e      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d019      	beq.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d115      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x386>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ade:	d110      	bne.n	8007b02 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	689b      	ldr	r3, [r3, #8]
 8007ae8:	019b      	lsls	r3, r3, #6
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	061b      	lsls	r3, r3, #24
 8007af2:	431a      	orrs	r2, r3
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
 8007af8:	071b      	lsls	r3, r3, #28
 8007afa:	4931      	ldr	r1, [pc, #196]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007afc:	4313      	orrs	r3, r2
 8007afe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d003      	beq.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d009      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d026      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d122      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007b2a:	4b25      	ldr	r3, [pc, #148]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b30:	0e1b      	lsrs	r3, r3, #24
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	685a      	ldr	r2, [r3, #4]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	019b      	lsls	r3, r3, #6
 8007b42:	431a      	orrs	r2, r3
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	061b      	lsls	r3, r3, #24
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	071b      	lsls	r3, r3, #28
 8007b50:	491b      	ldr	r1, [pc, #108]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8007b58:	4b19      	ldr	r3, [pc, #100]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b5e:	f023 021f 	bic.w	r2, r3, #31
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	3b01      	subs	r3, #1
 8007b68:	4915      	ldr	r1, [pc, #84]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d010      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	019b      	lsls	r3, r3, #6
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	061b      	lsls	r3, r3, #24
 8007b8e:	431a      	orrs	r2, r3
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	071b      	lsls	r3, r3, #28
 8007b96:	490a      	ldr	r1, [pc, #40]	; (8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007b98:	4313      	orrs	r3, r2
 8007b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007b9e:	4b0a      	ldr	r3, [pc, #40]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ba4:	f7fb fd68 	bl	8003678 <HAL_GetTick>
 8007ba8:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007baa:	e011      	b.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007bac:	f7fb fd64 	bl	8003678 <HAL_GetTick>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	1ad3      	subs	r3, r2, r3
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d90a      	bls.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007bba:	2303      	movs	r3, #3
 8007bbc:	e064      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007bbe:	bf00      	nop
 8007bc0:	40023800 	.word	0x40023800
 8007bc4:	424711e0 	.word	0x424711e0
 8007bc8:	42470068 	.word	0x42470068
 8007bcc:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007bd0:	4b2f      	ldr	r3, [pc, #188]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d0e7      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007be8:	4b29      	ldr	r3, [pc, #164]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007bea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf6:	4926      	ldr	r1, [pc, #152]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8007c0a:	4b21      	ldr	r3, [pc, #132]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c10:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c18:	491d      	ldr	r1, [pc, #116]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00a      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007c2c:	4b18      	ldr	r3, [pc, #96]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c32:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3a:	4915      	ldr	r1, [pc, #84]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8007c4e:	4b10      	ldr	r3, [pc, #64]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c54:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5c:	490c      	ldr	r1, [pc, #48]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00a      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c70:	4b07      	ldr	r3, [pc, #28]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c76:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7e:	4904      	ldr	r1, [pc, #16]	; (8007c90 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3720      	adds	r7, #32
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40023800 	.word	0x40023800

08007c94 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d004      	beq.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2b02      	cmp	r3, #2
 8007cb6:	f000 80a1 	beq.w	8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8007cba:	e13f      	b.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007cbc:	4ba3      	ldr	r3, [pc, #652]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc2:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007cc6:	60fb      	str	r3, [r7, #12]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007cce:	f000 8084 	beq.w	8007dda <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007cd8:	f200 808c 	bhi.w	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ce2:	d04f      	beq.n	8007d84 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cea:	f200 8083 	bhi.w	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d006      	beq.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007cfa:	d17b      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007cfc:	4b94      	ldr	r3, [pc, #592]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007cfe:	617b      	str	r3, [r7, #20]
          break;
 8007d00:	e07b      	b.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007d02:	4b92      	ldr	r3, [pc, #584]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d08:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d0c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d10:	d109      	bne.n	8007d26 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007d12:	4b8e      	ldr	r3, [pc, #568]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d1c:	4a8c      	ldr	r2, [pc, #560]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d22:	613b      	str	r3, [r7, #16]
 8007d24:	e019      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007d26:	4b89      	ldr	r3, [pc, #548]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d28:	685b      	ldr	r3, [r3, #4]
 8007d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d32:	d109      	bne.n	8007d48 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007d34:	4b85      	ldr	r3, [pc, #532]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d3e:	4a85      	ldr	r2, [pc, #532]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d44:	613b      	str	r3, [r7, #16]
 8007d46:	e008      	b.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007d48:	4b80      	ldr	r3, [pc, #512]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d52:	4a81      	ldr	r2, [pc, #516]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d58:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007d5a:	4b7c      	ldr	r3, [pc, #496]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d60:	099b      	lsrs	r3, r3, #6
 8007d62:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	fb02 f303 	mul.w	r3, r2, r3
 8007d6c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007d6e:	4b77      	ldr	r3, [pc, #476]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d74:	0f1b      	lsrs	r3, r3, #28
 8007d76:	f003 0307 	and.w	r3, r3, #7
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d80:	617b      	str	r3, [r7, #20]
          break;
 8007d82:	e03a      	b.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007d84:	4b71      	ldr	r3, [pc, #452]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d90:	d108      	bne.n	8007da4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007d92:	4b6e      	ldr	r3, [pc, #440]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007d94:	685b      	ldr	r3, [r3, #4]
 8007d96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007d9a:	4a6e      	ldr	r2, [pc, #440]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	e007      	b.n	8007db4 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007da4:	4b69      	ldr	r3, [pc, #420]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dac:	4a6a      	ldr	r2, [pc, #424]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007db4:	4b65      	ldr	r3, [pc, #404]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	099b      	lsrs	r3, r3, #6
 8007dba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	fb02 f303 	mul.w	r3, r2, r3
 8007dc4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007dc6:	4b61      	ldr	r3, [pc, #388]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	0f1b      	lsrs	r3, r3, #28
 8007dcc:	f003 0307 	and.w	r3, r3, #7
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd6:	617b      	str	r3, [r7, #20]
          break;
 8007dd8:	e00f      	b.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007dda:	4b5c      	ldr	r3, [pc, #368]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007ddc:	685b      	ldr	r3, [r3, #4]
 8007dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007de2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007de6:	d102      	bne.n	8007dee <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 8007de8:	4b5a      	ldr	r3, [pc, #360]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007dea:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007dec:	e005      	b.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8007dee:	4b5a      	ldr	r3, [pc, #360]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007df0:	617b      	str	r3, [r7, #20]
          break;
 8007df2:	e002      	b.n	8007dfa <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007df4:	2300      	movs	r3, #0
 8007df6:	617b      	str	r3, [r7, #20]
          break;
 8007df8:	bf00      	nop
        }
      }
      break;
 8007dfa:	e09f      	b.n	8007f3c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007dfc:	4b53      	ldr	r3, [pc, #332]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007dfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e02:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007e0e:	f000 8084 	beq.w	8007f1a <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007e18:	f200 808c 	bhi.w	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e22:	d04f      	beq.n	8007ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e2a:	f200 8083 	bhi.w	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d006      	beq.n	8007e42 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e3a:	d17b      	bne.n	8007f34 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007e3c:	4b44      	ldr	r3, [pc, #272]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e3e:	617b      	str	r3, [r7, #20]
          break;
 8007e40:	e07b      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007e42:	4b42      	ldr	r3, [pc, #264]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e50:	d109      	bne.n	8007e66 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007e52:	4b3e      	ldr	r3, [pc, #248]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007e54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e5c:	4a3c      	ldr	r2, [pc, #240]	; (8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007e5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e62:	613b      	str	r3, [r7, #16]
 8007e64:	e019      	b.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007e66:	4b39      	ldr	r3, [pc, #228]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e72:	d109      	bne.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007e74:	4b35      	ldr	r3, [pc, #212]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e7e:	4a35      	ldr	r2, [pc, #212]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e84:	613b      	str	r3, [r7, #16]
 8007e86:	e008      	b.n	8007e9a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007e88:	4b30      	ldr	r3, [pc, #192]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007e8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e92:	4a31      	ldr	r2, [pc, #196]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e98:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007e9a:	4b2c      	ldr	r3, [pc, #176]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007e9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ea0:	099b      	lsrs	r3, r3, #6
 8007ea2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ea6:	693b      	ldr	r3, [r7, #16]
 8007ea8:	fb02 f303 	mul.w	r3, r2, r3
 8007eac:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007eae:	4b27      	ldr	r3, [pc, #156]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb4:	0f1b      	lsrs	r3, r3, #28
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ec0:	617b      	str	r3, [r7, #20]
          break;
 8007ec2:	e03a      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007ec4:	4b21      	ldr	r3, [pc, #132]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ecc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ed0:	d108      	bne.n	8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ed2:	4b1e      	ldr	r3, [pc, #120]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eda:	4a1e      	ldr	r2, [pc, #120]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee0:	613b      	str	r3, [r7, #16]
 8007ee2:	e007      	b.n	8007ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007ee4:	4b19      	ldr	r3, [pc, #100]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007eec:	4a1a      	ldr	r2, [pc, #104]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ef2:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007ef4:	4b15      	ldr	r3, [pc, #84]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	099b      	lsrs	r3, r3, #6
 8007efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007efe:	693b      	ldr	r3, [r7, #16]
 8007f00:	fb02 f303 	mul.w	r3, r2, r3
 8007f04:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007f06:	4b11      	ldr	r3, [pc, #68]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	0f1b      	lsrs	r3, r3, #28
 8007f0c:	f003 0307 	and.w	r3, r3, #7
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f16:	617b      	str	r3, [r7, #20]
          break;
 8007f18:	e00f      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007f1a:	4b0c      	ldr	r3, [pc, #48]	; (8007f4c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007f1c:	685b      	ldr	r3, [r3, #4]
 8007f1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f26:	d102      	bne.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 8007f28:	4b0a      	ldr	r3, [pc, #40]	; (8007f54 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007f2a:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007f2c:	e005      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8007f2e:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007f30:	617b      	str	r3, [r7, #20]
          break;
 8007f32:	e002      	b.n	8007f3a <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007f34:	2300      	movs	r3, #0
 8007f36:	617b      	str	r3, [r7, #20]
          break;
 8007f38:	bf00      	nop
        }
      }
      break;
 8007f3a:	bf00      	nop
    }
  }
  return frequency;
 8007f3c:	697b      	ldr	r3, [r7, #20]
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	371c      	adds	r7, #28
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	40023800 	.word	0x40023800
 8007f50:	00bb8000 	.word	0x00bb8000
 8007f54:	017d7840 	.word	0x017d7840
 8007f58:	00f42400 	.word	0x00f42400

08007f5c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b086      	sub	sp, #24
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007f64:	2300      	movs	r3, #0
 8007f66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0301 	and.w	r3, r3, #1
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d075      	beq.n	8008060 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f74:	4b88      	ldr	r3, [pc, #544]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f003 030c 	and.w	r3, r3, #12
 8007f7c:	2b04      	cmp	r3, #4
 8007f7e:	d00c      	beq.n	8007f9a <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f80:	4b85      	ldr	r3, [pc, #532]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007f88:	2b08      	cmp	r3, #8
 8007f8a:	d112      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f8c:	4b82      	ldr	r3, [pc, #520]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f94:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f98:	d10b      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f9a:	4b7f      	ldr	r3, [pc, #508]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d05b      	beq.n	800805e <HAL_RCC_OscConfig+0x102>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d157      	bne.n	800805e <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e20a      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fba:	d106      	bne.n	8007fca <HAL_RCC_OscConfig+0x6e>
 8007fbc:	4b76      	ldr	r3, [pc, #472]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a75      	ldr	r2, [pc, #468]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007fc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	e01d      	b.n	8008006 <HAL_RCC_OscConfig+0xaa>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007fd2:	d10c      	bne.n	8007fee <HAL_RCC_OscConfig+0x92>
 8007fd4:	4b70      	ldr	r3, [pc, #448]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a6f      	ldr	r2, [pc, #444]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007fda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007fde:	6013      	str	r3, [r2, #0]
 8007fe0:	4b6d      	ldr	r3, [pc, #436]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a6c      	ldr	r2, [pc, #432]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007fea:	6013      	str	r3, [r2, #0]
 8007fec:	e00b      	b.n	8008006 <HAL_RCC_OscConfig+0xaa>
 8007fee:	4b6a      	ldr	r3, [pc, #424]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a69      	ldr	r2, [pc, #420]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007ff4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ff8:	6013      	str	r3, [r2, #0]
 8007ffa:	4b67      	ldr	r3, [pc, #412]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a66      	ldr	r2, [pc, #408]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8008000:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008004:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d013      	beq.n	8008036 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800800e:	f7fb fb33 	bl	8003678 <HAL_GetTick>
 8008012:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008014:	e008      	b.n	8008028 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008016:	f7fb fb2f 	bl	8003678 <HAL_GetTick>
 800801a:	4602      	mov	r2, r0
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	2b64      	cmp	r3, #100	; 0x64
 8008022:	d901      	bls.n	8008028 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e1cf      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008028:	4b5b      	ldr	r3, [pc, #364]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0f0      	beq.n	8008016 <HAL_RCC_OscConfig+0xba>
 8008034:	e014      	b.n	8008060 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008036:	f7fb fb1f 	bl	8003678 <HAL_GetTick>
 800803a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800803c:	e008      	b.n	8008050 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800803e:	f7fb fb1b 	bl	8003678 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	693b      	ldr	r3, [r7, #16]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b64      	cmp	r3, #100	; 0x64
 800804a:	d901      	bls.n	8008050 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e1bb      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008050:	4b51      	ldr	r3, [pc, #324]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008058:	2b00      	cmp	r3, #0
 800805a:	d1f0      	bne.n	800803e <HAL_RCC_OscConfig+0xe2>
 800805c:	e000      	b.n	8008060 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800805e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0302 	and.w	r3, r3, #2
 8008068:	2b00      	cmp	r3, #0
 800806a:	d063      	beq.n	8008134 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800806c:	4b4a      	ldr	r3, [pc, #296]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 030c 	and.w	r3, r3, #12
 8008074:	2b00      	cmp	r3, #0
 8008076:	d00b      	beq.n	8008090 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008078:	4b47      	ldr	r3, [pc, #284]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 800807a:	689b      	ldr	r3, [r3, #8]
 800807c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008080:	2b08      	cmp	r3, #8
 8008082:	d11c      	bne.n	80080be <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008084:	4b44      	ldr	r3, [pc, #272]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d116      	bne.n	80080be <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008090:	4b41      	ldr	r3, [pc, #260]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 0302 	and.w	r3, r3, #2
 8008098:	2b00      	cmp	r3, #0
 800809a:	d005      	beq.n	80080a8 <HAL_RCC_OscConfig+0x14c>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e18f      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080a8:	4b3b      	ldr	r3, [pc, #236]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	691b      	ldr	r3, [r3, #16]
 80080b4:	00db      	lsls	r3, r3, #3
 80080b6:	4938      	ldr	r1, [pc, #224]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 80080b8:	4313      	orrs	r3, r2
 80080ba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80080bc:	e03a      	b.n	8008134 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d020      	beq.n	8008108 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80080c6:	4b35      	ldr	r3, [pc, #212]	; (800819c <HAL_RCC_OscConfig+0x240>)
 80080c8:	2201      	movs	r2, #1
 80080ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080cc:	f7fb fad4 	bl	8003678 <HAL_GetTick>
 80080d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080d2:	e008      	b.n	80080e6 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080d4:	f7fb fad0 	bl	8003678 <HAL_GetTick>
 80080d8:	4602      	mov	r2, r0
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	1ad3      	subs	r3, r2, r3
 80080de:	2b02      	cmp	r3, #2
 80080e0:	d901      	bls.n	80080e6 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80080e2:	2303      	movs	r3, #3
 80080e4:	e170      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080e6:	4b2c      	ldr	r3, [pc, #176]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	f003 0302 	and.w	r3, r3, #2
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d0f0      	beq.n	80080d4 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080f2:	4b29      	ldr	r3, [pc, #164]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	691b      	ldr	r3, [r3, #16]
 80080fe:	00db      	lsls	r3, r3, #3
 8008100:	4925      	ldr	r1, [pc, #148]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 8008102:	4313      	orrs	r3, r2
 8008104:	600b      	str	r3, [r1, #0]
 8008106:	e015      	b.n	8008134 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008108:	4b24      	ldr	r3, [pc, #144]	; (800819c <HAL_RCC_OscConfig+0x240>)
 800810a:	2200      	movs	r2, #0
 800810c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800810e:	f7fb fab3 	bl	8003678 <HAL_GetTick>
 8008112:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008114:	e008      	b.n	8008128 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008116:	f7fb faaf 	bl	8003678 <HAL_GetTick>
 800811a:	4602      	mov	r2, r0
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	1ad3      	subs	r3, r2, r3
 8008120:	2b02      	cmp	r3, #2
 8008122:	d901      	bls.n	8008128 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008124:	2303      	movs	r3, #3
 8008126:	e14f      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008128:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 0302 	and.w	r3, r3, #2
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1f0      	bne.n	8008116 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0308 	and.w	r3, r3, #8
 800813c:	2b00      	cmp	r3, #0
 800813e:	d037      	beq.n	80081b0 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d016      	beq.n	8008176 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008148:	4b15      	ldr	r3, [pc, #84]	; (80081a0 <HAL_RCC_OscConfig+0x244>)
 800814a:	2201      	movs	r2, #1
 800814c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800814e:	f7fb fa93 	bl	8003678 <HAL_GetTick>
 8008152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008154:	e008      	b.n	8008168 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008156:	f7fb fa8f 	bl	8003678 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d901      	bls.n	8008168 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e12f      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008168:	4b0b      	ldr	r3, [pc, #44]	; (8008198 <HAL_RCC_OscConfig+0x23c>)
 800816a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800816c:	f003 0302 	and.w	r3, r3, #2
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0f0      	beq.n	8008156 <HAL_RCC_OscConfig+0x1fa>
 8008174:	e01c      	b.n	80081b0 <HAL_RCC_OscConfig+0x254>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008176:	4b0a      	ldr	r3, [pc, #40]	; (80081a0 <HAL_RCC_OscConfig+0x244>)
 8008178:	2200      	movs	r2, #0
 800817a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800817c:	f7fb fa7c 	bl	8003678 <HAL_GetTick>
 8008180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008182:	e00f      	b.n	80081a4 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008184:	f7fb fa78 	bl	8003678 <HAL_GetTick>
 8008188:	4602      	mov	r2, r0
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	2b02      	cmp	r3, #2
 8008190:	d908      	bls.n	80081a4 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 8008192:	2303      	movs	r3, #3
 8008194:	e118      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
 8008196:	bf00      	nop
 8008198:	40023800 	.word	0x40023800
 800819c:	42470000 	.word	0x42470000
 80081a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80081a4:	4b8a      	ldr	r3, [pc, #552]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80081a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80081a8:	f003 0302 	and.w	r3, r3, #2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1e9      	bne.n	8008184 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f003 0304 	and.w	r3, r3, #4
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 8097 	beq.w	80082ec <HAL_RCC_OscConfig+0x390>
  {
    FlagStatus       pwrclkchanged = RESET;
 80081be:	2300      	movs	r3, #0
 80081c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80081c2:	4b83      	ldr	r3, [pc, #524]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d10f      	bne.n	80081ee <HAL_RCC_OscConfig+0x292>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80081ce:	2300      	movs	r3, #0
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	4b7f      	ldr	r3, [pc, #508]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80081d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d6:	4a7e      	ldr	r2, [pc, #504]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80081d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081dc:	6413      	str	r3, [r2, #64]	; 0x40
 80081de:	4b7c      	ldr	r3, [pc, #496]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80081e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081e6:	60fb      	str	r3, [r7, #12]
 80081e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80081ea:	2301      	movs	r3, #1
 80081ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ee:	4b79      	ldr	r3, [pc, #484]	; (80083d4 <HAL_RCC_OscConfig+0x478>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d118      	bne.n	800822c <HAL_RCC_OscConfig+0x2d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80081fa:	4b76      	ldr	r3, [pc, #472]	; (80083d4 <HAL_RCC_OscConfig+0x478>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a75      	ldr	r2, [pc, #468]	; (80083d4 <HAL_RCC_OscConfig+0x478>)
 8008200:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008204:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008206:	f7fb fa37 	bl	8003678 <HAL_GetTick>
 800820a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800820c:	e008      	b.n	8008220 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800820e:	f7fb fa33 	bl	8003678 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	2b02      	cmp	r3, #2
 800821a:	d901      	bls.n	8008220 <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 800821c:	2303      	movs	r3, #3
 800821e:	e0d3      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008220:	4b6c      	ldr	r3, [pc, #432]	; (80083d4 <HAL_RCC_OscConfig+0x478>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008228:	2b00      	cmp	r3, #0
 800822a:	d0f0      	beq.n	800820e <HAL_RCC_OscConfig+0x2b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	2b01      	cmp	r3, #1
 8008232:	d106      	bne.n	8008242 <HAL_RCC_OscConfig+0x2e6>
 8008234:	4b66      	ldr	r3, [pc, #408]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 8008236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008238:	4a65      	ldr	r2, [pc, #404]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 800823a:	f043 0301 	orr.w	r3, r3, #1
 800823e:	6713      	str	r3, [r2, #112]	; 0x70
 8008240:	e01c      	b.n	800827c <HAL_RCC_OscConfig+0x320>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	2b05      	cmp	r3, #5
 8008248:	d10c      	bne.n	8008264 <HAL_RCC_OscConfig+0x308>
 800824a:	4b61      	ldr	r3, [pc, #388]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	4a60      	ldr	r2, [pc, #384]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 8008250:	f043 0304 	orr.w	r3, r3, #4
 8008254:	6713      	str	r3, [r2, #112]	; 0x70
 8008256:	4b5e      	ldr	r3, [pc, #376]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 8008258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825a:	4a5d      	ldr	r2, [pc, #372]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 800825c:	f043 0301 	orr.w	r3, r3, #1
 8008260:	6713      	str	r3, [r2, #112]	; 0x70
 8008262:	e00b      	b.n	800827c <HAL_RCC_OscConfig+0x320>
 8008264:	4b5a      	ldr	r3, [pc, #360]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 8008266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008268:	4a59      	ldr	r2, [pc, #356]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 800826a:	f023 0301 	bic.w	r3, r3, #1
 800826e:	6713      	str	r3, [r2, #112]	; 0x70
 8008270:	4b57      	ldr	r3, [pc, #348]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 8008272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008274:	4a56      	ldr	r2, [pc, #344]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 8008276:	f023 0304 	bic.w	r3, r3, #4
 800827a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d015      	beq.n	80082b0 <HAL_RCC_OscConfig+0x354>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008284:	f7fb f9f8 	bl	8003678 <HAL_GetTick>
 8008288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800828a:	e00a      	b.n	80082a2 <HAL_RCC_OscConfig+0x346>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800828c:	f7fb f9f4 	bl	8003678 <HAL_GetTick>
 8008290:	4602      	mov	r2, r0
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	1ad3      	subs	r3, r2, r3
 8008296:	f241 3288 	movw	r2, #5000	; 0x1388
 800829a:	4293      	cmp	r3, r2
 800829c:	d901      	bls.n	80082a2 <HAL_RCC_OscConfig+0x346>
        {
          return HAL_TIMEOUT;
 800829e:	2303      	movs	r3, #3
 80082a0:	e092      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80082a2:	4b4b      	ldr	r3, [pc, #300]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80082a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082a6:	f003 0302 	and.w	r3, r3, #2
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d0ee      	beq.n	800828c <HAL_RCC_OscConfig+0x330>
 80082ae:	e014      	b.n	80082da <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082b0:	f7fb f9e2 	bl	8003678 <HAL_GetTick>
 80082b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082b6:	e00a      	b.n	80082ce <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80082b8:	f7fb f9de 	bl	8003678 <HAL_GetTick>
 80082bc:	4602      	mov	r2, r0
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d901      	bls.n	80082ce <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 80082ca:	2303      	movs	r3, #3
 80082cc:	e07c      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80082ce:	4b40      	ldr	r3, [pc, #256]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80082d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d1ee      	bne.n	80082b8 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80082da:	7dfb      	ldrb	r3, [r7, #23]
 80082dc:	2b01      	cmp	r3, #1
 80082de:	d105      	bne.n	80082ec <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082e0:	4b3b      	ldr	r3, [pc, #236]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80082e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e4:	4a3a      	ldr	r2, [pc, #232]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80082e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	699b      	ldr	r3, [r3, #24]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d068      	beq.n	80083c6 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082f4:	4b36      	ldr	r3, [pc, #216]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f003 030c 	and.w	r3, r3, #12
 80082fc:	2b08      	cmp	r3, #8
 80082fe:	d060      	beq.n	80083c2 <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	699b      	ldr	r3, [r3, #24]
 8008304:	2b02      	cmp	r3, #2
 8008306:	d145      	bne.n	8008394 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008308:	4b33      	ldr	r3, [pc, #204]	; (80083d8 <HAL_RCC_OscConfig+0x47c>)
 800830a:	2200      	movs	r2, #0
 800830c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800830e:	f7fb f9b3 	bl	8003678 <HAL_GetTick>
 8008312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008314:	e008      	b.n	8008328 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008316:	f7fb f9af 	bl	8003678 <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	693b      	ldr	r3, [r7, #16]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e04f      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008328:	4b29      	ldr	r3, [pc, #164]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d1f0      	bne.n	8008316 <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	69da      	ldr	r2, [r3, #28]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	431a      	orrs	r2, r3
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008342:	019b      	lsls	r3, r3, #6
 8008344:	431a      	orrs	r2, r3
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834a:	085b      	lsrs	r3, r3, #1
 800834c:	3b01      	subs	r3, #1
 800834e:	041b      	lsls	r3, r3, #16
 8008350:	431a      	orrs	r2, r3
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008356:	061b      	lsls	r3, r3, #24
 8008358:	431a      	orrs	r2, r3
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	071b      	lsls	r3, r3, #28
 8008360:	491b      	ldr	r1, [pc, #108]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 8008362:	4313      	orrs	r3, r2
 8008364:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008366:	4b1c      	ldr	r3, [pc, #112]	; (80083d8 <HAL_RCC_OscConfig+0x47c>)
 8008368:	2201      	movs	r2, #1
 800836a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800836c:	f7fb f984 	bl	8003678 <HAL_GetTick>
 8008370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008372:	e008      	b.n	8008386 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008374:	f7fb f980 	bl	8003678 <HAL_GetTick>
 8008378:	4602      	mov	r2, r0
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	1ad3      	subs	r3, r2, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d901      	bls.n	8008386 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008382:	2303      	movs	r3, #3
 8008384:	e020      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008386:	4b12      	ldr	r3, [pc, #72]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0f0      	beq.n	8008374 <HAL_RCC_OscConfig+0x418>
 8008392:	e018      	b.n	80083c6 <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008394:	4b10      	ldr	r3, [pc, #64]	; (80083d8 <HAL_RCC_OscConfig+0x47c>)
 8008396:	2200      	movs	r2, #0
 8008398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800839a:	f7fb f96d 	bl	8003678 <HAL_GetTick>
 800839e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083a0:	e008      	b.n	80083b4 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80083a2:	f7fb f969 	bl	8003678 <HAL_GetTick>
 80083a6:	4602      	mov	r2, r0
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	1ad3      	subs	r3, r2, r3
 80083ac:	2b02      	cmp	r3, #2
 80083ae:	d901      	bls.n	80083b4 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80083b0:	2303      	movs	r3, #3
 80083b2:	e009      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083b4:	4b06      	ldr	r3, [pc, #24]	; (80083d0 <HAL_RCC_OscConfig+0x474>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d1f0      	bne.n	80083a2 <HAL_RCC_OscConfig+0x446>
 80083c0:	e001      	b.n	80083c6 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	40023800 	.word	0x40023800
 80083d4:	40007000 	.word	0x40007000
 80083d8:	42470060 	.word	0x42470060

080083dc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b082      	sub	sp, #8
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e022      	b.n	8008434 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d105      	bne.n	8008406 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2200      	movs	r2, #0
 80083fe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f7f9 fb3d 	bl	8001a80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	2203      	movs	r2, #3
 800840a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 f814 	bl	800843c <HAL_SD_InitCard>
 8008414:	4603      	mov	r3, r0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	e00a      	b.n	8008434 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2201      	movs	r2, #1
 800842e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800843c:	b5b0      	push	{r4, r5, r7, lr}
 800843e:	b08e      	sub	sp, #56	; 0x38
 8008440:	af04      	add	r7, sp, #16
 8008442:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8008444:	2300      	movs	r3, #0
 8008446:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800844c:	2300      	movs	r3, #0
 800844e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8008450:	2300      	movs	r3, #0
 8008452:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8008454:	2300      	movs	r3, #0
 8008456:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8008458:	2376      	movs	r3, #118	; 0x76
 800845a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681d      	ldr	r5, [r3, #0]
 8008460:	466c      	mov	r4, sp
 8008462:	f107 0314 	add.w	r3, r7, #20
 8008466:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800846a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800846e:	f107 0308 	add.w	r3, r7, #8
 8008472:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008474:	4628      	mov	r0, r5
 8008476:	f002 fb5b 	bl	800ab30 <SDIO_Init>
 800847a:	4603      	mov	r3, r0
 800847c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008484:	2b00      	cmp	r3, #0
 8008486:	d001      	beq.n	800848c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008488:	2301      	movs	r3, #1
 800848a:	e031      	b.n	80084f0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800848c:	4b1a      	ldr	r3, [pc, #104]	; (80084f8 <HAL_SD_InitCard+0xbc>)
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f002 fb93 	bl	800abc2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800849c:	4b16      	ldr	r3, [pc, #88]	; (80084f8 <HAL_SD_InitCard+0xbc>)
 800849e:	2201      	movs	r2, #1
 80084a0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80084a2:	6878      	ldr	r0, [r7, #4]
 80084a4:	f000 ffc6 	bl	8009434 <SD_PowerON>
 80084a8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084aa:	6a3b      	ldr	r3, [r7, #32]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00b      	beq.n	80084c8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084bc:	6a3b      	ldr	r3, [r7, #32]
 80084be:	431a      	orrs	r2, r3
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	e013      	b.n	80084f0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fee5 	bl	8009298 <SD_InitCard>
 80084ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e000      	b.n	80084f0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	3728      	adds	r7, #40	; 0x28
 80084f4:	46bd      	mov	sp, r7
 80084f6:	bdb0      	pop	{r4, r5, r7, pc}
 80084f8:	422580a0 	.word	0x422580a0

080084fc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b08c      	sub	sp, #48	; 0x30
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
 8008508:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d107      	bne.n	8008524 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008518:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e0c7      	b.n	80086b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800852a:	b2db      	uxtb	r3, r3
 800852c:	2b01      	cmp	r3, #1
 800852e:	f040 80c0 	bne.w	80086b2 <HAL_SD_ReadBlocks_DMA+0x1b6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	441a      	add	r2, r3
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008542:	429a      	cmp	r2, r3
 8008544:	d907      	bls.n	8008556 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e0ae      	b.n	80086b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2203      	movs	r2, #3
 800855a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2200      	movs	r2, #0
 8008564:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008574:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	4a50      	ldr	r2, [pc, #320]	; (80086bc <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800857c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008582:	4a4f      	ldr	r2, [pc, #316]	; (80086c0 <HAL_SD_ReadBlocks_DMA+0x1c4>)
 8008584:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858a:	2200      	movs	r2, #0
 800858c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3380      	adds	r3, #128	; 0x80
 8008598:	4619      	mov	r1, r3
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	025b      	lsls	r3, r3, #9
 80085a0:	089b      	lsrs	r3, r3, #2
 80085a2:	f7fb ff1b 	bl	80043dc <HAL_DMA_Start_IT>
 80085a6:	4603      	mov	r3, r0
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d017      	beq.n	80085dc <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80085ba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a40      	ldr	r2, [pc, #256]	; (80086c4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 80085c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80085d8:	2301      	movs	r3, #1
 80085da:	e06b      	b.n	80086b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80085dc:	4b3a      	ldr	r3, [pc, #232]	; (80086c8 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 80085de:	2201      	movs	r2, #1
 80085e0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d002      	beq.n	80085f0 <HAL_SD_ReadBlocks_DMA+0xf4>
      {
        add *= 512U;
 80085ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ec:	025b      	lsls	r3, r3, #9
 80085ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 fb75 	bl	800ace8 <SDMMC_CmdBlockLength>
 80085fe:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 8008600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008602:	2b00      	cmp	r3, #0
 8008604:	d00f      	beq.n	8008626 <HAL_SD_ReadBlocks_DMA+0x12a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	4a2e      	ldr	r2, [pc, #184]	; (80086c4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800860c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008614:	431a      	orrs	r2, r3
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e046      	b.n	80086b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008626:	f04f 33ff 	mov.w	r3, #4294967295
 800862a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	025b      	lsls	r3, r3, #9
 8008630:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008632:	2390      	movs	r3, #144	; 0x90
 8008634:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008636:	2302      	movs	r3, #2
 8008638:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800863a:	2300      	movs	r3, #0
 800863c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800863e:	2301      	movs	r3, #1
 8008640:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f107 0210 	add.w	r2, r7, #16
 800864a:	4611      	mov	r1, r2
 800864c:	4618      	mov	r0, r3
 800864e:	f002 fb1f 	bl	800ac90 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d90a      	bls.n	800866e <HAL_SD_ReadBlocks_DMA+0x172>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2282      	movs	r2, #130	; 0x82
 800865c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008664:	4618      	mov	r0, r3
 8008666:	f002 fb83 	bl	800ad70 <SDMMC_CmdReadMultiBlock>
 800866a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800866c:	e009      	b.n	8008682 <HAL_SD_ReadBlocks_DMA+0x186>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	2281      	movs	r2, #129	; 0x81
 8008672:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800867a:	4618      	mov	r0, r3
 800867c:	f002 fb56 	bl	800ad2c <SDMMC_CmdReadSingleBlock>
 8008680:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d012      	beq.n	80086ae <HAL_SD_ReadBlocks_DMA+0x1b2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a0d      	ldr	r2, [pc, #52]	; (80086c4 <HAL_SD_ReadBlocks_DMA+0x1c8>)
 800868e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008696:	431a      	orrs	r2, r3
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80086aa:	2301      	movs	r3, #1
 80086ac:	e002      	b.n	80086b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
      }

      return HAL_OK;
 80086ae:	2300      	movs	r3, #0
 80086b0:	e000      	b.n	80086b4 <HAL_SD_ReadBlocks_DMA+0x1b8>
    }
  }
  else
  {
    return HAL_BUSY;
 80086b2:	2302      	movs	r3, #2
  }
}
 80086b4:	4618      	mov	r0, r3
 80086b6:	3730      	adds	r7, #48	; 0x30
 80086b8:	46bd      	mov	sp, r7
 80086ba:	bd80      	pop	{r7, pc}
 80086bc:	080090a7 	.word	0x080090a7
 80086c0:	08009119 	.word	0x08009119
 80086c4:	004005ff 	.word	0x004005ff
 80086c8:	4225858c 	.word	0x4225858c

080086cc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b08c      	sub	sp, #48	; 0x30
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
 80086d8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d107      	bne.n	80086f4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e0ca      	b.n	800888a <HAL_SD_WriteBlocks_DMA+0x1be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80086fa:	b2db      	uxtb	r3, r3
 80086fc:	2b01      	cmp	r3, #1
 80086fe:	f040 80c3 	bne.w	8008888 <HAL_SD_WriteBlocks_DMA+0x1bc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2200      	movs	r2, #0
 8008706:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	441a      	add	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008712:	429a      	cmp	r2, r3
 8008714:	d907      	bls.n	8008726 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800871a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008722:	2301      	movs	r3, #1
 8008724:	e0b1      	b.n	800888a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2203      	movs	r2, #3
 800872a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	2200      	movs	r2, #0
 8008734:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f042 021a 	orr.w	r2, r2, #26
 8008744:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800874a:	4a52      	ldr	r2, [pc, #328]	; (8008894 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800874c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008752:	4a51      	ldr	r2, [pc, #324]	; (8008898 <HAL_SD_WriteBlocks_DMA+0x1cc>)
 8008754:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800875a:	2200      	movs	r2, #0
 800875c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008762:	2b01      	cmp	r3, #1
 8008764:	d002      	beq.n	800876c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	025b      	lsls	r3, r3, #9
 800876a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008774:	4618      	mov	r0, r3
 8008776:	f002 fab7 	bl	800ace8 <SDMMC_CmdBlockLength>
 800877a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800877c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800877e:	2b00      	cmp	r3, #0
 8008780:	d00f      	beq.n	80087a2 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a45      	ldr	r2, [pc, #276]	; (800889c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008788:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	431a      	orrs	r2, r3
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2201      	movs	r2, #1
 800879a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e073      	b.n	800888a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b01      	cmp	r3, #1
 80087a6:	d90a      	bls.n	80087be <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	22a0      	movs	r2, #160	; 0xa0
 80087ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087b4:	4618      	mov	r0, r3
 80087b6:	f002 fb1f 	bl	800adf8 <SDMMC_CmdWriteMultiBlock>
 80087ba:	62f8      	str	r0, [r7, #44]	; 0x2c
 80087bc:	e009      	b.n	80087d2 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2290      	movs	r2, #144	; 0x90
 80087c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80087ca:	4618      	mov	r0, r3
 80087cc:	f002 faf2 	bl	800adb4 <SDMMC_CmdWriteSingleBlock>
 80087d0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80087d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d012      	beq.n	80087fe <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a2f      	ldr	r2, [pc, #188]	; (800889c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 80087de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087e6:	431a      	orrs	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2200      	movs	r2, #0
 80087f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087fa:	2301      	movs	r3, #1
 80087fc:	e045      	b.n	800888a <HAL_SD_WriteBlocks_DMA+0x1be>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80087fe:	4b28      	ldr	r3, [pc, #160]	; (80088a0 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 8008800:	2201      	movs	r2, #1
 8008802:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008808:	68b9      	ldr	r1, [r7, #8]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	3380      	adds	r3, #128	; 0x80
 8008810:	461a      	mov	r2, r3
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	025b      	lsls	r3, r3, #9
 8008816:	089b      	lsrs	r3, r3, #2
 8008818:	f7fb fde0 	bl	80043dc <HAL_DMA_Start_IT>
 800881c:	4603      	mov	r3, r0
 800881e:	2b00      	cmp	r3, #0
 8008820:	d01a      	beq.n	8008858 <HAL_SD_WriteBlocks_DMA+0x18c>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f022 021a 	bic.w	r2, r2, #26
 8008830:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a19      	ldr	r2, [pc, #100]	; (800889c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 8008838:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2200      	movs	r2, #0
 8008852:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008854:	2301      	movs	r3, #1
 8008856:	e018      	b.n	800888a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008858:	f04f 33ff 	mov.w	r3, #4294967295
 800885c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	025b      	lsls	r3, r3, #9
 8008862:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8008864:	2390      	movs	r3, #144	; 0x90
 8008866:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8008868:	2300      	movs	r3, #0
 800886a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800886c:	2300      	movs	r3, #0
 800886e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8008870:	2301      	movs	r3, #1
 8008872:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f107 0210 	add.w	r2, r7, #16
 800887c:	4611      	mov	r1, r2
 800887e:	4618      	mov	r0, r3
 8008880:	f002 fa06 	bl	800ac90 <SDIO_ConfigData>

      return HAL_OK;
 8008884:	2300      	movs	r3, #0
 8008886:	e000      	b.n	800888a <HAL_SD_WriteBlocks_DMA+0x1be>
    }
  }
  else
  {
    return HAL_BUSY;
 8008888:	2302      	movs	r3, #2
  }
}
 800888a:	4618      	mov	r0, r3
 800888c:	3730      	adds	r7, #48	; 0x30
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}
 8008892:	bf00      	nop
 8008894:	0800907d 	.word	0x0800907d
 8008898:	08009119 	.word	0x08009119
 800889c:	004005ff 	.word	0x004005ff
 80088a0:	4225858c 	.word	0x4225858c

080088a4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b084      	sub	sp, #16
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088b0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d008      	beq.n	80088d2 <HAL_SD_IRQHandler+0x2e>
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f003 0308 	and.w	r3, r3, #8
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d003      	beq.n	80088d2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f000 ffc8 	bl	8009860 <SD_Read_IT>
 80088d0:	e155      	b.n	8008b7e <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 808f 	beq.w	8008a00 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	6812      	ldr	r2, [r2, #0]
 80088f6:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 80088fa:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80088fe:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f022 0201 	bic.w	r2, r2, #1
 800890e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f003 0308 	and.w	r3, r3, #8
 8008916:	2b00      	cmp	r3, #0
 8008918:	d039      	beq.n	800898e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f003 0302 	and.w	r3, r3, #2
 8008920:	2b00      	cmp	r3, #0
 8008922:	d104      	bne.n	800892e <HAL_SD_IRQHandler+0x8a>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f003 0320 	and.w	r3, r3, #32
 800892a:	2b00      	cmp	r3, #0
 800892c:	d011      	beq.n	8008952 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f002 fa82 	bl	800ae3c <SDMMC_CmdStopTransfer>
 8008938:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d008      	beq.n	8008952 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f000 f91f 	bl	8008b90 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f240 523a 	movw	r2, #1338	; 0x53a
 800895a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2200      	movs	r2, #0
 8008968:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	f003 0301 	and.w	r3, r3, #1
 8008970:	2b00      	cmp	r3, #0
 8008972:	d104      	bne.n	800897e <HAL_SD_IRQHandler+0xda>
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7fa fe32 	bl	80035e8 <HAL_SD_RxCpltCallback>
 8008984:	e0fb      	b.n	8008b7e <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fa fe24 	bl	80035d4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800898c:	e0f7      	b.n	8008b7e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80f2 	beq.w	8008b7e <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d011      	beq.n	80089c8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4618      	mov	r0, r3
 80089aa:	f002 fa47 	bl	800ae3c <SDMMC_CmdStopTransfer>
 80089ae:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d008      	beq.n	80089c8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	431a      	orrs	r2, r3
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 f8e4 	bl	8008b90 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 80d5 	bne.w	8008b7e <HAL_SD_IRQHandler+0x2da>
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f003 0302 	and.w	r3, r3, #2
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f040 80cf 	bne.w	8008b7e <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0208 	bic.w	r2, r2, #8
 80089ee:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80089f8:	6878      	ldr	r0, [r7, #4]
 80089fa:	f7fa fdeb 	bl	80035d4 <HAL_SD_TxCpltCallback>
}
 80089fe:	e0be      	b.n	8008b7e <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d008      	beq.n	8008a20 <HAL_SD_IRQHandler+0x17c>
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f003 0308 	and.w	r3, r3, #8
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d003      	beq.n	8008a20 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 ff72 	bl	8009902 <SD_Write_IT>
 8008a1e:	e0ae      	b.n	8008b7e <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a26:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	f000 80a7 	beq.w	8008b7e <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a36:	f003 0302 	and.w	r3, r3, #2
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d005      	beq.n	8008a4a <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	f043 0202 	orr.w	r2, r3, #2
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a50:	f003 0308 	and.w	r3, r3, #8
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d005      	beq.n	8008a64 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5c:	f043 0208 	orr.w	r2, r3, #8
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a6a:	f003 0320 	and.w	r3, r3, #32
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d005      	beq.n	8008a7e <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a76:	f043 0220 	orr.w	r2, r3, #32
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d005      	beq.n	8008a98 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a90:	f043 0210 	orr.w	r2, r3, #16
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008aa0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008ab0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f002 f9c0 	bl	800ae3c <SDMMC_CmdStopTransfer>
 8008abc:	4602      	mov	r2, r0
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac2:	431a      	orrs	r2, r3
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f003 0308 	and.w	r3, r3, #8
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f000 f855 	bl	8008b90 <HAL_SD_ErrorCallback>
}
 8008ae6:	e04a      	b.n	8008b7e <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d045      	beq.n	8008b7e <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f003 0310 	and.w	r3, r3, #16
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d104      	bne.n	8008b06 <HAL_SD_IRQHandler+0x262>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d011      	beq.n	8008b2a <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b0a:	4a1f      	ldr	r2, [pc, #124]	; (8008b88 <HAL_SD_IRQHandler+0x2e4>)
 8008b0c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b12:	4618      	mov	r0, r3
 8008b14:	f7fb fcba 	bl	800448c <HAL_DMA_Abort_IT>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d02f      	beq.n	8008b7e <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fb4a 	bl	80091bc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008b28:	e029      	b.n	8008b7e <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f003 0301 	and.w	r3, r3, #1
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d104      	bne.n	8008b3e <HAL_SD_IRQHandler+0x29a>
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f003 0302 	and.w	r3, r3, #2
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d011      	beq.n	8008b62 <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b42:	4a12      	ldr	r2, [pc, #72]	; (8008b8c <HAL_SD_IRQHandler+0x2e8>)
 8008b44:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fb fc9e 	bl	800448c <HAL_DMA_Abort_IT>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d013      	beq.n	8008b7e <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fb65 	bl	800922a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008b60:	e00d      	b.n	8008b7e <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2200      	movs	r2, #0
 8008b66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7fa fd22 	bl	80035c0 <HAL_SD_AbortCallback>
}
 8008b7c:	e7ff      	b.n	8008b7e <HAL_SD_IRQHandler+0x2da>
 8008b7e:	bf00      	nop
 8008b80:	3710      	adds	r7, #16
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	080091bd 	.word	0x080091bd
 8008b8c:	0800922b 	.word	0x0800922b

08008b90 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b083      	sub	sp, #12
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008b98:	bf00      	nop
 8008b9a:	370c      	adds	r7, #12
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr

08008ba4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bb2:	0f9b      	lsrs	r3, r3, #30
 8008bb4:	b2da      	uxtb	r2, r3
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bbe:	0e9b      	lsrs	r3, r3, #26
 8008bc0:	b2db      	uxtb	r3, r3
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bd0:	0e1b      	lsrs	r3, r3, #24
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be2:	0c1b      	lsrs	r3, r3, #16
 8008be4:	b2da      	uxtb	r2, r3
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bee:	0a1b      	lsrs	r3, r3, #8
 8008bf0:	b2da      	uxtb	r2, r3
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bfa:	b2da      	uxtb	r2, r3
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c04:	0d1b      	lsrs	r3, r3, #20
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c10:	0c1b      	lsrs	r3, r3, #16
 8008c12:	b2db      	uxtb	r3, r3
 8008c14:	f003 030f 	and.w	r3, r3, #15
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c22:	0bdb      	lsrs	r3, r3, #15
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	f003 0301 	and.w	r3, r3, #1
 8008c2a:	b2da      	uxtb	r2, r3
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c34:	0b9b      	lsrs	r3, r3, #14
 8008c36:	b2db      	uxtb	r3, r3
 8008c38:	f003 0301 	and.w	r3, r3, #1
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c46:	0b5b      	lsrs	r3, r3, #13
 8008c48:	b2db      	uxtb	r3, r3
 8008c4a:	f003 0301 	and.w	r3, r3, #1
 8008c4e:	b2da      	uxtb	r2, r3
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c58:	0b1b      	lsrs	r3, r3, #12
 8008c5a:	b2db      	uxtb	r3, r3
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	b2da      	uxtb	r2, r3
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d163      	bne.n	8008d3c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c78:	009a      	lsls	r2, r3, #2
 8008c7a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008c7e:	4013      	ands	r3, r2
 8008c80:	687a      	ldr	r2, [r7, #4]
 8008c82:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008c84:	0f92      	lsrs	r2, r2, #30
 8008c86:	431a      	orrs	r2, r3
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c90:	0edb      	lsrs	r3, r3, #27
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	f003 0307 	and.w	r3, r3, #7
 8008c98:	b2da      	uxtb	r2, r3
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ca2:	0e1b      	lsrs	r3, r3, #24
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f003 0307 	and.w	r3, r3, #7
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb4:	0d5b      	lsrs	r3, r3, #21
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	f003 0307 	and.w	r3, r3, #7
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cc6:	0c9b      	lsrs	r3, r3, #18
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	f003 0307 	and.w	r3, r3, #7
 8008cce:	b2da      	uxtb	r2, r3
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cd8:	0bdb      	lsrs	r3, r3, #15
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	f003 0307 	and.w	r3, r3, #7
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	1c5a      	adds	r2, r3, #1
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	7e1b      	ldrb	r3, [r3, #24]
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	f003 0307 	and.w	r3, r3, #7
 8008cfa:	3302      	adds	r3, #2
 8008cfc:	2201      	movs	r2, #1
 8008cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8008d02:	687a      	ldr	r2, [r7, #4]
 8008d04:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d06:	fb03 f202 	mul.w	r2, r3, r2
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	7a1b      	ldrb	r3, [r3, #8]
 8008d12:	b2db      	uxtb	r3, r3
 8008d14:	f003 030f 	and.w	r3, r3, #15
 8008d18:	2201      	movs	r2, #1
 8008d1a:	409a      	lsls	r2, r3
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008d28:	0a52      	lsrs	r2, r2, #9
 8008d2a:	fb03 f202 	mul.w	r2, r3, r2
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d38:	661a      	str	r2, [r3, #96]	; 0x60
 8008d3a:	e031      	b.n	8008da0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d11d      	bne.n	8008d80 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d48:	041b      	lsls	r3, r3, #16
 8008d4a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d52:	0c1b      	lsrs	r3, r3, #16
 8008d54:	431a      	orrs	r2, r3
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	029a      	lsls	r2, r3, #10
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d74:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	661a      	str	r2, [r3, #96]	; 0x60
 8008d7e:	e00f      	b.n	8008da0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a58      	ldr	r2, [pc, #352]	; (8008ee8 <HAL_SD_GetCardCSD+0x344>)
 8008d86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2201      	movs	r2, #1
 8008d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e09d      	b.n	8008edc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da4:	0b9b      	lsrs	r3, r3, #14
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	f003 0301 	and.w	r3, r3, #1
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008db6:	09db      	lsrs	r3, r3, #7
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dc8:	b2db      	uxtb	r3, r3
 8008dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd8:	0fdb      	lsrs	r3, r3, #31
 8008dda:	b2da      	uxtb	r2, r3
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008de4:	0f5b      	lsrs	r3, r3, #29
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	f003 0303 	and.w	r3, r3, #3
 8008dec:	b2da      	uxtb	r2, r3
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df6:	0e9b      	lsrs	r3, r3, #26
 8008df8:	b2db      	uxtb	r3, r3
 8008dfa:	f003 0307 	and.w	r3, r3, #7
 8008dfe:	b2da      	uxtb	r2, r3
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e08:	0d9b      	lsrs	r3, r3, #22
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	f003 030f 	and.w	r3, r3, #15
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1a:	0d5b      	lsrs	r3, r3, #21
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 0301 	and.w	r3, r3, #1
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e36:	0c1b      	lsrs	r3, r3, #16
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	f003 0301 	and.w	r3, r3, #1
 8008e3e:	b2da      	uxtb	r2, r3
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e4a:	0bdb      	lsrs	r3, r3, #15
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	f003 0301 	and.w	r3, r3, #1
 8008e52:	b2da      	uxtb	r2, r3
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5e:	0b9b      	lsrs	r3, r3, #14
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e72:	0b5b      	lsrs	r3, r3, #13
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e86:	0b1b      	lsrs	r3, r3, #12
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9a:	0a9b      	lsrs	r3, r3, #10
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 0303 	and.w	r3, r3, #3
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 0303 	and.w	r3, r3, #3
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec2:	085b      	lsrs	r3, r3, #1
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr
 8008ee8:	004005ff 	.word	0x004005ff

08008eec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008f44:	b5b0      	push	{r4, r5, r7, lr}
 8008f46:	b08e      	sub	sp, #56	; 0x38
 8008f48:	af04      	add	r7, sp, #16
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2203      	movs	r2, #3
 8008f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f5a:	2b03      	cmp	r3, #3
 8008f5c:	d02e      	beq.n	8008fbc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f64:	d106      	bne.n	8008f74 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	639a      	str	r2, [r3, #56]	; 0x38
 8008f72:	e029      	b.n	8008fc8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008f7a:	d10a      	bne.n	8008f92 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008f7c:	6878      	ldr	r0, [r7, #4]
 8008f7e:	f000 fb0f 	bl	80095a0 <SD_WideBus_Enable>
 8008f82:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f8a:	431a      	orrs	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38
 8008f90:	e01a      	b.n	8008fc8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10a      	bne.n	8008fae <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f000 fb4c 	bl	8009636 <SD_WideBus_Disable>
 8008f9e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	639a      	str	r2, [r3, #56]	; 0x38
 8008fac:	e00c      	b.n	8008fc8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8008fba:	e005      	b.n	8008fc8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d009      	beq.n	8008fe4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a18      	ldr	r2, [pc, #96]	; (8009038 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2201      	movs	r2, #1
 8008fdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008fe0:	2301      	movs	r3, #1
 8008fe2:	e024      	b.n	800902e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	68db      	ldr	r3, [r3, #12]
 8008ff4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681d      	ldr	r5, [r3, #0]
 800900a:	466c      	mov	r4, sp
 800900c:	f107 0318 	add.w	r3, r7, #24
 8009010:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009018:	f107 030c 	add.w	r3, r7, #12
 800901c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800901e:	4628      	mov	r0, r5
 8009020:	f001 fd86 	bl	800ab30 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	2201      	movs	r2, #1
 8009028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800902c:	2300      	movs	r3, #0
}
 800902e:	4618      	mov	r0, r3
 8009030:	3728      	adds	r7, #40	; 0x28
 8009032:	46bd      	mov	sp, r7
 8009034:	bdb0      	pop	{r4, r5, r7, pc}
 8009036:	bf00      	nop
 8009038:	004005ff 	.word	0x004005ff

0800903c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800903c:	b580      	push	{r7, lr}
 800903e:	b086      	sub	sp, #24
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009048:	f107 030c 	add.w	r3, r7, #12
 800904c:	4619      	mov	r1, r3
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 fa7e 	bl	8009550 <SD_SendStatus>
 8009054:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	431a      	orrs	r2, r3
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	0a5b      	lsrs	r3, r3, #9
 800906c:	f003 030f 	and.w	r3, r3, #15
 8009070:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8009072:	693b      	ldr	r3, [r7, #16]
}
 8009074:	4618      	mov	r0, r3
 8009076:	3718      	adds	r7, #24
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}

0800907c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009088:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009098:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800909a:	bf00      	nop
 800909c:	3714      	adds	r7, #20
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr

080090a6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80090a6:	b580      	push	{r7, lr}
 80090a8:	b084      	sub	sp, #16
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090b2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b8:	2b82      	cmp	r3, #130	; 0x82
 80090ba:	d111      	bne.n	80090e0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4618      	mov	r0, r3
 80090c2:	f001 febb 	bl	800ae3c <SDMMC_CmdStopTransfer>
 80090c6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d008      	beq.n	80090e0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	431a      	orrs	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f7ff fd58 	bl	8008b90 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f022 0208 	bic.w	r2, r2, #8
 80090ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f240 523a 	movw	r2, #1338	; 0x53a
 80090f8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2201      	movs	r2, #1
 80090fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	2200      	movs	r2, #0
 8009106:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009108:	68f8      	ldr	r0, [r7, #12]
 800910a:	f7fa fa6d 	bl	80035e8 <HAL_SD_RxCpltCallback>
#endif
}
 800910e:	bf00      	nop
 8009110:	3710      	adds	r7, #16
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
	...

08009118 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b086      	sub	sp, #24
 800911c:	af00      	add	r7, sp, #0
 800911e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f7fb f9d2 	bl	80044d0 <HAL_DMA_GetError>
 800912c:	4603      	mov	r3, r0
 800912e:	2b02      	cmp	r3, #2
 8009130:	d03e      	beq.n	80091b0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009138:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800913e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009140:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d002      	beq.n	800914e <SD_DMAError+0x36>
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d12d      	bne.n	80091aa <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a19      	ldr	r2, [pc, #100]	; (80091b8 <SD_DMAError+0xa0>)
 8009154:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800915c:	697b      	ldr	r3, [r7, #20]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8009164:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800916a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8009172:	6978      	ldr	r0, [r7, #20]
 8009174:	f7ff ff62 	bl	800903c <HAL_SD_GetCardState>
 8009178:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b06      	cmp	r3, #6
 800917e:	d002      	beq.n	8009186 <SD_DMAError+0x6e>
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	2b05      	cmp	r3, #5
 8009184:	d10a      	bne.n	800919c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	4618      	mov	r0, r3
 800918c:	f001 fe56 	bl	800ae3c <SDMMC_CmdStopTransfer>
 8009190:	4602      	mov	r2, r0
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009196:	431a      	orrs	r2, r3
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2201      	movs	r2, #1
 80091a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	2200      	movs	r2, #0
 80091a8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80091aa:	6978      	ldr	r0, [r7, #20]
 80091ac:	f7ff fcf0 	bl	8008b90 <HAL_SD_ErrorCallback>
#endif
  }
}
 80091b0:	bf00      	nop
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	004005ff 	.word	0x004005ff

080091bc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80091d2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80091d4:	68f8      	ldr	r0, [r7, #12]
 80091d6:	f7ff ff31 	bl	800903c <HAL_SD_GetCardState>
 80091da:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2201      	movs	r2, #1
 80091e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b06      	cmp	r3, #6
 80091ee:	d002      	beq.n	80091f6 <SD_DMATxAbort+0x3a>
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2b05      	cmp	r3, #5
 80091f4:	d10a      	bne.n	800920c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4618      	mov	r0, r3
 80091fc:	f001 fe1e 	bl	800ae3c <SDMMC_CmdStopTransfer>
 8009200:	4602      	mov	r2, r0
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	431a      	orrs	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009210:	2b00      	cmp	r3, #0
 8009212:	d103      	bne.n	800921c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7fa f9d3 	bl	80035c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800921a:	e002      	b.n	8009222 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800921c:	68f8      	ldr	r0, [r7, #12]
 800921e:	f7ff fcb7 	bl	8008b90 <HAL_SD_ErrorCallback>
}
 8009222:	bf00      	nop
 8009224:	3710      	adds	r7, #16
 8009226:	46bd      	mov	sp, r7
 8009228:	bd80      	pop	{r7, pc}

0800922a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b084      	sub	sp, #16
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f240 523a 	movw	r2, #1338	; 0x53a
 8009240:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8009242:	68f8      	ldr	r0, [r7, #12]
 8009244:	f7ff fefa 	bl	800903c <HAL_SD_GetCardState>
 8009248:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	2b06      	cmp	r3, #6
 800925c:	d002      	beq.n	8009264 <SD_DMARxAbort+0x3a>
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	2b05      	cmp	r3, #5
 8009262:	d10a      	bne.n	800927a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	4618      	mov	r0, r3
 800926a:	f001 fde7 	bl	800ae3c <SDMMC_CmdStopTransfer>
 800926e:	4602      	mov	r2, r0
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009274:	431a      	orrs	r2, r3
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927e:	2b00      	cmp	r3, #0
 8009280:	d103      	bne.n	800928a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f7fa f99c 	bl	80035c0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009288:	e002      	b.n	8009290 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800928a:	68f8      	ldr	r0, [r7, #12]
 800928c:	f7ff fc80 	bl	8008b90 <HAL_SD_ErrorCallback>
}
 8009290:	bf00      	nop
 8009292:	3710      	adds	r7, #16
 8009294:	46bd      	mov	sp, r7
 8009296:	bd80      	pop	{r7, pc}

08009298 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009298:	b5b0      	push	{r4, r5, r7, lr}
 800929a:	b094      	sub	sp, #80	; 0x50
 800929c:	af04      	add	r7, sp, #16
 800929e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80092a0:	2301      	movs	r3, #1
 80092a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f001 fc99 	bl	800abe0 <SDIO_GetPowerState>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d102      	bne.n	80092ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80092b8:	e0b8      	b.n	800942c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092be:	2b03      	cmp	r3, #3
 80092c0:	d02f      	beq.n	8009322 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 fec2 	bl	800b050 <SDMMC_CmdSendCID>
 80092cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d001      	beq.n	80092d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80092d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092d6:	e0a9      	b.n	800942c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	2100      	movs	r1, #0
 80092de:	4618      	mov	r0, r3
 80092e0:	f001 fcc3 	bl	800ac6a <SDIO_GetResponse>
 80092e4:	4602      	mov	r2, r0
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	2104      	movs	r1, #4
 80092f0:	4618      	mov	r0, r3
 80092f2:	f001 fcba 	bl	800ac6a <SDIO_GetResponse>
 80092f6:	4602      	mov	r2, r0
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2108      	movs	r1, #8
 8009302:	4618      	mov	r0, r3
 8009304:	f001 fcb1 	bl	800ac6a <SDIO_GetResponse>
 8009308:	4602      	mov	r2, r0
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	210c      	movs	r1, #12
 8009314:	4618      	mov	r0, r3
 8009316:	f001 fca8 	bl	800ac6a <SDIO_GetResponse>
 800931a:	4602      	mov	r2, r0
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009326:	2b03      	cmp	r3, #3
 8009328:	d00d      	beq.n	8009346 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f107 020e 	add.w	r2, r7, #14
 8009332:	4611      	mov	r1, r2
 8009334:	4618      	mov	r0, r3
 8009336:	f001 fec8 	bl	800b0ca <SDMMC_CmdSetRelAdd>
 800933a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800933c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <SD_InitCard+0xae>
    {
      return errorstate;
 8009342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009344:	e072      	b.n	800942c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800934a:	2b03      	cmp	r3, #3
 800934c:	d036      	beq.n	80093bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800934e:	89fb      	ldrh	r3, [r7, #14]
 8009350:	461a      	mov	r2, r3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800935e:	041b      	lsls	r3, r3, #16
 8009360:	4619      	mov	r1, r3
 8009362:	4610      	mov	r0, r2
 8009364:	f001 fe92 	bl	800b08c <SDMMC_CmdSendCSD>
 8009368:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800936a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009372:	e05b      	b.n	800942c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	2100      	movs	r1, #0
 800937a:	4618      	mov	r0, r3
 800937c:	f001 fc75 	bl	800ac6a <SDIO_GetResponse>
 8009380:	4602      	mov	r2, r0
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2104      	movs	r1, #4
 800938c:	4618      	mov	r0, r3
 800938e:	f001 fc6c 	bl	800ac6a <SDIO_GetResponse>
 8009392:	4602      	mov	r2, r0
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	2108      	movs	r1, #8
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fc63 	bl	800ac6a <SDIO_GetResponse>
 80093a4:	4602      	mov	r2, r0
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	210c      	movs	r1, #12
 80093b0:	4618      	mov	r0, r3
 80093b2:	f001 fc5a 	bl	800ac6a <SDIO_GetResponse>
 80093b6:	4602      	mov	r2, r0
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2104      	movs	r1, #4
 80093c2:	4618      	mov	r0, r3
 80093c4:	f001 fc51 	bl	800ac6a <SDIO_GetResponse>
 80093c8:	4603      	mov	r3, r0
 80093ca:	0d1a      	lsrs	r2, r3, #20
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80093d0:	f107 0310 	add.w	r3, r7, #16
 80093d4:	4619      	mov	r1, r3
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f7ff fbe4 	bl	8008ba4 <HAL_SD_GetCardCSD>
 80093dc:	4603      	mov	r3, r0
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093e6:	e021      	b.n	800942c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6819      	ldr	r1, [r3, #0]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093f0:	041b      	lsls	r3, r3, #16
 80093f2:	2200      	movs	r2, #0
 80093f4:	461c      	mov	r4, r3
 80093f6:	4615      	mov	r5, r2
 80093f8:	4622      	mov	r2, r4
 80093fa:	462b      	mov	r3, r5
 80093fc:	4608      	mov	r0, r1
 80093fe:	f001 fd3f 	bl	800ae80 <SDMMC_CmdSelDesel>
 8009402:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <SD_InitCard+0x176>
  {
    return errorstate;
 800940a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800940c:	e00e      	b.n	800942c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681d      	ldr	r5, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	466c      	mov	r4, sp
 8009416:	f103 0210 	add.w	r2, r3, #16
 800941a:	ca07      	ldmia	r2, {r0, r1, r2}
 800941c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009420:	3304      	adds	r3, #4
 8009422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009424:	4628      	mov	r0, r5
 8009426:	f001 fb83 	bl	800ab30 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800942a:	2300      	movs	r3, #0
}
 800942c:	4618      	mov	r0, r3
 800942e:	3740      	adds	r7, #64	; 0x40
 8009430:	46bd      	mov	sp, r7
 8009432:	bdb0      	pop	{r4, r5, r7, pc}

08009434 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800943c:	2300      	movs	r3, #0
 800943e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009440:	2300      	movs	r3, #0
 8009442:	617b      	str	r3, [r7, #20]
 8009444:	2300      	movs	r3, #0
 8009446:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	4618      	mov	r0, r3
 800944e:	f001 fd3a 	bl	800aec6 <SDMMC_CmdGoIdleState>
 8009452:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d001      	beq.n	800945e <SD_PowerON+0x2a>
  {
    return errorstate;
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	e072      	b.n	8009544 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4618      	mov	r0, r3
 8009464:	f001 fd4d 	bl	800af02 <SDMMC_CmdOperCond>
 8009468:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d00d      	beq.n	800948c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4618      	mov	r0, r3
 800947c:	f001 fd23 	bl	800aec6 <SDMMC_CmdGoIdleState>
 8009480:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d004      	beq.n	8009492 <SD_PowerON+0x5e>
    {
      return errorstate;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	e05b      	b.n	8009544 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2201      	movs	r2, #1
 8009490:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009496:	2b01      	cmp	r3, #1
 8009498:	d137      	bne.n	800950a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2100      	movs	r1, #0
 80094a0:	4618      	mov	r0, r3
 80094a2:	f001 fd4d 	bl	800af40 <SDMMC_CmdAppCommand>
 80094a6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d02d      	beq.n	800950a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094b2:	e047      	b.n	8009544 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2100      	movs	r1, #0
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 fd40 	bl	800af40 <SDMMC_CmdAppCommand>
 80094c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d001      	beq.n	80094cc <SD_PowerON+0x98>
    {
      return errorstate;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	e03b      	b.n	8009544 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	491e      	ldr	r1, [pc, #120]	; (800954c <SD_PowerON+0x118>)
 80094d2:	4618      	mov	r0, r3
 80094d4:	f001 fd56 	bl	800af84 <SDMMC_CmdAppOperCommand>
 80094d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d002      	beq.n	80094e6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094e4:	e02e      	b.n	8009544 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	2100      	movs	r1, #0
 80094ec:	4618      	mov	r0, r3
 80094ee:	f001 fbbc 	bl	800ac6a <SDIO_GetResponse>
 80094f2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	0fdb      	lsrs	r3, r3, #31
 80094f8:	2b01      	cmp	r3, #1
 80094fa:	d101      	bne.n	8009500 <SD_PowerON+0xcc>
 80094fc:	2301      	movs	r3, #1
 80094fe:	e000      	b.n	8009502 <SD_PowerON+0xce>
 8009500:	2300      	movs	r3, #0
 8009502:	613b      	str	r3, [r7, #16]

    count++;
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	3301      	adds	r3, #1
 8009508:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009510:	4293      	cmp	r3, r2
 8009512:	d802      	bhi.n	800951a <SD_PowerON+0xe6>
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d0cc      	beq.n	80094b4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009520:	4293      	cmp	r3, r2
 8009522:	d902      	bls.n	800952a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009528:	e00c      	b.n	8009544 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800952a:	697b      	ldr	r3, [r7, #20]
 800952c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d003      	beq.n	800953c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2201      	movs	r2, #1
 8009538:	645a      	str	r2, [r3, #68]	; 0x44
 800953a:	e002      	b.n	8009542 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	c1100000 	.word	0xc1100000

08009550 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b084      	sub	sp, #16
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d102      	bne.n	8009566 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009560:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009564:	e018      	b.n	8009598 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800956e:	041b      	lsls	r3, r3, #16
 8009570:	4619      	mov	r1, r3
 8009572:	4610      	mov	r0, r2
 8009574:	f001 fdca 	bl	800b10c <SDMMC_CmdSendStatus>
 8009578:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d001      	beq.n	8009584 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	e009      	b.n	8009598 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	2100      	movs	r1, #0
 800958a:	4618      	mov	r0, r3
 800958c:	f001 fb6d 	bl	800ac6a <SDIO_GetResponse>
 8009590:	4602      	mov	r2, r0
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80095a8:	2300      	movs	r3, #0
 80095aa:	60fb      	str	r3, [r7, #12]
 80095ac:	2300      	movs	r3, #0
 80095ae:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2100      	movs	r1, #0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 fb57 	bl	800ac6a <SDIO_GetResponse>
 80095bc:	4603      	mov	r3, r0
 80095be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095c6:	d102      	bne.n	80095ce <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80095c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095cc:	e02f      	b.n	800962e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80095ce:	f107 030c 	add.w	r3, r7, #12
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 f879 	bl	80096cc <SD_FindSCR>
 80095da:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d001      	beq.n	80095e6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	e023      	b.n	800962e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80095e6:	693b      	ldr	r3, [r7, #16]
 80095e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01c      	beq.n	800962a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681a      	ldr	r2, [r3, #0]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f8:	041b      	lsls	r3, r3, #16
 80095fa:	4619      	mov	r1, r3
 80095fc:	4610      	mov	r0, r2
 80095fe:	f001 fc9f 	bl	800af40 <SDMMC_CmdAppCommand>
 8009602:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800960a:	697b      	ldr	r3, [r7, #20]
 800960c:	e00f      	b.n	800962e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2102      	movs	r1, #2
 8009614:	4618      	mov	r0, r3
 8009616:	f001 fcd8 	bl	800afca <SDMMC_CmdBusWidth>
 800961a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009622:	697b      	ldr	r3, [r7, #20]
 8009624:	e003      	b.n	800962e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009626:	2300      	movs	r3, #0
 8009628:	e001      	b.n	800962e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800962a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800962e:	4618      	mov	r0, r3
 8009630:	3718      	adds	r7, #24
 8009632:	46bd      	mov	sp, r7
 8009634:	bd80      	pop	{r7, pc}

08009636 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009636:	b580      	push	{r7, lr}
 8009638:	b086      	sub	sp, #24
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800963e:	2300      	movs	r3, #0
 8009640:	60fb      	str	r3, [r7, #12]
 8009642:	2300      	movs	r3, #0
 8009644:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2100      	movs	r1, #0
 800964c:	4618      	mov	r0, r3
 800964e:	f001 fb0c 	bl	800ac6a <SDIO_GetResponse>
 8009652:	4603      	mov	r3, r0
 8009654:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009658:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800965c:	d102      	bne.n	8009664 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800965e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009662:	e02f      	b.n	80096c4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009664:	f107 030c 	add.w	r3, r7, #12
 8009668:	4619      	mov	r1, r3
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 f82e 	bl	80096cc <SD_FindSCR>
 8009670:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d001      	beq.n	800967c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	e023      	b.n	80096c4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d01c      	beq.n	80096c0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800968e:	041b      	lsls	r3, r3, #16
 8009690:	4619      	mov	r1, r3
 8009692:	4610      	mov	r0, r2
 8009694:	f001 fc54 	bl	800af40 <SDMMC_CmdAppCommand>
 8009698:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d001      	beq.n	80096a4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80096a0:	697b      	ldr	r3, [r7, #20]
 80096a2:	e00f      	b.n	80096c4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	2100      	movs	r1, #0
 80096aa:	4618      	mov	r0, r3
 80096ac:	f001 fc8d 	bl	800afca <SDMMC_CmdBusWidth>
 80096b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d001      	beq.n	80096bc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	e003      	b.n	80096c4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80096bc:	2300      	movs	r3, #0
 80096be:	e001      	b.n	80096c4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80096c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80096c4:	4618      	mov	r0, r3
 80096c6:	3718      	adds	r7, #24
 80096c8:	46bd      	mov	sp, r7
 80096ca:	bd80      	pop	{r7, pc}

080096cc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80096cc:	b590      	push	{r4, r7, lr}
 80096ce:	b08f      	sub	sp, #60	; 0x3c
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80096d6:	f7f9 ffcf 	bl	8003678 <HAL_GetTick>
 80096da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80096dc:	2300      	movs	r3, #0
 80096de:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80096e0:	2300      	movs	r3, #0
 80096e2:	60bb      	str	r3, [r7, #8]
 80096e4:	2300      	movs	r3, #0
 80096e6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	2108      	movs	r1, #8
 80096f2:	4618      	mov	r0, r3
 80096f4:	f001 faf8 	bl	800ace8 <SDMMC_CmdBlockLength>
 80096f8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80096fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <SD_FindSCR+0x38>
  {
    return errorstate;
 8009700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009702:	e0a9      	b.n	8009858 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800970c:	041b      	lsls	r3, r3, #16
 800970e:	4619      	mov	r1, r3
 8009710:	4610      	mov	r0, r2
 8009712:	f001 fc15 	bl	800af40 <SDMMC_CmdAppCommand>
 8009716:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800971a:	2b00      	cmp	r3, #0
 800971c:	d001      	beq.n	8009722 <SD_FindSCR+0x56>
  {
    return errorstate;
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	e09a      	b.n	8009858 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009722:	f04f 33ff 	mov.w	r3, #4294967295
 8009726:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009728:	2308      	movs	r3, #8
 800972a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800972c:	2330      	movs	r3, #48	; 0x30
 800972e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8009730:	2302      	movs	r3, #2
 8009732:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8009734:	2300      	movs	r3, #0
 8009736:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8009738:	2301      	movs	r3, #1
 800973a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f107 0210 	add.w	r2, r7, #16
 8009744:	4611      	mov	r1, r2
 8009746:	4618      	mov	r0, r3
 8009748:	f001 faa2 	bl	800ac90 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4618      	mov	r0, r3
 8009752:	f001 fc5c 	bl	800b00e <SDMMC_CmdSendSCR>
 8009756:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975a:	2b00      	cmp	r3, #0
 800975c:	d022      	beq.n	80097a4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800975e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009760:	e07a      	b.n	8009858 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009768:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800976c:	2b00      	cmp	r3, #0
 800976e:	d00e      	beq.n	800978e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6819      	ldr	r1, [r3, #0]
 8009774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	f107 0208 	add.w	r2, r7, #8
 800977c:	18d4      	adds	r4, r2, r3
 800977e:	4608      	mov	r0, r1
 8009780:	f001 fa01 	bl	800ab86 <SDIO_ReadFIFO>
 8009784:	4603      	mov	r3, r0
 8009786:	6023      	str	r3, [r4, #0]
      index++;
 8009788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800978a:	3301      	adds	r3, #1
 800978c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800978e:	f7f9 ff73 	bl	8003678 <HAL_GetTick>
 8009792:	4602      	mov	r2, r0
 8009794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	f1b3 3fff 	cmp.w	r3, #4294967295
 800979c:	d102      	bne.n	80097a4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800979e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80097a2:	e059      	b.n	8009858 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097aa:	f240 432a 	movw	r3, #1066	; 0x42a
 80097ae:	4013      	ands	r3, r2
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0d6      	beq.n	8009762 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ba:	f003 0308 	and.w	r3, r3, #8
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d005      	beq.n	80097ce <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	2208      	movs	r2, #8
 80097c8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80097ca:	2308      	movs	r3, #8
 80097cc:	e044      	b.n	8009858 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097d4:	f003 0302 	and.w	r3, r3, #2
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d005      	beq.n	80097e8 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	2202      	movs	r2, #2
 80097e2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80097e4:	2302      	movs	r3, #2
 80097e6:	e037      	b.n	8009858 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ee:	f003 0320 	and.w	r3, r3, #32
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d005      	beq.n	8009802 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2220      	movs	r2, #32
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80097fe:	2320      	movs	r3, #32
 8009800:	e02a      	b.n	8009858 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	f240 523a 	movw	r2, #1338	; 0x53a
 800980a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	061a      	lsls	r2, r3, #24
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	021b      	lsls	r3, r3, #8
 8009814:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009818:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	0a1b      	lsrs	r3, r3, #8
 800981e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009822:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	0e1b      	lsrs	r3, r3, #24
 8009828:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982c:	601a      	str	r2, [r3, #0]
    scr++;
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	3304      	adds	r3, #4
 8009832:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	061a      	lsls	r2, r3, #24
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	021b      	lsls	r3, r3, #8
 800983c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009840:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	0a1b      	lsrs	r3, r3, #8
 8009846:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800984a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	0e1b      	lsrs	r3, r3, #24
 8009850:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009854:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009856:	2300      	movs	r3, #0
}
 8009858:	4618      	mov	r0, r3
 800985a:	373c      	adds	r7, #60	; 0x3c
 800985c:	46bd      	mov	sp, r7
 800985e:	bd90      	pop	{r4, r7, pc}

08009860 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b086      	sub	sp, #24
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009872:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d03f      	beq.n	80098fa <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800987a:	2300      	movs	r3, #0
 800987c:	617b      	str	r3, [r7, #20]
 800987e:	e033      	b.n	80098e8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	4618      	mov	r0, r3
 8009886:	f001 f97e 	bl	800ab86 <SDIO_ReadFIFO>
 800988a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	b2da      	uxtb	r2, r3
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	3301      	adds	r3, #1
 8009898:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	3b01      	subs	r3, #1
 800989e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80098a0:	68bb      	ldr	r3, [r7, #8]
 80098a2:	0a1b      	lsrs	r3, r3, #8
 80098a4:	b2da      	uxtb	r2, r3
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	3301      	adds	r3, #1
 80098ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	3b01      	subs	r3, #1
 80098b4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	0c1b      	lsrs	r3, r3, #16
 80098ba:	b2da      	uxtb	r2, r3
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	3301      	adds	r3, #1
 80098c4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	3b01      	subs	r3, #1
 80098ca:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	0e1b      	lsrs	r3, r3, #24
 80098d0:	b2da      	uxtb	r2, r3
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	3301      	adds	r3, #1
 80098da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	3b01      	subs	r3, #1
 80098e0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	3301      	adds	r3, #1
 80098e6:	617b      	str	r3, [r7, #20]
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	2b07      	cmp	r3, #7
 80098ec:	d9c8      	bls.n	8009880 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80098fa:	bf00      	nop
 80098fc:	3718      	adds	r7, #24
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b086      	sub	sp, #24
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009914:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d043      	beq.n	80099a4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800991c:	2300      	movs	r3, #0
 800991e:	617b      	str	r3, [r7, #20]
 8009920:	e037      	b.n	8009992 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	781b      	ldrb	r3, [r3, #0]
 8009926:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	3301      	adds	r3, #1
 800992c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800992e:	693b      	ldr	r3, [r7, #16]
 8009930:	3b01      	subs	r3, #1
 8009932:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	781b      	ldrb	r3, [r3, #0]
 8009938:	021a      	lsls	r2, r3, #8
 800993a:	68bb      	ldr	r3, [r7, #8]
 800993c:	4313      	orrs	r3, r2
 800993e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3301      	adds	r3, #1
 8009944:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	3b01      	subs	r3, #1
 800994a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	041a      	lsls	r2, r3, #16
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	4313      	orrs	r3, r2
 8009956:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	3301      	adds	r3, #1
 800995c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	3b01      	subs	r3, #1
 8009962:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	061a      	lsls	r2, r3, #24
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	4313      	orrs	r3, r2
 800996e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	3301      	adds	r3, #1
 8009974:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009976:	693b      	ldr	r3, [r7, #16]
 8009978:	3b01      	subs	r3, #1
 800997a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f107 0208 	add.w	r2, r7, #8
 8009984:	4611      	mov	r1, r2
 8009986:	4618      	mov	r0, r3
 8009988:	f001 f90a 	bl	800aba0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	3301      	adds	r3, #1
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	697b      	ldr	r3, [r7, #20]
 8009994:	2b07      	cmp	r3, #7
 8009996:	d9c4      	bls.n	8009922 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	68fa      	ldr	r2, [r7, #12]
 800999c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80099a4:	bf00      	nop
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e034      	b.n	8009a2c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d106      	bne.n	80099dc <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f7f8 f9b0 	bl	8001d3c <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681a      	ldr	r2, [r3, #0]
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	3308      	adds	r3, #8
 80099e4:	4619      	mov	r1, r3
 80099e6:	4610      	mov	r0, r2
 80099e8:	f000 ff9e 	bl	800a928 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6818      	ldr	r0, [r3, #0]
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	689b      	ldr	r3, [r3, #8]
 80099f4:	461a      	mov	r2, r3
 80099f6:	68b9      	ldr	r1, [r7, #8]
 80099f8:	f001 f806 	bl	800aa08 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	6858      	ldr	r0, [r3, #4]
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689a      	ldr	r2, [r3, #8]
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a08:	6879      	ldr	r1, [r7, #4]
 8009a0a:	f001 f851 	bl	800aab0 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	6892      	ldr	r2, [r2, #8]
 8009a16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	68fa      	ldr	r2, [r7, #12]
 8009a20:	6892      	ldr	r2, [r2, #8]
 8009a22:	f041 0101 	orr.w	r1, r1, #1
 8009a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b082      	sub	sp, #8
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d101      	bne.n	8009a46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e01d      	b.n	8009a82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a4c:	b2db      	uxtb	r3, r3
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d106      	bne.n	8009a60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f815 	bl	8009a8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2202      	movs	r2, #2
 8009a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f000 f968 	bl	8009d48 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009a80:	2300      	movs	r3, #0
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009a8a:	b480      	push	{r7}
 8009a8c:	b083      	sub	sp, #12
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009a92:	bf00      	nop
 8009a94:	370c      	adds	r7, #12
 8009a96:	46bd      	mov	sp, r7
 8009a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9c:	4770      	bx	lr

08009a9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a9e:	b480      	push	{r7}
 8009aa0:	b085      	sub	sp, #20
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0201 	orr.w	r2, r2, #1
 8009ab4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	f003 0307 	and.w	r3, r3, #7
 8009ac0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2b06      	cmp	r3, #6
 8009ac6:	d007      	beq.n	8009ad8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	f042 0201 	orr.w	r2, r2, #1
 8009ad6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3714      	adds	r7, #20
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae4:	4770      	bx	lr

08009ae6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ae6:	b580      	push	{r7, lr}
 8009ae8:	b082      	sub	sp, #8
 8009aea:	af00      	add	r7, sp, #0
 8009aec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	f003 0302 	and.w	r3, r3, #2
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	d122      	bne.n	8009b42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68db      	ldr	r3, [r3, #12]
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b02      	cmp	r3, #2
 8009b08:	d11b      	bne.n	8009b42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f06f 0202 	mvn.w	r2, #2
 8009b12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	699b      	ldr	r3, [r3, #24]
 8009b20:	f003 0303 	and.w	r3, r3, #3
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d003      	beq.n	8009b30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 f8ee 	bl	8009d0a <HAL_TIM_IC_CaptureCallback>
 8009b2e:	e005      	b.n	8009b3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 f8e0 	bl	8009cf6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 f8f1 	bl	8009d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2200      	movs	r2, #0
 8009b40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	691b      	ldr	r3, [r3, #16]
 8009b48:	f003 0304 	and.w	r3, r3, #4
 8009b4c:	2b04      	cmp	r3, #4
 8009b4e:	d122      	bne.n	8009b96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	68db      	ldr	r3, [r3, #12]
 8009b56:	f003 0304 	and.w	r3, r3, #4
 8009b5a:	2b04      	cmp	r3, #4
 8009b5c:	d11b      	bne.n	8009b96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f06f 0204 	mvn.w	r2, #4
 8009b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	699b      	ldr	r3, [r3, #24]
 8009b74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d003      	beq.n	8009b84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f8c4 	bl	8009d0a <HAL_TIM_IC_CaptureCallback>
 8009b82:	e005      	b.n	8009b90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 f8b6 	bl	8009cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f8c7 	bl	8009d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b08      	cmp	r3, #8
 8009ba2:	d122      	bne.n	8009bea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f003 0308 	and.w	r3, r3, #8
 8009bae:	2b08      	cmp	r3, #8
 8009bb0:	d11b      	bne.n	8009bea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f06f 0208 	mvn.w	r2, #8
 8009bba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2204      	movs	r2, #4
 8009bc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	69db      	ldr	r3, [r3, #28]
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d003      	beq.n	8009bd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f89a 	bl	8009d0a <HAL_TIM_IC_CaptureCallback>
 8009bd6:	e005      	b.n	8009be4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f88c 	bl	8009cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f000 f89d 	bl	8009d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2200      	movs	r2, #0
 8009be8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	691b      	ldr	r3, [r3, #16]
 8009bf0:	f003 0310 	and.w	r3, r3, #16
 8009bf4:	2b10      	cmp	r3, #16
 8009bf6:	d122      	bne.n	8009c3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	68db      	ldr	r3, [r3, #12]
 8009bfe:	f003 0310 	and.w	r3, r3, #16
 8009c02:	2b10      	cmp	r3, #16
 8009c04:	d11b      	bne.n	8009c3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f06f 0210 	mvn.w	r2, #16
 8009c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2208      	movs	r2, #8
 8009c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	69db      	ldr	r3, [r3, #28]
 8009c1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 f870 	bl	8009d0a <HAL_TIM_IC_CaptureCallback>
 8009c2a:	e005      	b.n	8009c38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 f862 	bl	8009cf6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f873 	bl	8009d1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	691b      	ldr	r3, [r3, #16]
 8009c44:	f003 0301 	and.w	r3, r3, #1
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d10e      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	f003 0301 	and.w	r3, r3, #1
 8009c56:	2b01      	cmp	r3, #1
 8009c58:	d107      	bne.n	8009c6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f06f 0201 	mvn.w	r2, #1
 8009c62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f7f7 fad5 	bl	8001214 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c74:	2b80      	cmp	r3, #128	; 0x80
 8009c76:	d10e      	bne.n	8009c96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c82:	2b80      	cmp	r3, #128	; 0x80
 8009c84:	d107      	bne.n	8009c96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f903 	bl	8009e9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	691b      	ldr	r3, [r3, #16]
 8009c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ca0:	2b40      	cmp	r3, #64	; 0x40
 8009ca2:	d10e      	bne.n	8009cc2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	68db      	ldr	r3, [r3, #12]
 8009caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009cae:	2b40      	cmp	r3, #64	; 0x40
 8009cb0:	d107      	bne.n	8009cc2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009cba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f838 	bl	8009d32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f003 0320 	and.w	r3, r3, #32
 8009ccc:	2b20      	cmp	r3, #32
 8009cce:	d10e      	bne.n	8009cee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	f003 0320 	and.w	r3, r3, #32
 8009cda:	2b20      	cmp	r3, #32
 8009cdc:	d107      	bne.n	8009cee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f06f 0220 	mvn.w	r2, #32
 8009ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f8cd 	bl	8009e88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009cee:	bf00      	nop
 8009cf0:	3708      	adds	r7, #8
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009cfe:	bf00      	nop
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d12:	bf00      	nop
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b083      	sub	sp, #12
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009d3a:	bf00      	nop
 8009d3c:	370c      	adds	r7, #12
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
	...

08009d48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b085      	sub	sp, #20
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a40      	ldr	r2, [pc, #256]	; (8009e5c <TIM_Base_SetConfig+0x114>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d013      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d66:	d00f      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	4a3d      	ldr	r2, [pc, #244]	; (8009e60 <TIM_Base_SetConfig+0x118>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d00b      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	4a3c      	ldr	r2, [pc, #240]	; (8009e64 <TIM_Base_SetConfig+0x11c>)
 8009d74:	4293      	cmp	r3, r2
 8009d76:	d007      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	4a3b      	ldr	r2, [pc, #236]	; (8009e68 <TIM_Base_SetConfig+0x120>)
 8009d7c:	4293      	cmp	r3, r2
 8009d7e:	d003      	beq.n	8009d88 <TIM_Base_SetConfig+0x40>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4a3a      	ldr	r2, [pc, #232]	; (8009e6c <TIM_Base_SetConfig+0x124>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d108      	bne.n	8009d9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	685b      	ldr	r3, [r3, #4]
 8009d94:	68fa      	ldr	r2, [r7, #12]
 8009d96:	4313      	orrs	r3, r2
 8009d98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4a2f      	ldr	r2, [pc, #188]	; (8009e5c <TIM_Base_SetConfig+0x114>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d02b      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009da8:	d027      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	4a2c      	ldr	r2, [pc, #176]	; (8009e60 <TIM_Base_SetConfig+0x118>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d023      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	4a2b      	ldr	r2, [pc, #172]	; (8009e64 <TIM_Base_SetConfig+0x11c>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d01f      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	4a2a      	ldr	r2, [pc, #168]	; (8009e68 <TIM_Base_SetConfig+0x120>)
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d01b      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	4a29      	ldr	r2, [pc, #164]	; (8009e6c <TIM_Base_SetConfig+0x124>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d017      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	4a28      	ldr	r2, [pc, #160]	; (8009e70 <TIM_Base_SetConfig+0x128>)
 8009dce:	4293      	cmp	r3, r2
 8009dd0:	d013      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	4a27      	ldr	r2, [pc, #156]	; (8009e74 <TIM_Base_SetConfig+0x12c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d00f      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	4a26      	ldr	r2, [pc, #152]	; (8009e78 <TIM_Base_SetConfig+0x130>)
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d00b      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	4a25      	ldr	r2, [pc, #148]	; (8009e7c <TIM_Base_SetConfig+0x134>)
 8009de6:	4293      	cmp	r3, r2
 8009de8:	d007      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	4a24      	ldr	r2, [pc, #144]	; (8009e80 <TIM_Base_SetConfig+0x138>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d003      	beq.n	8009dfa <TIM_Base_SetConfig+0xb2>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	4a23      	ldr	r2, [pc, #140]	; (8009e84 <TIM_Base_SetConfig+0x13c>)
 8009df6:	4293      	cmp	r3, r2
 8009df8:	d108      	bne.n	8009e0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	68fa      	ldr	r2, [r7, #12]
 8009e08:	4313      	orrs	r3, r2
 8009e0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	695b      	ldr	r3, [r3, #20]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68fa      	ldr	r2, [r7, #12]
 8009e1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	689a      	ldr	r2, [r3, #8]
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681a      	ldr	r2, [r3, #0]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <TIM_Base_SetConfig+0x114>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d003      	beq.n	8009e40 <TIM_Base_SetConfig+0xf8>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	4a0c      	ldr	r2, [pc, #48]	; (8009e6c <TIM_Base_SetConfig+0x124>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d103      	bne.n	8009e48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	691a      	ldr	r2, [r3, #16]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	615a      	str	r2, [r3, #20]
}
 8009e4e:	bf00      	nop
 8009e50:	3714      	adds	r7, #20
 8009e52:	46bd      	mov	sp, r7
 8009e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	40010000 	.word	0x40010000
 8009e60:	40000400 	.word	0x40000400
 8009e64:	40000800 	.word	0x40000800
 8009e68:	40000c00 	.word	0x40000c00
 8009e6c:	40010400 	.word	0x40010400
 8009e70:	40014000 	.word	0x40014000
 8009e74:	40014400 	.word	0x40014400
 8009e78:	40014800 	.word	0x40014800
 8009e7c:	40001800 	.word	0x40001800
 8009e80:	40001c00 	.word	0x40001c00
 8009e84:	40002000 	.word	0x40002000

08009e88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009e90:	bf00      	nop
 8009e92:	370c      	adds	r7, #12
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ea4:	bf00      	nop
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b082      	sub	sp, #8
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d101      	bne.n	8009ec2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e03f      	b.n	8009f42 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d106      	bne.n	8009edc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7f7 fe42 	bl	8001b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2224      	movs	r2, #36	; 0x24
 8009ee0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	68da      	ldr	r2, [r3, #12]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ef2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f000 f829 	bl	8009f4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	691a      	ldr	r2, [r3, #16]
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	695a      	ldr	r2, [r3, #20]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68da      	ldr	r2, [r3, #12]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2220      	movs	r2, #32
 8009f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2220      	movs	r2, #32
 8009f3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8009f40:	2300      	movs	r3, #0
}
 8009f42:	4618      	mov	r0, r3
 8009f44:	3708      	adds	r7, #8
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
	...

08009f4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f50:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f5a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009f66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009f6a:	68d9      	ldr	r1, [r3, #12]
 8009f6c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009f70:	681a      	ldr	r2, [r3, #0]
 8009f72:	ea40 0301 	orr.w	r3, r0, r1
 8009f76:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f78:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009f7c:	689a      	ldr	r2, [r3, #8]
 8009f7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	431a      	orrs	r2, r3
 8009f86:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009f8a:	695b      	ldr	r3, [r3, #20]
 8009f8c:	431a      	orrs	r2, r3
 8009f8e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009f92:	69db      	ldr	r3, [r3, #28]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8009f9a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009fa6:	f021 010c 	bic.w	r1, r1, #12
 8009faa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8009fb4:	430b      	orrs	r3, r1
 8009fb6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009fb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009fc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009fc8:	6999      	ldr	r1, [r3, #24]
 8009fca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009fce:	681a      	ldr	r2, [r3, #0]
 8009fd0:	ea40 0301 	orr.w	r3, r0, r1
 8009fd4:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fd6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009fda:	69db      	ldr	r3, [r3, #28]
 8009fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fe0:	f040 825a 	bne.w	800a498 <UART_SetConfig+0x54c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8009fe4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	4b9c      	ldr	r3, [pc, #624]	; (800a25c <UART_SetConfig+0x310>)
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d012      	beq.n	800a016 <UART_SetConfig+0xca>
 8009ff0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009ff4:	681a      	ldr	r2, [r3, #0]
 8009ff6:	4b9a      	ldr	r3, [pc, #616]	; (800a260 <UART_SetConfig+0x314>)
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d00c      	beq.n	800a016 <UART_SetConfig+0xca>
 8009ffc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4b98      	ldr	r3, [pc, #608]	; (800a264 <UART_SetConfig+0x318>)
 800a004:	429a      	cmp	r2, r3
 800a006:	d006      	beq.n	800a016 <UART_SetConfig+0xca>
 800a008:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a00c:	681a      	ldr	r2, [r3, #0]
 800a00e:	4b96      	ldr	r3, [pc, #600]	; (800a268 <UART_SetConfig+0x31c>)
 800a010:	429a      	cmp	r2, r3
 800a012:	f040 812d 	bne.w	800a270 <UART_SetConfig+0x324>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a016:	f7fd fb6b 	bl	80076f0 <HAL_RCC_GetPCLK2Freq>
 800a01a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a01e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a022:	2200      	movs	r2, #0
 800a024:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 800a028:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 800a02c:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 800a030:	4622      	mov	r2, r4
 800a032:	462b      	mov	r3, r5
 800a034:	1891      	adds	r1, r2, r2
 800a036:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 800a03a:	415b      	adcs	r3, r3
 800a03c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a040:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800a044:	4621      	mov	r1, r4
 800a046:	1851      	adds	r1, r2, r1
 800a048:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 800a04c:	4629      	mov	r1, r5
 800a04e:	414b      	adcs	r3, r1
 800a050:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a054:	f04f 0200 	mov.w	r2, #0
 800a058:	f04f 0300 	mov.w	r3, #0
 800a05c:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 800a060:	4649      	mov	r1, r9
 800a062:	00cb      	lsls	r3, r1, #3
 800a064:	4641      	mov	r1, r8
 800a066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a06a:	4641      	mov	r1, r8
 800a06c:	00ca      	lsls	r2, r1, #3
 800a06e:	4610      	mov	r0, r2
 800a070:	4619      	mov	r1, r3
 800a072:	4603      	mov	r3, r0
 800a074:	4622      	mov	r2, r4
 800a076:	189b      	adds	r3, r3, r2
 800a078:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800a07c:	462b      	mov	r3, r5
 800a07e:	460a      	mov	r2, r1
 800a080:	eb42 0303 	adc.w	r3, r2, r3
 800a084:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 800a088:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a08c:	685b      	ldr	r3, [r3, #4]
 800a08e:	2200      	movs	r2, #0
 800a090:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800a094:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 800a098:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 800a09c:	460b      	mov	r3, r1
 800a09e:	18db      	adds	r3, r3, r3
 800a0a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a0a4:	4613      	mov	r3, r2
 800a0a6:	eb42 0303 	adc.w	r3, r2, r3
 800a0aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a0ae:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800a0b2:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800a0b6:	f7f6 f903 	bl	80002c0 <__aeabi_uldivmod>
 800a0ba:	4602      	mov	r2, r0
 800a0bc:	460b      	mov	r3, r1
 800a0be:	4b6b      	ldr	r3, [pc, #428]	; (800a26c <UART_SetConfig+0x320>)
 800a0c0:	fba3 2302 	umull	r2, r3, r3, r2
 800a0c4:	095b      	lsrs	r3, r3, #5
 800a0c6:	011c      	lsls	r4, r3, #4
 800a0c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800a0d2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800a0d6:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 800a0da:	4642      	mov	r2, r8
 800a0dc:	464b      	mov	r3, r9
 800a0de:	1891      	adds	r1, r2, r2
 800a0e0:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800a0e4:	415b      	adcs	r3, r3
 800a0e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a0ea:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800a0ee:	4641      	mov	r1, r8
 800a0f0:	1851      	adds	r1, r2, r1
 800a0f2:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	414b      	adcs	r3, r1
 800a0fa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0fe:	f04f 0200 	mov.w	r2, #0
 800a102:	f04f 0300 	mov.w	r3, #0
 800a106:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 800a10a:	4659      	mov	r1, fp
 800a10c:	00cb      	lsls	r3, r1, #3
 800a10e:	4651      	mov	r1, sl
 800a110:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a114:	4651      	mov	r1, sl
 800a116:	00ca      	lsls	r2, r1, #3
 800a118:	4610      	mov	r0, r2
 800a11a:	4619      	mov	r1, r3
 800a11c:	4603      	mov	r3, r0
 800a11e:	4642      	mov	r2, r8
 800a120:	189b      	adds	r3, r3, r2
 800a122:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800a126:	464b      	mov	r3, r9
 800a128:	460a      	mov	r2, r1
 800a12a:	eb42 0303 	adc.w	r3, r2, r3
 800a12e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800a132:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800a13e:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800a142:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800a146:	460b      	mov	r3, r1
 800a148:	18db      	adds	r3, r3, r3
 800a14a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a14e:	4613      	mov	r3, r2
 800a150:	eb42 0303 	adc.w	r3, r2, r3
 800a154:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a158:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 800a15c:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800a160:	f7f6 f8ae 	bl	80002c0 <__aeabi_uldivmod>
 800a164:	4602      	mov	r2, r0
 800a166:	460b      	mov	r3, r1
 800a168:	4611      	mov	r1, r2
 800a16a:	4b40      	ldr	r3, [pc, #256]	; (800a26c <UART_SetConfig+0x320>)
 800a16c:	fba3 2301 	umull	r2, r3, r3, r1
 800a170:	095b      	lsrs	r3, r3, #5
 800a172:	2264      	movs	r2, #100	; 0x64
 800a174:	fb02 f303 	mul.w	r3, r2, r3
 800a178:	1acb      	subs	r3, r1, r3
 800a17a:	00db      	lsls	r3, r3, #3
 800a17c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a180:	4b3a      	ldr	r3, [pc, #232]	; (800a26c <UART_SetConfig+0x320>)
 800a182:	fba3 2302 	umull	r2, r3, r3, r2
 800a186:	095b      	lsrs	r3, r3, #5
 800a188:	005b      	lsls	r3, r3, #1
 800a18a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a18e:	441c      	add	r4, r3
 800a190:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a194:	2200      	movs	r2, #0
 800a196:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800a19a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800a19e:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800a1a2:	4642      	mov	r2, r8
 800a1a4:	464b      	mov	r3, r9
 800a1a6:	1891      	adds	r1, r2, r2
 800a1a8:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 800a1ac:	415b      	adcs	r3, r3
 800a1ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a1b2:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800a1b6:	4641      	mov	r1, r8
 800a1b8:	1851      	adds	r1, r2, r1
 800a1ba:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 800a1be:	4649      	mov	r1, r9
 800a1c0:	414b      	adcs	r3, r1
 800a1c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a1c6:	f04f 0200 	mov.w	r2, #0
 800a1ca:	f04f 0300 	mov.w	r3, #0
 800a1ce:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800a1d2:	4659      	mov	r1, fp
 800a1d4:	00cb      	lsls	r3, r1, #3
 800a1d6:	4651      	mov	r1, sl
 800a1d8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1dc:	4651      	mov	r1, sl
 800a1de:	00ca      	lsls	r2, r1, #3
 800a1e0:	4610      	mov	r0, r2
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	4642      	mov	r2, r8
 800a1e8:	189b      	adds	r3, r3, r2
 800a1ea:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800a1ee:	464b      	mov	r3, r9
 800a1f0:	460a      	mov	r2, r1
 800a1f2:	eb42 0303 	adc.w	r3, r2, r3
 800a1f6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 800a1fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	2200      	movs	r2, #0
 800a202:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800a206:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 800a20a:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800a20e:	460b      	mov	r3, r1
 800a210:	18db      	adds	r3, r3, r3
 800a212:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a216:	4613      	mov	r3, r2
 800a218:	eb42 0303 	adc.w	r3, r2, r3
 800a21c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a220:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800a224:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 800a228:	f7f6 f84a 	bl	80002c0 <__aeabi_uldivmod>
 800a22c:	4602      	mov	r2, r0
 800a22e:	460b      	mov	r3, r1
 800a230:	4b0e      	ldr	r3, [pc, #56]	; (800a26c <UART_SetConfig+0x320>)
 800a232:	fba3 1302 	umull	r1, r3, r3, r2
 800a236:	095b      	lsrs	r3, r3, #5
 800a238:	2164      	movs	r1, #100	; 0x64
 800a23a:	fb01 f303 	mul.w	r3, r1, r3
 800a23e:	1ad3      	subs	r3, r2, r3
 800a240:	00db      	lsls	r3, r3, #3
 800a242:	3332      	adds	r3, #50	; 0x32
 800a244:	4a09      	ldr	r2, [pc, #36]	; (800a26c <UART_SetConfig+0x320>)
 800a246:	fba2 2303 	umull	r2, r3, r2, r3
 800a24a:	095b      	lsrs	r3, r3, #5
 800a24c:	f003 0207 	and.w	r2, r3, #7
 800a250:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4422      	add	r2, r4
 800a258:	609a      	str	r2, [r3, #8]
 800a25a:	e35d      	b.n	800a918 <UART_SetConfig+0x9cc>
 800a25c:	40011000 	.word	0x40011000
 800a260:	40011400 	.word	0x40011400
 800a264:	40011800 	.word	0x40011800
 800a268:	40011c00 	.word	0x40011c00
 800a26c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a270:	f7fd fa2a 	bl	80076c8 <HAL_RCC_GetPCLK1Freq>
 800a274:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a278:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a27c:	2200      	movs	r2, #0
 800a27e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800a282:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 800a286:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800a28a:	4622      	mov	r2, r4
 800a28c:	462b      	mov	r3, r5
 800a28e:	1891      	adds	r1, r2, r2
 800a290:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 800a294:	415b      	adcs	r3, r3
 800a296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a29a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800a29e:	4621      	mov	r1, r4
 800a2a0:	eb12 0a01 	adds.w	sl, r2, r1
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	eb43 0b01 	adc.w	fp, r3, r1
 800a2aa:	f04f 0200 	mov.w	r2, #0
 800a2ae:	f04f 0300 	mov.w	r3, #0
 800a2b2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a2b6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a2ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a2be:	4692      	mov	sl, r2
 800a2c0:	469b      	mov	fp, r3
 800a2c2:	4623      	mov	r3, r4
 800a2c4:	eb1a 0303 	adds.w	r3, sl, r3
 800a2c8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	eb4b 0303 	adc.w	r3, fp, r3
 800a2d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800a2d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800a2e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800a2e6:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	18db      	adds	r3, r3, r3
 800a2ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	eb42 0303 	adc.w	r3, r2, r3
 800a2f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a2fc:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800a300:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800a304:	f7f5 ffdc 	bl	80002c0 <__aeabi_uldivmod>
 800a308:	4602      	mov	r2, r0
 800a30a:	460b      	mov	r3, r1
 800a30c:	4b61      	ldr	r3, [pc, #388]	; (800a494 <UART_SetConfig+0x548>)
 800a30e:	fba3 2302 	umull	r2, r3, r3, r2
 800a312:	095b      	lsrs	r3, r3, #5
 800a314:	011c      	lsls	r4, r3, #4
 800a316:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a31a:	2200      	movs	r2, #0
 800a31c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800a320:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800a324:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 800a328:	4642      	mov	r2, r8
 800a32a:	464b      	mov	r3, r9
 800a32c:	1891      	adds	r1, r2, r2
 800a32e:	67b9      	str	r1, [r7, #120]	; 0x78
 800a330:	415b      	adcs	r3, r3
 800a332:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a334:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800a338:	4641      	mov	r1, r8
 800a33a:	1851      	adds	r1, r2, r1
 800a33c:	6739      	str	r1, [r7, #112]	; 0x70
 800a33e:	4649      	mov	r1, r9
 800a340:	414b      	adcs	r3, r1
 800a342:	677b      	str	r3, [r7, #116]	; 0x74
 800a344:	f04f 0200 	mov.w	r2, #0
 800a348:	f04f 0300 	mov.w	r3, #0
 800a34c:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 800a350:	4659      	mov	r1, fp
 800a352:	00cb      	lsls	r3, r1, #3
 800a354:	4651      	mov	r1, sl
 800a356:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a35a:	4651      	mov	r1, sl
 800a35c:	00ca      	lsls	r2, r1, #3
 800a35e:	4610      	mov	r0, r2
 800a360:	4619      	mov	r1, r3
 800a362:	4603      	mov	r3, r0
 800a364:	4642      	mov	r2, r8
 800a366:	189b      	adds	r3, r3, r2
 800a368:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800a36c:	464b      	mov	r3, r9
 800a36e:	460a      	mov	r2, r1
 800a370:	eb42 0303 	adc.w	r3, r2, r3
 800a374:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800a378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800a384:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 800a388:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 800a38c:	460b      	mov	r3, r1
 800a38e:	18db      	adds	r3, r3, r3
 800a390:	66bb      	str	r3, [r7, #104]	; 0x68
 800a392:	4613      	mov	r3, r2
 800a394:	eb42 0303 	adc.w	r3, r2, r3
 800a398:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a39a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a39e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800a3a2:	f7f5 ff8d 	bl	80002c0 <__aeabi_uldivmod>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	460b      	mov	r3, r1
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	4b39      	ldr	r3, [pc, #228]	; (800a494 <UART_SetConfig+0x548>)
 800a3ae:	fba3 2301 	umull	r2, r3, r3, r1
 800a3b2:	095b      	lsrs	r3, r3, #5
 800a3b4:	2264      	movs	r2, #100	; 0x64
 800a3b6:	fb02 f303 	mul.w	r3, r2, r3
 800a3ba:	1acb      	subs	r3, r1, r3
 800a3bc:	00db      	lsls	r3, r3, #3
 800a3be:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a3c2:	4b34      	ldr	r3, [pc, #208]	; (800a494 <UART_SetConfig+0x548>)
 800a3c4:	fba3 2302 	umull	r2, r3, r3, r2
 800a3c8:	095b      	lsrs	r3, r3, #5
 800a3ca:	005b      	lsls	r3, r3, #1
 800a3cc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a3d0:	441c      	add	r4, r3
 800a3d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800a3dc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800a3e0:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	1891      	adds	r1, r2, r2
 800a3ea:	6639      	str	r1, [r7, #96]	; 0x60
 800a3ec:	415b      	adcs	r3, r3
 800a3ee:	667b      	str	r3, [r7, #100]	; 0x64
 800a3f0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800a3f4:	4641      	mov	r1, r8
 800a3f6:	1851      	adds	r1, r2, r1
 800a3f8:	65b9      	str	r1, [r7, #88]	; 0x58
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	414b      	adcs	r3, r1
 800a3fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a400:	f04f 0200 	mov.w	r2, #0
 800a404:	f04f 0300 	mov.w	r3, #0
 800a408:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 800a40c:	4659      	mov	r1, fp
 800a40e:	00cb      	lsls	r3, r1, #3
 800a410:	4651      	mov	r1, sl
 800a412:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a416:	4651      	mov	r1, sl
 800a418:	00ca      	lsls	r2, r1, #3
 800a41a:	4610      	mov	r0, r2
 800a41c:	4619      	mov	r1, r3
 800a41e:	4603      	mov	r3, r0
 800a420:	4642      	mov	r2, r8
 800a422:	189b      	adds	r3, r3, r2
 800a424:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800a428:	464b      	mov	r3, r9
 800a42a:	460a      	mov	r2, r1
 800a42c:	eb42 0303 	adc.w	r3, r2, r3
 800a430:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800a434:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a438:	685b      	ldr	r3, [r3, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800a440:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800a444:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 800a448:	460b      	mov	r3, r1
 800a44a:	18db      	adds	r3, r3, r3
 800a44c:	653b      	str	r3, [r7, #80]	; 0x50
 800a44e:	4613      	mov	r3, r2
 800a450:	eb42 0303 	adc.w	r3, r2, r3
 800a454:	657b      	str	r3, [r7, #84]	; 0x54
 800a456:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a45a:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 800a45e:	f7f5 ff2f 	bl	80002c0 <__aeabi_uldivmod>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4b0b      	ldr	r3, [pc, #44]	; (800a494 <UART_SetConfig+0x548>)
 800a468:	fba3 1302 	umull	r1, r3, r3, r2
 800a46c:	095b      	lsrs	r3, r3, #5
 800a46e:	2164      	movs	r1, #100	; 0x64
 800a470:	fb01 f303 	mul.w	r3, r1, r3
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	3332      	adds	r3, #50	; 0x32
 800a47a:	4a06      	ldr	r2, [pc, #24]	; (800a494 <UART_SetConfig+0x548>)
 800a47c:	fba2 2303 	umull	r2, r3, r2, r3
 800a480:	095b      	lsrs	r3, r3, #5
 800a482:	f003 0207 	and.w	r2, r3, #7
 800a486:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4422      	add	r2, r4
 800a48e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800a490:	e242      	b.n	800a918 <UART_SetConfig+0x9cc>
 800a492:	bf00      	nop
 800a494:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800a498:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a49c:	681a      	ldr	r2, [r3, #0]
 800a49e:	4b93      	ldr	r3, [pc, #588]	; (800a6ec <UART_SetConfig+0x7a0>)
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d012      	beq.n	800a4ca <UART_SetConfig+0x57e>
 800a4a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a4a8:	681a      	ldr	r2, [r3, #0]
 800a4aa:	4b91      	ldr	r3, [pc, #580]	; (800a6f0 <UART_SetConfig+0x7a4>)
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	d00c      	beq.n	800a4ca <UART_SetConfig+0x57e>
 800a4b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	4b8f      	ldr	r3, [pc, #572]	; (800a6f4 <UART_SetConfig+0x7a8>)
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	d006      	beq.n	800a4ca <UART_SetConfig+0x57e>
 800a4bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	4b8d      	ldr	r3, [pc, #564]	; (800a6f8 <UART_SetConfig+0x7ac>)
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	f040 811b 	bne.w	800a700 <UART_SetConfig+0x7b4>
      pclk = HAL_RCC_GetPCLK2Freq();
 800a4ca:	f7fd f911 	bl	80076f0 <HAL_RCC_GetPCLK2Freq>
 800a4ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a4d2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800a4dc:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800a4e0:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800a4e4:	4622      	mov	r2, r4
 800a4e6:	462b      	mov	r3, r5
 800a4e8:	1891      	adds	r1, r2, r2
 800a4ea:	64b9      	str	r1, [r7, #72]	; 0x48
 800a4ec:	415b      	adcs	r3, r3
 800a4ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4f0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a4f4:	4621      	mov	r1, r4
 800a4f6:	eb12 0801 	adds.w	r8, r2, r1
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	eb43 0901 	adc.w	r9, r3, r1
 800a500:	f04f 0200 	mov.w	r2, #0
 800a504:	f04f 0300 	mov.w	r3, #0
 800a508:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a50c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a510:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a514:	4690      	mov	r8, r2
 800a516:	4699      	mov	r9, r3
 800a518:	4623      	mov	r3, r4
 800a51a:	eb18 0303 	adds.w	r3, r8, r3
 800a51e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800a522:	462b      	mov	r3, r5
 800a524:	eb49 0303 	adc.w	r3, r9, r3
 800a528:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800a52c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800a538:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 800a53c:	f04f 0200 	mov.w	r2, #0
 800a540:	f04f 0300 	mov.w	r3, #0
 800a544:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 800a548:	4629      	mov	r1, r5
 800a54a:	008b      	lsls	r3, r1, #2
 800a54c:	4621      	mov	r1, r4
 800a54e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a552:	4621      	mov	r1, r4
 800a554:	008a      	lsls	r2, r1, #2
 800a556:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 800a55a:	f7f5 feb1 	bl	80002c0 <__aeabi_uldivmod>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4b66      	ldr	r3, [pc, #408]	; (800a6fc <UART_SetConfig+0x7b0>)
 800a564:	fba3 2302 	umull	r2, r3, r3, r2
 800a568:	095b      	lsrs	r3, r3, #5
 800a56a:	011c      	lsls	r4, r3, #4
 800a56c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a570:	2200      	movs	r2, #0
 800a572:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 800a576:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800a57a:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800a57e:	4642      	mov	r2, r8
 800a580:	464b      	mov	r3, r9
 800a582:	1891      	adds	r1, r2, r2
 800a584:	6439      	str	r1, [r7, #64]	; 0x40
 800a586:	415b      	adcs	r3, r3
 800a588:	647b      	str	r3, [r7, #68]	; 0x44
 800a58a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a58e:	4641      	mov	r1, r8
 800a590:	1851      	adds	r1, r2, r1
 800a592:	63b9      	str	r1, [r7, #56]	; 0x38
 800a594:	4649      	mov	r1, r9
 800a596:	414b      	adcs	r3, r1
 800a598:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a59a:	f04f 0200 	mov.w	r2, #0
 800a59e:	f04f 0300 	mov.w	r3, #0
 800a5a2:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800a5a6:	4659      	mov	r1, fp
 800a5a8:	00cb      	lsls	r3, r1, #3
 800a5aa:	4651      	mov	r1, sl
 800a5ac:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5b0:	4651      	mov	r1, sl
 800a5b2:	00ca      	lsls	r2, r1, #3
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4603      	mov	r3, r0
 800a5ba:	4642      	mov	r2, r8
 800a5bc:	189b      	adds	r3, r3, r2
 800a5be:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800a5c2:	464b      	mov	r3, r9
 800a5c4:	460a      	mov	r2, r1
 800a5c6:	eb42 0303 	adc.w	r3, r2, r3
 800a5ca:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800a5ce:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a5d2:	685b      	ldr	r3, [r3, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 800a5da:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800a5de:	f04f 0200 	mov.w	r2, #0
 800a5e2:	f04f 0300 	mov.w	r3, #0
 800a5e6:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 800a5ea:	4649      	mov	r1, r9
 800a5ec:	008b      	lsls	r3, r1, #2
 800a5ee:	4641      	mov	r1, r8
 800a5f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5f4:	4641      	mov	r1, r8
 800a5f6:	008a      	lsls	r2, r1, #2
 800a5f8:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 800a5fc:	f7f5 fe60 	bl	80002c0 <__aeabi_uldivmod>
 800a600:	4602      	mov	r2, r0
 800a602:	460b      	mov	r3, r1
 800a604:	4b3d      	ldr	r3, [pc, #244]	; (800a6fc <UART_SetConfig+0x7b0>)
 800a606:	fba3 1302 	umull	r1, r3, r3, r2
 800a60a:	095b      	lsrs	r3, r3, #5
 800a60c:	2164      	movs	r1, #100	; 0x64
 800a60e:	fb01 f303 	mul.w	r3, r1, r3
 800a612:	1ad3      	subs	r3, r2, r3
 800a614:	011b      	lsls	r3, r3, #4
 800a616:	3332      	adds	r3, #50	; 0x32
 800a618:	4a38      	ldr	r2, [pc, #224]	; (800a6fc <UART_SetConfig+0x7b0>)
 800a61a:	fba2 2303 	umull	r2, r3, r2, r3
 800a61e:	095b      	lsrs	r3, r3, #5
 800a620:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a624:	441c      	add	r4, r3
 800a626:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a62a:	2200      	movs	r2, #0
 800a62c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800a630:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 800a634:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 800a638:	4642      	mov	r2, r8
 800a63a:	464b      	mov	r3, r9
 800a63c:	1891      	adds	r1, r2, r2
 800a63e:	6339      	str	r1, [r7, #48]	; 0x30
 800a640:	415b      	adcs	r3, r3
 800a642:	637b      	str	r3, [r7, #52]	; 0x34
 800a644:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800a648:	4641      	mov	r1, r8
 800a64a:	1851      	adds	r1, r2, r1
 800a64c:	62b9      	str	r1, [r7, #40]	; 0x28
 800a64e:	4649      	mov	r1, r9
 800a650:	414b      	adcs	r3, r1
 800a652:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a654:	f04f 0200 	mov.w	r2, #0
 800a658:	f04f 0300 	mov.w	r3, #0
 800a65c:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800a660:	4659      	mov	r1, fp
 800a662:	00cb      	lsls	r3, r1, #3
 800a664:	4651      	mov	r1, sl
 800a666:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a66a:	4651      	mov	r1, sl
 800a66c:	00ca      	lsls	r2, r1, #3
 800a66e:	4610      	mov	r0, r2
 800a670:	4619      	mov	r1, r3
 800a672:	4603      	mov	r3, r0
 800a674:	4642      	mov	r2, r8
 800a676:	189b      	adds	r3, r3, r2
 800a678:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a67c:	464b      	mov	r3, r9
 800a67e:	460a      	mov	r2, r1
 800a680:	eb42 0303 	adc.w	r3, r2, r3
 800a684:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a688:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a694:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 800a698:	f04f 0200 	mov.w	r2, #0
 800a69c:	f04f 0300 	mov.w	r3, #0
 800a6a0:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 800a6a4:	4649      	mov	r1, r9
 800a6a6:	008b      	lsls	r3, r1, #2
 800a6a8:	4641      	mov	r1, r8
 800a6aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6ae:	4641      	mov	r1, r8
 800a6b0:	008a      	lsls	r2, r1, #2
 800a6b2:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 800a6b6:	f7f5 fe03 	bl	80002c0 <__aeabi_uldivmod>
 800a6ba:	4602      	mov	r2, r0
 800a6bc:	460b      	mov	r3, r1
 800a6be:	4b0f      	ldr	r3, [pc, #60]	; (800a6fc <UART_SetConfig+0x7b0>)
 800a6c0:	fba3 1302 	umull	r1, r3, r3, r2
 800a6c4:	095b      	lsrs	r3, r3, #5
 800a6c6:	2164      	movs	r1, #100	; 0x64
 800a6c8:	fb01 f303 	mul.w	r3, r1, r3
 800a6cc:	1ad3      	subs	r3, r2, r3
 800a6ce:	011b      	lsls	r3, r3, #4
 800a6d0:	3332      	adds	r3, #50	; 0x32
 800a6d2:	4a0a      	ldr	r2, [pc, #40]	; (800a6fc <UART_SetConfig+0x7b0>)
 800a6d4:	fba2 2303 	umull	r2, r3, r2, r3
 800a6d8:	095b      	lsrs	r3, r3, #5
 800a6da:	f003 020f 	and.w	r2, r3, #15
 800a6de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4422      	add	r2, r4
 800a6e6:	609a      	str	r2, [r3, #8]
 800a6e8:	e116      	b.n	800a918 <UART_SetConfig+0x9cc>
 800a6ea:	bf00      	nop
 800a6ec:	40011000 	.word	0x40011000
 800a6f0:	40011400 	.word	0x40011400
 800a6f4:	40011800 	.word	0x40011800
 800a6f8:	40011c00 	.word	0x40011c00
 800a6fc:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800a700:	f7fc ffe2 	bl	80076c8 <HAL_RCC_GetPCLK1Freq>
 800a704:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a708:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a70c:	2200      	movs	r2, #0
 800a70e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800a712:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800a716:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800a71a:	4642      	mov	r2, r8
 800a71c:	464b      	mov	r3, r9
 800a71e:	1891      	adds	r1, r2, r2
 800a720:	6239      	str	r1, [r7, #32]
 800a722:	415b      	adcs	r3, r3
 800a724:	627b      	str	r3, [r7, #36]	; 0x24
 800a726:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a72a:	4641      	mov	r1, r8
 800a72c:	1854      	adds	r4, r2, r1
 800a72e:	4649      	mov	r1, r9
 800a730:	eb43 0501 	adc.w	r5, r3, r1
 800a734:	f04f 0200 	mov.w	r2, #0
 800a738:	f04f 0300 	mov.w	r3, #0
 800a73c:	00eb      	lsls	r3, r5, #3
 800a73e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a742:	00e2      	lsls	r2, r4, #3
 800a744:	4614      	mov	r4, r2
 800a746:	461d      	mov	r5, r3
 800a748:	4643      	mov	r3, r8
 800a74a:	18e3      	adds	r3, r4, r3
 800a74c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800a750:	464b      	mov	r3, r9
 800a752:	eb45 0303 	adc.w	r3, r5, r3
 800a756:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800a75a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a75e:	685b      	ldr	r3, [r3, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800a766:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800a76a:	f04f 0200 	mov.w	r2, #0
 800a76e:	f04f 0300 	mov.w	r3, #0
 800a772:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800a776:	4629      	mov	r1, r5
 800a778:	008b      	lsls	r3, r1, #2
 800a77a:	4621      	mov	r1, r4
 800a77c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a780:	4621      	mov	r1, r4
 800a782:	008a      	lsls	r2, r1, #2
 800a784:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800a788:	f7f5 fd9a 	bl	80002c0 <__aeabi_uldivmod>
 800a78c:	4602      	mov	r2, r0
 800a78e:	460b      	mov	r3, r1
 800a790:	4b64      	ldr	r3, [pc, #400]	; (800a924 <UART_SetConfig+0x9d8>)
 800a792:	fba3 2302 	umull	r2, r3, r3, r2
 800a796:	095b      	lsrs	r3, r3, #5
 800a798:	011c      	lsls	r4, r3, #4
 800a79a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a7a4:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 800a7a8:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 800a7ac:	4642      	mov	r2, r8
 800a7ae:	464b      	mov	r3, r9
 800a7b0:	1891      	adds	r1, r2, r2
 800a7b2:	61b9      	str	r1, [r7, #24]
 800a7b4:	415b      	adcs	r3, r3
 800a7b6:	61fb      	str	r3, [r7, #28]
 800a7b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a7bc:	4641      	mov	r1, r8
 800a7be:	1851      	adds	r1, r2, r1
 800a7c0:	6139      	str	r1, [r7, #16]
 800a7c2:	4649      	mov	r1, r9
 800a7c4:	414b      	adcs	r3, r1
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	f04f 0200 	mov.w	r2, #0
 800a7cc:	f04f 0300 	mov.w	r3, #0
 800a7d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a7d4:	4659      	mov	r1, fp
 800a7d6:	00cb      	lsls	r3, r1, #3
 800a7d8:	4651      	mov	r1, sl
 800a7da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a7de:	4651      	mov	r1, sl
 800a7e0:	00ca      	lsls	r2, r1, #3
 800a7e2:	4610      	mov	r0, r2
 800a7e4:	4619      	mov	r1, r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	4642      	mov	r2, r8
 800a7ea:	189b      	adds	r3, r3, r2
 800a7ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800a7f0:	464b      	mov	r3, r9
 800a7f2:	460a      	mov	r2, r1
 800a7f4:	eb42 0303 	adc.w	r3, r2, r3
 800a7f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a7fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800a808:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 800a80c:	f04f 0200 	mov.w	r2, #0
 800a810:	f04f 0300 	mov.w	r3, #0
 800a814:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800a818:	4649      	mov	r1, r9
 800a81a:	008b      	lsls	r3, r1, #2
 800a81c:	4641      	mov	r1, r8
 800a81e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a822:	4641      	mov	r1, r8
 800a824:	008a      	lsls	r2, r1, #2
 800a826:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800a82a:	f7f5 fd49 	bl	80002c0 <__aeabi_uldivmod>
 800a82e:	4602      	mov	r2, r0
 800a830:	460b      	mov	r3, r1
 800a832:	4b3c      	ldr	r3, [pc, #240]	; (800a924 <UART_SetConfig+0x9d8>)
 800a834:	fba3 1302 	umull	r1, r3, r3, r2
 800a838:	095b      	lsrs	r3, r3, #5
 800a83a:	2164      	movs	r1, #100	; 0x64
 800a83c:	fb01 f303 	mul.w	r3, r1, r3
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	011b      	lsls	r3, r3, #4
 800a844:	3332      	adds	r3, #50	; 0x32
 800a846:	4a37      	ldr	r2, [pc, #220]	; (800a924 <UART_SetConfig+0x9d8>)
 800a848:	fba2 2303 	umull	r2, r3, r2, r3
 800a84c:	095b      	lsrs	r3, r3, #5
 800a84e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a852:	441c      	add	r4, r3
 800a854:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800a858:	2200      	movs	r2, #0
 800a85a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a85e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a862:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800a866:	4642      	mov	r2, r8
 800a868:	464b      	mov	r3, r9
 800a86a:	1891      	adds	r1, r2, r2
 800a86c:	60b9      	str	r1, [r7, #8]
 800a86e:	415b      	adcs	r3, r3
 800a870:	60fb      	str	r3, [r7, #12]
 800a872:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a876:	4641      	mov	r1, r8
 800a878:	1851      	adds	r1, r2, r1
 800a87a:	6039      	str	r1, [r7, #0]
 800a87c:	4649      	mov	r1, r9
 800a87e:	414b      	adcs	r3, r1
 800a880:	607b      	str	r3, [r7, #4]
 800a882:	f04f 0200 	mov.w	r2, #0
 800a886:	f04f 0300 	mov.w	r3, #0
 800a88a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a88e:	4659      	mov	r1, fp
 800a890:	00cb      	lsls	r3, r1, #3
 800a892:	4651      	mov	r1, sl
 800a894:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a898:	4651      	mov	r1, sl
 800a89a:	00ca      	lsls	r2, r1, #3
 800a89c:	4610      	mov	r0, r2
 800a89e:	4619      	mov	r1, r3
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	4642      	mov	r2, r8
 800a8a4:	189b      	adds	r3, r3, r2
 800a8a6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8aa:	464b      	mov	r3, r9
 800a8ac:	460a      	mov	r2, r1
 800a8ae:	eb42 0303 	adc.w	r3, r2, r3
 800a8b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8b6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a8ba:	685b      	ldr	r3, [r3, #4]
 800a8bc:	2200      	movs	r2, #0
 800a8be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8c2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a8c6:	f04f 0200 	mov.w	r2, #0
 800a8ca:	f04f 0300 	mov.w	r3, #0
 800a8ce:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800a8d2:	4649      	mov	r1, r9
 800a8d4:	008b      	lsls	r3, r1, #2
 800a8d6:	4641      	mov	r1, r8
 800a8d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a8dc:	4641      	mov	r1, r8
 800a8de:	008a      	lsls	r2, r1, #2
 800a8e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a8e4:	f7f5 fcec 	bl	80002c0 <__aeabi_uldivmod>
 800a8e8:	4602      	mov	r2, r0
 800a8ea:	460b      	mov	r3, r1
 800a8ec:	4b0d      	ldr	r3, [pc, #52]	; (800a924 <UART_SetConfig+0x9d8>)
 800a8ee:	fba3 1302 	umull	r1, r3, r3, r2
 800a8f2:	095b      	lsrs	r3, r3, #5
 800a8f4:	2164      	movs	r1, #100	; 0x64
 800a8f6:	fb01 f303 	mul.w	r3, r1, r3
 800a8fa:	1ad3      	subs	r3, r2, r3
 800a8fc:	011b      	lsls	r3, r3, #4
 800a8fe:	3332      	adds	r3, #50	; 0x32
 800a900:	4a08      	ldr	r2, [pc, #32]	; (800a924 <UART_SetConfig+0x9d8>)
 800a902:	fba2 2303 	umull	r2, r3, r2, r3
 800a906:	095b      	lsrs	r3, r3, #5
 800a908:	f003 020f 	and.w	r2, r3, #15
 800a90c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	4422      	add	r2, r4
 800a914:	609a      	str	r2, [r3, #8]
}
 800a916:	e7ff      	b.n	800a918 <UART_SetConfig+0x9cc>
 800a918:	bf00      	nop
 800a91a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800a91e:	46bd      	mov	sp, r7
 800a920:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a924:	51eb851f 	.word	0x51eb851f

0800a928 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
 800a930:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800a932:	2300      	movs	r3, #0
 800a934:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	681a      	ldr	r2, [r3, #0]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a940:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	4b2f      	ldr	r3, [pc, #188]	; (800aa04 <FSMC_NORSRAM_Init+0xdc>)
 800a946:	4013      	ands	r3, r2
 800a948:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a952:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 800a958:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 800a95e:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800a964:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 800a96a:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 800a970:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 800a976:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 800a97c:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 800a982:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 800a988:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 800a98e:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 800a994:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 800a99a:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	2b08      	cmp	r3, #8
 800a9a8:	d103      	bne.n	800a9b2 <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9b0:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 800a9b2:	683b      	ldr	r3, [r7, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	68f9      	ldr	r1, [r7, #12]
 800a9ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9c6:	d10a      	bne.n	800a9de <FSMC_NORSRAM_Init+0xb6>
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d006      	beq.n	800a9de <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d8:	431a      	orrs	r2, r3
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d006      	beq.n	800a9f4 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3714      	adds	r7, #20
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa00:	4770      	bx	lr
 800aa02:	bf00      	nop
 800aa04:	ffc00480 	.word	0xffc00480

0800aa08 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b087      	sub	sp, #28
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 800aa14:	2300      	movs	r3, #0
 800aa16:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa22:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 800aa2a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	685b      	ldr	r3, [r3, #4]
 800aa34:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800aa36:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	689b      	ldr	r3, [r3, #8]
 800aa3c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800aa3e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	68db      	ldr	r3, [r3, #12]
 800aa44:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 800aa46:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800aa50:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	695b      	ldr	r3, [r3, #20]
 800aa56:	3b02      	subs	r3, #2
 800aa58:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 800aa5a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800aa60:	4313      	orrs	r3, r2
 800aa62:	697a      	ldr	r2, [r7, #20]
 800aa64:	4313      	orrs	r3, r2
 800aa66:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	1c5a      	adds	r2, r3, #1
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6979      	ldr	r1, [r7, #20]
 800aa70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa80:	d10e      	bne.n	800aaa0 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	685b      	ldr	r3, [r3, #4]
 800aa86:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aa8a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	051b      	lsls	r3, r3, #20
 800aa94:	697a      	ldr	r2, [r7, #20]
 800aa96:	4313      	orrs	r3, r2
 800aa98:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	697a      	ldr	r2, [r7, #20]
 800aa9e:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	371c      	adds	r7, #28
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr
	...

0800aab0 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b087      	sub	sp, #28
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800aabe:	2300      	movs	r3, #0
 800aac0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aac8:	d122      	bne.n	800ab10 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aad2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 800aad4:	697a      	ldr	r2, [r7, #20]
 800aad6:	4b15      	ldr	r3, [pc, #84]	; (800ab2c <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 800aad8:	4013      	ands	r3, r2
 800aada:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	685b      	ldr	r3, [r3, #4]
 800aae4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800aae6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	689b      	ldr	r3, [r3, #8]
 800aaec:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800aaee:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	68db      	ldr	r3, [r3, #12]
 800aaf4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 800aaf6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800aafc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800aafe:	697a      	ldr	r2, [r7, #20]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	687a      	ldr	r2, [r7, #4]
 800ab08:	6979      	ldr	r1, [r7, #20]
 800ab0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ab0e:	e005      	b.n	800ab1c <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ab18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 800ab1c:	2300      	movs	r3, #0
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	371c      	adds	r7, #28
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
 800ab2a:	bf00      	nop
 800ab2c:	cff00000 	.word	0xcff00000

0800ab30 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800ab30:	b084      	sub	sp, #16
 800ab32:	b480      	push	{r7}
 800ab34:	b085      	sub	sp, #20
 800ab36:	af00      	add	r7, sp, #0
 800ab38:	6078      	str	r0, [r7, #4]
 800ab3a:	f107 001c 	add.w	r0, r7, #28
 800ab3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ab46:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ab48:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ab4a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ab4e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ab52:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ab56:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ab58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ab5a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ab5c:	68fa      	ldr	r2, [r7, #12]
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	685b      	ldr	r3, [r3, #4]
 800ab66:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800ab6a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab6e:	68fa      	ldr	r2, [r7, #12]
 800ab70:	431a      	orrs	r2, r3
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ab76:	2300      	movs	r3, #0
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3714      	adds	r7, #20
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab82:	b004      	add	sp, #16
 800ab84:	4770      	bx	lr

0800ab86 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800ab86:	b480      	push	{r7}
 800ab88:	b083      	sub	sp, #12
 800ab8a:	af00      	add	r7, sp, #0
 800ab8c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ab94:	4618      	mov	r0, r3
 800ab96:	370c      	adds	r7, #12
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9e:	4770      	bx	lr

0800aba0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800aba0:	b480      	push	{r7}
 800aba2:	b083      	sub	sp, #12
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
 800aba8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	370c      	adds	r7, #12
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr

0800abc2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2203      	movs	r2, #3
 800abce:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800abd0:	2002      	movs	r0, #2
 800abd2:	f7f8 fd5d 	bl	8003690 <HAL_Delay>
  
  return HAL_OK;
 800abd6:	2300      	movs	r3, #0
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3708      	adds	r7, #8
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f003 0303 	and.w	r3, r3, #3
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	370c      	adds	r7, #12
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac06:	2300      	movs	r3, #0
 800ac08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac1a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ac20:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ac26:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ac36:	f023 030f 	bic.w	r3, r3, #15
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	431a      	orrs	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3714      	adds	r7, #20
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	b2db      	uxtb	r3, r3
}
 800ac5e:	4618      	mov	r0, r3
 800ac60:	370c      	adds	r7, #12
 800ac62:	46bd      	mov	sp, r7
 800ac64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac68:	4770      	bx	lr

0800ac6a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800ac6a:	b480      	push	{r7}
 800ac6c:	b085      	sub	sp, #20
 800ac6e:	af00      	add	r7, sp, #0
 800ac70:	6078      	str	r0, [r7, #4]
 800ac72:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	3314      	adds	r3, #20
 800ac78:	461a      	mov	r2, r3
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	4413      	add	r3, r2
 800ac7e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
}  
 800ac84:	4618      	mov	r0, r3
 800ac86:	3714      	adds	r7, #20
 800ac88:	46bd      	mov	sp, r7
 800ac8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8e:	4770      	bx	lr

0800ac90 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800ac90:	b480      	push	{r7}
 800ac92:	b085      	sub	sp, #20
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	681a      	ldr	r2, [r3, #0]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800acb6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800acbc:	431a      	orrs	r2, r3
                       Data->DPSM);
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800acc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800acc4:	68fa      	ldr	r2, [r7, #12]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	431a      	orrs	r2, r3
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800acda:	2300      	movs	r3, #0

}
 800acdc:	4618      	mov	r0, r3
 800acde:	3714      	adds	r7, #20
 800ace0:	46bd      	mov	sp, r7
 800ace2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace6:	4770      	bx	lr

0800ace8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	b088      	sub	sp, #32
 800acec:	af00      	add	r7, sp, #0
 800acee:	6078      	str	r0, [r7, #4]
 800acf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800acf6:	2310      	movs	r3, #16
 800acf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800acfa:	2340      	movs	r3, #64	; 0x40
 800acfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800acfe:	2300      	movs	r3, #0
 800ad00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad08:	f107 0308 	add.w	r3, r7, #8
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff ff74 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800ad14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad18:	2110      	movs	r1, #16
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f000 fa40 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800ad20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad22:	69fb      	ldr	r3, [r7, #28]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3720      	adds	r7, #32
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}

0800ad2c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ad2c:	b580      	push	{r7, lr}
 800ad2e:	b088      	sub	sp, #32
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
 800ad34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ad3a:	2311      	movs	r3, #17
 800ad3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad3e:	2340      	movs	r3, #64	; 0x40
 800ad40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad42:	2300      	movs	r3, #0
 800ad44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad4c:	f107 0308 	add.w	r3, r7, #8
 800ad50:	4619      	mov	r1, r3
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7ff ff52 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ad58:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad5c:	2111      	movs	r1, #17
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa1e 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800ad64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad66:	69fb      	ldr	r3, [r7, #28]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3720      	adds	r7, #32
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b088      	sub	sp, #32
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad7e:	2312      	movs	r3, #18
 800ad80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ad82:	2340      	movs	r3, #64	; 0x40
 800ad84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ad8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ad90:	f107 0308 	add.w	r3, r7, #8
 800ad94:	4619      	mov	r1, r3
 800ad96:	6878      	ldr	r0, [r7, #4]
 800ad98:	f7ff ff30 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ad9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada0:	2112      	movs	r1, #18
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f9fc 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800ada8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adaa:	69fb      	ldr	r3, [r7, #28]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3720      	adds	r7, #32
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b088      	sub	sp, #32
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
 800adbc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800adc2:	2318      	movs	r3, #24
 800adc4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800adc6:	2340      	movs	r3, #64	; 0x40
 800adc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800adce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800add4:	f107 0308 	add.w	r3, r7, #8
 800add8:	4619      	mov	r1, r3
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	f7ff ff0e 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800ade0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ade4:	2118      	movs	r1, #24
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f9da 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800adec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adee:	69fb      	ldr	r3, [r7, #28]
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3720      	adds	r7, #32
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b088      	sub	sp, #32
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ae06:	2319      	movs	r3, #25
 800ae08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae0a:	2340      	movs	r3, #64	; 0x40
 800ae0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae16:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae18:	f107 0308 	add.w	r3, r7, #8
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	6878      	ldr	r0, [r7, #4]
 800ae20:	f7ff feec 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800ae24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae28:	2119      	movs	r1, #25
 800ae2a:	6878      	ldr	r0, [r7, #4]
 800ae2c:	f000 f9b8 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800ae30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae32:	69fb      	ldr	r3, [r7, #28]
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3720      	adds	r7, #32
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	bd80      	pop	{r7, pc}

0800ae3c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b088      	sub	sp, #32
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ae44:	2300      	movs	r3, #0
 800ae46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ae48:	230c      	movs	r3, #12
 800ae4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae4c:	2340      	movs	r3, #64	; 0x40
 800ae4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae50:	2300      	movs	r3, #0
 800ae52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae58:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800ae5a:	f107 0308 	add.w	r3, r7, #8
 800ae5e:	4619      	mov	r1, r3
 800ae60:	6878      	ldr	r0, [r7, #4]
 800ae62:	f7ff fecb 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800ae66:	4a05      	ldr	r2, [pc, #20]	; (800ae7c <SDMMC_CmdStopTransfer+0x40>)
 800ae68:	210c      	movs	r1, #12
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 f998 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800ae70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae72:	69fb      	ldr	r3, [r7, #28]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3720      	adds	r7, #32
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	05f5e100 	.word	0x05f5e100

0800ae80 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b08a      	sub	sp, #40	; 0x28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae90:	2307      	movs	r3, #7
 800ae92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800ae94:	2340      	movs	r3, #64	; 0x40
 800ae96:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800ae9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aea2:	f107 0310 	add.w	r3, r7, #16
 800aea6:	4619      	mov	r1, r3
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7ff fea7 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800aeae:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeb2:	2107      	movs	r1, #7
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f000 f973 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800aeba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aebe:	4618      	mov	r0, r3
 800aec0:	3728      	adds	r7, #40	; 0x28
 800aec2:	46bd      	mov	sp, r7
 800aec4:	bd80      	pop	{r7, pc}

0800aec6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800aec6:	b580      	push	{r7, lr}
 800aec8:	b088      	sub	sp, #32
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800aece:	2300      	movs	r3, #0
 800aed0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800aed2:	2300      	movs	r3, #0
 800aed4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800aed6:	2300      	movs	r3, #0
 800aed8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800aeda:	2300      	movs	r3, #0
 800aedc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800aede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800aee4:	f107 0308 	add.w	r3, r7, #8
 800aee8:	4619      	mov	r1, r3
 800aeea:	6878      	ldr	r0, [r7, #4]
 800aeec:	f7ff fe86 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f92d 	bl	800b150 <SDMMC_GetCmdError>
 800aef6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aef8:	69fb      	ldr	r3, [r7, #28]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3720      	adds	r7, #32
 800aefe:	46bd      	mov	sp, r7
 800af00:	bd80      	pop	{r7, pc}

0800af02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800af02:	b580      	push	{r7, lr}
 800af04:	b088      	sub	sp, #32
 800af06:	af00      	add	r7, sp, #0
 800af08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af0a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800af0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af10:	2308      	movs	r3, #8
 800af12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af14:	2340      	movs	r3, #64	; 0x40
 800af16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af18:	2300      	movs	r3, #0
 800af1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af22:	f107 0308 	add.w	r3, r7, #8
 800af26:	4619      	mov	r1, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f7ff fe67 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fb16 	bl	800b560 <SDMMC_GetCmdResp7>
 800af34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af36:	69fb      	ldr	r3, [r7, #28]
}
 800af38:	4618      	mov	r0, r3
 800af3a:	3720      	adds	r7, #32
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b088      	sub	sp, #32
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800af4e:	2337      	movs	r3, #55	; 0x37
 800af50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af52:	2340      	movs	r3, #64	; 0x40
 800af54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800af56:	2300      	movs	r3, #0
 800af58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800af5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800af60:	f107 0308 	add.w	r3, r7, #8
 800af64:	4619      	mov	r1, r3
 800af66:	6878      	ldr	r0, [r7, #4]
 800af68:	f7ff fe48 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800af6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af70:	2137      	movs	r1, #55	; 0x37
 800af72:	6878      	ldr	r0, [r7, #4]
 800af74:	f000 f914 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800af78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af7a:	69fb      	ldr	r3, [r7, #28]
}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3720      	adds	r7, #32
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b088      	sub	sp, #32
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af9a:	2329      	movs	r3, #41	; 0x29
 800af9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800af9e:	2340      	movs	r3, #64	; 0x40
 800afa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afa2:	2300      	movs	r3, #0
 800afa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afac:	f107 0308 	add.w	r3, r7, #8
 800afb0:	4619      	mov	r1, r3
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7ff fe22 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fa23 	bl	800b404 <SDMMC_GetCmdResp3>
 800afbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afc0:	69fb      	ldr	r3, [r7, #28]
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3720      	adds	r7, #32
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b088      	sub	sp, #32
 800afce:	af00      	add	r7, sp, #0
 800afd0:	6078      	str	r0, [r7, #4]
 800afd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800afd8:	2306      	movs	r3, #6
 800afda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800afdc:	2340      	movs	r3, #64	; 0x40
 800afde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800afe0:	2300      	movs	r3, #0
 800afe2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800afe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afe8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800afea:	f107 0308 	add.w	r3, r7, #8
 800afee:	4619      	mov	r1, r3
 800aff0:	6878      	ldr	r0, [r7, #4]
 800aff2:	f7ff fe03 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800aff6:	f241 3288 	movw	r2, #5000	; 0x1388
 800affa:	2106      	movs	r1, #6
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f000 f8cf 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800b002:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b004:	69fb      	ldr	r3, [r7, #28]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3720      	adds	r7, #32
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b088      	sub	sp, #32
 800b012:	af00      	add	r7, sp, #0
 800b014:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b016:	2300      	movs	r3, #0
 800b018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b01a:	2333      	movs	r3, #51	; 0x33
 800b01c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b01e:	2340      	movs	r3, #64	; 0x40
 800b020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b02a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b02c:	f107 0308 	add.w	r3, r7, #8
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fde2 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800b038:	f241 3288 	movw	r2, #5000	; 0x1388
 800b03c:	2133      	movs	r1, #51	; 0x33
 800b03e:	6878      	ldr	r0, [r7, #4]
 800b040:	f000 f8ae 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800b044:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b046:	69fb      	ldr	r3, [r7, #28]
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3720      	adds	r7, #32
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b088      	sub	sp, #32
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b058:	2300      	movs	r3, #0
 800b05a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b05c:	2302      	movs	r3, #2
 800b05e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b060:	23c0      	movs	r3, #192	; 0xc0
 800b062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b064:	2300      	movs	r3, #0
 800b066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b06c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b06e:	f107 0308 	add.w	r3, r7, #8
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff fdc1 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f97c 	bl	800b378 <SDMMC_GetCmdResp2>
 800b080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b082:	69fb      	ldr	r3, [r7, #28]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3720      	adds	r7, #32
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b088      	sub	sp, #32
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b09a:	2309      	movs	r3, #9
 800b09c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800b09e:	23c0      	movs	r3, #192	; 0xc0
 800b0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0ac:	f107 0308 	add.w	r3, r7, #8
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f7ff fda2 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f95d 	bl	800b378 <SDMMC_GetCmdResp2>
 800b0be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3720      	adds	r7, #32
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}

0800b0ca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b088      	sub	sp, #32
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b0d8:	2303      	movs	r3, #3
 800b0da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b0dc:	2340      	movs	r3, #64	; 0x40
 800b0de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b0e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b0ea:	f107 0308 	add.w	r3, r7, #8
 800b0ee:	4619      	mov	r1, r3
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	f7ff fd83 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0f6:	683a      	ldr	r2, [r7, #0]
 800b0f8:	2103      	movs	r1, #3
 800b0fa:	6878      	ldr	r0, [r7, #4]
 800b0fc:	f000 f9bc 	bl	800b478 <SDMMC_GetCmdResp6>
 800b100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b102:	69fb      	ldr	r3, [r7, #28]
}
 800b104:	4618      	mov	r0, r3
 800b106:	3720      	adds	r7, #32
 800b108:	46bd      	mov	sp, r7
 800b10a:	bd80      	pop	{r7, pc}

0800b10c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b088      	sub	sp, #32
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b11a:	230d      	movs	r3, #13
 800b11c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800b11e:	2340      	movs	r3, #64	; 0x40
 800b120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800b122:	2300      	movs	r3, #0
 800b124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800b126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b12a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800b12c:	f107 0308 	add.w	r3, r7, #8
 800b130:	4619      	mov	r1, r3
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f7ff fd62 	bl	800abfc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800b138:	f241 3288 	movw	r2, #5000	; 0x1388
 800b13c:	210d      	movs	r1, #13
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f82e 	bl	800b1a0 <SDMMC_GetCmdResp1>
 800b144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b146:	69fb      	ldr	r3, [r7, #28]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3720      	adds	r7, #32
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800b150:	b490      	push	{r4, r7}
 800b152:	b082      	sub	sp, #8
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b158:	4b0f      	ldr	r3, [pc, #60]	; (800b198 <SDMMC_GetCmdError+0x48>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a0f      	ldr	r2, [pc, #60]	; (800b19c <SDMMC_GetCmdError+0x4c>)
 800b15e:	fba2 2303 	umull	r2, r3, r2, r3
 800b162:	0a5b      	lsrs	r3, r3, #9
 800b164:	f241 3288 	movw	r2, #5000	; 0x1388
 800b168:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b16c:	4623      	mov	r3, r4
 800b16e:	1e5c      	subs	r4, r3, #1
 800b170:	2b00      	cmp	r3, #0
 800b172:	d102      	bne.n	800b17a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b174:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b178:	e009      	b.n	800b18e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b182:	2b00      	cmp	r3, #0
 800b184:	d0f2      	beq.n	800b16c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	22c5      	movs	r2, #197	; 0xc5
 800b18a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b18c:	2300      	movs	r3, #0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bc90      	pop	{r4, r7}
 800b196:	4770      	bx	lr
 800b198:	20000000 	.word	0x20000000
 800b19c:	10624dd3 	.word	0x10624dd3

0800b1a0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b1a0:	b590      	push	{r4, r7, lr}
 800b1a2:	b087      	sub	sp, #28
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	607a      	str	r2, [r7, #4]
 800b1ac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b1ae:	4b6f      	ldr	r3, [pc, #444]	; (800b36c <SDMMC_GetCmdResp1+0x1cc>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	4a6f      	ldr	r2, [pc, #444]	; (800b370 <SDMMC_GetCmdResp1+0x1d0>)
 800b1b4:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b8:	0a5b      	lsrs	r3, r3, #9
 800b1ba:	687a      	ldr	r2, [r7, #4]
 800b1bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b1c0:	4623      	mov	r3, r4
 800b1c2:	1e5c      	subs	r4, r3, #1
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d102      	bne.n	800b1ce <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1cc:	e0c9      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d2:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d0f0      	beq.n	800b1c0 <SDMMC_GetCmdResp1+0x20>
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d1eb      	bne.n	800b1c0 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ec:	f003 0304 	and.w	r3, r3, #4
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d004      	beq.n	800b1fe <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2204      	movs	r2, #4
 800b1f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1fa:	2304      	movs	r3, #4
 800b1fc:	e0b1      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b202:	f003 0301 	and.w	r3, r3, #1
 800b206:	2b00      	cmp	r3, #0
 800b208:	d004      	beq.n	800b214 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2201      	movs	r2, #1
 800b20e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b210:	2301      	movs	r3, #1
 800b212:	e0a6      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	22c5      	movs	r2, #197	; 0xc5
 800b218:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f7ff fd18 	bl	800ac50 <SDIO_GetCommandResponse>
 800b220:	4603      	mov	r3, r0
 800b222:	461a      	mov	r2, r3
 800b224:	7afb      	ldrb	r3, [r7, #11]
 800b226:	4293      	cmp	r3, r2
 800b228:	d001      	beq.n	800b22e <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b22a:	2301      	movs	r3, #1
 800b22c:	e099      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b22e:	2100      	movs	r1, #0
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f7ff fd1a 	bl	800ac6a <SDIO_GetResponse>
 800b236:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b238:	693a      	ldr	r2, [r7, #16]
 800b23a:	4b4e      	ldr	r3, [pc, #312]	; (800b374 <SDMMC_GetCmdResp1+0x1d4>)
 800b23c:	4013      	ands	r3, r2
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800b242:	2300      	movs	r3, #0
 800b244:	e08d      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	da02      	bge.n	800b252 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b24c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b250:	e087      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d001      	beq.n	800b260 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b25c:	2340      	movs	r3, #64	; 0x40
 800b25e:	e080      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b260:	693b      	ldr	r3, [r7, #16]
 800b262:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b26a:	2380      	movs	r3, #128	; 0x80
 800b26c:	e079      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b26e:	693b      	ldr	r3, [r7, #16]
 800b270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b278:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b27c:	e071      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b288:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b28c:	e069      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b298:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b29c:	e061      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b2a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2ac:	e059      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b2b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b2bc:	e051      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b2be:	693b      	ldr	r3, [r7, #16]
 800b2c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b2c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b2cc:	e049      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b2d8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2dc:	e041      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2de:	693b      	ldr	r3, [r7, #16]
 800b2e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2ec:	e039      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2fc:	e031      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d002      	beq.n	800b30e <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b308:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b30c:	e029      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b318:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b31c:	e021      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d002      	beq.n	800b32e <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b328:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b32c:	e019      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b334:	2b00      	cmp	r3, #0
 800b336:	d002      	beq.n	800b33e <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b338:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b33c:	e011      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b344:	2b00      	cmp	r3, #0
 800b346:	d002      	beq.n	800b34e <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b348:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b34c:	e009      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	f003 0308 	and.w	r3, r3, #8
 800b354:	2b00      	cmp	r3, #0
 800b356:	d002      	beq.n	800b35e <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b358:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b35c:	e001      	b.n	800b362 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b35e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b362:	4618      	mov	r0, r3
 800b364:	371c      	adds	r7, #28
 800b366:	46bd      	mov	sp, r7
 800b368:	bd90      	pop	{r4, r7, pc}
 800b36a:	bf00      	nop
 800b36c:	20000000 	.word	0x20000000
 800b370:	10624dd3 	.word	0x10624dd3
 800b374:	fdffe008 	.word	0xfdffe008

0800b378 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800b378:	b490      	push	{r4, r7}
 800b37a:	b084      	sub	sp, #16
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b380:	4b1e      	ldr	r3, [pc, #120]	; (800b3fc <SDMMC_GetCmdResp2+0x84>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a1e      	ldr	r2, [pc, #120]	; (800b400 <SDMMC_GetCmdResp2+0x88>)
 800b386:	fba2 2303 	umull	r2, r3, r2, r3
 800b38a:	0a5b      	lsrs	r3, r3, #9
 800b38c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b390:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b394:	4623      	mov	r3, r4
 800b396:	1e5c      	subs	r4, r3, #1
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d102      	bne.n	800b3a2 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b39c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3a0:	e026      	b.n	800b3f0 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a6:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0f0      	beq.n	800b394 <SDMMC_GetCmdResp2+0x1c>
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1eb      	bne.n	800b394 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3c0:	f003 0304 	and.w	r3, r3, #4
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d004      	beq.n	800b3d2 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2204      	movs	r2, #4
 800b3cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3ce:	2304      	movs	r3, #4
 800b3d0:	e00e      	b.n	800b3f0 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3d6:	f003 0301 	and.w	r3, r3, #1
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d004      	beq.n	800b3e8 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3e4:	2301      	movs	r3, #1
 800b3e6:	e003      	b.n	800b3f0 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	22c5      	movs	r2, #197	; 0xc5
 800b3ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3ee:	2300      	movs	r3, #0
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bc90      	pop	{r4, r7}
 800b3f8:	4770      	bx	lr
 800b3fa:	bf00      	nop
 800b3fc:	20000000 	.word	0x20000000
 800b400:	10624dd3 	.word	0x10624dd3

0800b404 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800b404:	b490      	push	{r4, r7}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b40c:	4b18      	ldr	r3, [pc, #96]	; (800b470 <SDMMC_GetCmdResp3+0x6c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4a18      	ldr	r2, [pc, #96]	; (800b474 <SDMMC_GetCmdResp3+0x70>)
 800b412:	fba2 2303 	umull	r2, r3, r2, r3
 800b416:	0a5b      	lsrs	r3, r3, #9
 800b418:	f241 3288 	movw	r2, #5000	; 0x1388
 800b41c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b420:	4623      	mov	r3, r4
 800b422:	1e5c      	subs	r4, r3, #1
 800b424:	2b00      	cmp	r3, #0
 800b426:	d102      	bne.n	800b42e <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b428:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b42c:	e01b      	b.n	800b466 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b432:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d0f0      	beq.n	800b420 <SDMMC_GetCmdResp3+0x1c>
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1eb      	bne.n	800b420 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44c:	f003 0304 	and.w	r3, r3, #4
 800b450:	2b00      	cmp	r3, #0
 800b452:	d004      	beq.n	800b45e <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	2204      	movs	r2, #4
 800b458:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b45a:	2304      	movs	r3, #4
 800b45c:	e003      	b.n	800b466 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	22c5      	movs	r2, #197	; 0xc5
 800b462:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bc90      	pop	{r4, r7}
 800b46e:	4770      	bx	lr
 800b470:	20000000 	.word	0x20000000
 800b474:	10624dd3 	.word	0x10624dd3

0800b478 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b478:	b590      	push	{r4, r7, lr}
 800b47a:	b087      	sub	sp, #28
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	460b      	mov	r3, r1
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b486:	4b34      	ldr	r3, [pc, #208]	; (800b558 <SDMMC_GetCmdResp6+0xe0>)
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	4a34      	ldr	r2, [pc, #208]	; (800b55c <SDMMC_GetCmdResp6+0xe4>)
 800b48c:	fba2 2303 	umull	r2, r3, r2, r3
 800b490:	0a5b      	lsrs	r3, r3, #9
 800b492:	f241 3288 	movw	r2, #5000	; 0x1388
 800b496:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b49a:	4623      	mov	r3, r4
 800b49c:	1e5c      	subs	r4, r3, #1
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d102      	bne.n	800b4a8 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4a2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4a6:	e052      	b.n	800b54e <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ac:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d0f0      	beq.n	800b49a <SDMMC_GetCmdResp6+0x22>
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d1eb      	bne.n	800b49a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4c6:	f003 0304 	and.w	r3, r3, #4
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d004      	beq.n	800b4d8 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	2204      	movs	r2, #4
 800b4d2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4d4:	2304      	movs	r3, #4
 800b4d6:	e03a      	b.n	800b54e <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4dc:	f003 0301 	and.w	r3, r3, #1
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d004      	beq.n	800b4ee <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4ea:	2301      	movs	r3, #1
 800b4ec:	e02f      	b.n	800b54e <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800b4ee:	68f8      	ldr	r0, [r7, #12]
 800b4f0:	f7ff fbae 	bl	800ac50 <SDIO_GetCommandResponse>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	7afb      	ldrb	r3, [r7, #11]
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d001      	beq.n	800b502 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e025      	b.n	800b54e <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	22c5      	movs	r2, #197	; 0xc5
 800b506:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800b508:	2100      	movs	r1, #0
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f7ff fbad 	bl	800ac6a <SDIO_GetResponse>
 800b510:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d106      	bne.n	800b52a <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	0c1b      	lsrs	r3, r3, #16
 800b520:	b29a      	uxth	r2, r3
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b526:	2300      	movs	r3, #0
 800b528:	e011      	b.n	800b54e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b530:	2b00      	cmp	r3, #0
 800b532:	d002      	beq.n	800b53a <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b534:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b538:	e009      	b.n	800b54e <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d002      	beq.n	800b54a <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b548:	e001      	b.n	800b54e <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b54a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b54e:	4618      	mov	r0, r3
 800b550:	371c      	adds	r7, #28
 800b552:	46bd      	mov	sp, r7
 800b554:	bd90      	pop	{r4, r7, pc}
 800b556:	bf00      	nop
 800b558:	20000000 	.word	0x20000000
 800b55c:	10624dd3 	.word	0x10624dd3

0800b560 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800b560:	b490      	push	{r4, r7}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b568:	4b21      	ldr	r3, [pc, #132]	; (800b5f0 <SDMMC_GetCmdResp7+0x90>)
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	4a21      	ldr	r2, [pc, #132]	; (800b5f4 <SDMMC_GetCmdResp7+0x94>)
 800b56e:	fba2 2303 	umull	r2, r3, r2, r3
 800b572:	0a5b      	lsrs	r3, r3, #9
 800b574:	f241 3288 	movw	r2, #5000	; 0x1388
 800b578:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800b57c:	4623      	mov	r3, r4
 800b57e:	1e5c      	subs	r4, r3, #1
 800b580:	2b00      	cmp	r3, #0
 800b582:	d102      	bne.n	800b58a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b584:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b588:	e02c      	b.n	800b5e4 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800b596:	2b00      	cmp	r3, #0
 800b598:	d0f0      	beq.n	800b57c <SDMMC_GetCmdResp7+0x1c>
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d1eb      	bne.n	800b57c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d004      	beq.n	800b5ba <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2204      	movs	r2, #4
 800b5b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b5b6:	2304      	movs	r3, #4
 800b5b8:	e014      	b.n	800b5e4 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2201      	movs	r2, #1
 800b5ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e009      	b.n	800b5e4 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d002      	beq.n	800b5e2 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2240      	movs	r2, #64	; 0x40
 800b5e0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b5e2:	2300      	movs	r3, #0
  
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bc90      	pop	{r4, r7}
 800b5ec:	4770      	bx	lr
 800b5ee:	bf00      	nop
 800b5f0:	20000000 	.word	0x20000000
 800b5f4:	10624dd3 	.word	0x10624dd3

0800b5f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b084      	sub	sp, #16
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	f107 001c 	add.w	r0, r7, #28
 800b606:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d122      	bne.n	800b656 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68db      	ldr	r3, [r3, #12]
 800b620:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d105      	bne.n	800b64a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f000 f94a 	bl	800b8e4 <USB_CoreReset>
 800b650:	4603      	mov	r3, r0
 800b652:	73fb      	strb	r3, [r7, #15]
 800b654:	e01a      	b.n	800b68c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f93e 	bl	800b8e4 <USB_CoreReset>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b66c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d106      	bne.n	800b680 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b676:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	639a      	str	r2, [r3, #56]	; 0x38
 800b67e:	e005      	b.n	800b68c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b684:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b68c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b68e:	2b01      	cmp	r3, #1
 800b690:	d10b      	bne.n	800b6aa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	689b      	ldr	r3, [r3, #8]
 800b696:	f043 0206 	orr.w	r2, r3, #6
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	689b      	ldr	r3, [r3, #8]
 800b6a2:	f043 0220 	orr.w	r2, r3, #32
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b6aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3710      	adds	r7, #16
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b6b6:	b004      	add	sp, #16
 800b6b8:	4770      	bx	lr

0800b6ba <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6ba:	b480      	push	{r7}
 800b6bc:	b083      	sub	sp, #12
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	f043 0201 	orr.w	r2, r3, #1
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	370c      	adds	r7, #12
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6da:	4770      	bx	lr

0800b6dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b6dc:	b480      	push	{r7}
 800b6de:	b083      	sub	sp, #12
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	f023 0201 	bic.w	r2, r3, #1
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b6f0:	2300      	movs	r3, #0
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	370c      	adds	r7, #12
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b082      	sub	sp, #8
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	460b      	mov	r3, r1
 800b708:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	68db      	ldr	r3, [r3, #12]
 800b70e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b716:	78fb      	ldrb	r3, [r7, #3]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d106      	bne.n	800b72a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	68db      	ldr	r3, [r3, #12]
 800b720:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	60da      	str	r2, [r3, #12]
 800b728:	e00b      	b.n	800b742 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b72a:	78fb      	ldrb	r3, [r7, #3]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d106      	bne.n	800b73e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	60da      	str	r2, [r3, #12]
 800b73c:	e001      	b.n	800b742 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b73e:	2301      	movs	r3, #1
 800b740:	e003      	b.n	800b74a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b742:	2032      	movs	r0, #50	; 0x32
 800b744:	f7f7 ffa4 	bl	8003690 <HAL_Delay>

  return HAL_OK;
 800b748:	2300      	movs	r3, #0
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
	...

0800b754 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b75e:	2300      	movs	r3, #0
 800b760:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	019b      	lsls	r3, r3, #6
 800b766:	f043 0220 	orr.w	r2, r3, #32
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	3301      	adds	r3, #1
 800b772:	60fb      	str	r3, [r7, #12]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4a09      	ldr	r2, [pc, #36]	; (800b79c <USB_FlushTxFifo+0x48>)
 800b778:	4293      	cmp	r3, r2
 800b77a:	d901      	bls.n	800b780 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b77c:	2303      	movs	r3, #3
 800b77e:	e006      	b.n	800b78e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	691b      	ldr	r3, [r3, #16]
 800b784:	f003 0320 	and.w	r3, r3, #32
 800b788:	2b20      	cmp	r3, #32
 800b78a:	d0f0      	beq.n	800b76e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b78c:	2300      	movs	r3, #0
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3714      	adds	r7, #20
 800b792:	46bd      	mov	sp, r7
 800b794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b798:	4770      	bx	lr
 800b79a:	bf00      	nop
 800b79c:	00030d40 	.word	0x00030d40

0800b7a0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2210      	movs	r2, #16
 800b7b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	3301      	adds	r3, #1
 800b7b6:	60fb      	str	r3, [r7, #12]
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	4a09      	ldr	r2, [pc, #36]	; (800b7e0 <USB_FlushRxFifo+0x40>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d901      	bls.n	800b7c4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b7c0:	2303      	movs	r3, #3
 800b7c2:	e006      	b.n	800b7d2 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	691b      	ldr	r3, [r3, #16]
 800b7c8:	f003 0310 	and.w	r3, r3, #16
 800b7cc:	2b10      	cmp	r3, #16
 800b7ce:	d0f0      	beq.n	800b7b2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr
 800b7de:	bf00      	nop
 800b7e0:	00030d40 	.word	0x00030d40

0800b7e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b7e4:	b480      	push	{r7}
 800b7e6:	b089      	sub	sp, #36	; 0x24
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	4611      	mov	r1, r2
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	460b      	mov	r3, r1
 800b7f4:	71fb      	strb	r3, [r7, #7]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b802:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b806:	2b00      	cmp	r3, #0
 800b808:	d11a      	bne.n	800b840 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b80a:	88bb      	ldrh	r3, [r7, #4]
 800b80c:	3303      	adds	r3, #3
 800b80e:	089b      	lsrs	r3, r3, #2
 800b810:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b812:	2300      	movs	r3, #0
 800b814:	61bb      	str	r3, [r7, #24]
 800b816:	e00f      	b.n	800b838 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b818:	79fb      	ldrb	r3, [r7, #7]
 800b81a:	031a      	lsls	r2, r3, #12
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	4413      	add	r3, r2
 800b820:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b824:	461a      	mov	r2, r3
 800b826:	69fb      	ldr	r3, [r7, #28]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	3304      	adds	r3, #4
 800b830:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	3301      	adds	r3, #1
 800b836:	61bb      	str	r3, [r7, #24]
 800b838:	69ba      	ldr	r2, [r7, #24]
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d3eb      	bcc.n	800b818 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b840:	2300      	movs	r3, #0
}
 800b842:	4618      	mov	r0, r3
 800b844:	3724      	adds	r7, #36	; 0x24
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b84e:	b480      	push	{r7}
 800b850:	b089      	sub	sp, #36	; 0x24
 800b852:	af00      	add	r7, sp, #0
 800b854:	60f8      	str	r0, [r7, #12]
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	4613      	mov	r3, r2
 800b85a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b860:	68bb      	ldr	r3, [r7, #8]
 800b862:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b864:	88fb      	ldrh	r3, [r7, #6]
 800b866:	3303      	adds	r3, #3
 800b868:	089b      	lsrs	r3, r3, #2
 800b86a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b86c:	2300      	movs	r3, #0
 800b86e:	61bb      	str	r3, [r7, #24]
 800b870:	e00b      	b.n	800b88a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b872:	697b      	ldr	r3, [r7, #20]
 800b874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b878:	681a      	ldr	r2, [r3, #0]
 800b87a:	69fb      	ldr	r3, [r7, #28]
 800b87c:	601a      	str	r2, [r3, #0]
    pDest++;
 800b87e:	69fb      	ldr	r3, [r7, #28]
 800b880:	3304      	adds	r3, #4
 800b882:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	3301      	adds	r3, #1
 800b888:	61bb      	str	r3, [r7, #24]
 800b88a:	69ba      	ldr	r2, [r7, #24]
 800b88c:	693b      	ldr	r3, [r7, #16]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d3ef      	bcc.n	800b872 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b892:	69fb      	ldr	r3, [r7, #28]
}
 800b894:	4618      	mov	r0, r3
 800b896:	3724      	adds	r7, #36	; 0x24
 800b898:	46bd      	mov	sp, r7
 800b89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89e:	4770      	bx	lr

0800b8a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b8a0:	b480      	push	{r7}
 800b8a2:	b085      	sub	sp, #20
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	695b      	ldr	r3, [r3, #20]
 800b8ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	68fa      	ldr	r2, [r7, #12]
 800b8b4:	4013      	ands	r3, r2
 800b8b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8b8:	68fb      	ldr	r3, [r7, #12]
}
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	3714      	adds	r7, #20
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	695b      	ldr	r3, [r3, #20]
 800b8d2:	f003 0301 	and.w	r3, r3, #1
}
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr
	...

0800b8e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b8e4:	b480      	push	{r7}
 800b8e6:	b085      	sub	sp, #20
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	3301      	adds	r3, #1
 800b8f4:	60fb      	str	r3, [r7, #12]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	4a13      	ldr	r2, [pc, #76]	; (800b948 <USB_CoreReset+0x64>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d901      	bls.n	800b902 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e01b      	b.n	800b93a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	2b00      	cmp	r3, #0
 800b908:	daf2      	bge.n	800b8f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b90a:	2300      	movs	r3, #0
 800b90c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	f043 0201 	orr.w	r2, r3, #1
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	3301      	adds	r3, #1
 800b91e:	60fb      	str	r3, [r7, #12]
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	4a09      	ldr	r2, [pc, #36]	; (800b948 <USB_CoreReset+0x64>)
 800b924:	4293      	cmp	r3, r2
 800b926:	d901      	bls.n	800b92c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b928:	2303      	movs	r3, #3
 800b92a:	e006      	b.n	800b93a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	691b      	ldr	r3, [r3, #16]
 800b930:	f003 0301 	and.w	r3, r3, #1
 800b934:	2b01      	cmp	r3, #1
 800b936:	d0f0      	beq.n	800b91a <USB_CoreReset+0x36>

  return HAL_OK;
 800b938:	2300      	movs	r3, #0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3714      	adds	r7, #20
 800b93e:	46bd      	mov	sp, r7
 800b940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b944:	4770      	bx	lr
 800b946:	bf00      	nop
 800b948:	00030d40 	.word	0x00030d40

0800b94c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b94c:	b084      	sub	sp, #16
 800b94e:	b580      	push	{r7, lr}
 800b950:	b084      	sub	sp, #16
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	f107 001c 	add.w	r0, r7, #28
 800b95a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b968:	461a      	mov	r2, r3
 800b96a:	2300      	movs	r3, #0
 800b96c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b972:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d018      	beq.n	800b9c4 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b994:	2b01      	cmp	r3, #1
 800b996:	d10a      	bne.n	800b9ae <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	68ba      	ldr	r2, [r7, #8]
 800b9a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9a6:	f043 0304 	orr.w	r3, r3, #4
 800b9aa:	6013      	str	r3, [r2, #0]
 800b9ac:	e014      	b.n	800b9d8 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9bc:	f023 0304 	bic.w	r3, r3, #4
 800b9c0:	6013      	str	r3, [r2, #0]
 800b9c2:	e009      	b.n	800b9d8 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b9c4:	68bb      	ldr	r3, [r7, #8]
 800b9c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9d2:	f023 0304 	bic.w	r3, r3, #4
 800b9d6:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b9d8:	2110      	movs	r1, #16
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f7ff feba 	bl	800b754 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f7ff fedd 	bl	800b7a0 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	60fb      	str	r3, [r7, #12]
 800b9ea:	e015      	b.n	800ba18 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	015a      	lsls	r2, r3, #5
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b9f8:	461a      	mov	r2, r3
 800b9fa:	f04f 33ff 	mov.w	r3, #4294967295
 800b9fe:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	2300      	movs	r3, #0
 800ba10:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	3301      	adds	r3, #1
 800ba16:	60fb      	str	r3, [r7, #12]
 800ba18:	6a3b      	ldr	r3, [r7, #32]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d3e5      	bcc.n	800b9ec <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800ba20:	2101      	movs	r1, #1
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f8ac 	bl	800bb80 <USB_DriveVbus>

  HAL_Delay(200U);
 800ba28:	20c8      	movs	r0, #200	; 0xc8
 800ba2a:	f7f7 fe31 	bl	8003690 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2200      	movs	r2, #0
 800ba32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	f04f 32ff 	mov.w	r2, #4294967295
 800ba3a:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d00b      	beq.n	800ba60 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba4e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	4a14      	ldr	r2, [pc, #80]	; (800baa4 <USB_HostInit+0x158>)
 800ba54:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	4a13      	ldr	r2, [pc, #76]	; (800baa8 <USB_HostInit+0x15c>)
 800ba5a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800ba5e:	e009      	b.n	800ba74 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2280      	movs	r2, #128	; 0x80
 800ba64:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	4a10      	ldr	r2, [pc, #64]	; (800baac <USB_HostInit+0x160>)
 800ba6a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	4a10      	ldr	r2, [pc, #64]	; (800bab0 <USB_HostInit+0x164>)
 800ba70:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d105      	bne.n	800ba86 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	699b      	ldr	r3, [r3, #24]
 800ba7e:	f043 0210 	orr.w	r2, r3, #16
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	699a      	ldr	r2, [r3, #24]
 800ba8a:	4b0a      	ldr	r3, [pc, #40]	; (800bab4 <USB_HostInit+0x168>)
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	687a      	ldr	r2, [r7, #4]
 800ba90:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800ba92:	2300      	movs	r3, #0
}
 800ba94:	4618      	mov	r0, r3
 800ba96:	3710      	adds	r7, #16
 800ba98:	46bd      	mov	sp, r7
 800ba9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba9e:	b004      	add	sp, #16
 800baa0:	4770      	bx	lr
 800baa2:	bf00      	nop
 800baa4:	01000200 	.word	0x01000200
 800baa8:	00e00300 	.word	0x00e00300
 800baac:	00600080 	.word	0x00600080
 800bab0:	004000e0 	.word	0x004000e0
 800bab4:	a3200008 	.word	0xa3200008

0800bab8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bab8:	b480      	push	{r7}
 800baba:	b085      	sub	sp, #20
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	460b      	mov	r3, r1
 800bac2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bad6:	f023 0303 	bic.w	r3, r3, #3
 800bada:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	f003 0303 	and.w	r3, r3, #3
 800baea:	68f9      	ldr	r1, [r7, #12]
 800baec:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800baf0:	4313      	orrs	r3, r2
 800baf2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800baf4:	78fb      	ldrb	r3, [r7, #3]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d107      	bne.n	800bb0a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb00:	461a      	mov	r2, r3
 800bb02:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bb06:	6053      	str	r3, [r2, #4]
 800bb08:	e009      	b.n	800bb1e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bb0a:	78fb      	ldrb	r3, [r7, #3]
 800bb0c:	2b02      	cmp	r3, #2
 800bb0e:	d106      	bne.n	800bb1e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bb10:	68fb      	ldr	r3, [r7, #12]
 800bb12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb16:	461a      	mov	r2, r3
 800bb18:	f241 7370 	movw	r3, #6000	; 0x1770
 800bb1c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	b084      	sub	sp, #16
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bb38:	2300      	movs	r3, #0
 800bb3a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bb4c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bb4e:	68bb      	ldr	r3, [r7, #8]
 800bb50:	68fa      	ldr	r2, [r7, #12]
 800bb52:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bb56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bb5a:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bb5c:	2064      	movs	r0, #100	; 0x64
 800bb5e:	f7f7 fd97 	bl	8003690 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bb62:	68bb      	ldr	r3, [r7, #8]
 800bb64:	68fa      	ldr	r2, [r7, #12]
 800bb66:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bb6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb6e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bb70:	200a      	movs	r0, #10
 800bb72:	f7f7 fd8d 	bl	8003690 <HAL_Delay>

  return HAL_OK;
 800bb76:	2300      	movs	r3, #0
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}

0800bb80 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	460b      	mov	r3, r1
 800bb8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bb90:	2300      	movs	r3, #0
 800bb92:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bb9e:	68bb      	ldr	r3, [r7, #8]
 800bba0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bba4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d109      	bne.n	800bbc4 <USB_DriveVbus+0x44>
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d106      	bne.n	800bbc4 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	68fa      	ldr	r2, [r7, #12]
 800bbba:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bbbe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bbc2:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bbca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bbce:	d109      	bne.n	800bbe4 <USB_DriveVbus+0x64>
 800bbd0:	78fb      	ldrb	r3, [r7, #3]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d106      	bne.n	800bbe4 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	68fa      	ldr	r2, [r7, #12]
 800bbda:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bbde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bbe2:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bbe4:	2300      	movs	r3, #0
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3714      	adds	r7, #20
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b085      	sub	sp, #20
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bc0c:	68bb      	ldr	r3, [r7, #8]
 800bc0e:	0c5b      	lsrs	r3, r3, #17
 800bc10:	f003 0303 	and.w	r3, r3, #3
}
 800bc14:	4618      	mov	r0, r3
 800bc16:	3714      	adds	r7, #20
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1e:	4770      	bx	lr

0800bc20 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bc32:	689b      	ldr	r3, [r3, #8]
 800bc34:	b29b      	uxth	r3, r3
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3714      	adds	r7, #20
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc40:	4770      	bx	lr
	...

0800bc44 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800bc44:	b480      	push	{r7}
 800bc46:	b087      	sub	sp, #28
 800bc48:	af00      	add	r7, sp, #0
 800bc4a:	6078      	str	r0, [r7, #4]
 800bc4c:	4608      	mov	r0, r1
 800bc4e:	4611      	mov	r1, r2
 800bc50:	461a      	mov	r2, r3
 800bc52:	4603      	mov	r3, r0
 800bc54:	70fb      	strb	r3, [r7, #3]
 800bc56:	460b      	mov	r3, r1
 800bc58:	70bb      	strb	r3, [r7, #2]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bc5e:	2300      	movs	r3, #0
 800bc60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bc66:	78fb      	ldrb	r3, [r7, #3]
 800bc68:	015a      	lsls	r2, r3, #5
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	4413      	add	r3, r2
 800bc6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc72:	461a      	mov	r2, r3
 800bc74:	f04f 33ff 	mov.w	r3, #4294967295
 800bc78:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bc7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d87e      	bhi.n	800bd80 <USB_HC_Init+0x13c>
 800bc82:	a201      	add	r2, pc, #4	; (adr r2, 800bc88 <USB_HC_Init+0x44>)
 800bc84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc88:	0800bc99 	.word	0x0800bc99
 800bc8c:	0800bd43 	.word	0x0800bd43
 800bc90:	0800bc99 	.word	0x0800bc99
 800bc94:	0800bd05 	.word	0x0800bd05
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bc98:	78fb      	ldrb	r3, [r7, #3]
 800bc9a:	015a      	lsls	r2, r3, #5
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	4413      	add	r3, r2
 800bca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bca4:	461a      	mov	r2, r3
 800bca6:	f240 439d 	movw	r3, #1181	; 0x49d
 800bcaa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800bcac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da10      	bge.n	800bcd6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bcb4:	78fb      	ldrb	r3, [r7, #3]
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	68bb      	ldr	r3, [r7, #8]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcc0:	68db      	ldr	r3, [r3, #12]
 800bcc2:	78fa      	ldrb	r2, [r7, #3]
 800bcc4:	0151      	lsls	r1, r2, #5
 800bcc6:	68ba      	ldr	r2, [r7, #8]
 800bcc8:	440a      	add	r2, r1
 800bcca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bcd2:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800bcd4:	e057      	b.n	800bd86 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d051      	beq.n	800bd86 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bce2:	78fb      	ldrb	r3, [r7, #3]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	78fa      	ldrb	r2, [r7, #3]
 800bcf2:	0151      	lsls	r1, r2, #5
 800bcf4:	68ba      	ldr	r2, [r7, #8]
 800bcf6:	440a      	add	r2, r1
 800bcf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcfc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bd00:	60d3      	str	r3, [r2, #12]
      break;
 800bd02:	e040      	b.n	800bd86 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bd04:	78fb      	ldrb	r3, [r7, #3]
 800bd06:	015a      	lsls	r2, r3, #5
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	4413      	add	r3, r2
 800bd0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd10:	461a      	mov	r2, r3
 800bd12:	f240 639d 	movw	r3, #1693	; 0x69d
 800bd16:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bd18:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	da34      	bge.n	800bd8a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bd20:	78fb      	ldrb	r3, [r7, #3]
 800bd22:	015a      	lsls	r2, r3, #5
 800bd24:	68bb      	ldr	r3, [r7, #8]
 800bd26:	4413      	add	r3, r2
 800bd28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd2c:	68db      	ldr	r3, [r3, #12]
 800bd2e:	78fa      	ldrb	r2, [r7, #3]
 800bd30:	0151      	lsls	r1, r2, #5
 800bd32:	68ba      	ldr	r2, [r7, #8]
 800bd34:	440a      	add	r2, r1
 800bd36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd3e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bd40:	e023      	b.n	800bd8a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bd42:	78fb      	ldrb	r3, [r7, #3]
 800bd44:	015a      	lsls	r2, r3, #5
 800bd46:	68bb      	ldr	r3, [r7, #8]
 800bd48:	4413      	add	r3, r2
 800bd4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd4e:	461a      	mov	r2, r3
 800bd50:	f240 2325 	movw	r3, #549	; 0x225
 800bd54:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bd56:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	da17      	bge.n	800bd8e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bd5e:	78fb      	ldrb	r3, [r7, #3]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd6a:	68db      	ldr	r3, [r3, #12]
 800bd6c:	78fa      	ldrb	r2, [r7, #3]
 800bd6e:	0151      	lsls	r1, r2, #5
 800bd70:	68ba      	ldr	r2, [r7, #8]
 800bd72:	440a      	add	r2, r1
 800bd74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd78:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bd7c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bd7e:	e006      	b.n	800bd8e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bd80:	2301      	movs	r3, #1
 800bd82:	75fb      	strb	r3, [r7, #23]
      break;
 800bd84:	e004      	b.n	800bd90 <USB_HC_Init+0x14c>
      break;
 800bd86:	bf00      	nop
 800bd88:	e002      	b.n	800bd90 <USB_HC_Init+0x14c>
      break;
 800bd8a:	bf00      	nop
 800bd8c:	e000      	b.n	800bd90 <USB_HC_Init+0x14c>
      break;
 800bd8e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bd90:	68bb      	ldr	r3, [r7, #8]
 800bd92:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bd96:	699a      	ldr	r2, [r3, #24]
 800bd98:	78fb      	ldrb	r3, [r7, #3]
 800bd9a:	f003 030f 	and.w	r3, r3, #15
 800bd9e:	2101      	movs	r1, #1
 800bda0:	fa01 f303 	lsl.w	r3, r1, r3
 800bda4:	68b9      	ldr	r1, [r7, #8]
 800bda6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bdaa:	4313      	orrs	r3, r2
 800bdac:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	699b      	ldr	r3, [r3, #24]
 800bdb2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bdba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	da03      	bge.n	800bdca <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bdc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdc6:	613b      	str	r3, [r7, #16]
 800bdc8:	e001      	b.n	800bdce <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bdce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d103      	bne.n	800bdde <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bdd6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	e001      	b.n	800bde2 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bdde:	2300      	movs	r3, #0
 800bde0:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bde2:	787b      	ldrb	r3, [r7, #1]
 800bde4:	059b      	lsls	r3, r3, #22
 800bde6:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bdea:	78bb      	ldrb	r3, [r7, #2]
 800bdec:	02db      	lsls	r3, r3, #11
 800bdee:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bdf2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bdf4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bdf8:	049b      	lsls	r3, r3, #18
 800bdfa:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bdfe:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800be00:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800be02:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800be06:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800be0c:	78fb      	ldrb	r3, [r7, #3]
 800be0e:	0159      	lsls	r1, r3, #5
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	440b      	add	r3, r1
 800be14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be18:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800be1e:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800be20:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800be24:	2b03      	cmp	r3, #3
 800be26:	d10f      	bne.n	800be48 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800be28:	78fb      	ldrb	r3, [r7, #3]
 800be2a:	015a      	lsls	r2, r3, #5
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	4413      	add	r3, r2
 800be30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	78fa      	ldrb	r2, [r7, #3]
 800be38:	0151      	lsls	r1, r2, #5
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	440a      	add	r2, r1
 800be3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be46:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	371c      	adds	r7, #28
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr
 800be56:	bf00      	nop

0800be58 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b08c      	sub	sp, #48	; 0x30
 800be5c:	af02      	add	r7, sp, #8
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	60b9      	str	r1, [r7, #8]
 800be62:	4613      	mov	r3, r2
 800be64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	785b      	ldrb	r3, [r3, #1]
 800be6e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800be70:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be74:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d028      	beq.n	800bed4 <USB_HC_StartXfer+0x7c>
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	791b      	ldrb	r3, [r3, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d124      	bne.n	800bed4 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800be8a:	79fb      	ldrb	r3, [r7, #7]
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10b      	bne.n	800bea8 <USB_HC_StartXfer+0x50>
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	795b      	ldrb	r3, [r3, #5]
 800be94:	2b01      	cmp	r3, #1
 800be96:	d107      	bne.n	800bea8 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800be98:	68bb      	ldr	r3, [r7, #8]
 800be9a:	785b      	ldrb	r3, [r3, #1]
 800be9c:	4619      	mov	r1, r3
 800be9e:	68f8      	ldr	r0, [r7, #12]
 800bea0:	f000 fa2e 	bl	800c300 <USB_DoPing>
      return HAL_OK;
 800bea4:	2300      	movs	r3, #0
 800bea6:	e113      	b.n	800c0d0 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	2b01      	cmp	r3, #1
 800beac:	d112      	bne.n	800bed4 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	015a      	lsls	r2, r3, #5
 800beb2:	6a3b      	ldr	r3, [r7, #32]
 800beb4:	4413      	add	r3, r2
 800beb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beba:	68db      	ldr	r3, [r3, #12]
 800bebc:	69fa      	ldr	r2, [r7, #28]
 800bebe:	0151      	lsls	r1, r2, #5
 800bec0:	6a3a      	ldr	r2, [r7, #32]
 800bec2:	440a      	add	r2, r1
 800bec4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bec8:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800becc:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bece:	68bb      	ldr	r3, [r7, #8]
 800bed0:	2200      	movs	r2, #0
 800bed2:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	691b      	ldr	r3, [r3, #16]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d018      	beq.n	800bf0e <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	691b      	ldr	r3, [r3, #16]
 800bee0:	68ba      	ldr	r2, [r7, #8]
 800bee2:	8912      	ldrh	r2, [r2, #8]
 800bee4:	4413      	add	r3, r2
 800bee6:	3b01      	subs	r3, #1
 800bee8:	68ba      	ldr	r2, [r7, #8]
 800beea:	8912      	ldrh	r2, [r2, #8]
 800beec:	fbb3 f3f2 	udiv	r3, r3, r2
 800bef0:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bef2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800bef4:	8b7b      	ldrh	r3, [r7, #26]
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d90b      	bls.n	800bf12 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800befa:	8b7b      	ldrh	r3, [r7, #26]
 800befc:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800befe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf00:	68ba      	ldr	r2, [r7, #8]
 800bf02:	8912      	ldrh	r2, [r2, #8]
 800bf04:	fb03 f202 	mul.w	r2, r3, r2
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	611a      	str	r2, [r3, #16]
 800bf0c:	e001      	b.n	800bf12 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800bf0e:	2301      	movs	r3, #1
 800bf10:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800bf12:	68bb      	ldr	r3, [r7, #8]
 800bf14:	78db      	ldrb	r3, [r3, #3]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d006      	beq.n	800bf28 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800bf1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	8912      	ldrh	r2, [r2, #8]
 800bf20:	fb03 f202 	mul.w	r2, r3, r2
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bf28:	68bb      	ldr	r3, [r7, #8]
 800bf2a:	691b      	ldr	r3, [r3, #16]
 800bf2c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bf30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800bf32:	04d9      	lsls	r1, r3, #19
 800bf34:	4b68      	ldr	r3, [pc, #416]	; (800c0d8 <USB_HC_StartXfer+0x280>)
 800bf36:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bf38:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	7a9b      	ldrb	r3, [r3, #10]
 800bf3e:	075b      	lsls	r3, r3, #29
 800bf40:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bf44:	69f9      	ldr	r1, [r7, #28]
 800bf46:	0148      	lsls	r0, r1, #5
 800bf48:	6a39      	ldr	r1, [r7, #32]
 800bf4a:	4401      	add	r1, r0
 800bf4c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800bf50:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bf52:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800bf54:	79fb      	ldrb	r3, [r7, #7]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d009      	beq.n	800bf6e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	68d9      	ldr	r1, [r3, #12]
 800bf5e:	69fb      	ldr	r3, [r7, #28]
 800bf60:	015a      	lsls	r2, r3, #5
 800bf62:	6a3b      	ldr	r3, [r7, #32]
 800bf64:	4413      	add	r3, r2
 800bf66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf6a:	460a      	mov	r2, r1
 800bf6c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf74:	689b      	ldr	r3, [r3, #8]
 800bf76:	f003 0301 	and.w	r3, r3, #1
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	bf0c      	ite	eq
 800bf7e:	2301      	moveq	r3, #1
 800bf80:	2300      	movne	r3, #0
 800bf82:	b2db      	uxtb	r3, r3
 800bf84:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bf86:	69fb      	ldr	r3, [r7, #28]
 800bf88:	015a      	lsls	r2, r3, #5
 800bf8a:	6a3b      	ldr	r3, [r7, #32]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	69fa      	ldr	r2, [r7, #28]
 800bf96:	0151      	lsls	r1, r2, #5
 800bf98:	6a3a      	ldr	r2, [r7, #32]
 800bf9a:	440a      	add	r2, r1
 800bf9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bfa0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bfa4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	015a      	lsls	r2, r3, #5
 800bfaa:	6a3b      	ldr	r3, [r7, #32]
 800bfac:	4413      	add	r3, r2
 800bfae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfb2:	681a      	ldr	r2, [r3, #0]
 800bfb4:	7e7b      	ldrb	r3, [r7, #25]
 800bfb6:	075b      	lsls	r3, r3, #29
 800bfb8:	69f9      	ldr	r1, [r7, #28]
 800bfba:	0148      	lsls	r0, r1, #5
 800bfbc:	6a39      	ldr	r1, [r7, #32]
 800bfbe:	4401      	add	r1, r0
 800bfc0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bfc4:	4313      	orrs	r3, r2
 800bfc6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	015a      	lsls	r2, r3, #5
 800bfcc:	6a3b      	ldr	r3, [r7, #32]
 800bfce:	4413      	add	r3, r2
 800bfd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a41      	ldr	r2, [pc, #260]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800bfd8:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bfda:	4b40      	ldr	r3, [pc, #256]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bfe2:	4a3e      	ldr	r2, [pc, #248]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800bfe4:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bfe6:	68bb      	ldr	r3, [r7, #8]
 800bfe8:	78db      	ldrb	r3, [r3, #3]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d006      	beq.n	800bffc <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bfee:	4b3b      	ldr	r3, [pc, #236]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bff6:	4a39      	ldr	r2, [pc, #228]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800bff8:	6013      	str	r3, [r2, #0]
 800bffa:	e005      	b.n	800c008 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bffc:	4b37      	ldr	r3, [pc, #220]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c004:	4a35      	ldr	r2, [pc, #212]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800c006:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c008:	4b34      	ldr	r3, [pc, #208]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c010:	4a32      	ldr	r2, [pc, #200]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800c012:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c014:	69fb      	ldr	r3, [r7, #28]
 800c016:	015a      	lsls	r2, r3, #5
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	4413      	add	r3, r2
 800c01c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c020:	461a      	mov	r2, r3
 800c022:	4b2e      	ldr	r3, [pc, #184]	; (800c0dc <USB_HC_StartXfer+0x284>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c02e:	2300      	movs	r3, #0
 800c030:	e04e      	b.n	800c0d0 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	78db      	ldrb	r3, [r3, #3]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d149      	bne.n	800c0ce <USB_HC_StartXfer+0x276>
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	691b      	ldr	r3, [r3, #16]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d045      	beq.n	800c0ce <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	79db      	ldrb	r3, [r3, #7]
 800c046:	2b03      	cmp	r3, #3
 800c048:	d830      	bhi.n	800c0ac <USB_HC_StartXfer+0x254>
 800c04a:	a201      	add	r2, pc, #4	; (adr r2, 800c050 <USB_HC_StartXfer+0x1f8>)
 800c04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c050:	0800c061 	.word	0x0800c061
 800c054:	0800c085 	.word	0x0800c085
 800c058:	0800c061 	.word	0x0800c061
 800c05c:	0800c085 	.word	0x0800c085
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c060:	68bb      	ldr	r3, [r7, #8]
 800c062:	691b      	ldr	r3, [r3, #16]
 800c064:	3303      	adds	r3, #3
 800c066:	089b      	lsrs	r3, r3, #2
 800c068:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c06a:	8afa      	ldrh	r2, [r7, #22]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c070:	b29b      	uxth	r3, r3
 800c072:	429a      	cmp	r2, r3
 800c074:	d91c      	bls.n	800c0b0 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	699b      	ldr	r3, [r3, #24]
 800c07a:	f043 0220 	orr.w	r2, r3, #32
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	619a      	str	r2, [r3, #24]
        }
        break;
 800c082:	e015      	b.n	800c0b0 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	691b      	ldr	r3, [r3, #16]
 800c088:	3303      	adds	r3, #3
 800c08a:	089b      	lsrs	r3, r3, #2
 800c08c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c08e:	8afa      	ldrh	r2, [r7, #22]
 800c090:	6a3b      	ldr	r3, [r7, #32]
 800c092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c096:	691b      	ldr	r3, [r3, #16]
 800c098:	b29b      	uxth	r3, r3
 800c09a:	429a      	cmp	r2, r3
 800c09c:	d90a      	bls.n	800c0b4 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	619a      	str	r2, [r3, #24]
        }
        break;
 800c0aa:	e003      	b.n	800c0b4 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c0ac:	bf00      	nop
 800c0ae:	e002      	b.n	800c0b6 <USB_HC_StartXfer+0x25e>
        break;
 800c0b0:	bf00      	nop
 800c0b2:	e000      	b.n	800c0b6 <USB_HC_StartXfer+0x25e>
        break;
 800c0b4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c0b6:	68bb      	ldr	r3, [r7, #8]
 800c0b8:	68d9      	ldr	r1, [r3, #12]
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	785a      	ldrb	r2, [r3, #1]
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	2000      	movs	r0, #0
 800c0c6:	9000      	str	r0, [sp, #0]
 800c0c8:	68f8      	ldr	r0, [r7, #12]
 800c0ca:	f7ff fb8b 	bl	800b7e4 <USB_WritePacket>
  }

  return HAL_OK;
 800c0ce:	2300      	movs	r3, #0
}
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	3728      	adds	r7, #40	; 0x28
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd80      	pop	{r7, pc}
 800c0d8:	1ff80000 	.word	0x1ff80000
 800c0dc:	200006dc 	.word	0x200006dc

0800c0e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0f2:	695b      	ldr	r3, [r3, #20]
 800c0f4:	b29b      	uxth	r3, r3
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3714      	adds	r7, #20
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c100:	4770      	bx	lr

0800c102 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c102:	b480      	push	{r7}
 800c104:	b087      	sub	sp, #28
 800c106:	af00      	add	r7, sp, #0
 800c108:	6078      	str	r0, [r7, #4]
 800c10a:	460b      	mov	r3, r1
 800c10c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c112:	78fb      	ldrb	r3, [r7, #3]
 800c114:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c116:	2300      	movs	r3, #0
 800c118:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	015a      	lsls	r2, r3, #5
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	4413      	add	r3, r2
 800c122:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	0c9b      	lsrs	r3, r3, #18
 800c12a:	f003 0303 	and.w	r3, r3, #3
 800c12e:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d002      	beq.n	800c13c <USB_HC_Halt+0x3a>
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	2b02      	cmp	r3, #2
 800c13a:	d16c      	bne.n	800c216 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	015a      	lsls	r2, r3, #5
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	4413      	add	r3, r2
 800c144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	68fa      	ldr	r2, [r7, #12]
 800c14c:	0151      	lsls	r1, r2, #5
 800c14e:	693a      	ldr	r2, [r7, #16]
 800c150:	440a      	add	r2, r1
 800c152:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c15a:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c160:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d143      	bne.n	800c1f0 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	015a      	lsls	r2, r3, #5
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	68fa      	ldr	r2, [r7, #12]
 800c178:	0151      	lsls	r1, r2, #5
 800c17a:	693a      	ldr	r2, [r7, #16]
 800c17c:	440a      	add	r2, r1
 800c17e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c182:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c186:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	015a      	lsls	r2, r3, #5
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	4413      	add	r3, r2
 800c190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	68fa      	ldr	r2, [r7, #12]
 800c198:	0151      	lsls	r1, r2, #5
 800c19a:	693a      	ldr	r2, [r7, #16]
 800c19c:	440a      	add	r2, r1
 800c19e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1a6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	015a      	lsls	r2, r3, #5
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	4413      	add	r3, r2
 800c1b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68fa      	ldr	r2, [r7, #12]
 800c1b8:	0151      	lsls	r1, r2, #5
 800c1ba:	693a      	ldr	r2, [r7, #16]
 800c1bc:	440a      	add	r2, r1
 800c1be:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1c6:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	617b      	str	r3, [r7, #20]
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1d4:	d81d      	bhi.n	800c212 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	015a      	lsls	r2, r3, #5
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	4413      	add	r3, r2
 800c1de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1ec:	d0ec      	beq.n	800c1c8 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c1ee:	e080      	b.n	800c2f2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	015a      	lsls	r2, r3, #5
 800c1f4:	693b      	ldr	r3, [r7, #16]
 800c1f6:	4413      	add	r3, r2
 800c1f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	0151      	lsls	r1, r2, #5
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	440a      	add	r2, r1
 800c206:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c20a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c20e:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c210:	e06f      	b.n	800c2f2 <USB_HC_Halt+0x1f0>
          break;
 800c212:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c214:	e06d      	b.n	800c2f2 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	015a      	lsls	r2, r3, #5
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	4413      	add	r3, r2
 800c21e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	68fa      	ldr	r2, [r7, #12]
 800c226:	0151      	lsls	r1, r2, #5
 800c228:	693a      	ldr	r2, [r7, #16]
 800c22a:	440a      	add	r2, r1
 800c22c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c230:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c234:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c23c:	691b      	ldr	r3, [r3, #16]
 800c23e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c242:	2b00      	cmp	r3, #0
 800c244:	d143      	bne.n	800c2ce <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	015a      	lsls	r2, r3, #5
 800c24a:	693b      	ldr	r3, [r7, #16]
 800c24c:	4413      	add	r3, r2
 800c24e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	68fa      	ldr	r2, [r7, #12]
 800c256:	0151      	lsls	r1, r2, #5
 800c258:	693a      	ldr	r2, [r7, #16]
 800c25a:	440a      	add	r2, r1
 800c25c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c260:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c264:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	015a      	lsls	r2, r3, #5
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	4413      	add	r3, r2
 800c26e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	0151      	lsls	r1, r2, #5
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	440a      	add	r2, r1
 800c27c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c280:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c284:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	015a      	lsls	r2, r3, #5
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	4413      	add	r3, r2
 800c28e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	0151      	lsls	r1, r2, #5
 800c298:	693a      	ldr	r2, [r7, #16]
 800c29a:	440a      	add	r2, r1
 800c29c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2a4:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	3301      	adds	r3, #1
 800c2aa:	617b      	str	r3, [r7, #20]
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c2b2:	d81d      	bhi.n	800c2f0 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c2b4:	68fb      	ldr	r3, [r7, #12]
 800c2b6:	015a      	lsls	r2, r3, #5
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	4413      	add	r3, r2
 800c2bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2ca:	d0ec      	beq.n	800c2a6 <USB_HC_Halt+0x1a4>
 800c2cc:	e011      	b.n	800c2f2 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	015a      	lsls	r2, r3, #5
 800c2d2:	693b      	ldr	r3, [r7, #16]
 800c2d4:	4413      	add	r3, r2
 800c2d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	68fa      	ldr	r2, [r7, #12]
 800c2de:	0151      	lsls	r1, r2, #5
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	440a      	add	r2, r1
 800c2e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c2ec:	6013      	str	r3, [r2, #0]
 800c2ee:	e000      	b.n	800c2f2 <USB_HC_Halt+0x1f0>
          break;
 800c2f0:	bf00      	nop
    }
  }

  return HAL_OK;
 800c2f2:	2300      	movs	r3, #0
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	371c      	adds	r7, #28
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fe:	4770      	bx	lr

0800c300 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c300:	b480      	push	{r7}
 800c302:	b087      	sub	sp, #28
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
 800c308:	460b      	mov	r3, r1
 800c30a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c310:	78fb      	ldrb	r3, [r7, #3]
 800c312:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c314:	2301      	movs	r3, #1
 800c316:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	04da      	lsls	r2, r3, #19
 800c31c:	4b15      	ldr	r3, [pc, #84]	; (800c374 <USB_DoPing+0x74>)
 800c31e:	4013      	ands	r3, r2
 800c320:	693a      	ldr	r2, [r7, #16]
 800c322:	0151      	lsls	r1, r2, #5
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	440a      	add	r2, r1
 800c328:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c32c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c330:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c342:	68bb      	ldr	r3, [r7, #8]
 800c344:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c348:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c34a:	68bb      	ldr	r3, [r7, #8]
 800c34c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c350:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c352:	693b      	ldr	r3, [r7, #16]
 800c354:	015a      	lsls	r2, r3, #5
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	4413      	add	r3, r2
 800c35a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c35e:	461a      	mov	r2, r3
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c364:	2300      	movs	r3, #0
}
 800c366:	4618      	mov	r0, r3
 800c368:	371c      	adds	r7, #28
 800c36a:	46bd      	mov	sp, r7
 800c36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c370:	4770      	bx	lr
 800c372:	bf00      	nop
 800c374:	1ff80000 	.word	0x1ff80000

0800c378 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b086      	sub	sp, #24
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c384:	2300      	movs	r3, #0
 800c386:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c388:	6878      	ldr	r0, [r7, #4]
 800c38a:	f7ff f9a7 	bl	800b6dc <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c38e:	2110      	movs	r1, #16
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f7ff f9df 	bl	800b754 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c396:	6878      	ldr	r0, [r7, #4]
 800c398:	f7ff fa02 	bl	800b7a0 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c39c:	2300      	movs	r3, #0
 800c39e:	613b      	str	r3, [r7, #16]
 800c3a0:	e01f      	b.n	800c3e2 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	015a      	lsls	r2, r3, #5
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	4413      	add	r3, r2
 800c3aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c3b2:	68bb      	ldr	r3, [r7, #8]
 800c3b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c3b8:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c3c0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c3c2:	68bb      	ldr	r3, [r7, #8]
 800c3c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c3c8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	015a      	lsls	r2, r3, #5
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3d6:	461a      	mov	r2, r3
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c3dc:	693b      	ldr	r3, [r7, #16]
 800c3de:	3301      	adds	r3, #1
 800c3e0:	613b      	str	r3, [r7, #16]
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	2b0f      	cmp	r3, #15
 800c3e6:	d9dc      	bls.n	800c3a2 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	613b      	str	r3, [r7, #16]
 800c3ec:	e034      	b.n	800c458 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c3ee:	693b      	ldr	r3, [r7, #16]
 800c3f0:	015a      	lsls	r2, r3, #5
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c404:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c406:	68bb      	ldr	r3, [r7, #8]
 800c408:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c40c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c40e:	68bb      	ldr	r3, [r7, #8]
 800c410:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c414:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	015a      	lsls	r2, r3, #5
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	4413      	add	r3, r2
 800c41e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c422:	461a      	mov	r2, r3
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c428:	697b      	ldr	r3, [r7, #20]
 800c42a:	3301      	adds	r3, #1
 800c42c:	617b      	str	r3, [r7, #20]
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c434:	d80c      	bhi.n	800c450 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	015a      	lsls	r2, r3, #5
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	4413      	add	r3, r2
 800c43e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c448:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c44c:	d0ec      	beq.n	800c428 <USB_StopHost+0xb0>
 800c44e:	e000      	b.n	800c452 <USB_StopHost+0xda>
        break;
 800c450:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c452:	693b      	ldr	r3, [r7, #16]
 800c454:	3301      	adds	r3, #1
 800c456:	613b      	str	r3, [r7, #16]
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	2b0f      	cmp	r3, #15
 800c45c:	d9c7      	bls.n	800c3ee <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c464:	461a      	mov	r2, r3
 800c466:	f04f 33ff 	mov.w	r3, #4294967295
 800c46a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f04f 32ff 	mov.w	r2, #4294967295
 800c472:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c474:	6878      	ldr	r0, [r7, #4]
 800c476:	f7ff f920 	bl	800b6ba <USB_EnableGlobalInt>

  return HAL_OK;
 800c47a:	2300      	movs	r3, #0
}
 800c47c:	4618      	mov	r0, r3
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c488:	4904      	ldr	r1, [pc, #16]	; (800c49c <MX_FATFS_Init+0x18>)
 800c48a:	4805      	ldr	r0, [pc, #20]	; (800c4a0 <MX_FATFS_Init+0x1c>)
 800c48c:	f004 fbdc 	bl	8010c48 <FATFS_LinkDriver>
 800c490:	4603      	mov	r3, r0
 800c492:	461a      	mov	r2, r3
 800c494:	4b03      	ldr	r3, [pc, #12]	; (800c4a4 <MX_FATFS_Init+0x20>)
 800c496:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c498:	bf00      	nop
 800c49a:	bd80      	pop	{r7, pc}
 800c49c:	200006e4 	.word	0x200006e4
 800c4a0:	08018c6c 	.word	0x08018c6c
 800c4a4:	200006e0 	.word	0x200006e0

0800c4a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c4a8:	b480      	push	{r7}
 800c4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c4ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 800c4c0:	f004 fcac 	bl	8010e1c <osKernelGetTickCount>
 800c4c4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 800c4c6:	e006      	b.n	800c4d6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c4c8:	f7f7 f85c 	bl	8003584 <BSP_SD_GetCardState>
 800c4cc:	4603      	mov	r3, r0
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d101      	bne.n	800c4d6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	e009      	b.n	800c4ea <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 800c4d6:	f004 fca1 	bl	8010e1c <osKernelGetTickCount>
 800c4da:	4602      	mov	r2, r0
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	1ad3      	subs	r3, r2, r3
 800c4e0:	687a      	ldr	r2, [r7, #4]
 800c4e2:	429a      	cmp	r2, r3
 800c4e4:	d8f0      	bhi.n	800c4c8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c4e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3710      	adds	r7, #16
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
	...

0800c4f4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c4f4:	b580      	push	{r7, lr}
 800c4f6:	b082      	sub	sp, #8
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c4fe:	4b0b      	ldr	r3, [pc, #44]	; (800c52c <SD_CheckStatus+0x38>)
 800c500:	2201      	movs	r2, #1
 800c502:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c504:	f7f7 f83e 	bl	8003584 <BSP_SD_GetCardState>
 800c508:	4603      	mov	r3, r0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d107      	bne.n	800c51e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c50e:	4b07      	ldr	r3, [pc, #28]	; (800c52c <SD_CheckStatus+0x38>)
 800c510:	781b      	ldrb	r3, [r3, #0]
 800c512:	b2db      	uxtb	r3, r3
 800c514:	f023 0301 	bic.w	r3, r3, #1
 800c518:	b2da      	uxtb	r2, r3
 800c51a:	4b04      	ldr	r3, [pc, #16]	; (800c52c <SD_CheckStatus+0x38>)
 800c51c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c51e:	4b03      	ldr	r3, [pc, #12]	; (800c52c <SD_CheckStatus+0x38>)
 800c520:	781b      	ldrb	r3, [r3, #0]
 800c522:	b2db      	uxtb	r3, r3
}
 800c524:	4618      	mov	r0, r3
 800c526:	3708      	adds	r7, #8
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	20000061 	.word	0x20000061

0800c530 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	4603      	mov	r3, r0
 800c538:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800c53a:	4b1c      	ldr	r3, [pc, #112]	; (800c5ac <SD_initialize+0x7c>)
 800c53c:	2201      	movs	r2, #1
 800c53e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 800c540:	f004 fc14 	bl	8010d6c <osKernelGetState>
 800c544:	4603      	mov	r3, r0
 800c546:	2b02      	cmp	r3, #2
 800c548:	d129      	bne.n	800c59e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800c54a:	f7f6 fe69 	bl	8003220 <BSP_SD_Init>
 800c54e:	4603      	mov	r3, r0
 800c550:	2b00      	cmp	r3, #0
 800c552:	d107      	bne.n	800c564 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800c554:	79fb      	ldrb	r3, [r7, #7]
 800c556:	4618      	mov	r0, r3
 800c558:	f7ff ffcc 	bl	800c4f4 <SD_CheckStatus>
 800c55c:	4603      	mov	r3, r0
 800c55e:	461a      	mov	r2, r3
 800c560:	4b12      	ldr	r3, [pc, #72]	; (800c5ac <SD_initialize+0x7c>)
 800c562:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800c564:	4b11      	ldr	r3, [pc, #68]	; (800c5ac <SD_initialize+0x7c>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	b2db      	uxtb	r3, r3
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d017      	beq.n	800c59e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 800c56e:	4b10      	ldr	r3, [pc, #64]	; (800c5b0 <SD_initialize+0x80>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d107      	bne.n	800c586 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 800c576:	2200      	movs	r2, #0
 800c578:	2102      	movs	r1, #2
 800c57a:	200a      	movs	r0, #10
 800c57c:	f004 ff74 	bl	8011468 <osMessageQueueNew>
 800c580:	4603      	mov	r3, r0
 800c582:	4a0b      	ldr	r2, [pc, #44]	; (800c5b0 <SD_initialize+0x80>)
 800c584:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 800c586:	4b0a      	ldr	r3, [pc, #40]	; (800c5b0 <SD_initialize+0x80>)
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d107      	bne.n	800c59e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 800c58e:	4b07      	ldr	r3, [pc, #28]	; (800c5ac <SD_initialize+0x7c>)
 800c590:	781b      	ldrb	r3, [r3, #0]
 800c592:	b2db      	uxtb	r3, r3
 800c594:	f043 0301 	orr.w	r3, r3, #1
 800c598:	b2da      	uxtb	r2, r3
 800c59a:	4b04      	ldr	r3, [pc, #16]	; (800c5ac <SD_initialize+0x7c>)
 800c59c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800c59e:	4b03      	ldr	r3, [pc, #12]	; (800c5ac <SD_initialize+0x7c>)
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	b2db      	uxtb	r3, r3
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3708      	adds	r7, #8
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}
 800c5ac:	20000061 	.word	0x20000061
 800c5b0:	200006e8 	.word	0x200006e8

0800c5b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b082      	sub	sp, #8
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	4603      	mov	r3, r0
 800c5bc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c5be:	79fb      	ldrb	r3, [r7, #7]
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7ff ff97 	bl	800c4f4 <SD_CheckStatus>
 800c5c6:	4603      	mov	r3, r0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3708      	adds	r7, #8
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	bd80      	pop	{r7, pc}

0800c5d0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b088      	sub	sp, #32
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	60b9      	str	r1, [r7, #8]
 800c5d8:	607a      	str	r2, [r7, #4]
 800c5da:	603b      	str	r3, [r7, #0]
 800c5dc:	4603      	mov	r3, r0
 800c5de:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c5e0:	2301      	movs	r3, #1
 800c5e2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c5e4:	f247 5030 	movw	r0, #30000	; 0x7530
 800c5e8:	f7ff ff66 	bl	800c4b8 <SD_CheckStatusWithTimeout>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	da01      	bge.n	800c5f6 <SD_read+0x26>
  {
    return res;
 800c5f2:	7ffb      	ldrb	r3, [r7, #31]
 800c5f4:	e02f      	b.n	800c656 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	6879      	ldr	r1, [r7, #4]
 800c5fa:	68b8      	ldr	r0, [r7, #8]
 800c5fc:	f7f6 fe74 	bl	80032e8 <BSP_SD_ReadBlocks_DMA>
 800c600:	4603      	mov	r3, r0
 800c602:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 800c604:	7fbb      	ldrb	r3, [r7, #30]
 800c606:	2b00      	cmp	r3, #0
 800c608:	d124      	bne.n	800c654 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c60a:	4b15      	ldr	r3, [pc, #84]	; (800c660 <SD_read+0x90>)
 800c60c:	6818      	ldr	r0, [r3, #0]
 800c60e:	f107 0112 	add.w	r1, r7, #18
 800c612:	f247 5330 	movw	r3, #30000	; 0x7530
 800c616:	2200      	movs	r2, #0
 800c618:	f005 f820 	bl	801165c <osMessageQueueGet>
 800c61c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 800c61e:	69bb      	ldr	r3, [r7, #24]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d117      	bne.n	800c654 <SD_read+0x84>
 800c624:	8a7b      	ldrh	r3, [r7, #18]
 800c626:	2b01      	cmp	r3, #1
 800c628:	d114      	bne.n	800c654 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 800c62a:	f004 fbf7 	bl	8010e1c <osKernelGetTickCount>
 800c62e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c630:	e007      	b.n	800c642 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c632:	f7f6 ffa7 	bl	8003584 <BSP_SD_GetCardState>
 800c636:	4603      	mov	r3, r0
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d102      	bne.n	800c642 <SD_read+0x72>
              {
                res = RES_OK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800c640:	e008      	b.n	800c654 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 800c642:	f004 fbeb 	bl	8010e1c <osKernelGetTickCount>
 800c646:	4602      	mov	r2, r0
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	1ad3      	subs	r3, r2, r3
 800c64c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c650:	4293      	cmp	r3, r2
 800c652:	d9ee      	bls.n	800c632 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800c654:	7ffb      	ldrb	r3, [r7, #31]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3720      	adds	r7, #32
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd80      	pop	{r7, pc}
 800c65e:	bf00      	nop
 800c660:	200006e8 	.word	0x200006e8

0800c664 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b088      	sub	sp, #32
 800c668:	af00      	add	r7, sp, #0
 800c66a:	60b9      	str	r1, [r7, #8]
 800c66c:	607a      	str	r2, [r7, #4]
 800c66e:	603b      	str	r3, [r7, #0]
 800c670:	4603      	mov	r3, r0
 800c672:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c674:	2301      	movs	r3, #1
 800c676:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c678:	f247 5030 	movw	r0, #30000	; 0x7530
 800c67c:	f7ff ff1c 	bl	800c4b8 <SD_CheckStatusWithTimeout>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	da01      	bge.n	800c68a <SD_write+0x26>
  {
    return res;
 800c686:	7ffb      	ldrb	r3, [r7, #31]
 800c688:	e02d      	b.n	800c6e6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	6879      	ldr	r1, [r7, #4]
 800c68e:	68b8      	ldr	r0, [r7, #8]
 800c690:	f7f6 fe42 	bl	8003318 <BSP_SD_WriteBlocks_DMA>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	d124      	bne.n	800c6e4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 800c69a:	4b15      	ldr	r3, [pc, #84]	; (800c6f0 <SD_write+0x8c>)
 800c69c:	6818      	ldr	r0, [r3, #0]
 800c69e:	f107 0112 	add.w	r1, r7, #18
 800c6a2:	f247 5330 	movw	r3, #30000	; 0x7530
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f004 ffd8 	bl	801165c <osMessageQueueGet>
 800c6ac:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800c6ae:	69bb      	ldr	r3, [r7, #24]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d117      	bne.n	800c6e4 <SD_write+0x80>
 800c6b4:	8a7b      	ldrh	r3, [r7, #18]
 800c6b6:	2b02      	cmp	r3, #2
 800c6b8:	d114      	bne.n	800c6e4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 800c6ba:	f004 fbaf 	bl	8010e1c <osKernelGetTickCount>
 800c6be:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c6c0:	e007      	b.n	800c6d2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c6c2:	f7f6 ff5f 	bl	8003584 <BSP_SD_GetCardState>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d102      	bne.n	800c6d2 <SD_write+0x6e>
          {
            res = RES_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	77fb      	strb	r3, [r7, #31]
            break;
 800c6d0:	e008      	b.n	800c6e4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800c6d2:	f004 fba3 	bl	8010e1c <osKernelGetTickCount>
 800c6d6:	4602      	mov	r2, r0
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	1ad3      	subs	r3, r2, r3
 800c6dc:	f247 522f 	movw	r2, #29999	; 0x752f
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d9ee      	bls.n	800c6c2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 800c6e4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3720      	adds	r7, #32
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	200006e8 	.word	0x200006e8

0800c6f4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b08c      	sub	sp, #48	; 0x30
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	603a      	str	r2, [r7, #0]
 800c6fe:	71fb      	strb	r3, [r7, #7]
 800c700:	460b      	mov	r3, r1
 800c702:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c704:	2301      	movs	r3, #1
 800c706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c70a:	4b25      	ldr	r3, [pc, #148]	; (800c7a0 <SD_ioctl+0xac>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	b2db      	uxtb	r3, r3
 800c710:	f003 0301 	and.w	r3, r3, #1
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <SD_ioctl+0x28>
 800c718:	2303      	movs	r3, #3
 800c71a:	e03c      	b.n	800c796 <SD_ioctl+0xa2>

  switch (cmd)
 800c71c:	79bb      	ldrb	r3, [r7, #6]
 800c71e:	2b03      	cmp	r3, #3
 800c720:	d834      	bhi.n	800c78c <SD_ioctl+0x98>
 800c722:	a201      	add	r2, pc, #4	; (adr r2, 800c728 <SD_ioctl+0x34>)
 800c724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c728:	0800c739 	.word	0x0800c739
 800c72c:	0800c741 	.word	0x0800c741
 800c730:	0800c759 	.word	0x0800c759
 800c734:	0800c773 	.word	0x0800c773
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c738:	2300      	movs	r3, #0
 800c73a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c73e:	e028      	b.n	800c792 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c740:	f107 030c 	add.w	r3, r7, #12
 800c744:	4618      	mov	r0, r3
 800c746:	f7f6 ff2d 	bl	80035a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c74a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c750:	2300      	movs	r3, #0
 800c752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c756:	e01c      	b.n	800c792 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c758:	f107 030c 	add.w	r3, r7, #12
 800c75c:	4618      	mov	r0, r3
 800c75e:	f7f6 ff21 	bl	80035a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c764:	b29a      	uxth	r2, r3
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c76a:	2300      	movs	r3, #0
 800c76c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c770:	e00f      	b.n	800c792 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c772:	f107 030c 	add.w	r3, r7, #12
 800c776:	4618      	mov	r0, r3
 800c778:	f7f6 ff14 	bl	80035a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c77e:	0a5a      	lsrs	r2, r3, #9
 800c780:	683b      	ldr	r3, [r7, #0]
 800c782:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c784:	2300      	movs	r3, #0
 800c786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c78a:	e002      	b.n	800c792 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c78c:	2304      	movs	r3, #4
 800c78e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c792:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c796:	4618      	mov	r0, r3
 800c798:	3730      	adds	r7, #48	; 0x30
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	20000061 	.word	0x20000061

0800c7a4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b082      	sub	sp, #8
 800c7a8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 800c7aa:	2302      	movs	r3, #2
 800c7ac:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c7ae:	4b05      	ldr	r3, [pc, #20]	; (800c7c4 <BSP_SD_WriteCpltCallback+0x20>)
 800c7b0:	6818      	ldr	r0, [r3, #0]
 800c7b2:	1db9      	adds	r1, r7, #6
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f004 fedc 	bl	8011574 <osMessageQueuePut>
#endif
}
 800c7bc:	bf00      	nop
 800c7be:	3708      	adds	r7, #8
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}
 800c7c4:	200006e8 	.word	0x200006e8

0800c7c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800c7ce:	2301      	movs	r3, #1
 800c7d0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 800c7d2:	4b05      	ldr	r3, [pc, #20]	; (800c7e8 <BSP_SD_ReadCpltCallback+0x20>)
 800c7d4:	6818      	ldr	r0, [r3, #0]
 800c7d6:	1db9      	adds	r1, r7, #6
 800c7d8:	2300      	movs	r3, #0
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f004 feca 	bl	8011574 <osMessageQueuePut>
#endif
}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	200006e8 	.word	0x200006e8

0800c7ec <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800c7ec:	b590      	push	{r4, r7, lr}
 800c7ee:	b089      	sub	sp, #36	; 0x24
 800c7f0:	af04      	add	r7, sp, #16
 800c7f2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800c7f4:	2301      	movs	r3, #1
 800c7f6:	2202      	movs	r2, #2
 800c7f8:	2102      	movs	r1, #2
 800c7fa:	6878      	ldr	r0, [r7, #4]
 800c7fc:	f000 fcb2 	bl	800d164 <USBH_FindInterface>
 800c800:	4603      	mov	r3, r0
 800c802:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c804:	7bfb      	ldrb	r3, [r7, #15]
 800c806:	2bff      	cmp	r3, #255	; 0xff
 800c808:	d002      	beq.n	800c810 <USBH_CDC_InterfaceInit+0x24>
 800c80a:	7bfb      	ldrb	r3, [r7, #15]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d901      	bls.n	800c814 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c810:	2302      	movs	r3, #2
 800c812:	e13d      	b.n	800ca90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800c814:	7bfb      	ldrb	r3, [r7, #15]
 800c816:	4619      	mov	r1, r3
 800c818:	6878      	ldr	r0, [r7, #4]
 800c81a:	f000 fc87 	bl	800d12c <USBH_SelectInterface>
 800c81e:	4603      	mov	r3, r0
 800c820:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800c822:	7bbb      	ldrb	r3, [r7, #14]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d001      	beq.n	800c82c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800c828:	2302      	movs	r3, #2
 800c82a:	e131      	b.n	800ca90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800c832:	2050      	movs	r0, #80	; 0x50
 800c834:	f008 fca2 	bl	801517c <malloc>
 800c838:	4603      	mov	r3, r0
 800c83a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c842:	69db      	ldr	r3, [r3, #28]
 800c844:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800c84c:	2302      	movs	r3, #2
 800c84e:	e11f      	b.n	800ca90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800c850:	2250      	movs	r2, #80	; 0x50
 800c852:	2100      	movs	r1, #0
 800c854:	68b8      	ldr	r0, [r7, #8]
 800c856:	f008 fcaf 	bl	80151b8 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
 800c85c:	687a      	ldr	r2, [r7, #4]
 800c85e:	211a      	movs	r1, #26
 800c860:	fb01 f303 	mul.w	r3, r1, r3
 800c864:	4413      	add	r3, r2
 800c866:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c86a:	781b      	ldrb	r3, [r3, #0]
 800c86c:	b25b      	sxtb	r3, r3
 800c86e:	2b00      	cmp	r3, #0
 800c870:	da15      	bge.n	800c89e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c872:	7bfb      	ldrb	r3, [r7, #15]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	211a      	movs	r1, #26
 800c878:	fb01 f303 	mul.w	r3, r1, r3
 800c87c:	4413      	add	r3, r2
 800c87e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c882:	781a      	ldrb	r2, [r3, #0]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c888:	7bfb      	ldrb	r3, [r7, #15]
 800c88a:	687a      	ldr	r2, [r7, #4]
 800c88c:	211a      	movs	r1, #26
 800c88e:	fb01 f303 	mul.w	r3, r1, r3
 800c892:	4413      	add	r3, r2
 800c894:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c898:	881a      	ldrh	r2, [r3, #0]
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	785b      	ldrb	r3, [r3, #1]
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	6878      	ldr	r0, [r7, #4]
 800c8a6:	f002 f88c 	bl	800e9c2 <USBH_AllocPipe>
 800c8aa:	4603      	mov	r3, r0
 800c8ac:	461a      	mov	r2, r3
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800c8b2:	68bb      	ldr	r3, [r7, #8]
 800c8b4:	7819      	ldrb	r1, [r3, #0]
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	7858      	ldrb	r0, [r3, #1]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c8c6:	68ba      	ldr	r2, [r7, #8]
 800c8c8:	8952      	ldrh	r2, [r2, #10]
 800c8ca:	9202      	str	r2, [sp, #8]
 800c8cc:	2203      	movs	r2, #3
 800c8ce:	9201      	str	r2, [sp, #4]
 800c8d0:	9300      	str	r3, [sp, #0]
 800c8d2:	4623      	mov	r3, r4
 800c8d4:	4602      	mov	r2, r0
 800c8d6:	6878      	ldr	r0, [r7, #4]
 800c8d8:	f002 f844 	bl	800e964 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c8dc:	68bb      	ldr	r3, [r7, #8]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2200      	movs	r2, #0
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f008 fa9f 	bl	8014e28 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800c8ea:	2300      	movs	r3, #0
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	210a      	movs	r1, #10
 800c8f0:	6878      	ldr	r0, [r7, #4]
 800c8f2:	f000 fc37 	bl	800d164 <USBH_FindInterface>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800c8fa:	7bfb      	ldrb	r3, [r7, #15]
 800c8fc:	2bff      	cmp	r3, #255	; 0xff
 800c8fe:	d002      	beq.n	800c906 <USBH_CDC_InterfaceInit+0x11a>
 800c900:	7bfb      	ldrb	r3, [r7, #15]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d901      	bls.n	800c90a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800c906:	2302      	movs	r3, #2
 800c908:	e0c2      	b.n	800ca90 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	687a      	ldr	r2, [r7, #4]
 800c90e:	211a      	movs	r1, #26
 800c910:	fb01 f303 	mul.w	r3, r1, r3
 800c914:	4413      	add	r3, r2
 800c916:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	b25b      	sxtb	r3, r3
 800c91e:	2b00      	cmp	r3, #0
 800c920:	da16      	bge.n	800c950 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c922:	7bfb      	ldrb	r3, [r7, #15]
 800c924:	687a      	ldr	r2, [r7, #4]
 800c926:	211a      	movs	r1, #26
 800c928:	fb01 f303 	mul.w	r3, r1, r3
 800c92c:	4413      	add	r3, r2
 800c92e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c932:	781a      	ldrb	r2, [r3, #0]
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c938:	7bfb      	ldrb	r3, [r7, #15]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	211a      	movs	r1, #26
 800c93e:	fb01 f303 	mul.w	r3, r1, r3
 800c942:	4413      	add	r3, r2
 800c944:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c948:	881a      	ldrh	r2, [r3, #0]
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	835a      	strh	r2, [r3, #26]
 800c94e:	e015      	b.n	800c97c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c950:	7bfb      	ldrb	r3, [r7, #15]
 800c952:	687a      	ldr	r2, [r7, #4]
 800c954:	211a      	movs	r1, #26
 800c956:	fb01 f303 	mul.w	r3, r1, r3
 800c95a:	4413      	add	r3, r2
 800c95c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800c960:	781a      	ldrb	r2, [r3, #0]
 800c962:	68bb      	ldr	r3, [r7, #8]
 800c964:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c966:	7bfb      	ldrb	r3, [r7, #15]
 800c968:	687a      	ldr	r2, [r7, #4]
 800c96a:	211a      	movs	r1, #26
 800c96c:	fb01 f303 	mul.w	r3, r1, r3
 800c970:	4413      	add	r3, r2
 800c972:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800c976:	881a      	ldrh	r2, [r3, #0]
 800c978:	68bb      	ldr	r3, [r7, #8]
 800c97a:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c97c:	7bfb      	ldrb	r3, [r7, #15]
 800c97e:	687a      	ldr	r2, [r7, #4]
 800c980:	211a      	movs	r1, #26
 800c982:	fb01 f303 	mul.w	r3, r1, r3
 800c986:	4413      	add	r3, r2
 800c988:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c98c:	781b      	ldrb	r3, [r3, #0]
 800c98e:	b25b      	sxtb	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	da16      	bge.n	800c9c2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c994:	7bfb      	ldrb	r3, [r7, #15]
 800c996:	687a      	ldr	r2, [r7, #4]
 800c998:	211a      	movs	r1, #26
 800c99a:	fb01 f303 	mul.w	r3, r1, r3
 800c99e:	4413      	add	r3, r2
 800c9a0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c9a4:	781a      	ldrb	r2, [r3, #0]
 800c9a6:	68bb      	ldr	r3, [r7, #8]
 800c9a8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
 800c9ac:	687a      	ldr	r2, [r7, #4]
 800c9ae:	211a      	movs	r1, #26
 800c9b0:	fb01 f303 	mul.w	r3, r1, r3
 800c9b4:	4413      	add	r3, r2
 800c9b6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c9ba:	881a      	ldrh	r2, [r3, #0]
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	835a      	strh	r2, [r3, #26]
 800c9c0:	e015      	b.n	800c9ee <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c9c2:	7bfb      	ldrb	r3, [r7, #15]
 800c9c4:	687a      	ldr	r2, [r7, #4]
 800c9c6:	211a      	movs	r1, #26
 800c9c8:	fb01 f303 	mul.w	r3, r1, r3
 800c9cc:	4413      	add	r3, r2
 800c9ce:	f203 3356 	addw	r3, r3, #854	; 0x356
 800c9d2:	781a      	ldrb	r2, [r3, #0]
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c9d8:	7bfb      	ldrb	r3, [r7, #15]
 800c9da:	687a      	ldr	r2, [r7, #4]
 800c9dc:	211a      	movs	r1, #26
 800c9de:	fb01 f303 	mul.w	r3, r1, r3
 800c9e2:	4413      	add	r3, r2
 800c9e4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800c9e8:	881a      	ldrh	r2, [r3, #0]
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	7b9b      	ldrb	r3, [r3, #14]
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f001 ffe4 	bl	800e9c2 <USBH_AllocPipe>
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	7bdb      	ldrb	r3, [r3, #15]
 800ca06:	4619      	mov	r1, r3
 800ca08:	6878      	ldr	r0, [r7, #4]
 800ca0a:	f001 ffda 	bl	800e9c2 <USBH_AllocPipe>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	461a      	mov	r2, r3
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	7b59      	ldrb	r1, [r3, #13]
 800ca1a:	68bb      	ldr	r3, [r7, #8]
 800ca1c:	7b98      	ldrb	r0, [r3, #14]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca2a:	68ba      	ldr	r2, [r7, #8]
 800ca2c:	8b12      	ldrh	r2, [r2, #24]
 800ca2e:	9202      	str	r2, [sp, #8]
 800ca30:	2202      	movs	r2, #2
 800ca32:	9201      	str	r2, [sp, #4]
 800ca34:	9300      	str	r3, [sp, #0]
 800ca36:	4623      	mov	r3, r4
 800ca38:	4602      	mov	r2, r0
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	f001 ff92 	bl	800e964 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ca40:	68bb      	ldr	r3, [r7, #8]
 800ca42:	7b19      	ldrb	r1, [r3, #12]
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	7bd8      	ldrb	r0, [r3, #15]
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	8b52      	ldrh	r2, [r2, #26]
 800ca58:	9202      	str	r2, [sp, #8]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	9201      	str	r2, [sp, #4]
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	4623      	mov	r3, r4
 800ca62:	4602      	mov	r2, r0
 800ca64:	6878      	ldr	r0, [r7, #4]
 800ca66:	f001 ff7d 	bl	800e964 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ca6a:	68bb      	ldr	r3, [r7, #8]
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	7b5b      	ldrb	r3, [r3, #13]
 800ca76:	2200      	movs	r2, #0
 800ca78:	4619      	mov	r1, r3
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f008 f9d4 	bl	8014e28 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	7b1b      	ldrb	r3, [r3, #12]
 800ca84:	2200      	movs	r2, #0
 800ca86:	4619      	mov	r1, r3
 800ca88:	6878      	ldr	r0, [r7, #4]
 800ca8a:	f008 f9cd 	bl	8014e28 <USBH_LL_SetToggle>

  return USBH_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	bd90      	pop	{r4, r7, pc}

0800ca98 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ca98:	b580      	push	{r7, lr}
 800ca9a:	b084      	sub	sp, #16
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800caa6:	69db      	ldr	r3, [r3, #28]
 800caa8:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	781b      	ldrb	r3, [r3, #0]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00e      	beq.n	800cad0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	781b      	ldrb	r3, [r3, #0]
 800cab6:	4619      	mov	r1, r3
 800cab8:	6878      	ldr	r0, [r7, #4]
 800caba:	f001 ff72 	bl	800e9a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	781b      	ldrb	r3, [r3, #0]
 800cac2:	4619      	mov	r1, r3
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f001 ff9d 	bl	800ea04 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	7b1b      	ldrb	r3, [r3, #12]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d00e      	beq.n	800caf6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	7b1b      	ldrb	r3, [r3, #12]
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f001 ff5f 	bl	800e9a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	7b1b      	ldrb	r3, [r3, #12]
 800cae8:	4619      	mov	r1, r3
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f001 ff8a 	bl	800ea04 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	7b5b      	ldrb	r3, [r3, #13]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d00e      	beq.n	800cb1c <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	7b5b      	ldrb	r3, [r3, #13]
 800cb02:	4619      	mov	r1, r3
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f001 ff4c 	bl	800e9a2 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	7b5b      	ldrb	r3, [r3, #13]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f001 ff77 	bl	800ea04 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb22:	69db      	ldr	r3, [r3, #28]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d00b      	beq.n	800cb40 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb2e:	69db      	ldr	r3, [r3, #28]
 800cb30:	4618      	mov	r0, r3
 800cb32:	f008 fb2b 	bl	801518c <free>
    phost->pActiveClass->pData = 0U;
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cb40:	2300      	movs	r3, #0
}
 800cb42:	4618      	mov	r0, r3
 800cb44:	3710      	adds	r7, #16
 800cb46:	46bd      	mov	sp, r7
 800cb48:	bd80      	pop	{r7, pc}

0800cb4a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cb4a:	b580      	push	{r7, lr}
 800cb4c:	b084      	sub	sp, #16
 800cb4e:	af00      	add	r7, sp, #0
 800cb50:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb58:	69db      	ldr	r3, [r3, #28]
 800cb5a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	3340      	adds	r3, #64	; 0x40
 800cb60:	4619      	mov	r1, r3
 800cb62:	6878      	ldr	r0, [r7, #4]
 800cb64:	f000 f8b1 	bl	800ccca <GetLineCoding>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cb6c:	7afb      	ldrb	r3, [r7, #11]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d105      	bne.n	800cb7e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cb78:	2102      	movs	r1, #2
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cb7e:	7afb      	ldrb	r3, [r7, #11]
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3710      	adds	r7, #16
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bd80      	pop	{r7, pc}

0800cb88 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b084      	sub	sp, #16
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800cb90:	2301      	movs	r3, #1
 800cb92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800cb94:	2300      	movs	r3, #0
 800cb96:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cb9e:	69db      	ldr	r3, [r3, #28]
 800cba0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800cba2:	68bb      	ldr	r3, [r7, #8]
 800cba4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800cba8:	2b04      	cmp	r3, #4
 800cbaa:	d877      	bhi.n	800cc9c <USBH_CDC_Process+0x114>
 800cbac:	a201      	add	r2, pc, #4	; (adr r2, 800cbb4 <USBH_CDC_Process+0x2c>)
 800cbae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb2:	bf00      	nop
 800cbb4:	0800cbc9 	.word	0x0800cbc9
 800cbb8:	0800cbcf 	.word	0x0800cbcf
 800cbbc:	0800cbff 	.word	0x0800cbff
 800cbc0:	0800cc73 	.word	0x0800cc73
 800cbc4:	0800cc81 	.word	0x0800cc81
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800cbc8:	2300      	movs	r3, #0
 800cbca:	73fb      	strb	r3, [r7, #15]
      break;
 800cbcc:	e06d      	b.n	800ccaa <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800cbce:	68bb      	ldr	r3, [r7, #8]
 800cbd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f000 f897 	bl	800cd08 <SetLineCoding>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cbde:	7bbb      	ldrb	r3, [r7, #14]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d104      	bne.n	800cbee <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800cbe4:	68bb      	ldr	r3, [r7, #8]
 800cbe6:	2202      	movs	r2, #2
 800cbe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cbec:	e058      	b.n	800cca0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800cbee:	7bbb      	ldrb	r3, [r7, #14]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d055      	beq.n	800cca0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cbf4:	68bb      	ldr	r3, [r7, #8]
 800cbf6:	2204      	movs	r2, #4
 800cbf8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cbfc:	e050      	b.n	800cca0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800cbfe:	68bb      	ldr	r3, [r7, #8]
 800cc00:	3340      	adds	r3, #64	; 0x40
 800cc02:	4619      	mov	r1, r3
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f000 f860 	bl	800ccca <GetLineCoding>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cc0e:	7bbb      	ldrb	r3, [r7, #14]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d126      	bne.n	800cc62 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800cc14:	68bb      	ldr	r3, [r7, #8]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cc1c:	68bb      	ldr	r3, [r7, #8]
 800cc1e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc26:	791b      	ldrb	r3, [r3, #4]
 800cc28:	429a      	cmp	r2, r3
 800cc2a:	d13b      	bne.n	800cca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc36:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d133      	bne.n	800cca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc46:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	d12b      	bne.n	800cca4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800cc4c:	68bb      	ldr	r3, [r7, #8]
 800cc4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cc54:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d124      	bne.n	800cca4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 f982 	bl	800cf64 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800cc60:	e020      	b.n	800cca4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800cc62:	7bbb      	ldrb	r3, [r7, #14]
 800cc64:	2b01      	cmp	r3, #1
 800cc66:	d01d      	beq.n	800cca4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	2204      	movs	r2, #4
 800cc6c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800cc70:	e018      	b.n	800cca4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f000 f867 	bl	800cd46 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f8f6 	bl	800ce6a <CDC_ProcessReception>
      break;
 800cc7e:	e014      	b.n	800ccaa <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800cc80:	2100      	movs	r1, #0
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f001 f94d 	bl	800df22 <USBH_ClrFeature>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800cc8c:	7bbb      	ldrb	r3, [r7, #14]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d10a      	bne.n	800cca8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	2200      	movs	r2, #0
 800cc96:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800cc9a:	e005      	b.n	800cca8 <USBH_CDC_Process+0x120>

    default:
      break;
 800cc9c:	bf00      	nop
 800cc9e:	e004      	b.n	800ccaa <USBH_CDC_Process+0x122>
      break;
 800cca0:	bf00      	nop
 800cca2:	e002      	b.n	800ccaa <USBH_CDC_Process+0x122>
      break;
 800cca4:	bf00      	nop
 800cca6:	e000      	b.n	800ccaa <USBH_CDC_Process+0x122>
      break;
 800cca8:	bf00      	nop

  }

  return status;
 800ccaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	3710      	adds	r7, #16
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	bd80      	pop	{r7, pc}

0800ccb4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ccb4:	b480      	push	{r7}
 800ccb6:	b083      	sub	sp, #12
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	370c      	adds	r7, #12
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc8:	4770      	bx	lr

0800ccca <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ccca:	b580      	push	{r7, lr}
 800cccc:	b082      	sub	sp, #8
 800ccce:	af00      	add	r7, sp, #0
 800ccd0:	6078      	str	r0, [r7, #4]
 800ccd2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	22a1      	movs	r2, #161	; 0xa1
 800ccd8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	2221      	movs	r2, #33	; 0x21
 800ccde:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2200      	movs	r2, #0
 800cce4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	2200      	movs	r2, #0
 800ccea:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2207      	movs	r2, #7
 800ccf0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ccf2:	683b      	ldr	r3, [r7, #0]
 800ccf4:	2207      	movs	r2, #7
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f001 faf2 	bl	800e2e2 <USBH_CtlReq>
 800ccfe:	4603      	mov	r3, r0
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3708      	adds	r7, #8
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800cd08:	b580      	push	{r7, lr}
 800cd0a:	b082      	sub	sp, #8
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2221      	movs	r2, #33	; 0x21
 800cd16:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	2200      	movs	r2, #0
 800cd22:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	2200      	movs	r2, #0
 800cd28:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	2207      	movs	r2, #7
 800cd2e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	2207      	movs	r2, #7
 800cd34:	4619      	mov	r1, r3
 800cd36:	6878      	ldr	r0, [r7, #4]
 800cd38:	f001 fad3 	bl	800e2e2 <USBH_CtlReq>
 800cd3c:	4603      	mov	r3, r0
}
 800cd3e:	4618      	mov	r0, r3
 800cd40:	3708      	adds	r7, #8
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b086      	sub	sp, #24
 800cd4a:	af02      	add	r7, sp, #8
 800cd4c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cd54:	69db      	ldr	r3, [r3, #28]
 800cd56:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d002      	beq.n	800cd6c <CDC_ProcessTransmission+0x26>
 800cd66:	2b02      	cmp	r3, #2
 800cd68:	d023      	beq.n	800cdb2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800cd6a:	e07a      	b.n	800ce62 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd70:	68fa      	ldr	r2, [r7, #12]
 800cd72:	8b12      	ldrh	r2, [r2, #24]
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d90b      	bls.n	800cd90 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	69d9      	ldr	r1, [r3, #28]
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	8b1a      	ldrh	r2, [r3, #24]
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	7b5b      	ldrb	r3, [r3, #13]
 800cd84:	2001      	movs	r0, #1
 800cd86:	9000      	str	r0, [sp, #0]
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f001 fda8 	bl	800e8de <USBH_BulkSendData>
 800cd8e:	e00b      	b.n	800cda8 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	7b5b      	ldrb	r3, [r3, #13]
 800cd9e:	2001      	movs	r0, #1
 800cda0:	9000      	str	r0, [sp, #0]
 800cda2:	6878      	ldr	r0, [r7, #4]
 800cda4:	f001 fd9b 	bl	800e8de <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2202      	movs	r2, #2
 800cdac:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800cdb0:	e057      	b.n	800ce62 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	7b5b      	ldrb	r3, [r3, #13]
 800cdb6:	4619      	mov	r1, r3
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f008 f80b 	bl	8014dd4 <USBH_LL_GetURBState>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800cdc2:	7afb      	ldrb	r3, [r7, #11]
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d136      	bne.n	800ce36 <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdcc:	68fa      	ldr	r2, [r7, #12]
 800cdce:	8b12      	ldrh	r2, [r2, #24]
 800cdd0:	4293      	cmp	r3, r2
 800cdd2:	d90e      	bls.n	800cdf2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	8b12      	ldrh	r2, [r2, #24]
 800cddc:	1a9a      	subs	r2, r3, r2
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	69db      	ldr	r3, [r3, #28]
 800cde6:	68fa      	ldr	r2, [r7, #12]
 800cde8:	8b12      	ldrh	r2, [r2, #24]
 800cdea:	441a      	add	r2, r3
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	61da      	str	r2, [r3, #28]
 800cdf0:	e002      	b.n	800cdf8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d004      	beq.n	800ce0a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	2201      	movs	r2, #1
 800ce04:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800ce08:	e006      	b.n	800ce18 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ce12:	6878      	ldr	r0, [r7, #4]
 800ce14:	f000 f892 	bl	800cf3c <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2204      	movs	r2, #4
 800ce1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	2200      	movs	r2, #0
 800ce30:	f004 fba0 	bl	8011574 <osMessageQueuePut>
      break;
 800ce34:	e014      	b.n	800ce60 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800ce36:	7afb      	ldrb	r3, [r7, #11]
 800ce38:	2b02      	cmp	r3, #2
 800ce3a:	d111      	bne.n	800ce60 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	2201      	movs	r2, #1
 800ce40:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2204      	movs	r2, #4
 800ce48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce58:	2300      	movs	r3, #0
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f004 fb8a 	bl	8011574 <osMessageQueuePut>
      break;
 800ce60:	bf00      	nop
  }
}
 800ce62:	bf00      	nop
 800ce64:	3710      	adds	r7, #16
 800ce66:	46bd      	mov	sp, r7
 800ce68:	bd80      	pop	{r7, pc}

0800ce6a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ce6a:	b580      	push	{r7, lr}
 800ce6c:	b086      	sub	sp, #24
 800ce6e:	af00      	add	r7, sp, #0
 800ce70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ce78:	69db      	ldr	r3, [r3, #28]
 800ce7a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ce86:	2b03      	cmp	r3, #3
 800ce88:	d002      	beq.n	800ce90 <CDC_ProcessReception+0x26>
 800ce8a:	2b04      	cmp	r3, #4
 800ce8c:	d00e      	beq.n	800ceac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ce8e:	e051      	b.n	800cf34 <CDC_ProcessReception+0xca>
      USBH_BulkReceiveData(phost,
 800ce90:	697b      	ldr	r3, [r7, #20]
 800ce92:	6a19      	ldr	r1, [r3, #32]
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	8b5a      	ldrh	r2, [r3, #26]
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	7b1b      	ldrb	r3, [r3, #12]
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f001 fd43 	bl	800e928 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800cea2:	697b      	ldr	r3, [r7, #20]
 800cea4:	2204      	movs	r2, #4
 800cea6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ceaa:	e043      	b.n	800cf34 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	7b1b      	ldrb	r3, [r3, #12]
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f007 ff8e 	bl	8014dd4 <USBH_LL_GetURBState>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800cebc:	7cfb      	ldrb	r3, [r7, #19]
 800cebe:	2b01      	cmp	r3, #1
 800cec0:	d137      	bne.n	800cf32 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	7b1b      	ldrb	r3, [r3, #12]
 800cec6:	4619      	mov	r1, r3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f007 fef1 	bl	8014cb0 <USBH_LL_GetLastXferSize>
 800cece:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	429a      	cmp	r2, r3
 800ced8:	d016      	beq.n	800cf08 <CDC_ProcessReception+0x9e>
 800ceda:	697b      	ldr	r3, [r7, #20]
 800cedc:	8b5b      	ldrh	r3, [r3, #26]
 800cede:	461a      	mov	r2, r3
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	4293      	cmp	r3, r2
 800cee4:	d910      	bls.n	800cf08 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800cee6:	697b      	ldr	r3, [r7, #20]
 800cee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	1ad2      	subs	r2, r2, r3
 800ceee:	697b      	ldr	r3, [r7, #20]
 800cef0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800cef2:	697b      	ldr	r3, [r7, #20]
 800cef4:	6a1a      	ldr	r2, [r3, #32]
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	441a      	add	r2, r3
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	2203      	movs	r2, #3
 800cf02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800cf06:	e006      	b.n	800cf16 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800cf10:	6878      	ldr	r0, [r7, #4]
 800cf12:	f000 f81d 	bl	800cf50 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	2204      	movs	r2, #4
 800cf1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf1e:	687b      	ldr	r3, [r7, #4]
 800cf20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	f004 fb21 	bl	8011574 <osMessageQueuePut>
      break;
 800cf32:	bf00      	nop
  }
}
 800cf34:	bf00      	nop
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf44:	bf00      	nop
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b083      	sub	sp, #12
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf58:	bf00      	nop
 800cf5a:	370c      	adds	r7, #12
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b083      	sub	sp, #12
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr

0800cf78 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	4613      	mov	r3, r2
 800cf84:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d101      	bne.n	800cf90 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cf8c:	2302      	movs	r3, #2
 800cf8e:	e044      	b.n	800d01a <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	79fa      	ldrb	r2, [r7, #7]
 800cf94:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cfa8:	68f8      	ldr	r0, [r7, #12]
 800cfaa:	f000 f841 	bl	800d030 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2200      	movs	r2, #0
 800cfba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d003      	beq.n	800cfdc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	68ba      	ldr	r2, [r7, #8]
 800cfd8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800cfdc:	2200      	movs	r2, #0
 800cfde:	2104      	movs	r1, #4
 800cfe0:	2010      	movs	r0, #16
 800cfe2:	f004 fa41 	bl	8011468 <osMessageQueueNew>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800cfee:	4b0d      	ldr	r3, [pc, #52]	; (800d024 <USBH_Init+0xac>)
 800cff0:	4a0d      	ldr	r2, [pc, #52]	; (800d028 <USBH_Init+0xb0>)
 800cff2:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800cff4:	4b0b      	ldr	r3, [pc, #44]	; (800d024 <USBH_Init+0xac>)
 800cff6:	2280      	movs	r2, #128	; 0x80
 800cff8:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800cffa:	4b0a      	ldr	r3, [pc, #40]	; (800d024 <USBH_Init+0xac>)
 800cffc:	2218      	movs	r2, #24
 800cffe:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800d000:	4a08      	ldr	r2, [pc, #32]	; (800d024 <USBH_Init+0xac>)
 800d002:	68f9      	ldr	r1, [r7, #12]
 800d004:	4809      	ldr	r0, [pc, #36]	; (800d02c <USBH_Init+0xb4>)
 800d006:	f003 ff31 	bl	8010e6c <osThreadNew>
 800d00a:	4602      	mov	r2, r0
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f007 fd98 	bl	8014b48 <USBH_LL_Init>

  return USBH_OK;
 800d018:	2300      	movs	r3, #0
}
 800d01a:	4618      	mov	r0, r3
 800d01c:	3710      	adds	r7, #16
 800d01e:	46bd      	mov	sp, r7
 800d020:	bd80      	pop	{r7, pc}
 800d022:	bf00      	nop
 800d024:	200006ec 	.word	0x200006ec
 800d028:	08016060 	.word	0x08016060
 800d02c:	0800dc99 	.word	0x0800dc99

0800d030 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d030:	b480      	push	{r7}
 800d032:	b085      	sub	sp, #20
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d038:	2300      	movs	r3, #0
 800d03a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d03c:	2300      	movs	r3, #0
 800d03e:	60fb      	str	r3, [r7, #12]
 800d040:	e009      	b.n	800d056 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d042:	687a      	ldr	r2, [r7, #4]
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	33e0      	adds	r3, #224	; 0xe0
 800d048:	009b      	lsls	r3, r3, #2
 800d04a:	4413      	add	r3, r2
 800d04c:	2200      	movs	r2, #0
 800d04e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	3301      	adds	r3, #1
 800d054:	60fb      	str	r3, [r7, #12]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2b0e      	cmp	r3, #14
 800d05a:	d9f2      	bls.n	800d042 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d05c:	2300      	movs	r3, #0
 800d05e:	60fb      	str	r3, [r7, #12]
 800d060:	e009      	b.n	800d076 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	4413      	add	r3, r2
 800d068:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d06c:	2200      	movs	r2, #0
 800d06e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	3301      	adds	r3, #1
 800d074:	60fb      	str	r3, [r7, #12]
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d07c:	d3f1      	bcc.n	800d062 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	2200      	movs	r2, #0
 800d082:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	2200      	movs	r2, #0
 800d088:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2201      	movs	r2, #1
 800d08e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2201      	movs	r2, #1
 800d09c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2240      	movs	r2, #64	; 0x40
 800d0a2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	2201      	movs	r2, #1
 800d0b6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800d0ca:	2300      	movs	r3, #0
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3714      	adds	r7, #20
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d016      	beq.n	800d11a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d10e      	bne.n	800d114 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d0fc:	1c59      	adds	r1, r3, #1
 800d0fe:	687a      	ldr	r2, [r7, #4]
 800d100:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	33de      	adds	r3, #222	; 0xde
 800d108:	6839      	ldr	r1, [r7, #0]
 800d10a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d10e:	2300      	movs	r3, #0
 800d110:	73fb      	strb	r3, [r7, #15]
 800d112:	e004      	b.n	800d11e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d114:	2302      	movs	r3, #2
 800d116:	73fb      	strb	r3, [r7, #15]
 800d118:	e001      	b.n	800d11e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d11a:	2302      	movs	r3, #2
 800d11c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d11e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3714      	adds	r7, #20
 800d124:	46bd      	mov	sp, r7
 800d126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12a:	4770      	bx	lr

0800d12c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b085      	sub	sp, #20
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	460b      	mov	r3, r1
 800d136:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d138:	2300      	movs	r3, #0
 800d13a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800d142:	78fa      	ldrb	r2, [r7, #3]
 800d144:	429a      	cmp	r2, r3
 800d146:	d204      	bcs.n	800d152 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	78fa      	ldrb	r2, [r7, #3]
 800d14c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800d150:	e001      	b.n	800d156 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d152:	2302      	movs	r3, #2
 800d154:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d156:	7bfb      	ldrb	r3, [r7, #15]
}
 800d158:	4618      	mov	r0, r3
 800d15a:	3714      	adds	r7, #20
 800d15c:	46bd      	mov	sp, r7
 800d15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d162:	4770      	bx	lr

0800d164 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d164:	b480      	push	{r7}
 800d166:	b087      	sub	sp, #28
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	4608      	mov	r0, r1
 800d16e:	4611      	mov	r1, r2
 800d170:	461a      	mov	r2, r3
 800d172:	4603      	mov	r3, r0
 800d174:	70fb      	strb	r3, [r7, #3]
 800d176:	460b      	mov	r3, r1
 800d178:	70bb      	strb	r3, [r7, #2]
 800d17a:	4613      	mov	r3, r2
 800d17c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d17e:	2300      	movs	r3, #0
 800d180:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800d182:	2300      	movs	r3, #0
 800d184:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d18c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d18e:	e025      	b.n	800d1dc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d190:	7dfb      	ldrb	r3, [r7, #23]
 800d192:	221a      	movs	r2, #26
 800d194:	fb02 f303 	mul.w	r3, r2, r3
 800d198:	3308      	adds	r3, #8
 800d19a:	68fa      	ldr	r2, [r7, #12]
 800d19c:	4413      	add	r3, r2
 800d19e:	3302      	adds	r3, #2
 800d1a0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	795b      	ldrb	r3, [r3, #5]
 800d1a6:	78fa      	ldrb	r2, [r7, #3]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d002      	beq.n	800d1b2 <USBH_FindInterface+0x4e>
 800d1ac:	78fb      	ldrb	r3, [r7, #3]
 800d1ae:	2bff      	cmp	r3, #255	; 0xff
 800d1b0:	d111      	bne.n	800d1d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d1b6:	78ba      	ldrb	r2, [r7, #2]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d002      	beq.n	800d1c2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1bc:	78bb      	ldrb	r3, [r7, #2]
 800d1be:	2bff      	cmp	r3, #255	; 0xff
 800d1c0:	d109      	bne.n	800d1d6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1c2:	693b      	ldr	r3, [r7, #16]
 800d1c4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d1c6:	787a      	ldrb	r2, [r7, #1]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d002      	beq.n	800d1d2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d1cc:	787b      	ldrb	r3, [r7, #1]
 800d1ce:	2bff      	cmp	r3, #255	; 0xff
 800d1d0:	d101      	bne.n	800d1d6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
 800d1d4:	e006      	b.n	800d1e4 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d1d6:	7dfb      	ldrb	r3, [r7, #23]
 800d1d8:	3301      	adds	r3, #1
 800d1da:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d1dc:	7dfb      	ldrb	r3, [r7, #23]
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d9d6      	bls.n	800d190 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d1e2:	23ff      	movs	r3, #255	; 0xff
}
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	371c      	adds	r7, #28
 800d1e8:	46bd      	mov	sp, r7
 800d1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ee:	4770      	bx	lr

0800d1f0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b082      	sub	sp, #8
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f007 fce1 	bl	8014bc0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800d1fe:	2101      	movs	r1, #1
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f007 fdfa 	bl	8014dfa <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d206:	2300      	movs	r3, #0
}
 800d208:	4618      	mov	r0, r3
 800d20a:	3708      	adds	r7, #8
 800d20c:	46bd      	mov	sp, r7
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b088      	sub	sp, #32
 800d214:	af04      	add	r7, sp, #16
 800d216:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d218:	2302      	movs	r3, #2
 800d21a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d21c:	2300      	movs	r3, #0
 800d21e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800d226:	b2db      	uxtb	r3, r3
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d102      	bne.n	800d232 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	2203      	movs	r2, #3
 800d230:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	b2db      	uxtb	r3, r3
 800d238:	2b0b      	cmp	r3, #11
 800d23a:	f200 823c 	bhi.w	800d6b6 <USBH_Process+0x4a6>
 800d23e:	a201      	add	r2, pc, #4	; (adr r2, 800d244 <USBH_Process+0x34>)
 800d240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d244:	0800d275 	.word	0x0800d275
 800d248:	0800d2c3 	.word	0x0800d2c3
 800d24c:	0800d347 	.word	0x0800d347
 800d250:	0800d635 	.word	0x0800d635
 800d254:	0800d6b7 	.word	0x0800d6b7
 800d258:	0800d407 	.word	0x0800d407
 800d25c:	0800d5bf 	.word	0x0800d5bf
 800d260:	0800d459 	.word	0x0800d459
 800d264:	0800d495 	.word	0x0800d495
 800d268:	0800d4cf 	.word	0x0800d4cf
 800d26c:	0800d517 	.word	0x0800d517
 800d270:	0800d61d 	.word	0x0800d61d
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800d27a:	b2db      	uxtb	r3, r3
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	f000 821c 	beq.w	800d6ba <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	2201      	movs	r2, #1
 800d286:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d288:	20c8      	movs	r0, #200	; 0xc8
 800d28a:	f007 fe00 	bl	8014e8e <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f007 fcf3 	bl	8014c7a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2200      	movs	r2, #0
 800d298:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d2b8:	2300      	movs	r3, #0
 800d2ba:	2200      	movs	r2, #0
 800d2bc:	f004 f95a 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d2c0:	e1fb      	b.n	800d6ba <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800d2c8:	2b01      	cmp	r3, #1
 800d2ca:	d107      	bne.n	800d2dc <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	2202      	movs	r2, #2
 800d2d8:	701a      	strb	r2, [r3, #0]
 800d2da:	e025      	b.n	800d328 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d2e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d2e6:	d914      	bls.n	800d312 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	b2da      	uxtb	r2, r3
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d903      	bls.n	800d30a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	220d      	movs	r2, #13
 800d306:	701a      	strb	r2, [r3, #0]
 800d308:	e00e      	b.n	800d328 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2200      	movs	r2, #0
 800d30e:	701a      	strb	r2, [r3, #0]
 800d310:	e00a      	b.n	800d328 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d318:	f103 020a 	add.w	r2, r3, #10
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800d322:	200a      	movs	r0, #10
 800d324:	f007 fdb3 	bl	8014e8e <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	2201      	movs	r2, #1
 800d32c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d33c:	2300      	movs	r3, #0
 800d33e:	2200      	movs	r2, #0
 800d340:	f004 f918 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      break;
 800d344:	e1c0      	b.n	800d6c8 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d005      	beq.n	800d35c <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d356:	2104      	movs	r1, #4
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d35c:	2064      	movs	r0, #100	; 0x64
 800d35e:	f007 fd96 	bl	8014e8e <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f007 fc62 	bl	8014c2c <USBH_LL_GetSpeed>
 800d368:	4603      	mov	r3, r0
 800d36a:	461a      	mov	r2, r3
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	2205      	movs	r2, #5
 800d376:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d378:	2100      	movs	r1, #0
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f001 fb21 	bl	800e9c2 <USBH_AllocPipe>
 800d380:	4603      	mov	r3, r0
 800d382:	461a      	mov	r2, r3
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d388:	2180      	movs	r1, #128	; 0x80
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f001 fb19 	bl	800e9c2 <USBH_AllocPipe>
 800d390:	4603      	mov	r3, r0
 800d392:	461a      	mov	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	7919      	ldrb	r1, [r3, #4]
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d3ac:	b292      	uxth	r2, r2
 800d3ae:	9202      	str	r2, [sp, #8]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	9201      	str	r2, [sp, #4]
 800d3b4:	9300      	str	r3, [sp, #0]
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	2280      	movs	r2, #128	; 0x80
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f001 fad2 	bl	800e964 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	7959      	ldrb	r1, [r3, #5]
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d3d4:	b292      	uxth	r2, r2
 800d3d6:	9202      	str	r2, [sp, #8]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	9201      	str	r2, [sp, #4]
 800d3dc:	9300      	str	r3, [sp, #0]
 800d3de:	4603      	mov	r3, r0
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f001 fabe 	bl	800e964 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d3fc:	2300      	movs	r3, #0
 800d3fe:	2200      	movs	r2, #0
 800d400:	f004 f8b8 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      break;
 800d404:	e160      	b.n	800d6c8 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f964 	bl	800d6d4 <USBH_HandleEnum>
 800d40c:	4603      	mov	r3, r0
 800d40e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d410:	7bbb      	ldrb	r3, [r7, #14]
 800d412:	b2db      	uxtb	r3, r3
 800d414:	2b00      	cmp	r3, #0
 800d416:	f040 8152 	bne.w	800d6be <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d103      	bne.n	800d434 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2208      	movs	r2, #8
 800d430:	701a      	strb	r2, [r3, #0]
 800d432:	e002      	b.n	800d43a <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	2207      	movs	r2, #7
 800d438:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2205      	movs	r2, #5
 800d43e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d44e:	2300      	movs	r3, #0
 800d450:	2200      	movs	r2, #0
 800d452:	f004 f88f 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      }
      break;
 800d456:	e132      	b.n	800d6be <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d45e:	2b00      	cmp	r3, #0
 800d460:	f000 812f 	beq.w	800d6c2 <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d46a:	2101      	movs	r1, #1
 800d46c:	6878      	ldr	r0, [r7, #4]
 800d46e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2208      	movs	r2, #8
 800d474:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	2205      	movs	r2, #5
 800d47a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d48a:	2300      	movs	r3, #0
 800d48c:	2200      	movs	r2, #0
 800d48e:	f004 f871 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800d492:	e116      	b.n	800d6c2 <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	4619      	mov	r1, r3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 fcf8 	bl	800de94 <USBH_SetCfg>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d102      	bne.n	800d4b0 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2209      	movs	r2, #9
 800d4ae:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	2201      	movs	r2, #1
 800d4b4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	f004 f854 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      break;
 800d4cc:	e0fc      	b.n	800d6c8 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800d4d4:	f003 0320 	and.w	r3, r3, #32
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d00a      	beq.n	800d4f2 <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800d4dc:	2101      	movs	r1, #1
 800d4de:	6878      	ldr	r0, [r7, #4]
 800d4e0:	f000 fcfb 	bl	800deda <USBH_SetFeature>
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d106      	bne.n	800d4f8 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	220a      	movs	r2, #10
 800d4ee:	701a      	strb	r2, [r3, #0]
 800d4f0:	e002      	b.n	800d4f8 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	220a      	movs	r2, #10
 800d4f6:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2201      	movs	r2, #1
 800d4fc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d50c:	2300      	movs	r3, #0
 800d50e:	2200      	movs	r2, #0
 800d510:	f004 f830 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      break;
 800d514:	e0d8      	b.n	800d6c8 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d03f      	beq.n	800d5a0 <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	2200      	movs	r2, #0
 800d524:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d528:	2300      	movs	r3, #0
 800d52a:	73fb      	strb	r3, [r7, #15]
 800d52c:	e016      	b.n	800d55c <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d52e:	7bfa      	ldrb	r2, [r7, #15]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	32de      	adds	r2, #222	; 0xde
 800d534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d538:	791a      	ldrb	r2, [r3, #4]
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d540:	429a      	cmp	r2, r3
 800d542:	d108      	bne.n	800d556 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d544:	7bfa      	ldrb	r2, [r7, #15]
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	32de      	adds	r2, #222	; 0xde
 800d54a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d554:	e005      	b.n	800d562 <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d556:	7bfb      	ldrb	r3, [r7, #15]
 800d558:	3301      	adds	r3, #1
 800d55a:	73fb      	strb	r3, [r7, #15]
 800d55c:	7bfb      	ldrb	r3, [r7, #15]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d0e5      	beq.n	800d52e <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d016      	beq.n	800d59a <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	4798      	blx	r3
 800d578:	4603      	mov	r3, r0
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d109      	bne.n	800d592 <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	2206      	movs	r2, #6
 800d582:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d58a:	2103      	movs	r1, #3
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	4798      	blx	r3
 800d590:	e006      	b.n	800d5a0 <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	220d      	movs	r2, #13
 800d596:	701a      	strb	r2, [r3, #0]
 800d598:	e002      	b.n	800d5a0 <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	220d      	movs	r2, #13
 800d59e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	2205      	movs	r2, #5
 800d5a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	2200      	movs	r2, #0
 800d5b8:	f003 ffdc 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      break;
 800d5bc:	e084      	b.n	800d6c8 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d017      	beq.n	800d5f8 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d5ce:	691b      	ldr	r3, [r3, #16]
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	4798      	blx	r3
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d5d8:	7bbb      	ldrb	r3, [r7, #14]
 800d5da:	b2db      	uxtb	r3, r3
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d103      	bne.n	800d5e8 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	220b      	movs	r2, #11
 800d5e4:	701a      	strb	r2, [r3, #0]
 800d5e6:	e00a      	b.n	800d5fe <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800d5e8:	7bbb      	ldrb	r3, [r7, #14]
 800d5ea:	b2db      	uxtb	r3, r3
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	d106      	bne.n	800d5fe <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	220d      	movs	r2, #13
 800d5f4:	701a      	strb	r2, [r3, #0]
 800d5f6:	e002      	b.n	800d5fe <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	220d      	movs	r2, #13
 800d5fc:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2205      	movs	r2, #5
 800d602:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d612:	2300      	movs	r3, #0
 800d614:	2200      	movs	r2, #0
 800d616:	f003 ffad 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      break;
 800d61a:	e055      	b.n	800d6c8 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d622:	2b00      	cmp	r3, #0
 800d624:	d04f      	beq.n	800d6c6 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d62c:	695b      	ldr	r3, [r3, #20]
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	4798      	blx	r3
      }
      break;
 800d632:	e048      	b.n	800d6c6 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f7ff fcf7 	bl	800d030 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d009      	beq.n	800d660 <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2200      	movs	r2, #0
 800d65c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d666:	2b00      	cmp	r3, #0
 800d668:	d005      	beq.n	800d676 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d670:	2105      	movs	r1, #5
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d67c:	b2db      	uxtb	r3, r3
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d107      	bne.n	800d692 <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f7ff fdb0 	bl	800d1f0 <USBH_Start>
 800d690:	e002      	b.n	800d698 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f007 fa94 	bl	8014bc0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2201      	movs	r2, #1
 800d69c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	2200      	movs	r2, #0
 800d6b0:	f003 ff60 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      break;
 800d6b4:	e008      	b.n	800d6c8 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d6b6:	bf00      	nop
 800d6b8:	e006      	b.n	800d6c8 <USBH_Process+0x4b8>
      break;
 800d6ba:	bf00      	nop
 800d6bc:	e004      	b.n	800d6c8 <USBH_Process+0x4b8>
      break;
 800d6be:	bf00      	nop
 800d6c0:	e002      	b.n	800d6c8 <USBH_Process+0x4b8>
    break;
 800d6c2:	bf00      	nop
 800d6c4:	e000      	b.n	800d6c8 <USBH_Process+0x4b8>
      break;
 800d6c6:	bf00      	nop
  }
  return USBH_OK;
 800d6c8:	2300      	movs	r3, #0
}
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	3710      	adds	r7, #16
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	bd80      	pop	{r7, pc}
 800d6d2:	bf00      	nop

0800d6d4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d6d4:	b580      	push	{r7, lr}
 800d6d6:	b088      	sub	sp, #32
 800d6d8:	af04      	add	r7, sp, #16
 800d6da:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d6dc:	2301      	movs	r3, #1
 800d6de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d6e0:	2301      	movs	r3, #1
 800d6e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	785b      	ldrb	r3, [r3, #1]
 800d6e8:	2b07      	cmp	r3, #7
 800d6ea:	f200 8208 	bhi.w	800dafe <USBH_HandleEnum+0x42a>
 800d6ee:	a201      	add	r2, pc, #4	; (adr r2, 800d6f4 <USBH_HandleEnum+0x20>)
 800d6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f4:	0800d715 	.word	0x0800d715
 800d6f8:	0800d7d3 	.word	0x0800d7d3
 800d6fc:	0800d83d 	.word	0x0800d83d
 800d700:	0800d8cb 	.word	0x0800d8cb
 800d704:	0800d935 	.word	0x0800d935
 800d708:	0800d9a5 	.word	0x0800d9a5
 800d70c:	0800da41 	.word	0x0800da41
 800d710:	0800dabf 	.word	0x0800dabf
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d714:	2108      	movs	r1, #8
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 faec 	bl	800dcf4 <USBH_Get_DevDesc>
 800d71c:	4603      	mov	r3, r0
 800d71e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d720:	7bbb      	ldrb	r3, [r7, #14]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d130      	bne.n	800d788 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	2201      	movs	r2, #1
 800d734:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	7919      	ldrb	r1, [r3, #4]
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d746:	687a      	ldr	r2, [r7, #4]
 800d748:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d74a:	b292      	uxth	r2, r2
 800d74c:	9202      	str	r2, [sp, #8]
 800d74e:	2200      	movs	r2, #0
 800d750:	9201      	str	r2, [sp, #4]
 800d752:	9300      	str	r3, [sp, #0]
 800d754:	4603      	mov	r3, r0
 800d756:	2280      	movs	r2, #128	; 0x80
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f001 f903 	bl	800e964 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	7959      	ldrb	r1, [r3, #5]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d76e:	687a      	ldr	r2, [r7, #4]
 800d770:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d772:	b292      	uxth	r2, r2
 800d774:	9202      	str	r2, [sp, #8]
 800d776:	2200      	movs	r2, #0
 800d778:	9201      	str	r2, [sp, #4]
 800d77a:	9300      	str	r3, [sp, #0]
 800d77c:	4603      	mov	r3, r0
 800d77e:	2200      	movs	r2, #0
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f001 f8ef 	bl	800e964 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d786:	e1bc      	b.n	800db02 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d788:	7bbb      	ldrb	r3, [r7, #14]
 800d78a:	2b03      	cmp	r3, #3
 800d78c:	f040 81b9 	bne.w	800db02 <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d796:	3301      	adds	r3, #1
 800d798:	b2da      	uxtb	r2, r3
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	d903      	bls.n	800d7b2 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	220d      	movs	r2, #13
 800d7ae:	701a      	strb	r2, [r3, #0]
      break;
 800d7b0:	e1a7      	b.n	800db02 <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	795b      	ldrb	r3, [r3, #5]
 800d7b6:	4619      	mov	r1, r3
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f001 f923 	bl	800ea04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	791b      	ldrb	r3, [r3, #4]
 800d7c2:	4619      	mov	r1, r3
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f001 f91d 	bl	800ea04 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	701a      	strb	r2, [r3, #0]
      break;
 800d7d0:	e197      	b.n	800db02 <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d7d2:	2112      	movs	r1, #18
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f000 fa8d 	bl	800dcf4 <USBH_Get_DevDesc>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d7de:	7bbb      	ldrb	r3, [r7, #14]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d103      	bne.n	800d7ec <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2202      	movs	r2, #2
 800d7e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d7ea:	e18c      	b.n	800db06 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d7ec:	7bbb      	ldrb	r3, [r7, #14]
 800d7ee:	2b03      	cmp	r3, #3
 800d7f0:	f040 8189 	bne.w	800db06 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	b2da      	uxtb	r2, r3
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d80a:	2b03      	cmp	r3, #3
 800d80c:	d903      	bls.n	800d816 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	220d      	movs	r2, #13
 800d812:	701a      	strb	r2, [r3, #0]
      break;
 800d814:	e177      	b.n	800db06 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	795b      	ldrb	r3, [r3, #5]
 800d81a:	4619      	mov	r1, r3
 800d81c:	6878      	ldr	r0, [r7, #4]
 800d81e:	f001 f8f1 	bl	800ea04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	791b      	ldrb	r3, [r3, #4]
 800d826:	4619      	mov	r1, r3
 800d828:	6878      	ldr	r0, [r7, #4]
 800d82a:	f001 f8eb 	bl	800ea04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2200      	movs	r2, #0
 800d832:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2200      	movs	r2, #0
 800d838:	701a      	strb	r2, [r3, #0]
      break;
 800d83a:	e164      	b.n	800db06 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d83c:	2101      	movs	r1, #1
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fb04 	bl	800de4c <USBH_SetAddress>
 800d844:	4603      	mov	r3, r0
 800d846:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d848:	7bbb      	ldrb	r3, [r7, #14]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d132      	bne.n	800d8b4 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d84e:	2002      	movs	r0, #2
 800d850:	f007 fb1d 	bl	8014e8e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	2201      	movs	r2, #1
 800d858:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2203      	movs	r2, #3
 800d860:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	7919      	ldrb	r1, [r3, #4]
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d876:	b292      	uxth	r2, r2
 800d878:	9202      	str	r2, [sp, #8]
 800d87a:	2200      	movs	r2, #0
 800d87c:	9201      	str	r2, [sp, #4]
 800d87e:	9300      	str	r3, [sp, #0]
 800d880:	4603      	mov	r3, r0
 800d882:	2280      	movs	r2, #128	; 0x80
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f001 f86d 	bl	800e964 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	7959      	ldrb	r1, [r3, #5]
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d89a:	687a      	ldr	r2, [r7, #4]
 800d89c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d89e:	b292      	uxth	r2, r2
 800d8a0:	9202      	str	r2, [sp, #8]
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	9201      	str	r2, [sp, #4]
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f001 f859 	bl	800e964 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d8b2:	e12a      	b.n	800db0a <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8b4:	7bbb      	ldrb	r3, [r7, #14]
 800d8b6:	2b03      	cmp	r3, #3
 800d8b8:	f040 8127 	bne.w	800db0a <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	220d      	movs	r2, #13
 800d8c0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	2200      	movs	r2, #0
 800d8c6:	705a      	strb	r2, [r3, #1]
      break;
 800d8c8:	e11f      	b.n	800db0a <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d8ca:	2109      	movs	r1, #9
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 fa39 	bl	800dd44 <USBH_Get_CfgDesc>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d8d6:	7bbb      	ldrb	r3, [r7, #14]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d103      	bne.n	800d8e4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2204      	movs	r2, #4
 800d8e0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d8e2:	e114      	b.n	800db0e <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d8e4:	7bbb      	ldrb	r3, [r7, #14]
 800d8e6:	2b03      	cmp	r3, #3
 800d8e8:	f040 8111 	bne.w	800db0e <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	b2da      	uxtb	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d902:	2b03      	cmp	r3, #3
 800d904:	d903      	bls.n	800d90e <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	220d      	movs	r2, #13
 800d90a:	701a      	strb	r2, [r3, #0]
      break;
 800d90c:	e0ff      	b.n	800db0e <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	795b      	ldrb	r3, [r3, #5]
 800d912:	4619      	mov	r1, r3
 800d914:	6878      	ldr	r0, [r7, #4]
 800d916:	f001 f875 	bl	800ea04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	791b      	ldrb	r3, [r3, #4]
 800d91e:	4619      	mov	r1, r3
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f001 f86f 	bl	800ea04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2200      	movs	r2, #0
 800d92a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2200      	movs	r2, #0
 800d930:	701a      	strb	r2, [r3, #0]
      break;
 800d932:	e0ec      	b.n	800db0e <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d93a:	4619      	mov	r1, r3
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 fa01 	bl	800dd44 <USBH_Get_CfgDesc>
 800d942:	4603      	mov	r3, r0
 800d944:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d103      	bne.n	800d954 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2205      	movs	r2, #5
 800d950:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d952:	e0de      	b.n	800db12 <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d954:	7bbb      	ldrb	r3, [r7, #14]
 800d956:	2b03      	cmp	r3, #3
 800d958:	f040 80db 	bne.w	800db12 <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d962:	3301      	adds	r3, #1
 800d964:	b2da      	uxtb	r2, r3
 800d966:	687b      	ldr	r3, [r7, #4]
 800d968:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d972:	2b03      	cmp	r3, #3
 800d974:	d903      	bls.n	800d97e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	220d      	movs	r2, #13
 800d97a:	701a      	strb	r2, [r3, #0]
      break;
 800d97c:	e0c9      	b.n	800db12 <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	795b      	ldrb	r3, [r3, #5]
 800d982:	4619      	mov	r1, r3
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f001 f83d 	bl	800ea04 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	791b      	ldrb	r3, [r3, #4]
 800d98e:	4619      	mov	r1, r3
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f001 f837 	bl	800ea04 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	701a      	strb	r2, [r3, #0]
      break;
 800d9a2:	e0b6      	b.n	800db12 <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d036      	beq.n	800da1c <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d9ba:	23ff      	movs	r3, #255	; 0xff
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f9e5 	bl	800dd8c <USBH_Get_StringDesc>
 800d9c2:	4603      	mov	r3, r0
 800d9c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d9c6:	7bbb      	ldrb	r3, [r7, #14]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d111      	bne.n	800d9f0 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	2206      	movs	r2, #6
 800d9d0:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2205      	movs	r2, #5
 800d9d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f003 fdc3 	bl	8011574 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d9ee:	e092      	b.n	800db16 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d9f0:	7bbb      	ldrb	r3, [r7, #14]
 800d9f2:	2b03      	cmp	r3, #3
 800d9f4:	f040 808f 	bne.w	800db16 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	2206      	movs	r2, #6
 800d9fc:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2205      	movs	r2, #5
 800da02:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da12:	2300      	movs	r3, #0
 800da14:	2200      	movs	r2, #0
 800da16:	f003 fdad 	bl	8011574 <osMessageQueuePut>
      break;
 800da1a:	e07c      	b.n	800db16 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	2206      	movs	r2, #6
 800da20:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2205      	movs	r2, #5
 800da26:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da36:	2300      	movs	r3, #0
 800da38:	2200      	movs	r2, #0
 800da3a:	f003 fd9b 	bl	8011574 <osMessageQueuePut>
      break;
 800da3e:	e06a      	b.n	800db16 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800da46:	2b00      	cmp	r3, #0
 800da48:	d027      	beq.n	800da9a <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800da56:	23ff      	movs	r3, #255	; 0xff
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 f997 	bl	800dd8c <USBH_Get_StringDesc>
 800da5e:	4603      	mov	r3, r0
 800da60:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800da62:	7bbb      	ldrb	r3, [r7, #14]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d103      	bne.n	800da70 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2207      	movs	r2, #7
 800da6c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800da6e:	e054      	b.n	800db1a <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800da70:	7bbb      	ldrb	r3, [r7, #14]
 800da72:	2b03      	cmp	r3, #3
 800da74:	d151      	bne.n	800db1a <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2207      	movs	r2, #7
 800da7a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2205      	movs	r2, #5
 800da80:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800da90:	2300      	movs	r3, #0
 800da92:	2200      	movs	r2, #0
 800da94:	f003 fd6e 	bl	8011574 <osMessageQueuePut>
      break;
 800da98:	e03f      	b.n	800db1a <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2207      	movs	r2, #7
 800da9e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2205      	movs	r2, #5
 800daa4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dab4:	2300      	movs	r3, #0
 800dab6:	2200      	movs	r2, #0
 800dab8:	f003 fd5c 	bl	8011574 <osMessageQueuePut>
      break;
 800dabc:	e02d      	b.n	800db1a <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d017      	beq.n	800daf8 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dad4:	23ff      	movs	r3, #255	; 0xff
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 f958 	bl	800dd8c <USBH_Get_StringDesc>
 800dadc:	4603      	mov	r3, r0
 800dade:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dae0:	7bbb      	ldrb	r3, [r7, #14]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800dae6:	2300      	movs	r3, #0
 800dae8:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800daea:	e018      	b.n	800db1e <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800daec:	7bbb      	ldrb	r3, [r7, #14]
 800daee:	2b03      	cmp	r3, #3
 800daf0:	d115      	bne.n	800db1e <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800daf2:	2300      	movs	r3, #0
 800daf4:	73fb      	strb	r3, [r7, #15]
      break;
 800daf6:	e012      	b.n	800db1e <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800daf8:	2300      	movs	r3, #0
 800dafa:	73fb      	strb	r3, [r7, #15]
      break;
 800dafc:	e00f      	b.n	800db1e <USBH_HandleEnum+0x44a>

    default:
      break;
 800dafe:	bf00      	nop
 800db00:	e00e      	b.n	800db20 <USBH_HandleEnum+0x44c>
      break;
 800db02:	bf00      	nop
 800db04:	e00c      	b.n	800db20 <USBH_HandleEnum+0x44c>
      break;
 800db06:	bf00      	nop
 800db08:	e00a      	b.n	800db20 <USBH_HandleEnum+0x44c>
      break;
 800db0a:	bf00      	nop
 800db0c:	e008      	b.n	800db20 <USBH_HandleEnum+0x44c>
      break;
 800db0e:	bf00      	nop
 800db10:	e006      	b.n	800db20 <USBH_HandleEnum+0x44c>
      break;
 800db12:	bf00      	nop
 800db14:	e004      	b.n	800db20 <USBH_HandleEnum+0x44c>
      break;
 800db16:	bf00      	nop
 800db18:	e002      	b.n	800db20 <USBH_HandleEnum+0x44c>
      break;
 800db1a:	bf00      	nop
 800db1c:	e000      	b.n	800db20 <USBH_HandleEnum+0x44c>
      break;
 800db1e:	bf00      	nop
  }
  return Status;
 800db20:	7bfb      	ldrb	r3, [r7, #15]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop

0800db2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800db2c:	b480      	push	{r7}
 800db2e:	b083      	sub	sp, #12
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
 800db34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	683a      	ldr	r2, [r7, #0]
 800db3a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800db3e:	bf00      	nop
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b082      	sub	sp, #8
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800db58:	1c5a      	adds	r2, r3, #1
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 f804 	bl	800db6e <USBH_HandleSof>
}
 800db66:	bf00      	nop
 800db68:	3708      	adds	r7, #8
 800db6a:	46bd      	mov	sp, r7
 800db6c:	bd80      	pop	{r7, pc}

0800db6e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800db6e:	b580      	push	{r7, lr}
 800db70:	b082      	sub	sp, #8
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	781b      	ldrb	r3, [r3, #0]
 800db7a:	b2db      	uxtb	r3, r3
 800db7c:	2b0b      	cmp	r3, #11
 800db7e:	d10a      	bne.n	800db96 <USBH_HandleSof+0x28>
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db86:	2b00      	cmp	r3, #0
 800db88:	d005      	beq.n	800db96 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800db90:	699b      	ldr	r3, [r3, #24]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	4798      	blx	r3
  }
}
 800db96:	bf00      	nop
 800db98:	3708      	adds	r7, #8
 800db9a:	46bd      	mov	sp, r7
 800db9c:	bd80      	pop	{r7, pc}

0800db9e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800db9e:	b580      	push	{r7, lr}
 800dba0:	b082      	sub	sp, #8
 800dba2:	af00      	add	r7, sp, #0
 800dba4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	2200      	movs	r2, #0
 800dbc6:	f003 fcd5 	bl	8011574 <osMessageQueuePut>
#endif
#endif

  return;
 800dbca:	bf00      	nop
}
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800dbd2:	b480      	push	{r7}
 800dbd4:	b083      	sub	sp, #12
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800dbe2:	bf00      	nop
}
 800dbe4:	370c      	adds	r7, #12
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b082      	sub	sp, #8
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	2201      	movs	r2, #1
 800dbfa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	2201      	movs	r2, #1
 800dc12:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc22:	2300      	movs	r3, #0
 800dc24:	2200      	movs	r2, #0
 800dc26:	f003 fca5 	bl	8011574 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800dc2a:	2300      	movs	r3, #0
}
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	3708      	adds	r7, #8
 800dc30:	46bd      	mov	sp, r7
 800dc32:	bd80      	pop	{r7, pc}

0800dc34 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
 800dc3a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	2201      	movs	r2, #1
 800dc40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800dc54:	6878      	ldr	r0, [r7, #4]
 800dc56:	f006 ffce 	bl	8014bf6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	791b      	ldrb	r3, [r3, #4]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fecf 	bl	800ea04 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	795b      	ldrb	r3, [r3, #5]
 800dc6a:	4619      	mov	r1, r3
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fec9 	bl	800ea04 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2201      	movs	r2, #1
 800dc76:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dc86:	2300      	movs	r3, #0
 800dc88:	2200      	movs	r2, #0
 800dc8a:	f003 fc73 	bl	8011574 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800dc8e:	2300      	movs	r3, #0
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3708      	adds	r7, #8
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}

0800dc98 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800dc98:	b580      	push	{r7, lr}
 800dc9a:	b084      	sub	sp, #16
 800dc9c:	af00      	add	r7, sp, #0
 800dc9e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800dcac:	f04f 33ff 	mov.w	r3, #4294967295
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	f003 fcd3 	bl	801165c <osMessageQueueGet>
 800dcb6:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d1f0      	bne.n	800dca0 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f7ff faa6 	bl	800d210 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800dcc4:	e7ec      	b.n	800dca0 <USBH_Process_OS+0x8>

0800dcc6 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800dcc6:	b580      	push	{r7, lr}
 800dcc8:	b082      	sub	sp, #8
 800dcca:	af00      	add	r7, sp, #0
 800dccc:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2201      	movs	r2, #1
 800dcd2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dce2:	2300      	movs	r3, #0
 800dce4:	2200      	movs	r2, #0
 800dce6:	f003 fc45 	bl	8011574 <osMessageQueuePut>
#endif

  return USBH_OK;
 800dcea:	2300      	movs	r3, #0
}
 800dcec:	4618      	mov	r0, r3
 800dcee:	3708      	adds	r7, #8
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	bd80      	pop	{r7, pc}

0800dcf4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b086      	sub	sp, #24
 800dcf8:	af02      	add	r7, sp, #8
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	460b      	mov	r3, r1
 800dcfe:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800dd06:	78fb      	ldrb	r3, [r7, #3]
 800dd08:	b29b      	uxth	r3, r3
 800dd0a:	9300      	str	r3, [sp, #0]
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd12:	2100      	movs	r1, #0
 800dd14:	6878      	ldr	r0, [r7, #4]
 800dd16:	f000 f864 	bl	800dde2 <USBH_GetDescriptor>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	73fb      	strb	r3, [r7, #15]
 800dd1e:	7bfb      	ldrb	r3, [r7, #15]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d10a      	bne.n	800dd3a <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f203 3026 	addw	r0, r3, #806	; 0x326
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800dd30:	78fa      	ldrb	r2, [r7, #3]
 800dd32:	b292      	uxth	r2, r2
 800dd34:	4619      	mov	r1, r3
 800dd36:	f000 f918 	bl	800df6a <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	bd80      	pop	{r7, pc}

0800dd44 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af02      	add	r7, sp, #8
 800dd4a:	6078      	str	r0, [r7, #4]
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	331c      	adds	r3, #28
 800dd54:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800dd56:	887b      	ldrh	r3, [r7, #2]
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd60:	2100      	movs	r1, #0
 800dd62:	6878      	ldr	r0, [r7, #4]
 800dd64:	f000 f83d 	bl	800dde2 <USBH_GetDescriptor>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	72fb      	strb	r3, [r7, #11]
 800dd6c:	7afb      	ldrb	r3, [r7, #11]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d107      	bne.n	800dd82 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800dd78:	887a      	ldrh	r2, [r7, #2]
 800dd7a:	68f9      	ldr	r1, [r7, #12]
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	f000 f964 	bl	800e04a <USBH_ParseCfgDesc>
  }

  return status;
 800dd82:	7afb      	ldrb	r3, [r7, #11]
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3710      	adds	r7, #16
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b088      	sub	sp, #32
 800dd90:	af02      	add	r7, sp, #8
 800dd92:	60f8      	str	r0, [r7, #12]
 800dd94:	607a      	str	r2, [r7, #4]
 800dd96:	461a      	mov	r2, r3
 800dd98:	460b      	mov	r3, r1
 800dd9a:	72fb      	strb	r3, [r7, #11]
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800dda0:	7afb      	ldrb	r3, [r7, #11]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800dda8:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ddb0:	893b      	ldrh	r3, [r7, #8]
 800ddb2:	9300      	str	r3, [sp, #0]
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	2100      	movs	r1, #0
 800ddb8:	68f8      	ldr	r0, [r7, #12]
 800ddba:	f000 f812 	bl	800dde2 <USBH_GetDescriptor>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	75fb      	strb	r3, [r7, #23]
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d107      	bne.n	800ddd8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ddc8:	68fb      	ldr	r3, [r7, #12]
 800ddca:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ddce:	893a      	ldrh	r2, [r7, #8]
 800ddd0:	6879      	ldr	r1, [r7, #4]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 fa37 	bl	800e246 <USBH_ParseStringDesc>
  }

  return status;
 800ddd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3718      	adds	r7, #24
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b084      	sub	sp, #16
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	60f8      	str	r0, [r7, #12]
 800ddea:	607b      	str	r3, [r7, #4]
 800ddec:	460b      	mov	r3, r1
 800ddee:	72fb      	strb	r3, [r7, #11]
 800ddf0:	4613      	mov	r3, r2
 800ddf2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	789b      	ldrb	r3, [r3, #2]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d11c      	bne.n	800de36 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ddfc:	7afb      	ldrb	r3, [r7, #11]
 800ddfe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800de02:	b2da      	uxtb	r2, r3
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2206      	movs	r2, #6
 800de0c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	893a      	ldrh	r2, [r7, #8]
 800de12:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800de14:	893b      	ldrh	r3, [r7, #8]
 800de16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800de1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800de1e:	d104      	bne.n	800de2a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	f240 4209 	movw	r2, #1033	; 0x409
 800de26:	829a      	strh	r2, [r3, #20]
 800de28:	e002      	b.n	800de30 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2200      	movs	r2, #0
 800de2e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	8b3a      	ldrh	r2, [r7, #24]
 800de34:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800de36:	8b3b      	ldrh	r3, [r7, #24]
 800de38:	461a      	mov	r2, r3
 800de3a:	6879      	ldr	r1, [r7, #4]
 800de3c:	68f8      	ldr	r0, [r7, #12]
 800de3e:	f000 fa50 	bl	800e2e2 <USBH_CtlReq>
 800de42:	4603      	mov	r3, r0
}
 800de44:	4618      	mov	r0, r3
 800de46:	3710      	adds	r7, #16
 800de48:	46bd      	mov	sp, r7
 800de4a:	bd80      	pop	{r7, pc}

0800de4c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b082      	sub	sp, #8
 800de50:	af00      	add	r7, sp, #0
 800de52:	6078      	str	r0, [r7, #4]
 800de54:	460b      	mov	r3, r1
 800de56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	789b      	ldrb	r3, [r3, #2]
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d10f      	bne.n	800de80 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	2200      	movs	r2, #0
 800de64:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	2205      	movs	r2, #5
 800de6a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800de6c:	78fb      	ldrb	r3, [r7, #3]
 800de6e:	b29a      	uxth	r2, r3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2200      	movs	r2, #0
 800de7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800de80:	2200      	movs	r2, #0
 800de82:	2100      	movs	r1, #0
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f000 fa2c 	bl	800e2e2 <USBH_CtlReq>
 800de8a:	4603      	mov	r3, r0
}
 800de8c:	4618      	mov	r0, r3
 800de8e:	3708      	adds	r7, #8
 800de90:	46bd      	mov	sp, r7
 800de92:	bd80      	pop	{r7, pc}

0800de94 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b082      	sub	sp, #8
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	460b      	mov	r3, r1
 800de9e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	789b      	ldrb	r3, [r3, #2]
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d10e      	bne.n	800dec6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2200      	movs	r2, #0
 800deac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	2209      	movs	r2, #9
 800deb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	887a      	ldrh	r2, [r7, #2]
 800deb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	2200      	movs	r2, #0
 800debe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800dec6:	2200      	movs	r2, #0
 800dec8:	2100      	movs	r1, #0
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fa09 	bl	800e2e2 <USBH_CtlReq>
 800ded0:	4603      	mov	r3, r0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}

0800deda <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800deda:	b580      	push	{r7, lr}
 800dedc:	b082      	sub	sp, #8
 800dede:	af00      	add	r7, sp, #0
 800dee0:	6078      	str	r0, [r7, #4]
 800dee2:	460b      	mov	r3, r1
 800dee4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	789b      	ldrb	r3, [r3, #2]
 800deea:	2b01      	cmp	r3, #1
 800deec:	d10f      	bne.n	800df0e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2203      	movs	r2, #3
 800def8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800defa:	78fb      	ldrb	r3, [r7, #3]
 800defc:	b29a      	uxth	r2, r3
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800df0e:	2200      	movs	r2, #0
 800df10:	2100      	movs	r1, #0
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 f9e5 	bl	800e2e2 <USBH_CtlReq>
 800df18:	4603      	mov	r3, r0
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}

0800df22 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800df22:	b580      	push	{r7, lr}
 800df24:	b082      	sub	sp, #8
 800df26:	af00      	add	r7, sp, #0
 800df28:	6078      	str	r0, [r7, #4]
 800df2a:	460b      	mov	r3, r1
 800df2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	789b      	ldrb	r3, [r3, #2]
 800df32:	2b01      	cmp	r3, #1
 800df34:	d10f      	bne.n	800df56 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	2202      	movs	r2, #2
 800df3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2201      	movs	r2, #1
 800df40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2200      	movs	r2, #0
 800df46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800df48:	78fb      	ldrb	r3, [r7, #3]
 800df4a:	b29a      	uxth	r2, r3
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800df56:	2200      	movs	r2, #0
 800df58:	2100      	movs	r1, #0
 800df5a:	6878      	ldr	r0, [r7, #4]
 800df5c:	f000 f9c1 	bl	800e2e2 <USBH_CtlReq>
 800df60:	4603      	mov	r3, r0
}
 800df62:	4618      	mov	r0, r3
 800df64:	3708      	adds	r7, #8
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}

0800df6a <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800df6a:	b480      	push	{r7}
 800df6c:	b085      	sub	sp, #20
 800df6e:	af00      	add	r7, sp, #0
 800df70:	60f8      	str	r0, [r7, #12]
 800df72:	60b9      	str	r1, [r7, #8]
 800df74:	4613      	mov	r3, r2
 800df76:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	781a      	ldrb	r2, [r3, #0]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	785a      	ldrb	r2, [r3, #1]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	3302      	adds	r3, #2
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	b29a      	uxth	r2, r3
 800df90:	68bb      	ldr	r3, [r7, #8]
 800df92:	3303      	adds	r3, #3
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	b29b      	uxth	r3, r3
 800df98:	021b      	lsls	r3, r3, #8
 800df9a:	b29b      	uxth	r3, r3
 800df9c:	4313      	orrs	r3, r2
 800df9e:	b29a      	uxth	r2, r3
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	791a      	ldrb	r2, [r3, #4]
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dfac:	68bb      	ldr	r3, [r7, #8]
 800dfae:	795a      	ldrb	r2, [r3, #5]
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	799a      	ldrb	r2, [r3, #6]
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dfbc:	68bb      	ldr	r3, [r7, #8]
 800dfbe:	79da      	ldrb	r2, [r3, #7]
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800dfc4:	88fb      	ldrh	r3, [r7, #6]
 800dfc6:	2b08      	cmp	r3, #8
 800dfc8:	d939      	bls.n	800e03e <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800dfca:	68bb      	ldr	r3, [r7, #8]
 800dfcc:	3308      	adds	r3, #8
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	b29a      	uxth	r2, r3
 800dfd2:	68bb      	ldr	r3, [r7, #8]
 800dfd4:	3309      	adds	r3, #9
 800dfd6:	781b      	ldrb	r3, [r3, #0]
 800dfd8:	b29b      	uxth	r3, r3
 800dfda:	021b      	lsls	r3, r3, #8
 800dfdc:	b29b      	uxth	r3, r3
 800dfde:	4313      	orrs	r3, r2
 800dfe0:	b29a      	uxth	r2, r3
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800dfe6:	68bb      	ldr	r3, [r7, #8]
 800dfe8:	330a      	adds	r3, #10
 800dfea:	781b      	ldrb	r3, [r3, #0]
 800dfec:	b29a      	uxth	r2, r3
 800dfee:	68bb      	ldr	r3, [r7, #8]
 800dff0:	330b      	adds	r3, #11
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	b29b      	uxth	r3, r3
 800dff6:	021b      	lsls	r3, r3, #8
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	4313      	orrs	r3, r2
 800dffc:	b29a      	uxth	r2, r3
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	330c      	adds	r3, #12
 800e006:	781b      	ldrb	r3, [r3, #0]
 800e008:	b29a      	uxth	r2, r3
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	330d      	adds	r3, #13
 800e00e:	781b      	ldrb	r3, [r3, #0]
 800e010:	b29b      	uxth	r3, r3
 800e012:	021b      	lsls	r3, r3, #8
 800e014:	b29b      	uxth	r3, r3
 800e016:	4313      	orrs	r3, r2
 800e018:	b29a      	uxth	r2, r3
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	7b9a      	ldrb	r2, [r3, #14]
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	7bda      	ldrb	r2, [r3, #15]
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	7c1a      	ldrb	r2, [r3, #16]
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	7c5a      	ldrb	r2, [r3, #17]
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	745a      	strb	r2, [r3, #17]
  }
}
 800e03e:	bf00      	nop
 800e040:	3714      	adds	r7, #20
 800e042:	46bd      	mov	sp, r7
 800e044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e048:	4770      	bx	lr

0800e04a <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800e04a:	b580      	push	{r7, lr}
 800e04c:	b08a      	sub	sp, #40	; 0x28
 800e04e:	af00      	add	r7, sp, #0
 800e050:	60f8      	str	r0, [r7, #12]
 800e052:	60b9      	str	r1, [r7, #8]
 800e054:	4613      	mov	r3, r2
 800e056:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e05c:	2300      	movs	r3, #0
 800e05e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800e062:	2300      	movs	r3, #0
 800e064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	781a      	ldrb	r2, [r3, #0]
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	785a      	ldrb	r2, [r3, #1]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	3302      	adds	r3, #2
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	b29a      	uxth	r2, r3
 800e084:	68bb      	ldr	r3, [r7, #8]
 800e086:	3303      	adds	r3, #3
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	b29b      	uxth	r3, r3
 800e08c:	021b      	lsls	r3, r3, #8
 800e08e:	b29b      	uxth	r3, r3
 800e090:	4313      	orrs	r3, r2
 800e092:	b29a      	uxth	r2, r3
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	791a      	ldrb	r2, [r3, #4]
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800e0a0:	68bb      	ldr	r3, [r7, #8]
 800e0a2:	795a      	ldrb	r2, [r3, #5]
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	799a      	ldrb	r2, [r3, #6]
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800e0b0:	68bb      	ldr	r3, [r7, #8]
 800e0b2:	79da      	ldrb	r2, [r3, #7]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	7a1a      	ldrb	r2, [r3, #8]
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e0c0:	88fb      	ldrh	r3, [r7, #6]
 800e0c2:	2b09      	cmp	r3, #9
 800e0c4:	d95f      	bls.n	800e186 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800e0c6:	2309      	movs	r3, #9
 800e0c8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800e0ca:	2300      	movs	r3, #0
 800e0cc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e0ce:	e051      	b.n	800e174 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e0d0:	f107 0316 	add.w	r3, r7, #22
 800e0d4:	4619      	mov	r1, r3
 800e0d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e0d8:	f000 f8e8 	bl	800e2ac <USBH_GetNextDesc>
 800e0dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800e0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e0:	785b      	ldrb	r3, [r3, #1]
 800e0e2:	2b04      	cmp	r3, #4
 800e0e4:	d146      	bne.n	800e174 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800e0e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e0ea:	221a      	movs	r2, #26
 800e0ec:	fb02 f303 	mul.w	r3, r2, r3
 800e0f0:	3308      	adds	r3, #8
 800e0f2:	68fa      	ldr	r2, [r7, #12]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	3302      	adds	r3, #2
 800e0f8:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e0fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0fc:	69f8      	ldr	r0, [r7, #28]
 800e0fe:	f000 f846 	bl	800e18e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e102:	2300      	movs	r3, #0
 800e104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800e108:	2300      	movs	r3, #0
 800e10a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e10c:	e022      	b.n	800e154 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e10e:	f107 0316 	add.w	r3, r7, #22
 800e112:	4619      	mov	r1, r3
 800e114:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e116:	f000 f8c9 	bl	800e2ac <USBH_GetNextDesc>
 800e11a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800e11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11e:	785b      	ldrb	r3, [r3, #1]
 800e120:	2b05      	cmp	r3, #5
 800e122:	d117      	bne.n	800e154 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e124:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e128:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e12c:	3201      	adds	r2, #1
 800e12e:	00d2      	lsls	r2, r2, #3
 800e130:	211a      	movs	r1, #26
 800e132:	fb01 f303 	mul.w	r3, r1, r3
 800e136:	4413      	add	r3, r2
 800e138:	3308      	adds	r3, #8
 800e13a:	68fa      	ldr	r2, [r7, #12]
 800e13c:	4413      	add	r3, r2
 800e13e:	3304      	adds	r3, #4
 800e140:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800e142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e144:	69b8      	ldr	r0, [r7, #24]
 800e146:	f000 f851 	bl	800e1ec <USBH_ParseEPDesc>
            ep_ix++;
 800e14a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e14e:	3301      	adds	r3, #1
 800e150:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	791b      	ldrb	r3, [r3, #4]
 800e158:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800e15c:	429a      	cmp	r2, r3
 800e15e:	d204      	bcs.n	800e16a <USBH_ParseCfgDesc+0x120>
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	885a      	ldrh	r2, [r3, #2]
 800e164:	8afb      	ldrh	r3, [r7, #22]
 800e166:	429a      	cmp	r2, r3
 800e168:	d8d1      	bhi.n	800e10e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800e16a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e16e:	3301      	adds	r3, #1
 800e170:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e174:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e178:	2b01      	cmp	r3, #1
 800e17a:	d804      	bhi.n	800e186 <USBH_ParseCfgDesc+0x13c>
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	885a      	ldrh	r2, [r3, #2]
 800e180:	8afb      	ldrh	r3, [r7, #22]
 800e182:	429a      	cmp	r2, r3
 800e184:	d8a4      	bhi.n	800e0d0 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800e186:	bf00      	nop
 800e188:	3728      	adds	r7, #40	; 0x28
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}

0800e18e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800e18e:	b480      	push	{r7}
 800e190:	b083      	sub	sp, #12
 800e192:	af00      	add	r7, sp, #0
 800e194:	6078      	str	r0, [r7, #4]
 800e196:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800e198:	683b      	ldr	r3, [r7, #0]
 800e19a:	781a      	ldrb	r2, [r3, #0]
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	785a      	ldrb	r2, [r3, #1]
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	789a      	ldrb	r2, [r3, #2]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	78da      	ldrb	r2, [r3, #3]
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	791a      	ldrb	r2, [r3, #4]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	795a      	ldrb	r2, [r3, #5]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800e1c8:	683b      	ldr	r3, [r7, #0]
 800e1ca:	799a      	ldrb	r2, [r3, #6]
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	79da      	ldrb	r2, [r3, #7]
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	7a1a      	ldrb	r2, [r3, #8]
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	721a      	strb	r2, [r3, #8]
}
 800e1e0:	bf00      	nop
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b083      	sub	sp, #12
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	781a      	ldrb	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800e1fe:	683b      	ldr	r3, [r7, #0]
 800e200:	785a      	ldrb	r2, [r3, #1]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	789a      	ldrb	r2, [r3, #2]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800e20e:	683b      	ldr	r3, [r7, #0]
 800e210:	78da      	ldrb	r2, [r3, #3]
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800e216:	683b      	ldr	r3, [r7, #0]
 800e218:	3304      	adds	r3, #4
 800e21a:	781b      	ldrb	r3, [r3, #0]
 800e21c:	b29a      	uxth	r2, r3
 800e21e:	683b      	ldr	r3, [r7, #0]
 800e220:	3305      	adds	r3, #5
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	b29b      	uxth	r3, r3
 800e226:	021b      	lsls	r3, r3, #8
 800e228:	b29b      	uxth	r3, r3
 800e22a:	4313      	orrs	r3, r2
 800e22c:	b29a      	uxth	r2, r3
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800e232:	683b      	ldr	r3, [r7, #0]
 800e234:	799a      	ldrb	r2, [r3, #6]
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	719a      	strb	r2, [r3, #6]
}
 800e23a:	bf00      	nop
 800e23c:	370c      	adds	r7, #12
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr

0800e246 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e246:	b480      	push	{r7}
 800e248:	b087      	sub	sp, #28
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	60f8      	str	r0, [r7, #12]
 800e24e:	60b9      	str	r1, [r7, #8]
 800e250:	4613      	mov	r3, r2
 800e252:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	3301      	adds	r3, #1
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	2b03      	cmp	r3, #3
 800e25c:	d120      	bne.n	800e2a0 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	781b      	ldrb	r3, [r3, #0]
 800e262:	1e9a      	subs	r2, r3, #2
 800e264:	88fb      	ldrh	r3, [r7, #6]
 800e266:	4293      	cmp	r3, r2
 800e268:	bf28      	it	cs
 800e26a:	4613      	movcs	r3, r2
 800e26c:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	3302      	adds	r3, #2
 800e272:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e274:	2300      	movs	r3, #0
 800e276:	82fb      	strh	r3, [r7, #22]
 800e278:	e00b      	b.n	800e292 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e27a:	8afb      	ldrh	r3, [r7, #22]
 800e27c:	68fa      	ldr	r2, [r7, #12]
 800e27e:	4413      	add	r3, r2
 800e280:	781a      	ldrb	r2, [r3, #0]
 800e282:	68bb      	ldr	r3, [r7, #8]
 800e284:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	3301      	adds	r3, #1
 800e28a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e28c:	8afb      	ldrh	r3, [r7, #22]
 800e28e:	3302      	adds	r3, #2
 800e290:	82fb      	strh	r3, [r7, #22]
 800e292:	8afa      	ldrh	r2, [r7, #22]
 800e294:	8abb      	ldrh	r3, [r7, #20]
 800e296:	429a      	cmp	r2, r3
 800e298:	d3ef      	bcc.n	800e27a <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e29a:	68bb      	ldr	r3, [r7, #8]
 800e29c:	2200      	movs	r2, #0
 800e29e:	701a      	strb	r2, [r3, #0]
  }
}
 800e2a0:	bf00      	nop
 800e2a2:	371c      	adds	r7, #28
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr

0800e2ac <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
 800e2b4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	881a      	ldrh	r2, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	781b      	ldrb	r3, [r3, #0]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	4413      	add	r3, r2
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	781b      	ldrb	r3, [r3, #0]
 800e2cc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	4413      	add	r3, r2
 800e2d2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e2d4:	68fb      	ldr	r3, [r7, #12]
}
 800e2d6:	4618      	mov	r0, r3
 800e2d8:	3714      	adds	r7, #20
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr

0800e2e2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b086      	sub	sp, #24
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	60f8      	str	r0, [r7, #12]
 800e2ea:	60b9      	str	r1, [r7, #8]
 800e2ec:	4613      	mov	r3, r2
 800e2ee:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e2f0:	2301      	movs	r3, #1
 800e2f2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	789b      	ldrb	r3, [r3, #2]
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d002      	beq.n	800e302 <USBH_CtlReq+0x20>
 800e2fc:	2b02      	cmp	r3, #2
 800e2fe:	d01d      	beq.n	800e33c <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800e300:	e043      	b.n	800e38a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	68ba      	ldr	r2, [r7, #8]
 800e306:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	88fa      	ldrh	r2, [r7, #6]
 800e30c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2201      	movs	r2, #1
 800e312:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	2202      	movs	r2, #2
 800e318:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e31a:	2301      	movs	r3, #1
 800e31c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	2203      	movs	r2, #3
 800e322:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e32c:	68fb      	ldr	r3, [r7, #12]
 800e32e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e332:	2300      	movs	r3, #0
 800e334:	2200      	movs	r2, #0
 800e336:	f003 f91d 	bl	8011574 <osMessageQueuePut>
      break;
 800e33a:	e026      	b.n	800e38a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800e33c:	68f8      	ldr	r0, [r7, #12]
 800e33e:	f000 f829 	bl	800e394 <USBH_HandleControl>
 800e342:	4603      	mov	r3, r0
 800e344:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e346:	7dfb      	ldrb	r3, [r7, #23]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d002      	beq.n	800e352 <USBH_CtlReq+0x70>
 800e34c:	7dfb      	ldrb	r3, [r7, #23]
 800e34e:	2b03      	cmp	r3, #3
 800e350:	d106      	bne.n	800e360 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	2201      	movs	r2, #1
 800e356:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2200      	movs	r2, #0
 800e35c:	761a      	strb	r2, [r3, #24]
 800e35e:	e005      	b.n	800e36c <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800e360:	7dfb      	ldrb	r3, [r7, #23]
 800e362:	2b02      	cmp	r3, #2
 800e364:	d102      	bne.n	800e36c <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2201      	movs	r2, #1
 800e36a:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	2203      	movs	r2, #3
 800e370:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e380:	2300      	movs	r3, #0
 800e382:	2200      	movs	r2, #0
 800e384:	f003 f8f6 	bl	8011574 <osMessageQueuePut>
      break;
 800e388:	bf00      	nop
  }
  return status;
 800e38a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e38c:	4618      	mov	r0, r3
 800e38e:	3718      	adds	r7, #24
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b086      	sub	sp, #24
 800e398:	af02      	add	r7, sp, #8
 800e39a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e39c:	2301      	movs	r3, #1
 800e39e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	7e1b      	ldrb	r3, [r3, #24]
 800e3a8:	3b01      	subs	r3, #1
 800e3aa:	2b0a      	cmp	r3, #10
 800e3ac:	f200 8229 	bhi.w	800e802 <USBH_HandleControl+0x46e>
 800e3b0:	a201      	add	r2, pc, #4	; (adr r2, 800e3b8 <USBH_HandleControl+0x24>)
 800e3b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3b6:	bf00      	nop
 800e3b8:	0800e3e5 	.word	0x0800e3e5
 800e3bc:	0800e3ff 	.word	0x0800e3ff
 800e3c0:	0800e4a1 	.word	0x0800e4a1
 800e3c4:	0800e4c7 	.word	0x0800e4c7
 800e3c8:	0800e553 	.word	0x0800e553
 800e3cc:	0800e57d 	.word	0x0800e57d
 800e3d0:	0800e63f 	.word	0x0800e63f
 800e3d4:	0800e661 	.word	0x0800e661
 800e3d8:	0800e6f3 	.word	0x0800e6f3
 800e3dc:	0800e719 	.word	0x0800e719
 800e3e0:	0800e7ab 	.word	0x0800e7ab
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	f103 0110 	add.w	r1, r3, #16
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	795b      	ldrb	r3, [r3, #5]
 800e3ee:	461a      	mov	r2, r3
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fa17 	bl	800e824 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	2202      	movs	r2, #2
 800e3fa:	761a      	strb	r2, [r3, #24]
      break;
 800e3fc:	e20c      	b.n	800e818 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	795b      	ldrb	r3, [r3, #5]
 800e402:	4619      	mov	r1, r3
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f006 fce5 	bl	8014dd4 <USBH_LL_GetURBState>
 800e40a:	4603      	mov	r3, r0
 800e40c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e40e:	7bbb      	ldrb	r3, [r7, #14]
 800e410:	2b01      	cmp	r3, #1
 800e412:	d12c      	bne.n	800e46e <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	7c1b      	ldrb	r3, [r3, #16]
 800e418:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e41c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	8adb      	ldrh	r3, [r3, #22]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d00a      	beq.n	800e43c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e426:	7b7b      	ldrb	r3, [r7, #13]
 800e428:	2b80      	cmp	r3, #128	; 0x80
 800e42a:	d103      	bne.n	800e434 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	2203      	movs	r2, #3
 800e430:	761a      	strb	r2, [r3, #24]
 800e432:	e00d      	b.n	800e450 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	2205      	movs	r2, #5
 800e438:	761a      	strb	r2, [r3, #24]
 800e43a:	e009      	b.n	800e450 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800e43c:	7b7b      	ldrb	r3, [r7, #13]
 800e43e:	2b80      	cmp	r3, #128	; 0x80
 800e440:	d103      	bne.n	800e44a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2209      	movs	r2, #9
 800e446:	761a      	strb	r2, [r3, #24]
 800e448:	e002      	b.n	800e450 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2207      	movs	r2, #7
 800e44e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2203      	movs	r2, #3
 800e454:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e464:	2300      	movs	r3, #0
 800e466:	2200      	movs	r2, #0
 800e468:	f003 f884 	bl	8011574 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e46c:	e1cb      	b.n	800e806 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e46e:	7bbb      	ldrb	r3, [r7, #14]
 800e470:	2b04      	cmp	r3, #4
 800e472:	d003      	beq.n	800e47c <USBH_HandleControl+0xe8>
 800e474:	7bbb      	ldrb	r3, [r7, #14]
 800e476:	2b02      	cmp	r3, #2
 800e478:	f040 81c5 	bne.w	800e806 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	220b      	movs	r2, #11
 800e480:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2203      	movs	r2, #3
 800e486:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e496:	2300      	movs	r3, #0
 800e498:	2200      	movs	r2, #0
 800e49a:	f003 f86b 	bl	8011574 <osMessageQueuePut>
      break;
 800e49e:	e1b2      	b.n	800e806 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e4a6:	b29a      	uxth	r2, r3
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	6899      	ldr	r1, [r3, #8]
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	899a      	ldrh	r2, [r3, #12]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	791b      	ldrb	r3, [r3, #4]
 800e4b8:	6878      	ldr	r0, [r7, #4]
 800e4ba:	f000 f9f2 	bl	800e8a2 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	2204      	movs	r2, #4
 800e4c2:	761a      	strb	r2, [r3, #24]
      break;
 800e4c4:	e1a8      	b.n	800e818 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	791b      	ldrb	r3, [r3, #4]
 800e4ca:	4619      	mov	r1, r3
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f006 fc81 	bl	8014dd4 <USBH_LL_GetURBState>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e4d6:	7bbb      	ldrb	r3, [r7, #14]
 800e4d8:	2b01      	cmp	r3, #1
 800e4da:	d110      	bne.n	800e4fe <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2209      	movs	r2, #9
 800e4e0:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2203      	movs	r2, #3
 800e4e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	2200      	movs	r2, #0
 800e4fa:	f003 f83b 	bl	8011574 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e4fe:	7bbb      	ldrb	r3, [r7, #14]
 800e500:	2b05      	cmp	r3, #5
 800e502:	d110      	bne.n	800e526 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e504:	2303      	movs	r3, #3
 800e506:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2203      	movs	r2, #3
 800e50c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e51c:	2300      	movs	r3, #0
 800e51e:	2200      	movs	r2, #0
 800e520:	f003 f828 	bl	8011574 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e524:	e171      	b.n	800e80a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800e526:	7bbb      	ldrb	r3, [r7, #14]
 800e528:	2b04      	cmp	r3, #4
 800e52a:	f040 816e 	bne.w	800e80a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	220b      	movs	r2, #11
 800e532:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2203      	movs	r2, #3
 800e538:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e548:	2300      	movs	r3, #0
 800e54a:	2200      	movs	r2, #0
 800e54c:	f003 f812 	bl	8011574 <osMessageQueuePut>
      break;
 800e550:	e15b      	b.n	800e80a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6899      	ldr	r1, [r3, #8]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	899a      	ldrh	r2, [r3, #12]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	795b      	ldrb	r3, [r3, #5]
 800e55e:	2001      	movs	r0, #1
 800e560:	9000      	str	r0, [sp, #0]
 800e562:	6878      	ldr	r0, [r7, #4]
 800e564:	f000 f978 	bl	800e858 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e56e:	b29a      	uxth	r2, r3
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	2206      	movs	r2, #6
 800e578:	761a      	strb	r2, [r3, #24]
      break;
 800e57a:	e14d      	b.n	800e818 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	795b      	ldrb	r3, [r3, #5]
 800e580:	4619      	mov	r1, r3
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f006 fc26 	bl	8014dd4 <USBH_LL_GetURBState>
 800e588:	4603      	mov	r3, r0
 800e58a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e58c:	7bbb      	ldrb	r3, [r7, #14]
 800e58e:	2b01      	cmp	r3, #1
 800e590:	d111      	bne.n	800e5b6 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2207      	movs	r2, #7
 800e596:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	2203      	movs	r2, #3
 800e59c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f002 ffe0 	bl	8011574 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e5b4:	e12b      	b.n	800e80e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800e5b6:	7bbb      	ldrb	r3, [r7, #14]
 800e5b8:	2b05      	cmp	r3, #5
 800e5ba:	d113      	bne.n	800e5e4 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	220c      	movs	r2, #12
 800e5c0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e5c2:	2303      	movs	r3, #3
 800e5c4:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	2203      	movs	r2, #3
 800e5ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e5da:	2300      	movs	r3, #0
 800e5dc:	2200      	movs	r2, #0
 800e5de:	f002 ffc9 	bl	8011574 <osMessageQueuePut>
      break;
 800e5e2:	e114      	b.n	800e80e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e5e4:	7bbb      	ldrb	r3, [r7, #14]
 800e5e6:	2b02      	cmp	r3, #2
 800e5e8:	d111      	bne.n	800e60e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2205      	movs	r2, #5
 800e5ee:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2203      	movs	r2, #3
 800e5f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e604:	2300      	movs	r3, #0
 800e606:	2200      	movs	r2, #0
 800e608:	f002 ffb4 	bl	8011574 <osMessageQueuePut>
      break;
 800e60c:	e0ff      	b.n	800e80e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e60e:	7bbb      	ldrb	r3, [r7, #14]
 800e610:	2b04      	cmp	r3, #4
 800e612:	f040 80fc 	bne.w	800e80e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	220b      	movs	r2, #11
 800e61a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e61c:	2302      	movs	r3, #2
 800e61e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2203      	movs	r2, #3
 800e624:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e634:	2300      	movs	r3, #0
 800e636:	2200      	movs	r2, #0
 800e638:	f002 ff9c 	bl	8011574 <osMessageQueuePut>
      break;
 800e63c:	e0e7      	b.n	800e80e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	791b      	ldrb	r3, [r3, #4]
 800e642:	2200      	movs	r2, #0
 800e644:	2100      	movs	r1, #0
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 f92b 	bl	800e8a2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e652:	b29a      	uxth	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	2208      	movs	r2, #8
 800e65c:	761a      	strb	r2, [r3, #24]

      break;
 800e65e:	e0db      	b.n	800e818 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	791b      	ldrb	r3, [r3, #4]
 800e664:	4619      	mov	r1, r3
 800e666:	6878      	ldr	r0, [r7, #4]
 800e668:	f006 fbb4 	bl	8014dd4 <USBH_LL_GetURBState>
 800e66c:	4603      	mov	r3, r0
 800e66e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e670:	7bbb      	ldrb	r3, [r7, #14]
 800e672:	2b01      	cmp	r3, #1
 800e674:	d113      	bne.n	800e69e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	220d      	movs	r2, #13
 800e67a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2203      	movs	r2, #3
 800e684:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e694:	2300      	movs	r3, #0
 800e696:	2200      	movs	r2, #0
 800e698:	f002 ff6c 	bl	8011574 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e69c:	e0b9      	b.n	800e812 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800e69e:	7bbb      	ldrb	r3, [r7, #14]
 800e6a0:	2b04      	cmp	r3, #4
 800e6a2:	d111      	bne.n	800e6c8 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	220b      	movs	r2, #11
 800e6a8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2203      	movs	r2, #3
 800e6ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e6be:	2300      	movs	r3, #0
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	f002 ff57 	bl	8011574 <osMessageQueuePut>
      break;
 800e6c6:	e0a4      	b.n	800e812 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800e6c8:	7bbb      	ldrb	r3, [r7, #14]
 800e6ca:	2b05      	cmp	r3, #5
 800e6cc:	f040 80a1 	bne.w	800e812 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800e6d0:	2303      	movs	r3, #3
 800e6d2:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2203      	movs	r2, #3
 800e6d8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f002 ff42 	bl	8011574 <osMessageQueuePut>
      break;
 800e6f0:	e08f      	b.n	800e812 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	795b      	ldrb	r3, [r3, #5]
 800e6f6:	2201      	movs	r2, #1
 800e6f8:	9200      	str	r2, [sp, #0]
 800e6fa:	2200      	movs	r2, #0
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 f8aa 	bl	800e858 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e710:	687b      	ldr	r3, [r7, #4]
 800e712:	220a      	movs	r2, #10
 800e714:	761a      	strb	r2, [r3, #24]
      break;
 800e716:	e07f      	b.n	800e818 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	795b      	ldrb	r3, [r3, #5]
 800e71c:	4619      	mov	r1, r3
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f006 fb58 	bl	8014dd4 <USBH_LL_GetURBState>
 800e724:	4603      	mov	r3, r0
 800e726:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e728:	7bbb      	ldrb	r3, [r7, #14]
 800e72a:	2b01      	cmp	r3, #1
 800e72c:	d113      	bne.n	800e756 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800e72e:	2300      	movs	r3, #0
 800e730:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	220d      	movs	r2, #13
 800e736:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2203      	movs	r2, #3
 800e73c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e74c:	2300      	movs	r3, #0
 800e74e:	2200      	movs	r2, #0
 800e750:	f002 ff10 	bl	8011574 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e754:	e05f      	b.n	800e816 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e756:	7bbb      	ldrb	r3, [r7, #14]
 800e758:	2b02      	cmp	r3, #2
 800e75a:	d111      	bne.n	800e780 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	2209      	movs	r2, #9
 800e760:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	2203      	movs	r2, #3
 800e766:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e776:	2300      	movs	r3, #0
 800e778:	2200      	movs	r2, #0
 800e77a:	f002 fefb 	bl	8011574 <osMessageQueuePut>
      break;
 800e77e:	e04a      	b.n	800e816 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800e780:	7bbb      	ldrb	r3, [r7, #14]
 800e782:	2b04      	cmp	r3, #4
 800e784:	d147      	bne.n	800e816 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	220b      	movs	r2, #11
 800e78a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2203      	movs	r2, #3
 800e790:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	f002 fee6 	bl	8011574 <osMessageQueuePut>
      break;
 800e7a8:	e035      	b.n	800e816 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	7e5b      	ldrb	r3, [r3, #25]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	b2da      	uxtb	r2, r3
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	765a      	strb	r2, [r3, #25]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	7e5b      	ldrb	r3, [r3, #25]
 800e7ba:	2b02      	cmp	r3, #2
 800e7bc:	d806      	bhi.n	800e7cc <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e7ca:	e025      	b.n	800e818 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e7d2:	2106      	movs	r1, #6
 800e7d4:	6878      	ldr	r0, [r7, #4]
 800e7d6:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	2200      	movs	r2, #0
 800e7dc:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	795b      	ldrb	r3, [r3, #5]
 800e7e2:	4619      	mov	r1, r3
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f000 f90d 	bl	800ea04 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	791b      	ldrb	r3, [r3, #4]
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 f907 	bl	800ea04 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e7fc:	2302      	movs	r3, #2
 800e7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800e800:	e00a      	b.n	800e818 <USBH_HandleControl+0x484>

    default:
      break;
 800e802:	bf00      	nop
 800e804:	e008      	b.n	800e818 <USBH_HandleControl+0x484>
      break;
 800e806:	bf00      	nop
 800e808:	e006      	b.n	800e818 <USBH_HandleControl+0x484>
      break;
 800e80a:	bf00      	nop
 800e80c:	e004      	b.n	800e818 <USBH_HandleControl+0x484>
      break;
 800e80e:	bf00      	nop
 800e810:	e002      	b.n	800e818 <USBH_HandleControl+0x484>
      break;
 800e812:	bf00      	nop
 800e814:	e000      	b.n	800e818 <USBH_HandleControl+0x484>
      break;
 800e816:	bf00      	nop
  }

  return status;
 800e818:	7bfb      	ldrb	r3, [r7, #15]
}
 800e81a:	4618      	mov	r0, r3
 800e81c:	3710      	adds	r7, #16
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop

0800e824 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e824:	b580      	push	{r7, lr}
 800e826:	b088      	sub	sp, #32
 800e828:	af04      	add	r7, sp, #16
 800e82a:	60f8      	str	r0, [r7, #12]
 800e82c:	60b9      	str	r1, [r7, #8]
 800e82e:	4613      	mov	r3, r2
 800e830:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e832:	79f9      	ldrb	r1, [r7, #7]
 800e834:	2300      	movs	r3, #0
 800e836:	9303      	str	r3, [sp, #12]
 800e838:	2308      	movs	r3, #8
 800e83a:	9302      	str	r3, [sp, #8]
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	9301      	str	r3, [sp, #4]
 800e840:	2300      	movs	r3, #0
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	2300      	movs	r3, #0
 800e846:	2200      	movs	r2, #0
 800e848:	68f8      	ldr	r0, [r7, #12]
 800e84a:	f006 fa92 	bl	8014d72 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e84e:	2300      	movs	r3, #0
}
 800e850:	4618      	mov	r0, r3
 800e852:	3710      	adds	r7, #16
 800e854:	46bd      	mov	sp, r7
 800e856:	bd80      	pop	{r7, pc}

0800e858 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e858:	b580      	push	{r7, lr}
 800e85a:	b088      	sub	sp, #32
 800e85c:	af04      	add	r7, sp, #16
 800e85e:	60f8      	str	r0, [r7, #12]
 800e860:	60b9      	str	r1, [r7, #8]
 800e862:	4611      	mov	r1, r2
 800e864:	461a      	mov	r2, r3
 800e866:	460b      	mov	r3, r1
 800e868:	80fb      	strh	r3, [r7, #6]
 800e86a:	4613      	mov	r3, r2
 800e86c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e874:	2b00      	cmp	r3, #0
 800e876:	d001      	beq.n	800e87c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e878:	2300      	movs	r3, #0
 800e87a:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e87c:	7979      	ldrb	r1, [r7, #5]
 800e87e:	7e3b      	ldrb	r3, [r7, #24]
 800e880:	9303      	str	r3, [sp, #12]
 800e882:	88fb      	ldrh	r3, [r7, #6]
 800e884:	9302      	str	r3, [sp, #8]
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	9301      	str	r3, [sp, #4]
 800e88a:	2301      	movs	r3, #1
 800e88c:	9300      	str	r3, [sp, #0]
 800e88e:	2300      	movs	r3, #0
 800e890:	2200      	movs	r2, #0
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f006 fa6d 	bl	8014d72 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e898:	2300      	movs	r3, #0
}
 800e89a:	4618      	mov	r0, r3
 800e89c:	3710      	adds	r7, #16
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	bd80      	pop	{r7, pc}

0800e8a2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e8a2:	b580      	push	{r7, lr}
 800e8a4:	b088      	sub	sp, #32
 800e8a6:	af04      	add	r7, sp, #16
 800e8a8:	60f8      	str	r0, [r7, #12]
 800e8aa:	60b9      	str	r1, [r7, #8]
 800e8ac:	4611      	mov	r1, r2
 800e8ae:	461a      	mov	r2, r3
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	80fb      	strh	r3, [r7, #6]
 800e8b4:	4613      	mov	r3, r2
 800e8b6:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e8b8:	7979      	ldrb	r1, [r7, #5]
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	9303      	str	r3, [sp, #12]
 800e8be:	88fb      	ldrh	r3, [r7, #6]
 800e8c0:	9302      	str	r3, [sp, #8]
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	9301      	str	r3, [sp, #4]
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	9300      	str	r3, [sp, #0]
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	2201      	movs	r2, #1
 800e8ce:	68f8      	ldr	r0, [r7, #12]
 800e8d0:	f006 fa4f 	bl	8014d72 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e8d4:	2300      	movs	r3, #0

}
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	3710      	adds	r7, #16
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	bd80      	pop	{r7, pc}

0800e8de <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e8de:	b580      	push	{r7, lr}
 800e8e0:	b088      	sub	sp, #32
 800e8e2:	af04      	add	r7, sp, #16
 800e8e4:	60f8      	str	r0, [r7, #12]
 800e8e6:	60b9      	str	r1, [r7, #8]
 800e8e8:	4611      	mov	r1, r2
 800e8ea:	461a      	mov	r2, r3
 800e8ec:	460b      	mov	r3, r1
 800e8ee:	80fb      	strh	r3, [r7, #6]
 800e8f0:	4613      	mov	r3, r2
 800e8f2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d001      	beq.n	800e902 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e8fe:	2300      	movs	r3, #0
 800e900:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e902:	7979      	ldrb	r1, [r7, #5]
 800e904:	7e3b      	ldrb	r3, [r7, #24]
 800e906:	9303      	str	r3, [sp, #12]
 800e908:	88fb      	ldrh	r3, [r7, #6]
 800e90a:	9302      	str	r3, [sp, #8]
 800e90c:	68bb      	ldr	r3, [r7, #8]
 800e90e:	9301      	str	r3, [sp, #4]
 800e910:	2301      	movs	r3, #1
 800e912:	9300      	str	r3, [sp, #0]
 800e914:	2302      	movs	r3, #2
 800e916:	2200      	movs	r2, #0
 800e918:	68f8      	ldr	r0, [r7, #12]
 800e91a:	f006 fa2a 	bl	8014d72 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e91e:	2300      	movs	r3, #0
}
 800e920:	4618      	mov	r0, r3
 800e922:	3710      	adds	r7, #16
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}

0800e928 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b088      	sub	sp, #32
 800e92c:	af04      	add	r7, sp, #16
 800e92e:	60f8      	str	r0, [r7, #12]
 800e930:	60b9      	str	r1, [r7, #8]
 800e932:	4611      	mov	r1, r2
 800e934:	461a      	mov	r2, r3
 800e936:	460b      	mov	r3, r1
 800e938:	80fb      	strh	r3, [r7, #6]
 800e93a:	4613      	mov	r3, r2
 800e93c:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e93e:	7979      	ldrb	r1, [r7, #5]
 800e940:	2300      	movs	r3, #0
 800e942:	9303      	str	r3, [sp, #12]
 800e944:	88fb      	ldrh	r3, [r7, #6]
 800e946:	9302      	str	r3, [sp, #8]
 800e948:	68bb      	ldr	r3, [r7, #8]
 800e94a:	9301      	str	r3, [sp, #4]
 800e94c:	2301      	movs	r3, #1
 800e94e:	9300      	str	r3, [sp, #0]
 800e950:	2302      	movs	r3, #2
 800e952:	2201      	movs	r2, #1
 800e954:	68f8      	ldr	r0, [r7, #12]
 800e956:	f006 fa0c 	bl	8014d72 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e95a:	2300      	movs	r3, #0
}
 800e95c:	4618      	mov	r0, r3
 800e95e:	3710      	adds	r7, #16
 800e960:	46bd      	mov	sp, r7
 800e962:	bd80      	pop	{r7, pc}

0800e964 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b086      	sub	sp, #24
 800e968:	af04      	add	r7, sp, #16
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	4608      	mov	r0, r1
 800e96e:	4611      	mov	r1, r2
 800e970:	461a      	mov	r2, r3
 800e972:	4603      	mov	r3, r0
 800e974:	70fb      	strb	r3, [r7, #3]
 800e976:	460b      	mov	r3, r1
 800e978:	70bb      	strb	r3, [r7, #2]
 800e97a:	4613      	mov	r3, r2
 800e97c:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e97e:	7878      	ldrb	r0, [r7, #1]
 800e980:	78ba      	ldrb	r2, [r7, #2]
 800e982:	78f9      	ldrb	r1, [r7, #3]
 800e984:	8b3b      	ldrh	r3, [r7, #24]
 800e986:	9302      	str	r3, [sp, #8]
 800e988:	7d3b      	ldrb	r3, [r7, #20]
 800e98a:	9301      	str	r3, [sp, #4]
 800e98c:	7c3b      	ldrb	r3, [r7, #16]
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	4603      	mov	r3, r0
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f006 f99f 	bl	8014cd6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e998:	2300      	movs	r3, #0
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
 800e9aa:	460b      	mov	r3, r1
 800e9ac:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e9ae:	78fb      	ldrb	r3, [r7, #3]
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f006 f9be 	bl	8014d34 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b084      	sub	sp, #16
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	460b      	mov	r3, r1
 800e9cc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f000 f836 	bl	800ea40 <USBH_GetFreePipe>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e9d8:	89fb      	ldrh	r3, [r7, #14]
 800e9da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9de:	4293      	cmp	r3, r2
 800e9e0:	d00a      	beq.n	800e9f8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e9e2:	78fa      	ldrb	r2, [r7, #3]
 800e9e4:	89fb      	ldrh	r3, [r7, #14]
 800e9e6:	f003 030f 	and.w	r3, r3, #15
 800e9ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e9ee:	6879      	ldr	r1, [r7, #4]
 800e9f0:	33e0      	adds	r3, #224	; 0xe0
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	440b      	add	r3, r1
 800e9f6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e9f8:	89fb      	ldrh	r3, [r7, #14]
 800e9fa:	b2db      	uxtb	r3, r3
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3710      	adds	r7, #16
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	460b      	mov	r3, r1
 800ea0e:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800ea10:	78fb      	ldrb	r3, [r7, #3]
 800ea12:	2b0a      	cmp	r3, #10
 800ea14:	d80d      	bhi.n	800ea32 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ea16:	78fb      	ldrb	r3, [r7, #3]
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	33e0      	adds	r3, #224	; 0xe0
 800ea1c:	009b      	lsls	r3, r3, #2
 800ea1e:	4413      	add	r3, r2
 800ea20:	685a      	ldr	r2, [r3, #4]
 800ea22:	78fb      	ldrb	r3, [r7, #3]
 800ea24:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ea28:	6879      	ldr	r1, [r7, #4]
 800ea2a:	33e0      	adds	r3, #224	; 0xe0
 800ea2c:	009b      	lsls	r3, r3, #2
 800ea2e:	440b      	add	r3, r1
 800ea30:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ea32:	2300      	movs	r3, #0
}
 800ea34:	4618      	mov	r0, r3
 800ea36:	370c      	adds	r7, #12
 800ea38:	46bd      	mov	sp, r7
 800ea3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3e:	4770      	bx	lr

0800ea40 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ea40:	b480      	push	{r7}
 800ea42:	b085      	sub	sp, #20
 800ea44:	af00      	add	r7, sp, #0
 800ea46:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ea48:	2300      	movs	r3, #0
 800ea4a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	73fb      	strb	r3, [r7, #15]
 800ea50:	e00f      	b.n	800ea72 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ea52:	7bfb      	ldrb	r3, [r7, #15]
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	33e0      	adds	r3, #224	; 0xe0
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	4413      	add	r3, r2
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d102      	bne.n	800ea6c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ea66:	7bfb      	ldrb	r3, [r7, #15]
 800ea68:	b29b      	uxth	r3, r3
 800ea6a:	e007      	b.n	800ea7c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800ea6c:	7bfb      	ldrb	r3, [r7, #15]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	73fb      	strb	r3, [r7, #15]
 800ea72:	7bfb      	ldrb	r3, [r7, #15]
 800ea74:	2b0a      	cmp	r3, #10
 800ea76:	d9ec      	bls.n	800ea52 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ea78:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3714      	adds	r7, #20
 800ea80:	46bd      	mov	sp, r7
 800ea82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea86:	4770      	bx	lr

0800ea88 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ea88:	b580      	push	{r7, lr}
 800ea8a:	b084      	sub	sp, #16
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	4603      	mov	r3, r0
 800ea90:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ea92:	79fb      	ldrb	r3, [r7, #7]
 800ea94:	4a08      	ldr	r2, [pc, #32]	; (800eab8 <disk_status+0x30>)
 800ea96:	009b      	lsls	r3, r3, #2
 800ea98:	4413      	add	r3, r2
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	685b      	ldr	r3, [r3, #4]
 800ea9e:	79fa      	ldrb	r2, [r7, #7]
 800eaa0:	4905      	ldr	r1, [pc, #20]	; (800eab8 <disk_status+0x30>)
 800eaa2:	440a      	add	r2, r1
 800eaa4:	7a12      	ldrb	r2, [r2, #8]
 800eaa6:	4610      	mov	r0, r2
 800eaa8:	4798      	blx	r3
 800eaaa:	4603      	mov	r3, r0
 800eaac:	73fb      	strb	r3, [r7, #15]
  return stat;
 800eaae:	7bfb      	ldrb	r3, [r7, #15]
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3710      	adds	r7, #16
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	20000738 	.word	0x20000738

0800eabc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b084      	sub	sp, #16
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	4603      	mov	r3, r0
 800eac4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800eac6:	2300      	movs	r3, #0
 800eac8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800eaca:	79fb      	ldrb	r3, [r7, #7]
 800eacc:	4a0d      	ldr	r2, [pc, #52]	; (800eb04 <disk_initialize+0x48>)
 800eace:	5cd3      	ldrb	r3, [r2, r3]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d111      	bne.n	800eaf8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ead4:	79fb      	ldrb	r3, [r7, #7]
 800ead6:	4a0b      	ldr	r2, [pc, #44]	; (800eb04 <disk_initialize+0x48>)
 800ead8:	2101      	movs	r1, #1
 800eada:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800eadc:	79fb      	ldrb	r3, [r7, #7]
 800eade:	4a09      	ldr	r2, [pc, #36]	; (800eb04 <disk_initialize+0x48>)
 800eae0:	009b      	lsls	r3, r3, #2
 800eae2:	4413      	add	r3, r2
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	79fa      	ldrb	r2, [r7, #7]
 800eaea:	4906      	ldr	r1, [pc, #24]	; (800eb04 <disk_initialize+0x48>)
 800eaec:	440a      	add	r2, r1
 800eaee:	7a12      	ldrb	r2, [r2, #8]
 800eaf0:	4610      	mov	r0, r2
 800eaf2:	4798      	blx	r3
 800eaf4:	4603      	mov	r3, r0
 800eaf6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
 800eb02:	bf00      	nop
 800eb04:	20000738 	.word	0x20000738

0800eb08 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800eb08:	b590      	push	{r4, r7, lr}
 800eb0a:	b087      	sub	sp, #28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	60b9      	str	r1, [r7, #8]
 800eb10:	607a      	str	r2, [r7, #4]
 800eb12:	603b      	str	r3, [r7, #0]
 800eb14:	4603      	mov	r3, r0
 800eb16:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800eb18:	7bfb      	ldrb	r3, [r7, #15]
 800eb1a:	4a0a      	ldr	r2, [pc, #40]	; (800eb44 <disk_read+0x3c>)
 800eb1c:	009b      	lsls	r3, r3, #2
 800eb1e:	4413      	add	r3, r2
 800eb20:	685b      	ldr	r3, [r3, #4]
 800eb22:	689c      	ldr	r4, [r3, #8]
 800eb24:	7bfb      	ldrb	r3, [r7, #15]
 800eb26:	4a07      	ldr	r2, [pc, #28]	; (800eb44 <disk_read+0x3c>)
 800eb28:	4413      	add	r3, r2
 800eb2a:	7a18      	ldrb	r0, [r3, #8]
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	687a      	ldr	r2, [r7, #4]
 800eb30:	68b9      	ldr	r1, [r7, #8]
 800eb32:	47a0      	blx	r4
 800eb34:	4603      	mov	r3, r0
 800eb36:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	371c      	adds	r7, #28
 800eb3e:	46bd      	mov	sp, r7
 800eb40:	bd90      	pop	{r4, r7, pc}
 800eb42:	bf00      	nop
 800eb44:	20000738 	.word	0x20000738

0800eb48 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800eb48:	b590      	push	{r4, r7, lr}
 800eb4a:	b087      	sub	sp, #28
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	60b9      	str	r1, [r7, #8]
 800eb50:	607a      	str	r2, [r7, #4]
 800eb52:	603b      	str	r3, [r7, #0]
 800eb54:	4603      	mov	r3, r0
 800eb56:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eb58:	7bfb      	ldrb	r3, [r7, #15]
 800eb5a:	4a0a      	ldr	r2, [pc, #40]	; (800eb84 <disk_write+0x3c>)
 800eb5c:	009b      	lsls	r3, r3, #2
 800eb5e:	4413      	add	r3, r2
 800eb60:	685b      	ldr	r3, [r3, #4]
 800eb62:	68dc      	ldr	r4, [r3, #12]
 800eb64:	7bfb      	ldrb	r3, [r7, #15]
 800eb66:	4a07      	ldr	r2, [pc, #28]	; (800eb84 <disk_write+0x3c>)
 800eb68:	4413      	add	r3, r2
 800eb6a:	7a18      	ldrb	r0, [r3, #8]
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	68b9      	ldr	r1, [r7, #8]
 800eb72:	47a0      	blx	r4
 800eb74:	4603      	mov	r3, r0
 800eb76:	75fb      	strb	r3, [r7, #23]
  return res;
 800eb78:	7dfb      	ldrb	r3, [r7, #23]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	371c      	adds	r7, #28
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd90      	pop	{r4, r7, pc}
 800eb82:	bf00      	nop
 800eb84:	20000738 	.word	0x20000738

0800eb88 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b085      	sub	sp, #20
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	3301      	adds	r3, #1
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800eb98:	89fb      	ldrh	r3, [r7, #14]
 800eb9a:	021b      	lsls	r3, r3, #8
 800eb9c:	b21a      	sxth	r2, r3
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	b21b      	sxth	r3, r3
 800eba4:	4313      	orrs	r3, r2
 800eba6:	b21b      	sxth	r3, r3
 800eba8:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ebaa:	89fb      	ldrh	r3, [r7, #14]
}
 800ebac:	4618      	mov	r0, r3
 800ebae:	3714      	adds	r7, #20
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b085      	sub	sp, #20
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	3303      	adds	r3, #3
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	021b      	lsls	r3, r3, #8
 800ebcc:	687a      	ldr	r2, [r7, #4]
 800ebce:	3202      	adds	r2, #2
 800ebd0:	7812      	ldrb	r2, [r2, #0]
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	021b      	lsls	r3, r3, #8
 800ebda:	687a      	ldr	r2, [r7, #4]
 800ebdc:	3201      	adds	r2, #1
 800ebde:	7812      	ldrb	r2, [r2, #0]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	021b      	lsls	r3, r3, #8
 800ebe8:	687a      	ldr	r2, [r7, #4]
 800ebea:	7812      	ldrb	r2, [r2, #0]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	60fb      	str	r3, [r7, #12]
	return rv;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	3714      	adds	r7, #20
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr

0800ebfe <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ebfe:	b480      	push	{r7}
 800ec00:	b083      	sub	sp, #12
 800ec02:	af00      	add	r7, sp, #0
 800ec04:	6078      	str	r0, [r7, #4]
 800ec06:	460b      	mov	r3, r1
 800ec08:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	1c5a      	adds	r2, r3, #1
 800ec0e:	607a      	str	r2, [r7, #4]
 800ec10:	887a      	ldrh	r2, [r7, #2]
 800ec12:	b2d2      	uxtb	r2, r2
 800ec14:	701a      	strb	r2, [r3, #0]
 800ec16:	887b      	ldrh	r3, [r7, #2]
 800ec18:	0a1b      	lsrs	r3, r3, #8
 800ec1a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	1c5a      	adds	r2, r3, #1
 800ec20:	607a      	str	r2, [r7, #4]
 800ec22:	887a      	ldrh	r2, [r7, #2]
 800ec24:	b2d2      	uxtb	r2, r2
 800ec26:	701a      	strb	r2, [r3, #0]
}
 800ec28:	bf00      	nop
 800ec2a:	370c      	adds	r7, #12
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec32:	4770      	bx	lr

0800ec34 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	1c5a      	adds	r2, r3, #1
 800ec42:	607a      	str	r2, [r7, #4]
 800ec44:	683a      	ldr	r2, [r7, #0]
 800ec46:	b2d2      	uxtb	r2, r2
 800ec48:	701a      	strb	r2, [r3, #0]
 800ec4a:	683b      	ldr	r3, [r7, #0]
 800ec4c:	0a1b      	lsrs	r3, r3, #8
 800ec4e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	607a      	str	r2, [r7, #4]
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	b2d2      	uxtb	r2, r2
 800ec5a:	701a      	strb	r2, [r3, #0]
 800ec5c:	683b      	ldr	r3, [r7, #0]
 800ec5e:	0a1b      	lsrs	r3, r3, #8
 800ec60:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	1c5a      	adds	r2, r3, #1
 800ec66:	607a      	str	r2, [r7, #4]
 800ec68:	683a      	ldr	r2, [r7, #0]
 800ec6a:	b2d2      	uxtb	r2, r2
 800ec6c:	701a      	strb	r2, [r3, #0]
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	0a1b      	lsrs	r3, r3, #8
 800ec72:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	1c5a      	adds	r2, r3, #1
 800ec78:	607a      	str	r2, [r7, #4]
 800ec7a:	683a      	ldr	r2, [r7, #0]
 800ec7c:	b2d2      	uxtb	r2, r2
 800ec7e:	701a      	strb	r2, [r3, #0]
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr

0800ec8c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ec8c:	b480      	push	{r7}
 800ec8e:	b087      	sub	sp, #28
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	60f8      	str	r0, [r7, #12]
 800ec94:	60b9      	str	r1, [r7, #8]
 800ec96:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d00d      	beq.n	800ecc2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800eca6:	693a      	ldr	r2, [r7, #16]
 800eca8:	1c53      	adds	r3, r2, #1
 800ecaa:	613b      	str	r3, [r7, #16]
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	1c59      	adds	r1, r3, #1
 800ecb0:	6179      	str	r1, [r7, #20]
 800ecb2:	7812      	ldrb	r2, [r2, #0]
 800ecb4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	3b01      	subs	r3, #1
 800ecba:	607b      	str	r3, [r7, #4]
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d1f1      	bne.n	800eca6 <mem_cpy+0x1a>
	}
}
 800ecc2:	bf00      	nop
 800ecc4:	371c      	adds	r7, #28
 800ecc6:	46bd      	mov	sp, r7
 800ecc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eccc:	4770      	bx	lr

0800ecce <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ecce:	b480      	push	{r7}
 800ecd0:	b087      	sub	sp, #28
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	60f8      	str	r0, [r7, #12]
 800ecd6:	60b9      	str	r1, [r7, #8]
 800ecd8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ecde:	697b      	ldr	r3, [r7, #20]
 800ece0:	1c5a      	adds	r2, r3, #1
 800ece2:	617a      	str	r2, [r7, #20]
 800ece4:	68ba      	ldr	r2, [r7, #8]
 800ece6:	b2d2      	uxtb	r2, r2
 800ece8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	607b      	str	r3, [r7, #4]
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d1f3      	bne.n	800ecde <mem_set+0x10>
}
 800ecf6:	bf00      	nop
 800ecf8:	bf00      	nop
 800ecfa:	371c      	adds	r7, #28
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed02:	4770      	bx	lr

0800ed04 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ed04:	b480      	push	{r7}
 800ed06:	b089      	sub	sp, #36	; 0x24
 800ed08:	af00      	add	r7, sp, #0
 800ed0a:	60f8      	str	r0, [r7, #12]
 800ed0c:	60b9      	str	r1, [r7, #8]
 800ed0e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	61fb      	str	r3, [r7, #28]
 800ed14:	68bb      	ldr	r3, [r7, #8]
 800ed16:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	1c5a      	adds	r2, r3, #1
 800ed20:	61fa      	str	r2, [r7, #28]
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	4619      	mov	r1, r3
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	1c5a      	adds	r2, r3, #1
 800ed2a:	61ba      	str	r2, [r7, #24]
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	1acb      	subs	r3, r1, r3
 800ed30:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	3b01      	subs	r3, #1
 800ed36:	607b      	str	r3, [r7, #4]
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d002      	beq.n	800ed44 <mem_cmp+0x40>
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d0eb      	beq.n	800ed1c <mem_cmp+0x18>

	return r;
 800ed44:	697b      	ldr	r3, [r7, #20]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3724      	adds	r7, #36	; 0x24
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed50:	4770      	bx	lr

0800ed52 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ed52:	b480      	push	{r7}
 800ed54:	b083      	sub	sp, #12
 800ed56:	af00      	add	r7, sp, #0
 800ed58:	6078      	str	r0, [r7, #4]
 800ed5a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ed5c:	e002      	b.n	800ed64 <chk_chr+0x12>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	3301      	adds	r3, #1
 800ed62:	607b      	str	r3, [r7, #4]
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	781b      	ldrb	r3, [r3, #0]
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d005      	beq.n	800ed78 <chk_chr+0x26>
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	461a      	mov	r2, r3
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	4293      	cmp	r3, r2
 800ed76:	d1f2      	bne.n	800ed5e <chk_chr+0xc>
	return *str;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	781b      	ldrb	r3, [r3, #0]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	d009      	beq.n	800edaa <lock_fs+0x22>
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	68db      	ldr	r3, [r3, #12]
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f001 ff8a 	bl	8010cb4 <ff_req_grant>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d001      	beq.n	800edaa <lock_fs+0x22>
 800eda6:	2301      	movs	r3, #1
 800eda8:	e000      	b.n	800edac <lock_fs+0x24>
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3708      	adds	r7, #8
 800edb0:	46bd      	mov	sp, r7
 800edb2:	bd80      	pop	{r7, pc}

0800edb4 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b082      	sub	sp, #8
 800edb8:	af00      	add	r7, sp, #0
 800edba:	6078      	str	r0, [r7, #4]
 800edbc:	460b      	mov	r3, r1
 800edbe:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d00d      	beq.n	800ede2 <unlock_fs+0x2e>
 800edc6:	78fb      	ldrb	r3, [r7, #3]
 800edc8:	2b0c      	cmp	r3, #12
 800edca:	d00a      	beq.n	800ede2 <unlock_fs+0x2e>
 800edcc:	78fb      	ldrb	r3, [r7, #3]
 800edce:	2b0b      	cmp	r3, #11
 800edd0:	d007      	beq.n	800ede2 <unlock_fs+0x2e>
 800edd2:	78fb      	ldrb	r3, [r7, #3]
 800edd4:	2b0f      	cmp	r3, #15
 800edd6:	d004      	beq.n	800ede2 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	4618      	mov	r0, r3
 800edde:	f001 ff7e 	bl	8010cde <ff_rel_grant>
	}
}
 800ede2:	bf00      	nop
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
	...

0800edec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800edec:	b480      	push	{r7}
 800edee:	b085      	sub	sp, #20
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
 800edf4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800edf6:	2300      	movs	r3, #0
 800edf8:	60bb      	str	r3, [r7, #8]
 800edfa:	68bb      	ldr	r3, [r7, #8]
 800edfc:	60fb      	str	r3, [r7, #12]
 800edfe:	e029      	b.n	800ee54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ee00:	4a27      	ldr	r2, [pc, #156]	; (800eea0 <chk_lock+0xb4>)
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	011b      	lsls	r3, r3, #4
 800ee06:	4413      	add	r3, r2
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d01d      	beq.n	800ee4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ee0e:	4a24      	ldr	r2, [pc, #144]	; (800eea0 <chk_lock+0xb4>)
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	011b      	lsls	r3, r3, #4
 800ee14:	4413      	add	r3, r2
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	429a      	cmp	r2, r3
 800ee1e:	d116      	bne.n	800ee4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ee20:	4a1f      	ldr	r2, [pc, #124]	; (800eea0 <chk_lock+0xb4>)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	011b      	lsls	r3, r3, #4
 800ee26:	4413      	add	r3, r2
 800ee28:	3304      	adds	r3, #4
 800ee2a:	681a      	ldr	r2, [r3, #0]
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d10c      	bne.n	800ee4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ee34:	4a1a      	ldr	r2, [pc, #104]	; (800eea0 <chk_lock+0xb4>)
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	011b      	lsls	r3, r3, #4
 800ee3a:	4413      	add	r3, r2
 800ee3c:	3308      	adds	r3, #8
 800ee3e:	681a      	ldr	r2, [r3, #0]
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d102      	bne.n	800ee4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ee48:	e007      	b.n	800ee5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	3301      	adds	r3, #1
 800ee52:	60fb      	str	r3, [r7, #12]
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	2b01      	cmp	r3, #1
 800ee58:	d9d2      	bls.n	800ee00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	2b02      	cmp	r3, #2
 800ee5e:	d109      	bne.n	800ee74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ee60:	68bb      	ldr	r3, [r7, #8]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d102      	bne.n	800ee6c <chk_lock+0x80>
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	2b02      	cmp	r3, #2
 800ee6a:	d101      	bne.n	800ee70 <chk_lock+0x84>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	e010      	b.n	800ee92 <chk_lock+0xa6>
 800ee70:	2312      	movs	r3, #18
 800ee72:	e00e      	b.n	800ee92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ee74:	683b      	ldr	r3, [r7, #0]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d108      	bne.n	800ee8c <chk_lock+0xa0>
 800ee7a:	4a09      	ldr	r2, [pc, #36]	; (800eea0 <chk_lock+0xb4>)
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	011b      	lsls	r3, r3, #4
 800ee80:	4413      	add	r3, r2
 800ee82:	330c      	adds	r3, #12
 800ee84:	881b      	ldrh	r3, [r3, #0]
 800ee86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ee8a:	d101      	bne.n	800ee90 <chk_lock+0xa4>
 800ee8c:	2310      	movs	r3, #16
 800ee8e:	e000      	b.n	800ee92 <chk_lock+0xa6>
 800ee90:	2300      	movs	r3, #0
}
 800ee92:	4618      	mov	r0, r3
 800ee94:	3714      	adds	r7, #20
 800ee96:	46bd      	mov	sp, r7
 800ee98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee9c:	4770      	bx	lr
 800ee9e:	bf00      	nop
 800eea0:	20000718 	.word	0x20000718

0800eea4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800eea4:	b480      	push	{r7}
 800eea6:	b083      	sub	sp, #12
 800eea8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	607b      	str	r3, [r7, #4]
 800eeae:	e002      	b.n	800eeb6 <enq_lock+0x12>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	3301      	adds	r3, #1
 800eeb4:	607b      	str	r3, [r7, #4]
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d806      	bhi.n	800eeca <enq_lock+0x26>
 800eebc:	4a09      	ldr	r2, [pc, #36]	; (800eee4 <enq_lock+0x40>)
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	011b      	lsls	r3, r3, #4
 800eec2:	4413      	add	r3, r2
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d1f2      	bne.n	800eeb0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	2b02      	cmp	r3, #2
 800eece:	bf14      	ite	ne
 800eed0:	2301      	movne	r3, #1
 800eed2:	2300      	moveq	r3, #0
 800eed4:	b2db      	uxtb	r3, r3
}
 800eed6:	4618      	mov	r0, r3
 800eed8:	370c      	adds	r7, #12
 800eeda:	46bd      	mov	sp, r7
 800eedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eee0:	4770      	bx	lr
 800eee2:	bf00      	nop
 800eee4:	20000718 	.word	0x20000718

0800eee8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eee8:	b480      	push	{r7}
 800eeea:	b085      	sub	sp, #20
 800eeec:	af00      	add	r7, sp, #0
 800eeee:	6078      	str	r0, [r7, #4]
 800eef0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eef2:	2300      	movs	r3, #0
 800eef4:	60fb      	str	r3, [r7, #12]
 800eef6:	e01f      	b.n	800ef38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eef8:	4a41      	ldr	r2, [pc, #260]	; (800f000 <inc_lock+0x118>)
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	011b      	lsls	r3, r3, #4
 800eefe:	4413      	add	r3, r2
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	681b      	ldr	r3, [r3, #0]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d113      	bne.n	800ef32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ef0a:	4a3d      	ldr	r2, [pc, #244]	; (800f000 <inc_lock+0x118>)
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	011b      	lsls	r3, r3, #4
 800ef10:	4413      	add	r3, r2
 800ef12:	3304      	adds	r3, #4
 800ef14:	681a      	ldr	r2, [r3, #0]
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d109      	bne.n	800ef32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ef1e:	4a38      	ldr	r2, [pc, #224]	; (800f000 <inc_lock+0x118>)
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	011b      	lsls	r3, r3, #4
 800ef24:	4413      	add	r3, r2
 800ef26:	3308      	adds	r3, #8
 800ef28:	681a      	ldr	r2, [r3, #0]
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ef2e:	429a      	cmp	r2, r3
 800ef30:	d006      	beq.n	800ef40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	3301      	adds	r3, #1
 800ef36:	60fb      	str	r3, [r7, #12]
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	2b01      	cmp	r3, #1
 800ef3c:	d9dc      	bls.n	800eef8 <inc_lock+0x10>
 800ef3e:	e000      	b.n	800ef42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ef40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	2b02      	cmp	r3, #2
 800ef46:	d132      	bne.n	800efae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ef48:	2300      	movs	r3, #0
 800ef4a:	60fb      	str	r3, [r7, #12]
 800ef4c:	e002      	b.n	800ef54 <inc_lock+0x6c>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	3301      	adds	r3, #1
 800ef52:	60fb      	str	r3, [r7, #12]
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d806      	bhi.n	800ef68 <inc_lock+0x80>
 800ef5a:	4a29      	ldr	r2, [pc, #164]	; (800f000 <inc_lock+0x118>)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	011b      	lsls	r3, r3, #4
 800ef60:	4413      	add	r3, r2
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d1f2      	bne.n	800ef4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d101      	bne.n	800ef72 <inc_lock+0x8a>
 800ef6e:	2300      	movs	r3, #0
 800ef70:	e040      	b.n	800eff4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	681a      	ldr	r2, [r3, #0]
 800ef76:	4922      	ldr	r1, [pc, #136]	; (800f000 <inc_lock+0x118>)
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	011b      	lsls	r3, r3, #4
 800ef7c:	440b      	add	r3, r1
 800ef7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	689a      	ldr	r2, [r3, #8]
 800ef84:	491e      	ldr	r1, [pc, #120]	; (800f000 <inc_lock+0x118>)
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	011b      	lsls	r3, r3, #4
 800ef8a:	440b      	add	r3, r1
 800ef8c:	3304      	adds	r3, #4
 800ef8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	695a      	ldr	r2, [r3, #20]
 800ef94:	491a      	ldr	r1, [pc, #104]	; (800f000 <inc_lock+0x118>)
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	011b      	lsls	r3, r3, #4
 800ef9a:	440b      	add	r3, r1
 800ef9c:	3308      	adds	r3, #8
 800ef9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800efa0:	4a17      	ldr	r2, [pc, #92]	; (800f000 <inc_lock+0x118>)
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	011b      	lsls	r3, r3, #4
 800efa6:	4413      	add	r3, r2
 800efa8:	330c      	adds	r3, #12
 800efaa:	2200      	movs	r2, #0
 800efac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d009      	beq.n	800efc8 <inc_lock+0xe0>
 800efb4:	4a12      	ldr	r2, [pc, #72]	; (800f000 <inc_lock+0x118>)
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	011b      	lsls	r3, r3, #4
 800efba:	4413      	add	r3, r2
 800efbc:	330c      	adds	r3, #12
 800efbe:	881b      	ldrh	r3, [r3, #0]
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d001      	beq.n	800efc8 <inc_lock+0xe0>
 800efc4:	2300      	movs	r3, #0
 800efc6:	e015      	b.n	800eff4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d108      	bne.n	800efe0 <inc_lock+0xf8>
 800efce:	4a0c      	ldr	r2, [pc, #48]	; (800f000 <inc_lock+0x118>)
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	011b      	lsls	r3, r3, #4
 800efd4:	4413      	add	r3, r2
 800efd6:	330c      	adds	r3, #12
 800efd8:	881b      	ldrh	r3, [r3, #0]
 800efda:	3301      	adds	r3, #1
 800efdc:	b29a      	uxth	r2, r3
 800efde:	e001      	b.n	800efe4 <inc_lock+0xfc>
 800efe0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800efe4:	4906      	ldr	r1, [pc, #24]	; (800f000 <inc_lock+0x118>)
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	011b      	lsls	r3, r3, #4
 800efea:	440b      	add	r3, r1
 800efec:	330c      	adds	r3, #12
 800efee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800eff0:	68fb      	ldr	r3, [r7, #12]
 800eff2:	3301      	adds	r3, #1
}
 800eff4:	4618      	mov	r0, r3
 800eff6:	3714      	adds	r7, #20
 800eff8:	46bd      	mov	sp, r7
 800effa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800effe:	4770      	bx	lr
 800f000:	20000718 	.word	0x20000718

0800f004 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f004:	b480      	push	{r7}
 800f006:	b085      	sub	sp, #20
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f00c:	2300      	movs	r3, #0
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	e010      	b.n	800f034 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f012:	4a0d      	ldr	r2, [pc, #52]	; (800f048 <clear_lock+0x44>)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	011b      	lsls	r3, r3, #4
 800f018:	4413      	add	r3, r2
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	429a      	cmp	r2, r3
 800f020:	d105      	bne.n	800f02e <clear_lock+0x2a>
 800f022:	4a09      	ldr	r2, [pc, #36]	; (800f048 <clear_lock+0x44>)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	011b      	lsls	r3, r3, #4
 800f028:	4413      	add	r3, r2
 800f02a:	2200      	movs	r2, #0
 800f02c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f02e:	68fb      	ldr	r3, [r7, #12]
 800f030:	3301      	adds	r3, #1
 800f032:	60fb      	str	r3, [r7, #12]
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	2b01      	cmp	r3, #1
 800f038:	d9eb      	bls.n	800f012 <clear_lock+0xe>
	}
}
 800f03a:	bf00      	nop
 800f03c:	bf00      	nop
 800f03e:	3714      	adds	r7, #20
 800f040:	46bd      	mov	sp, r7
 800f042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f046:	4770      	bx	lr
 800f048:	20000718 	.word	0x20000718

0800f04c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b086      	sub	sp, #24
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	78db      	ldrb	r3, [r3, #3]
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	d034      	beq.n	800f0ca <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f064:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	7858      	ldrb	r0, [r3, #1]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f070:	2301      	movs	r3, #1
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	f7ff fd68 	bl	800eb48 <disk_write>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d002      	beq.n	800f084 <sync_window+0x38>
			res = FR_DISK_ERR;
 800f07e:	2301      	movs	r3, #1
 800f080:	73fb      	strb	r3, [r7, #15]
 800f082:	e022      	b.n	800f0ca <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	2200      	movs	r2, #0
 800f088:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f08e:	697a      	ldr	r2, [r7, #20]
 800f090:	1ad2      	subs	r2, r2, r3
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	69db      	ldr	r3, [r3, #28]
 800f096:	429a      	cmp	r2, r3
 800f098:	d217      	bcs.n	800f0ca <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	789b      	ldrb	r3, [r3, #2]
 800f09e:	613b      	str	r3, [r7, #16]
 800f0a0:	e010      	b.n	800f0c4 <sync_window+0x78>
					wsect += fs->fsize;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	69db      	ldr	r3, [r3, #28]
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	4413      	add	r3, r2
 800f0aa:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	7858      	ldrb	r0, [r3, #1]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	697a      	ldr	r2, [r7, #20]
 800f0ba:	f7ff fd45 	bl	800eb48 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f0be:	693b      	ldr	r3, [r7, #16]
 800f0c0:	3b01      	subs	r3, #1
 800f0c2:	613b      	str	r3, [r7, #16]
 800f0c4:	693b      	ldr	r3, [r7, #16]
 800f0c6:	2b01      	cmp	r3, #1
 800f0c8:	d8eb      	bhi.n	800f0a2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f0ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3718      	adds	r7, #24
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	bd80      	pop	{r7, pc}

0800f0d4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f0d4:	b580      	push	{r7, lr}
 800f0d6:	b084      	sub	sp, #16
 800f0d8:	af00      	add	r7, sp, #0
 800f0da:	6078      	str	r0, [r7, #4]
 800f0dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0e6:	683a      	ldr	r2, [r7, #0]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d01b      	beq.n	800f124 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f7ff ffad 	bl	800f04c <sync_window>
 800f0f2:	4603      	mov	r3, r0
 800f0f4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f0f6:	7bfb      	ldrb	r3, [r7, #15]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d113      	bne.n	800f124 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	7858      	ldrb	r0, [r3, #1]
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f106:	2301      	movs	r3, #1
 800f108:	683a      	ldr	r2, [r7, #0]
 800f10a:	f7ff fcfd 	bl	800eb08 <disk_read>
 800f10e:	4603      	mov	r3, r0
 800f110:	2b00      	cmp	r3, #0
 800f112:	d004      	beq.n	800f11e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f114:	f04f 33ff 	mov.w	r3, #4294967295
 800f118:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f11a:	2301      	movs	r3, #1
 800f11c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	683a      	ldr	r2, [r7, #0]
 800f122:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800f124:	7bfb      	ldrb	r3, [r7, #15]
}
 800f126:	4618      	mov	r0, r3
 800f128:	3710      	adds	r7, #16
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}

0800f12e <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f12e:	b480      	push	{r7}
 800f130:	b083      	sub	sp, #12
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	3b02      	subs	r3, #2
 800f13c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	699b      	ldr	r3, [r3, #24]
 800f142:	3b02      	subs	r3, #2
 800f144:	683a      	ldr	r2, [r7, #0]
 800f146:	429a      	cmp	r2, r3
 800f148:	d301      	bcc.n	800f14e <clust2sect+0x20>
 800f14a:	2300      	movs	r3, #0
 800f14c:	e008      	b.n	800f160 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	895b      	ldrh	r3, [r3, #10]
 800f152:	461a      	mov	r2, r3
 800f154:	683b      	ldr	r3, [r7, #0]
 800f156:	fb03 f202 	mul.w	r2, r3, r2
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f15e:	4413      	add	r3, r2
}
 800f160:	4618      	mov	r0, r3
 800f162:	370c      	adds	r7, #12
 800f164:	46bd      	mov	sp, r7
 800f166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16a:	4770      	bx	lr

0800f16c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f16c:	b580      	push	{r7, lr}
 800f16e:	b086      	sub	sp, #24
 800f170:	af00      	add	r7, sp, #0
 800f172:	6078      	str	r0, [r7, #4]
 800f174:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d904      	bls.n	800f18c <get_fat+0x20>
 800f182:	693b      	ldr	r3, [r7, #16]
 800f184:	699b      	ldr	r3, [r3, #24]
 800f186:	683a      	ldr	r2, [r7, #0]
 800f188:	429a      	cmp	r2, r3
 800f18a:	d302      	bcc.n	800f192 <get_fat+0x26>
		val = 1;	/* Internal error */
 800f18c:	2301      	movs	r3, #1
 800f18e:	617b      	str	r3, [r7, #20]
 800f190:	e08f      	b.n	800f2b2 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f192:	f04f 33ff 	mov.w	r3, #4294967295
 800f196:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f198:	693b      	ldr	r3, [r7, #16]
 800f19a:	781b      	ldrb	r3, [r3, #0]
 800f19c:	2b03      	cmp	r3, #3
 800f19e:	d062      	beq.n	800f266 <get_fat+0xfa>
 800f1a0:	2b03      	cmp	r3, #3
 800f1a2:	dc7c      	bgt.n	800f29e <get_fat+0x132>
 800f1a4:	2b01      	cmp	r3, #1
 800f1a6:	d002      	beq.n	800f1ae <get_fat+0x42>
 800f1a8:	2b02      	cmp	r3, #2
 800f1aa:	d042      	beq.n	800f232 <get_fat+0xc6>
 800f1ac:	e077      	b.n	800f29e <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f1ae:	683b      	ldr	r3, [r7, #0]
 800f1b0:	60fb      	str	r3, [r7, #12]
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	085b      	lsrs	r3, r3, #1
 800f1b6:	68fa      	ldr	r2, [r7, #12]
 800f1b8:	4413      	add	r3, r2
 800f1ba:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1bc:	693b      	ldr	r3, [r7, #16]
 800f1be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	0a5b      	lsrs	r3, r3, #9
 800f1c4:	4413      	add	r3, r2
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	6938      	ldr	r0, [r7, #16]
 800f1ca:	f7ff ff83 	bl	800f0d4 <move_window>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d167      	bne.n	800f2a4 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	1c5a      	adds	r2, r3, #1
 800f1d8:	60fa      	str	r2, [r7, #12]
 800f1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	4413      	add	r3, r2
 800f1e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f1e6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	0a5b      	lsrs	r3, r3, #9
 800f1f0:	4413      	add	r3, r2
 800f1f2:	4619      	mov	r1, r3
 800f1f4:	6938      	ldr	r0, [r7, #16]
 800f1f6:	f7ff ff6d 	bl	800f0d4 <move_window>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d153      	bne.n	800f2a8 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f206:	693a      	ldr	r2, [r7, #16]
 800f208:	4413      	add	r3, r2
 800f20a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f20e:	021b      	lsls	r3, r3, #8
 800f210:	461a      	mov	r2, r3
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	4313      	orrs	r3, r2
 800f216:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	f003 0301 	and.w	r3, r3, #1
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d002      	beq.n	800f228 <get_fat+0xbc>
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	091b      	lsrs	r3, r3, #4
 800f226:	e002      	b.n	800f22e <get_fat+0xc2>
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f22e:	617b      	str	r3, [r7, #20]
			break;
 800f230:	e03f      	b.n	800f2b2 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f232:	693b      	ldr	r3, [r7, #16]
 800f234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	0a1b      	lsrs	r3, r3, #8
 800f23a:	4413      	add	r3, r2
 800f23c:	4619      	mov	r1, r3
 800f23e:	6938      	ldr	r0, [r7, #16]
 800f240:	f7ff ff48 	bl	800f0d4 <move_window>
 800f244:	4603      	mov	r3, r0
 800f246:	2b00      	cmp	r3, #0
 800f248:	d130      	bne.n	800f2ac <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f24a:	693b      	ldr	r3, [r7, #16]
 800f24c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	005b      	lsls	r3, r3, #1
 800f254:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f258:	4413      	add	r3, r2
 800f25a:	4618      	mov	r0, r3
 800f25c:	f7ff fc94 	bl	800eb88 <ld_word>
 800f260:	4603      	mov	r3, r0
 800f262:	617b      	str	r3, [r7, #20]
			break;
 800f264:	e025      	b.n	800f2b2 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f266:	693b      	ldr	r3, [r7, #16]
 800f268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f26a:	683b      	ldr	r3, [r7, #0]
 800f26c:	09db      	lsrs	r3, r3, #7
 800f26e:	4413      	add	r3, r2
 800f270:	4619      	mov	r1, r3
 800f272:	6938      	ldr	r0, [r7, #16]
 800f274:	f7ff ff2e 	bl	800f0d4 <move_window>
 800f278:	4603      	mov	r3, r0
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	d118      	bne.n	800f2b0 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f28c:	4413      	add	r3, r2
 800f28e:	4618      	mov	r0, r3
 800f290:	f7ff fc92 	bl	800ebb8 <ld_dword>
 800f294:	4603      	mov	r3, r0
 800f296:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f29a:	617b      	str	r3, [r7, #20]
			break;
 800f29c:	e009      	b.n	800f2b2 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f29e:	2301      	movs	r3, #1
 800f2a0:	617b      	str	r3, [r7, #20]
 800f2a2:	e006      	b.n	800f2b2 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f2a4:	bf00      	nop
 800f2a6:	e004      	b.n	800f2b2 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f2a8:	bf00      	nop
 800f2aa:	e002      	b.n	800f2b2 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f2ac:	bf00      	nop
 800f2ae:	e000      	b.n	800f2b2 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f2b0:	bf00      	nop
		}
	}

	return val;
 800f2b2:	697b      	ldr	r3, [r7, #20]
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3718      	adds	r7, #24
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}

0800f2bc <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f2bc:	b590      	push	{r4, r7, lr}
 800f2be:	b089      	sub	sp, #36	; 0x24
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f2c8:	2302      	movs	r3, #2
 800f2ca:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f2cc:	68bb      	ldr	r3, [r7, #8]
 800f2ce:	2b01      	cmp	r3, #1
 800f2d0:	f240 80d2 	bls.w	800f478 <put_fat+0x1bc>
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	68ba      	ldr	r2, [r7, #8]
 800f2da:	429a      	cmp	r2, r3
 800f2dc:	f080 80cc 	bcs.w	800f478 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	781b      	ldrb	r3, [r3, #0]
 800f2e4:	2b03      	cmp	r3, #3
 800f2e6:	f000 8096 	beq.w	800f416 <put_fat+0x15a>
 800f2ea:	2b03      	cmp	r3, #3
 800f2ec:	f300 80cd 	bgt.w	800f48a <put_fat+0x1ce>
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d002      	beq.n	800f2fa <put_fat+0x3e>
 800f2f4:	2b02      	cmp	r3, #2
 800f2f6:	d06e      	beq.n	800f3d6 <put_fat+0x11a>
 800f2f8:	e0c7      	b.n	800f48a <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	61bb      	str	r3, [r7, #24]
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	085b      	lsrs	r3, r3, #1
 800f302:	69ba      	ldr	r2, [r7, #24]
 800f304:	4413      	add	r3, r2
 800f306:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f30c:	69bb      	ldr	r3, [r7, #24]
 800f30e:	0a5b      	lsrs	r3, r3, #9
 800f310:	4413      	add	r3, r2
 800f312:	4619      	mov	r1, r3
 800f314:	68f8      	ldr	r0, [r7, #12]
 800f316:	f7ff fedd 	bl	800f0d4 <move_window>
 800f31a:	4603      	mov	r3, r0
 800f31c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f31e:	7ffb      	ldrb	r3, [r7, #31]
 800f320:	2b00      	cmp	r3, #0
 800f322:	f040 80ab 	bne.w	800f47c <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f32c:	69bb      	ldr	r3, [r7, #24]
 800f32e:	1c59      	adds	r1, r3, #1
 800f330:	61b9      	str	r1, [r7, #24]
 800f332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f336:	4413      	add	r3, r2
 800f338:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	f003 0301 	and.w	r3, r3, #1
 800f340:	2b00      	cmp	r3, #0
 800f342:	d00d      	beq.n	800f360 <put_fat+0xa4>
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	b25b      	sxtb	r3, r3
 800f34a:	f003 030f 	and.w	r3, r3, #15
 800f34e:	b25a      	sxtb	r2, r3
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	b2db      	uxtb	r3, r3
 800f354:	011b      	lsls	r3, r3, #4
 800f356:	b25b      	sxtb	r3, r3
 800f358:	4313      	orrs	r3, r2
 800f35a:	b25b      	sxtb	r3, r3
 800f35c:	b2db      	uxtb	r3, r3
 800f35e:	e001      	b.n	800f364 <put_fat+0xa8>
 800f360:	687b      	ldr	r3, [r7, #4]
 800f362:	b2db      	uxtb	r3, r3
 800f364:	697a      	ldr	r2, [r7, #20]
 800f366:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	2201      	movs	r2, #1
 800f36c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f36e:	68fb      	ldr	r3, [r7, #12]
 800f370:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f372:	69bb      	ldr	r3, [r7, #24]
 800f374:	0a5b      	lsrs	r3, r3, #9
 800f376:	4413      	add	r3, r2
 800f378:	4619      	mov	r1, r3
 800f37a:	68f8      	ldr	r0, [r7, #12]
 800f37c:	f7ff feaa 	bl	800f0d4 <move_window>
 800f380:	4603      	mov	r3, r0
 800f382:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f384:	7ffb      	ldrb	r3, [r7, #31]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d17a      	bne.n	800f480 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800f38a:	68fb      	ldr	r3, [r7, #12]
 800f38c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f396:	4413      	add	r3, r2
 800f398:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f39a:	68bb      	ldr	r3, [r7, #8]
 800f39c:	f003 0301 	and.w	r3, r3, #1
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d003      	beq.n	800f3ac <put_fat+0xf0>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	091b      	lsrs	r3, r3, #4
 800f3a8:	b2db      	uxtb	r3, r3
 800f3aa:	e00e      	b.n	800f3ca <put_fat+0x10e>
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	781b      	ldrb	r3, [r3, #0]
 800f3b0:	b25b      	sxtb	r3, r3
 800f3b2:	f023 030f 	bic.w	r3, r3, #15
 800f3b6:	b25a      	sxtb	r2, r3
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	0a1b      	lsrs	r3, r3, #8
 800f3bc:	b25b      	sxtb	r3, r3
 800f3be:	f003 030f 	and.w	r3, r3, #15
 800f3c2:	b25b      	sxtb	r3, r3
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	b25b      	sxtb	r3, r3
 800f3c8:	b2db      	uxtb	r3, r3
 800f3ca:	697a      	ldr	r2, [r7, #20]
 800f3cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	70da      	strb	r2, [r3, #3]
			break;
 800f3d4:	e059      	b.n	800f48a <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3da:	68bb      	ldr	r3, [r7, #8]
 800f3dc:	0a1b      	lsrs	r3, r3, #8
 800f3de:	4413      	add	r3, r2
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	68f8      	ldr	r0, [r7, #12]
 800f3e4:	f7ff fe76 	bl	800f0d4 <move_window>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f3ec:	7ffb      	ldrb	r3, [r7, #31]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d148      	bne.n	800f484 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f3f2:	68fb      	ldr	r3, [r7, #12]
 800f3f4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f3f8:	68bb      	ldr	r3, [r7, #8]
 800f3fa:	005b      	lsls	r3, r3, #1
 800f3fc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800f400:	4413      	add	r3, r2
 800f402:	687a      	ldr	r2, [r7, #4]
 800f404:	b292      	uxth	r2, r2
 800f406:	4611      	mov	r1, r2
 800f408:	4618      	mov	r0, r3
 800f40a:	f7ff fbf8 	bl	800ebfe <st_word>
			fs->wflag = 1;
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	2201      	movs	r2, #1
 800f412:	70da      	strb	r2, [r3, #3]
			break;
 800f414:	e039      	b.n	800f48a <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f41a:	68bb      	ldr	r3, [r7, #8]
 800f41c:	09db      	lsrs	r3, r3, #7
 800f41e:	4413      	add	r3, r2
 800f420:	4619      	mov	r1, r3
 800f422:	68f8      	ldr	r0, [r7, #12]
 800f424:	f7ff fe56 	bl	800f0d4 <move_window>
 800f428:	4603      	mov	r3, r0
 800f42a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f42c:	7ffb      	ldrb	r3, [r7, #31]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d12a      	bne.n	800f488 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f438:	68fb      	ldr	r3, [r7, #12]
 800f43a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f43e:	68bb      	ldr	r3, [r7, #8]
 800f440:	009b      	lsls	r3, r3, #2
 800f442:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f446:	4413      	add	r3, r2
 800f448:	4618      	mov	r0, r3
 800f44a:	f7ff fbb5 	bl	800ebb8 <ld_dword>
 800f44e:	4603      	mov	r3, r0
 800f450:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f454:	4323      	orrs	r3, r4
 800f456:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	009b      	lsls	r3, r3, #2
 800f462:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800f466:	4413      	add	r3, r2
 800f468:	6879      	ldr	r1, [r7, #4]
 800f46a:	4618      	mov	r0, r3
 800f46c:	f7ff fbe2 	bl	800ec34 <st_dword>
			fs->wflag = 1;
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	2201      	movs	r2, #1
 800f474:	70da      	strb	r2, [r3, #3]
			break;
 800f476:	e008      	b.n	800f48a <put_fat+0x1ce>
		}
	}
 800f478:	bf00      	nop
 800f47a:	e006      	b.n	800f48a <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f47c:	bf00      	nop
 800f47e:	e004      	b.n	800f48a <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f480:	bf00      	nop
 800f482:	e002      	b.n	800f48a <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f484:	bf00      	nop
 800f486:	e000      	b.n	800f48a <put_fat+0x1ce>
			if (res != FR_OK) break;
 800f488:	bf00      	nop
	return res;
 800f48a:	7ffb      	ldrb	r3, [r7, #31]
}
 800f48c:	4618      	mov	r0, r3
 800f48e:	3724      	adds	r7, #36	; 0x24
 800f490:	46bd      	mov	sp, r7
 800f492:	bd90      	pop	{r4, r7, pc}

0800f494 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f494:	b580      	push	{r7, lr}
 800f496:	b088      	sub	sp, #32
 800f498:	af00      	add	r7, sp, #0
 800f49a:	60f8      	str	r0, [r7, #12]
 800f49c:	60b9      	str	r1, [r7, #8]
 800f49e:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f4aa:	68bb      	ldr	r3, [r7, #8]
 800f4ac:	2b01      	cmp	r3, #1
 800f4ae:	d904      	bls.n	800f4ba <remove_chain+0x26>
 800f4b0:	69bb      	ldr	r3, [r7, #24]
 800f4b2:	699b      	ldr	r3, [r3, #24]
 800f4b4:	68ba      	ldr	r2, [r7, #8]
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d301      	bcc.n	800f4be <remove_chain+0x2a>
 800f4ba:	2302      	movs	r3, #2
 800f4bc:	e04b      	b.n	800f556 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d00c      	beq.n	800f4de <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f4c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f4c8:	6879      	ldr	r1, [r7, #4]
 800f4ca:	69b8      	ldr	r0, [r7, #24]
 800f4cc:	f7ff fef6 	bl	800f2bc <put_fat>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f4d4:	7ffb      	ldrb	r3, [r7, #31]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d001      	beq.n	800f4de <remove_chain+0x4a>
 800f4da:	7ffb      	ldrb	r3, [r7, #31]
 800f4dc:	e03b      	b.n	800f556 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f4de:	68b9      	ldr	r1, [r7, #8]
 800f4e0:	68f8      	ldr	r0, [r7, #12]
 800f4e2:	f7ff fe43 	bl	800f16c <get_fat>
 800f4e6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d031      	beq.n	800f552 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f4ee:	697b      	ldr	r3, [r7, #20]
 800f4f0:	2b01      	cmp	r3, #1
 800f4f2:	d101      	bne.n	800f4f8 <remove_chain+0x64>
 800f4f4:	2302      	movs	r3, #2
 800f4f6:	e02e      	b.n	800f556 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4fe:	d101      	bne.n	800f504 <remove_chain+0x70>
 800f500:	2301      	movs	r3, #1
 800f502:	e028      	b.n	800f556 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f504:	2200      	movs	r2, #0
 800f506:	68b9      	ldr	r1, [r7, #8]
 800f508:	69b8      	ldr	r0, [r7, #24]
 800f50a:	f7ff fed7 	bl	800f2bc <put_fat>
 800f50e:	4603      	mov	r3, r0
 800f510:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f512:	7ffb      	ldrb	r3, [r7, #31]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d001      	beq.n	800f51c <remove_chain+0x88>
 800f518:	7ffb      	ldrb	r3, [r7, #31]
 800f51a:	e01c      	b.n	800f556 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f51c:	69bb      	ldr	r3, [r7, #24]
 800f51e:	695a      	ldr	r2, [r3, #20]
 800f520:	69bb      	ldr	r3, [r7, #24]
 800f522:	699b      	ldr	r3, [r3, #24]
 800f524:	3b02      	subs	r3, #2
 800f526:	429a      	cmp	r2, r3
 800f528:	d20b      	bcs.n	800f542 <remove_chain+0xae>
			fs->free_clst++;
 800f52a:	69bb      	ldr	r3, [r7, #24]
 800f52c:	695b      	ldr	r3, [r3, #20]
 800f52e:	1c5a      	adds	r2, r3, #1
 800f530:	69bb      	ldr	r3, [r7, #24]
 800f532:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f534:	69bb      	ldr	r3, [r7, #24]
 800f536:	791b      	ldrb	r3, [r3, #4]
 800f538:	f043 0301 	orr.w	r3, r3, #1
 800f53c:	b2da      	uxtb	r2, r3
 800f53e:	69bb      	ldr	r3, [r7, #24]
 800f540:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f542:	697b      	ldr	r3, [r7, #20]
 800f544:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f546:	69bb      	ldr	r3, [r7, #24]
 800f548:	699b      	ldr	r3, [r3, #24]
 800f54a:	68ba      	ldr	r2, [r7, #8]
 800f54c:	429a      	cmp	r2, r3
 800f54e:	d3c6      	bcc.n	800f4de <remove_chain+0x4a>
 800f550:	e000      	b.n	800f554 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f552:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f554:	2300      	movs	r3, #0
}
 800f556:	4618      	mov	r0, r3
 800f558:	3720      	adds	r7, #32
 800f55a:	46bd      	mov	sp, r7
 800f55c:	bd80      	pop	{r7, pc}

0800f55e <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f55e:	b580      	push	{r7, lr}
 800f560:	b088      	sub	sp, #32
 800f562:	af00      	add	r7, sp, #0
 800f564:	6078      	str	r0, [r7, #4]
 800f566:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f56e:	683b      	ldr	r3, [r7, #0]
 800f570:	2b00      	cmp	r3, #0
 800f572:	d10d      	bne.n	800f590 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	691b      	ldr	r3, [r3, #16]
 800f578:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f57a:	69bb      	ldr	r3, [r7, #24]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d004      	beq.n	800f58a <create_chain+0x2c>
 800f580:	693b      	ldr	r3, [r7, #16]
 800f582:	699b      	ldr	r3, [r3, #24]
 800f584:	69ba      	ldr	r2, [r7, #24]
 800f586:	429a      	cmp	r2, r3
 800f588:	d31b      	bcc.n	800f5c2 <create_chain+0x64>
 800f58a:	2301      	movs	r3, #1
 800f58c:	61bb      	str	r3, [r7, #24]
 800f58e:	e018      	b.n	800f5c2 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f590:	6839      	ldr	r1, [r7, #0]
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f7ff fdea 	bl	800f16c <get_fat>
 800f598:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2b01      	cmp	r3, #1
 800f59e:	d801      	bhi.n	800f5a4 <create_chain+0x46>
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	e070      	b.n	800f686 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5aa:	d101      	bne.n	800f5b0 <create_chain+0x52>
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	e06a      	b.n	800f686 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f5b0:	693b      	ldr	r3, [r7, #16]
 800f5b2:	699b      	ldr	r3, [r3, #24]
 800f5b4:	68fa      	ldr	r2, [r7, #12]
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d201      	bcs.n	800f5be <create_chain+0x60>
 800f5ba:	68fb      	ldr	r3, [r7, #12]
 800f5bc:	e063      	b.n	800f686 <create_chain+0x128>
		scl = clst;
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f5c2:	69bb      	ldr	r3, [r7, #24]
 800f5c4:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	3301      	adds	r3, #1
 800f5ca:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f5cc:	693b      	ldr	r3, [r7, #16]
 800f5ce:	699b      	ldr	r3, [r3, #24]
 800f5d0:	69fa      	ldr	r2, [r7, #28]
 800f5d2:	429a      	cmp	r2, r3
 800f5d4:	d307      	bcc.n	800f5e6 <create_chain+0x88>
				ncl = 2;
 800f5d6:	2302      	movs	r3, #2
 800f5d8:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f5da:	69fa      	ldr	r2, [r7, #28]
 800f5dc:	69bb      	ldr	r3, [r7, #24]
 800f5de:	429a      	cmp	r2, r3
 800f5e0:	d901      	bls.n	800f5e6 <create_chain+0x88>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	e04f      	b.n	800f686 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f5e6:	69f9      	ldr	r1, [r7, #28]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7ff fdbf 	bl	800f16c <get_fat>
 800f5ee:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f5f0:	68fb      	ldr	r3, [r7, #12]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d00e      	beq.n	800f614 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	2b01      	cmp	r3, #1
 800f5fa:	d003      	beq.n	800f604 <create_chain+0xa6>
 800f5fc:	68fb      	ldr	r3, [r7, #12]
 800f5fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f602:	d101      	bne.n	800f608 <create_chain+0xaa>
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	e03e      	b.n	800f686 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f608:	69fa      	ldr	r2, [r7, #28]
 800f60a:	69bb      	ldr	r3, [r7, #24]
 800f60c:	429a      	cmp	r2, r3
 800f60e:	d1da      	bne.n	800f5c6 <create_chain+0x68>
 800f610:	2300      	movs	r3, #0
 800f612:	e038      	b.n	800f686 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f614:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f616:	f04f 32ff 	mov.w	r2, #4294967295
 800f61a:	69f9      	ldr	r1, [r7, #28]
 800f61c:	6938      	ldr	r0, [r7, #16]
 800f61e:	f7ff fe4d 	bl	800f2bc <put_fat>
 800f622:	4603      	mov	r3, r0
 800f624:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f626:	7dfb      	ldrb	r3, [r7, #23]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d109      	bne.n	800f640 <create_chain+0xe2>
 800f62c:	683b      	ldr	r3, [r7, #0]
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d006      	beq.n	800f640 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f632:	69fa      	ldr	r2, [r7, #28]
 800f634:	6839      	ldr	r1, [r7, #0]
 800f636:	6938      	ldr	r0, [r7, #16]
 800f638:	f7ff fe40 	bl	800f2bc <put_fat>
 800f63c:	4603      	mov	r3, r0
 800f63e:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f640:	7dfb      	ldrb	r3, [r7, #23]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d116      	bne.n	800f674 <create_chain+0x116>
		fs->last_clst = ncl;
 800f646:	693b      	ldr	r3, [r7, #16]
 800f648:	69fa      	ldr	r2, [r7, #28]
 800f64a:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f64c:	693b      	ldr	r3, [r7, #16]
 800f64e:	695a      	ldr	r2, [r3, #20]
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	699b      	ldr	r3, [r3, #24]
 800f654:	3b02      	subs	r3, #2
 800f656:	429a      	cmp	r2, r3
 800f658:	d804      	bhi.n	800f664 <create_chain+0x106>
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	695b      	ldr	r3, [r3, #20]
 800f65e:	1e5a      	subs	r2, r3, #1
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	791b      	ldrb	r3, [r3, #4]
 800f668:	f043 0301 	orr.w	r3, r3, #1
 800f66c:	b2da      	uxtb	r2, r3
 800f66e:	693b      	ldr	r3, [r7, #16]
 800f670:	711a      	strb	r2, [r3, #4]
 800f672:	e007      	b.n	800f684 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f674:	7dfb      	ldrb	r3, [r7, #23]
 800f676:	2b01      	cmp	r3, #1
 800f678:	d102      	bne.n	800f680 <create_chain+0x122>
 800f67a:	f04f 33ff 	mov.w	r3, #4294967295
 800f67e:	e000      	b.n	800f682 <create_chain+0x124>
 800f680:	2301      	movs	r3, #1
 800f682:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f684:	69fb      	ldr	r3, [r7, #28]
}
 800f686:	4618      	mov	r0, r3
 800f688:	3720      	adds	r7, #32
 800f68a:	46bd      	mov	sp, r7
 800f68c:	bd80      	pop	{r7, pc}

0800f68e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f68e:	b480      	push	{r7}
 800f690:	b087      	sub	sp, #28
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]
 800f696:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6a2:	3304      	adds	r3, #4
 800f6a4:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	0a5b      	lsrs	r3, r3, #9
 800f6aa:	68fa      	ldr	r2, [r7, #12]
 800f6ac:	8952      	ldrh	r2, [r2, #10]
 800f6ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800f6b2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	1d1a      	adds	r2, r3, #4
 800f6b8:	613a      	str	r2, [r7, #16]
 800f6ba:	681b      	ldr	r3, [r3, #0]
 800f6bc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f6be:	68bb      	ldr	r3, [r7, #8]
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d101      	bne.n	800f6c8 <clmt_clust+0x3a>
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	e010      	b.n	800f6ea <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800f6c8:	697a      	ldr	r2, [r7, #20]
 800f6ca:	68bb      	ldr	r3, [r7, #8]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d307      	bcc.n	800f6e0 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800f6d0:	697a      	ldr	r2, [r7, #20]
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	1ad3      	subs	r3, r2, r3
 800f6d6:	617b      	str	r3, [r7, #20]
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	3304      	adds	r3, #4
 800f6dc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f6de:	e7e9      	b.n	800f6b4 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800f6e0:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	681a      	ldr	r2, [r3, #0]
 800f6e6:	697b      	ldr	r3, [r7, #20]
 800f6e8:	4413      	add	r3, r2
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	371c      	adds	r7, #28
 800f6ee:	46bd      	mov	sp, r7
 800f6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f4:	4770      	bx	lr

0800f6f6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f6f6:	b580      	push	{r7, lr}
 800f6f8:	b086      	sub	sp, #24
 800f6fa:	af00      	add	r7, sp, #0
 800f6fc:	6078      	str	r0, [r7, #4]
 800f6fe:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f706:	683b      	ldr	r3, [r7, #0]
 800f708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f70c:	d204      	bcs.n	800f718 <dir_sdi+0x22>
 800f70e:	683b      	ldr	r3, [r7, #0]
 800f710:	f003 031f 	and.w	r3, r3, #31
 800f714:	2b00      	cmp	r3, #0
 800f716:	d001      	beq.n	800f71c <dir_sdi+0x26>
		return FR_INT_ERR;
 800f718:	2302      	movs	r3, #2
 800f71a:	e063      	b.n	800f7e4 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	683a      	ldr	r2, [r7, #0]
 800f720:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	689b      	ldr	r3, [r3, #8]
 800f726:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f728:	697b      	ldr	r3, [r7, #20]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d106      	bne.n	800f73c <dir_sdi+0x46>
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	781b      	ldrb	r3, [r3, #0]
 800f732:	2b02      	cmp	r3, #2
 800f734:	d902      	bls.n	800f73c <dir_sdi+0x46>
		clst = fs->dirbase;
 800f736:	693b      	ldr	r3, [r7, #16]
 800f738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f73a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f73c:	697b      	ldr	r3, [r7, #20]
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d10c      	bne.n	800f75c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	095b      	lsrs	r3, r3, #5
 800f746:	693a      	ldr	r2, [r7, #16]
 800f748:	8912      	ldrh	r2, [r2, #8]
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d301      	bcc.n	800f752 <dir_sdi+0x5c>
 800f74e:	2302      	movs	r3, #2
 800f750:	e048      	b.n	800f7e4 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800f752:	693b      	ldr	r3, [r7, #16]
 800f754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	61da      	str	r2, [r3, #28]
 800f75a:	e029      	b.n	800f7b0 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	895b      	ldrh	r3, [r3, #10]
 800f760:	025b      	lsls	r3, r3, #9
 800f762:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f764:	e019      	b.n	800f79a <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	6979      	ldr	r1, [r7, #20]
 800f76a:	4618      	mov	r0, r3
 800f76c:	f7ff fcfe 	bl	800f16c <get_fat>
 800f770:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f778:	d101      	bne.n	800f77e <dir_sdi+0x88>
 800f77a:	2301      	movs	r3, #1
 800f77c:	e032      	b.n	800f7e4 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f77e:	697b      	ldr	r3, [r7, #20]
 800f780:	2b01      	cmp	r3, #1
 800f782:	d904      	bls.n	800f78e <dir_sdi+0x98>
 800f784:	693b      	ldr	r3, [r7, #16]
 800f786:	699b      	ldr	r3, [r3, #24]
 800f788:	697a      	ldr	r2, [r7, #20]
 800f78a:	429a      	cmp	r2, r3
 800f78c:	d301      	bcc.n	800f792 <dir_sdi+0x9c>
 800f78e:	2302      	movs	r3, #2
 800f790:	e028      	b.n	800f7e4 <dir_sdi+0xee>
			ofs -= csz;
 800f792:	683a      	ldr	r2, [r7, #0]
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	1ad3      	subs	r3, r2, r3
 800f798:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f79a:	683a      	ldr	r2, [r7, #0]
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	429a      	cmp	r2, r3
 800f7a0:	d2e1      	bcs.n	800f766 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800f7a2:	6979      	ldr	r1, [r7, #20]
 800f7a4:	6938      	ldr	r0, [r7, #16]
 800f7a6:	f7ff fcc2 	bl	800f12e <clust2sect>
 800f7aa:	4602      	mov	r2, r0
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	697a      	ldr	r2, [r7, #20]
 800f7b4:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	69db      	ldr	r3, [r3, #28]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d101      	bne.n	800f7c2 <dir_sdi+0xcc>
 800f7be:	2302      	movs	r3, #2
 800f7c0:	e010      	b.n	800f7e4 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	69da      	ldr	r2, [r3, #28]
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	0a5b      	lsrs	r3, r3, #9
 800f7ca:	441a      	add	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f7d0:	693b      	ldr	r3, [r7, #16]
 800f7d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f7d6:	683b      	ldr	r3, [r7, #0]
 800f7d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7dc:	441a      	add	r2, r3
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f7e2:	2300      	movs	r3, #0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3718      	adds	r7, #24
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b086      	sub	sp, #24
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	695b      	ldr	r3, [r3, #20]
 800f800:	3320      	adds	r3, #32
 800f802:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	69db      	ldr	r3, [r3, #28]
 800f808:	2b00      	cmp	r3, #0
 800f80a:	d003      	beq.n	800f814 <dir_next+0x28>
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f812:	d301      	bcc.n	800f818 <dir_next+0x2c>
 800f814:	2304      	movs	r3, #4
 800f816:	e0aa      	b.n	800f96e <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f818:	68bb      	ldr	r3, [r7, #8]
 800f81a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f040 8098 	bne.w	800f954 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	69db      	ldr	r3, [r3, #28]
 800f828:	1c5a      	adds	r2, r3, #1
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	699b      	ldr	r3, [r3, #24]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d10b      	bne.n	800f84e <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f836:	68bb      	ldr	r3, [r7, #8]
 800f838:	095b      	lsrs	r3, r3, #5
 800f83a:	68fa      	ldr	r2, [r7, #12]
 800f83c:	8912      	ldrh	r2, [r2, #8]
 800f83e:	4293      	cmp	r3, r2
 800f840:	f0c0 8088 	bcc.w	800f954 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	2200      	movs	r2, #0
 800f848:	61da      	str	r2, [r3, #28]
 800f84a:	2304      	movs	r3, #4
 800f84c:	e08f      	b.n	800f96e <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	0a5b      	lsrs	r3, r3, #9
 800f852:	68fa      	ldr	r2, [r7, #12]
 800f854:	8952      	ldrh	r2, [r2, #10]
 800f856:	3a01      	subs	r2, #1
 800f858:	4013      	ands	r3, r2
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d17a      	bne.n	800f954 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f85e:	687a      	ldr	r2, [r7, #4]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	699b      	ldr	r3, [r3, #24]
 800f864:	4619      	mov	r1, r3
 800f866:	4610      	mov	r0, r2
 800f868:	f7ff fc80 	bl	800f16c <get_fat>
 800f86c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	2b01      	cmp	r3, #1
 800f872:	d801      	bhi.n	800f878 <dir_next+0x8c>
 800f874:	2302      	movs	r3, #2
 800f876:	e07a      	b.n	800f96e <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f878:	697b      	ldr	r3, [r7, #20]
 800f87a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f87e:	d101      	bne.n	800f884 <dir_next+0x98>
 800f880:	2301      	movs	r3, #1
 800f882:	e074      	b.n	800f96e <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	699b      	ldr	r3, [r3, #24]
 800f888:	697a      	ldr	r2, [r7, #20]
 800f88a:	429a      	cmp	r2, r3
 800f88c:	d358      	bcc.n	800f940 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	2b00      	cmp	r3, #0
 800f892:	d104      	bne.n	800f89e <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	2200      	movs	r2, #0
 800f898:	61da      	str	r2, [r3, #28]
 800f89a:	2304      	movs	r3, #4
 800f89c:	e067      	b.n	800f96e <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f89e:	687a      	ldr	r2, [r7, #4]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	699b      	ldr	r3, [r3, #24]
 800f8a4:	4619      	mov	r1, r3
 800f8a6:	4610      	mov	r0, r2
 800f8a8:	f7ff fe59 	bl	800f55e <create_chain>
 800f8ac:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f8ae:	697b      	ldr	r3, [r7, #20]
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d101      	bne.n	800f8b8 <dir_next+0xcc>
 800f8b4:	2307      	movs	r3, #7
 800f8b6:	e05a      	b.n	800f96e <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	2b01      	cmp	r3, #1
 800f8bc:	d101      	bne.n	800f8c2 <dir_next+0xd6>
 800f8be:	2302      	movs	r3, #2
 800f8c0:	e055      	b.n	800f96e <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f8c2:	697b      	ldr	r3, [r7, #20]
 800f8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8c8:	d101      	bne.n	800f8ce <dir_next+0xe2>
 800f8ca:	2301      	movs	r3, #1
 800f8cc:	e04f      	b.n	800f96e <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f8ce:	68f8      	ldr	r0, [r7, #12]
 800f8d0:	f7ff fbbc 	bl	800f04c <sync_window>
 800f8d4:	4603      	mov	r3, r0
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d001      	beq.n	800f8de <dir_next+0xf2>
 800f8da:	2301      	movs	r3, #1
 800f8dc:	e047      	b.n	800f96e <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	3334      	adds	r3, #52	; 0x34
 800f8e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f8e6:	2100      	movs	r1, #0
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7ff f9f0 	bl	800ecce <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	613b      	str	r3, [r7, #16]
 800f8f2:	6979      	ldr	r1, [r7, #20]
 800f8f4:	68f8      	ldr	r0, [r7, #12]
 800f8f6:	f7ff fc1a 	bl	800f12e <clust2sect>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	631a      	str	r2, [r3, #48]	; 0x30
 800f900:	e012      	b.n	800f928 <dir_next+0x13c>
						fs->wflag = 1;
 800f902:	68fb      	ldr	r3, [r7, #12]
 800f904:	2201      	movs	r2, #1
 800f906:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	f7ff fb9f 	bl	800f04c <sync_window>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d001      	beq.n	800f918 <dir_next+0x12c>
 800f914:	2301      	movs	r3, #1
 800f916:	e02a      	b.n	800f96e <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	3301      	adds	r3, #1
 800f91c:	613b      	str	r3, [r7, #16]
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f922:	1c5a      	adds	r2, r3, #1
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	631a      	str	r2, [r3, #48]	; 0x30
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	895b      	ldrh	r3, [r3, #10]
 800f92c:	461a      	mov	r2, r3
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	4293      	cmp	r3, r2
 800f932:	d3e6      	bcc.n	800f902 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f938:	693b      	ldr	r3, [r7, #16]
 800f93a:	1ad2      	subs	r2, r2, r3
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	697a      	ldr	r2, [r7, #20]
 800f944:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f946:	6979      	ldr	r1, [r7, #20]
 800f948:	68f8      	ldr	r0, [r7, #12]
 800f94a:	f7ff fbf0 	bl	800f12e <clust2sect>
 800f94e:	4602      	mov	r2, r0
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	68ba      	ldr	r2, [r7, #8]
 800f958:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f966:	441a      	add	r2, r3
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f96c:	2300      	movs	r3, #0
}
 800f96e:	4618      	mov	r0, r3
 800f970:	3718      	adds	r7, #24
 800f972:	46bd      	mov	sp, r7
 800f974:	bd80      	pop	{r7, pc}

0800f976 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f976:	b580      	push	{r7, lr}
 800f978:	b086      	sub	sp, #24
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
 800f97e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	681b      	ldr	r3, [r3, #0]
 800f984:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f986:	2100      	movs	r1, #0
 800f988:	6878      	ldr	r0, [r7, #4]
 800f98a:	f7ff feb4 	bl	800f6f6 <dir_sdi>
 800f98e:	4603      	mov	r3, r0
 800f990:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f992:	7dfb      	ldrb	r3, [r7, #23]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d12b      	bne.n	800f9f0 <dir_alloc+0x7a>
		n = 0;
 800f998:	2300      	movs	r3, #0
 800f99a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	69db      	ldr	r3, [r3, #28]
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	68f8      	ldr	r0, [r7, #12]
 800f9a4:	f7ff fb96 	bl	800f0d4 <move_window>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f9ac:	7dfb      	ldrb	r3, [r7, #23]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d11d      	bne.n	800f9ee <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6a1b      	ldr	r3, [r3, #32]
 800f9b6:	781b      	ldrb	r3, [r3, #0]
 800f9b8:	2be5      	cmp	r3, #229	; 0xe5
 800f9ba:	d004      	beq.n	800f9c6 <dir_alloc+0x50>
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	6a1b      	ldr	r3, [r3, #32]
 800f9c0:	781b      	ldrb	r3, [r3, #0]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d107      	bne.n	800f9d6 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f9c6:	693b      	ldr	r3, [r7, #16]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	613b      	str	r3, [r7, #16]
 800f9cc:	693a      	ldr	r2, [r7, #16]
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	429a      	cmp	r2, r3
 800f9d2:	d102      	bne.n	800f9da <dir_alloc+0x64>
 800f9d4:	e00c      	b.n	800f9f0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f9d6:	2300      	movs	r3, #0
 800f9d8:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f9da:	2101      	movs	r1, #1
 800f9dc:	6878      	ldr	r0, [r7, #4]
 800f9de:	f7ff ff05 	bl	800f7ec <dir_next>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f9e6:	7dfb      	ldrb	r3, [r7, #23]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	d0d7      	beq.n	800f99c <dir_alloc+0x26>
 800f9ec:	e000      	b.n	800f9f0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f9ee:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f9f0:	7dfb      	ldrb	r3, [r7, #23]
 800f9f2:	2b04      	cmp	r3, #4
 800f9f4:	d101      	bne.n	800f9fa <dir_alloc+0x84>
 800f9f6:	2307      	movs	r3, #7
 800f9f8:	75fb      	strb	r3, [r7, #23]
	return res;
 800f9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	3718      	adds	r7, #24
 800fa00:	46bd      	mov	sp, r7
 800fa02:	bd80      	pop	{r7, pc}

0800fa04 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800fa0e:	683b      	ldr	r3, [r7, #0]
 800fa10:	331a      	adds	r3, #26
 800fa12:	4618      	mov	r0, r3
 800fa14:	f7ff f8b8 	bl	800eb88 <ld_word>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	781b      	ldrb	r3, [r3, #0]
 800fa20:	2b03      	cmp	r3, #3
 800fa22:	d109      	bne.n	800fa38 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	3314      	adds	r3, #20
 800fa28:	4618      	mov	r0, r3
 800fa2a:	f7ff f8ad 	bl	800eb88 <ld_word>
 800fa2e:	4603      	mov	r3, r0
 800fa30:	041b      	lsls	r3, r3, #16
 800fa32:	68fa      	ldr	r2, [r7, #12]
 800fa34:	4313      	orrs	r3, r2
 800fa36:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800fa38:	68fb      	ldr	r3, [r7, #12]
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3710      	adds	r7, #16
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}

0800fa42 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800fa42:	b580      	push	{r7, lr}
 800fa44:	b084      	sub	sp, #16
 800fa46:	af00      	add	r7, sp, #0
 800fa48:	60f8      	str	r0, [r7, #12]
 800fa4a:	60b9      	str	r1, [r7, #8]
 800fa4c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	331a      	adds	r3, #26
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	b292      	uxth	r2, r2
 800fa56:	4611      	mov	r1, r2
 800fa58:	4618      	mov	r0, r3
 800fa5a:	f7ff f8d0 	bl	800ebfe <st_word>
	if (fs->fs_type == FS_FAT32) {
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	781b      	ldrb	r3, [r3, #0]
 800fa62:	2b03      	cmp	r3, #3
 800fa64:	d109      	bne.n	800fa7a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	f103 0214 	add.w	r2, r3, #20
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	0c1b      	lsrs	r3, r3, #16
 800fa70:	b29b      	uxth	r3, r3
 800fa72:	4619      	mov	r1, r3
 800fa74:	4610      	mov	r0, r2
 800fa76:	f7ff f8c2 	bl	800ebfe <st_word>
	}
}
 800fa7a:	bf00      	nop
 800fa7c:	3710      	adds	r7, #16
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800fa82:	b580      	push	{r7, lr}
 800fa84:	b086      	sub	sp, #24
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800fa90:	2100      	movs	r1, #0
 800fa92:	6878      	ldr	r0, [r7, #4]
 800fa94:	f7ff fe2f 	bl	800f6f6 <dir_sdi>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800fa9c:	7dfb      	ldrb	r3, [r7, #23]
 800fa9e:	2b00      	cmp	r3, #0
 800faa0:	d001      	beq.n	800faa6 <dir_find+0x24>
 800faa2:	7dfb      	ldrb	r3, [r7, #23]
 800faa4:	e03e      	b.n	800fb24 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	69db      	ldr	r3, [r3, #28]
 800faaa:	4619      	mov	r1, r3
 800faac:	6938      	ldr	r0, [r7, #16]
 800faae:	f7ff fb11 	bl	800f0d4 <move_window>
 800fab2:	4603      	mov	r3, r0
 800fab4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fab6:	7dfb      	ldrb	r3, [r7, #23]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d12f      	bne.n	800fb1c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6a1b      	ldr	r3, [r3, #32]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fac4:	7bfb      	ldrb	r3, [r7, #15]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d102      	bne.n	800fad0 <dir_find+0x4e>
 800faca:	2304      	movs	r3, #4
 800facc:	75fb      	strb	r3, [r7, #23]
 800face:	e028      	b.n	800fb22 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	6a1b      	ldr	r3, [r3, #32]
 800fad4:	330b      	adds	r3, #11
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fadc:	b2da      	uxtb	r2, r3
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	6a1b      	ldr	r3, [r3, #32]
 800fae6:	330b      	adds	r3, #11
 800fae8:	781b      	ldrb	r3, [r3, #0]
 800faea:	f003 0308 	and.w	r3, r3, #8
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d10a      	bne.n	800fb08 <dir_find+0x86>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a18      	ldr	r0, [r3, #32]
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	3324      	adds	r3, #36	; 0x24
 800fafa:	220b      	movs	r2, #11
 800fafc:	4619      	mov	r1, r3
 800fafe:	f7ff f901 	bl	800ed04 <mem_cmp>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00b      	beq.n	800fb20 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb08:	2100      	movs	r1, #0
 800fb0a:	6878      	ldr	r0, [r7, #4]
 800fb0c:	f7ff fe6e 	bl	800f7ec <dir_next>
 800fb10:	4603      	mov	r3, r0
 800fb12:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fb14:	7dfb      	ldrb	r3, [r7, #23]
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d0c5      	beq.n	800faa6 <dir_find+0x24>
 800fb1a:	e002      	b.n	800fb22 <dir_find+0xa0>
		if (res != FR_OK) break;
 800fb1c:	bf00      	nop
 800fb1e:	e000      	b.n	800fb22 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800fb20:	bf00      	nop

	return res;
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb24:	4618      	mov	r0, r3
 800fb26:	3718      	adds	r7, #24
 800fb28:	46bd      	mov	sp, r7
 800fb2a:	bd80      	pop	{r7, pc}

0800fb2c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fb2c:	b580      	push	{r7, lr}
 800fb2e:	b084      	sub	sp, #16
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	681b      	ldr	r3, [r3, #0]
 800fb38:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800fb3a:	2101      	movs	r1, #1
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f7ff ff1a 	bl	800f976 <dir_alloc>
 800fb42:	4603      	mov	r3, r0
 800fb44:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fb46:	7bfb      	ldrb	r3, [r7, #15]
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d11c      	bne.n	800fb86 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	69db      	ldr	r3, [r3, #28]
 800fb50:	4619      	mov	r1, r3
 800fb52:	68b8      	ldr	r0, [r7, #8]
 800fb54:	f7ff fabe 	bl	800f0d4 <move_window>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fb5c:	7bfb      	ldrb	r3, [r7, #15]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d111      	bne.n	800fb86 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	2220      	movs	r2, #32
 800fb68:	2100      	movs	r1, #0
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7ff f8af 	bl	800ecce <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6a18      	ldr	r0, [r3, #32]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	3324      	adds	r3, #36	; 0x24
 800fb78:	220b      	movs	r2, #11
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	f7ff f886 	bl	800ec8c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800fb80:	68bb      	ldr	r3, [r7, #8]
 800fb82:	2201      	movs	r2, #1
 800fb84:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fb86:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb88:	4618      	mov	r0, r3
 800fb8a:	3710      	adds	r7, #16
 800fb8c:	46bd      	mov	sp, r7
 800fb8e:	bd80      	pop	{r7, pc}

0800fb90 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b088      	sub	sp, #32
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	60fb      	str	r3, [r7, #12]
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	3324      	adds	r3, #36	; 0x24
 800fba4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800fba6:	220b      	movs	r2, #11
 800fba8:	2120      	movs	r1, #32
 800fbaa:	68b8      	ldr	r0, [r7, #8]
 800fbac:	f7ff f88f 	bl	800ecce <mem_set>
	si = i = 0; ni = 8;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	613b      	str	r3, [r7, #16]
 800fbb4:	693b      	ldr	r3, [r7, #16]
 800fbb6:	61fb      	str	r3, [r7, #28]
 800fbb8:	2308      	movs	r3, #8
 800fbba:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fbbc:	69fb      	ldr	r3, [r7, #28]
 800fbbe:	1c5a      	adds	r2, r3, #1
 800fbc0:	61fa      	str	r2, [r7, #28]
 800fbc2:	68fa      	ldr	r2, [r7, #12]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fbca:	7efb      	ldrb	r3, [r7, #27]
 800fbcc:	2b20      	cmp	r3, #32
 800fbce:	d94e      	bls.n	800fc6e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fbd0:	7efb      	ldrb	r3, [r7, #27]
 800fbd2:	2b2f      	cmp	r3, #47	; 0x2f
 800fbd4:	d006      	beq.n	800fbe4 <create_name+0x54>
 800fbd6:	7efb      	ldrb	r3, [r7, #27]
 800fbd8:	2b5c      	cmp	r3, #92	; 0x5c
 800fbda:	d110      	bne.n	800fbfe <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fbdc:	e002      	b.n	800fbe4 <create_name+0x54>
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	61fb      	str	r3, [r7, #28]
 800fbe4:	68fa      	ldr	r2, [r7, #12]
 800fbe6:	69fb      	ldr	r3, [r7, #28]
 800fbe8:	4413      	add	r3, r2
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	2b2f      	cmp	r3, #47	; 0x2f
 800fbee:	d0f6      	beq.n	800fbde <create_name+0x4e>
 800fbf0:	68fa      	ldr	r2, [r7, #12]
 800fbf2:	69fb      	ldr	r3, [r7, #28]
 800fbf4:	4413      	add	r3, r2
 800fbf6:	781b      	ldrb	r3, [r3, #0]
 800fbf8:	2b5c      	cmp	r3, #92	; 0x5c
 800fbfa:	d0f0      	beq.n	800fbde <create_name+0x4e>
			break;
 800fbfc:	e038      	b.n	800fc70 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fbfe:	7efb      	ldrb	r3, [r7, #27]
 800fc00:	2b2e      	cmp	r3, #46	; 0x2e
 800fc02:	d003      	beq.n	800fc0c <create_name+0x7c>
 800fc04:	693a      	ldr	r2, [r7, #16]
 800fc06:	697b      	ldr	r3, [r7, #20]
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d30c      	bcc.n	800fc26 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fc0c:	697b      	ldr	r3, [r7, #20]
 800fc0e:	2b0b      	cmp	r3, #11
 800fc10:	d002      	beq.n	800fc18 <create_name+0x88>
 800fc12:	7efb      	ldrb	r3, [r7, #27]
 800fc14:	2b2e      	cmp	r3, #46	; 0x2e
 800fc16:	d001      	beq.n	800fc1c <create_name+0x8c>
 800fc18:	2306      	movs	r3, #6
 800fc1a:	e044      	b.n	800fca6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fc1c:	2308      	movs	r3, #8
 800fc1e:	613b      	str	r3, [r7, #16]
 800fc20:	230b      	movs	r3, #11
 800fc22:	617b      	str	r3, [r7, #20]
			continue;
 800fc24:	e022      	b.n	800fc6c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fc26:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	da04      	bge.n	800fc38 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fc2e:	7efb      	ldrb	r3, [r7, #27]
 800fc30:	3b80      	subs	r3, #128	; 0x80
 800fc32:	4a1f      	ldr	r2, [pc, #124]	; (800fcb0 <create_name+0x120>)
 800fc34:	5cd3      	ldrb	r3, [r2, r3]
 800fc36:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fc38:	7efb      	ldrb	r3, [r7, #27]
 800fc3a:	4619      	mov	r1, r3
 800fc3c:	481d      	ldr	r0, [pc, #116]	; (800fcb4 <create_name+0x124>)
 800fc3e:	f7ff f888 	bl	800ed52 <chk_chr>
 800fc42:	4603      	mov	r3, r0
 800fc44:	2b00      	cmp	r3, #0
 800fc46:	d001      	beq.n	800fc4c <create_name+0xbc>
 800fc48:	2306      	movs	r3, #6
 800fc4a:	e02c      	b.n	800fca6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fc4c:	7efb      	ldrb	r3, [r7, #27]
 800fc4e:	2b60      	cmp	r3, #96	; 0x60
 800fc50:	d905      	bls.n	800fc5e <create_name+0xce>
 800fc52:	7efb      	ldrb	r3, [r7, #27]
 800fc54:	2b7a      	cmp	r3, #122	; 0x7a
 800fc56:	d802      	bhi.n	800fc5e <create_name+0xce>
 800fc58:	7efb      	ldrb	r3, [r7, #27]
 800fc5a:	3b20      	subs	r3, #32
 800fc5c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fc5e:	693b      	ldr	r3, [r7, #16]
 800fc60:	1c5a      	adds	r2, r3, #1
 800fc62:	613a      	str	r2, [r7, #16]
 800fc64:	68ba      	ldr	r2, [r7, #8]
 800fc66:	4413      	add	r3, r2
 800fc68:	7efa      	ldrb	r2, [r7, #27]
 800fc6a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fc6c:	e7a6      	b.n	800fbbc <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fc6e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fc70:	68fa      	ldr	r2, [r7, #12]
 800fc72:	69fb      	ldr	r3, [r7, #28]
 800fc74:	441a      	add	r2, r3
 800fc76:	683b      	ldr	r3, [r7, #0]
 800fc78:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d101      	bne.n	800fc84 <create_name+0xf4>
 800fc80:	2306      	movs	r3, #6
 800fc82:	e010      	b.n	800fca6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	781b      	ldrb	r3, [r3, #0]
 800fc88:	2be5      	cmp	r3, #229	; 0xe5
 800fc8a:	d102      	bne.n	800fc92 <create_name+0x102>
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	2205      	movs	r2, #5
 800fc90:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fc92:	7efb      	ldrb	r3, [r7, #27]
 800fc94:	2b20      	cmp	r3, #32
 800fc96:	d801      	bhi.n	800fc9c <create_name+0x10c>
 800fc98:	2204      	movs	r2, #4
 800fc9a:	e000      	b.n	800fc9e <create_name+0x10e>
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	68bb      	ldr	r3, [r7, #8]
 800fca0:	330b      	adds	r3, #11
 800fca2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fca4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fca6:	4618      	mov	r0, r3
 800fca8:	3720      	adds	r7, #32
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd80      	pop	{r7, pc}
 800fcae:	bf00      	nop
 800fcb0:	08018c80 	.word	0x08018c80
 800fcb4:	0801606c 	.word	0x0801606c

0800fcb8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
 800fcc0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fcc6:	693b      	ldr	r3, [r7, #16]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fccc:	e002      	b.n	800fcd4 <follow_path+0x1c>
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	3301      	adds	r3, #1
 800fcd2:	603b      	str	r3, [r7, #0]
 800fcd4:	683b      	ldr	r3, [r7, #0]
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	2b2f      	cmp	r3, #47	; 0x2f
 800fcda:	d0f8      	beq.n	800fcce <follow_path+0x16>
 800fcdc:	683b      	ldr	r3, [r7, #0]
 800fcde:	781b      	ldrb	r3, [r3, #0]
 800fce0:	2b5c      	cmp	r3, #92	; 0x5c
 800fce2:	d0f4      	beq.n	800fcce <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fce4:	693b      	ldr	r3, [r7, #16]
 800fce6:	2200      	movs	r2, #0
 800fce8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fcea:	683b      	ldr	r3, [r7, #0]
 800fcec:	781b      	ldrb	r3, [r3, #0]
 800fcee:	2b1f      	cmp	r3, #31
 800fcf0:	d80a      	bhi.n	800fd08 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	2280      	movs	r2, #128	; 0x80
 800fcf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	6878      	ldr	r0, [r7, #4]
 800fcfe:	f7ff fcfa 	bl	800f6f6 <dir_sdi>
 800fd02:	4603      	mov	r3, r0
 800fd04:	75fb      	strb	r3, [r7, #23]
 800fd06:	e043      	b.n	800fd90 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fd08:	463b      	mov	r3, r7
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	6878      	ldr	r0, [r7, #4]
 800fd0e:	f7ff ff3f 	bl	800fb90 <create_name>
 800fd12:	4603      	mov	r3, r0
 800fd14:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fd16:	7dfb      	ldrb	r3, [r7, #23]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d134      	bne.n	800fd86 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fd1c:	6878      	ldr	r0, [r7, #4]
 800fd1e:	f7ff feb0 	bl	800fa82 <dir_find>
 800fd22:	4603      	mov	r3, r0
 800fd24:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fd2c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fd2e:	7dfb      	ldrb	r3, [r7, #23]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d00a      	beq.n	800fd4a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fd34:	7dfb      	ldrb	r3, [r7, #23]
 800fd36:	2b04      	cmp	r3, #4
 800fd38:	d127      	bne.n	800fd8a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fd3a:	7afb      	ldrb	r3, [r7, #11]
 800fd3c:	f003 0304 	and.w	r3, r3, #4
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d122      	bne.n	800fd8a <follow_path+0xd2>
 800fd44:	2305      	movs	r3, #5
 800fd46:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fd48:	e01f      	b.n	800fd8a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fd4a:	7afb      	ldrb	r3, [r7, #11]
 800fd4c:	f003 0304 	and.w	r3, r3, #4
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d11c      	bne.n	800fd8e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	799b      	ldrb	r3, [r3, #6]
 800fd58:	f003 0310 	and.w	r3, r3, #16
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d102      	bne.n	800fd66 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fd60:	2305      	movs	r3, #5
 800fd62:	75fb      	strb	r3, [r7, #23]
 800fd64:	e014      	b.n	800fd90 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	695b      	ldr	r3, [r3, #20]
 800fd70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fd74:	4413      	add	r3, r2
 800fd76:	4619      	mov	r1, r3
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	f7ff fe43 	bl	800fa04 <ld_clust>
 800fd7e:	4602      	mov	r2, r0
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fd84:	e7c0      	b.n	800fd08 <follow_path+0x50>
			if (res != FR_OK) break;
 800fd86:	bf00      	nop
 800fd88:	e002      	b.n	800fd90 <follow_path+0xd8>
				break;
 800fd8a:	bf00      	nop
 800fd8c:	e000      	b.n	800fd90 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fd8e:	bf00      	nop
			}
		}
	}

	return res;
 800fd90:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3718      	adds	r7, #24
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}

0800fd9a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fd9a:	b480      	push	{r7}
 800fd9c:	b087      	sub	sp, #28
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fda2:	f04f 33ff 	mov.w	r3, #4294967295
 800fda6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d031      	beq.n	800fe14 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	617b      	str	r3, [r7, #20]
 800fdb6:	e002      	b.n	800fdbe <get_ldnumber+0x24>
 800fdb8:	697b      	ldr	r3, [r7, #20]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	617b      	str	r3, [r7, #20]
 800fdbe:	697b      	ldr	r3, [r7, #20]
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	2b20      	cmp	r3, #32
 800fdc4:	d903      	bls.n	800fdce <get_ldnumber+0x34>
 800fdc6:	697b      	ldr	r3, [r7, #20]
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	2b3a      	cmp	r3, #58	; 0x3a
 800fdcc:	d1f4      	bne.n	800fdb8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fdce:	697b      	ldr	r3, [r7, #20]
 800fdd0:	781b      	ldrb	r3, [r3, #0]
 800fdd2:	2b3a      	cmp	r3, #58	; 0x3a
 800fdd4:	d11c      	bne.n	800fe10 <get_ldnumber+0x76>
			tp = *path;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	1c5a      	adds	r2, r3, #1
 800fde0:	60fa      	str	r2, [r7, #12]
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	3b30      	subs	r3, #48	; 0x30
 800fde6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fde8:	68bb      	ldr	r3, [r7, #8]
 800fdea:	2b09      	cmp	r3, #9
 800fdec:	d80e      	bhi.n	800fe0c <get_ldnumber+0x72>
 800fdee:	68fa      	ldr	r2, [r7, #12]
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	429a      	cmp	r2, r3
 800fdf4:	d10a      	bne.n	800fe0c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d107      	bne.n	800fe0c <get_ldnumber+0x72>
					vol = (int)i;
 800fdfc:	68bb      	ldr	r3, [r7, #8]
 800fdfe:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fe00:	697b      	ldr	r3, [r7, #20]
 800fe02:	3301      	adds	r3, #1
 800fe04:	617b      	str	r3, [r7, #20]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	697a      	ldr	r2, [r7, #20]
 800fe0a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	e002      	b.n	800fe16 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fe10:	2300      	movs	r3, #0
 800fe12:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fe14:	693b      	ldr	r3, [r7, #16]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	371c      	adds	r7, #28
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe20:	4770      	bx	lr
	...

0800fe24 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	6078      	str	r0, [r7, #4]
 800fe2c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	2200      	movs	r2, #0
 800fe32:	70da      	strb	r2, [r3, #3]
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f04f 32ff 	mov.w	r2, #4294967295
 800fe3a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fe3c:	6839      	ldr	r1, [r7, #0]
 800fe3e:	6878      	ldr	r0, [r7, #4]
 800fe40:	f7ff f948 	bl	800f0d4 <move_window>
 800fe44:	4603      	mov	r3, r0
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d001      	beq.n	800fe4e <check_fs+0x2a>
 800fe4a:	2304      	movs	r3, #4
 800fe4c:	e038      	b.n	800fec0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	3334      	adds	r3, #52	; 0x34
 800fe52:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fe56:	4618      	mov	r0, r3
 800fe58:	f7fe fe96 	bl	800eb88 <ld_word>
 800fe5c:	4603      	mov	r3, r0
 800fe5e:	461a      	mov	r2, r3
 800fe60:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fe64:	429a      	cmp	r2, r3
 800fe66:	d001      	beq.n	800fe6c <check_fs+0x48>
 800fe68:	2303      	movs	r3, #3
 800fe6a:	e029      	b.n	800fec0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fe72:	2be9      	cmp	r3, #233	; 0xe9
 800fe74:	d009      	beq.n	800fe8a <check_fs+0x66>
 800fe76:	687b      	ldr	r3, [r7, #4]
 800fe78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fe7c:	2beb      	cmp	r3, #235	; 0xeb
 800fe7e:	d11e      	bne.n	800febe <check_fs+0x9a>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fe86:	2b90      	cmp	r3, #144	; 0x90
 800fe88:	d119      	bne.n	800febe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	3334      	adds	r3, #52	; 0x34
 800fe8e:	3336      	adds	r3, #54	; 0x36
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7fe fe91 	bl	800ebb8 <ld_dword>
 800fe96:	4603      	mov	r3, r0
 800fe98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fe9c:	4a0a      	ldr	r2, [pc, #40]	; (800fec8 <check_fs+0xa4>)
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	d101      	bne.n	800fea6 <check_fs+0x82>
 800fea2:	2300      	movs	r3, #0
 800fea4:	e00c      	b.n	800fec0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	3334      	adds	r3, #52	; 0x34
 800feaa:	3352      	adds	r3, #82	; 0x52
 800feac:	4618      	mov	r0, r3
 800feae:	f7fe fe83 	bl	800ebb8 <ld_dword>
 800feb2:	4603      	mov	r3, r0
 800feb4:	4a05      	ldr	r2, [pc, #20]	; (800fecc <check_fs+0xa8>)
 800feb6:	4293      	cmp	r3, r2
 800feb8:	d101      	bne.n	800febe <check_fs+0x9a>
 800feba:	2300      	movs	r3, #0
 800febc:	e000      	b.n	800fec0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800febe:	2302      	movs	r3, #2
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3708      	adds	r7, #8
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}
 800fec8:	00544146 	.word	0x00544146
 800fecc:	33544146 	.word	0x33544146

0800fed0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fed0:	b580      	push	{r7, lr}
 800fed2:	b096      	sub	sp, #88	; 0x58
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	60f8      	str	r0, [r7, #12]
 800fed8:	60b9      	str	r1, [r7, #8]
 800feda:	4613      	mov	r3, r2
 800fedc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	2200      	movs	r2, #0
 800fee2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	f7ff ff58 	bl	800fd9a <get_ldnumber>
 800feea:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800feec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feee:	2b00      	cmp	r3, #0
 800fef0:	da01      	bge.n	800fef6 <find_volume+0x26>
 800fef2:	230b      	movs	r3, #11
 800fef4:	e235      	b.n	8010362 <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fef6:	4aa5      	ldr	r2, [pc, #660]	; (801018c <find_volume+0x2bc>)
 800fef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fefa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fefe:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ff00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d101      	bne.n	800ff0a <find_volume+0x3a>
 800ff06:	230c      	movs	r3, #12
 800ff08:	e22b      	b.n	8010362 <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800ff0a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ff0c:	f7fe ff3c 	bl	800ed88 <lock_fs>
 800ff10:	4603      	mov	r3, r0
 800ff12:	2b00      	cmp	r3, #0
 800ff14:	d101      	bne.n	800ff1a <find_volume+0x4a>
 800ff16:	230f      	movs	r3, #15
 800ff18:	e223      	b.n	8010362 <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff1e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ff20:	79fb      	ldrb	r3, [r7, #7]
 800ff22:	f023 0301 	bic.w	r3, r3, #1
 800ff26:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ff28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2a:	781b      	ldrb	r3, [r3, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d01a      	beq.n	800ff66 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ff30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff32:	785b      	ldrb	r3, [r3, #1]
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fe fda7 	bl	800ea88 <disk_status>
 800ff3a:	4603      	mov	r3, r0
 800ff3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ff40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff44:	f003 0301 	and.w	r3, r3, #1
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d10c      	bne.n	800ff66 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ff4c:	79fb      	ldrb	r3, [r7, #7]
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d007      	beq.n	800ff62 <find_volume+0x92>
 800ff52:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff56:	f003 0304 	and.w	r3, r3, #4
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d001      	beq.n	800ff62 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ff5e:	230a      	movs	r3, #10
 800ff60:	e1ff      	b.n	8010362 <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800ff62:	2300      	movs	r3, #0
 800ff64:	e1fd      	b.n	8010362 <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	2200      	movs	r2, #0
 800ff6a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ff6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff6e:	b2da      	uxtb	r2, r3
 800ff70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff72:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ff74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff76:	785b      	ldrb	r3, [r3, #1]
 800ff78:	4618      	mov	r0, r3
 800ff7a:	f7fe fd9f 	bl	800eabc <disk_initialize>
 800ff7e:	4603      	mov	r3, r0
 800ff80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ff84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff88:	f003 0301 	and.w	r3, r3, #1
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d001      	beq.n	800ff94 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ff90:	2303      	movs	r3, #3
 800ff92:	e1e6      	b.n	8010362 <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ff94:	79fb      	ldrb	r3, [r7, #7]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d007      	beq.n	800ffaa <find_volume+0xda>
 800ff9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff9e:	f003 0304 	and.w	r3, r3, #4
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d001      	beq.n	800ffaa <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ffa6:	230a      	movs	r3, #10
 800ffa8:	e1db      	b.n	8010362 <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ffaa:	2300      	movs	r3, #0
 800ffac:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ffae:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ffb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ffb2:	f7ff ff37 	bl	800fe24 <check_fs>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ffbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ffc0:	2b02      	cmp	r3, #2
 800ffc2:	d149      	bne.n	8010058 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	643b      	str	r3, [r7, #64]	; 0x40
 800ffc8:	e01e      	b.n	8010008 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ffca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffcc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ffd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ffd2:	011b      	lsls	r3, r3, #4
 800ffd4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ffd8:	4413      	add	r3, r2
 800ffda:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ffdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffde:	3304      	adds	r3, #4
 800ffe0:	781b      	ldrb	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d006      	beq.n	800fff4 <find_volume+0x124>
 800ffe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffe8:	3308      	adds	r3, #8
 800ffea:	4618      	mov	r0, r3
 800ffec:	f7fe fde4 	bl	800ebb8 <ld_dword>
 800fff0:	4602      	mov	r2, r0
 800fff2:	e000      	b.n	800fff6 <find_volume+0x126>
 800fff4:	2200      	movs	r2, #0
 800fff6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fff8:	009b      	lsls	r3, r3, #2
 800fffa:	3358      	adds	r3, #88	; 0x58
 800fffc:	443b      	add	r3, r7
 800fffe:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010004:	3301      	adds	r3, #1
 8010006:	643b      	str	r3, [r7, #64]	; 0x40
 8010008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801000a:	2b03      	cmp	r3, #3
 801000c:	d9dd      	bls.n	800ffca <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801000e:	2300      	movs	r3, #0
 8010010:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010012:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010014:	2b00      	cmp	r3, #0
 8010016:	d002      	beq.n	801001e <find_volume+0x14e>
 8010018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801001a:	3b01      	subs	r3, #1
 801001c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801001e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010020:	009b      	lsls	r3, r3, #2
 8010022:	3358      	adds	r3, #88	; 0x58
 8010024:	443b      	add	r3, r7
 8010026:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801002a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801002c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801002e:	2b00      	cmp	r3, #0
 8010030:	d005      	beq.n	801003e <find_volume+0x16e>
 8010032:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010034:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010036:	f7ff fef5 	bl	800fe24 <check_fs>
 801003a:	4603      	mov	r3, r0
 801003c:	e000      	b.n	8010040 <find_volume+0x170>
 801003e:	2303      	movs	r3, #3
 8010040:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010044:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010048:	2b01      	cmp	r3, #1
 801004a:	d905      	bls.n	8010058 <find_volume+0x188>
 801004c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801004e:	3301      	adds	r3, #1
 8010050:	643b      	str	r3, [r7, #64]	; 0x40
 8010052:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010054:	2b03      	cmp	r3, #3
 8010056:	d9e2      	bls.n	801001e <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010058:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801005c:	2b04      	cmp	r3, #4
 801005e:	d101      	bne.n	8010064 <find_volume+0x194>
 8010060:	2301      	movs	r3, #1
 8010062:	e17e      	b.n	8010362 <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010064:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010068:	2b01      	cmp	r3, #1
 801006a:	d901      	bls.n	8010070 <find_volume+0x1a0>
 801006c:	230d      	movs	r3, #13
 801006e:	e178      	b.n	8010362 <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010072:	3334      	adds	r3, #52	; 0x34
 8010074:	330b      	adds	r3, #11
 8010076:	4618      	mov	r0, r3
 8010078:	f7fe fd86 	bl	800eb88 <ld_word>
 801007c:	4603      	mov	r3, r0
 801007e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010082:	d001      	beq.n	8010088 <find_volume+0x1b8>
 8010084:	230d      	movs	r3, #13
 8010086:	e16c      	b.n	8010362 <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008a:	3334      	adds	r3, #52	; 0x34
 801008c:	3316      	adds	r3, #22
 801008e:	4618      	mov	r0, r3
 8010090:	f7fe fd7a 	bl	800eb88 <ld_word>
 8010094:	4603      	mov	r3, r0
 8010096:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010098:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801009a:	2b00      	cmp	r3, #0
 801009c:	d106      	bne.n	80100ac <find_volume+0x1dc>
 801009e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a0:	3334      	adds	r3, #52	; 0x34
 80100a2:	3324      	adds	r3, #36	; 0x24
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fe fd87 	bl	800ebb8 <ld_dword>
 80100aa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80100ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80100b0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80100b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80100b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ba:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80100bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100be:	789b      	ldrb	r3, [r3, #2]
 80100c0:	2b01      	cmp	r3, #1
 80100c2:	d005      	beq.n	80100d0 <find_volume+0x200>
 80100c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c6:	789b      	ldrb	r3, [r3, #2]
 80100c8:	2b02      	cmp	r3, #2
 80100ca:	d001      	beq.n	80100d0 <find_volume+0x200>
 80100cc:	230d      	movs	r3, #13
 80100ce:	e148      	b.n	8010362 <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80100d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d2:	789b      	ldrb	r3, [r3, #2]
 80100d4:	461a      	mov	r2, r3
 80100d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100d8:	fb02 f303 	mul.w	r3, r2, r3
 80100dc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80100de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	895b      	ldrh	r3, [r3, #10]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d008      	beq.n	8010104 <find_volume+0x234>
 80100f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f4:	895b      	ldrh	r3, [r3, #10]
 80100f6:	461a      	mov	r2, r3
 80100f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100fa:	895b      	ldrh	r3, [r3, #10]
 80100fc:	3b01      	subs	r3, #1
 80100fe:	4013      	ands	r3, r2
 8010100:	2b00      	cmp	r3, #0
 8010102:	d001      	beq.n	8010108 <find_volume+0x238>
 8010104:	230d      	movs	r3, #13
 8010106:	e12c      	b.n	8010362 <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801010a:	3334      	adds	r3, #52	; 0x34
 801010c:	3311      	adds	r3, #17
 801010e:	4618      	mov	r0, r3
 8010110:	f7fe fd3a 	bl	800eb88 <ld_word>
 8010114:	4603      	mov	r3, r0
 8010116:	461a      	mov	r2, r3
 8010118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801011c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801011e:	891b      	ldrh	r3, [r3, #8]
 8010120:	f003 030f 	and.w	r3, r3, #15
 8010124:	b29b      	uxth	r3, r3
 8010126:	2b00      	cmp	r3, #0
 8010128:	d001      	beq.n	801012e <find_volume+0x25e>
 801012a:	230d      	movs	r3, #13
 801012c:	e119      	b.n	8010362 <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801012e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010130:	3334      	adds	r3, #52	; 0x34
 8010132:	3313      	adds	r3, #19
 8010134:	4618      	mov	r0, r3
 8010136:	f7fe fd27 	bl	800eb88 <ld_word>
 801013a:	4603      	mov	r3, r0
 801013c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801013e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010140:	2b00      	cmp	r3, #0
 8010142:	d106      	bne.n	8010152 <find_volume+0x282>
 8010144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010146:	3334      	adds	r3, #52	; 0x34
 8010148:	3320      	adds	r3, #32
 801014a:	4618      	mov	r0, r3
 801014c:	f7fe fd34 	bl	800ebb8 <ld_dword>
 8010150:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010154:	3334      	adds	r3, #52	; 0x34
 8010156:	330e      	adds	r3, #14
 8010158:	4618      	mov	r0, r3
 801015a:	f7fe fd15 	bl	800eb88 <ld_word>
 801015e:	4603      	mov	r3, r0
 8010160:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010162:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010164:	2b00      	cmp	r3, #0
 8010166:	d101      	bne.n	801016c <find_volume+0x29c>
 8010168:	230d      	movs	r3, #13
 801016a:	e0fa      	b.n	8010362 <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801016c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801016e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010170:	4413      	add	r3, r2
 8010172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010174:	8912      	ldrh	r2, [r2, #8]
 8010176:	0912      	lsrs	r2, r2, #4
 8010178:	b292      	uxth	r2, r2
 801017a:	4413      	add	r3, r2
 801017c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801017e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010182:	429a      	cmp	r2, r3
 8010184:	d204      	bcs.n	8010190 <find_volume+0x2c0>
 8010186:	230d      	movs	r3, #13
 8010188:	e0eb      	b.n	8010362 <find_volume+0x492>
 801018a:	bf00      	nop
 801018c:	20000710 	.word	0x20000710
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010194:	1ad3      	subs	r3, r2, r3
 8010196:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010198:	8952      	ldrh	r2, [r2, #10]
 801019a:	fbb3 f3f2 	udiv	r3, r3, r2
 801019e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80101a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d101      	bne.n	80101aa <find_volume+0x2da>
 80101a6:	230d      	movs	r3, #13
 80101a8:	e0db      	b.n	8010362 <find_volume+0x492>
		fmt = FS_FAT32;
 80101aa:	2303      	movs	r3, #3
 80101ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80101b6:	4293      	cmp	r3, r2
 80101b8:	d802      	bhi.n	80101c0 <find_volume+0x2f0>
 80101ba:	2302      	movs	r3, #2
 80101bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80101c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101c2:	f640 72f5 	movw	r2, #4085	; 0xff5
 80101c6:	4293      	cmp	r3, r2
 80101c8:	d802      	bhi.n	80101d0 <find_volume+0x300>
 80101ca:	2301      	movs	r3, #1
 80101cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80101d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d2:	1c9a      	adds	r2, r3, #2
 80101d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d6:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101dc:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80101de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80101e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101e2:	441a      	add	r2, r3
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 80101e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ec:	441a      	add	r2, r3
 80101ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f0:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 80101f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101f6:	2b03      	cmp	r3, #3
 80101f8:	d11e      	bne.n	8010238 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80101fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fc:	3334      	adds	r3, #52	; 0x34
 80101fe:	332a      	adds	r3, #42	; 0x2a
 8010200:	4618      	mov	r0, r3
 8010202:	f7fe fcc1 	bl	800eb88 <ld_word>
 8010206:	4603      	mov	r3, r0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d001      	beq.n	8010210 <find_volume+0x340>
 801020c:	230d      	movs	r3, #13
 801020e:	e0a8      	b.n	8010362 <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010212:	891b      	ldrh	r3, [r3, #8]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d001      	beq.n	801021c <find_volume+0x34c>
 8010218:	230d      	movs	r3, #13
 801021a:	e0a2      	b.n	8010362 <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801021c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801021e:	3334      	adds	r3, #52	; 0x34
 8010220:	332c      	adds	r3, #44	; 0x2c
 8010222:	4618      	mov	r0, r3
 8010224:	f7fe fcc8 	bl	800ebb8 <ld_dword>
 8010228:	4602      	mov	r2, r0
 801022a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801022e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010230:	699b      	ldr	r3, [r3, #24]
 8010232:	009b      	lsls	r3, r3, #2
 8010234:	647b      	str	r3, [r7, #68]	; 0x44
 8010236:	e01f      	b.n	8010278 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801023a:	891b      	ldrh	r3, [r3, #8]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d101      	bne.n	8010244 <find_volume+0x374>
 8010240:	230d      	movs	r3, #13
 8010242:	e08e      	b.n	8010362 <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010246:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801024a:	441a      	add	r2, r3
 801024c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801024e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010250:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010254:	2b02      	cmp	r3, #2
 8010256:	d103      	bne.n	8010260 <find_volume+0x390>
 8010258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801025a:	699b      	ldr	r3, [r3, #24]
 801025c:	005b      	lsls	r3, r3, #1
 801025e:	e00a      	b.n	8010276 <find_volume+0x3a6>
 8010260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010262:	699a      	ldr	r2, [r3, #24]
 8010264:	4613      	mov	r3, r2
 8010266:	005b      	lsls	r3, r3, #1
 8010268:	4413      	add	r3, r2
 801026a:	085a      	lsrs	r2, r3, #1
 801026c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801026e:	699b      	ldr	r3, [r3, #24]
 8010270:	f003 0301 	and.w	r3, r3, #1
 8010274:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010276:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027a:	69da      	ldr	r2, [r3, #28]
 801027c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801027e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8010282:	0a5b      	lsrs	r3, r3, #9
 8010284:	429a      	cmp	r2, r3
 8010286:	d201      	bcs.n	801028c <find_volume+0x3bc>
 8010288:	230d      	movs	r3, #13
 801028a:	e06a      	b.n	8010362 <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801028c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028e:	f04f 32ff 	mov.w	r2, #4294967295
 8010292:	615a      	str	r2, [r3, #20]
 8010294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010296:	695a      	ldr	r2, [r3, #20]
 8010298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029a:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801029c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801029e:	2280      	movs	r2, #128	; 0x80
 80102a0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80102a2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80102a6:	2b03      	cmp	r3, #3
 80102a8:	d149      	bne.n	801033e <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80102aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ac:	3334      	adds	r3, #52	; 0x34
 80102ae:	3330      	adds	r3, #48	; 0x30
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fe fc69 	bl	800eb88 <ld_word>
 80102b6:	4603      	mov	r3, r0
 80102b8:	2b01      	cmp	r3, #1
 80102ba:	d140      	bne.n	801033e <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80102bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102be:	3301      	adds	r3, #1
 80102c0:	4619      	mov	r1, r3
 80102c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80102c4:	f7fe ff06 	bl	800f0d4 <move_window>
 80102c8:	4603      	mov	r3, r0
 80102ca:	2b00      	cmp	r3, #0
 80102cc:	d137      	bne.n	801033e <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 80102ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d0:	2200      	movs	r2, #0
 80102d2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80102d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d6:	3334      	adds	r3, #52	; 0x34
 80102d8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fe fc53 	bl	800eb88 <ld_word>
 80102e2:	4603      	mov	r3, r0
 80102e4:	461a      	mov	r2, r3
 80102e6:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d127      	bne.n	801033e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80102ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102f0:	3334      	adds	r3, #52	; 0x34
 80102f2:	4618      	mov	r0, r3
 80102f4:	f7fe fc60 	bl	800ebb8 <ld_dword>
 80102f8:	4603      	mov	r3, r0
 80102fa:	4a1c      	ldr	r2, [pc, #112]	; (801036c <find_volume+0x49c>)
 80102fc:	4293      	cmp	r3, r2
 80102fe:	d11e      	bne.n	801033e <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010302:	3334      	adds	r3, #52	; 0x34
 8010304:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010308:	4618      	mov	r0, r3
 801030a:	f7fe fc55 	bl	800ebb8 <ld_dword>
 801030e:	4603      	mov	r3, r0
 8010310:	4a17      	ldr	r2, [pc, #92]	; (8010370 <find_volume+0x4a0>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d113      	bne.n	801033e <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010318:	3334      	adds	r3, #52	; 0x34
 801031a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801031e:	4618      	mov	r0, r3
 8010320:	f7fe fc4a 	bl	800ebb8 <ld_dword>
 8010324:	4602      	mov	r2, r0
 8010326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010328:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801032a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801032c:	3334      	adds	r3, #52	; 0x34
 801032e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010332:	4618      	mov	r0, r3
 8010334:	f7fe fc40 	bl	800ebb8 <ld_dword>
 8010338:	4602      	mov	r2, r0
 801033a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033c:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801033e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010340:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8010344:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010346:	4b0b      	ldr	r3, [pc, #44]	; (8010374 <find_volume+0x4a4>)
 8010348:	881b      	ldrh	r3, [r3, #0]
 801034a:	3301      	adds	r3, #1
 801034c:	b29a      	uxth	r2, r3
 801034e:	4b09      	ldr	r3, [pc, #36]	; (8010374 <find_volume+0x4a4>)
 8010350:	801a      	strh	r2, [r3, #0]
 8010352:	4b08      	ldr	r3, [pc, #32]	; (8010374 <find_volume+0x4a4>)
 8010354:	881a      	ldrh	r2, [r3, #0]
 8010356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010358:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801035a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801035c:	f7fe fe52 	bl	800f004 <clear_lock>
#endif
	return FR_OK;
 8010360:	2300      	movs	r3, #0
}
 8010362:	4618      	mov	r0, r3
 8010364:	3758      	adds	r7, #88	; 0x58
 8010366:	46bd      	mov	sp, r7
 8010368:	bd80      	pop	{r7, pc}
 801036a:	bf00      	nop
 801036c:	41615252 	.word	0x41615252
 8010370:	61417272 	.word	0x61417272
 8010374:	20000714 	.word	0x20000714

08010378 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010378:	b580      	push	{r7, lr}
 801037a:	b084      	sub	sp, #16
 801037c:	af00      	add	r7, sp, #0
 801037e:	6078      	str	r0, [r7, #4]
 8010380:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010382:	2309      	movs	r3, #9
 8010384:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	d02e      	beq.n	80103ea <validate+0x72>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d02a      	beq.n	80103ea <validate+0x72>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	681b      	ldr	r3, [r3, #0]
 8010398:	781b      	ldrb	r3, [r3, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d025      	beq.n	80103ea <validate+0x72>
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	889a      	ldrh	r2, [r3, #4]
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	88db      	ldrh	r3, [r3, #6]
 80103a8:	429a      	cmp	r2, r3
 80103aa:	d11e      	bne.n	80103ea <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7fe fce9 	bl	800ed88 <lock_fs>
 80103b6:	4603      	mov	r3, r0
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d014      	beq.n	80103e6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	785b      	ldrb	r3, [r3, #1]
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fe fb60 	bl	800ea88 <disk_status>
 80103c8:	4603      	mov	r3, r0
 80103ca:	f003 0301 	and.w	r3, r3, #1
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d102      	bne.n	80103d8 <validate+0x60>
				res = FR_OK;
 80103d2:	2300      	movs	r3, #0
 80103d4:	73fb      	strb	r3, [r7, #15]
 80103d6:	e008      	b.n	80103ea <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	2100      	movs	r1, #0
 80103de:	4618      	mov	r0, r3
 80103e0:	f7fe fce8 	bl	800edb4 <unlock_fs>
 80103e4:	e001      	b.n	80103ea <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80103e6:	230f      	movs	r3, #15
 80103e8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80103ea:	7bfb      	ldrb	r3, [r7, #15]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d102      	bne.n	80103f6 <validate+0x7e>
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	e000      	b.n	80103f8 <validate+0x80>
 80103f6:	2300      	movs	r3, #0
 80103f8:	683a      	ldr	r2, [r7, #0]
 80103fa:	6013      	str	r3, [r2, #0]
	return res;
 80103fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80103fe:	4618      	mov	r0, r3
 8010400:	3710      	adds	r7, #16
 8010402:	46bd      	mov	sp, r7
 8010404:	bd80      	pop	{r7, pc}
	...

08010408 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b088      	sub	sp, #32
 801040c:	af00      	add	r7, sp, #0
 801040e:	60f8      	str	r0, [r7, #12]
 8010410:	60b9      	str	r1, [r7, #8]
 8010412:	4613      	mov	r3, r2
 8010414:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010416:	68bb      	ldr	r3, [r7, #8]
 8010418:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801041a:	f107 0310 	add.w	r3, r7, #16
 801041e:	4618      	mov	r0, r3
 8010420:	f7ff fcbb 	bl	800fd9a <get_ldnumber>
 8010424:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010426:	69fb      	ldr	r3, [r7, #28]
 8010428:	2b00      	cmp	r3, #0
 801042a:	da01      	bge.n	8010430 <f_mount+0x28>
 801042c:	230b      	movs	r3, #11
 801042e:	e048      	b.n	80104c2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010430:	4a26      	ldr	r2, [pc, #152]	; (80104cc <f_mount+0xc4>)
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010438:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801043a:	69bb      	ldr	r3, [r7, #24]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d00f      	beq.n	8010460 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010440:	69b8      	ldr	r0, [r7, #24]
 8010442:	f7fe fddf 	bl	800f004 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	68db      	ldr	r3, [r3, #12]
 801044a:	4618      	mov	r0, r3
 801044c:	f000 fc26 	bl	8010c9c <ff_del_syncobj>
 8010450:	4603      	mov	r3, r0
 8010452:	2b00      	cmp	r3, #0
 8010454:	d101      	bne.n	801045a <f_mount+0x52>
 8010456:	2302      	movs	r3, #2
 8010458:	e033      	b.n	80104c2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	2200      	movs	r2, #0
 801045e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010460:	68fb      	ldr	r3, [r7, #12]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d00f      	beq.n	8010486 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010466:	68fb      	ldr	r3, [r7, #12]
 8010468:	2200      	movs	r2, #0
 801046a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 801046c:	69fb      	ldr	r3, [r7, #28]
 801046e:	b2da      	uxtb	r2, r3
 8010470:	68fb      	ldr	r3, [r7, #12]
 8010472:	330c      	adds	r3, #12
 8010474:	4619      	mov	r1, r3
 8010476:	4610      	mov	r0, r2
 8010478:	f000 fbf5 	bl	8010c66 <ff_cre_syncobj>
 801047c:	4603      	mov	r3, r0
 801047e:	2b00      	cmp	r3, #0
 8010480:	d101      	bne.n	8010486 <f_mount+0x7e>
 8010482:	2302      	movs	r3, #2
 8010484:	e01d      	b.n	80104c2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010486:	68fa      	ldr	r2, [r7, #12]
 8010488:	4910      	ldr	r1, [pc, #64]	; (80104cc <f_mount+0xc4>)
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010490:	68fb      	ldr	r3, [r7, #12]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d002      	beq.n	801049c <f_mount+0x94>
 8010496:	79fb      	ldrb	r3, [r7, #7]
 8010498:	2b01      	cmp	r3, #1
 801049a:	d001      	beq.n	80104a0 <f_mount+0x98>
 801049c:	2300      	movs	r3, #0
 801049e:	e010      	b.n	80104c2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80104a0:	f107 010c 	add.w	r1, r7, #12
 80104a4:	f107 0308 	add.w	r3, r7, #8
 80104a8:	2200      	movs	r2, #0
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff fd10 	bl	800fed0 <find_volume>
 80104b0:	4603      	mov	r3, r0
 80104b2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80104b4:	68fb      	ldr	r3, [r7, #12]
 80104b6:	7dfa      	ldrb	r2, [r7, #23]
 80104b8:	4611      	mov	r1, r2
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7fe fc7a 	bl	800edb4 <unlock_fs>
 80104c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80104c2:	4618      	mov	r0, r3
 80104c4:	3720      	adds	r7, #32
 80104c6:	46bd      	mov	sp, r7
 80104c8:	bd80      	pop	{r7, pc}
 80104ca:	bf00      	nop
 80104cc:	20000710 	.word	0x20000710

080104d0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b098      	sub	sp, #96	; 0x60
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	60f8      	str	r0, [r7, #12]
 80104d8:	60b9      	str	r1, [r7, #8]
 80104da:	4613      	mov	r3, r2
 80104dc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d101      	bne.n	80104e8 <f_open+0x18>
 80104e4:	2309      	movs	r3, #9
 80104e6:	e1b4      	b.n	8010852 <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80104e8:	79fb      	ldrb	r3, [r7, #7]
 80104ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80104ee:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80104f0:	79fa      	ldrb	r2, [r7, #7]
 80104f2:	f107 0110 	add.w	r1, r7, #16
 80104f6:	f107 0308 	add.w	r3, r7, #8
 80104fa:	4618      	mov	r0, r3
 80104fc:	f7ff fce8 	bl	800fed0 <find_volume>
 8010500:	4603      	mov	r3, r0
 8010502:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010506:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801050a:	2b00      	cmp	r3, #0
 801050c:	f040 8191 	bne.w	8010832 <f_open+0x362>
		dj.obj.fs = fs;
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010514:	68ba      	ldr	r2, [r7, #8]
 8010516:	f107 0314 	add.w	r3, r7, #20
 801051a:	4611      	mov	r1, r2
 801051c:	4618      	mov	r0, r3
 801051e:	f7ff fbcb 	bl	800fcb8 <follow_path>
 8010522:	4603      	mov	r3, r0
 8010524:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010528:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801052c:	2b00      	cmp	r3, #0
 801052e:	d11a      	bne.n	8010566 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010530:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010534:	b25b      	sxtb	r3, r3
 8010536:	2b00      	cmp	r3, #0
 8010538:	da03      	bge.n	8010542 <f_open+0x72>
				res = FR_INVALID_NAME;
 801053a:	2306      	movs	r3, #6
 801053c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010540:	e011      	b.n	8010566 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010542:	79fb      	ldrb	r3, [r7, #7]
 8010544:	f023 0301 	bic.w	r3, r3, #1
 8010548:	2b00      	cmp	r3, #0
 801054a:	bf14      	ite	ne
 801054c:	2301      	movne	r3, #1
 801054e:	2300      	moveq	r3, #0
 8010550:	b2db      	uxtb	r3, r3
 8010552:	461a      	mov	r2, r3
 8010554:	f107 0314 	add.w	r3, r7, #20
 8010558:	4611      	mov	r1, r2
 801055a:	4618      	mov	r0, r3
 801055c:	f7fe fc46 	bl	800edec <chk_lock>
 8010560:	4603      	mov	r3, r0
 8010562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010566:	79fb      	ldrb	r3, [r7, #7]
 8010568:	f003 031c 	and.w	r3, r3, #28
 801056c:	2b00      	cmp	r3, #0
 801056e:	d07f      	beq.n	8010670 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010570:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010574:	2b00      	cmp	r3, #0
 8010576:	d017      	beq.n	80105a8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801057c:	2b04      	cmp	r3, #4
 801057e:	d10e      	bne.n	801059e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010580:	f7fe fc90 	bl	800eea4 <enq_lock>
 8010584:	4603      	mov	r3, r0
 8010586:	2b00      	cmp	r3, #0
 8010588:	d006      	beq.n	8010598 <f_open+0xc8>
 801058a:	f107 0314 	add.w	r3, r7, #20
 801058e:	4618      	mov	r0, r3
 8010590:	f7ff facc 	bl	800fb2c <dir_register>
 8010594:	4603      	mov	r3, r0
 8010596:	e000      	b.n	801059a <f_open+0xca>
 8010598:	2312      	movs	r3, #18
 801059a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801059e:	79fb      	ldrb	r3, [r7, #7]
 80105a0:	f043 0308 	orr.w	r3, r3, #8
 80105a4:	71fb      	strb	r3, [r7, #7]
 80105a6:	e010      	b.n	80105ca <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80105a8:	7ebb      	ldrb	r3, [r7, #26]
 80105aa:	f003 0311 	and.w	r3, r3, #17
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d003      	beq.n	80105ba <f_open+0xea>
					res = FR_DENIED;
 80105b2:	2307      	movs	r3, #7
 80105b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80105b8:	e007      	b.n	80105ca <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80105ba:	79fb      	ldrb	r3, [r7, #7]
 80105bc:	f003 0304 	and.w	r3, r3, #4
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d002      	beq.n	80105ca <f_open+0xfa>
 80105c4:	2308      	movs	r3, #8
 80105c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80105ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d168      	bne.n	80106a4 <f_open+0x1d4>
 80105d2:	79fb      	ldrb	r3, [r7, #7]
 80105d4:	f003 0308 	and.w	r3, r3, #8
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d063      	beq.n	80106a4 <f_open+0x1d4>
				dw = GET_FATTIME();
 80105dc:	f7fb ff64 	bl	800c4a8 <get_fattime>
 80105e0:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80105e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105e4:	330e      	adds	r3, #14
 80105e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105e8:	4618      	mov	r0, r3
 80105ea:	f7fe fb23 	bl	800ec34 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80105ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105f0:	3316      	adds	r3, #22
 80105f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fe fb1d 	bl	800ec34 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80105fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105fc:	330b      	adds	r3, #11
 80105fe:	2220      	movs	r2, #32
 8010600:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010602:	693b      	ldr	r3, [r7, #16]
 8010604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010606:	4611      	mov	r1, r2
 8010608:	4618      	mov	r0, r3
 801060a:	f7ff f9fb 	bl	800fa04 <ld_clust>
 801060e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010610:	693b      	ldr	r3, [r7, #16]
 8010612:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010614:	2200      	movs	r2, #0
 8010616:	4618      	mov	r0, r3
 8010618:	f7ff fa13 	bl	800fa42 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801061c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801061e:	331c      	adds	r3, #28
 8010620:	2100      	movs	r1, #0
 8010622:	4618      	mov	r0, r3
 8010624:	f7fe fb06 	bl	800ec34 <st_dword>
					fs->wflag = 1;
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	2201      	movs	r2, #1
 801062c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801062e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010630:	2b00      	cmp	r3, #0
 8010632:	d037      	beq.n	80106a4 <f_open+0x1d4>
						dw = fs->winsect;
 8010634:	693b      	ldr	r3, [r7, #16]
 8010636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010638:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801063a:	f107 0314 	add.w	r3, r7, #20
 801063e:	2200      	movs	r2, #0
 8010640:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010642:	4618      	mov	r0, r3
 8010644:	f7fe ff26 	bl	800f494 <remove_chain>
 8010648:	4603      	mov	r3, r0
 801064a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801064e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010652:	2b00      	cmp	r3, #0
 8010654:	d126      	bne.n	80106a4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010656:	693b      	ldr	r3, [r7, #16]
 8010658:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801065a:	4618      	mov	r0, r3
 801065c:	f7fe fd3a 	bl	800f0d4 <move_window>
 8010660:	4603      	mov	r3, r0
 8010662:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010666:	693b      	ldr	r3, [r7, #16]
 8010668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801066a:	3a01      	subs	r2, #1
 801066c:	611a      	str	r2, [r3, #16]
 801066e:	e019      	b.n	80106a4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010670:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010674:	2b00      	cmp	r3, #0
 8010676:	d115      	bne.n	80106a4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010678:	7ebb      	ldrb	r3, [r7, #26]
 801067a:	f003 0310 	and.w	r3, r3, #16
 801067e:	2b00      	cmp	r3, #0
 8010680:	d003      	beq.n	801068a <f_open+0x1ba>
					res = FR_NO_FILE;
 8010682:	2304      	movs	r3, #4
 8010684:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010688:	e00c      	b.n	80106a4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801068a:	79fb      	ldrb	r3, [r7, #7]
 801068c:	f003 0302 	and.w	r3, r3, #2
 8010690:	2b00      	cmp	r3, #0
 8010692:	d007      	beq.n	80106a4 <f_open+0x1d4>
 8010694:	7ebb      	ldrb	r3, [r7, #26]
 8010696:	f003 0301 	and.w	r3, r3, #1
 801069a:	2b00      	cmp	r3, #0
 801069c:	d002      	beq.n	80106a4 <f_open+0x1d4>
						res = FR_DENIED;
 801069e:	2307      	movs	r3, #7
 80106a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80106a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d128      	bne.n	80106fe <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80106ac:	79fb      	ldrb	r3, [r7, #7]
 80106ae:	f003 0308 	and.w	r3, r3, #8
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d003      	beq.n	80106be <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80106b6:	79fb      	ldrb	r3, [r7, #7]
 80106b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80106c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80106cc:	79fb      	ldrb	r3, [r7, #7]
 80106ce:	f023 0301 	bic.w	r3, r3, #1
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	bf14      	ite	ne
 80106d6:	2301      	movne	r3, #1
 80106d8:	2300      	moveq	r3, #0
 80106da:	b2db      	uxtb	r3, r3
 80106dc:	461a      	mov	r2, r3
 80106de:	f107 0314 	add.w	r3, r7, #20
 80106e2:	4611      	mov	r1, r2
 80106e4:	4618      	mov	r0, r3
 80106e6:	f7fe fbff 	bl	800eee8 <inc_lock>
 80106ea:	4602      	mov	r2, r0
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	691b      	ldr	r3, [r3, #16]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d102      	bne.n	80106fe <f_open+0x22e>
 80106f8:	2302      	movs	r3, #2
 80106fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80106fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010702:	2b00      	cmp	r3, #0
 8010704:	f040 8095 	bne.w	8010832 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801070c:	4611      	mov	r1, r2
 801070e:	4618      	mov	r0, r3
 8010710:	f7ff f978 	bl	800fa04 <ld_clust>
 8010714:	4602      	mov	r2, r0
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801071a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071c:	331c      	adds	r3, #28
 801071e:	4618      	mov	r0, r3
 8010720:	f7fe fa4a 	bl	800ebb8 <ld_dword>
 8010724:	4602      	mov	r2, r0
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2200      	movs	r2, #0
 801072e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010730:	693a      	ldr	r2, [r7, #16]
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	88da      	ldrh	r2, [r3, #6]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	79fa      	ldrb	r2, [r7, #7]
 8010742:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2200      	movs	r2, #0
 8010748:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2200      	movs	r2, #0
 801074e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2200      	movs	r2, #0
 8010754:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	3330      	adds	r3, #48	; 0x30
 801075a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801075e:	2100      	movs	r1, #0
 8010760:	4618      	mov	r0, r3
 8010762:	f7fe fab4 	bl	800ecce <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010766:	79fb      	ldrb	r3, [r7, #7]
 8010768:	f003 0320 	and.w	r3, r3, #32
 801076c:	2b00      	cmp	r3, #0
 801076e:	d060      	beq.n	8010832 <f_open+0x362>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	68db      	ldr	r3, [r3, #12]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d05c      	beq.n	8010832 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	68da      	ldr	r2, [r3, #12]
 801077c:	68fb      	ldr	r3, [r7, #12]
 801077e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010780:	693b      	ldr	r3, [r7, #16]
 8010782:	895b      	ldrh	r3, [r3, #10]
 8010784:	025b      	lsls	r3, r3, #9
 8010786:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	689b      	ldr	r3, [r3, #8]
 801078c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	657b      	str	r3, [r7, #84]	; 0x54
 8010794:	e016      	b.n	80107c4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801079a:	4618      	mov	r0, r3
 801079c:	f7fe fce6 	bl	800f16c <get_fat>
 80107a0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80107a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d802      	bhi.n	80107ae <f_open+0x2de>
 80107a8:	2302      	movs	r3, #2
 80107aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80107ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80107b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80107b4:	d102      	bne.n	80107bc <f_open+0x2ec>
 80107b6:	2301      	movs	r3, #1
 80107b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80107bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80107be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107c0:	1ad3      	subs	r3, r2, r3
 80107c2:	657b      	str	r3, [r7, #84]	; 0x54
 80107c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107c8:	2b00      	cmp	r3, #0
 80107ca:	d103      	bne.n	80107d4 <f_open+0x304>
 80107cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80107ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107d0:	429a      	cmp	r2, r3
 80107d2:	d8e0      	bhi.n	8010796 <f_open+0x2c6>
				}
				fp->clust = clst;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80107d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80107da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d127      	bne.n	8010832 <f_open+0x362>
 80107e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80107e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d022      	beq.n	8010832 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80107ec:	693b      	ldr	r3, [r7, #16]
 80107ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7fe fc9c 	bl	800f12e <clust2sect>
 80107f6:	6478      	str	r0, [r7, #68]	; 0x44
 80107f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d103      	bne.n	8010806 <f_open+0x336>
						res = FR_INT_ERR;
 80107fe:	2302      	movs	r3, #2
 8010800:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010804:	e015      	b.n	8010832 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010808:	0a5a      	lsrs	r2, r3, #9
 801080a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801080c:	441a      	add	r2, r3
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010812:	693b      	ldr	r3, [r7, #16]
 8010814:	7858      	ldrb	r0, [r3, #1]
 8010816:	68fb      	ldr	r3, [r7, #12]
 8010818:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	6a1a      	ldr	r2, [r3, #32]
 8010820:	2301      	movs	r3, #1
 8010822:	f7fe f971 	bl	800eb08 <disk_read>
 8010826:	4603      	mov	r3, r0
 8010828:	2b00      	cmp	r3, #0
 801082a:	d002      	beq.n	8010832 <f_open+0x362>
 801082c:	2301      	movs	r3, #1
 801082e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010832:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010836:	2b00      	cmp	r3, #0
 8010838:	d002      	beq.n	8010840 <f_open+0x370>
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2200      	movs	r2, #0
 801083e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010840:	693b      	ldr	r3, [r7, #16]
 8010842:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8010846:	4611      	mov	r1, r2
 8010848:	4618      	mov	r0, r3
 801084a:	f7fe fab3 	bl	800edb4 <unlock_fs>
 801084e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010852:	4618      	mov	r0, r3
 8010854:	3760      	adds	r7, #96	; 0x60
 8010856:	46bd      	mov	sp, r7
 8010858:	bd80      	pop	{r7, pc}

0801085a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801085a:	b580      	push	{r7, lr}
 801085c:	b08e      	sub	sp, #56	; 0x38
 801085e:	af00      	add	r7, sp, #0
 8010860:	60f8      	str	r0, [r7, #12]
 8010862:	60b9      	str	r1, [r7, #8]
 8010864:	607a      	str	r2, [r7, #4]
 8010866:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010868:	68bb      	ldr	r3, [r7, #8]
 801086a:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801086c:	683b      	ldr	r3, [r7, #0]
 801086e:	2200      	movs	r2, #0
 8010870:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	f107 0214 	add.w	r2, r7, #20
 8010878:	4611      	mov	r1, r2
 801087a:	4618      	mov	r0, r3
 801087c:	f7ff fd7c 	bl	8010378 <validate>
 8010880:	4603      	mov	r3, r0
 8010882:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010886:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801088a:	2b00      	cmp	r3, #0
 801088c:	d107      	bne.n	801089e <f_read+0x44>
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	7d5b      	ldrb	r3, [r3, #21]
 8010892:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010896:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801089a:	2b00      	cmp	r3, #0
 801089c:	d009      	beq.n	80108b2 <f_read+0x58>
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80108a4:	4611      	mov	r1, r2
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fe fa84 	bl	800edb4 <unlock_fs>
 80108ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80108b0:	e13d      	b.n	8010b2e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80108b2:	68fb      	ldr	r3, [r7, #12]
 80108b4:	7d1b      	ldrb	r3, [r3, #20]
 80108b6:	f003 0301 	and.w	r3, r3, #1
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d106      	bne.n	80108cc <f_read+0x72>
 80108be:	697b      	ldr	r3, [r7, #20]
 80108c0:	2107      	movs	r1, #7
 80108c2:	4618      	mov	r0, r3
 80108c4:	f7fe fa76 	bl	800edb4 <unlock_fs>
 80108c8:	2307      	movs	r3, #7
 80108ca:	e130      	b.n	8010b2e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	68da      	ldr	r2, [r3, #12]
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	699b      	ldr	r3, [r3, #24]
 80108d4:	1ad3      	subs	r3, r2, r3
 80108d6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80108d8:	687a      	ldr	r2, [r7, #4]
 80108da:	6a3b      	ldr	r3, [r7, #32]
 80108dc:	429a      	cmp	r2, r3
 80108de:	f240 811c 	bls.w	8010b1a <f_read+0x2c0>
 80108e2:	6a3b      	ldr	r3, [r7, #32]
 80108e4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80108e6:	e118      	b.n	8010b1a <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80108e8:	68fb      	ldr	r3, [r7, #12]
 80108ea:	699b      	ldr	r3, [r3, #24]
 80108ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	f040 80e4 	bne.w	8010abe <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	699b      	ldr	r3, [r3, #24]
 80108fa:	0a5b      	lsrs	r3, r3, #9
 80108fc:	697a      	ldr	r2, [r7, #20]
 80108fe:	8952      	ldrh	r2, [r2, #10]
 8010900:	3a01      	subs	r2, #1
 8010902:	4013      	ands	r3, r2
 8010904:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	2b00      	cmp	r3, #0
 801090a:	d139      	bne.n	8010980 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	699b      	ldr	r3, [r3, #24]
 8010910:	2b00      	cmp	r3, #0
 8010912:	d103      	bne.n	801091c <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	689b      	ldr	r3, [r3, #8]
 8010918:	633b      	str	r3, [r7, #48]	; 0x30
 801091a:	e013      	b.n	8010944 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801091c:	68fb      	ldr	r3, [r7, #12]
 801091e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010920:	2b00      	cmp	r3, #0
 8010922:	d007      	beq.n	8010934 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	699b      	ldr	r3, [r3, #24]
 8010928:	4619      	mov	r1, r3
 801092a:	68f8      	ldr	r0, [r7, #12]
 801092c:	f7fe feaf 	bl	800f68e <clmt_clust>
 8010930:	6338      	str	r0, [r7, #48]	; 0x30
 8010932:	e007      	b.n	8010944 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010934:	68fa      	ldr	r2, [r7, #12]
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	69db      	ldr	r3, [r3, #28]
 801093a:	4619      	mov	r1, r3
 801093c:	4610      	mov	r0, r2
 801093e:	f7fe fc15 	bl	800f16c <get_fat>
 8010942:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010946:	2b01      	cmp	r3, #1
 8010948:	d809      	bhi.n	801095e <f_read+0x104>
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	2202      	movs	r2, #2
 801094e:	755a      	strb	r2, [r3, #21]
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	2102      	movs	r1, #2
 8010954:	4618      	mov	r0, r3
 8010956:	f7fe fa2d 	bl	800edb4 <unlock_fs>
 801095a:	2302      	movs	r3, #2
 801095c:	e0e7      	b.n	8010b2e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801095e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010964:	d109      	bne.n	801097a <f_read+0x120>
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2201      	movs	r2, #1
 801096a:	755a      	strb	r2, [r3, #21]
 801096c:	697b      	ldr	r3, [r7, #20]
 801096e:	2101      	movs	r1, #1
 8010970:	4618      	mov	r0, r3
 8010972:	f7fe fa1f 	bl	800edb4 <unlock_fs>
 8010976:	2301      	movs	r3, #1
 8010978:	e0d9      	b.n	8010b2e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801097e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010980:	697a      	ldr	r2, [r7, #20]
 8010982:	68fb      	ldr	r3, [r7, #12]
 8010984:	69db      	ldr	r3, [r3, #28]
 8010986:	4619      	mov	r1, r3
 8010988:	4610      	mov	r0, r2
 801098a:	f7fe fbd0 	bl	800f12e <clust2sect>
 801098e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010990:	69bb      	ldr	r3, [r7, #24]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d109      	bne.n	80109aa <f_read+0x150>
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	2202      	movs	r2, #2
 801099a:	755a      	strb	r2, [r3, #21]
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	2102      	movs	r1, #2
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fe fa07 	bl	800edb4 <unlock_fs>
 80109a6:	2302      	movs	r3, #2
 80109a8:	e0c1      	b.n	8010b2e <f_read+0x2d4>
			sect += csect;
 80109aa:	69ba      	ldr	r2, [r7, #24]
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	4413      	add	r3, r2
 80109b0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80109b2:	687b      	ldr	r3, [r7, #4]
 80109b4:	0a5b      	lsrs	r3, r3, #9
 80109b6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80109b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d03e      	beq.n	8010a3c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80109be:	69fa      	ldr	r2, [r7, #28]
 80109c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109c2:	4413      	add	r3, r2
 80109c4:	697a      	ldr	r2, [r7, #20]
 80109c6:	8952      	ldrh	r2, [r2, #10]
 80109c8:	4293      	cmp	r3, r2
 80109ca:	d905      	bls.n	80109d8 <f_read+0x17e>
					cc = fs->csize - csect;
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	895b      	ldrh	r3, [r3, #10]
 80109d0:	461a      	mov	r2, r3
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	1ad3      	subs	r3, r2, r3
 80109d6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80109d8:	697b      	ldr	r3, [r7, #20]
 80109da:	7858      	ldrb	r0, [r3, #1]
 80109dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109de:	69ba      	ldr	r2, [r7, #24]
 80109e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109e2:	f7fe f891 	bl	800eb08 <disk_read>
 80109e6:	4603      	mov	r3, r0
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d009      	beq.n	8010a00 <f_read+0x1a6>
 80109ec:	68fb      	ldr	r3, [r7, #12]
 80109ee:	2201      	movs	r2, #1
 80109f0:	755a      	strb	r2, [r3, #21]
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	2101      	movs	r1, #1
 80109f6:	4618      	mov	r0, r3
 80109f8:	f7fe f9dc 	bl	800edb4 <unlock_fs>
 80109fc:	2301      	movs	r3, #1
 80109fe:	e096      	b.n	8010b2e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	7d1b      	ldrb	r3, [r3, #20]
 8010a04:	b25b      	sxtb	r3, r3
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	da14      	bge.n	8010a34 <f_read+0x1da>
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	6a1a      	ldr	r2, [r3, #32]
 8010a0e:	69bb      	ldr	r3, [r7, #24]
 8010a10:	1ad3      	subs	r3, r2, r3
 8010a12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010a14:	429a      	cmp	r2, r3
 8010a16:	d90d      	bls.n	8010a34 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	6a1a      	ldr	r2, [r3, #32]
 8010a1c:	69bb      	ldr	r3, [r7, #24]
 8010a1e:	1ad3      	subs	r3, r2, r3
 8010a20:	025b      	lsls	r3, r3, #9
 8010a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a24:	18d0      	adds	r0, r2, r3
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	3330      	adds	r3, #48	; 0x30
 8010a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a2e:	4619      	mov	r1, r3
 8010a30:	f7fe f92c 	bl	800ec8c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a36:	025b      	lsls	r3, r3, #9
 8010a38:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010a3a:	e05a      	b.n	8010af2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	6a1b      	ldr	r3, [r3, #32]
 8010a40:	69ba      	ldr	r2, [r7, #24]
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d038      	beq.n	8010ab8 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	7d1b      	ldrb	r3, [r3, #20]
 8010a4a:	b25b      	sxtb	r3, r3
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	da1d      	bge.n	8010a8c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a50:	697b      	ldr	r3, [r7, #20]
 8010a52:	7858      	ldrb	r0, [r3, #1]
 8010a54:	68fb      	ldr	r3, [r7, #12]
 8010a56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	6a1a      	ldr	r2, [r3, #32]
 8010a5e:	2301      	movs	r3, #1
 8010a60:	f7fe f872 	bl	800eb48 <disk_write>
 8010a64:	4603      	mov	r3, r0
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d009      	beq.n	8010a7e <f_read+0x224>
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	755a      	strb	r2, [r3, #21]
 8010a70:	697b      	ldr	r3, [r7, #20]
 8010a72:	2101      	movs	r1, #1
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fe f99d 	bl	800edb4 <unlock_fs>
 8010a7a:	2301      	movs	r3, #1
 8010a7c:	e057      	b.n	8010b2e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	7d1b      	ldrb	r3, [r3, #20]
 8010a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a86:	b2da      	uxtb	r2, r3
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010a8c:	697b      	ldr	r3, [r7, #20]
 8010a8e:	7858      	ldrb	r0, [r3, #1]
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a96:	2301      	movs	r3, #1
 8010a98:	69ba      	ldr	r2, [r7, #24]
 8010a9a:	f7fe f835 	bl	800eb08 <disk_read>
 8010a9e:	4603      	mov	r3, r0
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d009      	beq.n	8010ab8 <f_read+0x25e>
 8010aa4:	68fb      	ldr	r3, [r7, #12]
 8010aa6:	2201      	movs	r2, #1
 8010aa8:	755a      	strb	r2, [r3, #21]
 8010aaa:	697b      	ldr	r3, [r7, #20]
 8010aac:	2101      	movs	r1, #1
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fe f980 	bl	800edb4 <unlock_fs>
 8010ab4:	2301      	movs	r3, #1
 8010ab6:	e03a      	b.n	8010b2e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	69ba      	ldr	r2, [r7, #24]
 8010abc:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	699b      	ldr	r3, [r3, #24]
 8010ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ac6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010aca:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	429a      	cmp	r2, r3
 8010ad2:	d901      	bls.n	8010ad8 <f_read+0x27e>
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	699b      	ldr	r3, [r3, #24]
 8010ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010ae6:	4413      	add	r3, r2
 8010ae8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010aea:	4619      	mov	r1, r3
 8010aec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010aee:	f7fe f8cd 	bl	800ec8c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af6:	4413      	add	r3, r2
 8010af8:	627b      	str	r3, [r7, #36]	; 0x24
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	699a      	ldr	r2, [r3, #24]
 8010afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b00:	441a      	add	r2, r3
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	619a      	str	r2, [r3, #24]
 8010b06:	683b      	ldr	r3, [r7, #0]
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0c:	441a      	add	r2, r3
 8010b0e:	683b      	ldr	r3, [r7, #0]
 8010b10:	601a      	str	r2, [r3, #0]
 8010b12:	687a      	ldr	r2, [r7, #4]
 8010b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b16:	1ad3      	subs	r3, r2, r3
 8010b18:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f47f aee3 	bne.w	80108e8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010b22:	697b      	ldr	r3, [r7, #20]
 8010b24:	2100      	movs	r1, #0
 8010b26:	4618      	mov	r0, r3
 8010b28:	f7fe f944 	bl	800edb4 <unlock_fs>
 8010b2c:	2300      	movs	r3, #0
}
 8010b2e:	4618      	mov	r0, r3
 8010b30:	3738      	adds	r7, #56	; 0x38
 8010b32:	46bd      	mov	sp, r7
 8010b34:	bd80      	pop	{r7, pc}

08010b36 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8010b36:	b580      	push	{r7, lr}
 8010b38:	b088      	sub	sp, #32
 8010b3a:	af00      	add	r7, sp, #0
 8010b3c:	60f8      	str	r0, [r7, #12]
 8010b3e:	60b9      	str	r1, [r7, #8]
 8010b40:	607a      	str	r2, [r7, #4]
	int n = 0;
 8010b42:	2300      	movs	r3, #0
 8010b44:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010b4a:	e01b      	b.n	8010b84 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8010b4c:	f107 0310 	add.w	r3, r7, #16
 8010b50:	f107 0114 	add.w	r1, r7, #20
 8010b54:	2201      	movs	r2, #1
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7ff fe7f 	bl	801085a <f_read>
		if (rc != 1) break;
 8010b5c:	693b      	ldr	r3, [r7, #16]
 8010b5e:	2b01      	cmp	r3, #1
 8010b60:	d116      	bne.n	8010b90 <f_gets+0x5a>
		c = s[0];
 8010b62:	7d3b      	ldrb	r3, [r7, #20]
 8010b64:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8010b66:	7dfb      	ldrb	r3, [r7, #23]
 8010b68:	2b0d      	cmp	r3, #13
 8010b6a:	d100      	bne.n	8010b6e <f_gets+0x38>
 8010b6c:	e00a      	b.n	8010b84 <f_gets+0x4e>
		*p++ = c;
 8010b6e:	69bb      	ldr	r3, [r7, #24]
 8010b70:	1c5a      	adds	r2, r3, #1
 8010b72:	61ba      	str	r2, [r7, #24]
 8010b74:	7dfa      	ldrb	r2, [r7, #23]
 8010b76:	701a      	strb	r2, [r3, #0]
		n++;
 8010b78:	69fb      	ldr	r3, [r7, #28]
 8010b7a:	3301      	adds	r3, #1
 8010b7c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8010b7e:	7dfb      	ldrb	r3, [r7, #23]
 8010b80:	2b0a      	cmp	r3, #10
 8010b82:	d007      	beq.n	8010b94 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	3b01      	subs	r3, #1
 8010b88:	69fa      	ldr	r2, [r7, #28]
 8010b8a:	429a      	cmp	r2, r3
 8010b8c:	dbde      	blt.n	8010b4c <f_gets+0x16>
 8010b8e:	e002      	b.n	8010b96 <f_gets+0x60>
		if (rc != 1) break;
 8010b90:	bf00      	nop
 8010b92:	e000      	b.n	8010b96 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8010b94:	bf00      	nop
	}
	*p = 0;
 8010b96:	69bb      	ldr	r3, [r7, #24]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	2b00      	cmp	r3, #0
 8010ba0:	d001      	beq.n	8010ba6 <f_gets+0x70>
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	e000      	b.n	8010ba8 <f_gets+0x72>
 8010ba6:	2300      	movs	r3, #0
}
 8010ba8:	4618      	mov	r0, r3
 8010baa:	3720      	adds	r7, #32
 8010bac:	46bd      	mov	sp, r7
 8010bae:	bd80      	pop	{r7, pc}

08010bb0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010bb0:	b480      	push	{r7}
 8010bb2:	b087      	sub	sp, #28
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	60f8      	str	r0, [r7, #12]
 8010bb8:	60b9      	str	r1, [r7, #8]
 8010bba:	4613      	mov	r3, r2
 8010bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010bbe:	2301      	movs	r3, #1
 8010bc0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010bc6:	4b1f      	ldr	r3, [pc, #124]	; (8010c44 <FATFS_LinkDriverEx+0x94>)
 8010bc8:	7a5b      	ldrb	r3, [r3, #9]
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d131      	bne.n	8010c34 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010bd0:	4b1c      	ldr	r3, [pc, #112]	; (8010c44 <FATFS_LinkDriverEx+0x94>)
 8010bd2:	7a5b      	ldrb	r3, [r3, #9]
 8010bd4:	b2db      	uxtb	r3, r3
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	4b1a      	ldr	r3, [pc, #104]	; (8010c44 <FATFS_LinkDriverEx+0x94>)
 8010bda:	2100      	movs	r1, #0
 8010bdc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010bde:	4b19      	ldr	r3, [pc, #100]	; (8010c44 <FATFS_LinkDriverEx+0x94>)
 8010be0:	7a5b      	ldrb	r3, [r3, #9]
 8010be2:	b2db      	uxtb	r3, r3
 8010be4:	4a17      	ldr	r2, [pc, #92]	; (8010c44 <FATFS_LinkDriverEx+0x94>)
 8010be6:	009b      	lsls	r3, r3, #2
 8010be8:	4413      	add	r3, r2
 8010bea:	68fa      	ldr	r2, [r7, #12]
 8010bec:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010bee:	4b15      	ldr	r3, [pc, #84]	; (8010c44 <FATFS_LinkDriverEx+0x94>)
 8010bf0:	7a5b      	ldrb	r3, [r3, #9]
 8010bf2:	b2db      	uxtb	r3, r3
 8010bf4:	461a      	mov	r2, r3
 8010bf6:	4b13      	ldr	r3, [pc, #76]	; (8010c44 <FATFS_LinkDriverEx+0x94>)
 8010bf8:	4413      	add	r3, r2
 8010bfa:	79fa      	ldrb	r2, [r7, #7]
 8010bfc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010bfe:	4b11      	ldr	r3, [pc, #68]	; (8010c44 <FATFS_LinkDriverEx+0x94>)
 8010c00:	7a5b      	ldrb	r3, [r3, #9]
 8010c02:	b2db      	uxtb	r3, r3
 8010c04:	1c5a      	adds	r2, r3, #1
 8010c06:	b2d1      	uxtb	r1, r2
 8010c08:	4a0e      	ldr	r2, [pc, #56]	; (8010c44 <FATFS_LinkDriverEx+0x94>)
 8010c0a:	7251      	strb	r1, [r2, #9]
 8010c0c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010c0e:	7dbb      	ldrb	r3, [r7, #22]
 8010c10:	3330      	adds	r3, #48	; 0x30
 8010c12:	b2da      	uxtb	r2, r3
 8010c14:	68bb      	ldr	r3, [r7, #8]
 8010c16:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	3301      	adds	r3, #1
 8010c1c:	223a      	movs	r2, #58	; 0x3a
 8010c1e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010c20:	68bb      	ldr	r3, [r7, #8]
 8010c22:	3302      	adds	r3, #2
 8010c24:	222f      	movs	r2, #47	; 0x2f
 8010c26:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010c28:	68bb      	ldr	r3, [r7, #8]
 8010c2a:	3303      	adds	r3, #3
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010c30:	2300      	movs	r3, #0
 8010c32:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010c34:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c36:	4618      	mov	r0, r3
 8010c38:	371c      	adds	r7, #28
 8010c3a:	46bd      	mov	sp, r7
 8010c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c40:	4770      	bx	lr
 8010c42:	bf00      	nop
 8010c44:	20000738 	.word	0x20000738

08010c48 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b082      	sub	sp, #8
 8010c4c:	af00      	add	r7, sp, #0
 8010c4e:	6078      	str	r0, [r7, #4]
 8010c50:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010c52:	2200      	movs	r2, #0
 8010c54:	6839      	ldr	r1, [r7, #0]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f7ff ffaa 	bl	8010bb0 <FATFS_LinkDriverEx>
 8010c5c:	4603      	mov	r3, r0
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3708      	adds	r7, #8
 8010c62:	46bd      	mov	sp, r7
 8010c64:	bd80      	pop	{r7, pc}

08010c66 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010c66:	b580      	push	{r7, lr}
 8010c68:	b084      	sub	sp, #16
 8010c6a:	af00      	add	r7, sp, #0
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	6039      	str	r1, [r7, #0]
 8010c70:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8010c72:	2200      	movs	r2, #0
 8010c74:	2101      	movs	r1, #1
 8010c76:	2001      	movs	r0, #1
 8010c78:	f000 fa66 	bl	8011148 <osSemaphoreNew>
 8010c7c:	4602      	mov	r2, r0
 8010c7e:	683b      	ldr	r3, [r7, #0]
 8010c80:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8010c82:	683b      	ldr	r3, [r7, #0]
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	2b00      	cmp	r3, #0
 8010c88:	bf14      	ite	ne
 8010c8a:	2301      	movne	r3, #1
 8010c8c:	2300      	moveq	r3, #0
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	60fb      	str	r3, [r7, #12]

    return ret;
 8010c92:	68fb      	ldr	r3, [r7, #12]
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010c9c:	b580      	push	{r7, lr}
 8010c9e:	b082      	sub	sp, #8
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010ca4:	6878      	ldr	r0, [r7, #4]
 8010ca6:	f000 fba9 	bl	80113fc <osSemaphoreDelete>
#endif
    return 1;
 8010caa:	2301      	movs	r3, #1
}
 8010cac:	4618      	mov	r0, r3
 8010cae:	3708      	adds	r7, #8
 8010cb0:	46bd      	mov	sp, r7
 8010cb2:	bd80      	pop	{r7, pc}

08010cb4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010cb4:	b580      	push	{r7, lr}
 8010cb6:	b084      	sub	sp, #16
 8010cb8:	af00      	add	r7, sp, #0
 8010cba:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8010cc0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 fadb 	bl	8011280 <osSemaphoreAcquire>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d101      	bne.n	8010cd4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8010cd0:	2301      	movs	r3, #1
 8010cd2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010cd4:	68fb      	ldr	r3, [r7, #12]
}
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	3710      	adds	r7, #16
 8010cda:	46bd      	mov	sp, r7
 8010cdc:	bd80      	pop	{r7, pc}

08010cde <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010cde:	b580      	push	{r7, lr}
 8010ce0:	b082      	sub	sp, #8
 8010ce2:	af00      	add	r7, sp, #0
 8010ce4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010ce6:	6878      	ldr	r0, [r7, #4]
 8010ce8:	f000 fb30 	bl	801134c <osSemaphoreRelease>
#endif
}
 8010cec:	bf00      	nop
 8010cee:	3708      	adds	r7, #8
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}

08010cf4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010cf4:	b480      	push	{r7}
 8010cf6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8010cf8:	bf00      	nop
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr
	...

08010d04 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010d04:	b480      	push	{r7}
 8010d06:	b085      	sub	sp, #20
 8010d08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d0a:	f3ef 8305 	mrs	r3, IPSR
 8010d0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8010d10:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d10f      	bne.n	8010d36 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010d16:	f3ef 8310 	mrs	r3, PRIMASK
 8010d1a:	607b      	str	r3, [r7, #4]
  return(result);
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d105      	bne.n	8010d2e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010d22:	f3ef 8311 	mrs	r3, BASEPRI
 8010d26:	603b      	str	r3, [r7, #0]
  return(result);
 8010d28:	683b      	ldr	r3, [r7, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d007      	beq.n	8010d3e <osKernelInitialize+0x3a>
 8010d2e:	4b0e      	ldr	r3, [pc, #56]	; (8010d68 <osKernelInitialize+0x64>)
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	2b02      	cmp	r3, #2
 8010d34:	d103      	bne.n	8010d3e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8010d36:	f06f 0305 	mvn.w	r3, #5
 8010d3a:	60fb      	str	r3, [r7, #12]
 8010d3c:	e00c      	b.n	8010d58 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010d3e:	4b0a      	ldr	r3, [pc, #40]	; (8010d68 <osKernelInitialize+0x64>)
 8010d40:	681b      	ldr	r3, [r3, #0]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d105      	bne.n	8010d52 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010d46:	4b08      	ldr	r3, [pc, #32]	; (8010d68 <osKernelInitialize+0x64>)
 8010d48:	2201      	movs	r2, #1
 8010d4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	60fb      	str	r3, [r7, #12]
 8010d50:	e002      	b.n	8010d58 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8010d52:	f04f 33ff 	mov.w	r3, #4294967295
 8010d56:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010d58:	68fb      	ldr	r3, [r7, #12]
}
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	3714      	adds	r7, #20
 8010d5e:	46bd      	mov	sp, r7
 8010d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	20000744 	.word	0x20000744

08010d6c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b082      	sub	sp, #8
 8010d70:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8010d72:	f002 fc85 	bl	8013680 <xTaskGetSchedulerState>
 8010d76:	4603      	mov	r3, r0
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d004      	beq.n	8010d86 <osKernelGetState+0x1a>
 8010d7c:	2b02      	cmp	r3, #2
 8010d7e:	d105      	bne.n	8010d8c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8010d80:	2302      	movs	r3, #2
 8010d82:	607b      	str	r3, [r7, #4]
      break;
 8010d84:	e00c      	b.n	8010da0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8010d86:	2303      	movs	r3, #3
 8010d88:	607b      	str	r3, [r7, #4]
      break;
 8010d8a:	e009      	b.n	8010da0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8010d8c:	4b07      	ldr	r3, [pc, #28]	; (8010dac <osKernelGetState+0x40>)
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	d102      	bne.n	8010d9a <osKernelGetState+0x2e>
        state = osKernelReady;
 8010d94:	2301      	movs	r3, #1
 8010d96:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8010d98:	e001      	b.n	8010d9e <osKernelGetState+0x32>
        state = osKernelInactive;
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	607b      	str	r3, [r7, #4]
      break;
 8010d9e:	bf00      	nop
  }

  return (state);
 8010da0:	687b      	ldr	r3, [r7, #4]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3708      	adds	r7, #8
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	20000744 	.word	0x20000744

08010db0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8010db0:	b580      	push	{r7, lr}
 8010db2:	b084      	sub	sp, #16
 8010db4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010db6:	f3ef 8305 	mrs	r3, IPSR
 8010dba:	60bb      	str	r3, [r7, #8]
  return(result);
 8010dbc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d10f      	bne.n	8010de2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8010dc6:	607b      	str	r3, [r7, #4]
  return(result);
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2b00      	cmp	r3, #0
 8010dcc:	d105      	bne.n	8010dda <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010dce:	f3ef 8311 	mrs	r3, BASEPRI
 8010dd2:	603b      	str	r3, [r7, #0]
  return(result);
 8010dd4:	683b      	ldr	r3, [r7, #0]
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d007      	beq.n	8010dea <osKernelStart+0x3a>
 8010dda:	4b0f      	ldr	r3, [pc, #60]	; (8010e18 <osKernelStart+0x68>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	2b02      	cmp	r3, #2
 8010de0:	d103      	bne.n	8010dea <osKernelStart+0x3a>
    stat = osErrorISR;
 8010de2:	f06f 0305 	mvn.w	r3, #5
 8010de6:	60fb      	str	r3, [r7, #12]
 8010de8:	e010      	b.n	8010e0c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010dea:	4b0b      	ldr	r3, [pc, #44]	; (8010e18 <osKernelStart+0x68>)
 8010dec:	681b      	ldr	r3, [r3, #0]
 8010dee:	2b01      	cmp	r3, #1
 8010df0:	d109      	bne.n	8010e06 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010df2:	f7ff ff7f 	bl	8010cf4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010df6:	4b08      	ldr	r3, [pc, #32]	; (8010e18 <osKernelStart+0x68>)
 8010df8:	2202      	movs	r2, #2
 8010dfa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010dfc:	f001 ffd2 	bl	8012da4 <vTaskStartScheduler>
      stat = osOK;
 8010e00:	2300      	movs	r3, #0
 8010e02:	60fb      	str	r3, [r7, #12]
 8010e04:	e002      	b.n	8010e0c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8010e06:	f04f 33ff 	mov.w	r3, #4294967295
 8010e0a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8010e0c:	68fb      	ldr	r3, [r7, #12]
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3710      	adds	r7, #16
 8010e12:	46bd      	mov	sp, r7
 8010e14:	bd80      	pop	{r7, pc}
 8010e16:	bf00      	nop
 8010e18:	20000744 	.word	0x20000744

08010e1c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b084      	sub	sp, #16
 8010e20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e22:	f3ef 8305 	mrs	r3, IPSR
 8010e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8010e28:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d10f      	bne.n	8010e4e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e2e:	f3ef 8310 	mrs	r3, PRIMASK
 8010e32:	607b      	str	r3, [r7, #4]
  return(result);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d105      	bne.n	8010e46 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e3a:	f3ef 8311 	mrs	r3, BASEPRI
 8010e3e:	603b      	str	r3, [r7, #0]
  return(result);
 8010e40:	683b      	ldr	r3, [r7, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d007      	beq.n	8010e56 <osKernelGetTickCount+0x3a>
 8010e46:	4b08      	ldr	r3, [pc, #32]	; (8010e68 <osKernelGetTickCount+0x4c>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	2b02      	cmp	r3, #2
 8010e4c:	d103      	bne.n	8010e56 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8010e4e:	f002 f8d5 	bl	8012ffc <xTaskGetTickCountFromISR>
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	e002      	b.n	8010e5c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8010e56:	f002 f8c1 	bl	8012fdc <xTaskGetTickCount>
 8010e5a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8010e5c:	68fb      	ldr	r3, [r7, #12]
}
 8010e5e:	4618      	mov	r0, r3
 8010e60:	3710      	adds	r7, #16
 8010e62:	46bd      	mov	sp, r7
 8010e64:	bd80      	pop	{r7, pc}
 8010e66:	bf00      	nop
 8010e68:	20000744 	.word	0x20000744

08010e6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010e6c:	b580      	push	{r7, lr}
 8010e6e:	b090      	sub	sp, #64	; 0x40
 8010e70:	af04      	add	r7, sp, #16
 8010e72:	60f8      	str	r0, [r7, #12]
 8010e74:	60b9      	str	r1, [r7, #8]
 8010e76:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e7c:	f3ef 8305 	mrs	r3, IPSR
 8010e80:	61fb      	str	r3, [r7, #28]
  return(result);
 8010e82:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	f040 808f 	bne.w	8010fa8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010e8a:	f3ef 8310 	mrs	r3, PRIMASK
 8010e8e:	61bb      	str	r3, [r7, #24]
  return(result);
 8010e90:	69bb      	ldr	r3, [r7, #24]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d105      	bne.n	8010ea2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010e96:	f3ef 8311 	mrs	r3, BASEPRI
 8010e9a:	617b      	str	r3, [r7, #20]
  return(result);
 8010e9c:	697b      	ldr	r3, [r7, #20]
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	d003      	beq.n	8010eaa <osThreadNew+0x3e>
 8010ea2:	4b44      	ldr	r3, [pc, #272]	; (8010fb4 <osThreadNew+0x148>)
 8010ea4:	681b      	ldr	r3, [r3, #0]
 8010ea6:	2b02      	cmp	r3, #2
 8010ea8:	d07e      	beq.n	8010fa8 <osThreadNew+0x13c>
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d07b      	beq.n	8010fa8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8010eb0:	2380      	movs	r3, #128	; 0x80
 8010eb2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8010eb4:	2318      	movs	r3, #24
 8010eb6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8010eb8:	2300      	movs	r3, #0
 8010eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8010ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ec0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d045      	beq.n	8010f54 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d002      	beq.n	8010ed6 <osThreadNew+0x6a>
        name = attr->name;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	699b      	ldr	r3, [r3, #24]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d002      	beq.n	8010ee4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	699b      	ldr	r3, [r3, #24]
 8010ee2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	d008      	beq.n	8010efc <osThreadNew+0x90>
 8010eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eec:	2b38      	cmp	r3, #56	; 0x38
 8010eee:	d805      	bhi.n	8010efc <osThreadNew+0x90>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	685b      	ldr	r3, [r3, #4]
 8010ef4:	f003 0301 	and.w	r3, r3, #1
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d001      	beq.n	8010f00 <osThreadNew+0x94>
        return (NULL);
 8010efc:	2300      	movs	r3, #0
 8010efe:	e054      	b.n	8010faa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	695b      	ldr	r3, [r3, #20]
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d003      	beq.n	8010f10 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	695b      	ldr	r3, [r3, #20]
 8010f0c:	089b      	lsrs	r3, r3, #2
 8010f0e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	689b      	ldr	r3, [r3, #8]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d00e      	beq.n	8010f36 <osThreadNew+0xca>
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	2bbb      	cmp	r3, #187	; 0xbb
 8010f1e:	d90a      	bls.n	8010f36 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d006      	beq.n	8010f36 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	695b      	ldr	r3, [r3, #20]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d002      	beq.n	8010f36 <osThreadNew+0xca>
        mem = 1;
 8010f30:	2301      	movs	r3, #1
 8010f32:	623b      	str	r3, [r7, #32]
 8010f34:	e010      	b.n	8010f58 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d10c      	bne.n	8010f58 <osThreadNew+0xec>
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	68db      	ldr	r3, [r3, #12]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d108      	bne.n	8010f58 <osThreadNew+0xec>
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	691b      	ldr	r3, [r3, #16]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	d104      	bne.n	8010f58 <osThreadNew+0xec>
          mem = 0;
 8010f4e:	2300      	movs	r3, #0
 8010f50:	623b      	str	r3, [r7, #32]
 8010f52:	e001      	b.n	8010f58 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8010f54:	2300      	movs	r3, #0
 8010f56:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8010f58:	6a3b      	ldr	r3, [r7, #32]
 8010f5a:	2b01      	cmp	r3, #1
 8010f5c:	d110      	bne.n	8010f80 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8010f62:	687a      	ldr	r2, [r7, #4]
 8010f64:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010f66:	9202      	str	r2, [sp, #8]
 8010f68:	9301      	str	r3, [sp, #4]
 8010f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f6c:	9300      	str	r3, [sp, #0]
 8010f6e:	68bb      	ldr	r3, [r7, #8]
 8010f70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	f001 fd29 	bl	80129cc <xTaskCreateStatic>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	613b      	str	r3, [r7, #16]
 8010f7e:	e013      	b.n	8010fa8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8010f80:	6a3b      	ldr	r3, [r7, #32]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d110      	bne.n	8010fa8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	f107 0310 	add.w	r3, r7, #16
 8010f8e:	9301      	str	r3, [sp, #4]
 8010f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f98:	68f8      	ldr	r0, [r7, #12]
 8010f9a:	f001 fd74 	bl	8012a86 <xTaskCreate>
 8010f9e:	4603      	mov	r3, r0
 8010fa0:	2b01      	cmp	r3, #1
 8010fa2:	d001      	beq.n	8010fa8 <osThreadNew+0x13c>
          hTask = NULL;
 8010fa4:	2300      	movs	r3, #0
 8010fa6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010fa8:	693b      	ldr	r3, [r7, #16]
}
 8010faa:	4618      	mov	r0, r3
 8010fac:	3730      	adds	r7, #48	; 0x30
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	20000744 	.word	0x20000744

08010fb8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b086      	sub	sp, #24
 8010fbc:	af00      	add	r7, sp, #0
 8010fbe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010fc0:	f3ef 8305 	mrs	r3, IPSR
 8010fc4:	613b      	str	r3, [r7, #16]
  return(result);
 8010fc6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d10f      	bne.n	8010fec <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8010fd0:	60fb      	str	r3, [r7, #12]
  return(result);
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d105      	bne.n	8010fe4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8010fd8:	f3ef 8311 	mrs	r3, BASEPRI
 8010fdc:	60bb      	str	r3, [r7, #8]
  return(result);
 8010fde:	68bb      	ldr	r3, [r7, #8]
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d007      	beq.n	8010ff4 <osDelay+0x3c>
 8010fe4:	4b0a      	ldr	r3, [pc, #40]	; (8011010 <osDelay+0x58>)
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	2b02      	cmp	r3, #2
 8010fea:	d103      	bne.n	8010ff4 <osDelay+0x3c>
    stat = osErrorISR;
 8010fec:	f06f 0305 	mvn.w	r3, #5
 8010ff0:	617b      	str	r3, [r7, #20]
 8010ff2:	e007      	b.n	8011004 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8010ff4:	2300      	movs	r3, #0
 8010ff6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d002      	beq.n	8011004 <osDelay+0x4c>
      vTaskDelay(ticks);
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f001 fe9c 	bl	8012d3c <vTaskDelay>
    }
  }

  return (stat);
 8011004:	697b      	ldr	r3, [r7, #20]
}
 8011006:	4618      	mov	r0, r3
 8011008:	3718      	adds	r7, #24
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
 801100e:	bf00      	nop
 8011010:	20000744 	.word	0x20000744

08011014 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8011014:	b580      	push	{r7, lr}
 8011016:	b08a      	sub	sp, #40	; 0x28
 8011018:	af00      	add	r7, sp, #0
 801101a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 801101c:	2300      	movs	r3, #0
 801101e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011020:	f3ef 8305 	mrs	r3, IPSR
 8011024:	613b      	str	r3, [r7, #16]
  return(result);
 8011026:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8011028:	2b00      	cmp	r3, #0
 801102a:	f040 8085 	bne.w	8011138 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801102e:	f3ef 8310 	mrs	r3, PRIMASK
 8011032:	60fb      	str	r3, [r7, #12]
  return(result);
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	2b00      	cmp	r3, #0
 8011038:	d105      	bne.n	8011046 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801103a:	f3ef 8311 	mrs	r3, BASEPRI
 801103e:	60bb      	str	r3, [r7, #8]
  return(result);
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	2b00      	cmp	r3, #0
 8011044:	d003      	beq.n	801104e <osMutexNew+0x3a>
 8011046:	4b3f      	ldr	r3, [pc, #252]	; (8011144 <osMutexNew+0x130>)
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	2b02      	cmp	r3, #2
 801104c:	d074      	beq.n	8011138 <osMutexNew+0x124>
    if (attr != NULL) {
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d003      	beq.n	801105c <osMutexNew+0x48>
      type = attr->attr_bits;
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	685b      	ldr	r3, [r3, #4]
 8011058:	623b      	str	r3, [r7, #32]
 801105a:	e001      	b.n	8011060 <osMutexNew+0x4c>
    } else {
      type = 0U;
 801105c:	2300      	movs	r3, #0
 801105e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8011060:	6a3b      	ldr	r3, [r7, #32]
 8011062:	f003 0301 	and.w	r3, r3, #1
 8011066:	2b00      	cmp	r3, #0
 8011068:	d002      	beq.n	8011070 <osMutexNew+0x5c>
      rmtx = 1U;
 801106a:	2301      	movs	r3, #1
 801106c:	61fb      	str	r3, [r7, #28]
 801106e:	e001      	b.n	8011074 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8011070:	2300      	movs	r3, #0
 8011072:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8011074:	6a3b      	ldr	r3, [r7, #32]
 8011076:	f003 0308 	and.w	r3, r3, #8
 801107a:	2b00      	cmp	r3, #0
 801107c:	d15c      	bne.n	8011138 <osMutexNew+0x124>
      mem = -1;
 801107e:	f04f 33ff 	mov.w	r3, #4294967295
 8011082:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d015      	beq.n	80110b6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	689b      	ldr	r3, [r3, #8]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d006      	beq.n	80110a0 <osMutexNew+0x8c>
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	68db      	ldr	r3, [r3, #12]
 8011096:	2b4f      	cmp	r3, #79	; 0x4f
 8011098:	d902      	bls.n	80110a0 <osMutexNew+0x8c>
          mem = 1;
 801109a:	2301      	movs	r3, #1
 801109c:	61bb      	str	r3, [r7, #24]
 801109e:	e00c      	b.n	80110ba <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	689b      	ldr	r3, [r3, #8]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d108      	bne.n	80110ba <osMutexNew+0xa6>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d104      	bne.n	80110ba <osMutexNew+0xa6>
            mem = 0;
 80110b0:	2300      	movs	r3, #0
 80110b2:	61bb      	str	r3, [r7, #24]
 80110b4:	e001      	b.n	80110ba <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80110b6:	2300      	movs	r3, #0
 80110b8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80110ba:	69bb      	ldr	r3, [r7, #24]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d112      	bne.n	80110e6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80110c0:	69fb      	ldr	r3, [r7, #28]
 80110c2:	2b00      	cmp	r3, #0
 80110c4:	d007      	beq.n	80110d6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80110c6:	687b      	ldr	r3, [r7, #4]
 80110c8:	689b      	ldr	r3, [r3, #8]
 80110ca:	4619      	mov	r1, r3
 80110cc:	2004      	movs	r0, #4
 80110ce:	f000 fd94 	bl	8011bfa <xQueueCreateMutexStatic>
 80110d2:	6278      	str	r0, [r7, #36]	; 0x24
 80110d4:	e016      	b.n	8011104 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	689b      	ldr	r3, [r3, #8]
 80110da:	4619      	mov	r1, r3
 80110dc:	2001      	movs	r0, #1
 80110de:	f000 fd8c 	bl	8011bfa <xQueueCreateMutexStatic>
 80110e2:	6278      	str	r0, [r7, #36]	; 0x24
 80110e4:	e00e      	b.n	8011104 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80110e6:	69bb      	ldr	r3, [r7, #24]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d10b      	bne.n	8011104 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d004      	beq.n	80110fc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80110f2:	2004      	movs	r0, #4
 80110f4:	f000 fd69 	bl	8011bca <xQueueCreateMutex>
 80110f8:	6278      	str	r0, [r7, #36]	; 0x24
 80110fa:	e003      	b.n	8011104 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80110fc:	2001      	movs	r0, #1
 80110fe:	f000 fd64 	bl	8011bca <xQueueCreateMutex>
 8011102:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8011104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011106:	2b00      	cmp	r3, #0
 8011108:	d00c      	beq.n	8011124 <osMutexNew+0x110>
        if (attr != NULL) {
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d003      	beq.n	8011118 <osMutexNew+0x104>
          name = attr->name;
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	681b      	ldr	r3, [r3, #0]
 8011114:	617b      	str	r3, [r7, #20]
 8011116:	e001      	b.n	801111c <osMutexNew+0x108>
        } else {
          name = NULL;
 8011118:	2300      	movs	r3, #0
 801111a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 801111c:	6979      	ldr	r1, [r7, #20]
 801111e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011120:	f001 fbcc 	bl	80128bc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8011124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011126:	2b00      	cmp	r3, #0
 8011128:	d006      	beq.n	8011138 <osMutexNew+0x124>
 801112a:	69fb      	ldr	r3, [r7, #28]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d003      	beq.n	8011138 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8011130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011132:	f043 0301 	orr.w	r3, r3, #1
 8011136:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8011138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801113a:	4618      	mov	r0, r3
 801113c:	3728      	adds	r7, #40	; 0x28
 801113e:	46bd      	mov	sp, r7
 8011140:	bd80      	pop	{r7, pc}
 8011142:	bf00      	nop
 8011144:	20000744 	.word	0x20000744

08011148 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011148:	b580      	push	{r7, lr}
 801114a:	b08c      	sub	sp, #48	; 0x30
 801114c:	af02      	add	r7, sp, #8
 801114e:	60f8      	str	r0, [r7, #12]
 8011150:	60b9      	str	r1, [r7, #8]
 8011152:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011154:	2300      	movs	r3, #0
 8011156:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011158:	f3ef 8305 	mrs	r3, IPSR
 801115c:	61bb      	str	r3, [r7, #24]
  return(result);
 801115e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011160:	2b00      	cmp	r3, #0
 8011162:	f040 8086 	bne.w	8011272 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011166:	f3ef 8310 	mrs	r3, PRIMASK
 801116a:	617b      	str	r3, [r7, #20]
  return(result);
 801116c:	697b      	ldr	r3, [r7, #20]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d105      	bne.n	801117e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011172:	f3ef 8311 	mrs	r3, BASEPRI
 8011176:	613b      	str	r3, [r7, #16]
  return(result);
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	2b00      	cmp	r3, #0
 801117c:	d003      	beq.n	8011186 <osSemaphoreNew+0x3e>
 801117e:	4b3f      	ldr	r3, [pc, #252]	; (801127c <osSemaphoreNew+0x134>)
 8011180:	681b      	ldr	r3, [r3, #0]
 8011182:	2b02      	cmp	r3, #2
 8011184:	d075      	beq.n	8011272 <osSemaphoreNew+0x12a>
 8011186:	68fb      	ldr	r3, [r7, #12]
 8011188:	2b00      	cmp	r3, #0
 801118a:	d072      	beq.n	8011272 <osSemaphoreNew+0x12a>
 801118c:	68ba      	ldr	r2, [r7, #8]
 801118e:	68fb      	ldr	r3, [r7, #12]
 8011190:	429a      	cmp	r2, r3
 8011192:	d86e      	bhi.n	8011272 <osSemaphoreNew+0x12a>
    mem = -1;
 8011194:	f04f 33ff 	mov.w	r3, #4294967295
 8011198:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d015      	beq.n	80111cc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	689b      	ldr	r3, [r3, #8]
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d006      	beq.n	80111b6 <osSemaphoreNew+0x6e>
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	68db      	ldr	r3, [r3, #12]
 80111ac:	2b4f      	cmp	r3, #79	; 0x4f
 80111ae:	d902      	bls.n	80111b6 <osSemaphoreNew+0x6e>
        mem = 1;
 80111b0:	2301      	movs	r3, #1
 80111b2:	623b      	str	r3, [r7, #32]
 80111b4:	e00c      	b.n	80111d0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	689b      	ldr	r3, [r3, #8]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d108      	bne.n	80111d0 <osSemaphoreNew+0x88>
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	68db      	ldr	r3, [r3, #12]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d104      	bne.n	80111d0 <osSemaphoreNew+0x88>
          mem = 0;
 80111c6:	2300      	movs	r3, #0
 80111c8:	623b      	str	r3, [r7, #32]
 80111ca:	e001      	b.n	80111d0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80111cc:	2300      	movs	r3, #0
 80111ce:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80111d0:	6a3b      	ldr	r3, [r7, #32]
 80111d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111d6:	d04c      	beq.n	8011272 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d128      	bne.n	8011230 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80111de:	6a3b      	ldr	r3, [r7, #32]
 80111e0:	2b01      	cmp	r3, #1
 80111e2:	d10a      	bne.n	80111fa <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	689b      	ldr	r3, [r3, #8]
 80111e8:	2203      	movs	r2, #3
 80111ea:	9200      	str	r2, [sp, #0]
 80111ec:	2200      	movs	r2, #0
 80111ee:	2100      	movs	r1, #0
 80111f0:	2001      	movs	r0, #1
 80111f2:	f000 fbf5 	bl	80119e0 <xQueueGenericCreateStatic>
 80111f6:	6278      	str	r0, [r7, #36]	; 0x24
 80111f8:	e005      	b.n	8011206 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80111fa:	2203      	movs	r2, #3
 80111fc:	2100      	movs	r1, #0
 80111fe:	2001      	movs	r0, #1
 8011200:	f000 fc66 	bl	8011ad0 <xQueueGenericCreate>
 8011204:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011208:	2b00      	cmp	r3, #0
 801120a:	d022      	beq.n	8011252 <osSemaphoreNew+0x10a>
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d01f      	beq.n	8011252 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011212:	2300      	movs	r3, #0
 8011214:	2200      	movs	r2, #0
 8011216:	2100      	movs	r1, #0
 8011218:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801121a:	f000 fd73 	bl	8011d04 <xQueueGenericSend>
 801121e:	4603      	mov	r3, r0
 8011220:	2b01      	cmp	r3, #1
 8011222:	d016      	beq.n	8011252 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8011224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011226:	f001 f9fd 	bl	8012624 <vQueueDelete>
            hSemaphore = NULL;
 801122a:	2300      	movs	r3, #0
 801122c:	627b      	str	r3, [r7, #36]	; 0x24
 801122e:	e010      	b.n	8011252 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8011230:	6a3b      	ldr	r3, [r7, #32]
 8011232:	2b01      	cmp	r3, #1
 8011234:	d108      	bne.n	8011248 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	689b      	ldr	r3, [r3, #8]
 801123a:	461a      	mov	r2, r3
 801123c:	68b9      	ldr	r1, [r7, #8]
 801123e:	68f8      	ldr	r0, [r7, #12]
 8011240:	f000 fcf6 	bl	8011c30 <xQueueCreateCountingSemaphoreStatic>
 8011244:	6278      	str	r0, [r7, #36]	; 0x24
 8011246:	e004      	b.n	8011252 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011248:	68b9      	ldr	r1, [r7, #8]
 801124a:	68f8      	ldr	r0, [r7, #12]
 801124c:	f000 fd27 	bl	8011c9e <xQueueCreateCountingSemaphore>
 8011250:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011254:	2b00      	cmp	r3, #0
 8011256:	d00c      	beq.n	8011272 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d003      	beq.n	8011266 <osSemaphoreNew+0x11e>
          name = attr->name;
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	61fb      	str	r3, [r7, #28]
 8011264:	e001      	b.n	801126a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8011266:	2300      	movs	r3, #0
 8011268:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801126a:	69f9      	ldr	r1, [r7, #28]
 801126c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801126e:	f001 fb25 	bl	80128bc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011274:	4618      	mov	r0, r3
 8011276:	3728      	adds	r7, #40	; 0x28
 8011278:	46bd      	mov	sp, r7
 801127a:	bd80      	pop	{r7, pc}
 801127c:	20000744 	.word	0x20000744

08011280 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011280:	b580      	push	{r7, lr}
 8011282:	b088      	sub	sp, #32
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
 8011288:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801128e:	2300      	movs	r3, #0
 8011290:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8011292:	69bb      	ldr	r3, [r7, #24]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d103      	bne.n	80112a0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011298:	f06f 0303 	mvn.w	r3, #3
 801129c:	61fb      	str	r3, [r7, #28]
 801129e:	e04b      	b.n	8011338 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112a0:	f3ef 8305 	mrs	r3, IPSR
 80112a4:	617b      	str	r3, [r7, #20]
  return(result);
 80112a6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	d10f      	bne.n	80112cc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80112ac:	f3ef 8310 	mrs	r3, PRIMASK
 80112b0:	613b      	str	r3, [r7, #16]
  return(result);
 80112b2:	693b      	ldr	r3, [r7, #16]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d105      	bne.n	80112c4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80112b8:	f3ef 8311 	mrs	r3, BASEPRI
 80112bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d026      	beq.n	8011312 <osSemaphoreAcquire+0x92>
 80112c4:	4b1f      	ldr	r3, [pc, #124]	; (8011344 <osSemaphoreAcquire+0xc4>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b02      	cmp	r3, #2
 80112ca:	d122      	bne.n	8011312 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80112cc:	683b      	ldr	r3, [r7, #0]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d003      	beq.n	80112da <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80112d2:	f06f 0303 	mvn.w	r3, #3
 80112d6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80112d8:	e02d      	b.n	8011336 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80112da:	2300      	movs	r3, #0
 80112dc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80112de:	f107 0308 	add.w	r3, r7, #8
 80112e2:	461a      	mov	r2, r3
 80112e4:	2100      	movs	r1, #0
 80112e6:	69b8      	ldr	r0, [r7, #24]
 80112e8:	f001 f91c 	bl	8012524 <xQueueReceiveFromISR>
 80112ec:	4603      	mov	r3, r0
 80112ee:	2b01      	cmp	r3, #1
 80112f0:	d003      	beq.n	80112fa <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80112f2:	f06f 0302 	mvn.w	r3, #2
 80112f6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80112f8:	e01d      	b.n	8011336 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 80112fa:	68bb      	ldr	r3, [r7, #8]
 80112fc:	2b00      	cmp	r3, #0
 80112fe:	d01a      	beq.n	8011336 <osSemaphoreAcquire+0xb6>
 8011300:	4b11      	ldr	r3, [pc, #68]	; (8011348 <osSemaphoreAcquire+0xc8>)
 8011302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011306:	601a      	str	r2, [r3, #0]
 8011308:	f3bf 8f4f 	dsb	sy
 801130c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8011310:	e011      	b.n	8011336 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011312:	6839      	ldr	r1, [r7, #0]
 8011314:	69b8      	ldr	r0, [r7, #24]
 8011316:	f000 fff9 	bl	801230c <xQueueSemaphoreTake>
 801131a:	4603      	mov	r3, r0
 801131c:	2b01      	cmp	r3, #1
 801131e:	d00b      	beq.n	8011338 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d003      	beq.n	801132e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8011326:	f06f 0301 	mvn.w	r3, #1
 801132a:	61fb      	str	r3, [r7, #28]
 801132c:	e004      	b.n	8011338 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801132e:	f06f 0302 	mvn.w	r3, #2
 8011332:	61fb      	str	r3, [r7, #28]
 8011334:	e000      	b.n	8011338 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8011336:	bf00      	nop
      }
    }
  }

  return (stat);
 8011338:	69fb      	ldr	r3, [r7, #28]
}
 801133a:	4618      	mov	r0, r3
 801133c:	3720      	adds	r7, #32
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}
 8011342:	bf00      	nop
 8011344:	20000744 	.word	0x20000744
 8011348:	e000ed04 	.word	0xe000ed04

0801134c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801134c:	b580      	push	{r7, lr}
 801134e:	b088      	sub	sp, #32
 8011350:	af00      	add	r7, sp, #0
 8011352:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011358:	2300      	movs	r3, #0
 801135a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801135c:	69bb      	ldr	r3, [r7, #24]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d103      	bne.n	801136a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011362:	f06f 0303 	mvn.w	r3, #3
 8011366:	61fb      	str	r3, [r7, #28]
 8011368:	e03e      	b.n	80113e8 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801136a:	f3ef 8305 	mrs	r3, IPSR
 801136e:	617b      	str	r3, [r7, #20]
  return(result);
 8011370:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8011372:	2b00      	cmp	r3, #0
 8011374:	d10f      	bne.n	8011396 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011376:	f3ef 8310 	mrs	r3, PRIMASK
 801137a:	613b      	str	r3, [r7, #16]
  return(result);
 801137c:	693b      	ldr	r3, [r7, #16]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d105      	bne.n	801138e <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011382:	f3ef 8311 	mrs	r3, BASEPRI
 8011386:	60fb      	str	r3, [r7, #12]
  return(result);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	2b00      	cmp	r3, #0
 801138c:	d01e      	beq.n	80113cc <osSemaphoreRelease+0x80>
 801138e:	4b19      	ldr	r3, [pc, #100]	; (80113f4 <osSemaphoreRelease+0xa8>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	2b02      	cmp	r3, #2
 8011394:	d11a      	bne.n	80113cc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8011396:	2300      	movs	r3, #0
 8011398:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801139a:	f107 0308 	add.w	r3, r7, #8
 801139e:	4619      	mov	r1, r3
 80113a0:	69b8      	ldr	r0, [r7, #24]
 80113a2:	f000 fe45 	bl	8012030 <xQueueGiveFromISR>
 80113a6:	4603      	mov	r3, r0
 80113a8:	2b01      	cmp	r3, #1
 80113aa:	d003      	beq.n	80113b4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80113ac:	f06f 0302 	mvn.w	r3, #2
 80113b0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80113b2:	e018      	b.n	80113e6 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d015      	beq.n	80113e6 <osSemaphoreRelease+0x9a>
 80113ba:	4b0f      	ldr	r3, [pc, #60]	; (80113f8 <osSemaphoreRelease+0xac>)
 80113bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113c0:	601a      	str	r2, [r3, #0]
 80113c2:	f3bf 8f4f 	dsb	sy
 80113c6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80113ca:	e00c      	b.n	80113e6 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80113cc:	2300      	movs	r3, #0
 80113ce:	2200      	movs	r2, #0
 80113d0:	2100      	movs	r1, #0
 80113d2:	69b8      	ldr	r0, [r7, #24]
 80113d4:	f000 fc96 	bl	8011d04 <xQueueGenericSend>
 80113d8:	4603      	mov	r3, r0
 80113da:	2b01      	cmp	r3, #1
 80113dc:	d004      	beq.n	80113e8 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80113de:	f06f 0302 	mvn.w	r3, #2
 80113e2:	61fb      	str	r3, [r7, #28]
 80113e4:	e000      	b.n	80113e8 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80113e6:	bf00      	nop
    }
  }

  return (stat);
 80113e8:	69fb      	ldr	r3, [r7, #28]
}
 80113ea:	4618      	mov	r0, r3
 80113ec:	3720      	adds	r7, #32
 80113ee:	46bd      	mov	sp, r7
 80113f0:	bd80      	pop	{r7, pc}
 80113f2:	bf00      	nop
 80113f4:	20000744 	.word	0x20000744
 80113f8:	e000ed04 	.word	0xe000ed04

080113fc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b088      	sub	sp, #32
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011408:	f3ef 8305 	mrs	r3, IPSR
 801140c:	617b      	str	r3, [r7, #20]
  return(result);
 801140e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011410:	2b00      	cmp	r3, #0
 8011412:	d10f      	bne.n	8011434 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011414:	f3ef 8310 	mrs	r3, PRIMASK
 8011418:	613b      	str	r3, [r7, #16]
  return(result);
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d105      	bne.n	801142c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011420:	f3ef 8311 	mrs	r3, BASEPRI
 8011424:	60fb      	str	r3, [r7, #12]
  return(result);
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d007      	beq.n	801143c <osSemaphoreDelete+0x40>
 801142c:	4b0d      	ldr	r3, [pc, #52]	; (8011464 <osSemaphoreDelete+0x68>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	2b02      	cmp	r3, #2
 8011432:	d103      	bne.n	801143c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8011434:	f06f 0305 	mvn.w	r3, #5
 8011438:	61fb      	str	r3, [r7, #28]
 801143a:	e00e      	b.n	801145a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 801143c:	69bb      	ldr	r3, [r7, #24]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d103      	bne.n	801144a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8011442:	f06f 0303 	mvn.w	r3, #3
 8011446:	61fb      	str	r3, [r7, #28]
 8011448:	e007      	b.n	801145a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801144a:	69b8      	ldr	r0, [r7, #24]
 801144c:	f001 fa60 	bl	8012910 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011450:	2300      	movs	r3, #0
 8011452:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8011454:	69b8      	ldr	r0, [r7, #24]
 8011456:	f001 f8e5 	bl	8012624 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801145a:	69fb      	ldr	r3, [r7, #28]
}
 801145c:	4618      	mov	r0, r3
 801145e:	3720      	adds	r7, #32
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	20000744 	.word	0x20000744

08011468 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011468:	b580      	push	{r7, lr}
 801146a:	b08c      	sub	sp, #48	; 0x30
 801146c:	af02      	add	r7, sp, #8
 801146e:	60f8      	str	r0, [r7, #12]
 8011470:	60b9      	str	r1, [r7, #8]
 8011472:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011474:	2300      	movs	r3, #0
 8011476:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011478:	f3ef 8305 	mrs	r3, IPSR
 801147c:	61bb      	str	r3, [r7, #24]
  return(result);
 801147e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011480:	2b00      	cmp	r3, #0
 8011482:	d16f      	bne.n	8011564 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011484:	f3ef 8310 	mrs	r3, PRIMASK
 8011488:	617b      	str	r3, [r7, #20]
  return(result);
 801148a:	697b      	ldr	r3, [r7, #20]
 801148c:	2b00      	cmp	r3, #0
 801148e:	d105      	bne.n	801149c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8011490:	f3ef 8311 	mrs	r3, BASEPRI
 8011494:	613b      	str	r3, [r7, #16]
  return(result);
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	2b00      	cmp	r3, #0
 801149a:	d003      	beq.n	80114a4 <osMessageQueueNew+0x3c>
 801149c:	4b34      	ldr	r3, [pc, #208]	; (8011570 <osMessageQueueNew+0x108>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	2b02      	cmp	r3, #2
 80114a2:	d05f      	beq.n	8011564 <osMessageQueueNew+0xfc>
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d05c      	beq.n	8011564 <osMessageQueueNew+0xfc>
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d059      	beq.n	8011564 <osMessageQueueNew+0xfc>
    mem = -1;
 80114b0:	f04f 33ff 	mov.w	r3, #4294967295
 80114b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d029      	beq.n	8011510 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	689b      	ldr	r3, [r3, #8]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d012      	beq.n	80114ea <osMessageQueueNew+0x82>
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	68db      	ldr	r3, [r3, #12]
 80114c8:	2b4f      	cmp	r3, #79	; 0x4f
 80114ca:	d90e      	bls.n	80114ea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00a      	beq.n	80114ea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	695a      	ldr	r2, [r3, #20]
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	68b9      	ldr	r1, [r7, #8]
 80114dc:	fb01 f303 	mul.w	r3, r1, r3
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d302      	bcc.n	80114ea <osMessageQueueNew+0x82>
        mem = 1;
 80114e4:	2301      	movs	r3, #1
 80114e6:	623b      	str	r3, [r7, #32]
 80114e8:	e014      	b.n	8011514 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	689b      	ldr	r3, [r3, #8]
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d110      	bne.n	8011514 <osMessageQueueNew+0xac>
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	68db      	ldr	r3, [r3, #12]
 80114f6:	2b00      	cmp	r3, #0
 80114f8:	d10c      	bne.n	8011514 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80114fa:	687b      	ldr	r3, [r7, #4]
 80114fc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d108      	bne.n	8011514 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	695b      	ldr	r3, [r3, #20]
 8011506:	2b00      	cmp	r3, #0
 8011508:	d104      	bne.n	8011514 <osMessageQueueNew+0xac>
          mem = 0;
 801150a:	2300      	movs	r3, #0
 801150c:	623b      	str	r3, [r7, #32]
 801150e:	e001      	b.n	8011514 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8011510:	2300      	movs	r3, #0
 8011512:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8011514:	6a3b      	ldr	r3, [r7, #32]
 8011516:	2b01      	cmp	r3, #1
 8011518:	d10b      	bne.n	8011532 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801151a:	687b      	ldr	r3, [r7, #4]
 801151c:	691a      	ldr	r2, [r3, #16]
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	689b      	ldr	r3, [r3, #8]
 8011522:	2100      	movs	r1, #0
 8011524:	9100      	str	r1, [sp, #0]
 8011526:	68b9      	ldr	r1, [r7, #8]
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f000 fa59 	bl	80119e0 <xQueueGenericCreateStatic>
 801152e:	6278      	str	r0, [r7, #36]	; 0x24
 8011530:	e008      	b.n	8011544 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8011532:	6a3b      	ldr	r3, [r7, #32]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d105      	bne.n	8011544 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8011538:	2200      	movs	r2, #0
 801153a:	68b9      	ldr	r1, [r7, #8]
 801153c:	68f8      	ldr	r0, [r7, #12]
 801153e:	f000 fac7 	bl	8011ad0 <xQueueGenericCreate>
 8011542:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8011544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011546:	2b00      	cmp	r3, #0
 8011548:	d00c      	beq.n	8011564 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d003      	beq.n	8011558 <osMessageQueueNew+0xf0>
        name = attr->name;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	61fb      	str	r3, [r7, #28]
 8011556:	e001      	b.n	801155c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8011558:	2300      	movs	r3, #0
 801155a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801155c:	69f9      	ldr	r1, [r7, #28]
 801155e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011560:	f001 f9ac 	bl	80128bc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8011564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011566:	4618      	mov	r0, r3
 8011568:	3728      	adds	r7, #40	; 0x28
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}
 801156e:	bf00      	nop
 8011570:	20000744 	.word	0x20000744

08011574 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8011574:	b580      	push	{r7, lr}
 8011576:	b08a      	sub	sp, #40	; 0x28
 8011578:	af00      	add	r7, sp, #0
 801157a:	60f8      	str	r0, [r7, #12]
 801157c:	60b9      	str	r1, [r7, #8]
 801157e:	603b      	str	r3, [r7, #0]
 8011580:	4613      	mov	r3, r2
 8011582:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8011588:	2300      	movs	r3, #0
 801158a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801158c:	f3ef 8305 	mrs	r3, IPSR
 8011590:	61fb      	str	r3, [r7, #28]
  return(result);
 8011592:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8011594:	2b00      	cmp	r3, #0
 8011596:	d10f      	bne.n	80115b8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011598:	f3ef 8310 	mrs	r3, PRIMASK
 801159c:	61bb      	str	r3, [r7, #24]
  return(result);
 801159e:	69bb      	ldr	r3, [r7, #24]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d105      	bne.n	80115b0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80115a4:	f3ef 8311 	mrs	r3, BASEPRI
 80115a8:	617b      	str	r3, [r7, #20]
  return(result);
 80115aa:	697b      	ldr	r3, [r7, #20]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d02c      	beq.n	801160a <osMessageQueuePut+0x96>
 80115b0:	4b28      	ldr	r3, [pc, #160]	; (8011654 <osMessageQueuePut+0xe0>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	2b02      	cmp	r3, #2
 80115b6:	d128      	bne.n	801160a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80115b8:	6a3b      	ldr	r3, [r7, #32]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d005      	beq.n	80115ca <osMessageQueuePut+0x56>
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d002      	beq.n	80115ca <osMessageQueuePut+0x56>
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	2b00      	cmp	r3, #0
 80115c8:	d003      	beq.n	80115d2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80115ca:	f06f 0303 	mvn.w	r3, #3
 80115ce:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80115d0:	e039      	b.n	8011646 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80115d2:	2300      	movs	r3, #0
 80115d4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80115d6:	f107 0210 	add.w	r2, r7, #16
 80115da:	2300      	movs	r3, #0
 80115dc:	68b9      	ldr	r1, [r7, #8]
 80115de:	6a38      	ldr	r0, [r7, #32]
 80115e0:	f000 fc8e 	bl	8011f00 <xQueueGenericSendFromISR>
 80115e4:	4603      	mov	r3, r0
 80115e6:	2b01      	cmp	r3, #1
 80115e8:	d003      	beq.n	80115f2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80115ea:	f06f 0302 	mvn.w	r3, #2
 80115ee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80115f0:	e029      	b.n	8011646 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 80115f2:	693b      	ldr	r3, [r7, #16]
 80115f4:	2b00      	cmp	r3, #0
 80115f6:	d026      	beq.n	8011646 <osMessageQueuePut+0xd2>
 80115f8:	4b17      	ldr	r3, [pc, #92]	; (8011658 <osMessageQueuePut+0xe4>)
 80115fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115fe:	601a      	str	r2, [r3, #0]
 8011600:	f3bf 8f4f 	dsb	sy
 8011604:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011608:	e01d      	b.n	8011646 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801160a:	6a3b      	ldr	r3, [r7, #32]
 801160c:	2b00      	cmp	r3, #0
 801160e:	d002      	beq.n	8011616 <osMessageQueuePut+0xa2>
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d103      	bne.n	801161e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8011616:	f06f 0303 	mvn.w	r3, #3
 801161a:	627b      	str	r3, [r7, #36]	; 0x24
 801161c:	e014      	b.n	8011648 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801161e:	2300      	movs	r3, #0
 8011620:	683a      	ldr	r2, [r7, #0]
 8011622:	68b9      	ldr	r1, [r7, #8]
 8011624:	6a38      	ldr	r0, [r7, #32]
 8011626:	f000 fb6d 	bl	8011d04 <xQueueGenericSend>
 801162a:	4603      	mov	r3, r0
 801162c:	2b01      	cmp	r3, #1
 801162e:	d00b      	beq.n	8011648 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	2b00      	cmp	r3, #0
 8011634:	d003      	beq.n	801163e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8011636:	f06f 0301 	mvn.w	r3, #1
 801163a:	627b      	str	r3, [r7, #36]	; 0x24
 801163c:	e004      	b.n	8011648 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801163e:	f06f 0302 	mvn.w	r3, #2
 8011642:	627b      	str	r3, [r7, #36]	; 0x24
 8011644:	e000      	b.n	8011648 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8011646:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8011648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801164a:	4618      	mov	r0, r3
 801164c:	3728      	adds	r7, #40	; 0x28
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	20000744 	.word	0x20000744
 8011658:	e000ed04 	.word	0xe000ed04

0801165c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801165c:	b580      	push	{r7, lr}
 801165e:	b08a      	sub	sp, #40	; 0x28
 8011660:	af00      	add	r7, sp, #0
 8011662:	60f8      	str	r0, [r7, #12]
 8011664:	60b9      	str	r1, [r7, #8]
 8011666:	607a      	str	r2, [r7, #4]
 8011668:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801166a:	68fb      	ldr	r3, [r7, #12]
 801166c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801166e:	2300      	movs	r3, #0
 8011670:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011672:	f3ef 8305 	mrs	r3, IPSR
 8011676:	61fb      	str	r3, [r7, #28]
  return(result);
 8011678:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801167a:	2b00      	cmp	r3, #0
 801167c:	d10f      	bne.n	801169e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801167e:	f3ef 8310 	mrs	r3, PRIMASK
 8011682:	61bb      	str	r3, [r7, #24]
  return(result);
 8011684:	69bb      	ldr	r3, [r7, #24]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d105      	bne.n	8011696 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801168a:	f3ef 8311 	mrs	r3, BASEPRI
 801168e:	617b      	str	r3, [r7, #20]
  return(result);
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	2b00      	cmp	r3, #0
 8011694:	d02c      	beq.n	80116f0 <osMessageQueueGet+0x94>
 8011696:	4b28      	ldr	r3, [pc, #160]	; (8011738 <osMessageQueueGet+0xdc>)
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	2b02      	cmp	r3, #2
 801169c:	d128      	bne.n	80116f0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801169e:	6a3b      	ldr	r3, [r7, #32]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d005      	beq.n	80116b0 <osMessageQueueGet+0x54>
 80116a4:	68bb      	ldr	r3, [r7, #8]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d002      	beq.n	80116b0 <osMessageQueueGet+0x54>
 80116aa:	683b      	ldr	r3, [r7, #0]
 80116ac:	2b00      	cmp	r3, #0
 80116ae:	d003      	beq.n	80116b8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80116b0:	f06f 0303 	mvn.w	r3, #3
 80116b4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80116b6:	e038      	b.n	801172a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80116b8:	2300      	movs	r3, #0
 80116ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80116bc:	f107 0310 	add.w	r3, r7, #16
 80116c0:	461a      	mov	r2, r3
 80116c2:	68b9      	ldr	r1, [r7, #8]
 80116c4:	6a38      	ldr	r0, [r7, #32]
 80116c6:	f000 ff2d 	bl	8012524 <xQueueReceiveFromISR>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b01      	cmp	r3, #1
 80116ce:	d003      	beq.n	80116d8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80116d0:	f06f 0302 	mvn.w	r3, #2
 80116d4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80116d6:	e028      	b.n	801172a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80116d8:	693b      	ldr	r3, [r7, #16]
 80116da:	2b00      	cmp	r3, #0
 80116dc:	d025      	beq.n	801172a <osMessageQueueGet+0xce>
 80116de:	4b17      	ldr	r3, [pc, #92]	; (801173c <osMessageQueueGet+0xe0>)
 80116e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116e4:	601a      	str	r2, [r3, #0]
 80116e6:	f3bf 8f4f 	dsb	sy
 80116ea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80116ee:	e01c      	b.n	801172a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80116f0:	6a3b      	ldr	r3, [r7, #32]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d002      	beq.n	80116fc <osMessageQueueGet+0xa0>
 80116f6:	68bb      	ldr	r3, [r7, #8]
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d103      	bne.n	8011704 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 80116fc:	f06f 0303 	mvn.w	r3, #3
 8011700:	627b      	str	r3, [r7, #36]	; 0x24
 8011702:	e013      	b.n	801172c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011704:	683a      	ldr	r2, [r7, #0]
 8011706:	68b9      	ldr	r1, [r7, #8]
 8011708:	6a38      	ldr	r0, [r7, #32]
 801170a:	f000 fd1f 	bl	801214c <xQueueReceive>
 801170e:	4603      	mov	r3, r0
 8011710:	2b01      	cmp	r3, #1
 8011712:	d00b      	beq.n	801172c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8011714:	683b      	ldr	r3, [r7, #0]
 8011716:	2b00      	cmp	r3, #0
 8011718:	d003      	beq.n	8011722 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801171a:	f06f 0301 	mvn.w	r3, #1
 801171e:	627b      	str	r3, [r7, #36]	; 0x24
 8011720:	e004      	b.n	801172c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8011722:	f06f 0302 	mvn.w	r3, #2
 8011726:	627b      	str	r3, [r7, #36]	; 0x24
 8011728:	e000      	b.n	801172c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801172a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801172c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801172e:	4618      	mov	r0, r3
 8011730:	3728      	adds	r7, #40	; 0x28
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	20000744 	.word	0x20000744
 801173c:	e000ed04 	.word	0xe000ed04

08011740 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011740:	b480      	push	{r7}
 8011742:	b085      	sub	sp, #20
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	4a07      	ldr	r2, [pc, #28]	; (801176c <vApplicationGetIdleTaskMemory+0x2c>)
 8011750:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011752:	68bb      	ldr	r3, [r7, #8]
 8011754:	4a06      	ldr	r2, [pc, #24]	; (8011770 <vApplicationGetIdleTaskMemory+0x30>)
 8011756:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2280      	movs	r2, #128	; 0x80
 801175c:	601a      	str	r2, [r3, #0]
}
 801175e:	bf00      	nop
 8011760:	3714      	adds	r7, #20
 8011762:	46bd      	mov	sp, r7
 8011764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011768:	4770      	bx	lr
 801176a:	bf00      	nop
 801176c:	20000748 	.word	0x20000748
 8011770:	20000804 	.word	0x20000804

08011774 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011774:	b480      	push	{r7}
 8011776:	b085      	sub	sp, #20
 8011778:	af00      	add	r7, sp, #0
 801177a:	60f8      	str	r0, [r7, #12]
 801177c:	60b9      	str	r1, [r7, #8]
 801177e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	4a07      	ldr	r2, [pc, #28]	; (80117a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8011784:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8011786:	68bb      	ldr	r3, [r7, #8]
 8011788:	4a06      	ldr	r2, [pc, #24]	; (80117a4 <vApplicationGetTimerTaskMemory+0x30>)
 801178a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011792:	601a      	str	r2, [r3, #0]
}
 8011794:	bf00      	nop
 8011796:	3714      	adds	r7, #20
 8011798:	46bd      	mov	sp, r7
 801179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801179e:	4770      	bx	lr
 80117a0:	20000a04 	.word	0x20000a04
 80117a4:	20000ac0 	.word	0x20000ac0

080117a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80117a8:	b480      	push	{r7}
 80117aa:	b083      	sub	sp, #12
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	f103 0208 	add.w	r2, r3, #8
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	f04f 32ff 	mov.w	r2, #4294967295
 80117c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f103 0208 	add.w	r2, r3, #8
 80117c8:	687b      	ldr	r3, [r7, #4]
 80117ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	f103 0208 	add.w	r2, r3, #8
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2200      	movs	r2, #0
 80117da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80117dc:	bf00      	nop
 80117de:	370c      	adds	r7, #12
 80117e0:	46bd      	mov	sp, r7
 80117e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117e6:	4770      	bx	lr

080117e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80117e8:	b480      	push	{r7}
 80117ea:	b083      	sub	sp, #12
 80117ec:	af00      	add	r7, sp, #0
 80117ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2200      	movs	r2, #0
 80117f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80117f6:	bf00      	nop
 80117f8:	370c      	adds	r7, #12
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr

08011802 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011802:	b480      	push	{r7}
 8011804:	b085      	sub	sp, #20
 8011806:	af00      	add	r7, sp, #0
 8011808:	6078      	str	r0, [r7, #4]
 801180a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801180c:	687b      	ldr	r3, [r7, #4]
 801180e:	685b      	ldr	r3, [r3, #4]
 8011810:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011812:	683b      	ldr	r3, [r7, #0]
 8011814:	68fa      	ldr	r2, [r7, #12]
 8011816:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011818:	68fb      	ldr	r3, [r7, #12]
 801181a:	689a      	ldr	r2, [r3, #8]
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011820:	68fb      	ldr	r3, [r7, #12]
 8011822:	689b      	ldr	r3, [r3, #8]
 8011824:	683a      	ldr	r2, [r7, #0]
 8011826:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011828:	68fb      	ldr	r3, [r7, #12]
 801182a:	683a      	ldr	r2, [r7, #0]
 801182c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801182e:	683b      	ldr	r3, [r7, #0]
 8011830:	687a      	ldr	r2, [r7, #4]
 8011832:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	601a      	str	r2, [r3, #0]
}
 801183e:	bf00      	nop
 8011840:	3714      	adds	r7, #20
 8011842:	46bd      	mov	sp, r7
 8011844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011848:	4770      	bx	lr

0801184a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801184a:	b480      	push	{r7}
 801184c:	b085      	sub	sp, #20
 801184e:	af00      	add	r7, sp, #0
 8011850:	6078      	str	r0, [r7, #4]
 8011852:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011854:	683b      	ldr	r3, [r7, #0]
 8011856:	681b      	ldr	r3, [r3, #0]
 8011858:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801185a:	68bb      	ldr	r3, [r7, #8]
 801185c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011860:	d103      	bne.n	801186a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	691b      	ldr	r3, [r3, #16]
 8011866:	60fb      	str	r3, [r7, #12]
 8011868:	e00c      	b.n	8011884 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	3308      	adds	r3, #8
 801186e:	60fb      	str	r3, [r7, #12]
 8011870:	e002      	b.n	8011878 <vListInsert+0x2e>
 8011872:	68fb      	ldr	r3, [r7, #12]
 8011874:	685b      	ldr	r3, [r3, #4]
 8011876:	60fb      	str	r3, [r7, #12]
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	685b      	ldr	r3, [r3, #4]
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	68ba      	ldr	r2, [r7, #8]
 8011880:	429a      	cmp	r2, r3
 8011882:	d2f6      	bcs.n	8011872 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	685a      	ldr	r2, [r3, #4]
 8011888:	683b      	ldr	r3, [r7, #0]
 801188a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801188c:	683b      	ldr	r3, [r7, #0]
 801188e:	685b      	ldr	r3, [r3, #4]
 8011890:	683a      	ldr	r2, [r7, #0]
 8011892:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8011894:	683b      	ldr	r3, [r7, #0]
 8011896:	68fa      	ldr	r2, [r7, #12]
 8011898:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801189a:	68fb      	ldr	r3, [r7, #12]
 801189c:	683a      	ldr	r2, [r7, #0]
 801189e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80118a0:	683b      	ldr	r3, [r7, #0]
 80118a2:	687a      	ldr	r2, [r7, #4]
 80118a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80118a6:	687b      	ldr	r3, [r7, #4]
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	1c5a      	adds	r2, r3, #1
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	601a      	str	r2, [r3, #0]
}
 80118b0:	bf00      	nop
 80118b2:	3714      	adds	r7, #20
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr

080118bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	691b      	ldr	r3, [r3, #16]
 80118c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	687a      	ldr	r2, [r7, #4]
 80118d0:	6892      	ldr	r2, [r2, #8]
 80118d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	689b      	ldr	r3, [r3, #8]
 80118d8:	687a      	ldr	r2, [r7, #4]
 80118da:	6852      	ldr	r2, [r2, #4]
 80118dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d103      	bne.n	80118f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	689a      	ldr	r2, [r3, #8]
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	2200      	movs	r2, #0
 80118f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	1e5a      	subs	r2, r3, #1
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	681b      	ldr	r3, [r3, #0]
}
 8011904:	4618      	mov	r0, r3
 8011906:	3714      	adds	r7, #20
 8011908:	46bd      	mov	sp, r7
 801190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190e:	4770      	bx	lr

08011910 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b084      	sub	sp, #16
 8011914:	af00      	add	r7, sp, #0
 8011916:	6078      	str	r0, [r7, #4]
 8011918:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d10a      	bne.n	801193a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011928:	f383 8811 	msr	BASEPRI, r3
 801192c:	f3bf 8f6f 	isb	sy
 8011930:	f3bf 8f4f 	dsb	sy
 8011934:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8011936:	bf00      	nop
 8011938:	e7fe      	b.n	8011938 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801193a:	f002 fcfb 	bl	8014334 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011946:	68f9      	ldr	r1, [r7, #12]
 8011948:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801194a:	fb01 f303 	mul.w	r3, r1, r3
 801194e:	441a      	add	r2, r3
 8011950:	68fb      	ldr	r3, [r7, #12]
 8011952:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	2200      	movs	r2, #0
 8011958:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801196a:	3b01      	subs	r3, #1
 801196c:	68f9      	ldr	r1, [r7, #12]
 801196e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011970:	fb01 f303 	mul.w	r3, r1, r3
 8011974:	441a      	add	r2, r3
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801197a:	68fb      	ldr	r3, [r7, #12]
 801197c:	22ff      	movs	r2, #255	; 0xff
 801197e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	22ff      	movs	r2, #255	; 0xff
 8011986:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801198a:	683b      	ldr	r3, [r7, #0]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d114      	bne.n	80119ba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	691b      	ldr	r3, [r3, #16]
 8011994:	2b00      	cmp	r3, #0
 8011996:	d01a      	beq.n	80119ce <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	3310      	adds	r3, #16
 801199c:	4618      	mov	r0, r3
 801199e:	f001 fcad 	bl	80132fc <xTaskRemoveFromEventList>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d012      	beq.n	80119ce <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80119a8:	4b0c      	ldr	r3, [pc, #48]	; (80119dc <xQueueGenericReset+0xcc>)
 80119aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80119ae:	601a      	str	r2, [r3, #0]
 80119b0:	f3bf 8f4f 	dsb	sy
 80119b4:	f3bf 8f6f 	isb	sy
 80119b8:	e009      	b.n	80119ce <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	3310      	adds	r3, #16
 80119be:	4618      	mov	r0, r3
 80119c0:	f7ff fef2 	bl	80117a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	3324      	adds	r3, #36	; 0x24
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7ff feed 	bl	80117a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80119ce:	f002 fce1 	bl	8014394 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80119d2:	2301      	movs	r3, #1
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}
 80119dc:	e000ed04 	.word	0xe000ed04

080119e0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	b08e      	sub	sp, #56	; 0x38
 80119e4:	af02      	add	r7, sp, #8
 80119e6:	60f8      	str	r0, [r7, #12]
 80119e8:	60b9      	str	r1, [r7, #8]
 80119ea:	607a      	str	r2, [r7, #4]
 80119ec:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d10a      	bne.n	8011a0a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80119f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f8:	f383 8811 	msr	BASEPRI, r3
 80119fc:	f3bf 8f6f 	isb	sy
 8011a00:	f3bf 8f4f 	dsb	sy
 8011a04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011a06:	bf00      	nop
 8011a08:	e7fe      	b.n	8011a08 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d10a      	bne.n	8011a26 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a14:	f383 8811 	msr	BASEPRI, r3
 8011a18:	f3bf 8f6f 	isb	sy
 8011a1c:	f3bf 8f4f 	dsb	sy
 8011a20:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011a22:	bf00      	nop
 8011a24:	e7fe      	b.n	8011a24 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d002      	beq.n	8011a32 <xQueueGenericCreateStatic+0x52>
 8011a2c:	68bb      	ldr	r3, [r7, #8]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d001      	beq.n	8011a36 <xQueueGenericCreateStatic+0x56>
 8011a32:	2301      	movs	r3, #1
 8011a34:	e000      	b.n	8011a38 <xQueueGenericCreateStatic+0x58>
 8011a36:	2300      	movs	r3, #0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d10a      	bne.n	8011a52 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a40:	f383 8811 	msr	BASEPRI, r3
 8011a44:	f3bf 8f6f 	isb	sy
 8011a48:	f3bf 8f4f 	dsb	sy
 8011a4c:	623b      	str	r3, [r7, #32]
}
 8011a4e:	bf00      	nop
 8011a50:	e7fe      	b.n	8011a50 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d102      	bne.n	8011a5e <xQueueGenericCreateStatic+0x7e>
 8011a58:	68bb      	ldr	r3, [r7, #8]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d101      	bne.n	8011a62 <xQueueGenericCreateStatic+0x82>
 8011a5e:	2301      	movs	r3, #1
 8011a60:	e000      	b.n	8011a64 <xQueueGenericCreateStatic+0x84>
 8011a62:	2300      	movs	r3, #0
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d10a      	bne.n	8011a7e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8011a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a6c:	f383 8811 	msr	BASEPRI, r3
 8011a70:	f3bf 8f6f 	isb	sy
 8011a74:	f3bf 8f4f 	dsb	sy
 8011a78:	61fb      	str	r3, [r7, #28]
}
 8011a7a:	bf00      	nop
 8011a7c:	e7fe      	b.n	8011a7c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011a7e:	2350      	movs	r3, #80	; 0x50
 8011a80:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011a82:	697b      	ldr	r3, [r7, #20]
 8011a84:	2b50      	cmp	r3, #80	; 0x50
 8011a86:	d00a      	beq.n	8011a9e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8011a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	61bb      	str	r3, [r7, #24]
}
 8011a9a:	bf00      	nop
 8011a9c:	e7fe      	b.n	8011a9c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8011a9e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011aa0:	683b      	ldr	r3, [r7, #0]
 8011aa2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8011aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d00d      	beq.n	8011ac6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8011aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aac:	2201      	movs	r2, #1
 8011aae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011ab2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8011ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab8:	9300      	str	r3, [sp, #0]
 8011aba:	4613      	mov	r3, r2
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	68b9      	ldr	r1, [r7, #8]
 8011ac0:	68f8      	ldr	r0, [r7, #12]
 8011ac2:	f000 f845 	bl	8011b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8011ac8:	4618      	mov	r0, r3
 8011aca:	3730      	adds	r7, #48	; 0x30
 8011acc:	46bd      	mov	sp, r7
 8011ace:	bd80      	pop	{r7, pc}

08011ad0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011ad0:	b580      	push	{r7, lr}
 8011ad2:	b08a      	sub	sp, #40	; 0x28
 8011ad4:	af02      	add	r7, sp, #8
 8011ad6:	60f8      	str	r0, [r7, #12]
 8011ad8:	60b9      	str	r1, [r7, #8]
 8011ada:	4613      	mov	r3, r2
 8011adc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011ade:	68fb      	ldr	r3, [r7, #12]
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10a      	bne.n	8011afa <xQueueGenericCreate+0x2a>
	__asm volatile
 8011ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae8:	f383 8811 	msr	BASEPRI, r3
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	613b      	str	r3, [r7, #16]
}
 8011af6:	bf00      	nop
 8011af8:	e7fe      	b.n	8011af8 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d102      	bne.n	8011b06 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011b00:	2300      	movs	r3, #0
 8011b02:	61fb      	str	r3, [r7, #28]
 8011b04:	e004      	b.n	8011b10 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	68ba      	ldr	r2, [r7, #8]
 8011b0a:	fb02 f303 	mul.w	r3, r2, r3
 8011b0e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	3350      	adds	r3, #80	; 0x50
 8011b14:	4618      	mov	r0, r3
 8011b16:	f002 fd2f 	bl	8014578 <pvPortMalloc>
 8011b1a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011b1c:	69bb      	ldr	r3, [r7, #24]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d011      	beq.n	8011b46 <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011b26:	697b      	ldr	r3, [r7, #20]
 8011b28:	3350      	adds	r3, #80	; 0x50
 8011b2a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	2200      	movs	r2, #0
 8011b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011b34:	79fa      	ldrb	r2, [r7, #7]
 8011b36:	69bb      	ldr	r3, [r7, #24]
 8011b38:	9300      	str	r3, [sp, #0]
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	697a      	ldr	r2, [r7, #20]
 8011b3e:	68b9      	ldr	r1, [r7, #8]
 8011b40:	68f8      	ldr	r0, [r7, #12]
 8011b42:	f000 f805 	bl	8011b50 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011b46:	69bb      	ldr	r3, [r7, #24]
	}
 8011b48:	4618      	mov	r0, r3
 8011b4a:	3720      	adds	r7, #32
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	bd80      	pop	{r7, pc}

08011b50 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	60f8      	str	r0, [r7, #12]
 8011b58:	60b9      	str	r1, [r7, #8]
 8011b5a:	607a      	str	r2, [r7, #4]
 8011b5c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011b5e:	68bb      	ldr	r3, [r7, #8]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d103      	bne.n	8011b6c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	69ba      	ldr	r2, [r7, #24]
 8011b68:	601a      	str	r2, [r3, #0]
 8011b6a:	e002      	b.n	8011b72 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011b6c:	69bb      	ldr	r3, [r7, #24]
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011b72:	69bb      	ldr	r3, [r7, #24]
 8011b74:	68fa      	ldr	r2, [r7, #12]
 8011b76:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011b78:	69bb      	ldr	r3, [r7, #24]
 8011b7a:	68ba      	ldr	r2, [r7, #8]
 8011b7c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011b7e:	2101      	movs	r1, #1
 8011b80:	69b8      	ldr	r0, [r7, #24]
 8011b82:	f7ff fec5 	bl	8011910 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8011b86:	69bb      	ldr	r3, [r7, #24]
 8011b88:	78fa      	ldrb	r2, [r7, #3]
 8011b8a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011b8e:	bf00      	nop
 8011b90:	3710      	adds	r7, #16
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}

08011b96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8011b96:	b580      	push	{r7, lr}
 8011b98:	b082      	sub	sp, #8
 8011b9a:	af00      	add	r7, sp, #0
 8011b9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00e      	beq.n	8011bc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2200      	movs	r2, #0
 8011bae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	2200      	movs	r2, #0
 8011bb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	2200      	movs	r2, #0
 8011bba:	2100      	movs	r1, #0
 8011bbc:	6878      	ldr	r0, [r7, #4]
 8011bbe:	f000 f8a1 	bl	8011d04 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8011bc2:	bf00      	nop
 8011bc4:	3708      	adds	r7, #8
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}

08011bca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8011bca:	b580      	push	{r7, lr}
 8011bcc:	b086      	sub	sp, #24
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011bd4:	2301      	movs	r3, #1
 8011bd6:	617b      	str	r3, [r7, #20]
 8011bd8:	2300      	movs	r3, #0
 8011bda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8011bdc:	79fb      	ldrb	r3, [r7, #7]
 8011bde:	461a      	mov	r2, r3
 8011be0:	6939      	ldr	r1, [r7, #16]
 8011be2:	6978      	ldr	r0, [r7, #20]
 8011be4:	f7ff ff74 	bl	8011ad0 <xQueueGenericCreate>
 8011be8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011bea:	68f8      	ldr	r0, [r7, #12]
 8011bec:	f7ff ffd3 	bl	8011b96 <prvInitialiseMutex>

		return xNewQueue;
 8011bf0:	68fb      	ldr	r3, [r7, #12]
	}
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	3718      	adds	r7, #24
 8011bf6:	46bd      	mov	sp, r7
 8011bf8:	bd80      	pop	{r7, pc}

08011bfa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8011bfa:	b580      	push	{r7, lr}
 8011bfc:	b088      	sub	sp, #32
 8011bfe:	af02      	add	r7, sp, #8
 8011c00:	4603      	mov	r3, r0
 8011c02:	6039      	str	r1, [r7, #0]
 8011c04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8011c06:	2301      	movs	r3, #1
 8011c08:	617b      	str	r3, [r7, #20]
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8011c0e:	79fb      	ldrb	r3, [r7, #7]
 8011c10:	9300      	str	r3, [sp, #0]
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	2200      	movs	r2, #0
 8011c16:	6939      	ldr	r1, [r7, #16]
 8011c18:	6978      	ldr	r0, [r7, #20]
 8011c1a:	f7ff fee1 	bl	80119e0 <xQueueGenericCreateStatic>
 8011c1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f7ff ffb8 	bl	8011b96 <prvInitialiseMutex>

		return xNewQueue;
 8011c26:	68fb      	ldr	r3, [r7, #12]
	}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3718      	adds	r7, #24
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b08a      	sub	sp, #40	; 0x28
 8011c34:	af02      	add	r7, sp, #8
 8011c36:	60f8      	str	r0, [r7, #12]
 8011c38:	60b9      	str	r1, [r7, #8]
 8011c3a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d10a      	bne.n	8011c58 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8011c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c46:	f383 8811 	msr	BASEPRI, r3
 8011c4a:	f3bf 8f6f 	isb	sy
 8011c4e:	f3bf 8f4f 	dsb	sy
 8011c52:	61bb      	str	r3, [r7, #24]
}
 8011c54:	bf00      	nop
 8011c56:	e7fe      	b.n	8011c56 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011c58:	68ba      	ldr	r2, [r7, #8]
 8011c5a:	68fb      	ldr	r3, [r7, #12]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d90a      	bls.n	8011c76 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8011c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c64:	f383 8811 	msr	BASEPRI, r3
 8011c68:	f3bf 8f6f 	isb	sy
 8011c6c:	f3bf 8f4f 	dsb	sy
 8011c70:	617b      	str	r3, [r7, #20]
}
 8011c72:	bf00      	nop
 8011c74:	e7fe      	b.n	8011c74 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011c76:	2302      	movs	r3, #2
 8011c78:	9300      	str	r3, [sp, #0]
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	2100      	movs	r1, #0
 8011c80:	68f8      	ldr	r0, [r7, #12]
 8011c82:	f7ff fead 	bl	80119e0 <xQueueGenericCreateStatic>
 8011c86:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8011c88:	69fb      	ldr	r3, [r7, #28]
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d002      	beq.n	8011c94 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011c8e:	69fb      	ldr	r3, [r7, #28]
 8011c90:	68ba      	ldr	r2, [r7, #8]
 8011c92:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011c94:	69fb      	ldr	r3, [r7, #28]
	}
 8011c96:	4618      	mov	r0, r3
 8011c98:	3720      	adds	r7, #32
 8011c9a:	46bd      	mov	sp, r7
 8011c9c:	bd80      	pop	{r7, pc}

08011c9e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011c9e:	b580      	push	{r7, lr}
 8011ca0:	b086      	sub	sp, #24
 8011ca2:	af00      	add	r7, sp, #0
 8011ca4:	6078      	str	r0, [r7, #4]
 8011ca6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d10a      	bne.n	8011cc4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8011cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cb2:	f383 8811 	msr	BASEPRI, r3
 8011cb6:	f3bf 8f6f 	isb	sy
 8011cba:	f3bf 8f4f 	dsb	sy
 8011cbe:	613b      	str	r3, [r7, #16]
}
 8011cc0:	bf00      	nop
 8011cc2:	e7fe      	b.n	8011cc2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011cc4:	683a      	ldr	r2, [r7, #0]
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	429a      	cmp	r2, r3
 8011cca:	d90a      	bls.n	8011ce2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8011ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd0:	f383 8811 	msr	BASEPRI, r3
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	f3bf 8f4f 	dsb	sy
 8011cdc:	60fb      	str	r3, [r7, #12]
}
 8011cde:	bf00      	nop
 8011ce0:	e7fe      	b.n	8011ce0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011ce2:	2202      	movs	r2, #2
 8011ce4:	2100      	movs	r1, #0
 8011ce6:	6878      	ldr	r0, [r7, #4]
 8011ce8:	f7ff fef2 	bl	8011ad0 <xQueueGenericCreate>
 8011cec:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011cee:	697b      	ldr	r3, [r7, #20]
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d002      	beq.n	8011cfa <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	683a      	ldr	r2, [r7, #0]
 8011cf8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011cfa:	697b      	ldr	r3, [r7, #20]
	}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3718      	adds	r7, #24
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b08e      	sub	sp, #56	; 0x38
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	60f8      	str	r0, [r7, #12]
 8011d0c:	60b9      	str	r1, [r7, #8]
 8011d0e:	607a      	str	r2, [r7, #4]
 8011d10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011d12:	2300      	movs	r3, #0
 8011d14:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011d16:	68fb      	ldr	r3, [r7, #12]
 8011d18:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d10a      	bne.n	8011d36 <xQueueGenericSend+0x32>
	__asm volatile
 8011d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d24:	f383 8811 	msr	BASEPRI, r3
 8011d28:	f3bf 8f6f 	isb	sy
 8011d2c:	f3bf 8f4f 	dsb	sy
 8011d30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011d32:	bf00      	nop
 8011d34:	e7fe      	b.n	8011d34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d36:	68bb      	ldr	r3, [r7, #8]
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	d103      	bne.n	8011d44 <xQueueGenericSend+0x40>
 8011d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d101      	bne.n	8011d48 <xQueueGenericSend+0x44>
 8011d44:	2301      	movs	r3, #1
 8011d46:	e000      	b.n	8011d4a <xQueueGenericSend+0x46>
 8011d48:	2300      	movs	r3, #0
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d10a      	bne.n	8011d64 <xQueueGenericSend+0x60>
	__asm volatile
 8011d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d52:	f383 8811 	msr	BASEPRI, r3
 8011d56:	f3bf 8f6f 	isb	sy
 8011d5a:	f3bf 8f4f 	dsb	sy
 8011d5e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011d60:	bf00      	nop
 8011d62:	e7fe      	b.n	8011d62 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d64:	683b      	ldr	r3, [r7, #0]
 8011d66:	2b02      	cmp	r3, #2
 8011d68:	d103      	bne.n	8011d72 <xQueueGenericSend+0x6e>
 8011d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d6e:	2b01      	cmp	r3, #1
 8011d70:	d101      	bne.n	8011d76 <xQueueGenericSend+0x72>
 8011d72:	2301      	movs	r3, #1
 8011d74:	e000      	b.n	8011d78 <xQueueGenericSend+0x74>
 8011d76:	2300      	movs	r3, #0
 8011d78:	2b00      	cmp	r3, #0
 8011d7a:	d10a      	bne.n	8011d92 <xQueueGenericSend+0x8e>
	__asm volatile
 8011d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d80:	f383 8811 	msr	BASEPRI, r3
 8011d84:	f3bf 8f6f 	isb	sy
 8011d88:	f3bf 8f4f 	dsb	sy
 8011d8c:	623b      	str	r3, [r7, #32]
}
 8011d8e:	bf00      	nop
 8011d90:	e7fe      	b.n	8011d90 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d92:	f001 fc75 	bl	8013680 <xTaskGetSchedulerState>
 8011d96:	4603      	mov	r3, r0
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d102      	bne.n	8011da2 <xQueueGenericSend+0x9e>
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d101      	bne.n	8011da6 <xQueueGenericSend+0xa2>
 8011da2:	2301      	movs	r3, #1
 8011da4:	e000      	b.n	8011da8 <xQueueGenericSend+0xa4>
 8011da6:	2300      	movs	r3, #0
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d10a      	bne.n	8011dc2 <xQueueGenericSend+0xbe>
	__asm volatile
 8011dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011db0:	f383 8811 	msr	BASEPRI, r3
 8011db4:	f3bf 8f6f 	isb	sy
 8011db8:	f3bf 8f4f 	dsb	sy
 8011dbc:	61fb      	str	r3, [r7, #28]
}
 8011dbe:	bf00      	nop
 8011dc0:	e7fe      	b.n	8011dc0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011dc2:	f002 fab7 	bl	8014334 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011dce:	429a      	cmp	r2, r3
 8011dd0:	d302      	bcc.n	8011dd8 <xQueueGenericSend+0xd4>
 8011dd2:	683b      	ldr	r3, [r7, #0]
 8011dd4:	2b02      	cmp	r3, #2
 8011dd6:	d129      	bne.n	8011e2c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011dd8:	683a      	ldr	r2, [r7, #0]
 8011dda:	68b9      	ldr	r1, [r7, #8]
 8011ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011dde:	f000 fc5c 	bl	801269a <prvCopyDataToQueue>
 8011de2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d010      	beq.n	8011e0e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dee:	3324      	adds	r3, #36	; 0x24
 8011df0:	4618      	mov	r0, r3
 8011df2:	f001 fa83 	bl	80132fc <xTaskRemoveFromEventList>
 8011df6:	4603      	mov	r3, r0
 8011df8:	2b00      	cmp	r3, #0
 8011dfa:	d013      	beq.n	8011e24 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011dfc:	4b3f      	ldr	r3, [pc, #252]	; (8011efc <xQueueGenericSend+0x1f8>)
 8011dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e02:	601a      	str	r2, [r3, #0]
 8011e04:	f3bf 8f4f 	dsb	sy
 8011e08:	f3bf 8f6f 	isb	sy
 8011e0c:	e00a      	b.n	8011e24 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d007      	beq.n	8011e24 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011e14:	4b39      	ldr	r3, [pc, #228]	; (8011efc <xQueueGenericSend+0x1f8>)
 8011e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e1a:	601a      	str	r2, [r3, #0]
 8011e1c:	f3bf 8f4f 	dsb	sy
 8011e20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011e24:	f002 fab6 	bl	8014394 <vPortExitCritical>
				return pdPASS;
 8011e28:	2301      	movs	r3, #1
 8011e2a:	e063      	b.n	8011ef4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d103      	bne.n	8011e3a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e32:	f002 faaf 	bl	8014394 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011e36:	2300      	movs	r3, #0
 8011e38:	e05c      	b.n	8011ef4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d106      	bne.n	8011e4e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e40:	f107 0314 	add.w	r3, r7, #20
 8011e44:	4618      	mov	r0, r3
 8011e46:	f001 fabd 	bl	80133c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e4a:	2301      	movs	r3, #1
 8011e4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e4e:	f002 faa1 	bl	8014394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e52:	f001 f817 	bl	8012e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e56:	f002 fa6d 	bl	8014334 <vPortEnterCritical>
 8011e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011e60:	b25b      	sxtb	r3, r3
 8011e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e66:	d103      	bne.n	8011e70 <xQueueGenericSend+0x16c>
 8011e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e6a:	2200      	movs	r2, #0
 8011e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011e76:	b25b      	sxtb	r3, r3
 8011e78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e7c:	d103      	bne.n	8011e86 <xQueueGenericSend+0x182>
 8011e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e80:	2200      	movs	r2, #0
 8011e82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011e86:	f002 fa85 	bl	8014394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011e8a:	1d3a      	adds	r2, r7, #4
 8011e8c:	f107 0314 	add.w	r3, r7, #20
 8011e90:	4611      	mov	r1, r2
 8011e92:	4618      	mov	r0, r3
 8011e94:	f001 faac 	bl	80133f0 <xTaskCheckForTimeOut>
 8011e98:	4603      	mov	r3, r0
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d124      	bne.n	8011ee8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ea0:	f000 fcf3 	bl	801288a <prvIsQueueFull>
 8011ea4:	4603      	mov	r3, r0
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d018      	beq.n	8011edc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eac:	3310      	adds	r3, #16
 8011eae:	687a      	ldr	r2, [r7, #4]
 8011eb0:	4611      	mov	r1, r2
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	f001 f9d2 	bl	801325c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011eb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eba:	f000 fc7e 	bl	80127ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011ebe:	f000 ffef 	bl	8012ea0 <xTaskResumeAll>
 8011ec2:	4603      	mov	r3, r0
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	f47f af7c 	bne.w	8011dc2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011eca:	4b0c      	ldr	r3, [pc, #48]	; (8011efc <xQueueGenericSend+0x1f8>)
 8011ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ed0:	601a      	str	r2, [r3, #0]
 8011ed2:	f3bf 8f4f 	dsb	sy
 8011ed6:	f3bf 8f6f 	isb	sy
 8011eda:	e772      	b.n	8011dc2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ede:	f000 fc6c 	bl	80127ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011ee2:	f000 ffdd 	bl	8012ea0 <xTaskResumeAll>
 8011ee6:	e76c      	b.n	8011dc2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011eea:	f000 fc66 	bl	80127ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011eee:	f000 ffd7 	bl	8012ea0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011ef2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3738      	adds	r7, #56	; 0x38
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}
 8011efc:	e000ed04 	.word	0xe000ed04

08011f00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b08e      	sub	sp, #56	; 0x38
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	60f8      	str	r0, [r7, #12]
 8011f08:	60b9      	str	r1, [r7, #8]
 8011f0a:	607a      	str	r2, [r7, #4]
 8011f0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d10a      	bne.n	8011f2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f1c:	f383 8811 	msr	BASEPRI, r3
 8011f20:	f3bf 8f6f 	isb	sy
 8011f24:	f3bf 8f4f 	dsb	sy
 8011f28:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011f2a:	bf00      	nop
 8011f2c:	e7fe      	b.n	8011f2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011f2e:	68bb      	ldr	r3, [r7, #8]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d103      	bne.n	8011f3c <xQueueGenericSendFromISR+0x3c>
 8011f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d101      	bne.n	8011f40 <xQueueGenericSendFromISR+0x40>
 8011f3c:	2301      	movs	r3, #1
 8011f3e:	e000      	b.n	8011f42 <xQueueGenericSendFromISR+0x42>
 8011f40:	2300      	movs	r3, #0
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d10a      	bne.n	8011f5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f4a:	f383 8811 	msr	BASEPRI, r3
 8011f4e:	f3bf 8f6f 	isb	sy
 8011f52:	f3bf 8f4f 	dsb	sy
 8011f56:	623b      	str	r3, [r7, #32]
}
 8011f58:	bf00      	nop
 8011f5a:	e7fe      	b.n	8011f5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011f5c:	683b      	ldr	r3, [r7, #0]
 8011f5e:	2b02      	cmp	r3, #2
 8011f60:	d103      	bne.n	8011f6a <xQueueGenericSendFromISR+0x6a>
 8011f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d101      	bne.n	8011f6e <xQueueGenericSendFromISR+0x6e>
 8011f6a:	2301      	movs	r3, #1
 8011f6c:	e000      	b.n	8011f70 <xQueueGenericSendFromISR+0x70>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d10a      	bne.n	8011f8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f78:	f383 8811 	msr	BASEPRI, r3
 8011f7c:	f3bf 8f6f 	isb	sy
 8011f80:	f3bf 8f4f 	dsb	sy
 8011f84:	61fb      	str	r3, [r7, #28]
}
 8011f86:	bf00      	nop
 8011f88:	e7fe      	b.n	8011f88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011f8a:	f002 fab5 	bl	80144f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011f8e:	f3ef 8211 	mrs	r2, BASEPRI
 8011f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f96:	f383 8811 	msr	BASEPRI, r3
 8011f9a:	f3bf 8f6f 	isb	sy
 8011f9e:	f3bf 8f4f 	dsb	sy
 8011fa2:	61ba      	str	r2, [r7, #24]
 8011fa4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011fa6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d302      	bcc.n	8011fbc <xQueueGenericSendFromISR+0xbc>
 8011fb6:	683b      	ldr	r3, [r7, #0]
 8011fb8:	2b02      	cmp	r3, #2
 8011fba:	d12c      	bne.n	8012016 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011fc6:	683a      	ldr	r2, [r7, #0]
 8011fc8:	68b9      	ldr	r1, [r7, #8]
 8011fca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fcc:	f000 fb65 	bl	801269a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011fd0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fd8:	d112      	bne.n	8012000 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d016      	beq.n	8012010 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fe4:	3324      	adds	r3, #36	; 0x24
 8011fe6:	4618      	mov	r0, r3
 8011fe8:	f001 f988 	bl	80132fc <xTaskRemoveFromEventList>
 8011fec:	4603      	mov	r3, r0
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00e      	beq.n	8012010 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	d00b      	beq.n	8012010 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	2201      	movs	r2, #1
 8011ffc:	601a      	str	r2, [r3, #0]
 8011ffe:	e007      	b.n	8012010 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012000:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012004:	3301      	adds	r3, #1
 8012006:	b2db      	uxtb	r3, r3
 8012008:	b25a      	sxtb	r2, r3
 801200a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801200c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012010:	2301      	movs	r3, #1
 8012012:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012014:	e001      	b.n	801201a <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012016:	2300      	movs	r3, #0
 8012018:	637b      	str	r3, [r7, #52]	; 0x34
 801201a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801201c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801201e:	693b      	ldr	r3, [r7, #16]
 8012020:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012024:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012028:	4618      	mov	r0, r3
 801202a:	3738      	adds	r7, #56	; 0x38
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b08e      	sub	sp, #56	; 0x38
 8012034:	af00      	add	r7, sp, #0
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012040:	2b00      	cmp	r3, #0
 8012042:	d10a      	bne.n	801205a <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012048:	f383 8811 	msr	BASEPRI, r3
 801204c:	f3bf 8f6f 	isb	sy
 8012050:	f3bf 8f4f 	dsb	sy
 8012054:	623b      	str	r3, [r7, #32]
}
 8012056:	bf00      	nop
 8012058:	e7fe      	b.n	8012058 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801205a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801205e:	2b00      	cmp	r3, #0
 8012060:	d00a      	beq.n	8012078 <xQueueGiveFromISR+0x48>
	__asm volatile
 8012062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012066:	f383 8811 	msr	BASEPRI, r3
 801206a:	f3bf 8f6f 	isb	sy
 801206e:	f3bf 8f4f 	dsb	sy
 8012072:	61fb      	str	r3, [r7, #28]
}
 8012074:	bf00      	nop
 8012076:	e7fe      	b.n	8012076 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801207a:	681b      	ldr	r3, [r3, #0]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d103      	bne.n	8012088 <xQueueGiveFromISR+0x58>
 8012080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012082:	689b      	ldr	r3, [r3, #8]
 8012084:	2b00      	cmp	r3, #0
 8012086:	d101      	bne.n	801208c <xQueueGiveFromISR+0x5c>
 8012088:	2301      	movs	r3, #1
 801208a:	e000      	b.n	801208e <xQueueGiveFromISR+0x5e>
 801208c:	2300      	movs	r3, #0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d10a      	bne.n	80120a8 <xQueueGiveFromISR+0x78>
	__asm volatile
 8012092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012096:	f383 8811 	msr	BASEPRI, r3
 801209a:	f3bf 8f6f 	isb	sy
 801209e:	f3bf 8f4f 	dsb	sy
 80120a2:	61bb      	str	r3, [r7, #24]
}
 80120a4:	bf00      	nop
 80120a6:	e7fe      	b.n	80120a6 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80120a8:	f002 fa26 	bl	80144f8 <vPortValidateInterruptPriority>
	__asm volatile
 80120ac:	f3ef 8211 	mrs	r2, BASEPRI
 80120b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b4:	f383 8811 	msr	BASEPRI, r3
 80120b8:	f3bf 8f6f 	isb	sy
 80120bc:	f3bf 8f4f 	dsb	sy
 80120c0:	617a      	str	r2, [r7, #20]
 80120c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80120c4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80120c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80120c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120cc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80120ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d22b      	bcs.n	8012130 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80120d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80120de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80120e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120e4:	1c5a      	adds	r2, r3, #1
 80120e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80120ea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80120ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120f2:	d112      	bne.n	801211a <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80120f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d016      	beq.n	801212a <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80120fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120fe:	3324      	adds	r3, #36	; 0x24
 8012100:	4618      	mov	r0, r3
 8012102:	f001 f8fb 	bl	80132fc <xTaskRemoveFromEventList>
 8012106:	4603      	mov	r3, r0
 8012108:	2b00      	cmp	r3, #0
 801210a:	d00e      	beq.n	801212a <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801210c:	683b      	ldr	r3, [r7, #0]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00b      	beq.n	801212a <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	2201      	movs	r2, #1
 8012116:	601a      	str	r2, [r3, #0]
 8012118:	e007      	b.n	801212a <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801211a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801211e:	3301      	adds	r3, #1
 8012120:	b2db      	uxtb	r3, r3
 8012122:	b25a      	sxtb	r2, r3
 8012124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801212a:	2301      	movs	r3, #1
 801212c:	637b      	str	r3, [r7, #52]	; 0x34
 801212e:	e001      	b.n	8012134 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012130:	2300      	movs	r3, #0
 8012132:	637b      	str	r3, [r7, #52]	; 0x34
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	f383 8811 	msr	BASEPRI, r3
}
 801213e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012142:	4618      	mov	r0, r3
 8012144:	3738      	adds	r7, #56	; 0x38
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
	...

0801214c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801214c:	b580      	push	{r7, lr}
 801214e:	b08c      	sub	sp, #48	; 0x30
 8012150:	af00      	add	r7, sp, #0
 8012152:	60f8      	str	r0, [r7, #12]
 8012154:	60b9      	str	r1, [r7, #8]
 8012156:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012158:	2300      	movs	r3, #0
 801215a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801215c:	68fb      	ldr	r3, [r7, #12]
 801215e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012162:	2b00      	cmp	r3, #0
 8012164:	d10a      	bne.n	801217c <xQueueReceive+0x30>
	__asm volatile
 8012166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801216a:	f383 8811 	msr	BASEPRI, r3
 801216e:	f3bf 8f6f 	isb	sy
 8012172:	f3bf 8f4f 	dsb	sy
 8012176:	623b      	str	r3, [r7, #32]
}
 8012178:	bf00      	nop
 801217a:	e7fe      	b.n	801217a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d103      	bne.n	801218a <xQueueReceive+0x3e>
 8012182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012186:	2b00      	cmp	r3, #0
 8012188:	d101      	bne.n	801218e <xQueueReceive+0x42>
 801218a:	2301      	movs	r3, #1
 801218c:	e000      	b.n	8012190 <xQueueReceive+0x44>
 801218e:	2300      	movs	r3, #0
 8012190:	2b00      	cmp	r3, #0
 8012192:	d10a      	bne.n	80121aa <xQueueReceive+0x5e>
	__asm volatile
 8012194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012198:	f383 8811 	msr	BASEPRI, r3
 801219c:	f3bf 8f6f 	isb	sy
 80121a0:	f3bf 8f4f 	dsb	sy
 80121a4:	61fb      	str	r3, [r7, #28]
}
 80121a6:	bf00      	nop
 80121a8:	e7fe      	b.n	80121a8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80121aa:	f001 fa69 	bl	8013680 <xTaskGetSchedulerState>
 80121ae:	4603      	mov	r3, r0
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	d102      	bne.n	80121ba <xQueueReceive+0x6e>
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d101      	bne.n	80121be <xQueueReceive+0x72>
 80121ba:	2301      	movs	r3, #1
 80121bc:	e000      	b.n	80121c0 <xQueueReceive+0x74>
 80121be:	2300      	movs	r3, #0
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d10a      	bne.n	80121da <xQueueReceive+0x8e>
	__asm volatile
 80121c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121c8:	f383 8811 	msr	BASEPRI, r3
 80121cc:	f3bf 8f6f 	isb	sy
 80121d0:	f3bf 8f4f 	dsb	sy
 80121d4:	61bb      	str	r3, [r7, #24]
}
 80121d6:	bf00      	nop
 80121d8:	e7fe      	b.n	80121d8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80121da:	f002 f8ab 	bl	8014334 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121e2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d01f      	beq.n	801222a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80121ea:	68b9      	ldr	r1, [r7, #8]
 80121ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121ee:	f000 fabe 	bl	801276e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80121f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121f4:	1e5a      	subs	r2, r3, #1
 80121f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80121fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121fc:	691b      	ldr	r3, [r3, #16]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d00f      	beq.n	8012222 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012204:	3310      	adds	r3, #16
 8012206:	4618      	mov	r0, r3
 8012208:	f001 f878 	bl	80132fc <xTaskRemoveFromEventList>
 801220c:	4603      	mov	r3, r0
 801220e:	2b00      	cmp	r3, #0
 8012210:	d007      	beq.n	8012222 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012212:	4b3d      	ldr	r3, [pc, #244]	; (8012308 <xQueueReceive+0x1bc>)
 8012214:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012218:	601a      	str	r2, [r3, #0]
 801221a:	f3bf 8f4f 	dsb	sy
 801221e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012222:	f002 f8b7 	bl	8014394 <vPortExitCritical>
				return pdPASS;
 8012226:	2301      	movs	r3, #1
 8012228:	e069      	b.n	80122fe <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801222a:	687b      	ldr	r3, [r7, #4]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d103      	bne.n	8012238 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012230:	f002 f8b0 	bl	8014394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012234:	2300      	movs	r3, #0
 8012236:	e062      	b.n	80122fe <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223a:	2b00      	cmp	r3, #0
 801223c:	d106      	bne.n	801224c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801223e:	f107 0310 	add.w	r3, r7, #16
 8012242:	4618      	mov	r0, r3
 8012244:	f001 f8be 	bl	80133c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012248:	2301      	movs	r3, #1
 801224a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801224c:	f002 f8a2 	bl	8014394 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012250:	f000 fe18 	bl	8012e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012254:	f002 f86e 	bl	8014334 <vPortEnterCritical>
 8012258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801225a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801225e:	b25b      	sxtb	r3, r3
 8012260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012264:	d103      	bne.n	801226e <xQueueReceive+0x122>
 8012266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012268:	2200      	movs	r2, #0
 801226a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801226e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012270:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012274:	b25b      	sxtb	r3, r3
 8012276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801227a:	d103      	bne.n	8012284 <xQueueReceive+0x138>
 801227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801227e:	2200      	movs	r2, #0
 8012280:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012284:	f002 f886 	bl	8014394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012288:	1d3a      	adds	r2, r7, #4
 801228a:	f107 0310 	add.w	r3, r7, #16
 801228e:	4611      	mov	r1, r2
 8012290:	4618      	mov	r0, r3
 8012292:	f001 f8ad 	bl	80133f0 <xTaskCheckForTimeOut>
 8012296:	4603      	mov	r3, r0
 8012298:	2b00      	cmp	r3, #0
 801229a:	d123      	bne.n	80122e4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801229c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801229e:	f000 fade 	bl	801285e <prvIsQueueEmpty>
 80122a2:	4603      	mov	r3, r0
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d017      	beq.n	80122d8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80122a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122aa:	3324      	adds	r3, #36	; 0x24
 80122ac:	687a      	ldr	r2, [r7, #4]
 80122ae:	4611      	mov	r1, r2
 80122b0:	4618      	mov	r0, r3
 80122b2:	f000 ffd3 	bl	801325c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80122b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122b8:	f000 fa7f 	bl	80127ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80122bc:	f000 fdf0 	bl	8012ea0 <xTaskResumeAll>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d189      	bne.n	80121da <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80122c6:	4b10      	ldr	r3, [pc, #64]	; (8012308 <xQueueReceive+0x1bc>)
 80122c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80122cc:	601a      	str	r2, [r3, #0]
 80122ce:	f3bf 8f4f 	dsb	sy
 80122d2:	f3bf 8f6f 	isb	sy
 80122d6:	e780      	b.n	80121da <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80122d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122da:	f000 fa6e 	bl	80127ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80122de:	f000 fddf 	bl	8012ea0 <xTaskResumeAll>
 80122e2:	e77a      	b.n	80121da <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80122e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122e6:	f000 fa68 	bl	80127ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80122ea:	f000 fdd9 	bl	8012ea0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80122ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80122f0:	f000 fab5 	bl	801285e <prvIsQueueEmpty>
 80122f4:	4603      	mov	r3, r0
 80122f6:	2b00      	cmp	r3, #0
 80122f8:	f43f af6f 	beq.w	80121da <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80122fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3730      	adds	r7, #48	; 0x30
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	e000ed04 	.word	0xe000ed04

0801230c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801230c:	b580      	push	{r7, lr}
 801230e:	b08e      	sub	sp, #56	; 0x38
 8012310:	af00      	add	r7, sp, #0
 8012312:	6078      	str	r0, [r7, #4]
 8012314:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012316:	2300      	movs	r3, #0
 8012318:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801231e:	2300      	movs	r3, #0
 8012320:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012324:	2b00      	cmp	r3, #0
 8012326:	d10a      	bne.n	801233e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012328:	f04f 0350 	mov.w	r3, #80	; 0x50
 801232c:	f383 8811 	msr	BASEPRI, r3
 8012330:	f3bf 8f6f 	isb	sy
 8012334:	f3bf 8f4f 	dsb	sy
 8012338:	623b      	str	r3, [r7, #32]
}
 801233a:	bf00      	nop
 801233c:	e7fe      	b.n	801233c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012342:	2b00      	cmp	r3, #0
 8012344:	d00a      	beq.n	801235c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012346:	f04f 0350 	mov.w	r3, #80	; 0x50
 801234a:	f383 8811 	msr	BASEPRI, r3
 801234e:	f3bf 8f6f 	isb	sy
 8012352:	f3bf 8f4f 	dsb	sy
 8012356:	61fb      	str	r3, [r7, #28]
}
 8012358:	bf00      	nop
 801235a:	e7fe      	b.n	801235a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801235c:	f001 f990 	bl	8013680 <xTaskGetSchedulerState>
 8012360:	4603      	mov	r3, r0
 8012362:	2b00      	cmp	r3, #0
 8012364:	d102      	bne.n	801236c <xQueueSemaphoreTake+0x60>
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d101      	bne.n	8012370 <xQueueSemaphoreTake+0x64>
 801236c:	2301      	movs	r3, #1
 801236e:	e000      	b.n	8012372 <xQueueSemaphoreTake+0x66>
 8012370:	2300      	movs	r3, #0
 8012372:	2b00      	cmp	r3, #0
 8012374:	d10a      	bne.n	801238c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012376:	f04f 0350 	mov.w	r3, #80	; 0x50
 801237a:	f383 8811 	msr	BASEPRI, r3
 801237e:	f3bf 8f6f 	isb	sy
 8012382:	f3bf 8f4f 	dsb	sy
 8012386:	61bb      	str	r3, [r7, #24]
}
 8012388:	bf00      	nop
 801238a:	e7fe      	b.n	801238a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801238c:	f001 ffd2 	bl	8014334 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012394:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012398:	2b00      	cmp	r3, #0
 801239a:	d024      	beq.n	80123e6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801239c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801239e:	1e5a      	subs	r2, r3, #1
 80123a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80123a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d104      	bne.n	80123b6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80123ac:	f001 fade 	bl	801396c <pvTaskIncrementMutexHeldCount>
 80123b0:	4602      	mov	r2, r0
 80123b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80123b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123b8:	691b      	ldr	r3, [r3, #16]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d00f      	beq.n	80123de <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80123be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123c0:	3310      	adds	r3, #16
 80123c2:	4618      	mov	r0, r3
 80123c4:	f000 ff9a 	bl	80132fc <xTaskRemoveFromEventList>
 80123c8:	4603      	mov	r3, r0
 80123ca:	2b00      	cmp	r3, #0
 80123cc:	d007      	beq.n	80123de <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80123ce:	4b54      	ldr	r3, [pc, #336]	; (8012520 <xQueueSemaphoreTake+0x214>)
 80123d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80123d4:	601a      	str	r2, [r3, #0]
 80123d6:	f3bf 8f4f 	dsb	sy
 80123da:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80123de:	f001 ffd9 	bl	8014394 <vPortExitCritical>
				return pdPASS;
 80123e2:	2301      	movs	r3, #1
 80123e4:	e097      	b.n	8012516 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	2b00      	cmp	r3, #0
 80123ea:	d111      	bne.n	8012410 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80123ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d00a      	beq.n	8012408 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80123f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123f6:	f383 8811 	msr	BASEPRI, r3
 80123fa:	f3bf 8f6f 	isb	sy
 80123fe:	f3bf 8f4f 	dsb	sy
 8012402:	617b      	str	r3, [r7, #20]
}
 8012404:	bf00      	nop
 8012406:	e7fe      	b.n	8012406 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012408:	f001 ffc4 	bl	8014394 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801240c:	2300      	movs	r3, #0
 801240e:	e082      	b.n	8012516 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012412:	2b00      	cmp	r3, #0
 8012414:	d106      	bne.n	8012424 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012416:	f107 030c 	add.w	r3, r7, #12
 801241a:	4618      	mov	r0, r3
 801241c:	f000 ffd2 	bl	80133c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012420:	2301      	movs	r3, #1
 8012422:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012424:	f001 ffb6 	bl	8014394 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012428:	f000 fd2c 	bl	8012e84 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801242c:	f001 ff82 	bl	8014334 <vPortEnterCritical>
 8012430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012432:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012436:	b25b      	sxtb	r3, r3
 8012438:	f1b3 3fff 	cmp.w	r3, #4294967295
 801243c:	d103      	bne.n	8012446 <xQueueSemaphoreTake+0x13a>
 801243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012440:	2200      	movs	r2, #0
 8012442:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012448:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801244c:	b25b      	sxtb	r3, r3
 801244e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012452:	d103      	bne.n	801245c <xQueueSemaphoreTake+0x150>
 8012454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012456:	2200      	movs	r2, #0
 8012458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801245c:	f001 ff9a 	bl	8014394 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012460:	463a      	mov	r2, r7
 8012462:	f107 030c 	add.w	r3, r7, #12
 8012466:	4611      	mov	r1, r2
 8012468:	4618      	mov	r0, r3
 801246a:	f000 ffc1 	bl	80133f0 <xTaskCheckForTimeOut>
 801246e:	4603      	mov	r3, r0
 8012470:	2b00      	cmp	r3, #0
 8012472:	d132      	bne.n	80124da <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012474:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012476:	f000 f9f2 	bl	801285e <prvIsQueueEmpty>
 801247a:	4603      	mov	r3, r0
 801247c:	2b00      	cmp	r3, #0
 801247e:	d026      	beq.n	80124ce <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012482:	681b      	ldr	r3, [r3, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d109      	bne.n	801249c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012488:	f001 ff54 	bl	8014334 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 801248c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801248e:	689b      	ldr	r3, [r3, #8]
 8012490:	4618      	mov	r0, r3
 8012492:	f001 f913 	bl	80136bc <xTaskPriorityInherit>
 8012496:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012498:	f001 ff7c 	bl	8014394 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801249c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801249e:	3324      	adds	r3, #36	; 0x24
 80124a0:	683a      	ldr	r2, [r7, #0]
 80124a2:	4611      	mov	r1, r2
 80124a4:	4618      	mov	r0, r3
 80124a6:	f000 fed9 	bl	801325c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80124aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124ac:	f000 f985 	bl	80127ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80124b0:	f000 fcf6 	bl	8012ea0 <xTaskResumeAll>
 80124b4:	4603      	mov	r3, r0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	f47f af68 	bne.w	801238c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80124bc:	4b18      	ldr	r3, [pc, #96]	; (8012520 <xQueueSemaphoreTake+0x214>)
 80124be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124c2:	601a      	str	r2, [r3, #0]
 80124c4:	f3bf 8f4f 	dsb	sy
 80124c8:	f3bf 8f6f 	isb	sy
 80124cc:	e75e      	b.n	801238c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80124ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124d0:	f000 f973 	bl	80127ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80124d4:	f000 fce4 	bl	8012ea0 <xTaskResumeAll>
 80124d8:	e758      	b.n	801238c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80124da:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124dc:	f000 f96d 	bl	80127ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80124e0:	f000 fcde 	bl	8012ea0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80124e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124e6:	f000 f9ba 	bl	801285e <prvIsQueueEmpty>
 80124ea:	4603      	mov	r3, r0
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	f43f af4d 	beq.w	801238c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80124f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d00d      	beq.n	8012514 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80124f8:	f001 ff1c 	bl	8014334 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80124fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80124fe:	f000 f8b4 	bl	801266a <prvGetDisinheritPriorityAfterTimeout>
 8012502:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012506:	689b      	ldr	r3, [r3, #8]
 8012508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801250a:	4618      	mov	r0, r3
 801250c:	f001 f9ac 	bl	8013868 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012510:	f001 ff40 	bl	8014394 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012514:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012516:	4618      	mov	r0, r3
 8012518:	3738      	adds	r7, #56	; 0x38
 801251a:	46bd      	mov	sp, r7
 801251c:	bd80      	pop	{r7, pc}
 801251e:	bf00      	nop
 8012520:	e000ed04 	.word	0xe000ed04

08012524 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012524:	b580      	push	{r7, lr}
 8012526:	b08e      	sub	sp, #56	; 0x38
 8012528:	af00      	add	r7, sp, #0
 801252a:	60f8      	str	r0, [r7, #12]
 801252c:	60b9      	str	r1, [r7, #8]
 801252e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012536:	2b00      	cmp	r3, #0
 8012538:	d10a      	bne.n	8012550 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 801253a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801253e:	f383 8811 	msr	BASEPRI, r3
 8012542:	f3bf 8f6f 	isb	sy
 8012546:	f3bf 8f4f 	dsb	sy
 801254a:	623b      	str	r3, [r7, #32]
}
 801254c:	bf00      	nop
 801254e:	e7fe      	b.n	801254e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d103      	bne.n	801255e <xQueueReceiveFromISR+0x3a>
 8012556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801255a:	2b00      	cmp	r3, #0
 801255c:	d101      	bne.n	8012562 <xQueueReceiveFromISR+0x3e>
 801255e:	2301      	movs	r3, #1
 8012560:	e000      	b.n	8012564 <xQueueReceiveFromISR+0x40>
 8012562:	2300      	movs	r3, #0
 8012564:	2b00      	cmp	r3, #0
 8012566:	d10a      	bne.n	801257e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012568:	f04f 0350 	mov.w	r3, #80	; 0x50
 801256c:	f383 8811 	msr	BASEPRI, r3
 8012570:	f3bf 8f6f 	isb	sy
 8012574:	f3bf 8f4f 	dsb	sy
 8012578:	61fb      	str	r3, [r7, #28]
}
 801257a:	bf00      	nop
 801257c:	e7fe      	b.n	801257c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801257e:	f001 ffbb 	bl	80144f8 <vPortValidateInterruptPriority>
	__asm volatile
 8012582:	f3ef 8211 	mrs	r2, BASEPRI
 8012586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258a:	f383 8811 	msr	BASEPRI, r3
 801258e:	f3bf 8f6f 	isb	sy
 8012592:	f3bf 8f4f 	dsb	sy
 8012596:	61ba      	str	r2, [r7, #24]
 8012598:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801259a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801259c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801259e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125a2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80125a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d02f      	beq.n	801260a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80125aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80125b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80125b4:	68b9      	ldr	r1, [r7, #8]
 80125b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125b8:	f000 f8d9 	bl	801276e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80125bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125be:	1e5a      	subs	r2, r3, #1
 80125c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125c2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80125c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80125c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125cc:	d112      	bne.n	80125f4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80125ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d0:	691b      	ldr	r3, [r3, #16]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d016      	beq.n	8012604 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80125d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d8:	3310      	adds	r3, #16
 80125da:	4618      	mov	r0, r3
 80125dc:	f000 fe8e 	bl	80132fc <xTaskRemoveFromEventList>
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d00e      	beq.n	8012604 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d00b      	beq.n	8012604 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2201      	movs	r2, #1
 80125f0:	601a      	str	r2, [r3, #0]
 80125f2:	e007      	b.n	8012604 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80125f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80125f8:	3301      	adds	r3, #1
 80125fa:	b2db      	uxtb	r3, r3
 80125fc:	b25a      	sxtb	r2, r3
 80125fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012600:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012604:	2301      	movs	r3, #1
 8012606:	637b      	str	r3, [r7, #52]	; 0x34
 8012608:	e001      	b.n	801260e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801260a:	2300      	movs	r3, #0
 801260c:	637b      	str	r3, [r7, #52]	; 0x34
 801260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012610:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012612:	693b      	ldr	r3, [r7, #16]
 8012614:	f383 8811 	msr	BASEPRI, r3
}
 8012618:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801261a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801261c:	4618      	mov	r0, r3
 801261e:	3738      	adds	r7, #56	; 0x38
 8012620:	46bd      	mov	sp, r7
 8012622:	bd80      	pop	{r7, pc}

08012624 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b084      	sub	sp, #16
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d10a      	bne.n	801264c <vQueueDelete+0x28>
	__asm volatile
 8012636:	f04f 0350 	mov.w	r3, #80	; 0x50
 801263a:	f383 8811 	msr	BASEPRI, r3
 801263e:	f3bf 8f6f 	isb	sy
 8012642:	f3bf 8f4f 	dsb	sy
 8012646:	60bb      	str	r3, [r7, #8]
}
 8012648:	bf00      	nop
 801264a:	e7fe      	b.n	801264a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801264c:	68f8      	ldr	r0, [r7, #12]
 801264e:	f000 f95f 	bl	8012910 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012658:	2b00      	cmp	r3, #0
 801265a:	d102      	bne.n	8012662 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 801265c:	68f8      	ldr	r0, [r7, #12]
 801265e:	f002 f84f 	bl	8014700 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012662:	bf00      	nop
 8012664:	3710      	adds	r7, #16
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}

0801266a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801266a:	b480      	push	{r7}
 801266c:	b085      	sub	sp, #20
 801266e:	af00      	add	r7, sp, #0
 8012670:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012676:	2b00      	cmp	r3, #0
 8012678:	d006      	beq.n	8012688 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012684:	60fb      	str	r3, [r7, #12]
 8012686:	e001      	b.n	801268c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012688:	2300      	movs	r3, #0
 801268a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801268c:	68fb      	ldr	r3, [r7, #12]
	}
 801268e:	4618      	mov	r0, r3
 8012690:	3714      	adds	r7, #20
 8012692:	46bd      	mov	sp, r7
 8012694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012698:	4770      	bx	lr

0801269a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801269a:	b580      	push	{r7, lr}
 801269c:	b086      	sub	sp, #24
 801269e:	af00      	add	r7, sp, #0
 80126a0:	60f8      	str	r0, [r7, #12]
 80126a2:	60b9      	str	r1, [r7, #8]
 80126a4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80126a6:	2300      	movs	r3, #0
 80126a8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126ae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d10d      	bne.n	80126d4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	2b00      	cmp	r3, #0
 80126be:	d14d      	bne.n	801275c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80126c0:	68fb      	ldr	r3, [r7, #12]
 80126c2:	689b      	ldr	r3, [r3, #8]
 80126c4:	4618      	mov	r0, r3
 80126c6:	f001 f861 	bl	801378c <xTaskPriorityDisinherit>
 80126ca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80126cc:	68fb      	ldr	r3, [r7, #12]
 80126ce:	2200      	movs	r2, #0
 80126d0:	609a      	str	r2, [r3, #8]
 80126d2:	e043      	b.n	801275c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80126d4:	687b      	ldr	r3, [r7, #4]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d119      	bne.n	801270e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80126da:	68fb      	ldr	r3, [r7, #12]
 80126dc:	6858      	ldr	r0, [r3, #4]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126e2:	461a      	mov	r2, r3
 80126e4:	68b9      	ldr	r1, [r7, #8]
 80126e6:	f002 fd59 	bl	801519c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80126ea:	68fb      	ldr	r3, [r7, #12]
 80126ec:	685a      	ldr	r2, [r3, #4]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80126f2:	441a      	add	r2, r3
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	685a      	ldr	r2, [r3, #4]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	689b      	ldr	r3, [r3, #8]
 8012700:	429a      	cmp	r2, r3
 8012702:	d32b      	bcc.n	801275c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	681a      	ldr	r2, [r3, #0]
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	605a      	str	r2, [r3, #4]
 801270c:	e026      	b.n	801275c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	68d8      	ldr	r0, [r3, #12]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012716:	461a      	mov	r2, r3
 8012718:	68b9      	ldr	r1, [r7, #8]
 801271a:	f002 fd3f 	bl	801519c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	68da      	ldr	r2, [r3, #12]
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012726:	425b      	negs	r3, r3
 8012728:	441a      	add	r2, r3
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	68da      	ldr	r2, [r3, #12]
 8012732:	68fb      	ldr	r3, [r7, #12]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	429a      	cmp	r2, r3
 8012738:	d207      	bcs.n	801274a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	689a      	ldr	r2, [r3, #8]
 801273e:	68fb      	ldr	r3, [r7, #12]
 8012740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012742:	425b      	negs	r3, r3
 8012744:	441a      	add	r2, r3
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	2b02      	cmp	r3, #2
 801274e:	d105      	bne.n	801275c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012750:	693b      	ldr	r3, [r7, #16]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d002      	beq.n	801275c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012756:	693b      	ldr	r3, [r7, #16]
 8012758:	3b01      	subs	r3, #1
 801275a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	1c5a      	adds	r2, r3, #1
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012764:	697b      	ldr	r3, [r7, #20]
}
 8012766:	4618      	mov	r0, r3
 8012768:	3718      	adds	r7, #24
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}

0801276e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801276e:	b580      	push	{r7, lr}
 8012770:	b082      	sub	sp, #8
 8012772:	af00      	add	r7, sp, #0
 8012774:	6078      	str	r0, [r7, #4]
 8012776:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012778:	687b      	ldr	r3, [r7, #4]
 801277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801277c:	2b00      	cmp	r3, #0
 801277e:	d018      	beq.n	80127b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	68da      	ldr	r2, [r3, #12]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012788:	441a      	add	r2, r3
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	68da      	ldr	r2, [r3, #12]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	689b      	ldr	r3, [r3, #8]
 8012796:	429a      	cmp	r2, r3
 8012798:	d303      	bcc.n	80127a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	681a      	ldr	r2, [r3, #0]
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	68d9      	ldr	r1, [r3, #12]
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127aa:	461a      	mov	r2, r3
 80127ac:	6838      	ldr	r0, [r7, #0]
 80127ae:	f002 fcf5 	bl	801519c <memcpy>
	}
}
 80127b2:	bf00      	nop
 80127b4:	3708      	adds	r7, #8
 80127b6:	46bd      	mov	sp, r7
 80127b8:	bd80      	pop	{r7, pc}

080127ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80127ba:	b580      	push	{r7, lr}
 80127bc:	b084      	sub	sp, #16
 80127be:	af00      	add	r7, sp, #0
 80127c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80127c2:	f001 fdb7 	bl	8014334 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80127cc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127ce:	e011      	b.n	80127f4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d012      	beq.n	80127fe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	3324      	adds	r3, #36	; 0x24
 80127dc:	4618      	mov	r0, r3
 80127de:	f000 fd8d 	bl	80132fc <xTaskRemoveFromEventList>
 80127e2:	4603      	mov	r3, r0
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d001      	beq.n	80127ec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80127e8:	f000 fe64 	bl	80134b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80127ec:	7bfb      	ldrb	r3, [r7, #15]
 80127ee:	3b01      	subs	r3, #1
 80127f0:	b2db      	uxtb	r3, r3
 80127f2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80127f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	dce9      	bgt.n	80127d0 <prvUnlockQueue+0x16>
 80127fc:	e000      	b.n	8012800 <prvUnlockQueue+0x46>
					break;
 80127fe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	22ff      	movs	r2, #255	; 0xff
 8012804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012808:	f001 fdc4 	bl	8014394 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801280c:	f001 fd92 	bl	8014334 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012816:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012818:	e011      	b.n	801283e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	691b      	ldr	r3, [r3, #16]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d012      	beq.n	8012848 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	3310      	adds	r3, #16
 8012826:	4618      	mov	r0, r3
 8012828:	f000 fd68 	bl	80132fc <xTaskRemoveFromEventList>
 801282c:	4603      	mov	r3, r0
 801282e:	2b00      	cmp	r3, #0
 8012830:	d001      	beq.n	8012836 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012832:	f000 fe3f 	bl	80134b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012836:	7bbb      	ldrb	r3, [r7, #14]
 8012838:	3b01      	subs	r3, #1
 801283a:	b2db      	uxtb	r3, r3
 801283c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801283e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012842:	2b00      	cmp	r3, #0
 8012844:	dce9      	bgt.n	801281a <prvUnlockQueue+0x60>
 8012846:	e000      	b.n	801284a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012848:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	22ff      	movs	r2, #255	; 0xff
 801284e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012852:	f001 fd9f 	bl	8014394 <vPortExitCritical>
}
 8012856:	bf00      	nop
 8012858:	3710      	adds	r7, #16
 801285a:	46bd      	mov	sp, r7
 801285c:	bd80      	pop	{r7, pc}

0801285e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801285e:	b580      	push	{r7, lr}
 8012860:	b084      	sub	sp, #16
 8012862:	af00      	add	r7, sp, #0
 8012864:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012866:	f001 fd65 	bl	8014334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801286e:	2b00      	cmp	r3, #0
 8012870:	d102      	bne.n	8012878 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012872:	2301      	movs	r3, #1
 8012874:	60fb      	str	r3, [r7, #12]
 8012876:	e001      	b.n	801287c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012878:	2300      	movs	r3, #0
 801287a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801287c:	f001 fd8a 	bl	8014394 <vPortExitCritical>

	return xReturn;
 8012880:	68fb      	ldr	r3, [r7, #12]
}
 8012882:	4618      	mov	r0, r3
 8012884:	3710      	adds	r7, #16
 8012886:	46bd      	mov	sp, r7
 8012888:	bd80      	pop	{r7, pc}

0801288a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801288a:	b580      	push	{r7, lr}
 801288c:	b084      	sub	sp, #16
 801288e:	af00      	add	r7, sp, #0
 8012890:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012892:	f001 fd4f 	bl	8014334 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801289e:	429a      	cmp	r2, r3
 80128a0:	d102      	bne.n	80128a8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80128a2:	2301      	movs	r3, #1
 80128a4:	60fb      	str	r3, [r7, #12]
 80128a6:	e001      	b.n	80128ac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80128a8:	2300      	movs	r3, #0
 80128aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80128ac:	f001 fd72 	bl	8014394 <vPortExitCritical>

	return xReturn;
 80128b0:	68fb      	ldr	r3, [r7, #12]
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3710      	adds	r7, #16
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
	...

080128bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80128bc:	b480      	push	{r7}
 80128be:	b085      	sub	sp, #20
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128c6:	2300      	movs	r3, #0
 80128c8:	60fb      	str	r3, [r7, #12]
 80128ca:	e014      	b.n	80128f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80128cc:	4a0f      	ldr	r2, [pc, #60]	; (801290c <vQueueAddToRegistry+0x50>)
 80128ce:	68fb      	ldr	r3, [r7, #12]
 80128d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d10b      	bne.n	80128f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80128d8:	490c      	ldr	r1, [pc, #48]	; (801290c <vQueueAddToRegistry+0x50>)
 80128da:	68fb      	ldr	r3, [r7, #12]
 80128dc:	683a      	ldr	r2, [r7, #0]
 80128de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80128e2:	4a0a      	ldr	r2, [pc, #40]	; (801290c <vQueueAddToRegistry+0x50>)
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	00db      	lsls	r3, r3, #3
 80128e8:	4413      	add	r3, r2
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80128ee:	e006      	b.n	80128fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	3301      	adds	r3, #1
 80128f4:	60fb      	str	r3, [r7, #12]
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	2b07      	cmp	r3, #7
 80128fa:	d9e7      	bls.n	80128cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80128fc:	bf00      	nop
 80128fe:	bf00      	nop
 8012900:	3714      	adds	r7, #20
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr
 801290a:	bf00      	nop
 801290c:	20000ec0 	.word	0x20000ec0

08012910 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012910:	b480      	push	{r7}
 8012912:	b085      	sub	sp, #20
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012918:	2300      	movs	r3, #0
 801291a:	60fb      	str	r3, [r7, #12]
 801291c:	e016      	b.n	801294c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801291e:	4a10      	ldr	r2, [pc, #64]	; (8012960 <vQueueUnregisterQueue+0x50>)
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	00db      	lsls	r3, r3, #3
 8012924:	4413      	add	r3, r2
 8012926:	685b      	ldr	r3, [r3, #4]
 8012928:	687a      	ldr	r2, [r7, #4]
 801292a:	429a      	cmp	r2, r3
 801292c:	d10b      	bne.n	8012946 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801292e:	4a0c      	ldr	r2, [pc, #48]	; (8012960 <vQueueUnregisterQueue+0x50>)
 8012930:	68fb      	ldr	r3, [r7, #12]
 8012932:	2100      	movs	r1, #0
 8012934:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8012938:	4a09      	ldr	r2, [pc, #36]	; (8012960 <vQueueUnregisterQueue+0x50>)
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	00db      	lsls	r3, r3, #3
 801293e:	4413      	add	r3, r2
 8012940:	2200      	movs	r2, #0
 8012942:	605a      	str	r2, [r3, #4]
				break;
 8012944:	e006      	b.n	8012954 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	3301      	adds	r3, #1
 801294a:	60fb      	str	r3, [r7, #12]
 801294c:	68fb      	ldr	r3, [r7, #12]
 801294e:	2b07      	cmp	r3, #7
 8012950:	d9e5      	bls.n	801291e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8012952:	bf00      	nop
 8012954:	bf00      	nop
 8012956:	3714      	adds	r7, #20
 8012958:	46bd      	mov	sp, r7
 801295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801295e:	4770      	bx	lr
 8012960:	20000ec0 	.word	0x20000ec0

08012964 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8012964:	b580      	push	{r7, lr}
 8012966:	b086      	sub	sp, #24
 8012968:	af00      	add	r7, sp, #0
 801296a:	60f8      	str	r0, [r7, #12]
 801296c:	60b9      	str	r1, [r7, #8]
 801296e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8012974:	f001 fcde 	bl	8014334 <vPortEnterCritical>
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801297e:	b25b      	sxtb	r3, r3
 8012980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012984:	d103      	bne.n	801298e <vQueueWaitForMessageRestricted+0x2a>
 8012986:	697b      	ldr	r3, [r7, #20]
 8012988:	2200      	movs	r2, #0
 801298a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012994:	b25b      	sxtb	r3, r3
 8012996:	f1b3 3fff 	cmp.w	r3, #4294967295
 801299a:	d103      	bne.n	80129a4 <vQueueWaitForMessageRestricted+0x40>
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	2200      	movs	r2, #0
 80129a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80129a4:	f001 fcf6 	bl	8014394 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80129a8:	697b      	ldr	r3, [r7, #20]
 80129aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d106      	bne.n	80129be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	3324      	adds	r3, #36	; 0x24
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	68b9      	ldr	r1, [r7, #8]
 80129b8:	4618      	mov	r0, r3
 80129ba:	f000 fc73 	bl	80132a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80129be:	6978      	ldr	r0, [r7, #20]
 80129c0:	f7ff fefb 	bl	80127ba <prvUnlockQueue>
	}
 80129c4:	bf00      	nop
 80129c6:	3718      	adds	r7, #24
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}

080129cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b08e      	sub	sp, #56	; 0x38
 80129d0:	af04      	add	r7, sp, #16
 80129d2:	60f8      	str	r0, [r7, #12]
 80129d4:	60b9      	str	r1, [r7, #8]
 80129d6:	607a      	str	r2, [r7, #4]
 80129d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80129da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d10a      	bne.n	80129f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80129e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e4:	f383 8811 	msr	BASEPRI, r3
 80129e8:	f3bf 8f6f 	isb	sy
 80129ec:	f3bf 8f4f 	dsb	sy
 80129f0:	623b      	str	r3, [r7, #32]
}
 80129f2:	bf00      	nop
 80129f4:	e7fe      	b.n	80129f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80129f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d10a      	bne.n	8012a12 <xTaskCreateStatic+0x46>
	__asm volatile
 80129fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a00:	f383 8811 	msr	BASEPRI, r3
 8012a04:	f3bf 8f6f 	isb	sy
 8012a08:	f3bf 8f4f 	dsb	sy
 8012a0c:	61fb      	str	r3, [r7, #28]
}
 8012a0e:	bf00      	nop
 8012a10:	e7fe      	b.n	8012a10 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012a12:	23bc      	movs	r3, #188	; 0xbc
 8012a14:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8012a16:	693b      	ldr	r3, [r7, #16]
 8012a18:	2bbc      	cmp	r3, #188	; 0xbc
 8012a1a:	d00a      	beq.n	8012a32 <xTaskCreateStatic+0x66>
	__asm volatile
 8012a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a20:	f383 8811 	msr	BASEPRI, r3
 8012a24:	f3bf 8f6f 	isb	sy
 8012a28:	f3bf 8f4f 	dsb	sy
 8012a2c:	61bb      	str	r3, [r7, #24]
}
 8012a2e:	bf00      	nop
 8012a30:	e7fe      	b.n	8012a30 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8012a32:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8012a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d01e      	beq.n	8012a78 <xTaskCreateStatic+0xac>
 8012a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d01b      	beq.n	8012a78 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012a40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a42:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8012a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012a48:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8012a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4c:	2202      	movs	r2, #2
 8012a4e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8012a52:	2300      	movs	r3, #0
 8012a54:	9303      	str	r3, [sp, #12]
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	9302      	str	r3, [sp, #8]
 8012a5a:	f107 0314 	add.w	r3, r7, #20
 8012a5e:	9301      	str	r3, [sp, #4]
 8012a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a62:	9300      	str	r3, [sp, #0]
 8012a64:	683b      	ldr	r3, [r7, #0]
 8012a66:	687a      	ldr	r2, [r7, #4]
 8012a68:	68b9      	ldr	r1, [r7, #8]
 8012a6a:	68f8      	ldr	r0, [r7, #12]
 8012a6c:	f000 f850 	bl	8012b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012a70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012a72:	f000 f8f3 	bl	8012c5c <prvAddNewTaskToReadyList>
 8012a76:	e001      	b.n	8012a7c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8012a7c:	697b      	ldr	r3, [r7, #20]
	}
 8012a7e:	4618      	mov	r0, r3
 8012a80:	3728      	adds	r7, #40	; 0x28
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}

08012a86 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012a86:	b580      	push	{r7, lr}
 8012a88:	b08c      	sub	sp, #48	; 0x30
 8012a8a:	af04      	add	r7, sp, #16
 8012a8c:	60f8      	str	r0, [r7, #12]
 8012a8e:	60b9      	str	r1, [r7, #8]
 8012a90:	603b      	str	r3, [r7, #0]
 8012a92:	4613      	mov	r3, r2
 8012a94:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012a96:	88fb      	ldrh	r3, [r7, #6]
 8012a98:	009b      	lsls	r3, r3, #2
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	f001 fd6c 	bl	8014578 <pvPortMalloc>
 8012aa0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d00e      	beq.n	8012ac6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012aa8:	20bc      	movs	r0, #188	; 0xbc
 8012aaa:	f001 fd65 	bl	8014578 <pvPortMalloc>
 8012aae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d003      	beq.n	8012abe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012ab6:	69fb      	ldr	r3, [r7, #28]
 8012ab8:	697a      	ldr	r2, [r7, #20]
 8012aba:	631a      	str	r2, [r3, #48]	; 0x30
 8012abc:	e005      	b.n	8012aca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012abe:	6978      	ldr	r0, [r7, #20]
 8012ac0:	f001 fe1e 	bl	8014700 <vPortFree>
 8012ac4:	e001      	b.n	8012aca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d017      	beq.n	8012b00 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	2200      	movs	r2, #0
 8012ad4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012ad8:	88fa      	ldrh	r2, [r7, #6]
 8012ada:	2300      	movs	r3, #0
 8012adc:	9303      	str	r3, [sp, #12]
 8012ade:	69fb      	ldr	r3, [r7, #28]
 8012ae0:	9302      	str	r3, [sp, #8]
 8012ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae4:	9301      	str	r3, [sp, #4]
 8012ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae8:	9300      	str	r3, [sp, #0]
 8012aea:	683b      	ldr	r3, [r7, #0]
 8012aec:	68b9      	ldr	r1, [r7, #8]
 8012aee:	68f8      	ldr	r0, [r7, #12]
 8012af0:	f000 f80e 	bl	8012b10 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012af4:	69f8      	ldr	r0, [r7, #28]
 8012af6:	f000 f8b1 	bl	8012c5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8012afa:	2301      	movs	r3, #1
 8012afc:	61bb      	str	r3, [r7, #24]
 8012afe:	e002      	b.n	8012b06 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012b00:	f04f 33ff 	mov.w	r3, #4294967295
 8012b04:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012b06:	69bb      	ldr	r3, [r7, #24]
	}
 8012b08:	4618      	mov	r0, r3
 8012b0a:	3720      	adds	r7, #32
 8012b0c:	46bd      	mov	sp, r7
 8012b0e:	bd80      	pop	{r7, pc}

08012b10 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012b10:	b580      	push	{r7, lr}
 8012b12:	b088      	sub	sp, #32
 8012b14:	af00      	add	r7, sp, #0
 8012b16:	60f8      	str	r0, [r7, #12]
 8012b18:	60b9      	str	r1, [r7, #8]
 8012b1a:	607a      	str	r2, [r7, #4]
 8012b1c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b20:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	009b      	lsls	r3, r3, #2
 8012b26:	461a      	mov	r2, r3
 8012b28:	21a5      	movs	r1, #165	; 0xa5
 8012b2a:	f002 fb45 	bl	80151b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8012b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012b32:	687b      	ldr	r3, [r7, #4]
 8012b34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8012b38:	3b01      	subs	r3, #1
 8012b3a:	009b      	lsls	r3, r3, #2
 8012b3c:	4413      	add	r3, r2
 8012b3e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	f023 0307 	bic.w	r3, r3, #7
 8012b46:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8012b48:	69bb      	ldr	r3, [r7, #24]
 8012b4a:	f003 0307 	and.w	r3, r3, #7
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d00a      	beq.n	8012b68 <prvInitialiseNewTask+0x58>
	__asm volatile
 8012b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b56:	f383 8811 	msr	BASEPRI, r3
 8012b5a:	f3bf 8f6f 	isb	sy
 8012b5e:	f3bf 8f4f 	dsb	sy
 8012b62:	617b      	str	r3, [r7, #20]
}
 8012b64:	bf00      	nop
 8012b66:	e7fe      	b.n	8012b66 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d01f      	beq.n	8012bae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012b6e:	2300      	movs	r3, #0
 8012b70:	61fb      	str	r3, [r7, #28]
 8012b72:	e012      	b.n	8012b9a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8012b74:	68ba      	ldr	r2, [r7, #8]
 8012b76:	69fb      	ldr	r3, [r7, #28]
 8012b78:	4413      	add	r3, r2
 8012b7a:	7819      	ldrb	r1, [r3, #0]
 8012b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012b7e:	69fb      	ldr	r3, [r7, #28]
 8012b80:	4413      	add	r3, r2
 8012b82:	3334      	adds	r3, #52	; 0x34
 8012b84:	460a      	mov	r2, r1
 8012b86:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8012b88:	68ba      	ldr	r2, [r7, #8]
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	4413      	add	r3, r2
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d006      	beq.n	8012ba2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012b94:	69fb      	ldr	r3, [r7, #28]
 8012b96:	3301      	adds	r3, #1
 8012b98:	61fb      	str	r3, [r7, #28]
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	2b0f      	cmp	r3, #15
 8012b9e:	d9e9      	bls.n	8012b74 <prvInitialiseNewTask+0x64>
 8012ba0:	e000      	b.n	8012ba4 <prvInitialiseNewTask+0x94>
			{
				break;
 8012ba2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012ba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba6:	2200      	movs	r2, #0
 8012ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012bac:	e003      	b.n	8012bb6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb0:	2200      	movs	r2, #0
 8012bb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb8:	2b37      	cmp	r3, #55	; 0x37
 8012bba:	d901      	bls.n	8012bc0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012bbc:	2337      	movs	r3, #55	; 0x37
 8012bbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bce:	2200      	movs	r2, #0
 8012bd0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bd4:	3304      	adds	r3, #4
 8012bd6:	4618      	mov	r0, r3
 8012bd8:	f7fe fe06 	bl	80117e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bde:	3318      	adds	r3, #24
 8012be0:	4618      	mov	r0, r3
 8012be2:	f7fe fe01 	bl	80117e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012be8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012bfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bfe:	2200      	movs	r2, #0
 8012c00:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c06:	2200      	movs	r2, #0
 8012c08:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c0e:	3354      	adds	r3, #84	; 0x54
 8012c10:	2260      	movs	r2, #96	; 0x60
 8012c12:	2100      	movs	r1, #0
 8012c14:	4618      	mov	r0, r3
 8012c16:	f002 facf 	bl	80151b8 <memset>
 8012c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c1c:	4a0c      	ldr	r2, [pc, #48]	; (8012c50 <prvInitialiseNewTask+0x140>)
 8012c1e:	659a      	str	r2, [r3, #88]	; 0x58
 8012c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c22:	4a0c      	ldr	r2, [pc, #48]	; (8012c54 <prvInitialiseNewTask+0x144>)
 8012c24:	65da      	str	r2, [r3, #92]	; 0x5c
 8012c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c28:	4a0b      	ldr	r2, [pc, #44]	; (8012c58 <prvInitialiseNewTask+0x148>)
 8012c2a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012c2c:	683a      	ldr	r2, [r7, #0]
 8012c2e:	68f9      	ldr	r1, [r7, #12]
 8012c30:	69b8      	ldr	r0, [r7, #24]
 8012c32:	f001 fa51 	bl	80140d8 <pxPortInitialiseStack>
 8012c36:	4602      	mov	r2, r0
 8012c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012c3a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8012c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d002      	beq.n	8012c48 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012c46:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012c48:	bf00      	nop
 8012c4a:	3720      	adds	r7, #32
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}
 8012c50:	08018d20 	.word	0x08018d20
 8012c54:	08018d40 	.word	0x08018d40
 8012c58:	08018d00 	.word	0x08018d00

08012c5c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012c64:	f001 fb66 	bl	8014334 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012c68:	4b2d      	ldr	r3, [pc, #180]	; (8012d20 <prvAddNewTaskToReadyList+0xc4>)
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	3301      	adds	r3, #1
 8012c6e:	4a2c      	ldr	r2, [pc, #176]	; (8012d20 <prvAddNewTaskToReadyList+0xc4>)
 8012c70:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012c72:	4b2c      	ldr	r3, [pc, #176]	; (8012d24 <prvAddNewTaskToReadyList+0xc8>)
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d109      	bne.n	8012c8e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8012c7a:	4a2a      	ldr	r2, [pc, #168]	; (8012d24 <prvAddNewTaskToReadyList+0xc8>)
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012c80:	4b27      	ldr	r3, [pc, #156]	; (8012d20 <prvAddNewTaskToReadyList+0xc4>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d110      	bne.n	8012caa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012c88:	f000 fc38 	bl	80134fc <prvInitialiseTaskLists>
 8012c8c:	e00d      	b.n	8012caa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012c8e:	4b26      	ldr	r3, [pc, #152]	; (8012d28 <prvAddNewTaskToReadyList+0xcc>)
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d109      	bne.n	8012caa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012c96:	4b23      	ldr	r3, [pc, #140]	; (8012d24 <prvAddNewTaskToReadyList+0xc8>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012c9c:	687b      	ldr	r3, [r7, #4]
 8012c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	d802      	bhi.n	8012caa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012ca4:	4a1f      	ldr	r2, [pc, #124]	; (8012d24 <prvAddNewTaskToReadyList+0xc8>)
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012caa:	4b20      	ldr	r3, [pc, #128]	; (8012d2c <prvAddNewTaskToReadyList+0xd0>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	4a1e      	ldr	r2, [pc, #120]	; (8012d2c <prvAddNewTaskToReadyList+0xd0>)
 8012cb2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012cb4:	4b1d      	ldr	r3, [pc, #116]	; (8012d2c <prvAddNewTaskToReadyList+0xd0>)
 8012cb6:	681a      	ldr	r2, [r3, #0]
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cc0:	4b1b      	ldr	r3, [pc, #108]	; (8012d30 <prvAddNewTaskToReadyList+0xd4>)
 8012cc2:	681b      	ldr	r3, [r3, #0]
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d903      	bls.n	8012cd0 <prvAddNewTaskToReadyList+0x74>
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ccc:	4a18      	ldr	r2, [pc, #96]	; (8012d30 <prvAddNewTaskToReadyList+0xd4>)
 8012cce:	6013      	str	r3, [r2, #0]
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	4413      	add	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	4a15      	ldr	r2, [pc, #84]	; (8012d34 <prvAddNewTaskToReadyList+0xd8>)
 8012cde:	441a      	add	r2, r3
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	3304      	adds	r3, #4
 8012ce4:	4619      	mov	r1, r3
 8012ce6:	4610      	mov	r0, r2
 8012ce8:	f7fe fd8b 	bl	8011802 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012cec:	f001 fb52 	bl	8014394 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8012cf0:	4b0d      	ldr	r3, [pc, #52]	; (8012d28 <prvAddNewTaskToReadyList+0xcc>)
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d00e      	beq.n	8012d16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012cf8:	4b0a      	ldr	r3, [pc, #40]	; (8012d24 <prvAddNewTaskToReadyList+0xc8>)
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012cfe:	687b      	ldr	r3, [r7, #4]
 8012d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d02:	429a      	cmp	r2, r3
 8012d04:	d207      	bcs.n	8012d16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012d06:	4b0c      	ldr	r3, [pc, #48]	; (8012d38 <prvAddNewTaskToReadyList+0xdc>)
 8012d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d0c:	601a      	str	r2, [r3, #0]
 8012d0e:	f3bf 8f4f 	dsb	sy
 8012d12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012d16:	bf00      	nop
 8012d18:	3708      	adds	r7, #8
 8012d1a:	46bd      	mov	sp, r7
 8012d1c:	bd80      	pop	{r7, pc}
 8012d1e:	bf00      	nop
 8012d20:	200013d4 	.word	0x200013d4
 8012d24:	20000f00 	.word	0x20000f00
 8012d28:	200013e0 	.word	0x200013e0
 8012d2c:	200013f0 	.word	0x200013f0
 8012d30:	200013dc 	.word	0x200013dc
 8012d34:	20000f04 	.word	0x20000f04
 8012d38:	e000ed04 	.word	0xe000ed04

08012d3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012d3c:	b580      	push	{r7, lr}
 8012d3e:	b084      	sub	sp, #16
 8012d40:	af00      	add	r7, sp, #0
 8012d42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012d44:	2300      	movs	r3, #0
 8012d46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	2b00      	cmp	r3, #0
 8012d4c:	d017      	beq.n	8012d7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012d4e:	4b13      	ldr	r3, [pc, #76]	; (8012d9c <vTaskDelay+0x60>)
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d00a      	beq.n	8012d6c <vTaskDelay+0x30>
	__asm volatile
 8012d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d5a:	f383 8811 	msr	BASEPRI, r3
 8012d5e:	f3bf 8f6f 	isb	sy
 8012d62:	f3bf 8f4f 	dsb	sy
 8012d66:	60bb      	str	r3, [r7, #8]
}
 8012d68:	bf00      	nop
 8012d6a:	e7fe      	b.n	8012d6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8012d6c:	f000 f88a 	bl	8012e84 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012d70:	2100      	movs	r1, #0
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f000 fe0e 	bl	8013994 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8012d78:	f000 f892 	bl	8012ea0 <xTaskResumeAll>
 8012d7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012d7e:	68fb      	ldr	r3, [r7, #12]
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d107      	bne.n	8012d94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012d84:	4b06      	ldr	r3, [pc, #24]	; (8012da0 <vTaskDelay+0x64>)
 8012d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d8a:	601a      	str	r2, [r3, #0]
 8012d8c:	f3bf 8f4f 	dsb	sy
 8012d90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012d94:	bf00      	nop
 8012d96:	3710      	adds	r7, #16
 8012d98:	46bd      	mov	sp, r7
 8012d9a:	bd80      	pop	{r7, pc}
 8012d9c:	200013fc 	.word	0x200013fc
 8012da0:	e000ed04 	.word	0xe000ed04

08012da4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012da4:	b580      	push	{r7, lr}
 8012da6:	b08a      	sub	sp, #40	; 0x28
 8012da8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8012daa:	2300      	movs	r3, #0
 8012dac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8012dae:	2300      	movs	r3, #0
 8012db0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8012db2:	463a      	mov	r2, r7
 8012db4:	1d39      	adds	r1, r7, #4
 8012db6:	f107 0308 	add.w	r3, r7, #8
 8012dba:	4618      	mov	r0, r3
 8012dbc:	f7fe fcc0 	bl	8011740 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012dc0:	6839      	ldr	r1, [r7, #0]
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	68ba      	ldr	r2, [r7, #8]
 8012dc6:	9202      	str	r2, [sp, #8]
 8012dc8:	9301      	str	r3, [sp, #4]
 8012dca:	2300      	movs	r3, #0
 8012dcc:	9300      	str	r3, [sp, #0]
 8012dce:	2300      	movs	r3, #0
 8012dd0:	460a      	mov	r2, r1
 8012dd2:	4924      	ldr	r1, [pc, #144]	; (8012e64 <vTaskStartScheduler+0xc0>)
 8012dd4:	4824      	ldr	r0, [pc, #144]	; (8012e68 <vTaskStartScheduler+0xc4>)
 8012dd6:	f7ff fdf9 	bl	80129cc <xTaskCreateStatic>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	4a23      	ldr	r2, [pc, #140]	; (8012e6c <vTaskStartScheduler+0xc8>)
 8012dde:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012de0:	4b22      	ldr	r3, [pc, #136]	; (8012e6c <vTaskStartScheduler+0xc8>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d002      	beq.n	8012dee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012de8:	2301      	movs	r3, #1
 8012dea:	617b      	str	r3, [r7, #20]
 8012dec:	e001      	b.n	8012df2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012dee:	2300      	movs	r3, #0
 8012df0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	2b01      	cmp	r3, #1
 8012df6:	d102      	bne.n	8012dfe <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012df8:	f000 fe20 	bl	8013a3c <xTimerCreateTimerTask>
 8012dfc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012dfe:	697b      	ldr	r3, [r7, #20]
 8012e00:	2b01      	cmp	r3, #1
 8012e02:	d11b      	bne.n	8012e3c <vTaskStartScheduler+0x98>
	__asm volatile
 8012e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e08:	f383 8811 	msr	BASEPRI, r3
 8012e0c:	f3bf 8f6f 	isb	sy
 8012e10:	f3bf 8f4f 	dsb	sy
 8012e14:	613b      	str	r3, [r7, #16]
}
 8012e16:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012e18:	4b15      	ldr	r3, [pc, #84]	; (8012e70 <vTaskStartScheduler+0xcc>)
 8012e1a:	681b      	ldr	r3, [r3, #0]
 8012e1c:	3354      	adds	r3, #84	; 0x54
 8012e1e:	4a15      	ldr	r2, [pc, #84]	; (8012e74 <vTaskStartScheduler+0xd0>)
 8012e20:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012e22:	4b15      	ldr	r3, [pc, #84]	; (8012e78 <vTaskStartScheduler+0xd4>)
 8012e24:	f04f 32ff 	mov.w	r2, #4294967295
 8012e28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012e2a:	4b14      	ldr	r3, [pc, #80]	; (8012e7c <vTaskStartScheduler+0xd8>)
 8012e2c:	2201      	movs	r2, #1
 8012e2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012e30:	4b13      	ldr	r3, [pc, #76]	; (8012e80 <vTaskStartScheduler+0xdc>)
 8012e32:	2200      	movs	r2, #0
 8012e34:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012e36:	f001 f9db 	bl	80141f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012e3a:	e00e      	b.n	8012e5a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012e3c:	697b      	ldr	r3, [r7, #20]
 8012e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e42:	d10a      	bne.n	8012e5a <vTaskStartScheduler+0xb6>
	__asm volatile
 8012e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e48:	f383 8811 	msr	BASEPRI, r3
 8012e4c:	f3bf 8f6f 	isb	sy
 8012e50:	f3bf 8f4f 	dsb	sy
 8012e54:	60fb      	str	r3, [r7, #12]
}
 8012e56:	bf00      	nop
 8012e58:	e7fe      	b.n	8012e58 <vTaskStartScheduler+0xb4>
}
 8012e5a:	bf00      	nop
 8012e5c:	3718      	adds	r7, #24
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	bd80      	pop	{r7, pc}
 8012e62:	bf00      	nop
 8012e64:	080160b0 	.word	0x080160b0
 8012e68:	080134cd 	.word	0x080134cd
 8012e6c:	200013f8 	.word	0x200013f8
 8012e70:	20000f00 	.word	0x20000f00
 8012e74:	20000088 	.word	0x20000088
 8012e78:	200013f4 	.word	0x200013f4
 8012e7c:	200013e0 	.word	0x200013e0
 8012e80:	200013d8 	.word	0x200013d8

08012e84 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012e84:	b480      	push	{r7}
 8012e86:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012e88:	4b04      	ldr	r3, [pc, #16]	; (8012e9c <vTaskSuspendAll+0x18>)
 8012e8a:	681b      	ldr	r3, [r3, #0]
 8012e8c:	3301      	adds	r3, #1
 8012e8e:	4a03      	ldr	r2, [pc, #12]	; (8012e9c <vTaskSuspendAll+0x18>)
 8012e90:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8012e92:	bf00      	nop
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr
 8012e9c:	200013fc 	.word	0x200013fc

08012ea0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b084      	sub	sp, #16
 8012ea4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012eae:	4b42      	ldr	r3, [pc, #264]	; (8012fb8 <xTaskResumeAll+0x118>)
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	2b00      	cmp	r3, #0
 8012eb4:	d10a      	bne.n	8012ecc <xTaskResumeAll+0x2c>
	__asm volatile
 8012eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eba:	f383 8811 	msr	BASEPRI, r3
 8012ebe:	f3bf 8f6f 	isb	sy
 8012ec2:	f3bf 8f4f 	dsb	sy
 8012ec6:	603b      	str	r3, [r7, #0]
}
 8012ec8:	bf00      	nop
 8012eca:	e7fe      	b.n	8012eca <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012ecc:	f001 fa32 	bl	8014334 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012ed0:	4b39      	ldr	r3, [pc, #228]	; (8012fb8 <xTaskResumeAll+0x118>)
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	3b01      	subs	r3, #1
 8012ed6:	4a38      	ldr	r2, [pc, #224]	; (8012fb8 <xTaskResumeAll+0x118>)
 8012ed8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012eda:	4b37      	ldr	r3, [pc, #220]	; (8012fb8 <xTaskResumeAll+0x118>)
 8012edc:	681b      	ldr	r3, [r3, #0]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	d162      	bne.n	8012fa8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012ee2:	4b36      	ldr	r3, [pc, #216]	; (8012fbc <xTaskResumeAll+0x11c>)
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d05e      	beq.n	8012fa8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012eea:	e02f      	b.n	8012f4c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012eec:	4b34      	ldr	r3, [pc, #208]	; (8012fc0 <xTaskResumeAll+0x120>)
 8012eee:	68db      	ldr	r3, [r3, #12]
 8012ef0:	68db      	ldr	r3, [r3, #12]
 8012ef2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012ef4:	68fb      	ldr	r3, [r7, #12]
 8012ef6:	3318      	adds	r3, #24
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f7fe fcdf 	bl	80118bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	3304      	adds	r3, #4
 8012f02:	4618      	mov	r0, r3
 8012f04:	f7fe fcda 	bl	80118bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f0c:	4b2d      	ldr	r3, [pc, #180]	; (8012fc4 <xTaskResumeAll+0x124>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	429a      	cmp	r2, r3
 8012f12:	d903      	bls.n	8012f1c <xTaskResumeAll+0x7c>
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f18:	4a2a      	ldr	r2, [pc, #168]	; (8012fc4 <xTaskResumeAll+0x124>)
 8012f1a:	6013      	str	r3, [r2, #0]
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f20:	4613      	mov	r3, r2
 8012f22:	009b      	lsls	r3, r3, #2
 8012f24:	4413      	add	r3, r2
 8012f26:	009b      	lsls	r3, r3, #2
 8012f28:	4a27      	ldr	r2, [pc, #156]	; (8012fc8 <xTaskResumeAll+0x128>)
 8012f2a:	441a      	add	r2, r3
 8012f2c:	68fb      	ldr	r3, [r7, #12]
 8012f2e:	3304      	adds	r3, #4
 8012f30:	4619      	mov	r1, r3
 8012f32:	4610      	mov	r0, r2
 8012f34:	f7fe fc65 	bl	8011802 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012f3c:	4b23      	ldr	r3, [pc, #140]	; (8012fcc <xTaskResumeAll+0x12c>)
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012f42:	429a      	cmp	r2, r3
 8012f44:	d302      	bcc.n	8012f4c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012f46:	4b22      	ldr	r3, [pc, #136]	; (8012fd0 <xTaskResumeAll+0x130>)
 8012f48:	2201      	movs	r2, #1
 8012f4a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012f4c:	4b1c      	ldr	r3, [pc, #112]	; (8012fc0 <xTaskResumeAll+0x120>)
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d1cb      	bne.n	8012eec <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	2b00      	cmp	r3, #0
 8012f58:	d001      	beq.n	8012f5e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012f5a:	f000 fb71 	bl	8013640 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012f5e:	4b1d      	ldr	r3, [pc, #116]	; (8012fd4 <xTaskResumeAll+0x134>)
 8012f60:	681b      	ldr	r3, [r3, #0]
 8012f62:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d010      	beq.n	8012f8c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012f6a:	f000 f859 	bl	8013020 <xTaskIncrementTick>
 8012f6e:	4603      	mov	r3, r0
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d002      	beq.n	8012f7a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012f74:	4b16      	ldr	r3, [pc, #88]	; (8012fd0 <xTaskResumeAll+0x130>)
 8012f76:	2201      	movs	r2, #1
 8012f78:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	3b01      	subs	r3, #1
 8012f7e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8012f80:	687b      	ldr	r3, [r7, #4]
 8012f82:	2b00      	cmp	r3, #0
 8012f84:	d1f1      	bne.n	8012f6a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8012f86:	4b13      	ldr	r3, [pc, #76]	; (8012fd4 <xTaskResumeAll+0x134>)
 8012f88:	2200      	movs	r2, #0
 8012f8a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012f8c:	4b10      	ldr	r3, [pc, #64]	; (8012fd0 <xTaskResumeAll+0x130>)
 8012f8e:	681b      	ldr	r3, [r3, #0]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d009      	beq.n	8012fa8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012f94:	2301      	movs	r3, #1
 8012f96:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012f98:	4b0f      	ldr	r3, [pc, #60]	; (8012fd8 <xTaskResumeAll+0x138>)
 8012f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f9e:	601a      	str	r2, [r3, #0]
 8012fa0:	f3bf 8f4f 	dsb	sy
 8012fa4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012fa8:	f001 f9f4 	bl	8014394 <vPortExitCritical>

	return xAlreadyYielded;
 8012fac:	68bb      	ldr	r3, [r7, #8]
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3710      	adds	r7, #16
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}
 8012fb6:	bf00      	nop
 8012fb8:	200013fc 	.word	0x200013fc
 8012fbc:	200013d4 	.word	0x200013d4
 8012fc0:	20001394 	.word	0x20001394
 8012fc4:	200013dc 	.word	0x200013dc
 8012fc8:	20000f04 	.word	0x20000f04
 8012fcc:	20000f00 	.word	0x20000f00
 8012fd0:	200013e8 	.word	0x200013e8
 8012fd4:	200013e4 	.word	0x200013e4
 8012fd8:	e000ed04 	.word	0xe000ed04

08012fdc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012fdc:	b480      	push	{r7}
 8012fde:	b083      	sub	sp, #12
 8012fe0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012fe2:	4b05      	ldr	r3, [pc, #20]	; (8012ff8 <xTaskGetTickCount+0x1c>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012fe8:	687b      	ldr	r3, [r7, #4]
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	370c      	adds	r7, #12
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff4:	4770      	bx	lr
 8012ff6:	bf00      	nop
 8012ff8:	200013d8 	.word	0x200013d8

08012ffc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012ffc:	b580      	push	{r7, lr}
 8012ffe:	b082      	sub	sp, #8
 8013000:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013002:	f001 fa79 	bl	80144f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013006:	2300      	movs	r3, #0
 8013008:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801300a:	4b04      	ldr	r3, [pc, #16]	; (801301c <xTaskGetTickCountFromISR+0x20>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013010:	683b      	ldr	r3, [r7, #0]
}
 8013012:	4618      	mov	r0, r3
 8013014:	3708      	adds	r7, #8
 8013016:	46bd      	mov	sp, r7
 8013018:	bd80      	pop	{r7, pc}
 801301a:	bf00      	nop
 801301c:	200013d8 	.word	0x200013d8

08013020 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b086      	sub	sp, #24
 8013024:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013026:	2300      	movs	r3, #0
 8013028:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801302a:	4b4f      	ldr	r3, [pc, #316]	; (8013168 <xTaskIncrementTick+0x148>)
 801302c:	681b      	ldr	r3, [r3, #0]
 801302e:	2b00      	cmp	r3, #0
 8013030:	f040 8089 	bne.w	8013146 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013034:	4b4d      	ldr	r3, [pc, #308]	; (801316c <xTaskIncrementTick+0x14c>)
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	3301      	adds	r3, #1
 801303a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801303c:	4a4b      	ldr	r2, [pc, #300]	; (801316c <xTaskIncrementTick+0x14c>)
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013042:	693b      	ldr	r3, [r7, #16]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d120      	bne.n	801308a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013048:	4b49      	ldr	r3, [pc, #292]	; (8013170 <xTaskIncrementTick+0x150>)
 801304a:	681b      	ldr	r3, [r3, #0]
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d00a      	beq.n	8013068 <xTaskIncrementTick+0x48>
	__asm volatile
 8013052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013056:	f383 8811 	msr	BASEPRI, r3
 801305a:	f3bf 8f6f 	isb	sy
 801305e:	f3bf 8f4f 	dsb	sy
 8013062:	603b      	str	r3, [r7, #0]
}
 8013064:	bf00      	nop
 8013066:	e7fe      	b.n	8013066 <xTaskIncrementTick+0x46>
 8013068:	4b41      	ldr	r3, [pc, #260]	; (8013170 <xTaskIncrementTick+0x150>)
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	60fb      	str	r3, [r7, #12]
 801306e:	4b41      	ldr	r3, [pc, #260]	; (8013174 <xTaskIncrementTick+0x154>)
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	4a3f      	ldr	r2, [pc, #252]	; (8013170 <xTaskIncrementTick+0x150>)
 8013074:	6013      	str	r3, [r2, #0]
 8013076:	4a3f      	ldr	r2, [pc, #252]	; (8013174 <xTaskIncrementTick+0x154>)
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	6013      	str	r3, [r2, #0]
 801307c:	4b3e      	ldr	r3, [pc, #248]	; (8013178 <xTaskIncrementTick+0x158>)
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	3301      	adds	r3, #1
 8013082:	4a3d      	ldr	r2, [pc, #244]	; (8013178 <xTaskIncrementTick+0x158>)
 8013084:	6013      	str	r3, [r2, #0]
 8013086:	f000 fadb 	bl	8013640 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801308a:	4b3c      	ldr	r3, [pc, #240]	; (801317c <xTaskIncrementTick+0x15c>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	693a      	ldr	r2, [r7, #16]
 8013090:	429a      	cmp	r2, r3
 8013092:	d349      	bcc.n	8013128 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013094:	4b36      	ldr	r3, [pc, #216]	; (8013170 <xTaskIncrementTick+0x150>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	681b      	ldr	r3, [r3, #0]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d104      	bne.n	80130a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801309e:	4b37      	ldr	r3, [pc, #220]	; (801317c <xTaskIncrementTick+0x15c>)
 80130a0:	f04f 32ff 	mov.w	r2, #4294967295
 80130a4:	601a      	str	r2, [r3, #0]
					break;
 80130a6:	e03f      	b.n	8013128 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80130a8:	4b31      	ldr	r3, [pc, #196]	; (8013170 <xTaskIncrementTick+0x150>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	68db      	ldr	r3, [r3, #12]
 80130ae:	68db      	ldr	r3, [r3, #12]
 80130b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80130b2:	68bb      	ldr	r3, [r7, #8]
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80130b8:	693a      	ldr	r2, [r7, #16]
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	429a      	cmp	r2, r3
 80130be:	d203      	bcs.n	80130c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80130c0:	4a2e      	ldr	r2, [pc, #184]	; (801317c <xTaskIncrementTick+0x15c>)
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80130c6:	e02f      	b.n	8013128 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80130c8:	68bb      	ldr	r3, [r7, #8]
 80130ca:	3304      	adds	r3, #4
 80130cc:	4618      	mov	r0, r3
 80130ce:	f7fe fbf5 	bl	80118bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d004      	beq.n	80130e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	3318      	adds	r3, #24
 80130de:	4618      	mov	r0, r3
 80130e0:	f7fe fbec 	bl	80118bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80130e4:	68bb      	ldr	r3, [r7, #8]
 80130e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130e8:	4b25      	ldr	r3, [pc, #148]	; (8013180 <xTaskIncrementTick+0x160>)
 80130ea:	681b      	ldr	r3, [r3, #0]
 80130ec:	429a      	cmp	r2, r3
 80130ee:	d903      	bls.n	80130f8 <xTaskIncrementTick+0xd8>
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130f4:	4a22      	ldr	r2, [pc, #136]	; (8013180 <xTaskIncrementTick+0x160>)
 80130f6:	6013      	str	r3, [r2, #0]
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130fc:	4613      	mov	r3, r2
 80130fe:	009b      	lsls	r3, r3, #2
 8013100:	4413      	add	r3, r2
 8013102:	009b      	lsls	r3, r3, #2
 8013104:	4a1f      	ldr	r2, [pc, #124]	; (8013184 <xTaskIncrementTick+0x164>)
 8013106:	441a      	add	r2, r3
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	3304      	adds	r3, #4
 801310c:	4619      	mov	r1, r3
 801310e:	4610      	mov	r0, r2
 8013110:	f7fe fb77 	bl	8011802 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013114:	68bb      	ldr	r3, [r7, #8]
 8013116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013118:	4b1b      	ldr	r3, [pc, #108]	; (8013188 <xTaskIncrementTick+0x168>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801311e:	429a      	cmp	r2, r3
 8013120:	d3b8      	bcc.n	8013094 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013122:	2301      	movs	r3, #1
 8013124:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013126:	e7b5      	b.n	8013094 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013128:	4b17      	ldr	r3, [pc, #92]	; (8013188 <xTaskIncrementTick+0x168>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801312e:	4915      	ldr	r1, [pc, #84]	; (8013184 <xTaskIncrementTick+0x164>)
 8013130:	4613      	mov	r3, r2
 8013132:	009b      	lsls	r3, r3, #2
 8013134:	4413      	add	r3, r2
 8013136:	009b      	lsls	r3, r3, #2
 8013138:	440b      	add	r3, r1
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2b01      	cmp	r3, #1
 801313e:	d907      	bls.n	8013150 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8013140:	2301      	movs	r3, #1
 8013142:	617b      	str	r3, [r7, #20]
 8013144:	e004      	b.n	8013150 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013146:	4b11      	ldr	r3, [pc, #68]	; (801318c <xTaskIncrementTick+0x16c>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	3301      	adds	r3, #1
 801314c:	4a0f      	ldr	r2, [pc, #60]	; (801318c <xTaskIncrementTick+0x16c>)
 801314e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013150:	4b0f      	ldr	r3, [pc, #60]	; (8013190 <xTaskIncrementTick+0x170>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d001      	beq.n	801315c <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 8013158:	2301      	movs	r3, #1
 801315a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801315c:	697b      	ldr	r3, [r7, #20]
}
 801315e:	4618      	mov	r0, r3
 8013160:	3718      	adds	r7, #24
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
 8013166:	bf00      	nop
 8013168:	200013fc 	.word	0x200013fc
 801316c:	200013d8 	.word	0x200013d8
 8013170:	2000138c 	.word	0x2000138c
 8013174:	20001390 	.word	0x20001390
 8013178:	200013ec 	.word	0x200013ec
 801317c:	200013f4 	.word	0x200013f4
 8013180:	200013dc 	.word	0x200013dc
 8013184:	20000f04 	.word	0x20000f04
 8013188:	20000f00 	.word	0x20000f00
 801318c:	200013e4 	.word	0x200013e4
 8013190:	200013e8 	.word	0x200013e8

08013194 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013194:	b480      	push	{r7}
 8013196:	b085      	sub	sp, #20
 8013198:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801319a:	4b2a      	ldr	r3, [pc, #168]	; (8013244 <vTaskSwitchContext+0xb0>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d003      	beq.n	80131aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80131a2:	4b29      	ldr	r3, [pc, #164]	; (8013248 <vTaskSwitchContext+0xb4>)
 80131a4:	2201      	movs	r2, #1
 80131a6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80131a8:	e046      	b.n	8013238 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80131aa:	4b27      	ldr	r3, [pc, #156]	; (8013248 <vTaskSwitchContext+0xb4>)
 80131ac:	2200      	movs	r2, #0
 80131ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80131b0:	4b26      	ldr	r3, [pc, #152]	; (801324c <vTaskSwitchContext+0xb8>)
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	60fb      	str	r3, [r7, #12]
 80131b6:	e010      	b.n	80131da <vTaskSwitchContext+0x46>
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d10a      	bne.n	80131d4 <vTaskSwitchContext+0x40>
	__asm volatile
 80131be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131c2:	f383 8811 	msr	BASEPRI, r3
 80131c6:	f3bf 8f6f 	isb	sy
 80131ca:	f3bf 8f4f 	dsb	sy
 80131ce:	607b      	str	r3, [r7, #4]
}
 80131d0:	bf00      	nop
 80131d2:	e7fe      	b.n	80131d2 <vTaskSwitchContext+0x3e>
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	3b01      	subs	r3, #1
 80131d8:	60fb      	str	r3, [r7, #12]
 80131da:	491d      	ldr	r1, [pc, #116]	; (8013250 <vTaskSwitchContext+0xbc>)
 80131dc:	68fa      	ldr	r2, [r7, #12]
 80131de:	4613      	mov	r3, r2
 80131e0:	009b      	lsls	r3, r3, #2
 80131e2:	4413      	add	r3, r2
 80131e4:	009b      	lsls	r3, r3, #2
 80131e6:	440b      	add	r3, r1
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d0e4      	beq.n	80131b8 <vTaskSwitchContext+0x24>
 80131ee:	68fa      	ldr	r2, [r7, #12]
 80131f0:	4613      	mov	r3, r2
 80131f2:	009b      	lsls	r3, r3, #2
 80131f4:	4413      	add	r3, r2
 80131f6:	009b      	lsls	r3, r3, #2
 80131f8:	4a15      	ldr	r2, [pc, #84]	; (8013250 <vTaskSwitchContext+0xbc>)
 80131fa:	4413      	add	r3, r2
 80131fc:	60bb      	str	r3, [r7, #8]
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	685b      	ldr	r3, [r3, #4]
 8013202:	685a      	ldr	r2, [r3, #4]
 8013204:	68bb      	ldr	r3, [r7, #8]
 8013206:	605a      	str	r2, [r3, #4]
 8013208:	68bb      	ldr	r3, [r7, #8]
 801320a:	685a      	ldr	r2, [r3, #4]
 801320c:	68bb      	ldr	r3, [r7, #8]
 801320e:	3308      	adds	r3, #8
 8013210:	429a      	cmp	r2, r3
 8013212:	d104      	bne.n	801321e <vTaskSwitchContext+0x8a>
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	685a      	ldr	r2, [r3, #4]
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	605a      	str	r2, [r3, #4]
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	685b      	ldr	r3, [r3, #4]
 8013222:	68db      	ldr	r3, [r3, #12]
 8013224:	4a0b      	ldr	r2, [pc, #44]	; (8013254 <vTaskSwitchContext+0xc0>)
 8013226:	6013      	str	r3, [r2, #0]
 8013228:	4a08      	ldr	r2, [pc, #32]	; (801324c <vTaskSwitchContext+0xb8>)
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801322e:	4b09      	ldr	r3, [pc, #36]	; (8013254 <vTaskSwitchContext+0xc0>)
 8013230:	681b      	ldr	r3, [r3, #0]
 8013232:	3354      	adds	r3, #84	; 0x54
 8013234:	4a08      	ldr	r2, [pc, #32]	; (8013258 <vTaskSwitchContext+0xc4>)
 8013236:	6013      	str	r3, [r2, #0]
}
 8013238:	bf00      	nop
 801323a:	3714      	adds	r7, #20
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr
 8013244:	200013fc 	.word	0x200013fc
 8013248:	200013e8 	.word	0x200013e8
 801324c:	200013dc 	.word	0x200013dc
 8013250:	20000f04 	.word	0x20000f04
 8013254:	20000f00 	.word	0x20000f00
 8013258:	20000088 	.word	0x20000088

0801325c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801325c:	b580      	push	{r7, lr}
 801325e:	b084      	sub	sp, #16
 8013260:	af00      	add	r7, sp, #0
 8013262:	6078      	str	r0, [r7, #4]
 8013264:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d10a      	bne.n	8013282 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013270:	f383 8811 	msr	BASEPRI, r3
 8013274:	f3bf 8f6f 	isb	sy
 8013278:	f3bf 8f4f 	dsb	sy
 801327c:	60fb      	str	r3, [r7, #12]
}
 801327e:	bf00      	nop
 8013280:	e7fe      	b.n	8013280 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013282:	4b07      	ldr	r3, [pc, #28]	; (80132a0 <vTaskPlaceOnEventList+0x44>)
 8013284:	681b      	ldr	r3, [r3, #0]
 8013286:	3318      	adds	r3, #24
 8013288:	4619      	mov	r1, r3
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	f7fe fadd 	bl	801184a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013290:	2101      	movs	r1, #1
 8013292:	6838      	ldr	r0, [r7, #0]
 8013294:	f000 fb7e 	bl	8013994 <prvAddCurrentTaskToDelayedList>
}
 8013298:	bf00      	nop
 801329a:	3710      	adds	r7, #16
 801329c:	46bd      	mov	sp, r7
 801329e:	bd80      	pop	{r7, pc}
 80132a0:	20000f00 	.word	0x20000f00

080132a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b086      	sub	sp, #24
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	60b9      	str	r1, [r7, #8]
 80132ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d10a      	bne.n	80132cc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80132b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132ba:	f383 8811 	msr	BASEPRI, r3
 80132be:	f3bf 8f6f 	isb	sy
 80132c2:	f3bf 8f4f 	dsb	sy
 80132c6:	617b      	str	r3, [r7, #20]
}
 80132c8:	bf00      	nop
 80132ca:	e7fe      	b.n	80132ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80132cc:	4b0a      	ldr	r3, [pc, #40]	; (80132f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	3318      	adds	r3, #24
 80132d2:	4619      	mov	r1, r3
 80132d4:	68f8      	ldr	r0, [r7, #12]
 80132d6:	f7fe fa94 	bl	8011802 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d002      	beq.n	80132e6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80132e0:	f04f 33ff 	mov.w	r3, #4294967295
 80132e4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80132e6:	6879      	ldr	r1, [r7, #4]
 80132e8:	68b8      	ldr	r0, [r7, #8]
 80132ea:	f000 fb53 	bl	8013994 <prvAddCurrentTaskToDelayedList>
	}
 80132ee:	bf00      	nop
 80132f0:	3718      	adds	r7, #24
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bd80      	pop	{r7, pc}
 80132f6:	bf00      	nop
 80132f8:	20000f00 	.word	0x20000f00

080132fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b086      	sub	sp, #24
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	68db      	ldr	r3, [r3, #12]
 8013308:	68db      	ldr	r3, [r3, #12]
 801330a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801330c:	693b      	ldr	r3, [r7, #16]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d10a      	bne.n	8013328 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013316:	f383 8811 	msr	BASEPRI, r3
 801331a:	f3bf 8f6f 	isb	sy
 801331e:	f3bf 8f4f 	dsb	sy
 8013322:	60fb      	str	r3, [r7, #12]
}
 8013324:	bf00      	nop
 8013326:	e7fe      	b.n	8013326 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	3318      	adds	r3, #24
 801332c:	4618      	mov	r0, r3
 801332e:	f7fe fac5 	bl	80118bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013332:	4b1e      	ldr	r3, [pc, #120]	; (80133ac <xTaskRemoveFromEventList+0xb0>)
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d11d      	bne.n	8013376 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	3304      	adds	r3, #4
 801333e:	4618      	mov	r0, r3
 8013340:	f7fe fabc 	bl	80118bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013344:	693b      	ldr	r3, [r7, #16]
 8013346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013348:	4b19      	ldr	r3, [pc, #100]	; (80133b0 <xTaskRemoveFromEventList+0xb4>)
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	429a      	cmp	r2, r3
 801334e:	d903      	bls.n	8013358 <xTaskRemoveFromEventList+0x5c>
 8013350:	693b      	ldr	r3, [r7, #16]
 8013352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013354:	4a16      	ldr	r2, [pc, #88]	; (80133b0 <xTaskRemoveFromEventList+0xb4>)
 8013356:	6013      	str	r3, [r2, #0]
 8013358:	693b      	ldr	r3, [r7, #16]
 801335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801335c:	4613      	mov	r3, r2
 801335e:	009b      	lsls	r3, r3, #2
 8013360:	4413      	add	r3, r2
 8013362:	009b      	lsls	r3, r3, #2
 8013364:	4a13      	ldr	r2, [pc, #76]	; (80133b4 <xTaskRemoveFromEventList+0xb8>)
 8013366:	441a      	add	r2, r3
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	3304      	adds	r3, #4
 801336c:	4619      	mov	r1, r3
 801336e:	4610      	mov	r0, r2
 8013370:	f7fe fa47 	bl	8011802 <vListInsertEnd>
 8013374:	e005      	b.n	8013382 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	3318      	adds	r3, #24
 801337a:	4619      	mov	r1, r3
 801337c:	480e      	ldr	r0, [pc, #56]	; (80133b8 <xTaskRemoveFromEventList+0xbc>)
 801337e:	f7fe fa40 	bl	8011802 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013382:	693b      	ldr	r3, [r7, #16]
 8013384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013386:	4b0d      	ldr	r3, [pc, #52]	; (80133bc <xTaskRemoveFromEventList+0xc0>)
 8013388:	681b      	ldr	r3, [r3, #0]
 801338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801338c:	429a      	cmp	r2, r3
 801338e:	d905      	bls.n	801339c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013390:	2301      	movs	r3, #1
 8013392:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013394:	4b0a      	ldr	r3, [pc, #40]	; (80133c0 <xTaskRemoveFromEventList+0xc4>)
 8013396:	2201      	movs	r2, #1
 8013398:	601a      	str	r2, [r3, #0]
 801339a:	e001      	b.n	80133a0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801339c:	2300      	movs	r3, #0
 801339e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80133a0:	697b      	ldr	r3, [r7, #20]
}
 80133a2:	4618      	mov	r0, r3
 80133a4:	3718      	adds	r7, #24
 80133a6:	46bd      	mov	sp, r7
 80133a8:	bd80      	pop	{r7, pc}
 80133aa:	bf00      	nop
 80133ac:	200013fc 	.word	0x200013fc
 80133b0:	200013dc 	.word	0x200013dc
 80133b4:	20000f04 	.word	0x20000f04
 80133b8:	20001394 	.word	0x20001394
 80133bc:	20000f00 	.word	0x20000f00
 80133c0:	200013e8 	.word	0x200013e8

080133c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80133c4:	b480      	push	{r7}
 80133c6:	b083      	sub	sp, #12
 80133c8:	af00      	add	r7, sp, #0
 80133ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80133cc:	4b06      	ldr	r3, [pc, #24]	; (80133e8 <vTaskInternalSetTimeOutState+0x24>)
 80133ce:	681a      	ldr	r2, [r3, #0]
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80133d4:	4b05      	ldr	r3, [pc, #20]	; (80133ec <vTaskInternalSetTimeOutState+0x28>)
 80133d6:	681a      	ldr	r2, [r3, #0]
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	605a      	str	r2, [r3, #4]
}
 80133dc:	bf00      	nop
 80133de:	370c      	adds	r7, #12
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr
 80133e8:	200013ec 	.word	0x200013ec
 80133ec:	200013d8 	.word	0x200013d8

080133f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b088      	sub	sp, #32
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
 80133f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d10a      	bne.n	8013416 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013404:	f383 8811 	msr	BASEPRI, r3
 8013408:	f3bf 8f6f 	isb	sy
 801340c:	f3bf 8f4f 	dsb	sy
 8013410:	613b      	str	r3, [r7, #16]
}
 8013412:	bf00      	nop
 8013414:	e7fe      	b.n	8013414 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d10a      	bne.n	8013432 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801341c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013420:	f383 8811 	msr	BASEPRI, r3
 8013424:	f3bf 8f6f 	isb	sy
 8013428:	f3bf 8f4f 	dsb	sy
 801342c:	60fb      	str	r3, [r7, #12]
}
 801342e:	bf00      	nop
 8013430:	e7fe      	b.n	8013430 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8013432:	f000 ff7f 	bl	8014334 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013436:	4b1d      	ldr	r3, [pc, #116]	; (80134ac <xTaskCheckForTimeOut+0xbc>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	685b      	ldr	r3, [r3, #4]
 8013440:	69ba      	ldr	r2, [r7, #24]
 8013442:	1ad3      	subs	r3, r2, r3
 8013444:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013446:	683b      	ldr	r3, [r7, #0]
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801344e:	d102      	bne.n	8013456 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013450:	2300      	movs	r3, #0
 8013452:	61fb      	str	r3, [r7, #28]
 8013454:	e023      	b.n	801349e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	681a      	ldr	r2, [r3, #0]
 801345a:	4b15      	ldr	r3, [pc, #84]	; (80134b0 <xTaskCheckForTimeOut+0xc0>)
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	429a      	cmp	r2, r3
 8013460:	d007      	beq.n	8013472 <xTaskCheckForTimeOut+0x82>
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	685b      	ldr	r3, [r3, #4]
 8013466:	69ba      	ldr	r2, [r7, #24]
 8013468:	429a      	cmp	r2, r3
 801346a:	d302      	bcc.n	8013472 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801346c:	2301      	movs	r3, #1
 801346e:	61fb      	str	r3, [r7, #28]
 8013470:	e015      	b.n	801349e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013472:	683b      	ldr	r3, [r7, #0]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	697a      	ldr	r2, [r7, #20]
 8013478:	429a      	cmp	r2, r3
 801347a:	d20b      	bcs.n	8013494 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801347c:	683b      	ldr	r3, [r7, #0]
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	1ad2      	subs	r2, r2, r3
 8013484:	683b      	ldr	r3, [r7, #0]
 8013486:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013488:	6878      	ldr	r0, [r7, #4]
 801348a:	f7ff ff9b 	bl	80133c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801348e:	2300      	movs	r3, #0
 8013490:	61fb      	str	r3, [r7, #28]
 8013492:	e004      	b.n	801349e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8013494:	683b      	ldr	r3, [r7, #0]
 8013496:	2200      	movs	r2, #0
 8013498:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801349a:	2301      	movs	r3, #1
 801349c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801349e:	f000 ff79 	bl	8014394 <vPortExitCritical>

	return xReturn;
 80134a2:	69fb      	ldr	r3, [r7, #28]
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3720      	adds	r7, #32
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}
 80134ac:	200013d8 	.word	0x200013d8
 80134b0:	200013ec 	.word	0x200013ec

080134b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80134b4:	b480      	push	{r7}
 80134b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80134b8:	4b03      	ldr	r3, [pc, #12]	; (80134c8 <vTaskMissedYield+0x14>)
 80134ba:	2201      	movs	r2, #1
 80134bc:	601a      	str	r2, [r3, #0]
}
 80134be:	bf00      	nop
 80134c0:	46bd      	mov	sp, r7
 80134c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c6:	4770      	bx	lr
 80134c8:	200013e8 	.word	0x200013e8

080134cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b082      	sub	sp, #8
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80134d4:	f000 f852 	bl	801357c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80134d8:	4b06      	ldr	r3, [pc, #24]	; (80134f4 <prvIdleTask+0x28>)
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	2b01      	cmp	r3, #1
 80134de:	d9f9      	bls.n	80134d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80134e0:	4b05      	ldr	r3, [pc, #20]	; (80134f8 <prvIdleTask+0x2c>)
 80134e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134e6:	601a      	str	r2, [r3, #0]
 80134e8:	f3bf 8f4f 	dsb	sy
 80134ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80134f0:	e7f0      	b.n	80134d4 <prvIdleTask+0x8>
 80134f2:	bf00      	nop
 80134f4:	20000f04 	.word	0x20000f04
 80134f8:	e000ed04 	.word	0xe000ed04

080134fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80134fc:	b580      	push	{r7, lr}
 80134fe:	b082      	sub	sp, #8
 8013500:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013502:	2300      	movs	r3, #0
 8013504:	607b      	str	r3, [r7, #4]
 8013506:	e00c      	b.n	8013522 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013508:	687a      	ldr	r2, [r7, #4]
 801350a:	4613      	mov	r3, r2
 801350c:	009b      	lsls	r3, r3, #2
 801350e:	4413      	add	r3, r2
 8013510:	009b      	lsls	r3, r3, #2
 8013512:	4a12      	ldr	r2, [pc, #72]	; (801355c <prvInitialiseTaskLists+0x60>)
 8013514:	4413      	add	r3, r2
 8013516:	4618      	mov	r0, r3
 8013518:	f7fe f946 	bl	80117a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	3301      	adds	r3, #1
 8013520:	607b      	str	r3, [r7, #4]
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	2b37      	cmp	r3, #55	; 0x37
 8013526:	d9ef      	bls.n	8013508 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013528:	480d      	ldr	r0, [pc, #52]	; (8013560 <prvInitialiseTaskLists+0x64>)
 801352a:	f7fe f93d 	bl	80117a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801352e:	480d      	ldr	r0, [pc, #52]	; (8013564 <prvInitialiseTaskLists+0x68>)
 8013530:	f7fe f93a 	bl	80117a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013534:	480c      	ldr	r0, [pc, #48]	; (8013568 <prvInitialiseTaskLists+0x6c>)
 8013536:	f7fe f937 	bl	80117a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801353a:	480c      	ldr	r0, [pc, #48]	; (801356c <prvInitialiseTaskLists+0x70>)
 801353c:	f7fe f934 	bl	80117a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013540:	480b      	ldr	r0, [pc, #44]	; (8013570 <prvInitialiseTaskLists+0x74>)
 8013542:	f7fe f931 	bl	80117a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013546:	4b0b      	ldr	r3, [pc, #44]	; (8013574 <prvInitialiseTaskLists+0x78>)
 8013548:	4a05      	ldr	r2, [pc, #20]	; (8013560 <prvInitialiseTaskLists+0x64>)
 801354a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801354c:	4b0a      	ldr	r3, [pc, #40]	; (8013578 <prvInitialiseTaskLists+0x7c>)
 801354e:	4a05      	ldr	r2, [pc, #20]	; (8013564 <prvInitialiseTaskLists+0x68>)
 8013550:	601a      	str	r2, [r3, #0]
}
 8013552:	bf00      	nop
 8013554:	3708      	adds	r7, #8
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
 801355a:	bf00      	nop
 801355c:	20000f04 	.word	0x20000f04
 8013560:	20001364 	.word	0x20001364
 8013564:	20001378 	.word	0x20001378
 8013568:	20001394 	.word	0x20001394
 801356c:	200013a8 	.word	0x200013a8
 8013570:	200013c0 	.word	0x200013c0
 8013574:	2000138c 	.word	0x2000138c
 8013578:	20001390 	.word	0x20001390

0801357c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801357c:	b580      	push	{r7, lr}
 801357e:	b082      	sub	sp, #8
 8013580:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013582:	e019      	b.n	80135b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013584:	f000 fed6 	bl	8014334 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013588:	4b10      	ldr	r3, [pc, #64]	; (80135cc <prvCheckTasksWaitingTermination+0x50>)
 801358a:	68db      	ldr	r3, [r3, #12]
 801358c:	68db      	ldr	r3, [r3, #12]
 801358e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	3304      	adds	r3, #4
 8013594:	4618      	mov	r0, r3
 8013596:	f7fe f991 	bl	80118bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801359a:	4b0d      	ldr	r3, [pc, #52]	; (80135d0 <prvCheckTasksWaitingTermination+0x54>)
 801359c:	681b      	ldr	r3, [r3, #0]
 801359e:	3b01      	subs	r3, #1
 80135a0:	4a0b      	ldr	r2, [pc, #44]	; (80135d0 <prvCheckTasksWaitingTermination+0x54>)
 80135a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80135a4:	4b0b      	ldr	r3, [pc, #44]	; (80135d4 <prvCheckTasksWaitingTermination+0x58>)
 80135a6:	681b      	ldr	r3, [r3, #0]
 80135a8:	3b01      	subs	r3, #1
 80135aa:	4a0a      	ldr	r2, [pc, #40]	; (80135d4 <prvCheckTasksWaitingTermination+0x58>)
 80135ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80135ae:	f000 fef1 	bl	8014394 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f000 f810 	bl	80135d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80135b8:	4b06      	ldr	r3, [pc, #24]	; (80135d4 <prvCheckTasksWaitingTermination+0x58>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d1e1      	bne.n	8013584 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80135c0:	bf00      	nop
 80135c2:	bf00      	nop
 80135c4:	3708      	adds	r7, #8
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	200013a8 	.word	0x200013a8
 80135d0:	200013d4 	.word	0x200013d4
 80135d4:	200013bc 	.word	0x200013bc

080135d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80135d8:	b580      	push	{r7, lr}
 80135da:	b084      	sub	sp, #16
 80135dc:	af00      	add	r7, sp, #0
 80135de:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80135e0:	687b      	ldr	r3, [r7, #4]
 80135e2:	3354      	adds	r3, #84	; 0x54
 80135e4:	4618      	mov	r0, r3
 80135e6:	f001 fef5 	bl	80153d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80135ea:	687b      	ldr	r3, [r7, #4]
 80135ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d108      	bne.n	8013606 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135f8:	4618      	mov	r0, r3
 80135fa:	f001 f881 	bl	8014700 <vPortFree>
				vPortFree( pxTCB );
 80135fe:	6878      	ldr	r0, [r7, #4]
 8013600:	f001 f87e 	bl	8014700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013604:	e018      	b.n	8013638 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801360c:	2b01      	cmp	r3, #1
 801360e:	d103      	bne.n	8013618 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013610:	6878      	ldr	r0, [r7, #4]
 8013612:	f001 f875 	bl	8014700 <vPortFree>
	}
 8013616:	e00f      	b.n	8013638 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013618:	687b      	ldr	r3, [r7, #4]
 801361a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 801361e:	2b02      	cmp	r3, #2
 8013620:	d00a      	beq.n	8013638 <prvDeleteTCB+0x60>
	__asm volatile
 8013622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013626:	f383 8811 	msr	BASEPRI, r3
 801362a:	f3bf 8f6f 	isb	sy
 801362e:	f3bf 8f4f 	dsb	sy
 8013632:	60fb      	str	r3, [r7, #12]
}
 8013634:	bf00      	nop
 8013636:	e7fe      	b.n	8013636 <prvDeleteTCB+0x5e>
	}
 8013638:	bf00      	nop
 801363a:	3710      	adds	r7, #16
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013640:	b480      	push	{r7}
 8013642:	b083      	sub	sp, #12
 8013644:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013646:	4b0c      	ldr	r3, [pc, #48]	; (8013678 <prvResetNextTaskUnblockTime+0x38>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	2b00      	cmp	r3, #0
 801364e:	d104      	bne.n	801365a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013650:	4b0a      	ldr	r3, [pc, #40]	; (801367c <prvResetNextTaskUnblockTime+0x3c>)
 8013652:	f04f 32ff 	mov.w	r2, #4294967295
 8013656:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013658:	e008      	b.n	801366c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801365a:	4b07      	ldr	r3, [pc, #28]	; (8013678 <prvResetNextTaskUnblockTime+0x38>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	68db      	ldr	r3, [r3, #12]
 8013660:	68db      	ldr	r3, [r3, #12]
 8013662:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	685b      	ldr	r3, [r3, #4]
 8013668:	4a04      	ldr	r2, [pc, #16]	; (801367c <prvResetNextTaskUnblockTime+0x3c>)
 801366a:	6013      	str	r3, [r2, #0]
}
 801366c:	bf00      	nop
 801366e:	370c      	adds	r7, #12
 8013670:	46bd      	mov	sp, r7
 8013672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013676:	4770      	bx	lr
 8013678:	2000138c 	.word	0x2000138c
 801367c:	200013f4 	.word	0x200013f4

08013680 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013680:	b480      	push	{r7}
 8013682:	b083      	sub	sp, #12
 8013684:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013686:	4b0b      	ldr	r3, [pc, #44]	; (80136b4 <xTaskGetSchedulerState+0x34>)
 8013688:	681b      	ldr	r3, [r3, #0]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d102      	bne.n	8013694 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801368e:	2301      	movs	r3, #1
 8013690:	607b      	str	r3, [r7, #4]
 8013692:	e008      	b.n	80136a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013694:	4b08      	ldr	r3, [pc, #32]	; (80136b8 <xTaskGetSchedulerState+0x38>)
 8013696:	681b      	ldr	r3, [r3, #0]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d102      	bne.n	80136a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801369c:	2302      	movs	r3, #2
 801369e:	607b      	str	r3, [r7, #4]
 80136a0:	e001      	b.n	80136a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80136a2:	2300      	movs	r3, #0
 80136a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80136a6:	687b      	ldr	r3, [r7, #4]
	}
 80136a8:	4618      	mov	r0, r3
 80136aa:	370c      	adds	r7, #12
 80136ac:	46bd      	mov	sp, r7
 80136ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b2:	4770      	bx	lr
 80136b4:	200013e0 	.word	0x200013e0
 80136b8:	200013fc 	.word	0x200013fc

080136bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b084      	sub	sp, #16
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80136c8:	2300      	movs	r3, #0
 80136ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d051      	beq.n	8013776 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136d6:	4b2a      	ldr	r3, [pc, #168]	; (8013780 <xTaskPriorityInherit+0xc4>)
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136dc:	429a      	cmp	r2, r3
 80136de:	d241      	bcs.n	8013764 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80136e0:	68bb      	ldr	r3, [r7, #8]
 80136e2:	699b      	ldr	r3, [r3, #24]
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	db06      	blt.n	80136f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136e8:	4b25      	ldr	r3, [pc, #148]	; (8013780 <xTaskPriorityInherit+0xc4>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80136ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80136f2:	68bb      	ldr	r3, [r7, #8]
 80136f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	6959      	ldr	r1, [r3, #20]
 80136fa:	68bb      	ldr	r3, [r7, #8]
 80136fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136fe:	4613      	mov	r3, r2
 8013700:	009b      	lsls	r3, r3, #2
 8013702:	4413      	add	r3, r2
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	4a1f      	ldr	r2, [pc, #124]	; (8013784 <xTaskPriorityInherit+0xc8>)
 8013708:	4413      	add	r3, r2
 801370a:	4299      	cmp	r1, r3
 801370c:	d122      	bne.n	8013754 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801370e:	68bb      	ldr	r3, [r7, #8]
 8013710:	3304      	adds	r3, #4
 8013712:	4618      	mov	r0, r3
 8013714:	f7fe f8d2 	bl	80118bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013718:	4b19      	ldr	r3, [pc, #100]	; (8013780 <xTaskPriorityInherit+0xc4>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801371e:	68bb      	ldr	r3, [r7, #8]
 8013720:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013726:	4b18      	ldr	r3, [pc, #96]	; (8013788 <xTaskPriorityInherit+0xcc>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	429a      	cmp	r2, r3
 801372c:	d903      	bls.n	8013736 <xTaskPriorityInherit+0x7a>
 801372e:	68bb      	ldr	r3, [r7, #8]
 8013730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013732:	4a15      	ldr	r2, [pc, #84]	; (8013788 <xTaskPriorityInherit+0xcc>)
 8013734:	6013      	str	r3, [r2, #0]
 8013736:	68bb      	ldr	r3, [r7, #8]
 8013738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801373a:	4613      	mov	r3, r2
 801373c:	009b      	lsls	r3, r3, #2
 801373e:	4413      	add	r3, r2
 8013740:	009b      	lsls	r3, r3, #2
 8013742:	4a10      	ldr	r2, [pc, #64]	; (8013784 <xTaskPriorityInherit+0xc8>)
 8013744:	441a      	add	r2, r3
 8013746:	68bb      	ldr	r3, [r7, #8]
 8013748:	3304      	adds	r3, #4
 801374a:	4619      	mov	r1, r3
 801374c:	4610      	mov	r0, r2
 801374e:	f7fe f858 	bl	8011802 <vListInsertEnd>
 8013752:	e004      	b.n	801375e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013754:	4b0a      	ldr	r3, [pc, #40]	; (8013780 <xTaskPriorityInherit+0xc4>)
 8013756:	681b      	ldr	r3, [r3, #0]
 8013758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801375a:	68bb      	ldr	r3, [r7, #8]
 801375c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801375e:	2301      	movs	r3, #1
 8013760:	60fb      	str	r3, [r7, #12]
 8013762:	e008      	b.n	8013776 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013764:	68bb      	ldr	r3, [r7, #8]
 8013766:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013768:	4b05      	ldr	r3, [pc, #20]	; (8013780 <xTaskPriorityInherit+0xc4>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801376e:	429a      	cmp	r2, r3
 8013770:	d201      	bcs.n	8013776 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013772:	2301      	movs	r3, #1
 8013774:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013776:	68fb      	ldr	r3, [r7, #12]
	}
 8013778:	4618      	mov	r0, r3
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}
 8013780:	20000f00 	.word	0x20000f00
 8013784:	20000f04 	.word	0x20000f04
 8013788:	200013dc 	.word	0x200013dc

0801378c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801378c:	b580      	push	{r7, lr}
 801378e:	b086      	sub	sp, #24
 8013790:	af00      	add	r7, sp, #0
 8013792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013798:	2300      	movs	r3, #0
 801379a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d056      	beq.n	8013850 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80137a2:	4b2e      	ldr	r3, [pc, #184]	; (801385c <xTaskPriorityDisinherit+0xd0>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	693a      	ldr	r2, [r7, #16]
 80137a8:	429a      	cmp	r2, r3
 80137aa:	d00a      	beq.n	80137c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80137ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b0:	f383 8811 	msr	BASEPRI, r3
 80137b4:	f3bf 8f6f 	isb	sy
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	60fb      	str	r3, [r7, #12]
}
 80137be:	bf00      	nop
 80137c0:	e7fe      	b.n	80137c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80137c2:	693b      	ldr	r3, [r7, #16]
 80137c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d10a      	bne.n	80137e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80137ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ce:	f383 8811 	msr	BASEPRI, r3
 80137d2:	f3bf 8f6f 	isb	sy
 80137d6:	f3bf 8f4f 	dsb	sy
 80137da:	60bb      	str	r3, [r7, #8]
}
 80137dc:	bf00      	nop
 80137de:	e7fe      	b.n	80137de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80137e0:	693b      	ldr	r3, [r7, #16]
 80137e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137e4:	1e5a      	subs	r2, r3, #1
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80137ea:	693b      	ldr	r3, [r7, #16]
 80137ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137ee:	693b      	ldr	r3, [r7, #16]
 80137f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137f2:	429a      	cmp	r2, r3
 80137f4:	d02c      	beq.n	8013850 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80137f6:	693b      	ldr	r3, [r7, #16]
 80137f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d128      	bne.n	8013850 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137fe:	693b      	ldr	r3, [r7, #16]
 8013800:	3304      	adds	r3, #4
 8013802:	4618      	mov	r0, r3
 8013804:	f7fe f85a 	bl	80118bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013808:	693b      	ldr	r3, [r7, #16]
 801380a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801380c:	693b      	ldr	r3, [r7, #16]
 801380e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013810:	693b      	ldr	r3, [r7, #16]
 8013812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013818:	693b      	ldr	r3, [r7, #16]
 801381a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801381c:	693b      	ldr	r3, [r7, #16]
 801381e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013820:	4b0f      	ldr	r3, [pc, #60]	; (8013860 <xTaskPriorityDisinherit+0xd4>)
 8013822:	681b      	ldr	r3, [r3, #0]
 8013824:	429a      	cmp	r2, r3
 8013826:	d903      	bls.n	8013830 <xTaskPriorityDisinherit+0xa4>
 8013828:	693b      	ldr	r3, [r7, #16]
 801382a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801382c:	4a0c      	ldr	r2, [pc, #48]	; (8013860 <xTaskPriorityDisinherit+0xd4>)
 801382e:	6013      	str	r3, [r2, #0]
 8013830:	693b      	ldr	r3, [r7, #16]
 8013832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013834:	4613      	mov	r3, r2
 8013836:	009b      	lsls	r3, r3, #2
 8013838:	4413      	add	r3, r2
 801383a:	009b      	lsls	r3, r3, #2
 801383c:	4a09      	ldr	r2, [pc, #36]	; (8013864 <xTaskPriorityDisinherit+0xd8>)
 801383e:	441a      	add	r2, r3
 8013840:	693b      	ldr	r3, [r7, #16]
 8013842:	3304      	adds	r3, #4
 8013844:	4619      	mov	r1, r3
 8013846:	4610      	mov	r0, r2
 8013848:	f7fd ffdb 	bl	8011802 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801384c:	2301      	movs	r3, #1
 801384e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013850:	697b      	ldr	r3, [r7, #20]
	}
 8013852:	4618      	mov	r0, r3
 8013854:	3718      	adds	r7, #24
 8013856:	46bd      	mov	sp, r7
 8013858:	bd80      	pop	{r7, pc}
 801385a:	bf00      	nop
 801385c:	20000f00 	.word	0x20000f00
 8013860:	200013dc 	.word	0x200013dc
 8013864:	20000f04 	.word	0x20000f04

08013868 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013868:	b580      	push	{r7, lr}
 801386a:	b088      	sub	sp, #32
 801386c:	af00      	add	r7, sp, #0
 801386e:	6078      	str	r0, [r7, #4]
 8013870:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013872:	687b      	ldr	r3, [r7, #4]
 8013874:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013876:	2301      	movs	r3, #1
 8013878:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801387a:	687b      	ldr	r3, [r7, #4]
 801387c:	2b00      	cmp	r3, #0
 801387e:	d06a      	beq.n	8013956 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013880:	69bb      	ldr	r3, [r7, #24]
 8013882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013884:	2b00      	cmp	r3, #0
 8013886:	d10a      	bne.n	801389e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8013888:	f04f 0350 	mov.w	r3, #80	; 0x50
 801388c:	f383 8811 	msr	BASEPRI, r3
 8013890:	f3bf 8f6f 	isb	sy
 8013894:	f3bf 8f4f 	dsb	sy
 8013898:	60fb      	str	r3, [r7, #12]
}
 801389a:	bf00      	nop
 801389c:	e7fe      	b.n	801389c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138a2:	683a      	ldr	r2, [r7, #0]
 80138a4:	429a      	cmp	r2, r3
 80138a6:	d902      	bls.n	80138ae <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80138a8:	683b      	ldr	r3, [r7, #0]
 80138aa:	61fb      	str	r3, [r7, #28]
 80138ac:	e002      	b.n	80138b4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80138b2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80138b4:	69bb      	ldr	r3, [r7, #24]
 80138b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138b8:	69fa      	ldr	r2, [r7, #28]
 80138ba:	429a      	cmp	r2, r3
 80138bc:	d04b      	beq.n	8013956 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80138c2:	697a      	ldr	r2, [r7, #20]
 80138c4:	429a      	cmp	r2, r3
 80138c6:	d146      	bne.n	8013956 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80138c8:	4b25      	ldr	r3, [pc, #148]	; (8013960 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	69ba      	ldr	r2, [r7, #24]
 80138ce:	429a      	cmp	r2, r3
 80138d0:	d10a      	bne.n	80138e8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80138d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d6:	f383 8811 	msr	BASEPRI, r3
 80138da:	f3bf 8f6f 	isb	sy
 80138de:	f3bf 8f4f 	dsb	sy
 80138e2:	60bb      	str	r3, [r7, #8]
}
 80138e4:	bf00      	nop
 80138e6:	e7fe      	b.n	80138e6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80138ec:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80138ee:	69bb      	ldr	r3, [r7, #24]
 80138f0:	69fa      	ldr	r2, [r7, #28]
 80138f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	699b      	ldr	r3, [r3, #24]
 80138f8:	2b00      	cmp	r3, #0
 80138fa:	db04      	blt.n	8013906 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80138fc:	69fb      	ldr	r3, [r7, #28]
 80138fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013902:	69bb      	ldr	r3, [r7, #24]
 8013904:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013906:	69bb      	ldr	r3, [r7, #24]
 8013908:	6959      	ldr	r1, [r3, #20]
 801390a:	693a      	ldr	r2, [r7, #16]
 801390c:	4613      	mov	r3, r2
 801390e:	009b      	lsls	r3, r3, #2
 8013910:	4413      	add	r3, r2
 8013912:	009b      	lsls	r3, r3, #2
 8013914:	4a13      	ldr	r2, [pc, #76]	; (8013964 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013916:	4413      	add	r3, r2
 8013918:	4299      	cmp	r1, r3
 801391a:	d11c      	bne.n	8013956 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801391c:	69bb      	ldr	r3, [r7, #24]
 801391e:	3304      	adds	r3, #4
 8013920:	4618      	mov	r0, r3
 8013922:	f7fd ffcb 	bl	80118bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013926:	69bb      	ldr	r3, [r7, #24]
 8013928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801392a:	4b0f      	ldr	r3, [pc, #60]	; (8013968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	429a      	cmp	r2, r3
 8013930:	d903      	bls.n	801393a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8013932:	69bb      	ldr	r3, [r7, #24]
 8013934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013936:	4a0c      	ldr	r2, [pc, #48]	; (8013968 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013938:	6013      	str	r3, [r2, #0]
 801393a:	69bb      	ldr	r3, [r7, #24]
 801393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801393e:	4613      	mov	r3, r2
 8013940:	009b      	lsls	r3, r3, #2
 8013942:	4413      	add	r3, r2
 8013944:	009b      	lsls	r3, r3, #2
 8013946:	4a07      	ldr	r2, [pc, #28]	; (8013964 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013948:	441a      	add	r2, r3
 801394a:	69bb      	ldr	r3, [r7, #24]
 801394c:	3304      	adds	r3, #4
 801394e:	4619      	mov	r1, r3
 8013950:	4610      	mov	r0, r2
 8013952:	f7fd ff56 	bl	8011802 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013956:	bf00      	nop
 8013958:	3720      	adds	r7, #32
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}
 801395e:	bf00      	nop
 8013960:	20000f00 	.word	0x20000f00
 8013964:	20000f04 	.word	0x20000f04
 8013968:	200013dc 	.word	0x200013dc

0801396c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801396c:	b480      	push	{r7}
 801396e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013970:	4b07      	ldr	r3, [pc, #28]	; (8013990 <pvTaskIncrementMutexHeldCount+0x24>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d004      	beq.n	8013982 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013978:	4b05      	ldr	r3, [pc, #20]	; (8013990 <pvTaskIncrementMutexHeldCount+0x24>)
 801397a:	681b      	ldr	r3, [r3, #0]
 801397c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801397e:	3201      	adds	r2, #1
 8013980:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013982:	4b03      	ldr	r3, [pc, #12]	; (8013990 <pvTaskIncrementMutexHeldCount+0x24>)
 8013984:	681b      	ldr	r3, [r3, #0]
	}
 8013986:	4618      	mov	r0, r3
 8013988:	46bd      	mov	sp, r7
 801398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801398e:	4770      	bx	lr
 8013990:	20000f00 	.word	0x20000f00

08013994 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013994:	b580      	push	{r7, lr}
 8013996:	b084      	sub	sp, #16
 8013998:	af00      	add	r7, sp, #0
 801399a:	6078      	str	r0, [r7, #4]
 801399c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801399e:	4b21      	ldr	r3, [pc, #132]	; (8013a24 <prvAddCurrentTaskToDelayedList+0x90>)
 80139a0:	681b      	ldr	r3, [r3, #0]
 80139a2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80139a4:	4b20      	ldr	r3, [pc, #128]	; (8013a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	3304      	adds	r3, #4
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fd ff86 	bl	80118bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80139b0:	687b      	ldr	r3, [r7, #4]
 80139b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139b6:	d10a      	bne.n	80139ce <prvAddCurrentTaskToDelayedList+0x3a>
 80139b8:	683b      	ldr	r3, [r7, #0]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d007      	beq.n	80139ce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139be:	4b1a      	ldr	r3, [pc, #104]	; (8013a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	3304      	adds	r3, #4
 80139c4:	4619      	mov	r1, r3
 80139c6:	4819      	ldr	r0, [pc, #100]	; (8013a2c <prvAddCurrentTaskToDelayedList+0x98>)
 80139c8:	f7fd ff1b 	bl	8011802 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80139cc:	e026      	b.n	8013a1c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80139ce:	68fa      	ldr	r2, [r7, #12]
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	4413      	add	r3, r2
 80139d4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80139d6:	4b14      	ldr	r3, [pc, #80]	; (8013a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	68ba      	ldr	r2, [r7, #8]
 80139dc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80139de:	68ba      	ldr	r2, [r7, #8]
 80139e0:	68fb      	ldr	r3, [r7, #12]
 80139e2:	429a      	cmp	r2, r3
 80139e4:	d209      	bcs.n	80139fa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139e6:	4b12      	ldr	r3, [pc, #72]	; (8013a30 <prvAddCurrentTaskToDelayedList+0x9c>)
 80139e8:	681a      	ldr	r2, [r3, #0]
 80139ea:	4b0f      	ldr	r3, [pc, #60]	; (8013a28 <prvAddCurrentTaskToDelayedList+0x94>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	3304      	adds	r3, #4
 80139f0:	4619      	mov	r1, r3
 80139f2:	4610      	mov	r0, r2
 80139f4:	f7fd ff29 	bl	801184a <vListInsert>
}
 80139f8:	e010      	b.n	8013a1c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80139fa:	4b0e      	ldr	r3, [pc, #56]	; (8013a34 <prvAddCurrentTaskToDelayedList+0xa0>)
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	4b0a      	ldr	r3, [pc, #40]	; (8013a28 <prvAddCurrentTaskToDelayedList+0x94>)
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	3304      	adds	r3, #4
 8013a04:	4619      	mov	r1, r3
 8013a06:	4610      	mov	r0, r2
 8013a08:	f7fd ff1f 	bl	801184a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013a0c:	4b0a      	ldr	r3, [pc, #40]	; (8013a38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	68ba      	ldr	r2, [r7, #8]
 8013a12:	429a      	cmp	r2, r3
 8013a14:	d202      	bcs.n	8013a1c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013a16:	4a08      	ldr	r2, [pc, #32]	; (8013a38 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013a18:	68bb      	ldr	r3, [r7, #8]
 8013a1a:	6013      	str	r3, [r2, #0]
}
 8013a1c:	bf00      	nop
 8013a1e:	3710      	adds	r7, #16
 8013a20:	46bd      	mov	sp, r7
 8013a22:	bd80      	pop	{r7, pc}
 8013a24:	200013d8 	.word	0x200013d8
 8013a28:	20000f00 	.word	0x20000f00
 8013a2c:	200013c0 	.word	0x200013c0
 8013a30:	20001390 	.word	0x20001390
 8013a34:	2000138c 	.word	0x2000138c
 8013a38:	200013f4 	.word	0x200013f4

08013a3c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013a3c:	b580      	push	{r7, lr}
 8013a3e:	b08a      	sub	sp, #40	; 0x28
 8013a40:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013a42:	2300      	movs	r3, #0
 8013a44:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013a46:	f000 fb07 	bl	8014058 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013a4a:	4b1c      	ldr	r3, [pc, #112]	; (8013abc <xTimerCreateTimerTask+0x80>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d021      	beq.n	8013a96 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013a52:	2300      	movs	r3, #0
 8013a54:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013a56:	2300      	movs	r3, #0
 8013a58:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013a5a:	1d3a      	adds	r2, r7, #4
 8013a5c:	f107 0108 	add.w	r1, r7, #8
 8013a60:	f107 030c 	add.w	r3, r7, #12
 8013a64:	4618      	mov	r0, r3
 8013a66:	f7fd fe85 	bl	8011774 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013a6a:	6879      	ldr	r1, [r7, #4]
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	68fa      	ldr	r2, [r7, #12]
 8013a70:	9202      	str	r2, [sp, #8]
 8013a72:	9301      	str	r3, [sp, #4]
 8013a74:	2302      	movs	r3, #2
 8013a76:	9300      	str	r3, [sp, #0]
 8013a78:	2300      	movs	r3, #0
 8013a7a:	460a      	mov	r2, r1
 8013a7c:	4910      	ldr	r1, [pc, #64]	; (8013ac0 <xTimerCreateTimerTask+0x84>)
 8013a7e:	4811      	ldr	r0, [pc, #68]	; (8013ac4 <xTimerCreateTimerTask+0x88>)
 8013a80:	f7fe ffa4 	bl	80129cc <xTaskCreateStatic>
 8013a84:	4603      	mov	r3, r0
 8013a86:	4a10      	ldr	r2, [pc, #64]	; (8013ac8 <xTimerCreateTimerTask+0x8c>)
 8013a88:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013a8a:	4b0f      	ldr	r3, [pc, #60]	; (8013ac8 <xTimerCreateTimerTask+0x8c>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d001      	beq.n	8013a96 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013a92:	2301      	movs	r3, #1
 8013a94:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013a96:	697b      	ldr	r3, [r7, #20]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d10a      	bne.n	8013ab2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aa0:	f383 8811 	msr	BASEPRI, r3
 8013aa4:	f3bf 8f6f 	isb	sy
 8013aa8:	f3bf 8f4f 	dsb	sy
 8013aac:	613b      	str	r3, [r7, #16]
}
 8013aae:	bf00      	nop
 8013ab0:	e7fe      	b.n	8013ab0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013ab2:	697b      	ldr	r3, [r7, #20]
}
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	3718      	adds	r7, #24
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	bd80      	pop	{r7, pc}
 8013abc:	20001430 	.word	0x20001430
 8013ac0:	080160b8 	.word	0x080160b8
 8013ac4:	08013c01 	.word	0x08013c01
 8013ac8:	20001434 	.word	0x20001434

08013acc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b08a      	sub	sp, #40	; 0x28
 8013ad0:	af00      	add	r7, sp, #0
 8013ad2:	60f8      	str	r0, [r7, #12]
 8013ad4:	60b9      	str	r1, [r7, #8]
 8013ad6:	607a      	str	r2, [r7, #4]
 8013ad8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013ada:	2300      	movs	r3, #0
 8013adc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013ade:	68fb      	ldr	r3, [r7, #12]
 8013ae0:	2b00      	cmp	r3, #0
 8013ae2:	d10a      	bne.n	8013afa <xTimerGenericCommand+0x2e>
	__asm volatile
 8013ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ae8:	f383 8811 	msr	BASEPRI, r3
 8013aec:	f3bf 8f6f 	isb	sy
 8013af0:	f3bf 8f4f 	dsb	sy
 8013af4:	623b      	str	r3, [r7, #32]
}
 8013af6:	bf00      	nop
 8013af8:	e7fe      	b.n	8013af8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013afa:	4b1a      	ldr	r3, [pc, #104]	; (8013b64 <xTimerGenericCommand+0x98>)
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d02a      	beq.n	8013b58 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013b02:	68bb      	ldr	r3, [r7, #8]
 8013b04:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013b0e:	68bb      	ldr	r3, [r7, #8]
 8013b10:	2b05      	cmp	r3, #5
 8013b12:	dc18      	bgt.n	8013b46 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013b14:	f7ff fdb4 	bl	8013680 <xTaskGetSchedulerState>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	2b02      	cmp	r3, #2
 8013b1c:	d109      	bne.n	8013b32 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013b1e:	4b11      	ldr	r3, [pc, #68]	; (8013b64 <xTimerGenericCommand+0x98>)
 8013b20:	6818      	ldr	r0, [r3, #0]
 8013b22:	f107 0110 	add.w	r1, r7, #16
 8013b26:	2300      	movs	r3, #0
 8013b28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b2a:	f7fe f8eb 	bl	8011d04 <xQueueGenericSend>
 8013b2e:	6278      	str	r0, [r7, #36]	; 0x24
 8013b30:	e012      	b.n	8013b58 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013b32:	4b0c      	ldr	r3, [pc, #48]	; (8013b64 <xTimerGenericCommand+0x98>)
 8013b34:	6818      	ldr	r0, [r3, #0]
 8013b36:	f107 0110 	add.w	r1, r7, #16
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	f7fe f8e1 	bl	8011d04 <xQueueGenericSend>
 8013b42:	6278      	str	r0, [r7, #36]	; 0x24
 8013b44:	e008      	b.n	8013b58 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013b46:	4b07      	ldr	r3, [pc, #28]	; (8013b64 <xTimerGenericCommand+0x98>)
 8013b48:	6818      	ldr	r0, [r3, #0]
 8013b4a:	f107 0110 	add.w	r1, r7, #16
 8013b4e:	2300      	movs	r3, #0
 8013b50:	683a      	ldr	r2, [r7, #0]
 8013b52:	f7fe f9d5 	bl	8011f00 <xQueueGenericSendFromISR>
 8013b56:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	3728      	adds	r7, #40	; 0x28
 8013b5e:	46bd      	mov	sp, r7
 8013b60:	bd80      	pop	{r7, pc}
 8013b62:	bf00      	nop
 8013b64:	20001430 	.word	0x20001430

08013b68 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b088      	sub	sp, #32
 8013b6c:	af02      	add	r7, sp, #8
 8013b6e:	6078      	str	r0, [r7, #4]
 8013b70:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b72:	4b22      	ldr	r3, [pc, #136]	; (8013bfc <prvProcessExpiredTimer+0x94>)
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	68db      	ldr	r3, [r3, #12]
 8013b78:	68db      	ldr	r3, [r3, #12]
 8013b7a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013b7c:	697b      	ldr	r3, [r7, #20]
 8013b7e:	3304      	adds	r3, #4
 8013b80:	4618      	mov	r0, r3
 8013b82:	f7fd fe9b 	bl	80118bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013b86:	697b      	ldr	r3, [r7, #20]
 8013b88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013b8c:	f003 0304 	and.w	r3, r3, #4
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d022      	beq.n	8013bda <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	699a      	ldr	r2, [r3, #24]
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	18d1      	adds	r1, r2, r3
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	683a      	ldr	r2, [r7, #0]
 8013ba0:	6978      	ldr	r0, [r7, #20]
 8013ba2:	f000 f8d1 	bl	8013d48 <prvInsertTimerInActiveList>
 8013ba6:	4603      	mov	r3, r0
 8013ba8:	2b00      	cmp	r3, #0
 8013baa:	d01f      	beq.n	8013bec <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013bac:	2300      	movs	r3, #0
 8013bae:	9300      	str	r3, [sp, #0]
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	687a      	ldr	r2, [r7, #4]
 8013bb4:	2100      	movs	r1, #0
 8013bb6:	6978      	ldr	r0, [r7, #20]
 8013bb8:	f7ff ff88 	bl	8013acc <xTimerGenericCommand>
 8013bbc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013bbe:	693b      	ldr	r3, [r7, #16]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d113      	bne.n	8013bec <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bc8:	f383 8811 	msr	BASEPRI, r3
 8013bcc:	f3bf 8f6f 	isb	sy
 8013bd0:	f3bf 8f4f 	dsb	sy
 8013bd4:	60fb      	str	r3, [r7, #12]
}
 8013bd6:	bf00      	nop
 8013bd8:	e7fe      	b.n	8013bd8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013bda:	697b      	ldr	r3, [r7, #20]
 8013bdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013be0:	f023 0301 	bic.w	r3, r3, #1
 8013be4:	b2da      	uxtb	r2, r3
 8013be6:	697b      	ldr	r3, [r7, #20]
 8013be8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013bec:	697b      	ldr	r3, [r7, #20]
 8013bee:	6a1b      	ldr	r3, [r3, #32]
 8013bf0:	6978      	ldr	r0, [r7, #20]
 8013bf2:	4798      	blx	r3
}
 8013bf4:	bf00      	nop
 8013bf6:	3718      	adds	r7, #24
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	bd80      	pop	{r7, pc}
 8013bfc:	20001428 	.word	0x20001428

08013c00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013c08:	f107 0308 	add.w	r3, r7, #8
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	f000 f857 	bl	8013cc0 <prvGetNextExpireTime>
 8013c12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	4619      	mov	r1, r3
 8013c18:	68f8      	ldr	r0, [r7, #12]
 8013c1a:	f000 f803 	bl	8013c24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013c1e:	f000 f8d5 	bl	8013dcc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013c22:	e7f1      	b.n	8013c08 <prvTimerTask+0x8>

08013c24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b084      	sub	sp, #16
 8013c28:	af00      	add	r7, sp, #0
 8013c2a:	6078      	str	r0, [r7, #4]
 8013c2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013c2e:	f7ff f929 	bl	8012e84 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013c32:	f107 0308 	add.w	r3, r7, #8
 8013c36:	4618      	mov	r0, r3
 8013c38:	f000 f866 	bl	8013d08 <prvSampleTimeNow>
 8013c3c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d130      	bne.n	8013ca6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013c44:	683b      	ldr	r3, [r7, #0]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d10a      	bne.n	8013c60 <prvProcessTimerOrBlockTask+0x3c>
 8013c4a:	687a      	ldr	r2, [r7, #4]
 8013c4c:	68fb      	ldr	r3, [r7, #12]
 8013c4e:	429a      	cmp	r2, r3
 8013c50:	d806      	bhi.n	8013c60 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013c52:	f7ff f925 	bl	8012ea0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013c56:	68f9      	ldr	r1, [r7, #12]
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f7ff ff85 	bl	8013b68 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013c5e:	e024      	b.n	8013caa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d008      	beq.n	8013c78 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013c66:	4b13      	ldr	r3, [pc, #76]	; (8013cb4 <prvProcessTimerOrBlockTask+0x90>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	681b      	ldr	r3, [r3, #0]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d101      	bne.n	8013c74 <prvProcessTimerOrBlockTask+0x50>
 8013c70:	2301      	movs	r3, #1
 8013c72:	e000      	b.n	8013c76 <prvProcessTimerOrBlockTask+0x52>
 8013c74:	2300      	movs	r3, #0
 8013c76:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013c78:	4b0f      	ldr	r3, [pc, #60]	; (8013cb8 <prvProcessTimerOrBlockTask+0x94>)
 8013c7a:	6818      	ldr	r0, [r3, #0]
 8013c7c:	687a      	ldr	r2, [r7, #4]
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	1ad3      	subs	r3, r2, r3
 8013c82:	683a      	ldr	r2, [r7, #0]
 8013c84:	4619      	mov	r1, r3
 8013c86:	f7fe fe6d 	bl	8012964 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013c8a:	f7ff f909 	bl	8012ea0 <xTaskResumeAll>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d10a      	bne.n	8013caa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013c94:	4b09      	ldr	r3, [pc, #36]	; (8013cbc <prvProcessTimerOrBlockTask+0x98>)
 8013c96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c9a:	601a      	str	r2, [r3, #0]
 8013c9c:	f3bf 8f4f 	dsb	sy
 8013ca0:	f3bf 8f6f 	isb	sy
}
 8013ca4:	e001      	b.n	8013caa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013ca6:	f7ff f8fb 	bl	8012ea0 <xTaskResumeAll>
}
 8013caa:	bf00      	nop
 8013cac:	3710      	adds	r7, #16
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}
 8013cb2:	bf00      	nop
 8013cb4:	2000142c 	.word	0x2000142c
 8013cb8:	20001430 	.word	0x20001430
 8013cbc:	e000ed04 	.word	0xe000ed04

08013cc0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013cc0:	b480      	push	{r7}
 8013cc2:	b085      	sub	sp, #20
 8013cc4:	af00      	add	r7, sp, #0
 8013cc6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013cc8:	4b0e      	ldr	r3, [pc, #56]	; (8013d04 <prvGetNextExpireTime+0x44>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	d101      	bne.n	8013cd6 <prvGetNextExpireTime+0x16>
 8013cd2:	2201      	movs	r2, #1
 8013cd4:	e000      	b.n	8013cd8 <prvGetNextExpireTime+0x18>
 8013cd6:	2200      	movs	r2, #0
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	681b      	ldr	r3, [r3, #0]
 8013ce0:	2b00      	cmp	r3, #0
 8013ce2:	d105      	bne.n	8013cf0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013ce4:	4b07      	ldr	r3, [pc, #28]	; (8013d04 <prvGetNextExpireTime+0x44>)
 8013ce6:	681b      	ldr	r3, [r3, #0]
 8013ce8:	68db      	ldr	r3, [r3, #12]
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	60fb      	str	r3, [r7, #12]
 8013cee:	e001      	b.n	8013cf4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013cf0:	2300      	movs	r3, #0
 8013cf2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
}
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	3714      	adds	r7, #20
 8013cfa:	46bd      	mov	sp, r7
 8013cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d00:	4770      	bx	lr
 8013d02:	bf00      	nop
 8013d04:	20001428 	.word	0x20001428

08013d08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013d08:	b580      	push	{r7, lr}
 8013d0a:	b084      	sub	sp, #16
 8013d0c:	af00      	add	r7, sp, #0
 8013d0e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013d10:	f7ff f964 	bl	8012fdc <xTaskGetTickCount>
 8013d14:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013d16:	4b0b      	ldr	r3, [pc, #44]	; (8013d44 <prvSampleTimeNow+0x3c>)
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	68fa      	ldr	r2, [r7, #12]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d205      	bcs.n	8013d2c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013d20:	f000 f936 	bl	8013f90 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2201      	movs	r2, #1
 8013d28:	601a      	str	r2, [r3, #0]
 8013d2a:	e002      	b.n	8013d32 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	2200      	movs	r2, #0
 8013d30:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013d32:	4a04      	ldr	r2, [pc, #16]	; (8013d44 <prvSampleTimeNow+0x3c>)
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013d38:	68fb      	ldr	r3, [r7, #12]
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3710      	adds	r7, #16
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bd80      	pop	{r7, pc}
 8013d42:	bf00      	nop
 8013d44:	20001438 	.word	0x20001438

08013d48 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b086      	sub	sp, #24
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	60f8      	str	r0, [r7, #12]
 8013d50:	60b9      	str	r1, [r7, #8]
 8013d52:	607a      	str	r2, [r7, #4]
 8013d54:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013d56:	2300      	movs	r3, #0
 8013d58:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	68ba      	ldr	r2, [r7, #8]
 8013d5e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	68fa      	ldr	r2, [r7, #12]
 8013d64:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013d66:	68ba      	ldr	r2, [r7, #8]
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	429a      	cmp	r2, r3
 8013d6c:	d812      	bhi.n	8013d94 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d6e:	687a      	ldr	r2, [r7, #4]
 8013d70:	683b      	ldr	r3, [r7, #0]
 8013d72:	1ad2      	subs	r2, r2, r3
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	699b      	ldr	r3, [r3, #24]
 8013d78:	429a      	cmp	r2, r3
 8013d7a:	d302      	bcc.n	8013d82 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	617b      	str	r3, [r7, #20]
 8013d80:	e01b      	b.n	8013dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013d82:	4b10      	ldr	r3, [pc, #64]	; (8013dc4 <prvInsertTimerInActiveList+0x7c>)
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	68fb      	ldr	r3, [r7, #12]
 8013d88:	3304      	adds	r3, #4
 8013d8a:	4619      	mov	r1, r3
 8013d8c:	4610      	mov	r0, r2
 8013d8e:	f7fd fd5c 	bl	801184a <vListInsert>
 8013d92:	e012      	b.n	8013dba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	683b      	ldr	r3, [r7, #0]
 8013d98:	429a      	cmp	r2, r3
 8013d9a:	d206      	bcs.n	8013daa <prvInsertTimerInActiveList+0x62>
 8013d9c:	68ba      	ldr	r2, [r7, #8]
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	429a      	cmp	r2, r3
 8013da2:	d302      	bcc.n	8013daa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013da4:	2301      	movs	r3, #1
 8013da6:	617b      	str	r3, [r7, #20]
 8013da8:	e007      	b.n	8013dba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013daa:	4b07      	ldr	r3, [pc, #28]	; (8013dc8 <prvInsertTimerInActiveList+0x80>)
 8013dac:	681a      	ldr	r2, [r3, #0]
 8013dae:	68fb      	ldr	r3, [r7, #12]
 8013db0:	3304      	adds	r3, #4
 8013db2:	4619      	mov	r1, r3
 8013db4:	4610      	mov	r0, r2
 8013db6:	f7fd fd48 	bl	801184a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013dba:	697b      	ldr	r3, [r7, #20]
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3718      	adds	r7, #24
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bd80      	pop	{r7, pc}
 8013dc4:	2000142c 	.word	0x2000142c
 8013dc8:	20001428 	.word	0x20001428

08013dcc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013dcc:	b580      	push	{r7, lr}
 8013dce:	b08e      	sub	sp, #56	; 0x38
 8013dd0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013dd2:	e0ca      	b.n	8013f6a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	da18      	bge.n	8013e0c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013dda:	1d3b      	adds	r3, r7, #4
 8013ddc:	3304      	adds	r3, #4
 8013dde:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013de2:	2b00      	cmp	r3, #0
 8013de4:	d10a      	bne.n	8013dfc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dea:	f383 8811 	msr	BASEPRI, r3
 8013dee:	f3bf 8f6f 	isb	sy
 8013df2:	f3bf 8f4f 	dsb	sy
 8013df6:	61fb      	str	r3, [r7, #28]
}
 8013df8:	bf00      	nop
 8013dfa:	e7fe      	b.n	8013dfa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013dfe:	681b      	ldr	r3, [r3, #0]
 8013e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e02:	6850      	ldr	r0, [r2, #4]
 8013e04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013e06:	6892      	ldr	r2, [r2, #8]
 8013e08:	4611      	mov	r1, r2
 8013e0a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013e0c:	687b      	ldr	r3, [r7, #4]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	f2c0 80aa 	blt.w	8013f68 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013e14:	68fb      	ldr	r3, [r7, #12]
 8013e16:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e1a:	695b      	ldr	r3, [r3, #20]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d004      	beq.n	8013e2a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e22:	3304      	adds	r3, #4
 8013e24:	4618      	mov	r0, r3
 8013e26:	f7fd fd49 	bl	80118bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013e2a:	463b      	mov	r3, r7
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7ff ff6b 	bl	8013d08 <prvSampleTimeNow>
 8013e32:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	2b09      	cmp	r3, #9
 8013e38:	f200 8097 	bhi.w	8013f6a <prvProcessReceivedCommands+0x19e>
 8013e3c:	a201      	add	r2, pc, #4	; (adr r2, 8013e44 <prvProcessReceivedCommands+0x78>)
 8013e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e42:	bf00      	nop
 8013e44:	08013e6d 	.word	0x08013e6d
 8013e48:	08013e6d 	.word	0x08013e6d
 8013e4c:	08013e6d 	.word	0x08013e6d
 8013e50:	08013ee1 	.word	0x08013ee1
 8013e54:	08013ef5 	.word	0x08013ef5
 8013e58:	08013f3f 	.word	0x08013f3f
 8013e5c:	08013e6d 	.word	0x08013e6d
 8013e60:	08013e6d 	.word	0x08013e6d
 8013e64:	08013ee1 	.word	0x08013ee1
 8013e68:	08013ef5 	.word	0x08013ef5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e6e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013e72:	f043 0301 	orr.w	r3, r3, #1
 8013e76:	b2da      	uxtb	r2, r3
 8013e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e7a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8013e7e:	68ba      	ldr	r2, [r7, #8]
 8013e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e82:	699b      	ldr	r3, [r3, #24]
 8013e84:	18d1      	adds	r1, r2, r3
 8013e86:	68bb      	ldr	r3, [r7, #8]
 8013e88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e8c:	f7ff ff5c 	bl	8013d48 <prvInsertTimerInActiveList>
 8013e90:	4603      	mov	r3, r0
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d069      	beq.n	8013f6a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e98:	6a1b      	ldr	r3, [r3, #32]
 8013e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013e9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ea4:	f003 0304 	and.w	r3, r3, #4
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	d05e      	beq.n	8013f6a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8013eac:	68ba      	ldr	r2, [r7, #8]
 8013eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eb0:	699b      	ldr	r3, [r3, #24]
 8013eb2:	441a      	add	r2, r3
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	9300      	str	r3, [sp, #0]
 8013eb8:	2300      	movs	r3, #0
 8013eba:	2100      	movs	r1, #0
 8013ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ebe:	f7ff fe05 	bl	8013acc <xTimerGenericCommand>
 8013ec2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8013ec4:	6a3b      	ldr	r3, [r7, #32]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d14f      	bne.n	8013f6a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8013eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ece:	f383 8811 	msr	BASEPRI, r3
 8013ed2:	f3bf 8f6f 	isb	sy
 8013ed6:	f3bf 8f4f 	dsb	sy
 8013eda:	61bb      	str	r3, [r7, #24]
}
 8013edc:	bf00      	nop
 8013ede:	e7fe      	b.n	8013ede <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013ee6:	f023 0301 	bic.w	r3, r3, #1
 8013eea:	b2da      	uxtb	r2, r3
 8013eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013eee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8013ef2:	e03a      	b.n	8013f6a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8013ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013efa:	f043 0301 	orr.w	r3, r3, #1
 8013efe:	b2da      	uxtb	r2, r3
 8013f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8013f06:	68ba      	ldr	r2, [r7, #8]
 8013f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f0a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8013f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f0e:	699b      	ldr	r3, [r3, #24]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d10a      	bne.n	8013f2a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8013f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f18:	f383 8811 	msr	BASEPRI, r3
 8013f1c:	f3bf 8f6f 	isb	sy
 8013f20:	f3bf 8f4f 	dsb	sy
 8013f24:	617b      	str	r3, [r7, #20]
}
 8013f26:	bf00      	nop
 8013f28:	e7fe      	b.n	8013f28 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8013f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f2c:	699a      	ldr	r2, [r3, #24]
 8013f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f30:	18d1      	adds	r1, r2, r3
 8013f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013f36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f38:	f7ff ff06 	bl	8013d48 <prvInsertTimerInActiveList>
					break;
 8013f3c:	e015      	b.n	8013f6a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8013f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f44:	f003 0302 	and.w	r3, r3, #2
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d103      	bne.n	8013f54 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8013f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f4e:	f000 fbd7 	bl	8014700 <vPortFree>
 8013f52:	e00a      	b.n	8013f6a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f56:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013f5a:	f023 0301 	bic.w	r3, r3, #1
 8013f5e:	b2da      	uxtb	r2, r3
 8013f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f62:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8013f66:	e000      	b.n	8013f6a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8013f68:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013f6a:	4b08      	ldr	r3, [pc, #32]	; (8013f8c <prvProcessReceivedCommands+0x1c0>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	1d39      	adds	r1, r7, #4
 8013f70:	2200      	movs	r2, #0
 8013f72:	4618      	mov	r0, r3
 8013f74:	f7fe f8ea 	bl	801214c <xQueueReceive>
 8013f78:	4603      	mov	r3, r0
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	f47f af2a 	bne.w	8013dd4 <prvProcessReceivedCommands+0x8>
	}
}
 8013f80:	bf00      	nop
 8013f82:	bf00      	nop
 8013f84:	3730      	adds	r7, #48	; 0x30
 8013f86:	46bd      	mov	sp, r7
 8013f88:	bd80      	pop	{r7, pc}
 8013f8a:	bf00      	nop
 8013f8c:	20001430 	.word	0x20001430

08013f90 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b088      	sub	sp, #32
 8013f94:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8013f96:	e048      	b.n	801402a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013f98:	4b2d      	ldr	r3, [pc, #180]	; (8014050 <prvSwitchTimerLists+0xc0>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	68db      	ldr	r3, [r3, #12]
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013fa2:	4b2b      	ldr	r3, [pc, #172]	; (8014050 <prvSwitchTimerLists+0xc0>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	68db      	ldr	r3, [r3, #12]
 8013faa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	3304      	adds	r3, #4
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f7fd fc83 	bl	80118bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013fb6:	68fb      	ldr	r3, [r7, #12]
 8013fb8:	6a1b      	ldr	r3, [r3, #32]
 8013fba:	68f8      	ldr	r0, [r7, #12]
 8013fbc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013fc4:	f003 0304 	and.w	r3, r3, #4
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d02e      	beq.n	801402a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8013fcc:	68fb      	ldr	r3, [r7, #12]
 8013fce:	699b      	ldr	r3, [r3, #24]
 8013fd0:	693a      	ldr	r2, [r7, #16]
 8013fd2:	4413      	add	r3, r2
 8013fd4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8013fd6:	68ba      	ldr	r2, [r7, #8]
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	429a      	cmp	r2, r3
 8013fdc:	d90e      	bls.n	8013ffc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8013fde:	68fb      	ldr	r3, [r7, #12]
 8013fe0:	68ba      	ldr	r2, [r7, #8]
 8013fe2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013fe4:	68fb      	ldr	r3, [r7, #12]
 8013fe6:	68fa      	ldr	r2, [r7, #12]
 8013fe8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013fea:	4b19      	ldr	r3, [pc, #100]	; (8014050 <prvSwitchTimerLists+0xc0>)
 8013fec:	681a      	ldr	r2, [r3, #0]
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	3304      	adds	r3, #4
 8013ff2:	4619      	mov	r1, r3
 8013ff4:	4610      	mov	r0, r2
 8013ff6:	f7fd fc28 	bl	801184a <vListInsert>
 8013ffa:	e016      	b.n	801402a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	9300      	str	r3, [sp, #0]
 8014000:	2300      	movs	r3, #0
 8014002:	693a      	ldr	r2, [r7, #16]
 8014004:	2100      	movs	r1, #0
 8014006:	68f8      	ldr	r0, [r7, #12]
 8014008:	f7ff fd60 	bl	8013acc <xTimerGenericCommand>
 801400c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801400e:	687b      	ldr	r3, [r7, #4]
 8014010:	2b00      	cmp	r3, #0
 8014012:	d10a      	bne.n	801402a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8014014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014018:	f383 8811 	msr	BASEPRI, r3
 801401c:	f3bf 8f6f 	isb	sy
 8014020:	f3bf 8f4f 	dsb	sy
 8014024:	603b      	str	r3, [r7, #0]
}
 8014026:	bf00      	nop
 8014028:	e7fe      	b.n	8014028 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801402a:	4b09      	ldr	r3, [pc, #36]	; (8014050 <prvSwitchTimerLists+0xc0>)
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	2b00      	cmp	r3, #0
 8014032:	d1b1      	bne.n	8013f98 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014034:	4b06      	ldr	r3, [pc, #24]	; (8014050 <prvSwitchTimerLists+0xc0>)
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801403a:	4b06      	ldr	r3, [pc, #24]	; (8014054 <prvSwitchTimerLists+0xc4>)
 801403c:	681b      	ldr	r3, [r3, #0]
 801403e:	4a04      	ldr	r2, [pc, #16]	; (8014050 <prvSwitchTimerLists+0xc0>)
 8014040:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014042:	4a04      	ldr	r2, [pc, #16]	; (8014054 <prvSwitchTimerLists+0xc4>)
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	6013      	str	r3, [r2, #0]
}
 8014048:	bf00      	nop
 801404a:	3718      	adds	r7, #24
 801404c:	46bd      	mov	sp, r7
 801404e:	bd80      	pop	{r7, pc}
 8014050:	20001428 	.word	0x20001428
 8014054:	2000142c 	.word	0x2000142c

08014058 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b082      	sub	sp, #8
 801405c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801405e:	f000 f969 	bl	8014334 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014062:	4b15      	ldr	r3, [pc, #84]	; (80140b8 <prvCheckForValidListAndQueue+0x60>)
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d120      	bne.n	80140ac <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801406a:	4814      	ldr	r0, [pc, #80]	; (80140bc <prvCheckForValidListAndQueue+0x64>)
 801406c:	f7fd fb9c 	bl	80117a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014070:	4813      	ldr	r0, [pc, #76]	; (80140c0 <prvCheckForValidListAndQueue+0x68>)
 8014072:	f7fd fb99 	bl	80117a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014076:	4b13      	ldr	r3, [pc, #76]	; (80140c4 <prvCheckForValidListAndQueue+0x6c>)
 8014078:	4a10      	ldr	r2, [pc, #64]	; (80140bc <prvCheckForValidListAndQueue+0x64>)
 801407a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801407c:	4b12      	ldr	r3, [pc, #72]	; (80140c8 <prvCheckForValidListAndQueue+0x70>)
 801407e:	4a10      	ldr	r2, [pc, #64]	; (80140c0 <prvCheckForValidListAndQueue+0x68>)
 8014080:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014082:	2300      	movs	r3, #0
 8014084:	9300      	str	r3, [sp, #0]
 8014086:	4b11      	ldr	r3, [pc, #68]	; (80140cc <prvCheckForValidListAndQueue+0x74>)
 8014088:	4a11      	ldr	r2, [pc, #68]	; (80140d0 <prvCheckForValidListAndQueue+0x78>)
 801408a:	2110      	movs	r1, #16
 801408c:	200a      	movs	r0, #10
 801408e:	f7fd fca7 	bl	80119e0 <xQueueGenericCreateStatic>
 8014092:	4603      	mov	r3, r0
 8014094:	4a08      	ldr	r2, [pc, #32]	; (80140b8 <prvCheckForValidListAndQueue+0x60>)
 8014096:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014098:	4b07      	ldr	r3, [pc, #28]	; (80140b8 <prvCheckForValidListAndQueue+0x60>)
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d005      	beq.n	80140ac <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80140a0:	4b05      	ldr	r3, [pc, #20]	; (80140b8 <prvCheckForValidListAndQueue+0x60>)
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	490b      	ldr	r1, [pc, #44]	; (80140d4 <prvCheckForValidListAndQueue+0x7c>)
 80140a6:	4618      	mov	r0, r3
 80140a8:	f7fe fc08 	bl	80128bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80140ac:	f000 f972 	bl	8014394 <vPortExitCritical>
}
 80140b0:	bf00      	nop
 80140b2:	46bd      	mov	sp, r7
 80140b4:	bd80      	pop	{r7, pc}
 80140b6:	bf00      	nop
 80140b8:	20001430 	.word	0x20001430
 80140bc:	20001400 	.word	0x20001400
 80140c0:	20001414 	.word	0x20001414
 80140c4:	20001428 	.word	0x20001428
 80140c8:	2000142c 	.word	0x2000142c
 80140cc:	200014dc 	.word	0x200014dc
 80140d0:	2000143c 	.word	0x2000143c
 80140d4:	080160c0 	.word	0x080160c0

080140d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80140d8:	b480      	push	{r7}
 80140da:	b085      	sub	sp, #20
 80140dc:	af00      	add	r7, sp, #0
 80140de:	60f8      	str	r0, [r7, #12]
 80140e0:	60b9      	str	r1, [r7, #8]
 80140e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80140e4:	68fb      	ldr	r3, [r7, #12]
 80140e6:	3b04      	subs	r3, #4
 80140e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80140ea:	68fb      	ldr	r3, [r7, #12]
 80140ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80140f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	3b04      	subs	r3, #4
 80140f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80140f8:	68bb      	ldr	r3, [r7, #8]
 80140fa:	f023 0201 	bic.w	r2, r3, #1
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	3b04      	subs	r3, #4
 8014106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8014108:	4a0c      	ldr	r2, [pc, #48]	; (801413c <pxPortInitialiseStack+0x64>)
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801410e:	68fb      	ldr	r3, [r7, #12]
 8014110:	3b14      	subs	r3, #20
 8014112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8014114:	687a      	ldr	r2, [r7, #4]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801411a:	68fb      	ldr	r3, [r7, #12]
 801411c:	3b04      	subs	r3, #4
 801411e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	f06f 0202 	mvn.w	r2, #2
 8014126:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	3b20      	subs	r3, #32
 801412c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801412e:	68fb      	ldr	r3, [r7, #12]
}
 8014130:	4618      	mov	r0, r3
 8014132:	3714      	adds	r7, #20
 8014134:	46bd      	mov	sp, r7
 8014136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801413a:	4770      	bx	lr
 801413c:	08014141 	.word	0x08014141

08014140 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014140:	b480      	push	{r7}
 8014142:	b085      	sub	sp, #20
 8014144:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8014146:	2300      	movs	r3, #0
 8014148:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801414a:	4b12      	ldr	r3, [pc, #72]	; (8014194 <prvTaskExitError+0x54>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014152:	d00a      	beq.n	801416a <prvTaskExitError+0x2a>
	__asm volatile
 8014154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014158:	f383 8811 	msr	BASEPRI, r3
 801415c:	f3bf 8f6f 	isb	sy
 8014160:	f3bf 8f4f 	dsb	sy
 8014164:	60fb      	str	r3, [r7, #12]
}
 8014166:	bf00      	nop
 8014168:	e7fe      	b.n	8014168 <prvTaskExitError+0x28>
	__asm volatile
 801416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801416e:	f383 8811 	msr	BASEPRI, r3
 8014172:	f3bf 8f6f 	isb	sy
 8014176:	f3bf 8f4f 	dsb	sy
 801417a:	60bb      	str	r3, [r7, #8]
}
 801417c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801417e:	bf00      	nop
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	2b00      	cmp	r3, #0
 8014184:	d0fc      	beq.n	8014180 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014186:	bf00      	nop
 8014188:	bf00      	nop
 801418a:	3714      	adds	r7, #20
 801418c:	46bd      	mov	sp, r7
 801418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014192:	4770      	bx	lr
 8014194:	20000084 	.word	0x20000084
	...

080141a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80141a0:	4b07      	ldr	r3, [pc, #28]	; (80141c0 <pxCurrentTCBConst2>)
 80141a2:	6819      	ldr	r1, [r3, #0]
 80141a4:	6808      	ldr	r0, [r1, #0]
 80141a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141aa:	f380 8809 	msr	PSP, r0
 80141ae:	f3bf 8f6f 	isb	sy
 80141b2:	f04f 0000 	mov.w	r0, #0
 80141b6:	f380 8811 	msr	BASEPRI, r0
 80141ba:	4770      	bx	lr
 80141bc:	f3af 8000 	nop.w

080141c0 <pxCurrentTCBConst2>:
 80141c0:	20000f00 	.word	0x20000f00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80141c4:	bf00      	nop
 80141c6:	bf00      	nop

080141c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80141c8:	4808      	ldr	r0, [pc, #32]	; (80141ec <prvPortStartFirstTask+0x24>)
 80141ca:	6800      	ldr	r0, [r0, #0]
 80141cc:	6800      	ldr	r0, [r0, #0]
 80141ce:	f380 8808 	msr	MSP, r0
 80141d2:	f04f 0000 	mov.w	r0, #0
 80141d6:	f380 8814 	msr	CONTROL, r0
 80141da:	b662      	cpsie	i
 80141dc:	b661      	cpsie	f
 80141de:	f3bf 8f4f 	dsb	sy
 80141e2:	f3bf 8f6f 	isb	sy
 80141e6:	df00      	svc	0
 80141e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80141ea:	bf00      	nop
 80141ec:	e000ed08 	.word	0xe000ed08

080141f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b086      	sub	sp, #24
 80141f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80141f6:	4b46      	ldr	r3, [pc, #280]	; (8014310 <xPortStartScheduler+0x120>)
 80141f8:	681b      	ldr	r3, [r3, #0]
 80141fa:	4a46      	ldr	r2, [pc, #280]	; (8014314 <xPortStartScheduler+0x124>)
 80141fc:	4293      	cmp	r3, r2
 80141fe:	d10a      	bne.n	8014216 <xPortStartScheduler+0x26>
	__asm volatile
 8014200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014204:	f383 8811 	msr	BASEPRI, r3
 8014208:	f3bf 8f6f 	isb	sy
 801420c:	f3bf 8f4f 	dsb	sy
 8014210:	613b      	str	r3, [r7, #16]
}
 8014212:	bf00      	nop
 8014214:	e7fe      	b.n	8014214 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8014216:	4b3e      	ldr	r3, [pc, #248]	; (8014310 <xPortStartScheduler+0x120>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	4a3f      	ldr	r2, [pc, #252]	; (8014318 <xPortStartScheduler+0x128>)
 801421c:	4293      	cmp	r3, r2
 801421e:	d10a      	bne.n	8014236 <xPortStartScheduler+0x46>
	__asm volatile
 8014220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014224:	f383 8811 	msr	BASEPRI, r3
 8014228:	f3bf 8f6f 	isb	sy
 801422c:	f3bf 8f4f 	dsb	sy
 8014230:	60fb      	str	r3, [r7, #12]
}
 8014232:	bf00      	nop
 8014234:	e7fe      	b.n	8014234 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8014236:	4b39      	ldr	r3, [pc, #228]	; (801431c <xPortStartScheduler+0x12c>)
 8014238:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801423a:	697b      	ldr	r3, [r7, #20]
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	b2db      	uxtb	r3, r3
 8014240:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8014242:	697b      	ldr	r3, [r7, #20]
 8014244:	22ff      	movs	r2, #255	; 0xff
 8014246:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8014248:	697b      	ldr	r3, [r7, #20]
 801424a:	781b      	ldrb	r3, [r3, #0]
 801424c:	b2db      	uxtb	r3, r3
 801424e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014250:	78fb      	ldrb	r3, [r7, #3]
 8014252:	b2db      	uxtb	r3, r3
 8014254:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014258:	b2da      	uxtb	r2, r3
 801425a:	4b31      	ldr	r3, [pc, #196]	; (8014320 <xPortStartScheduler+0x130>)
 801425c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801425e:	4b31      	ldr	r3, [pc, #196]	; (8014324 <xPortStartScheduler+0x134>)
 8014260:	2207      	movs	r2, #7
 8014262:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014264:	e009      	b.n	801427a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014266:	4b2f      	ldr	r3, [pc, #188]	; (8014324 <xPortStartScheduler+0x134>)
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	3b01      	subs	r3, #1
 801426c:	4a2d      	ldr	r2, [pc, #180]	; (8014324 <xPortStartScheduler+0x134>)
 801426e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014270:	78fb      	ldrb	r3, [r7, #3]
 8014272:	b2db      	uxtb	r3, r3
 8014274:	005b      	lsls	r3, r3, #1
 8014276:	b2db      	uxtb	r3, r3
 8014278:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801427a:	78fb      	ldrb	r3, [r7, #3]
 801427c:	b2db      	uxtb	r3, r3
 801427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014282:	2b80      	cmp	r3, #128	; 0x80
 8014284:	d0ef      	beq.n	8014266 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014286:	4b27      	ldr	r3, [pc, #156]	; (8014324 <xPortStartScheduler+0x134>)
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	f1c3 0307 	rsb	r3, r3, #7
 801428e:	2b04      	cmp	r3, #4
 8014290:	d00a      	beq.n	80142a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8014292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014296:	f383 8811 	msr	BASEPRI, r3
 801429a:	f3bf 8f6f 	isb	sy
 801429e:	f3bf 8f4f 	dsb	sy
 80142a2:	60bb      	str	r3, [r7, #8]
}
 80142a4:	bf00      	nop
 80142a6:	e7fe      	b.n	80142a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80142a8:	4b1e      	ldr	r3, [pc, #120]	; (8014324 <xPortStartScheduler+0x134>)
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	021b      	lsls	r3, r3, #8
 80142ae:	4a1d      	ldr	r2, [pc, #116]	; (8014324 <xPortStartScheduler+0x134>)
 80142b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80142b2:	4b1c      	ldr	r3, [pc, #112]	; (8014324 <xPortStartScheduler+0x134>)
 80142b4:	681b      	ldr	r3, [r3, #0]
 80142b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80142ba:	4a1a      	ldr	r2, [pc, #104]	; (8014324 <xPortStartScheduler+0x134>)
 80142bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	b2da      	uxtb	r2, r3
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80142c6:	4b18      	ldr	r3, [pc, #96]	; (8014328 <xPortStartScheduler+0x138>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	4a17      	ldr	r2, [pc, #92]	; (8014328 <xPortStartScheduler+0x138>)
 80142cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80142d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80142d2:	4b15      	ldr	r3, [pc, #84]	; (8014328 <xPortStartScheduler+0x138>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	4a14      	ldr	r2, [pc, #80]	; (8014328 <xPortStartScheduler+0x138>)
 80142d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80142dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80142de:	f000 f8dd 	bl	801449c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80142e2:	4b12      	ldr	r3, [pc, #72]	; (801432c <xPortStartScheduler+0x13c>)
 80142e4:	2200      	movs	r2, #0
 80142e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80142e8:	f000 f8fc 	bl	80144e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80142ec:	4b10      	ldr	r3, [pc, #64]	; (8014330 <xPortStartScheduler+0x140>)
 80142ee:	681b      	ldr	r3, [r3, #0]
 80142f0:	4a0f      	ldr	r2, [pc, #60]	; (8014330 <xPortStartScheduler+0x140>)
 80142f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80142f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80142f8:	f7ff ff66 	bl	80141c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80142fc:	f7fe ff4a 	bl	8013194 <vTaskSwitchContext>
	prvTaskExitError();
 8014300:	f7ff ff1e 	bl	8014140 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014304:	2300      	movs	r3, #0
}
 8014306:	4618      	mov	r0, r3
 8014308:	3718      	adds	r7, #24
 801430a:	46bd      	mov	sp, r7
 801430c:	bd80      	pop	{r7, pc}
 801430e:	bf00      	nop
 8014310:	e000ed00 	.word	0xe000ed00
 8014314:	410fc271 	.word	0x410fc271
 8014318:	410fc270 	.word	0x410fc270
 801431c:	e000e400 	.word	0xe000e400
 8014320:	2000152c 	.word	0x2000152c
 8014324:	20001530 	.word	0x20001530
 8014328:	e000ed20 	.word	0xe000ed20
 801432c:	20000084 	.word	0x20000084
 8014330:	e000ef34 	.word	0xe000ef34

08014334 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8014334:	b480      	push	{r7}
 8014336:	b083      	sub	sp, #12
 8014338:	af00      	add	r7, sp, #0
	__asm volatile
 801433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801433e:	f383 8811 	msr	BASEPRI, r3
 8014342:	f3bf 8f6f 	isb	sy
 8014346:	f3bf 8f4f 	dsb	sy
 801434a:	607b      	str	r3, [r7, #4]
}
 801434c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801434e:	4b0f      	ldr	r3, [pc, #60]	; (801438c <vPortEnterCritical+0x58>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	3301      	adds	r3, #1
 8014354:	4a0d      	ldr	r2, [pc, #52]	; (801438c <vPortEnterCritical+0x58>)
 8014356:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014358:	4b0c      	ldr	r3, [pc, #48]	; (801438c <vPortEnterCritical+0x58>)
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	2b01      	cmp	r3, #1
 801435e:	d10f      	bne.n	8014380 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014360:	4b0b      	ldr	r3, [pc, #44]	; (8014390 <vPortEnterCritical+0x5c>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	b2db      	uxtb	r3, r3
 8014366:	2b00      	cmp	r3, #0
 8014368:	d00a      	beq.n	8014380 <vPortEnterCritical+0x4c>
	__asm volatile
 801436a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801436e:	f383 8811 	msr	BASEPRI, r3
 8014372:	f3bf 8f6f 	isb	sy
 8014376:	f3bf 8f4f 	dsb	sy
 801437a:	603b      	str	r3, [r7, #0]
}
 801437c:	bf00      	nop
 801437e:	e7fe      	b.n	801437e <vPortEnterCritical+0x4a>
	}
}
 8014380:	bf00      	nop
 8014382:	370c      	adds	r7, #12
 8014384:	46bd      	mov	sp, r7
 8014386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801438a:	4770      	bx	lr
 801438c:	20000084 	.word	0x20000084
 8014390:	e000ed04 	.word	0xe000ed04

08014394 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014394:	b480      	push	{r7}
 8014396:	b083      	sub	sp, #12
 8014398:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801439a:	4b12      	ldr	r3, [pc, #72]	; (80143e4 <vPortExitCritical+0x50>)
 801439c:	681b      	ldr	r3, [r3, #0]
 801439e:	2b00      	cmp	r3, #0
 80143a0:	d10a      	bne.n	80143b8 <vPortExitCritical+0x24>
	__asm volatile
 80143a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143a6:	f383 8811 	msr	BASEPRI, r3
 80143aa:	f3bf 8f6f 	isb	sy
 80143ae:	f3bf 8f4f 	dsb	sy
 80143b2:	607b      	str	r3, [r7, #4]
}
 80143b4:	bf00      	nop
 80143b6:	e7fe      	b.n	80143b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80143b8:	4b0a      	ldr	r3, [pc, #40]	; (80143e4 <vPortExitCritical+0x50>)
 80143ba:	681b      	ldr	r3, [r3, #0]
 80143bc:	3b01      	subs	r3, #1
 80143be:	4a09      	ldr	r2, [pc, #36]	; (80143e4 <vPortExitCritical+0x50>)
 80143c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80143c2:	4b08      	ldr	r3, [pc, #32]	; (80143e4 <vPortExitCritical+0x50>)
 80143c4:	681b      	ldr	r3, [r3, #0]
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d105      	bne.n	80143d6 <vPortExitCritical+0x42>
 80143ca:	2300      	movs	r3, #0
 80143cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	f383 8811 	msr	BASEPRI, r3
}
 80143d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80143d6:	bf00      	nop
 80143d8:	370c      	adds	r7, #12
 80143da:	46bd      	mov	sp, r7
 80143dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143e0:	4770      	bx	lr
 80143e2:	bf00      	nop
 80143e4:	20000084 	.word	0x20000084
	...

080143f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80143f0:	f3ef 8009 	mrs	r0, PSP
 80143f4:	f3bf 8f6f 	isb	sy
 80143f8:	4b15      	ldr	r3, [pc, #84]	; (8014450 <pxCurrentTCBConst>)
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	f01e 0f10 	tst.w	lr, #16
 8014400:	bf08      	it	eq
 8014402:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014406:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801440a:	6010      	str	r0, [r2, #0]
 801440c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014410:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014414:	f380 8811 	msr	BASEPRI, r0
 8014418:	f3bf 8f4f 	dsb	sy
 801441c:	f3bf 8f6f 	isb	sy
 8014420:	f7fe feb8 	bl	8013194 <vTaskSwitchContext>
 8014424:	f04f 0000 	mov.w	r0, #0
 8014428:	f380 8811 	msr	BASEPRI, r0
 801442c:	bc09      	pop	{r0, r3}
 801442e:	6819      	ldr	r1, [r3, #0]
 8014430:	6808      	ldr	r0, [r1, #0]
 8014432:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014436:	f01e 0f10 	tst.w	lr, #16
 801443a:	bf08      	it	eq
 801443c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014440:	f380 8809 	msr	PSP, r0
 8014444:	f3bf 8f6f 	isb	sy
 8014448:	4770      	bx	lr
 801444a:	bf00      	nop
 801444c:	f3af 8000 	nop.w

08014450 <pxCurrentTCBConst>:
 8014450:	20000f00 	.word	0x20000f00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014454:	bf00      	nop
 8014456:	bf00      	nop

08014458 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014458:	b580      	push	{r7, lr}
 801445a:	b082      	sub	sp, #8
 801445c:	af00      	add	r7, sp, #0
	__asm volatile
 801445e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014462:	f383 8811 	msr	BASEPRI, r3
 8014466:	f3bf 8f6f 	isb	sy
 801446a:	f3bf 8f4f 	dsb	sy
 801446e:	607b      	str	r3, [r7, #4]
}
 8014470:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014472:	f7fe fdd5 	bl	8013020 <xTaskIncrementTick>
 8014476:	4603      	mov	r3, r0
 8014478:	2b00      	cmp	r3, #0
 801447a:	d003      	beq.n	8014484 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801447c:	4b06      	ldr	r3, [pc, #24]	; (8014498 <SysTick_Handler+0x40>)
 801447e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014482:	601a      	str	r2, [r3, #0]
 8014484:	2300      	movs	r3, #0
 8014486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014488:	683b      	ldr	r3, [r7, #0]
 801448a:	f383 8811 	msr	BASEPRI, r3
}
 801448e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014490:	bf00      	nop
 8014492:	3708      	adds	r7, #8
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}
 8014498:	e000ed04 	.word	0xe000ed04

0801449c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801449c:	b480      	push	{r7}
 801449e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80144a0:	4b0b      	ldr	r3, [pc, #44]	; (80144d0 <vPortSetupTimerInterrupt+0x34>)
 80144a2:	2200      	movs	r2, #0
 80144a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80144a6:	4b0b      	ldr	r3, [pc, #44]	; (80144d4 <vPortSetupTimerInterrupt+0x38>)
 80144a8:	2200      	movs	r2, #0
 80144aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80144ac:	4b0a      	ldr	r3, [pc, #40]	; (80144d8 <vPortSetupTimerInterrupt+0x3c>)
 80144ae:	681b      	ldr	r3, [r3, #0]
 80144b0:	4a0a      	ldr	r2, [pc, #40]	; (80144dc <vPortSetupTimerInterrupt+0x40>)
 80144b2:	fba2 2303 	umull	r2, r3, r2, r3
 80144b6:	099b      	lsrs	r3, r3, #6
 80144b8:	4a09      	ldr	r2, [pc, #36]	; (80144e0 <vPortSetupTimerInterrupt+0x44>)
 80144ba:	3b01      	subs	r3, #1
 80144bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80144be:	4b04      	ldr	r3, [pc, #16]	; (80144d0 <vPortSetupTimerInterrupt+0x34>)
 80144c0:	2207      	movs	r2, #7
 80144c2:	601a      	str	r2, [r3, #0]
}
 80144c4:	bf00      	nop
 80144c6:	46bd      	mov	sp, r7
 80144c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144cc:	4770      	bx	lr
 80144ce:	bf00      	nop
 80144d0:	e000e010 	.word	0xe000e010
 80144d4:	e000e018 	.word	0xe000e018
 80144d8:	20000000 	.word	0x20000000
 80144dc:	10624dd3 	.word	0x10624dd3
 80144e0:	e000e014 	.word	0xe000e014

080144e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80144e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80144f4 <vPortEnableVFP+0x10>
 80144e8:	6801      	ldr	r1, [r0, #0]
 80144ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80144ee:	6001      	str	r1, [r0, #0]
 80144f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80144f2:	bf00      	nop
 80144f4:	e000ed88 	.word	0xe000ed88

080144f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80144f8:	b480      	push	{r7}
 80144fa:	b085      	sub	sp, #20
 80144fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80144fe:	f3ef 8305 	mrs	r3, IPSR
 8014502:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	2b0f      	cmp	r3, #15
 8014508:	d914      	bls.n	8014534 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801450a:	4a17      	ldr	r2, [pc, #92]	; (8014568 <vPortValidateInterruptPriority+0x70>)
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	4413      	add	r3, r2
 8014510:	781b      	ldrb	r3, [r3, #0]
 8014512:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014514:	4b15      	ldr	r3, [pc, #84]	; (801456c <vPortValidateInterruptPriority+0x74>)
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	7afa      	ldrb	r2, [r7, #11]
 801451a:	429a      	cmp	r2, r3
 801451c:	d20a      	bcs.n	8014534 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014522:	f383 8811 	msr	BASEPRI, r3
 8014526:	f3bf 8f6f 	isb	sy
 801452a:	f3bf 8f4f 	dsb	sy
 801452e:	607b      	str	r3, [r7, #4]
}
 8014530:	bf00      	nop
 8014532:	e7fe      	b.n	8014532 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014534:	4b0e      	ldr	r3, [pc, #56]	; (8014570 <vPortValidateInterruptPriority+0x78>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801453c:	4b0d      	ldr	r3, [pc, #52]	; (8014574 <vPortValidateInterruptPriority+0x7c>)
 801453e:	681b      	ldr	r3, [r3, #0]
 8014540:	429a      	cmp	r2, r3
 8014542:	d90a      	bls.n	801455a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8014544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014548:	f383 8811 	msr	BASEPRI, r3
 801454c:	f3bf 8f6f 	isb	sy
 8014550:	f3bf 8f4f 	dsb	sy
 8014554:	603b      	str	r3, [r7, #0]
}
 8014556:	bf00      	nop
 8014558:	e7fe      	b.n	8014558 <vPortValidateInterruptPriority+0x60>
	}
 801455a:	bf00      	nop
 801455c:	3714      	adds	r7, #20
 801455e:	46bd      	mov	sp, r7
 8014560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014564:	4770      	bx	lr
 8014566:	bf00      	nop
 8014568:	e000e3f0 	.word	0xe000e3f0
 801456c:	2000152c 	.word	0x2000152c
 8014570:	e000ed0c 	.word	0xe000ed0c
 8014574:	20001530 	.word	0x20001530

08014578 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b08a      	sub	sp, #40	; 0x28
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014580:	2300      	movs	r3, #0
 8014582:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014584:	f7fe fc7e 	bl	8012e84 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014588:	4b58      	ldr	r3, [pc, #352]	; (80146ec <pvPortMalloc+0x174>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d101      	bne.n	8014594 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014590:	f000 f910 	bl	80147b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014594:	4b56      	ldr	r3, [pc, #344]	; (80146f0 <pvPortMalloc+0x178>)
 8014596:	681a      	ldr	r2, [r3, #0]
 8014598:	687b      	ldr	r3, [r7, #4]
 801459a:	4013      	ands	r3, r2
 801459c:	2b00      	cmp	r3, #0
 801459e:	f040 808e 	bne.w	80146be <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80145a2:	687b      	ldr	r3, [r7, #4]
 80145a4:	2b00      	cmp	r3, #0
 80145a6:	d01d      	beq.n	80145e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80145a8:	2208      	movs	r2, #8
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	4413      	add	r3, r2
 80145ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f003 0307 	and.w	r3, r3, #7
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d014      	beq.n	80145e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80145ba:	687b      	ldr	r3, [r7, #4]
 80145bc:	f023 0307 	bic.w	r3, r3, #7
 80145c0:	3308      	adds	r3, #8
 80145c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80145c4:	687b      	ldr	r3, [r7, #4]
 80145c6:	f003 0307 	and.w	r3, r3, #7
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d00a      	beq.n	80145e4 <pvPortMalloc+0x6c>
	__asm volatile
 80145ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145d2:	f383 8811 	msr	BASEPRI, r3
 80145d6:	f3bf 8f6f 	isb	sy
 80145da:	f3bf 8f4f 	dsb	sy
 80145de:	617b      	str	r3, [r7, #20]
}
 80145e0:	bf00      	nop
 80145e2:	e7fe      	b.n	80145e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	d069      	beq.n	80146be <pvPortMalloc+0x146>
 80145ea:	4b42      	ldr	r3, [pc, #264]	; (80146f4 <pvPortMalloc+0x17c>)
 80145ec:	681b      	ldr	r3, [r3, #0]
 80145ee:	687a      	ldr	r2, [r7, #4]
 80145f0:	429a      	cmp	r2, r3
 80145f2:	d864      	bhi.n	80146be <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80145f4:	4b40      	ldr	r3, [pc, #256]	; (80146f8 <pvPortMalloc+0x180>)
 80145f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80145f8:	4b3f      	ldr	r3, [pc, #252]	; (80146f8 <pvPortMalloc+0x180>)
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80145fe:	e004      	b.n	801460a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8014600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014602:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801460c:	685b      	ldr	r3, [r3, #4]
 801460e:	687a      	ldr	r2, [r7, #4]
 8014610:	429a      	cmp	r2, r3
 8014612:	d903      	bls.n	801461c <pvPortMalloc+0xa4>
 8014614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d1f1      	bne.n	8014600 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801461c:	4b33      	ldr	r3, [pc, #204]	; (80146ec <pvPortMalloc+0x174>)
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014622:	429a      	cmp	r2, r3
 8014624:	d04b      	beq.n	80146be <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014626:	6a3b      	ldr	r3, [r7, #32]
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2208      	movs	r2, #8
 801462c:	4413      	add	r3, r2
 801462e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014632:	681a      	ldr	r2, [r3, #0]
 8014634:	6a3b      	ldr	r3, [r7, #32]
 8014636:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463a:	685a      	ldr	r2, [r3, #4]
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	1ad2      	subs	r2, r2, r3
 8014640:	2308      	movs	r3, #8
 8014642:	005b      	lsls	r3, r3, #1
 8014644:	429a      	cmp	r2, r3
 8014646:	d91f      	bls.n	8014688 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	4413      	add	r3, r2
 801464e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014650:	69bb      	ldr	r3, [r7, #24]
 8014652:	f003 0307 	and.w	r3, r3, #7
 8014656:	2b00      	cmp	r3, #0
 8014658:	d00a      	beq.n	8014670 <pvPortMalloc+0xf8>
	__asm volatile
 801465a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801465e:	f383 8811 	msr	BASEPRI, r3
 8014662:	f3bf 8f6f 	isb	sy
 8014666:	f3bf 8f4f 	dsb	sy
 801466a:	613b      	str	r3, [r7, #16]
}
 801466c:	bf00      	nop
 801466e:	e7fe      	b.n	801466e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014672:	685a      	ldr	r2, [r3, #4]
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	1ad2      	subs	r2, r2, r3
 8014678:	69bb      	ldr	r3, [r7, #24]
 801467a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801467c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801467e:	687a      	ldr	r2, [r7, #4]
 8014680:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014682:	69b8      	ldr	r0, [r7, #24]
 8014684:	f000 f8f8 	bl	8014878 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014688:	4b1a      	ldr	r3, [pc, #104]	; (80146f4 <pvPortMalloc+0x17c>)
 801468a:	681a      	ldr	r2, [r3, #0]
 801468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801468e:	685b      	ldr	r3, [r3, #4]
 8014690:	1ad3      	subs	r3, r2, r3
 8014692:	4a18      	ldr	r2, [pc, #96]	; (80146f4 <pvPortMalloc+0x17c>)
 8014694:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014696:	4b17      	ldr	r3, [pc, #92]	; (80146f4 <pvPortMalloc+0x17c>)
 8014698:	681a      	ldr	r2, [r3, #0]
 801469a:	4b18      	ldr	r3, [pc, #96]	; (80146fc <pvPortMalloc+0x184>)
 801469c:	681b      	ldr	r3, [r3, #0]
 801469e:	429a      	cmp	r2, r3
 80146a0:	d203      	bcs.n	80146aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80146a2:	4b14      	ldr	r3, [pc, #80]	; (80146f4 <pvPortMalloc+0x17c>)
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	4a15      	ldr	r2, [pc, #84]	; (80146fc <pvPortMalloc+0x184>)
 80146a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80146aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ac:	685a      	ldr	r2, [r3, #4]
 80146ae:	4b10      	ldr	r3, [pc, #64]	; (80146f0 <pvPortMalloc+0x178>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	431a      	orrs	r2, r3
 80146b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80146b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ba:	2200      	movs	r2, #0
 80146bc:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80146be:	f7fe fbef 	bl	8012ea0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80146c2:	69fb      	ldr	r3, [r7, #28]
 80146c4:	f003 0307 	and.w	r3, r3, #7
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d00a      	beq.n	80146e2 <pvPortMalloc+0x16a>
	__asm volatile
 80146cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d0:	f383 8811 	msr	BASEPRI, r3
 80146d4:	f3bf 8f6f 	isb	sy
 80146d8:	f3bf 8f4f 	dsb	sy
 80146dc:	60fb      	str	r3, [r7, #12]
}
 80146de:	bf00      	nop
 80146e0:	e7fe      	b.n	80146e0 <pvPortMalloc+0x168>
	return pvReturn;
 80146e2:	69fb      	ldr	r3, [r7, #28]
}
 80146e4:	4618      	mov	r0, r3
 80146e6:	3728      	adds	r7, #40	; 0x28
 80146e8:	46bd      	mov	sp, r7
 80146ea:	bd80      	pop	{r7, pc}
 80146ec:	2000513c 	.word	0x2000513c
 80146f0:	20005148 	.word	0x20005148
 80146f4:	20005140 	.word	0x20005140
 80146f8:	20005134 	.word	0x20005134
 80146fc:	20005144 	.word	0x20005144

08014700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014700:	b580      	push	{r7, lr}
 8014702:	b086      	sub	sp, #24
 8014704:	af00      	add	r7, sp, #0
 8014706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	2b00      	cmp	r3, #0
 8014710:	d048      	beq.n	80147a4 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014712:	2308      	movs	r3, #8
 8014714:	425b      	negs	r3, r3
 8014716:	697a      	ldr	r2, [r7, #20]
 8014718:	4413      	add	r3, r2
 801471a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801471c:	697b      	ldr	r3, [r7, #20]
 801471e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	685a      	ldr	r2, [r3, #4]
 8014724:	4b21      	ldr	r3, [pc, #132]	; (80147ac <vPortFree+0xac>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	4013      	ands	r3, r2
 801472a:	2b00      	cmp	r3, #0
 801472c:	d10a      	bne.n	8014744 <vPortFree+0x44>
	__asm volatile
 801472e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014732:	f383 8811 	msr	BASEPRI, r3
 8014736:	f3bf 8f6f 	isb	sy
 801473a:	f3bf 8f4f 	dsb	sy
 801473e:	60fb      	str	r3, [r7, #12]
}
 8014740:	bf00      	nop
 8014742:	e7fe      	b.n	8014742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014744:	693b      	ldr	r3, [r7, #16]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d00a      	beq.n	8014762 <vPortFree+0x62>
	__asm volatile
 801474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014750:	f383 8811 	msr	BASEPRI, r3
 8014754:	f3bf 8f6f 	isb	sy
 8014758:	f3bf 8f4f 	dsb	sy
 801475c:	60bb      	str	r3, [r7, #8]
}
 801475e:	bf00      	nop
 8014760:	e7fe      	b.n	8014760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014762:	693b      	ldr	r3, [r7, #16]
 8014764:	685a      	ldr	r2, [r3, #4]
 8014766:	4b11      	ldr	r3, [pc, #68]	; (80147ac <vPortFree+0xac>)
 8014768:	681b      	ldr	r3, [r3, #0]
 801476a:	4013      	ands	r3, r2
 801476c:	2b00      	cmp	r3, #0
 801476e:	d019      	beq.n	80147a4 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014770:	693b      	ldr	r3, [r7, #16]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	2b00      	cmp	r3, #0
 8014776:	d115      	bne.n	80147a4 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014778:	693b      	ldr	r3, [r7, #16]
 801477a:	685a      	ldr	r2, [r3, #4]
 801477c:	4b0b      	ldr	r3, [pc, #44]	; (80147ac <vPortFree+0xac>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	43db      	mvns	r3, r3
 8014782:	401a      	ands	r2, r3
 8014784:	693b      	ldr	r3, [r7, #16]
 8014786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014788:	f7fe fb7c 	bl	8012e84 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801478c:	693b      	ldr	r3, [r7, #16]
 801478e:	685a      	ldr	r2, [r3, #4]
 8014790:	4b07      	ldr	r3, [pc, #28]	; (80147b0 <vPortFree+0xb0>)
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	4413      	add	r3, r2
 8014796:	4a06      	ldr	r2, [pc, #24]	; (80147b0 <vPortFree+0xb0>)
 8014798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801479a:	6938      	ldr	r0, [r7, #16]
 801479c:	f000 f86c 	bl	8014878 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80147a0:	f7fe fb7e 	bl	8012ea0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80147a4:	bf00      	nop
 80147a6:	3718      	adds	r7, #24
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	20005148 	.word	0x20005148
 80147b0:	20005140 	.word	0x20005140

080147b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80147b4:	b480      	push	{r7}
 80147b6:	b085      	sub	sp, #20
 80147b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80147ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80147be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80147c0:	4b27      	ldr	r3, [pc, #156]	; (8014860 <prvHeapInit+0xac>)
 80147c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80147c4:	68fb      	ldr	r3, [r7, #12]
 80147c6:	f003 0307 	and.w	r3, r3, #7
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d00c      	beq.n	80147e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	3307      	adds	r3, #7
 80147d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	f023 0307 	bic.w	r3, r3, #7
 80147da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80147dc:	68ba      	ldr	r2, [r7, #8]
 80147de:	68fb      	ldr	r3, [r7, #12]
 80147e0:	1ad3      	subs	r3, r2, r3
 80147e2:	4a1f      	ldr	r2, [pc, #124]	; (8014860 <prvHeapInit+0xac>)
 80147e4:	4413      	add	r3, r2
 80147e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80147e8:	68fb      	ldr	r3, [r7, #12]
 80147ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80147ec:	4a1d      	ldr	r2, [pc, #116]	; (8014864 <prvHeapInit+0xb0>)
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80147f2:	4b1c      	ldr	r3, [pc, #112]	; (8014864 <prvHeapInit+0xb0>)
 80147f4:	2200      	movs	r2, #0
 80147f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	68ba      	ldr	r2, [r7, #8]
 80147fc:	4413      	add	r3, r2
 80147fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014800:	2208      	movs	r2, #8
 8014802:	68fb      	ldr	r3, [r7, #12]
 8014804:	1a9b      	subs	r3, r3, r2
 8014806:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014808:	68fb      	ldr	r3, [r7, #12]
 801480a:	f023 0307 	bic.w	r3, r3, #7
 801480e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014810:	68fb      	ldr	r3, [r7, #12]
 8014812:	4a15      	ldr	r2, [pc, #84]	; (8014868 <prvHeapInit+0xb4>)
 8014814:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014816:	4b14      	ldr	r3, [pc, #80]	; (8014868 <prvHeapInit+0xb4>)
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	2200      	movs	r2, #0
 801481c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801481e:	4b12      	ldr	r3, [pc, #72]	; (8014868 <prvHeapInit+0xb4>)
 8014820:	681b      	ldr	r3, [r3, #0]
 8014822:	2200      	movs	r2, #0
 8014824:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801482a:	683b      	ldr	r3, [r7, #0]
 801482c:	68fa      	ldr	r2, [r7, #12]
 801482e:	1ad2      	subs	r2, r2, r3
 8014830:	683b      	ldr	r3, [r7, #0]
 8014832:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014834:	4b0c      	ldr	r3, [pc, #48]	; (8014868 <prvHeapInit+0xb4>)
 8014836:	681a      	ldr	r2, [r3, #0]
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801483c:	683b      	ldr	r3, [r7, #0]
 801483e:	685b      	ldr	r3, [r3, #4]
 8014840:	4a0a      	ldr	r2, [pc, #40]	; (801486c <prvHeapInit+0xb8>)
 8014842:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	685b      	ldr	r3, [r3, #4]
 8014848:	4a09      	ldr	r2, [pc, #36]	; (8014870 <prvHeapInit+0xbc>)
 801484a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801484c:	4b09      	ldr	r3, [pc, #36]	; (8014874 <prvHeapInit+0xc0>)
 801484e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014852:	601a      	str	r2, [r3, #0]
}
 8014854:	bf00      	nop
 8014856:	3714      	adds	r7, #20
 8014858:	46bd      	mov	sp, r7
 801485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485e:	4770      	bx	lr
 8014860:	20001534 	.word	0x20001534
 8014864:	20005134 	.word	0x20005134
 8014868:	2000513c 	.word	0x2000513c
 801486c:	20005144 	.word	0x20005144
 8014870:	20005140 	.word	0x20005140
 8014874:	20005148 	.word	0x20005148

08014878 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014878:	b480      	push	{r7}
 801487a:	b085      	sub	sp, #20
 801487c:	af00      	add	r7, sp, #0
 801487e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014880:	4b28      	ldr	r3, [pc, #160]	; (8014924 <prvInsertBlockIntoFreeList+0xac>)
 8014882:	60fb      	str	r3, [r7, #12]
 8014884:	e002      	b.n	801488c <prvInsertBlockIntoFreeList+0x14>
 8014886:	68fb      	ldr	r3, [r7, #12]
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	60fb      	str	r3, [r7, #12]
 801488c:	68fb      	ldr	r3, [r7, #12]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	687a      	ldr	r2, [r7, #4]
 8014892:	429a      	cmp	r2, r3
 8014894:	d8f7      	bhi.n	8014886 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	685b      	ldr	r3, [r3, #4]
 801489e:	68ba      	ldr	r2, [r7, #8]
 80148a0:	4413      	add	r3, r2
 80148a2:	687a      	ldr	r2, [r7, #4]
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d108      	bne.n	80148ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	685a      	ldr	r2, [r3, #4]
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	685b      	ldr	r3, [r3, #4]
 80148b0:	441a      	add	r2, r3
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	685b      	ldr	r3, [r3, #4]
 80148c2:	68ba      	ldr	r2, [r7, #8]
 80148c4:	441a      	add	r2, r3
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	d118      	bne.n	8014900 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	681a      	ldr	r2, [r3, #0]
 80148d2:	4b15      	ldr	r3, [pc, #84]	; (8014928 <prvInsertBlockIntoFreeList+0xb0>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d00d      	beq.n	80148f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	685a      	ldr	r2, [r3, #4]
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	685b      	ldr	r3, [r3, #4]
 80148e4:	441a      	add	r2, r3
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	681a      	ldr	r2, [r3, #0]
 80148f0:	687b      	ldr	r3, [r7, #4]
 80148f2:	601a      	str	r2, [r3, #0]
 80148f4:	e008      	b.n	8014908 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80148f6:	4b0c      	ldr	r3, [pc, #48]	; (8014928 <prvInsertBlockIntoFreeList+0xb0>)
 80148f8:	681a      	ldr	r2, [r3, #0]
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	601a      	str	r2, [r3, #0]
 80148fe:	e003      	b.n	8014908 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	681a      	ldr	r2, [r3, #0]
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014908:	68fa      	ldr	r2, [r7, #12]
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	429a      	cmp	r2, r3
 801490e:	d002      	beq.n	8014916 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014910:	68fb      	ldr	r3, [r7, #12]
 8014912:	687a      	ldr	r2, [r7, #4]
 8014914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014916:	bf00      	nop
 8014918:	3714      	adds	r7, #20
 801491a:	46bd      	mov	sp, r7
 801491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014920:	4770      	bx	lr
 8014922:	bf00      	nop
 8014924:	20005134 	.word	0x20005134
 8014928:	2000513c 	.word	0x2000513c

0801492c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801492c:	b580      	push	{r7, lr}
 801492e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8014930:	2201      	movs	r2, #1
 8014932:	490e      	ldr	r1, [pc, #56]	; (801496c <MX_USB_HOST_Init+0x40>)
 8014934:	480e      	ldr	r0, [pc, #56]	; (8014970 <MX_USB_HOST_Init+0x44>)
 8014936:	f7f8 fb1f 	bl	800cf78 <USBH_Init>
 801493a:	4603      	mov	r3, r0
 801493c:	2b00      	cmp	r3, #0
 801493e:	d001      	beq.n	8014944 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8014940:	f7ec fc7a 	bl	8001238 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8014944:	490b      	ldr	r1, [pc, #44]	; (8014974 <MX_USB_HOST_Init+0x48>)
 8014946:	480a      	ldr	r0, [pc, #40]	; (8014970 <MX_USB_HOST_Init+0x44>)
 8014948:	f7f8 fbc6 	bl	800d0d8 <USBH_RegisterClass>
 801494c:	4603      	mov	r3, r0
 801494e:	2b00      	cmp	r3, #0
 8014950:	d001      	beq.n	8014956 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8014952:	f7ec fc71 	bl	8001238 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8014956:	4806      	ldr	r0, [pc, #24]	; (8014970 <MX_USB_HOST_Init+0x44>)
 8014958:	f7f8 fc4a 	bl	800d1f0 <USBH_Start>
 801495c:	4603      	mov	r3, r0
 801495e:	2b00      	cmp	r3, #0
 8014960:	d001      	beq.n	8014966 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8014962:	f7ec fc69 	bl	8001238 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8014966:	bf00      	nop
 8014968:	bd80      	pop	{r7, pc}
 801496a:	bf00      	nop
 801496c:	08014979 	.word	0x08014979
 8014970:	2000514c 	.word	0x2000514c
 8014974:	20000064 	.word	0x20000064

08014978 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8014978:	b480      	push	{r7}
 801497a:	b083      	sub	sp, #12
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]
 8014980:	460b      	mov	r3, r1
 8014982:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8014984:	78fb      	ldrb	r3, [r7, #3]
 8014986:	3b01      	subs	r3, #1
 8014988:	2b04      	cmp	r3, #4
 801498a:	d819      	bhi.n	80149c0 <USBH_UserProcess+0x48>
 801498c:	a201      	add	r2, pc, #4	; (adr r2, 8014994 <USBH_UserProcess+0x1c>)
 801498e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014992:	bf00      	nop
 8014994:	080149c1 	.word	0x080149c1
 8014998:	080149b1 	.word	0x080149b1
 801499c:	080149c1 	.word	0x080149c1
 80149a0:	080149b9 	.word	0x080149b9
 80149a4:	080149a9 	.word	0x080149a9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80149a8:	4b09      	ldr	r3, [pc, #36]	; (80149d0 <USBH_UserProcess+0x58>)
 80149aa:	2203      	movs	r2, #3
 80149ac:	701a      	strb	r2, [r3, #0]
  break;
 80149ae:	e008      	b.n	80149c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80149b0:	4b07      	ldr	r3, [pc, #28]	; (80149d0 <USBH_UserProcess+0x58>)
 80149b2:	2202      	movs	r2, #2
 80149b4:	701a      	strb	r2, [r3, #0]
  break;
 80149b6:	e004      	b.n	80149c2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80149b8:	4b05      	ldr	r3, [pc, #20]	; (80149d0 <USBH_UserProcess+0x58>)
 80149ba:	2201      	movs	r2, #1
 80149bc:	701a      	strb	r2, [r3, #0]
  break;
 80149be:	e000      	b.n	80149c2 <USBH_UserProcess+0x4a>

  default:
  break;
 80149c0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80149c2:	bf00      	nop
 80149c4:	370c      	adds	r7, #12
 80149c6:	46bd      	mov	sp, r7
 80149c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149cc:	4770      	bx	lr
 80149ce:	bf00      	nop
 80149d0:	20005530 	.word	0x20005530

080149d4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b08a      	sub	sp, #40	; 0x28
 80149d8:	af00      	add	r7, sp, #0
 80149da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80149dc:	f107 0314 	add.w	r3, r7, #20
 80149e0:	2200      	movs	r2, #0
 80149e2:	601a      	str	r2, [r3, #0]
 80149e4:	605a      	str	r2, [r3, #4]
 80149e6:	609a      	str	r2, [r3, #8]
 80149e8:	60da      	str	r2, [r3, #12]
 80149ea:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80149ec:	687b      	ldr	r3, [r7, #4]
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80149f4:	d147      	bne.n	8014a86 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80149f6:	2300      	movs	r3, #0
 80149f8:	613b      	str	r3, [r7, #16]
 80149fa:	4b25      	ldr	r3, [pc, #148]	; (8014a90 <HAL_HCD_MspInit+0xbc>)
 80149fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80149fe:	4a24      	ldr	r2, [pc, #144]	; (8014a90 <HAL_HCD_MspInit+0xbc>)
 8014a00:	f043 0301 	orr.w	r3, r3, #1
 8014a04:	6313      	str	r3, [r2, #48]	; 0x30
 8014a06:	4b22      	ldr	r3, [pc, #136]	; (8014a90 <HAL_HCD_MspInit+0xbc>)
 8014a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a0a:	f003 0301 	and.w	r3, r3, #1
 8014a0e:	613b      	str	r3, [r7, #16]
 8014a10:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8014a12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014a16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014a18:	2300      	movs	r3, #0
 8014a1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8014a20:	f107 0314 	add.w	r3, r7, #20
 8014a24:	4619      	mov	r1, r3
 8014a26:	481b      	ldr	r0, [pc, #108]	; (8014a94 <HAL_HCD_MspInit+0xc0>)
 8014a28:	f7ef ff18 	bl	800485c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8014a2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014a30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014a32:	2302      	movs	r3, #2
 8014a34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014a36:	2300      	movs	r3, #0
 8014a38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014a3a:	2303      	movs	r3, #3
 8014a3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014a3e:	230a      	movs	r3, #10
 8014a40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014a42:	f107 0314 	add.w	r3, r7, #20
 8014a46:	4619      	mov	r1, r3
 8014a48:	4812      	ldr	r0, [pc, #72]	; (8014a94 <HAL_HCD_MspInit+0xc0>)
 8014a4a:	f7ef ff07 	bl	800485c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014a4e:	4b10      	ldr	r3, [pc, #64]	; (8014a90 <HAL_HCD_MspInit+0xbc>)
 8014a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a52:	4a0f      	ldr	r2, [pc, #60]	; (8014a90 <HAL_HCD_MspInit+0xbc>)
 8014a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a58:	6353      	str	r3, [r2, #52]	; 0x34
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	60fb      	str	r3, [r7, #12]
 8014a5e:	4b0c      	ldr	r3, [pc, #48]	; (8014a90 <HAL_HCD_MspInit+0xbc>)
 8014a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a62:	4a0b      	ldr	r2, [pc, #44]	; (8014a90 <HAL_HCD_MspInit+0xbc>)
 8014a64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014a68:	6453      	str	r3, [r2, #68]	; 0x44
 8014a6a:	4b09      	ldr	r3, [pc, #36]	; (8014a90 <HAL_HCD_MspInit+0xbc>)
 8014a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014a72:	60fb      	str	r3, [r7, #12]
 8014a74:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8014a76:	2200      	movs	r2, #0
 8014a78:	2100      	movs	r1, #0
 8014a7a:	2043      	movs	r0, #67	; 0x43
 8014a7c:	f7ef f956 	bl	8003d2c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014a80:	2043      	movs	r0, #67	; 0x43
 8014a82:	f7ef f96f 	bl	8003d64 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014a86:	bf00      	nop
 8014a88:	3728      	adds	r7, #40	; 0x28
 8014a8a:	46bd      	mov	sp, r7
 8014a8c:	bd80      	pop	{r7, pc}
 8014a8e:	bf00      	nop
 8014a90:	40023800 	.word	0x40023800
 8014a94:	40020000 	.word	0x40020000

08014a98 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8014a98:	b580      	push	{r7, lr}
 8014a9a:	b082      	sub	sp, #8
 8014a9c:	af00      	add	r7, sp, #0
 8014a9e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014aa6:	4618      	mov	r0, r3
 8014aa8:	f7f9 f84f 	bl	800db4a <USBH_LL_IncTimer>
}
 8014aac:	bf00      	nop
 8014aae:	3708      	adds	r7, #8
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}

08014ab4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014ab4:	b580      	push	{r7, lr}
 8014ab6:	b082      	sub	sp, #8
 8014ab8:	af00      	add	r7, sp, #0
 8014aba:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ac2:	4618      	mov	r0, r3
 8014ac4:	f7f9 f893 	bl	800dbee <USBH_LL_Connect>
}
 8014ac8:	bf00      	nop
 8014aca:	3708      	adds	r7, #8
 8014acc:	46bd      	mov	sp, r7
 8014ace:	bd80      	pop	{r7, pc}

08014ad0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b082      	sub	sp, #8
 8014ad4:	af00      	add	r7, sp, #0
 8014ad6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014ade:	4618      	mov	r0, r3
 8014ae0:	f7f9 f8a8 	bl	800dc34 <USBH_LL_Disconnect>
}
 8014ae4:	bf00      	nop
 8014ae6:	3708      	adds	r7, #8
 8014ae8:	46bd      	mov	sp, r7
 8014aea:	bd80      	pop	{r7, pc}

08014aec <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8014aec:	b580      	push	{r7, lr}
 8014aee:	b082      	sub	sp, #8
 8014af0:	af00      	add	r7, sp, #0
 8014af2:	6078      	str	r0, [r7, #4]
 8014af4:	460b      	mov	r3, r1
 8014af6:	70fb      	strb	r3, [r7, #3]
 8014af8:	4613      	mov	r3, r2
 8014afa:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b02:	4618      	mov	r0, r3
 8014b04:	f7f9 f8df 	bl	800dcc6 <USBH_LL_NotifyURBChange>
#endif
}
 8014b08:	bf00      	nop
 8014b0a:	3708      	adds	r7, #8
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b082      	sub	sp, #8
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b1e:	4618      	mov	r0, r3
 8014b20:	f7f9 f83d 	bl	800db9e <USBH_LL_PortEnabled>
}
 8014b24:	bf00      	nop
 8014b26:	3708      	adds	r7, #8
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8014b34:	687b      	ldr	r3, [r7, #4]
 8014b36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7f9 f849 	bl	800dbd2 <USBH_LL_PortDisabled>
}
 8014b40:	bf00      	nop
 8014b42:	3708      	adds	r7, #8
 8014b44:	46bd      	mov	sp, r7
 8014b46:	bd80      	pop	{r7, pc}

08014b48 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8014b48:	b580      	push	{r7, lr}
 8014b4a:	b082      	sub	sp, #8
 8014b4c:	af00      	add	r7, sp, #0
 8014b4e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014b56:	2b01      	cmp	r3, #1
 8014b58:	d12a      	bne.n	8014bb0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8014b5a:	4a18      	ldr	r2, [pc, #96]	; (8014bbc <USBH_LL_Init+0x74>)
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	4a15      	ldr	r2, [pc, #84]	; (8014bbc <USBH_LL_Init+0x74>)
 8014b66:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8014b6a:	4b14      	ldr	r3, [pc, #80]	; (8014bbc <USBH_LL_Init+0x74>)
 8014b6c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8014b70:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8014b72:	4b12      	ldr	r3, [pc, #72]	; (8014bbc <USBH_LL_Init+0x74>)
 8014b74:	220c      	movs	r2, #12
 8014b76:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8014b78:	4b10      	ldr	r3, [pc, #64]	; (8014bbc <USBH_LL_Init+0x74>)
 8014b7a:	2201      	movs	r2, #1
 8014b7c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8014b7e:	4b0f      	ldr	r3, [pc, #60]	; (8014bbc <USBH_LL_Init+0x74>)
 8014b80:	2200      	movs	r2, #0
 8014b82:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8014b84:	4b0d      	ldr	r3, [pc, #52]	; (8014bbc <USBH_LL_Init+0x74>)
 8014b86:	2202      	movs	r2, #2
 8014b88:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8014b8a:	4b0c      	ldr	r3, [pc, #48]	; (8014bbc <USBH_LL_Init+0x74>)
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8014b90:	480a      	ldr	r0, [pc, #40]	; (8014bbc <USBH_LL_Init+0x74>)
 8014b92:	f7f0 f843 	bl	8004c1c <HAL_HCD_Init>
 8014b96:	4603      	mov	r3, r0
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d001      	beq.n	8014ba0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8014b9c:	f7ec fb4c 	bl	8001238 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8014ba0:	4806      	ldr	r0, [pc, #24]	; (8014bbc <USBH_LL_Init+0x74>)
 8014ba2:	f7f0 fc47 	bl	8005434 <HAL_HCD_GetCurrentFrame>
 8014ba6:	4603      	mov	r3, r0
 8014ba8:	4619      	mov	r1, r3
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f7f8 ffbe 	bl	800db2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8014bb0:	2300      	movs	r3, #0
}
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	3708      	adds	r7, #8
 8014bb6:	46bd      	mov	sp, r7
 8014bb8:	bd80      	pop	{r7, pc}
 8014bba:	bf00      	nop
 8014bbc:	20005534 	.word	0x20005534

08014bc0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8014bc0:	b580      	push	{r7, lr}
 8014bc2:	b084      	sub	sp, #16
 8014bc4:	af00      	add	r7, sp, #0
 8014bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014bc8:	2300      	movs	r3, #0
 8014bca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014bcc:	2300      	movs	r3, #0
 8014bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014bd6:	4618      	mov	r0, r3
 8014bd8:	f7f0 fbb4 	bl	8005344 <HAL_HCD_Start>
 8014bdc:	4603      	mov	r3, r0
 8014bde:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014be0:	7bfb      	ldrb	r3, [r7, #15]
 8014be2:	4618      	mov	r0, r3
 8014be4:	f000 f95e 	bl	8014ea4 <USBH_Get_USB_Status>
 8014be8:	4603      	mov	r3, r0
 8014bea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014bec:	7bbb      	ldrb	r3, [r7, #14]
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3710      	adds	r7, #16
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}

08014bf6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8014bf6:	b580      	push	{r7, lr}
 8014bf8:	b084      	sub	sp, #16
 8014bfa:	af00      	add	r7, sp, #0
 8014bfc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014bfe:	2300      	movs	r3, #0
 8014c00:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014c02:	2300      	movs	r3, #0
 8014c04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014c0c:	4618      	mov	r0, r3
 8014c0e:	f7f0 fbbc 	bl	800538a <HAL_HCD_Stop>
 8014c12:	4603      	mov	r3, r0
 8014c14:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014c16:	7bfb      	ldrb	r3, [r7, #15]
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f000 f943 	bl	8014ea4 <USBH_Get_USB_Status>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014c22:	7bbb      	ldrb	r3, [r7, #14]
}
 8014c24:	4618      	mov	r0, r3
 8014c26:	3710      	adds	r7, #16
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}

08014c2c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b084      	sub	sp, #16
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8014c34:	2301      	movs	r3, #1
 8014c36:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014c3e:	4618      	mov	r0, r3
 8014c40:	f7f0 fc06 	bl	8005450 <HAL_HCD_GetCurrentSpeed>
 8014c44:	4603      	mov	r3, r0
 8014c46:	2b02      	cmp	r3, #2
 8014c48:	d00c      	beq.n	8014c64 <USBH_LL_GetSpeed+0x38>
 8014c4a:	2b02      	cmp	r3, #2
 8014c4c:	d80d      	bhi.n	8014c6a <USBH_LL_GetSpeed+0x3e>
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d002      	beq.n	8014c58 <USBH_LL_GetSpeed+0x2c>
 8014c52:	2b01      	cmp	r3, #1
 8014c54:	d003      	beq.n	8014c5e <USBH_LL_GetSpeed+0x32>
 8014c56:	e008      	b.n	8014c6a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8014c58:	2300      	movs	r3, #0
 8014c5a:	73fb      	strb	r3, [r7, #15]
    break;
 8014c5c:	e008      	b.n	8014c70 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8014c5e:	2301      	movs	r3, #1
 8014c60:	73fb      	strb	r3, [r7, #15]
    break;
 8014c62:	e005      	b.n	8014c70 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8014c64:	2302      	movs	r3, #2
 8014c66:	73fb      	strb	r3, [r7, #15]
    break;
 8014c68:	e002      	b.n	8014c70 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8014c6a:	2301      	movs	r3, #1
 8014c6c:	73fb      	strb	r3, [r7, #15]
    break;
 8014c6e:	bf00      	nop
  }
  return  speed;
 8014c70:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c72:	4618      	mov	r0, r3
 8014c74:	3710      	adds	r7, #16
 8014c76:	46bd      	mov	sp, r7
 8014c78:	bd80      	pop	{r7, pc}

08014c7a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8014c7a:	b580      	push	{r7, lr}
 8014c7c:	b084      	sub	sp, #16
 8014c7e:	af00      	add	r7, sp, #0
 8014c80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014c82:	2300      	movs	r3, #0
 8014c84:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014c86:	2300      	movs	r3, #0
 8014c88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014c90:	4618      	mov	r0, r3
 8014c92:	f7f0 fb97 	bl	80053c4 <HAL_HCD_ResetPort>
 8014c96:	4603      	mov	r3, r0
 8014c98:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014c9a:	7bfb      	ldrb	r3, [r7, #15]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f000 f901 	bl	8014ea4 <USBH_Get_USB_Status>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014ca6:	7bbb      	ldrb	r3, [r7, #14]
}
 8014ca8:	4618      	mov	r0, r3
 8014caa:	3710      	adds	r7, #16
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	460b      	mov	r3, r1
 8014cba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014cc2:	78fa      	ldrb	r2, [r7, #3]
 8014cc4:	4611      	mov	r1, r2
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	f7f0 fb9f 	bl	800540a <HAL_HCD_HC_GetXferCount>
 8014ccc:	4603      	mov	r3, r0
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3708      	adds	r7, #8
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}

08014cd6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8014cd6:	b590      	push	{r4, r7, lr}
 8014cd8:	b089      	sub	sp, #36	; 0x24
 8014cda:	af04      	add	r7, sp, #16
 8014cdc:	6078      	str	r0, [r7, #4]
 8014cde:	4608      	mov	r0, r1
 8014ce0:	4611      	mov	r1, r2
 8014ce2:	461a      	mov	r2, r3
 8014ce4:	4603      	mov	r3, r0
 8014ce6:	70fb      	strb	r3, [r7, #3]
 8014ce8:	460b      	mov	r3, r1
 8014cea:	70bb      	strb	r3, [r7, #2]
 8014cec:	4613      	mov	r3, r2
 8014cee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014cf4:	2300      	movs	r3, #0
 8014cf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014cfe:	787c      	ldrb	r4, [r7, #1]
 8014d00:	78ba      	ldrb	r2, [r7, #2]
 8014d02:	78f9      	ldrb	r1, [r7, #3]
 8014d04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014d06:	9302      	str	r3, [sp, #8]
 8014d08:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014d0c:	9301      	str	r3, [sp, #4]
 8014d0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d12:	9300      	str	r3, [sp, #0]
 8014d14:	4623      	mov	r3, r4
 8014d16:	f7ef ffe3 	bl	8004ce0 <HAL_HCD_HC_Init>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8014d1e:	7bfb      	ldrb	r3, [r7, #15]
 8014d20:	4618      	mov	r0, r3
 8014d22:	f000 f8bf 	bl	8014ea4 <USBH_Get_USB_Status>
 8014d26:	4603      	mov	r3, r0
 8014d28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3714      	adds	r7, #20
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd90      	pop	{r4, r7, pc}

08014d34 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b084      	sub	sp, #16
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	460b      	mov	r3, r1
 8014d3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d40:	2300      	movs	r3, #0
 8014d42:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014d44:	2300      	movs	r3, #0
 8014d46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8014d48:	687b      	ldr	r3, [r7, #4]
 8014d4a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014d4e:	78fa      	ldrb	r2, [r7, #3]
 8014d50:	4611      	mov	r1, r2
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7f0 f85c 	bl	8004e10 <HAL_HCD_HC_Halt>
 8014d58:	4603      	mov	r3, r0
 8014d5a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8014d5c:	7bfb      	ldrb	r3, [r7, #15]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f000 f8a0 	bl	8014ea4 <USBH_Get_USB_Status>
 8014d64:	4603      	mov	r3, r0
 8014d66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014d68:	7bbb      	ldrb	r3, [r7, #14]
}
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	3710      	adds	r7, #16
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}

08014d72 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8014d72:	b590      	push	{r4, r7, lr}
 8014d74:	b089      	sub	sp, #36	; 0x24
 8014d76:	af04      	add	r7, sp, #16
 8014d78:	6078      	str	r0, [r7, #4]
 8014d7a:	4608      	mov	r0, r1
 8014d7c:	4611      	mov	r1, r2
 8014d7e:	461a      	mov	r2, r3
 8014d80:	4603      	mov	r3, r0
 8014d82:	70fb      	strb	r3, [r7, #3]
 8014d84:	460b      	mov	r3, r1
 8014d86:	70bb      	strb	r3, [r7, #2]
 8014d88:	4613      	mov	r3, r2
 8014d8a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014d90:	2300      	movs	r3, #0
 8014d92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8014d9a:	787c      	ldrb	r4, [r7, #1]
 8014d9c:	78ba      	ldrb	r2, [r7, #2]
 8014d9e:	78f9      	ldrb	r1, [r7, #3]
 8014da0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8014da4:	9303      	str	r3, [sp, #12]
 8014da6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8014da8:	9302      	str	r3, [sp, #8]
 8014daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014dac:	9301      	str	r3, [sp, #4]
 8014dae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014db2:	9300      	str	r3, [sp, #0]
 8014db4:	4623      	mov	r3, r4
 8014db6:	f7f0 f84f 	bl	8004e58 <HAL_HCD_HC_SubmitRequest>
 8014dba:	4603      	mov	r3, r0
 8014dbc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8014dbe:	7bfb      	ldrb	r3, [r7, #15]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f000 f86f 	bl	8014ea4 <USBH_Get_USB_Status>
 8014dc6:	4603      	mov	r3, r0
 8014dc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8014dca:	7bbb      	ldrb	r3, [r7, #14]
}
 8014dcc:	4618      	mov	r0, r3
 8014dce:	3714      	adds	r7, #20
 8014dd0:	46bd      	mov	sp, r7
 8014dd2:	bd90      	pop	{r4, r7, pc}

08014dd4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8014dd4:	b580      	push	{r7, lr}
 8014dd6:	b082      	sub	sp, #8
 8014dd8:	af00      	add	r7, sp, #0
 8014dda:	6078      	str	r0, [r7, #4]
 8014ddc:	460b      	mov	r3, r1
 8014dde:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014de6:	78fa      	ldrb	r2, [r7, #3]
 8014de8:	4611      	mov	r1, r2
 8014dea:	4618      	mov	r0, r3
 8014dec:	f7f0 faf8 	bl	80053e0 <HAL_HCD_HC_GetURBState>
 8014df0:	4603      	mov	r3, r0
}
 8014df2:	4618      	mov	r0, r3
 8014df4:	3708      	adds	r7, #8
 8014df6:	46bd      	mov	sp, r7
 8014df8:	bd80      	pop	{r7, pc}

08014dfa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8014dfa:	b580      	push	{r7, lr}
 8014dfc:	b082      	sub	sp, #8
 8014dfe:	af00      	add	r7, sp, #0
 8014e00:	6078      	str	r0, [r7, #4]
 8014e02:	460b      	mov	r3, r1
 8014e04:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8014e0c:	2b01      	cmp	r3, #1
 8014e0e:	d103      	bne.n	8014e18 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8014e10:	78fb      	ldrb	r3, [r7, #3]
 8014e12:	4618      	mov	r0, r3
 8014e14:	f000 f872 	bl	8014efc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8014e18:	20c8      	movs	r0, #200	; 0xc8
 8014e1a:	f7ee fc39 	bl	8003690 <HAL_Delay>
  return USBH_OK;
 8014e1e:	2300      	movs	r3, #0
}
 8014e20:	4618      	mov	r0, r3
 8014e22:	3708      	adds	r7, #8
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8014e28:	b480      	push	{r7}
 8014e2a:	b085      	sub	sp, #20
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
 8014e30:	460b      	mov	r3, r1
 8014e32:	70fb      	strb	r3, [r7, #3]
 8014e34:	4613      	mov	r3, r2
 8014e36:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8014e3e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8014e40:	78fa      	ldrb	r2, [r7, #3]
 8014e42:	68f9      	ldr	r1, [r7, #12]
 8014e44:	4613      	mov	r3, r2
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	4413      	add	r3, r2
 8014e4a:	00db      	lsls	r3, r3, #3
 8014e4c:	440b      	add	r3, r1
 8014e4e:	333b      	adds	r3, #59	; 0x3b
 8014e50:	781b      	ldrb	r3, [r3, #0]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d00a      	beq.n	8014e6c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8014e56:	78fa      	ldrb	r2, [r7, #3]
 8014e58:	68f9      	ldr	r1, [r7, #12]
 8014e5a:	4613      	mov	r3, r2
 8014e5c:	009b      	lsls	r3, r3, #2
 8014e5e:	4413      	add	r3, r2
 8014e60:	00db      	lsls	r3, r3, #3
 8014e62:	440b      	add	r3, r1
 8014e64:	3350      	adds	r3, #80	; 0x50
 8014e66:	78ba      	ldrb	r2, [r7, #2]
 8014e68:	701a      	strb	r2, [r3, #0]
 8014e6a:	e009      	b.n	8014e80 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8014e6c:	78fa      	ldrb	r2, [r7, #3]
 8014e6e:	68f9      	ldr	r1, [r7, #12]
 8014e70:	4613      	mov	r3, r2
 8014e72:	009b      	lsls	r3, r3, #2
 8014e74:	4413      	add	r3, r2
 8014e76:	00db      	lsls	r3, r3, #3
 8014e78:	440b      	add	r3, r1
 8014e7a:	3351      	adds	r3, #81	; 0x51
 8014e7c:	78ba      	ldrb	r2, [r7, #2]
 8014e7e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8014e80:	2300      	movs	r3, #0
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	3714      	adds	r7, #20
 8014e86:	46bd      	mov	sp, r7
 8014e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8c:	4770      	bx	lr

08014e8e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8014e8e:	b580      	push	{r7, lr}
 8014e90:	b082      	sub	sp, #8
 8014e92:	af00      	add	r7, sp, #0
 8014e94:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014e96:	6878      	ldr	r0, [r7, #4]
 8014e98:	f7ee fbfa 	bl	8003690 <HAL_Delay>
}
 8014e9c:	bf00      	nop
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8014ea4:	b480      	push	{r7}
 8014ea6:	b085      	sub	sp, #20
 8014ea8:	af00      	add	r7, sp, #0
 8014eaa:	4603      	mov	r3, r0
 8014eac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8014eb2:	79fb      	ldrb	r3, [r7, #7]
 8014eb4:	2b03      	cmp	r3, #3
 8014eb6:	d817      	bhi.n	8014ee8 <USBH_Get_USB_Status+0x44>
 8014eb8:	a201      	add	r2, pc, #4	; (adr r2, 8014ec0 <USBH_Get_USB_Status+0x1c>)
 8014eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ebe:	bf00      	nop
 8014ec0:	08014ed1 	.word	0x08014ed1
 8014ec4:	08014ed7 	.word	0x08014ed7
 8014ec8:	08014edd 	.word	0x08014edd
 8014ecc:	08014ee3 	.word	0x08014ee3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8014ed0:	2300      	movs	r3, #0
 8014ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8014ed4:	e00b      	b.n	8014eee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8014ed6:	2302      	movs	r3, #2
 8014ed8:	73fb      	strb	r3, [r7, #15]
    break;
 8014eda:	e008      	b.n	8014eee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8014edc:	2301      	movs	r3, #1
 8014ede:	73fb      	strb	r3, [r7, #15]
    break;
 8014ee0:	e005      	b.n	8014eee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8014ee2:	2302      	movs	r3, #2
 8014ee4:	73fb      	strb	r3, [r7, #15]
    break;
 8014ee6:	e002      	b.n	8014eee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8014ee8:	2302      	movs	r3, #2
 8014eea:	73fb      	strb	r3, [r7, #15]
    break;
 8014eec:	bf00      	nop
  }
  return usb_status;
 8014eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	3714      	adds	r7, #20
 8014ef4:	46bd      	mov	sp, r7
 8014ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014efa:	4770      	bx	lr

08014efc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b084      	sub	sp, #16
 8014f00:	af00      	add	r7, sp, #0
 8014f02:	4603      	mov	r3, r0
 8014f04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8014f06:	79fb      	ldrb	r3, [r7, #7]
 8014f08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8014f0a:	79fb      	ldrb	r3, [r7, #7]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d102      	bne.n	8014f16 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8014f10:	2301      	movs	r3, #1
 8014f12:	73fb      	strb	r3, [r7, #15]
 8014f14:	e001      	b.n	8014f1a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8014f16:	2300      	movs	r3, #0
 8014f18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8014f1a:	7bfb      	ldrb	r3, [r7, #15]
 8014f1c:	461a      	mov	r2, r3
 8014f1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8014f22:	4803      	ldr	r0, [pc, #12]	; (8014f30 <MX_DriverVbusFS+0x34>)
 8014f24:	f7ef fe46 	bl	8004bb4 <HAL_GPIO_WritePin>
}
 8014f28:	bf00      	nop
 8014f2a:	3710      	adds	r7, #16
 8014f2c:	46bd      	mov	sp, r7
 8014f2e:	bd80      	pop	{r7, pc}
 8014f30:	40021800 	.word	0x40021800

08014f34 <__errno>:
 8014f34:	4b01      	ldr	r3, [pc, #4]	; (8014f3c <__errno+0x8>)
 8014f36:	6818      	ldr	r0, [r3, #0]
 8014f38:	4770      	bx	lr
 8014f3a:	bf00      	nop
 8014f3c:	20000088 	.word	0x20000088

08014f40 <std>:
 8014f40:	2300      	movs	r3, #0
 8014f42:	b510      	push	{r4, lr}
 8014f44:	4604      	mov	r4, r0
 8014f46:	e9c0 3300 	strd	r3, r3, [r0]
 8014f4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014f4e:	6083      	str	r3, [r0, #8]
 8014f50:	8181      	strh	r1, [r0, #12]
 8014f52:	6643      	str	r3, [r0, #100]	; 0x64
 8014f54:	81c2      	strh	r2, [r0, #14]
 8014f56:	6183      	str	r3, [r0, #24]
 8014f58:	4619      	mov	r1, r3
 8014f5a:	2208      	movs	r2, #8
 8014f5c:	305c      	adds	r0, #92	; 0x5c
 8014f5e:	f000 f92b 	bl	80151b8 <memset>
 8014f62:	4b05      	ldr	r3, [pc, #20]	; (8014f78 <std+0x38>)
 8014f64:	6263      	str	r3, [r4, #36]	; 0x24
 8014f66:	4b05      	ldr	r3, [pc, #20]	; (8014f7c <std+0x3c>)
 8014f68:	62a3      	str	r3, [r4, #40]	; 0x28
 8014f6a:	4b05      	ldr	r3, [pc, #20]	; (8014f80 <std+0x40>)
 8014f6c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014f6e:	4b05      	ldr	r3, [pc, #20]	; (8014f84 <std+0x44>)
 8014f70:	6224      	str	r4, [r4, #32]
 8014f72:	6323      	str	r3, [r4, #48]	; 0x30
 8014f74:	bd10      	pop	{r4, pc}
 8014f76:	bf00      	nop
 8014f78:	080154ad 	.word	0x080154ad
 8014f7c:	080154cf 	.word	0x080154cf
 8014f80:	08015507 	.word	0x08015507
 8014f84:	0801552b 	.word	0x0801552b

08014f88 <_cleanup_r>:
 8014f88:	4901      	ldr	r1, [pc, #4]	; (8014f90 <_cleanup_r+0x8>)
 8014f8a:	f000 b8af 	b.w	80150ec <_fwalk_reent>
 8014f8e:	bf00      	nop
 8014f90:	08015685 	.word	0x08015685

08014f94 <__sfmoreglue>:
 8014f94:	b570      	push	{r4, r5, r6, lr}
 8014f96:	2268      	movs	r2, #104	; 0x68
 8014f98:	1e4d      	subs	r5, r1, #1
 8014f9a:	4355      	muls	r5, r2
 8014f9c:	460e      	mov	r6, r1
 8014f9e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014fa2:	f000 f97d 	bl	80152a0 <_malloc_r>
 8014fa6:	4604      	mov	r4, r0
 8014fa8:	b140      	cbz	r0, 8014fbc <__sfmoreglue+0x28>
 8014faa:	2100      	movs	r1, #0
 8014fac:	e9c0 1600 	strd	r1, r6, [r0]
 8014fb0:	300c      	adds	r0, #12
 8014fb2:	60a0      	str	r0, [r4, #8]
 8014fb4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014fb8:	f000 f8fe 	bl	80151b8 <memset>
 8014fbc:	4620      	mov	r0, r4
 8014fbe:	bd70      	pop	{r4, r5, r6, pc}

08014fc0 <__sfp_lock_acquire>:
 8014fc0:	4801      	ldr	r0, [pc, #4]	; (8014fc8 <__sfp_lock_acquire+0x8>)
 8014fc2:	f000 b8d8 	b.w	8015176 <__retarget_lock_acquire_recursive>
 8014fc6:	bf00      	nop
 8014fc8:	200057f9 	.word	0x200057f9

08014fcc <__sfp_lock_release>:
 8014fcc:	4801      	ldr	r0, [pc, #4]	; (8014fd4 <__sfp_lock_release+0x8>)
 8014fce:	f000 b8d3 	b.w	8015178 <__retarget_lock_release_recursive>
 8014fd2:	bf00      	nop
 8014fd4:	200057f9 	.word	0x200057f9

08014fd8 <__sinit_lock_acquire>:
 8014fd8:	4801      	ldr	r0, [pc, #4]	; (8014fe0 <__sinit_lock_acquire+0x8>)
 8014fda:	f000 b8cc 	b.w	8015176 <__retarget_lock_acquire_recursive>
 8014fde:	bf00      	nop
 8014fe0:	200057fa 	.word	0x200057fa

08014fe4 <__sinit_lock_release>:
 8014fe4:	4801      	ldr	r0, [pc, #4]	; (8014fec <__sinit_lock_release+0x8>)
 8014fe6:	f000 b8c7 	b.w	8015178 <__retarget_lock_release_recursive>
 8014fea:	bf00      	nop
 8014fec:	200057fa 	.word	0x200057fa

08014ff0 <__sinit>:
 8014ff0:	b510      	push	{r4, lr}
 8014ff2:	4604      	mov	r4, r0
 8014ff4:	f7ff fff0 	bl	8014fd8 <__sinit_lock_acquire>
 8014ff8:	69a3      	ldr	r3, [r4, #24]
 8014ffa:	b11b      	cbz	r3, 8015004 <__sinit+0x14>
 8014ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015000:	f7ff bff0 	b.w	8014fe4 <__sinit_lock_release>
 8015004:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015008:	6523      	str	r3, [r4, #80]	; 0x50
 801500a:	4b13      	ldr	r3, [pc, #76]	; (8015058 <__sinit+0x68>)
 801500c:	4a13      	ldr	r2, [pc, #76]	; (801505c <__sinit+0x6c>)
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	62a2      	str	r2, [r4, #40]	; 0x28
 8015012:	42a3      	cmp	r3, r4
 8015014:	bf04      	itt	eq
 8015016:	2301      	moveq	r3, #1
 8015018:	61a3      	streq	r3, [r4, #24]
 801501a:	4620      	mov	r0, r4
 801501c:	f000 f820 	bl	8015060 <__sfp>
 8015020:	6060      	str	r0, [r4, #4]
 8015022:	4620      	mov	r0, r4
 8015024:	f000 f81c 	bl	8015060 <__sfp>
 8015028:	60a0      	str	r0, [r4, #8]
 801502a:	4620      	mov	r0, r4
 801502c:	f000 f818 	bl	8015060 <__sfp>
 8015030:	2200      	movs	r2, #0
 8015032:	60e0      	str	r0, [r4, #12]
 8015034:	2104      	movs	r1, #4
 8015036:	6860      	ldr	r0, [r4, #4]
 8015038:	f7ff ff82 	bl	8014f40 <std>
 801503c:	68a0      	ldr	r0, [r4, #8]
 801503e:	2201      	movs	r2, #1
 8015040:	2109      	movs	r1, #9
 8015042:	f7ff ff7d 	bl	8014f40 <std>
 8015046:	68e0      	ldr	r0, [r4, #12]
 8015048:	2202      	movs	r2, #2
 801504a:	2112      	movs	r1, #18
 801504c:	f7ff ff78 	bl	8014f40 <std>
 8015050:	2301      	movs	r3, #1
 8015052:	61a3      	str	r3, [r4, #24]
 8015054:	e7d2      	b.n	8014ffc <__sinit+0xc>
 8015056:	bf00      	nop
 8015058:	08018d60 	.word	0x08018d60
 801505c:	08014f89 	.word	0x08014f89

08015060 <__sfp>:
 8015060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015062:	4607      	mov	r7, r0
 8015064:	f7ff ffac 	bl	8014fc0 <__sfp_lock_acquire>
 8015068:	4b1e      	ldr	r3, [pc, #120]	; (80150e4 <__sfp+0x84>)
 801506a:	681e      	ldr	r6, [r3, #0]
 801506c:	69b3      	ldr	r3, [r6, #24]
 801506e:	b913      	cbnz	r3, 8015076 <__sfp+0x16>
 8015070:	4630      	mov	r0, r6
 8015072:	f7ff ffbd 	bl	8014ff0 <__sinit>
 8015076:	3648      	adds	r6, #72	; 0x48
 8015078:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801507c:	3b01      	subs	r3, #1
 801507e:	d503      	bpl.n	8015088 <__sfp+0x28>
 8015080:	6833      	ldr	r3, [r6, #0]
 8015082:	b30b      	cbz	r3, 80150c8 <__sfp+0x68>
 8015084:	6836      	ldr	r6, [r6, #0]
 8015086:	e7f7      	b.n	8015078 <__sfp+0x18>
 8015088:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801508c:	b9d5      	cbnz	r5, 80150c4 <__sfp+0x64>
 801508e:	4b16      	ldr	r3, [pc, #88]	; (80150e8 <__sfp+0x88>)
 8015090:	60e3      	str	r3, [r4, #12]
 8015092:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015096:	6665      	str	r5, [r4, #100]	; 0x64
 8015098:	f000 f86c 	bl	8015174 <__retarget_lock_init_recursive>
 801509c:	f7ff ff96 	bl	8014fcc <__sfp_lock_release>
 80150a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80150a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80150a8:	6025      	str	r5, [r4, #0]
 80150aa:	61a5      	str	r5, [r4, #24]
 80150ac:	2208      	movs	r2, #8
 80150ae:	4629      	mov	r1, r5
 80150b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80150b4:	f000 f880 	bl	80151b8 <memset>
 80150b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80150bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80150c0:	4620      	mov	r0, r4
 80150c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150c4:	3468      	adds	r4, #104	; 0x68
 80150c6:	e7d9      	b.n	801507c <__sfp+0x1c>
 80150c8:	2104      	movs	r1, #4
 80150ca:	4638      	mov	r0, r7
 80150cc:	f7ff ff62 	bl	8014f94 <__sfmoreglue>
 80150d0:	4604      	mov	r4, r0
 80150d2:	6030      	str	r0, [r6, #0]
 80150d4:	2800      	cmp	r0, #0
 80150d6:	d1d5      	bne.n	8015084 <__sfp+0x24>
 80150d8:	f7ff ff78 	bl	8014fcc <__sfp_lock_release>
 80150dc:	230c      	movs	r3, #12
 80150de:	603b      	str	r3, [r7, #0]
 80150e0:	e7ee      	b.n	80150c0 <__sfp+0x60>
 80150e2:	bf00      	nop
 80150e4:	08018d60 	.word	0x08018d60
 80150e8:	ffff0001 	.word	0xffff0001

080150ec <_fwalk_reent>:
 80150ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150f0:	4606      	mov	r6, r0
 80150f2:	4688      	mov	r8, r1
 80150f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80150f8:	2700      	movs	r7, #0
 80150fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150fe:	f1b9 0901 	subs.w	r9, r9, #1
 8015102:	d505      	bpl.n	8015110 <_fwalk_reent+0x24>
 8015104:	6824      	ldr	r4, [r4, #0]
 8015106:	2c00      	cmp	r4, #0
 8015108:	d1f7      	bne.n	80150fa <_fwalk_reent+0xe>
 801510a:	4638      	mov	r0, r7
 801510c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015110:	89ab      	ldrh	r3, [r5, #12]
 8015112:	2b01      	cmp	r3, #1
 8015114:	d907      	bls.n	8015126 <_fwalk_reent+0x3a>
 8015116:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801511a:	3301      	adds	r3, #1
 801511c:	d003      	beq.n	8015126 <_fwalk_reent+0x3a>
 801511e:	4629      	mov	r1, r5
 8015120:	4630      	mov	r0, r6
 8015122:	47c0      	blx	r8
 8015124:	4307      	orrs	r7, r0
 8015126:	3568      	adds	r5, #104	; 0x68
 8015128:	e7e9      	b.n	80150fe <_fwalk_reent+0x12>
	...

0801512c <__libc_init_array>:
 801512c:	b570      	push	{r4, r5, r6, lr}
 801512e:	4d0d      	ldr	r5, [pc, #52]	; (8015164 <__libc_init_array+0x38>)
 8015130:	4c0d      	ldr	r4, [pc, #52]	; (8015168 <__libc_init_array+0x3c>)
 8015132:	1b64      	subs	r4, r4, r5
 8015134:	10a4      	asrs	r4, r4, #2
 8015136:	2600      	movs	r6, #0
 8015138:	42a6      	cmp	r6, r4
 801513a:	d109      	bne.n	8015150 <__libc_init_array+0x24>
 801513c:	4d0b      	ldr	r5, [pc, #44]	; (801516c <__libc_init_array+0x40>)
 801513e:	4c0c      	ldr	r4, [pc, #48]	; (8015170 <__libc_init_array+0x44>)
 8015140:	f000 ff42 	bl	8015fc8 <_init>
 8015144:	1b64      	subs	r4, r4, r5
 8015146:	10a4      	asrs	r4, r4, #2
 8015148:	2600      	movs	r6, #0
 801514a:	42a6      	cmp	r6, r4
 801514c:	d105      	bne.n	801515a <__libc_init_array+0x2e>
 801514e:	bd70      	pop	{r4, r5, r6, pc}
 8015150:	f855 3b04 	ldr.w	r3, [r5], #4
 8015154:	4798      	blx	r3
 8015156:	3601      	adds	r6, #1
 8015158:	e7ee      	b.n	8015138 <__libc_init_array+0xc>
 801515a:	f855 3b04 	ldr.w	r3, [r5], #4
 801515e:	4798      	blx	r3
 8015160:	3601      	adds	r6, #1
 8015162:	e7f2      	b.n	801514a <__libc_init_array+0x1e>
 8015164:	08018da0 	.word	0x08018da0
 8015168:	08018da0 	.word	0x08018da0
 801516c:	08018da0 	.word	0x08018da0
 8015170:	08018da4 	.word	0x08018da4

08015174 <__retarget_lock_init_recursive>:
 8015174:	4770      	bx	lr

08015176 <__retarget_lock_acquire_recursive>:
 8015176:	4770      	bx	lr

08015178 <__retarget_lock_release_recursive>:
 8015178:	4770      	bx	lr
	...

0801517c <malloc>:
 801517c:	4b02      	ldr	r3, [pc, #8]	; (8015188 <malloc+0xc>)
 801517e:	4601      	mov	r1, r0
 8015180:	6818      	ldr	r0, [r3, #0]
 8015182:	f000 b88d 	b.w	80152a0 <_malloc_r>
 8015186:	bf00      	nop
 8015188:	20000088 	.word	0x20000088

0801518c <free>:
 801518c:	4b02      	ldr	r3, [pc, #8]	; (8015198 <free+0xc>)
 801518e:	4601      	mov	r1, r0
 8015190:	6818      	ldr	r0, [r3, #0]
 8015192:	f000 b819 	b.w	80151c8 <_free_r>
 8015196:	bf00      	nop
 8015198:	20000088 	.word	0x20000088

0801519c <memcpy>:
 801519c:	440a      	add	r2, r1
 801519e:	4291      	cmp	r1, r2
 80151a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80151a4:	d100      	bne.n	80151a8 <memcpy+0xc>
 80151a6:	4770      	bx	lr
 80151a8:	b510      	push	{r4, lr}
 80151aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80151ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80151b2:	4291      	cmp	r1, r2
 80151b4:	d1f9      	bne.n	80151aa <memcpy+0xe>
 80151b6:	bd10      	pop	{r4, pc}

080151b8 <memset>:
 80151b8:	4402      	add	r2, r0
 80151ba:	4603      	mov	r3, r0
 80151bc:	4293      	cmp	r3, r2
 80151be:	d100      	bne.n	80151c2 <memset+0xa>
 80151c0:	4770      	bx	lr
 80151c2:	f803 1b01 	strb.w	r1, [r3], #1
 80151c6:	e7f9      	b.n	80151bc <memset+0x4>

080151c8 <_free_r>:
 80151c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80151ca:	2900      	cmp	r1, #0
 80151cc:	d044      	beq.n	8015258 <_free_r+0x90>
 80151ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80151d2:	9001      	str	r0, [sp, #4]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	f1a1 0404 	sub.w	r4, r1, #4
 80151da:	bfb8      	it	lt
 80151dc:	18e4      	addlt	r4, r4, r3
 80151de:	f000 fa9f 	bl	8015720 <__malloc_lock>
 80151e2:	4a1e      	ldr	r2, [pc, #120]	; (801525c <_free_r+0x94>)
 80151e4:	9801      	ldr	r0, [sp, #4]
 80151e6:	6813      	ldr	r3, [r2, #0]
 80151e8:	b933      	cbnz	r3, 80151f8 <_free_r+0x30>
 80151ea:	6063      	str	r3, [r4, #4]
 80151ec:	6014      	str	r4, [r2, #0]
 80151ee:	b003      	add	sp, #12
 80151f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80151f4:	f000 ba9a 	b.w	801572c <__malloc_unlock>
 80151f8:	42a3      	cmp	r3, r4
 80151fa:	d908      	bls.n	801520e <_free_r+0x46>
 80151fc:	6825      	ldr	r5, [r4, #0]
 80151fe:	1961      	adds	r1, r4, r5
 8015200:	428b      	cmp	r3, r1
 8015202:	bf01      	itttt	eq
 8015204:	6819      	ldreq	r1, [r3, #0]
 8015206:	685b      	ldreq	r3, [r3, #4]
 8015208:	1949      	addeq	r1, r1, r5
 801520a:	6021      	streq	r1, [r4, #0]
 801520c:	e7ed      	b.n	80151ea <_free_r+0x22>
 801520e:	461a      	mov	r2, r3
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	b10b      	cbz	r3, 8015218 <_free_r+0x50>
 8015214:	42a3      	cmp	r3, r4
 8015216:	d9fa      	bls.n	801520e <_free_r+0x46>
 8015218:	6811      	ldr	r1, [r2, #0]
 801521a:	1855      	adds	r5, r2, r1
 801521c:	42a5      	cmp	r5, r4
 801521e:	d10b      	bne.n	8015238 <_free_r+0x70>
 8015220:	6824      	ldr	r4, [r4, #0]
 8015222:	4421      	add	r1, r4
 8015224:	1854      	adds	r4, r2, r1
 8015226:	42a3      	cmp	r3, r4
 8015228:	6011      	str	r1, [r2, #0]
 801522a:	d1e0      	bne.n	80151ee <_free_r+0x26>
 801522c:	681c      	ldr	r4, [r3, #0]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	6053      	str	r3, [r2, #4]
 8015232:	4421      	add	r1, r4
 8015234:	6011      	str	r1, [r2, #0]
 8015236:	e7da      	b.n	80151ee <_free_r+0x26>
 8015238:	d902      	bls.n	8015240 <_free_r+0x78>
 801523a:	230c      	movs	r3, #12
 801523c:	6003      	str	r3, [r0, #0]
 801523e:	e7d6      	b.n	80151ee <_free_r+0x26>
 8015240:	6825      	ldr	r5, [r4, #0]
 8015242:	1961      	adds	r1, r4, r5
 8015244:	428b      	cmp	r3, r1
 8015246:	bf04      	itt	eq
 8015248:	6819      	ldreq	r1, [r3, #0]
 801524a:	685b      	ldreq	r3, [r3, #4]
 801524c:	6063      	str	r3, [r4, #4]
 801524e:	bf04      	itt	eq
 8015250:	1949      	addeq	r1, r1, r5
 8015252:	6021      	streq	r1, [r4, #0]
 8015254:	6054      	str	r4, [r2, #4]
 8015256:	e7ca      	b.n	80151ee <_free_r+0x26>
 8015258:	b003      	add	sp, #12
 801525a:	bd30      	pop	{r4, r5, pc}
 801525c:	200057fc 	.word	0x200057fc

08015260 <sbrk_aligned>:
 8015260:	b570      	push	{r4, r5, r6, lr}
 8015262:	4e0e      	ldr	r6, [pc, #56]	; (801529c <sbrk_aligned+0x3c>)
 8015264:	460c      	mov	r4, r1
 8015266:	6831      	ldr	r1, [r6, #0]
 8015268:	4605      	mov	r5, r0
 801526a:	b911      	cbnz	r1, 8015272 <sbrk_aligned+0x12>
 801526c:	f000 f90e 	bl	801548c <_sbrk_r>
 8015270:	6030      	str	r0, [r6, #0]
 8015272:	4621      	mov	r1, r4
 8015274:	4628      	mov	r0, r5
 8015276:	f000 f909 	bl	801548c <_sbrk_r>
 801527a:	1c43      	adds	r3, r0, #1
 801527c:	d00a      	beq.n	8015294 <sbrk_aligned+0x34>
 801527e:	1cc4      	adds	r4, r0, #3
 8015280:	f024 0403 	bic.w	r4, r4, #3
 8015284:	42a0      	cmp	r0, r4
 8015286:	d007      	beq.n	8015298 <sbrk_aligned+0x38>
 8015288:	1a21      	subs	r1, r4, r0
 801528a:	4628      	mov	r0, r5
 801528c:	f000 f8fe 	bl	801548c <_sbrk_r>
 8015290:	3001      	adds	r0, #1
 8015292:	d101      	bne.n	8015298 <sbrk_aligned+0x38>
 8015294:	f04f 34ff 	mov.w	r4, #4294967295
 8015298:	4620      	mov	r0, r4
 801529a:	bd70      	pop	{r4, r5, r6, pc}
 801529c:	20005800 	.word	0x20005800

080152a0 <_malloc_r>:
 80152a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152a4:	1ccd      	adds	r5, r1, #3
 80152a6:	f025 0503 	bic.w	r5, r5, #3
 80152aa:	3508      	adds	r5, #8
 80152ac:	2d0c      	cmp	r5, #12
 80152ae:	bf38      	it	cc
 80152b0:	250c      	movcc	r5, #12
 80152b2:	2d00      	cmp	r5, #0
 80152b4:	4607      	mov	r7, r0
 80152b6:	db01      	blt.n	80152bc <_malloc_r+0x1c>
 80152b8:	42a9      	cmp	r1, r5
 80152ba:	d905      	bls.n	80152c8 <_malloc_r+0x28>
 80152bc:	230c      	movs	r3, #12
 80152be:	603b      	str	r3, [r7, #0]
 80152c0:	2600      	movs	r6, #0
 80152c2:	4630      	mov	r0, r6
 80152c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152c8:	4e2e      	ldr	r6, [pc, #184]	; (8015384 <_malloc_r+0xe4>)
 80152ca:	f000 fa29 	bl	8015720 <__malloc_lock>
 80152ce:	6833      	ldr	r3, [r6, #0]
 80152d0:	461c      	mov	r4, r3
 80152d2:	bb34      	cbnz	r4, 8015322 <_malloc_r+0x82>
 80152d4:	4629      	mov	r1, r5
 80152d6:	4638      	mov	r0, r7
 80152d8:	f7ff ffc2 	bl	8015260 <sbrk_aligned>
 80152dc:	1c43      	adds	r3, r0, #1
 80152de:	4604      	mov	r4, r0
 80152e0:	d14d      	bne.n	801537e <_malloc_r+0xde>
 80152e2:	6834      	ldr	r4, [r6, #0]
 80152e4:	4626      	mov	r6, r4
 80152e6:	2e00      	cmp	r6, #0
 80152e8:	d140      	bne.n	801536c <_malloc_r+0xcc>
 80152ea:	6823      	ldr	r3, [r4, #0]
 80152ec:	4631      	mov	r1, r6
 80152ee:	4638      	mov	r0, r7
 80152f0:	eb04 0803 	add.w	r8, r4, r3
 80152f4:	f000 f8ca 	bl	801548c <_sbrk_r>
 80152f8:	4580      	cmp	r8, r0
 80152fa:	d13a      	bne.n	8015372 <_malloc_r+0xd2>
 80152fc:	6821      	ldr	r1, [r4, #0]
 80152fe:	3503      	adds	r5, #3
 8015300:	1a6d      	subs	r5, r5, r1
 8015302:	f025 0503 	bic.w	r5, r5, #3
 8015306:	3508      	adds	r5, #8
 8015308:	2d0c      	cmp	r5, #12
 801530a:	bf38      	it	cc
 801530c:	250c      	movcc	r5, #12
 801530e:	4629      	mov	r1, r5
 8015310:	4638      	mov	r0, r7
 8015312:	f7ff ffa5 	bl	8015260 <sbrk_aligned>
 8015316:	3001      	adds	r0, #1
 8015318:	d02b      	beq.n	8015372 <_malloc_r+0xd2>
 801531a:	6823      	ldr	r3, [r4, #0]
 801531c:	442b      	add	r3, r5
 801531e:	6023      	str	r3, [r4, #0]
 8015320:	e00e      	b.n	8015340 <_malloc_r+0xa0>
 8015322:	6822      	ldr	r2, [r4, #0]
 8015324:	1b52      	subs	r2, r2, r5
 8015326:	d41e      	bmi.n	8015366 <_malloc_r+0xc6>
 8015328:	2a0b      	cmp	r2, #11
 801532a:	d916      	bls.n	801535a <_malloc_r+0xba>
 801532c:	1961      	adds	r1, r4, r5
 801532e:	42a3      	cmp	r3, r4
 8015330:	6025      	str	r5, [r4, #0]
 8015332:	bf18      	it	ne
 8015334:	6059      	strne	r1, [r3, #4]
 8015336:	6863      	ldr	r3, [r4, #4]
 8015338:	bf08      	it	eq
 801533a:	6031      	streq	r1, [r6, #0]
 801533c:	5162      	str	r2, [r4, r5]
 801533e:	604b      	str	r3, [r1, #4]
 8015340:	4638      	mov	r0, r7
 8015342:	f104 060b 	add.w	r6, r4, #11
 8015346:	f000 f9f1 	bl	801572c <__malloc_unlock>
 801534a:	f026 0607 	bic.w	r6, r6, #7
 801534e:	1d23      	adds	r3, r4, #4
 8015350:	1af2      	subs	r2, r6, r3
 8015352:	d0b6      	beq.n	80152c2 <_malloc_r+0x22>
 8015354:	1b9b      	subs	r3, r3, r6
 8015356:	50a3      	str	r3, [r4, r2]
 8015358:	e7b3      	b.n	80152c2 <_malloc_r+0x22>
 801535a:	6862      	ldr	r2, [r4, #4]
 801535c:	42a3      	cmp	r3, r4
 801535e:	bf0c      	ite	eq
 8015360:	6032      	streq	r2, [r6, #0]
 8015362:	605a      	strne	r2, [r3, #4]
 8015364:	e7ec      	b.n	8015340 <_malloc_r+0xa0>
 8015366:	4623      	mov	r3, r4
 8015368:	6864      	ldr	r4, [r4, #4]
 801536a:	e7b2      	b.n	80152d2 <_malloc_r+0x32>
 801536c:	4634      	mov	r4, r6
 801536e:	6876      	ldr	r6, [r6, #4]
 8015370:	e7b9      	b.n	80152e6 <_malloc_r+0x46>
 8015372:	230c      	movs	r3, #12
 8015374:	603b      	str	r3, [r7, #0]
 8015376:	4638      	mov	r0, r7
 8015378:	f000 f9d8 	bl	801572c <__malloc_unlock>
 801537c:	e7a1      	b.n	80152c2 <_malloc_r+0x22>
 801537e:	6025      	str	r5, [r4, #0]
 8015380:	e7de      	b.n	8015340 <_malloc_r+0xa0>
 8015382:	bf00      	nop
 8015384:	200057fc 	.word	0x200057fc

08015388 <iprintf>:
 8015388:	b40f      	push	{r0, r1, r2, r3}
 801538a:	4b0a      	ldr	r3, [pc, #40]	; (80153b4 <iprintf+0x2c>)
 801538c:	b513      	push	{r0, r1, r4, lr}
 801538e:	681c      	ldr	r4, [r3, #0]
 8015390:	b124      	cbz	r4, 801539c <iprintf+0x14>
 8015392:	69a3      	ldr	r3, [r4, #24]
 8015394:	b913      	cbnz	r3, 801539c <iprintf+0x14>
 8015396:	4620      	mov	r0, r4
 8015398:	f7ff fe2a 	bl	8014ff0 <__sinit>
 801539c:	ab05      	add	r3, sp, #20
 801539e:	9a04      	ldr	r2, [sp, #16]
 80153a0:	68a1      	ldr	r1, [r4, #8]
 80153a2:	9301      	str	r3, [sp, #4]
 80153a4:	4620      	mov	r0, r4
 80153a6:	f000 f9f1 	bl	801578c <_vfiprintf_r>
 80153aa:	b002      	add	sp, #8
 80153ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80153b0:	b004      	add	sp, #16
 80153b2:	4770      	bx	lr
 80153b4:	20000088 	.word	0x20000088

080153b8 <cleanup_glue>:
 80153b8:	b538      	push	{r3, r4, r5, lr}
 80153ba:	460c      	mov	r4, r1
 80153bc:	6809      	ldr	r1, [r1, #0]
 80153be:	4605      	mov	r5, r0
 80153c0:	b109      	cbz	r1, 80153c6 <cleanup_glue+0xe>
 80153c2:	f7ff fff9 	bl	80153b8 <cleanup_glue>
 80153c6:	4621      	mov	r1, r4
 80153c8:	4628      	mov	r0, r5
 80153ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80153ce:	f7ff befb 	b.w	80151c8 <_free_r>
	...

080153d4 <_reclaim_reent>:
 80153d4:	4b2c      	ldr	r3, [pc, #176]	; (8015488 <_reclaim_reent+0xb4>)
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	4283      	cmp	r3, r0
 80153da:	b570      	push	{r4, r5, r6, lr}
 80153dc:	4604      	mov	r4, r0
 80153de:	d051      	beq.n	8015484 <_reclaim_reent+0xb0>
 80153e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80153e2:	b143      	cbz	r3, 80153f6 <_reclaim_reent+0x22>
 80153e4:	68db      	ldr	r3, [r3, #12]
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	d14a      	bne.n	8015480 <_reclaim_reent+0xac>
 80153ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80153ec:	6819      	ldr	r1, [r3, #0]
 80153ee:	b111      	cbz	r1, 80153f6 <_reclaim_reent+0x22>
 80153f0:	4620      	mov	r0, r4
 80153f2:	f7ff fee9 	bl	80151c8 <_free_r>
 80153f6:	6961      	ldr	r1, [r4, #20]
 80153f8:	b111      	cbz	r1, 8015400 <_reclaim_reent+0x2c>
 80153fa:	4620      	mov	r0, r4
 80153fc:	f7ff fee4 	bl	80151c8 <_free_r>
 8015400:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015402:	b111      	cbz	r1, 801540a <_reclaim_reent+0x36>
 8015404:	4620      	mov	r0, r4
 8015406:	f7ff fedf 	bl	80151c8 <_free_r>
 801540a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801540c:	b111      	cbz	r1, 8015414 <_reclaim_reent+0x40>
 801540e:	4620      	mov	r0, r4
 8015410:	f7ff feda 	bl	80151c8 <_free_r>
 8015414:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8015416:	b111      	cbz	r1, 801541e <_reclaim_reent+0x4a>
 8015418:	4620      	mov	r0, r4
 801541a:	f7ff fed5 	bl	80151c8 <_free_r>
 801541e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8015420:	b111      	cbz	r1, 8015428 <_reclaim_reent+0x54>
 8015422:	4620      	mov	r0, r4
 8015424:	f7ff fed0 	bl	80151c8 <_free_r>
 8015428:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801542a:	b111      	cbz	r1, 8015432 <_reclaim_reent+0x5e>
 801542c:	4620      	mov	r0, r4
 801542e:	f7ff fecb 	bl	80151c8 <_free_r>
 8015432:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8015434:	b111      	cbz	r1, 801543c <_reclaim_reent+0x68>
 8015436:	4620      	mov	r0, r4
 8015438:	f7ff fec6 	bl	80151c8 <_free_r>
 801543c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801543e:	b111      	cbz	r1, 8015446 <_reclaim_reent+0x72>
 8015440:	4620      	mov	r0, r4
 8015442:	f7ff fec1 	bl	80151c8 <_free_r>
 8015446:	69a3      	ldr	r3, [r4, #24]
 8015448:	b1e3      	cbz	r3, 8015484 <_reclaim_reent+0xb0>
 801544a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801544c:	4620      	mov	r0, r4
 801544e:	4798      	blx	r3
 8015450:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8015452:	b1b9      	cbz	r1, 8015484 <_reclaim_reent+0xb0>
 8015454:	4620      	mov	r0, r4
 8015456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801545a:	f7ff bfad 	b.w	80153b8 <cleanup_glue>
 801545e:	5949      	ldr	r1, [r1, r5]
 8015460:	b941      	cbnz	r1, 8015474 <_reclaim_reent+0xa0>
 8015462:	3504      	adds	r5, #4
 8015464:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015466:	2d80      	cmp	r5, #128	; 0x80
 8015468:	68d9      	ldr	r1, [r3, #12]
 801546a:	d1f8      	bne.n	801545e <_reclaim_reent+0x8a>
 801546c:	4620      	mov	r0, r4
 801546e:	f7ff feab 	bl	80151c8 <_free_r>
 8015472:	e7ba      	b.n	80153ea <_reclaim_reent+0x16>
 8015474:	680e      	ldr	r6, [r1, #0]
 8015476:	4620      	mov	r0, r4
 8015478:	f7ff fea6 	bl	80151c8 <_free_r>
 801547c:	4631      	mov	r1, r6
 801547e:	e7ef      	b.n	8015460 <_reclaim_reent+0x8c>
 8015480:	2500      	movs	r5, #0
 8015482:	e7ef      	b.n	8015464 <_reclaim_reent+0x90>
 8015484:	bd70      	pop	{r4, r5, r6, pc}
 8015486:	bf00      	nop
 8015488:	20000088 	.word	0x20000088

0801548c <_sbrk_r>:
 801548c:	b538      	push	{r3, r4, r5, lr}
 801548e:	4d06      	ldr	r5, [pc, #24]	; (80154a8 <_sbrk_r+0x1c>)
 8015490:	2300      	movs	r3, #0
 8015492:	4604      	mov	r4, r0
 8015494:	4608      	mov	r0, r1
 8015496:	602b      	str	r3, [r5, #0]
 8015498:	f7ec fd6a 	bl	8001f70 <_sbrk>
 801549c:	1c43      	adds	r3, r0, #1
 801549e:	d102      	bne.n	80154a6 <_sbrk_r+0x1a>
 80154a0:	682b      	ldr	r3, [r5, #0]
 80154a2:	b103      	cbz	r3, 80154a6 <_sbrk_r+0x1a>
 80154a4:	6023      	str	r3, [r4, #0]
 80154a6:	bd38      	pop	{r3, r4, r5, pc}
 80154a8:	20005804 	.word	0x20005804

080154ac <__sread>:
 80154ac:	b510      	push	{r4, lr}
 80154ae:	460c      	mov	r4, r1
 80154b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154b4:	f000 fc2e 	bl	8015d14 <_read_r>
 80154b8:	2800      	cmp	r0, #0
 80154ba:	bfab      	itete	ge
 80154bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80154be:	89a3      	ldrhlt	r3, [r4, #12]
 80154c0:	181b      	addge	r3, r3, r0
 80154c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80154c6:	bfac      	ite	ge
 80154c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80154ca:	81a3      	strhlt	r3, [r4, #12]
 80154cc:	bd10      	pop	{r4, pc}

080154ce <__swrite>:
 80154ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154d2:	461f      	mov	r7, r3
 80154d4:	898b      	ldrh	r3, [r1, #12]
 80154d6:	05db      	lsls	r3, r3, #23
 80154d8:	4605      	mov	r5, r0
 80154da:	460c      	mov	r4, r1
 80154dc:	4616      	mov	r6, r2
 80154de:	d505      	bpl.n	80154ec <__swrite+0x1e>
 80154e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80154e4:	2302      	movs	r3, #2
 80154e6:	2200      	movs	r2, #0
 80154e8:	f000 f908 	bl	80156fc <_lseek_r>
 80154ec:	89a3      	ldrh	r3, [r4, #12]
 80154ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80154f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80154f6:	81a3      	strh	r3, [r4, #12]
 80154f8:	4632      	mov	r2, r6
 80154fa:	463b      	mov	r3, r7
 80154fc:	4628      	mov	r0, r5
 80154fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015502:	f000 b817 	b.w	8015534 <_write_r>

08015506 <__sseek>:
 8015506:	b510      	push	{r4, lr}
 8015508:	460c      	mov	r4, r1
 801550a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801550e:	f000 f8f5 	bl	80156fc <_lseek_r>
 8015512:	1c43      	adds	r3, r0, #1
 8015514:	89a3      	ldrh	r3, [r4, #12]
 8015516:	bf15      	itete	ne
 8015518:	6560      	strne	r0, [r4, #84]	; 0x54
 801551a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801551e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015522:	81a3      	strheq	r3, [r4, #12]
 8015524:	bf18      	it	ne
 8015526:	81a3      	strhne	r3, [r4, #12]
 8015528:	bd10      	pop	{r4, pc}

0801552a <__sclose>:
 801552a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801552e:	f000 b813 	b.w	8015558 <_close_r>
	...

08015534 <_write_r>:
 8015534:	b538      	push	{r3, r4, r5, lr}
 8015536:	4d07      	ldr	r5, [pc, #28]	; (8015554 <_write_r+0x20>)
 8015538:	4604      	mov	r4, r0
 801553a:	4608      	mov	r0, r1
 801553c:	4611      	mov	r1, r2
 801553e:	2200      	movs	r2, #0
 8015540:	602a      	str	r2, [r5, #0]
 8015542:	461a      	mov	r2, r3
 8015544:	f7ec fcc3 	bl	8001ece <_write>
 8015548:	1c43      	adds	r3, r0, #1
 801554a:	d102      	bne.n	8015552 <_write_r+0x1e>
 801554c:	682b      	ldr	r3, [r5, #0]
 801554e:	b103      	cbz	r3, 8015552 <_write_r+0x1e>
 8015550:	6023      	str	r3, [r4, #0]
 8015552:	bd38      	pop	{r3, r4, r5, pc}
 8015554:	20005804 	.word	0x20005804

08015558 <_close_r>:
 8015558:	b538      	push	{r3, r4, r5, lr}
 801555a:	4d06      	ldr	r5, [pc, #24]	; (8015574 <_close_r+0x1c>)
 801555c:	2300      	movs	r3, #0
 801555e:	4604      	mov	r4, r0
 8015560:	4608      	mov	r0, r1
 8015562:	602b      	str	r3, [r5, #0]
 8015564:	f7ec fccf 	bl	8001f06 <_close>
 8015568:	1c43      	adds	r3, r0, #1
 801556a:	d102      	bne.n	8015572 <_close_r+0x1a>
 801556c:	682b      	ldr	r3, [r5, #0]
 801556e:	b103      	cbz	r3, 8015572 <_close_r+0x1a>
 8015570:	6023      	str	r3, [r4, #0]
 8015572:	bd38      	pop	{r3, r4, r5, pc}
 8015574:	20005804 	.word	0x20005804

08015578 <__sflush_r>:
 8015578:	898a      	ldrh	r2, [r1, #12]
 801557a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801557e:	4605      	mov	r5, r0
 8015580:	0710      	lsls	r0, r2, #28
 8015582:	460c      	mov	r4, r1
 8015584:	d458      	bmi.n	8015638 <__sflush_r+0xc0>
 8015586:	684b      	ldr	r3, [r1, #4]
 8015588:	2b00      	cmp	r3, #0
 801558a:	dc05      	bgt.n	8015598 <__sflush_r+0x20>
 801558c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801558e:	2b00      	cmp	r3, #0
 8015590:	dc02      	bgt.n	8015598 <__sflush_r+0x20>
 8015592:	2000      	movs	r0, #0
 8015594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015598:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801559a:	2e00      	cmp	r6, #0
 801559c:	d0f9      	beq.n	8015592 <__sflush_r+0x1a>
 801559e:	2300      	movs	r3, #0
 80155a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80155a4:	682f      	ldr	r7, [r5, #0]
 80155a6:	602b      	str	r3, [r5, #0]
 80155a8:	d032      	beq.n	8015610 <__sflush_r+0x98>
 80155aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80155ac:	89a3      	ldrh	r3, [r4, #12]
 80155ae:	075a      	lsls	r2, r3, #29
 80155b0:	d505      	bpl.n	80155be <__sflush_r+0x46>
 80155b2:	6863      	ldr	r3, [r4, #4]
 80155b4:	1ac0      	subs	r0, r0, r3
 80155b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80155b8:	b10b      	cbz	r3, 80155be <__sflush_r+0x46>
 80155ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80155bc:	1ac0      	subs	r0, r0, r3
 80155be:	2300      	movs	r3, #0
 80155c0:	4602      	mov	r2, r0
 80155c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80155c4:	6a21      	ldr	r1, [r4, #32]
 80155c6:	4628      	mov	r0, r5
 80155c8:	47b0      	blx	r6
 80155ca:	1c43      	adds	r3, r0, #1
 80155cc:	89a3      	ldrh	r3, [r4, #12]
 80155ce:	d106      	bne.n	80155de <__sflush_r+0x66>
 80155d0:	6829      	ldr	r1, [r5, #0]
 80155d2:	291d      	cmp	r1, #29
 80155d4:	d82c      	bhi.n	8015630 <__sflush_r+0xb8>
 80155d6:	4a2a      	ldr	r2, [pc, #168]	; (8015680 <__sflush_r+0x108>)
 80155d8:	40ca      	lsrs	r2, r1
 80155da:	07d6      	lsls	r6, r2, #31
 80155dc:	d528      	bpl.n	8015630 <__sflush_r+0xb8>
 80155de:	2200      	movs	r2, #0
 80155e0:	6062      	str	r2, [r4, #4]
 80155e2:	04d9      	lsls	r1, r3, #19
 80155e4:	6922      	ldr	r2, [r4, #16]
 80155e6:	6022      	str	r2, [r4, #0]
 80155e8:	d504      	bpl.n	80155f4 <__sflush_r+0x7c>
 80155ea:	1c42      	adds	r2, r0, #1
 80155ec:	d101      	bne.n	80155f2 <__sflush_r+0x7a>
 80155ee:	682b      	ldr	r3, [r5, #0]
 80155f0:	b903      	cbnz	r3, 80155f4 <__sflush_r+0x7c>
 80155f2:	6560      	str	r0, [r4, #84]	; 0x54
 80155f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80155f6:	602f      	str	r7, [r5, #0]
 80155f8:	2900      	cmp	r1, #0
 80155fa:	d0ca      	beq.n	8015592 <__sflush_r+0x1a>
 80155fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015600:	4299      	cmp	r1, r3
 8015602:	d002      	beq.n	801560a <__sflush_r+0x92>
 8015604:	4628      	mov	r0, r5
 8015606:	f7ff fddf 	bl	80151c8 <_free_r>
 801560a:	2000      	movs	r0, #0
 801560c:	6360      	str	r0, [r4, #52]	; 0x34
 801560e:	e7c1      	b.n	8015594 <__sflush_r+0x1c>
 8015610:	6a21      	ldr	r1, [r4, #32]
 8015612:	2301      	movs	r3, #1
 8015614:	4628      	mov	r0, r5
 8015616:	47b0      	blx	r6
 8015618:	1c41      	adds	r1, r0, #1
 801561a:	d1c7      	bne.n	80155ac <__sflush_r+0x34>
 801561c:	682b      	ldr	r3, [r5, #0]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d0c4      	beq.n	80155ac <__sflush_r+0x34>
 8015622:	2b1d      	cmp	r3, #29
 8015624:	d001      	beq.n	801562a <__sflush_r+0xb2>
 8015626:	2b16      	cmp	r3, #22
 8015628:	d101      	bne.n	801562e <__sflush_r+0xb6>
 801562a:	602f      	str	r7, [r5, #0]
 801562c:	e7b1      	b.n	8015592 <__sflush_r+0x1a>
 801562e:	89a3      	ldrh	r3, [r4, #12]
 8015630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015634:	81a3      	strh	r3, [r4, #12]
 8015636:	e7ad      	b.n	8015594 <__sflush_r+0x1c>
 8015638:	690f      	ldr	r7, [r1, #16]
 801563a:	2f00      	cmp	r7, #0
 801563c:	d0a9      	beq.n	8015592 <__sflush_r+0x1a>
 801563e:	0793      	lsls	r3, r2, #30
 8015640:	680e      	ldr	r6, [r1, #0]
 8015642:	bf08      	it	eq
 8015644:	694b      	ldreq	r3, [r1, #20]
 8015646:	600f      	str	r7, [r1, #0]
 8015648:	bf18      	it	ne
 801564a:	2300      	movne	r3, #0
 801564c:	eba6 0807 	sub.w	r8, r6, r7
 8015650:	608b      	str	r3, [r1, #8]
 8015652:	f1b8 0f00 	cmp.w	r8, #0
 8015656:	dd9c      	ble.n	8015592 <__sflush_r+0x1a>
 8015658:	6a21      	ldr	r1, [r4, #32]
 801565a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801565c:	4643      	mov	r3, r8
 801565e:	463a      	mov	r2, r7
 8015660:	4628      	mov	r0, r5
 8015662:	47b0      	blx	r6
 8015664:	2800      	cmp	r0, #0
 8015666:	dc06      	bgt.n	8015676 <__sflush_r+0xfe>
 8015668:	89a3      	ldrh	r3, [r4, #12]
 801566a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801566e:	81a3      	strh	r3, [r4, #12]
 8015670:	f04f 30ff 	mov.w	r0, #4294967295
 8015674:	e78e      	b.n	8015594 <__sflush_r+0x1c>
 8015676:	4407      	add	r7, r0
 8015678:	eba8 0800 	sub.w	r8, r8, r0
 801567c:	e7e9      	b.n	8015652 <__sflush_r+0xda>
 801567e:	bf00      	nop
 8015680:	20400001 	.word	0x20400001

08015684 <_fflush_r>:
 8015684:	b538      	push	{r3, r4, r5, lr}
 8015686:	690b      	ldr	r3, [r1, #16]
 8015688:	4605      	mov	r5, r0
 801568a:	460c      	mov	r4, r1
 801568c:	b913      	cbnz	r3, 8015694 <_fflush_r+0x10>
 801568e:	2500      	movs	r5, #0
 8015690:	4628      	mov	r0, r5
 8015692:	bd38      	pop	{r3, r4, r5, pc}
 8015694:	b118      	cbz	r0, 801569e <_fflush_r+0x1a>
 8015696:	6983      	ldr	r3, [r0, #24]
 8015698:	b90b      	cbnz	r3, 801569e <_fflush_r+0x1a>
 801569a:	f7ff fca9 	bl	8014ff0 <__sinit>
 801569e:	4b14      	ldr	r3, [pc, #80]	; (80156f0 <_fflush_r+0x6c>)
 80156a0:	429c      	cmp	r4, r3
 80156a2:	d11b      	bne.n	80156dc <_fflush_r+0x58>
 80156a4:	686c      	ldr	r4, [r5, #4]
 80156a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d0ef      	beq.n	801568e <_fflush_r+0xa>
 80156ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80156b0:	07d0      	lsls	r0, r2, #31
 80156b2:	d404      	bmi.n	80156be <_fflush_r+0x3a>
 80156b4:	0599      	lsls	r1, r3, #22
 80156b6:	d402      	bmi.n	80156be <_fflush_r+0x3a>
 80156b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156ba:	f7ff fd5c 	bl	8015176 <__retarget_lock_acquire_recursive>
 80156be:	4628      	mov	r0, r5
 80156c0:	4621      	mov	r1, r4
 80156c2:	f7ff ff59 	bl	8015578 <__sflush_r>
 80156c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80156c8:	07da      	lsls	r2, r3, #31
 80156ca:	4605      	mov	r5, r0
 80156cc:	d4e0      	bmi.n	8015690 <_fflush_r+0xc>
 80156ce:	89a3      	ldrh	r3, [r4, #12]
 80156d0:	059b      	lsls	r3, r3, #22
 80156d2:	d4dd      	bmi.n	8015690 <_fflush_r+0xc>
 80156d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80156d6:	f7ff fd4f 	bl	8015178 <__retarget_lock_release_recursive>
 80156da:	e7d9      	b.n	8015690 <_fflush_r+0xc>
 80156dc:	4b05      	ldr	r3, [pc, #20]	; (80156f4 <_fflush_r+0x70>)
 80156de:	429c      	cmp	r4, r3
 80156e0:	d101      	bne.n	80156e6 <_fflush_r+0x62>
 80156e2:	68ac      	ldr	r4, [r5, #8]
 80156e4:	e7df      	b.n	80156a6 <_fflush_r+0x22>
 80156e6:	4b04      	ldr	r3, [pc, #16]	; (80156f8 <_fflush_r+0x74>)
 80156e8:	429c      	cmp	r4, r3
 80156ea:	bf08      	it	eq
 80156ec:	68ec      	ldreq	r4, [r5, #12]
 80156ee:	e7da      	b.n	80156a6 <_fflush_r+0x22>
 80156f0:	08018d20 	.word	0x08018d20
 80156f4:	08018d40 	.word	0x08018d40
 80156f8:	08018d00 	.word	0x08018d00

080156fc <_lseek_r>:
 80156fc:	b538      	push	{r3, r4, r5, lr}
 80156fe:	4d07      	ldr	r5, [pc, #28]	; (801571c <_lseek_r+0x20>)
 8015700:	4604      	mov	r4, r0
 8015702:	4608      	mov	r0, r1
 8015704:	4611      	mov	r1, r2
 8015706:	2200      	movs	r2, #0
 8015708:	602a      	str	r2, [r5, #0]
 801570a:	461a      	mov	r2, r3
 801570c:	f7ec fc22 	bl	8001f54 <_lseek>
 8015710:	1c43      	adds	r3, r0, #1
 8015712:	d102      	bne.n	801571a <_lseek_r+0x1e>
 8015714:	682b      	ldr	r3, [r5, #0]
 8015716:	b103      	cbz	r3, 801571a <_lseek_r+0x1e>
 8015718:	6023      	str	r3, [r4, #0]
 801571a:	bd38      	pop	{r3, r4, r5, pc}
 801571c:	20005804 	.word	0x20005804

08015720 <__malloc_lock>:
 8015720:	4801      	ldr	r0, [pc, #4]	; (8015728 <__malloc_lock+0x8>)
 8015722:	f7ff bd28 	b.w	8015176 <__retarget_lock_acquire_recursive>
 8015726:	bf00      	nop
 8015728:	200057f8 	.word	0x200057f8

0801572c <__malloc_unlock>:
 801572c:	4801      	ldr	r0, [pc, #4]	; (8015734 <__malloc_unlock+0x8>)
 801572e:	f7ff bd23 	b.w	8015178 <__retarget_lock_release_recursive>
 8015732:	bf00      	nop
 8015734:	200057f8 	.word	0x200057f8

08015738 <__sfputc_r>:
 8015738:	6893      	ldr	r3, [r2, #8]
 801573a:	3b01      	subs	r3, #1
 801573c:	2b00      	cmp	r3, #0
 801573e:	b410      	push	{r4}
 8015740:	6093      	str	r3, [r2, #8]
 8015742:	da08      	bge.n	8015756 <__sfputc_r+0x1e>
 8015744:	6994      	ldr	r4, [r2, #24]
 8015746:	42a3      	cmp	r3, r4
 8015748:	db01      	blt.n	801574e <__sfputc_r+0x16>
 801574a:	290a      	cmp	r1, #10
 801574c:	d103      	bne.n	8015756 <__sfputc_r+0x1e>
 801574e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015752:	f000 baf1 	b.w	8015d38 <__swbuf_r>
 8015756:	6813      	ldr	r3, [r2, #0]
 8015758:	1c58      	adds	r0, r3, #1
 801575a:	6010      	str	r0, [r2, #0]
 801575c:	7019      	strb	r1, [r3, #0]
 801575e:	4608      	mov	r0, r1
 8015760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015764:	4770      	bx	lr

08015766 <__sfputs_r>:
 8015766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015768:	4606      	mov	r6, r0
 801576a:	460f      	mov	r7, r1
 801576c:	4614      	mov	r4, r2
 801576e:	18d5      	adds	r5, r2, r3
 8015770:	42ac      	cmp	r4, r5
 8015772:	d101      	bne.n	8015778 <__sfputs_r+0x12>
 8015774:	2000      	movs	r0, #0
 8015776:	e007      	b.n	8015788 <__sfputs_r+0x22>
 8015778:	f814 1b01 	ldrb.w	r1, [r4], #1
 801577c:	463a      	mov	r2, r7
 801577e:	4630      	mov	r0, r6
 8015780:	f7ff ffda 	bl	8015738 <__sfputc_r>
 8015784:	1c43      	adds	r3, r0, #1
 8015786:	d1f3      	bne.n	8015770 <__sfputs_r+0xa>
 8015788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801578c <_vfiprintf_r>:
 801578c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015790:	460d      	mov	r5, r1
 8015792:	b09d      	sub	sp, #116	; 0x74
 8015794:	4614      	mov	r4, r2
 8015796:	4698      	mov	r8, r3
 8015798:	4606      	mov	r6, r0
 801579a:	b118      	cbz	r0, 80157a4 <_vfiprintf_r+0x18>
 801579c:	6983      	ldr	r3, [r0, #24]
 801579e:	b90b      	cbnz	r3, 80157a4 <_vfiprintf_r+0x18>
 80157a0:	f7ff fc26 	bl	8014ff0 <__sinit>
 80157a4:	4b89      	ldr	r3, [pc, #548]	; (80159cc <_vfiprintf_r+0x240>)
 80157a6:	429d      	cmp	r5, r3
 80157a8:	d11b      	bne.n	80157e2 <_vfiprintf_r+0x56>
 80157aa:	6875      	ldr	r5, [r6, #4]
 80157ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157ae:	07d9      	lsls	r1, r3, #31
 80157b0:	d405      	bmi.n	80157be <_vfiprintf_r+0x32>
 80157b2:	89ab      	ldrh	r3, [r5, #12]
 80157b4:	059a      	lsls	r2, r3, #22
 80157b6:	d402      	bmi.n	80157be <_vfiprintf_r+0x32>
 80157b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80157ba:	f7ff fcdc 	bl	8015176 <__retarget_lock_acquire_recursive>
 80157be:	89ab      	ldrh	r3, [r5, #12]
 80157c0:	071b      	lsls	r3, r3, #28
 80157c2:	d501      	bpl.n	80157c8 <_vfiprintf_r+0x3c>
 80157c4:	692b      	ldr	r3, [r5, #16]
 80157c6:	b9eb      	cbnz	r3, 8015804 <_vfiprintf_r+0x78>
 80157c8:	4629      	mov	r1, r5
 80157ca:	4630      	mov	r0, r6
 80157cc:	f000 fb06 	bl	8015ddc <__swsetup_r>
 80157d0:	b1c0      	cbz	r0, 8015804 <_vfiprintf_r+0x78>
 80157d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80157d4:	07dc      	lsls	r4, r3, #31
 80157d6:	d50e      	bpl.n	80157f6 <_vfiprintf_r+0x6a>
 80157d8:	f04f 30ff 	mov.w	r0, #4294967295
 80157dc:	b01d      	add	sp, #116	; 0x74
 80157de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80157e2:	4b7b      	ldr	r3, [pc, #492]	; (80159d0 <_vfiprintf_r+0x244>)
 80157e4:	429d      	cmp	r5, r3
 80157e6:	d101      	bne.n	80157ec <_vfiprintf_r+0x60>
 80157e8:	68b5      	ldr	r5, [r6, #8]
 80157ea:	e7df      	b.n	80157ac <_vfiprintf_r+0x20>
 80157ec:	4b79      	ldr	r3, [pc, #484]	; (80159d4 <_vfiprintf_r+0x248>)
 80157ee:	429d      	cmp	r5, r3
 80157f0:	bf08      	it	eq
 80157f2:	68f5      	ldreq	r5, [r6, #12]
 80157f4:	e7da      	b.n	80157ac <_vfiprintf_r+0x20>
 80157f6:	89ab      	ldrh	r3, [r5, #12]
 80157f8:	0598      	lsls	r0, r3, #22
 80157fa:	d4ed      	bmi.n	80157d8 <_vfiprintf_r+0x4c>
 80157fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80157fe:	f7ff fcbb 	bl	8015178 <__retarget_lock_release_recursive>
 8015802:	e7e9      	b.n	80157d8 <_vfiprintf_r+0x4c>
 8015804:	2300      	movs	r3, #0
 8015806:	9309      	str	r3, [sp, #36]	; 0x24
 8015808:	2320      	movs	r3, #32
 801580a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801580e:	f8cd 800c 	str.w	r8, [sp, #12]
 8015812:	2330      	movs	r3, #48	; 0x30
 8015814:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80159d8 <_vfiprintf_r+0x24c>
 8015818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801581c:	f04f 0901 	mov.w	r9, #1
 8015820:	4623      	mov	r3, r4
 8015822:	469a      	mov	sl, r3
 8015824:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015828:	b10a      	cbz	r2, 801582e <_vfiprintf_r+0xa2>
 801582a:	2a25      	cmp	r2, #37	; 0x25
 801582c:	d1f9      	bne.n	8015822 <_vfiprintf_r+0x96>
 801582e:	ebba 0b04 	subs.w	fp, sl, r4
 8015832:	d00b      	beq.n	801584c <_vfiprintf_r+0xc0>
 8015834:	465b      	mov	r3, fp
 8015836:	4622      	mov	r2, r4
 8015838:	4629      	mov	r1, r5
 801583a:	4630      	mov	r0, r6
 801583c:	f7ff ff93 	bl	8015766 <__sfputs_r>
 8015840:	3001      	adds	r0, #1
 8015842:	f000 80aa 	beq.w	801599a <_vfiprintf_r+0x20e>
 8015846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015848:	445a      	add	r2, fp
 801584a:	9209      	str	r2, [sp, #36]	; 0x24
 801584c:	f89a 3000 	ldrb.w	r3, [sl]
 8015850:	2b00      	cmp	r3, #0
 8015852:	f000 80a2 	beq.w	801599a <_vfiprintf_r+0x20e>
 8015856:	2300      	movs	r3, #0
 8015858:	f04f 32ff 	mov.w	r2, #4294967295
 801585c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015860:	f10a 0a01 	add.w	sl, sl, #1
 8015864:	9304      	str	r3, [sp, #16]
 8015866:	9307      	str	r3, [sp, #28]
 8015868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801586c:	931a      	str	r3, [sp, #104]	; 0x68
 801586e:	4654      	mov	r4, sl
 8015870:	2205      	movs	r2, #5
 8015872:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015876:	4858      	ldr	r0, [pc, #352]	; (80159d8 <_vfiprintf_r+0x24c>)
 8015878:	f7ea fcd2 	bl	8000220 <memchr>
 801587c:	9a04      	ldr	r2, [sp, #16]
 801587e:	b9d8      	cbnz	r0, 80158b8 <_vfiprintf_r+0x12c>
 8015880:	06d1      	lsls	r1, r2, #27
 8015882:	bf44      	itt	mi
 8015884:	2320      	movmi	r3, #32
 8015886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801588a:	0713      	lsls	r3, r2, #28
 801588c:	bf44      	itt	mi
 801588e:	232b      	movmi	r3, #43	; 0x2b
 8015890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015894:	f89a 3000 	ldrb.w	r3, [sl]
 8015898:	2b2a      	cmp	r3, #42	; 0x2a
 801589a:	d015      	beq.n	80158c8 <_vfiprintf_r+0x13c>
 801589c:	9a07      	ldr	r2, [sp, #28]
 801589e:	4654      	mov	r4, sl
 80158a0:	2000      	movs	r0, #0
 80158a2:	f04f 0c0a 	mov.w	ip, #10
 80158a6:	4621      	mov	r1, r4
 80158a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80158ac:	3b30      	subs	r3, #48	; 0x30
 80158ae:	2b09      	cmp	r3, #9
 80158b0:	d94e      	bls.n	8015950 <_vfiprintf_r+0x1c4>
 80158b2:	b1b0      	cbz	r0, 80158e2 <_vfiprintf_r+0x156>
 80158b4:	9207      	str	r2, [sp, #28]
 80158b6:	e014      	b.n	80158e2 <_vfiprintf_r+0x156>
 80158b8:	eba0 0308 	sub.w	r3, r0, r8
 80158bc:	fa09 f303 	lsl.w	r3, r9, r3
 80158c0:	4313      	orrs	r3, r2
 80158c2:	9304      	str	r3, [sp, #16]
 80158c4:	46a2      	mov	sl, r4
 80158c6:	e7d2      	b.n	801586e <_vfiprintf_r+0xe2>
 80158c8:	9b03      	ldr	r3, [sp, #12]
 80158ca:	1d19      	adds	r1, r3, #4
 80158cc:	681b      	ldr	r3, [r3, #0]
 80158ce:	9103      	str	r1, [sp, #12]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	bfbb      	ittet	lt
 80158d4:	425b      	neglt	r3, r3
 80158d6:	f042 0202 	orrlt.w	r2, r2, #2
 80158da:	9307      	strge	r3, [sp, #28]
 80158dc:	9307      	strlt	r3, [sp, #28]
 80158de:	bfb8      	it	lt
 80158e0:	9204      	strlt	r2, [sp, #16]
 80158e2:	7823      	ldrb	r3, [r4, #0]
 80158e4:	2b2e      	cmp	r3, #46	; 0x2e
 80158e6:	d10c      	bne.n	8015902 <_vfiprintf_r+0x176>
 80158e8:	7863      	ldrb	r3, [r4, #1]
 80158ea:	2b2a      	cmp	r3, #42	; 0x2a
 80158ec:	d135      	bne.n	801595a <_vfiprintf_r+0x1ce>
 80158ee:	9b03      	ldr	r3, [sp, #12]
 80158f0:	1d1a      	adds	r2, r3, #4
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	9203      	str	r2, [sp, #12]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	bfb8      	it	lt
 80158fa:	f04f 33ff 	movlt.w	r3, #4294967295
 80158fe:	3402      	adds	r4, #2
 8015900:	9305      	str	r3, [sp, #20]
 8015902:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80159e8 <_vfiprintf_r+0x25c>
 8015906:	7821      	ldrb	r1, [r4, #0]
 8015908:	2203      	movs	r2, #3
 801590a:	4650      	mov	r0, sl
 801590c:	f7ea fc88 	bl	8000220 <memchr>
 8015910:	b140      	cbz	r0, 8015924 <_vfiprintf_r+0x198>
 8015912:	2340      	movs	r3, #64	; 0x40
 8015914:	eba0 000a 	sub.w	r0, r0, sl
 8015918:	fa03 f000 	lsl.w	r0, r3, r0
 801591c:	9b04      	ldr	r3, [sp, #16]
 801591e:	4303      	orrs	r3, r0
 8015920:	3401      	adds	r4, #1
 8015922:	9304      	str	r3, [sp, #16]
 8015924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015928:	482c      	ldr	r0, [pc, #176]	; (80159dc <_vfiprintf_r+0x250>)
 801592a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801592e:	2206      	movs	r2, #6
 8015930:	f7ea fc76 	bl	8000220 <memchr>
 8015934:	2800      	cmp	r0, #0
 8015936:	d03f      	beq.n	80159b8 <_vfiprintf_r+0x22c>
 8015938:	4b29      	ldr	r3, [pc, #164]	; (80159e0 <_vfiprintf_r+0x254>)
 801593a:	bb1b      	cbnz	r3, 8015984 <_vfiprintf_r+0x1f8>
 801593c:	9b03      	ldr	r3, [sp, #12]
 801593e:	3307      	adds	r3, #7
 8015940:	f023 0307 	bic.w	r3, r3, #7
 8015944:	3308      	adds	r3, #8
 8015946:	9303      	str	r3, [sp, #12]
 8015948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801594a:	443b      	add	r3, r7
 801594c:	9309      	str	r3, [sp, #36]	; 0x24
 801594e:	e767      	b.n	8015820 <_vfiprintf_r+0x94>
 8015950:	fb0c 3202 	mla	r2, ip, r2, r3
 8015954:	460c      	mov	r4, r1
 8015956:	2001      	movs	r0, #1
 8015958:	e7a5      	b.n	80158a6 <_vfiprintf_r+0x11a>
 801595a:	2300      	movs	r3, #0
 801595c:	3401      	adds	r4, #1
 801595e:	9305      	str	r3, [sp, #20]
 8015960:	4619      	mov	r1, r3
 8015962:	f04f 0c0a 	mov.w	ip, #10
 8015966:	4620      	mov	r0, r4
 8015968:	f810 2b01 	ldrb.w	r2, [r0], #1
 801596c:	3a30      	subs	r2, #48	; 0x30
 801596e:	2a09      	cmp	r2, #9
 8015970:	d903      	bls.n	801597a <_vfiprintf_r+0x1ee>
 8015972:	2b00      	cmp	r3, #0
 8015974:	d0c5      	beq.n	8015902 <_vfiprintf_r+0x176>
 8015976:	9105      	str	r1, [sp, #20]
 8015978:	e7c3      	b.n	8015902 <_vfiprintf_r+0x176>
 801597a:	fb0c 2101 	mla	r1, ip, r1, r2
 801597e:	4604      	mov	r4, r0
 8015980:	2301      	movs	r3, #1
 8015982:	e7f0      	b.n	8015966 <_vfiprintf_r+0x1da>
 8015984:	ab03      	add	r3, sp, #12
 8015986:	9300      	str	r3, [sp, #0]
 8015988:	462a      	mov	r2, r5
 801598a:	4b16      	ldr	r3, [pc, #88]	; (80159e4 <_vfiprintf_r+0x258>)
 801598c:	a904      	add	r1, sp, #16
 801598e:	4630      	mov	r0, r6
 8015990:	f3af 8000 	nop.w
 8015994:	4607      	mov	r7, r0
 8015996:	1c78      	adds	r0, r7, #1
 8015998:	d1d6      	bne.n	8015948 <_vfiprintf_r+0x1bc>
 801599a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801599c:	07d9      	lsls	r1, r3, #31
 801599e:	d405      	bmi.n	80159ac <_vfiprintf_r+0x220>
 80159a0:	89ab      	ldrh	r3, [r5, #12]
 80159a2:	059a      	lsls	r2, r3, #22
 80159a4:	d402      	bmi.n	80159ac <_vfiprintf_r+0x220>
 80159a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80159a8:	f7ff fbe6 	bl	8015178 <__retarget_lock_release_recursive>
 80159ac:	89ab      	ldrh	r3, [r5, #12]
 80159ae:	065b      	lsls	r3, r3, #25
 80159b0:	f53f af12 	bmi.w	80157d8 <_vfiprintf_r+0x4c>
 80159b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80159b6:	e711      	b.n	80157dc <_vfiprintf_r+0x50>
 80159b8:	ab03      	add	r3, sp, #12
 80159ba:	9300      	str	r3, [sp, #0]
 80159bc:	462a      	mov	r2, r5
 80159be:	4b09      	ldr	r3, [pc, #36]	; (80159e4 <_vfiprintf_r+0x258>)
 80159c0:	a904      	add	r1, sp, #16
 80159c2:	4630      	mov	r0, r6
 80159c4:	f000 f880 	bl	8015ac8 <_printf_i>
 80159c8:	e7e4      	b.n	8015994 <_vfiprintf_r+0x208>
 80159ca:	bf00      	nop
 80159cc:	08018d20 	.word	0x08018d20
 80159d0:	08018d40 	.word	0x08018d40
 80159d4:	08018d00 	.word	0x08018d00
 80159d8:	08018d64 	.word	0x08018d64
 80159dc:	08018d6e 	.word	0x08018d6e
 80159e0:	00000000 	.word	0x00000000
 80159e4:	08015767 	.word	0x08015767
 80159e8:	08018d6a 	.word	0x08018d6a

080159ec <_printf_common>:
 80159ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80159f0:	4616      	mov	r6, r2
 80159f2:	4699      	mov	r9, r3
 80159f4:	688a      	ldr	r2, [r1, #8]
 80159f6:	690b      	ldr	r3, [r1, #16]
 80159f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80159fc:	4293      	cmp	r3, r2
 80159fe:	bfb8      	it	lt
 8015a00:	4613      	movlt	r3, r2
 8015a02:	6033      	str	r3, [r6, #0]
 8015a04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015a08:	4607      	mov	r7, r0
 8015a0a:	460c      	mov	r4, r1
 8015a0c:	b10a      	cbz	r2, 8015a12 <_printf_common+0x26>
 8015a0e:	3301      	adds	r3, #1
 8015a10:	6033      	str	r3, [r6, #0]
 8015a12:	6823      	ldr	r3, [r4, #0]
 8015a14:	0699      	lsls	r1, r3, #26
 8015a16:	bf42      	ittt	mi
 8015a18:	6833      	ldrmi	r3, [r6, #0]
 8015a1a:	3302      	addmi	r3, #2
 8015a1c:	6033      	strmi	r3, [r6, #0]
 8015a1e:	6825      	ldr	r5, [r4, #0]
 8015a20:	f015 0506 	ands.w	r5, r5, #6
 8015a24:	d106      	bne.n	8015a34 <_printf_common+0x48>
 8015a26:	f104 0a19 	add.w	sl, r4, #25
 8015a2a:	68e3      	ldr	r3, [r4, #12]
 8015a2c:	6832      	ldr	r2, [r6, #0]
 8015a2e:	1a9b      	subs	r3, r3, r2
 8015a30:	42ab      	cmp	r3, r5
 8015a32:	dc26      	bgt.n	8015a82 <_printf_common+0x96>
 8015a34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015a38:	1e13      	subs	r3, r2, #0
 8015a3a:	6822      	ldr	r2, [r4, #0]
 8015a3c:	bf18      	it	ne
 8015a3e:	2301      	movne	r3, #1
 8015a40:	0692      	lsls	r2, r2, #26
 8015a42:	d42b      	bmi.n	8015a9c <_printf_common+0xb0>
 8015a44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015a48:	4649      	mov	r1, r9
 8015a4a:	4638      	mov	r0, r7
 8015a4c:	47c0      	blx	r8
 8015a4e:	3001      	adds	r0, #1
 8015a50:	d01e      	beq.n	8015a90 <_printf_common+0xa4>
 8015a52:	6823      	ldr	r3, [r4, #0]
 8015a54:	68e5      	ldr	r5, [r4, #12]
 8015a56:	6832      	ldr	r2, [r6, #0]
 8015a58:	f003 0306 	and.w	r3, r3, #6
 8015a5c:	2b04      	cmp	r3, #4
 8015a5e:	bf08      	it	eq
 8015a60:	1aad      	subeq	r5, r5, r2
 8015a62:	68a3      	ldr	r3, [r4, #8]
 8015a64:	6922      	ldr	r2, [r4, #16]
 8015a66:	bf0c      	ite	eq
 8015a68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015a6c:	2500      	movne	r5, #0
 8015a6e:	4293      	cmp	r3, r2
 8015a70:	bfc4      	itt	gt
 8015a72:	1a9b      	subgt	r3, r3, r2
 8015a74:	18ed      	addgt	r5, r5, r3
 8015a76:	2600      	movs	r6, #0
 8015a78:	341a      	adds	r4, #26
 8015a7a:	42b5      	cmp	r5, r6
 8015a7c:	d11a      	bne.n	8015ab4 <_printf_common+0xc8>
 8015a7e:	2000      	movs	r0, #0
 8015a80:	e008      	b.n	8015a94 <_printf_common+0xa8>
 8015a82:	2301      	movs	r3, #1
 8015a84:	4652      	mov	r2, sl
 8015a86:	4649      	mov	r1, r9
 8015a88:	4638      	mov	r0, r7
 8015a8a:	47c0      	blx	r8
 8015a8c:	3001      	adds	r0, #1
 8015a8e:	d103      	bne.n	8015a98 <_printf_common+0xac>
 8015a90:	f04f 30ff 	mov.w	r0, #4294967295
 8015a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a98:	3501      	adds	r5, #1
 8015a9a:	e7c6      	b.n	8015a2a <_printf_common+0x3e>
 8015a9c:	18e1      	adds	r1, r4, r3
 8015a9e:	1c5a      	adds	r2, r3, #1
 8015aa0:	2030      	movs	r0, #48	; 0x30
 8015aa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015aa6:	4422      	add	r2, r4
 8015aa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015aac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ab0:	3302      	adds	r3, #2
 8015ab2:	e7c7      	b.n	8015a44 <_printf_common+0x58>
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	4622      	mov	r2, r4
 8015ab8:	4649      	mov	r1, r9
 8015aba:	4638      	mov	r0, r7
 8015abc:	47c0      	blx	r8
 8015abe:	3001      	adds	r0, #1
 8015ac0:	d0e6      	beq.n	8015a90 <_printf_common+0xa4>
 8015ac2:	3601      	adds	r6, #1
 8015ac4:	e7d9      	b.n	8015a7a <_printf_common+0x8e>
	...

08015ac8 <_printf_i>:
 8015ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015acc:	7e0f      	ldrb	r7, [r1, #24]
 8015ace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015ad0:	2f78      	cmp	r7, #120	; 0x78
 8015ad2:	4691      	mov	r9, r2
 8015ad4:	4680      	mov	r8, r0
 8015ad6:	460c      	mov	r4, r1
 8015ad8:	469a      	mov	sl, r3
 8015ada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015ade:	d807      	bhi.n	8015af0 <_printf_i+0x28>
 8015ae0:	2f62      	cmp	r7, #98	; 0x62
 8015ae2:	d80a      	bhi.n	8015afa <_printf_i+0x32>
 8015ae4:	2f00      	cmp	r7, #0
 8015ae6:	f000 80d8 	beq.w	8015c9a <_printf_i+0x1d2>
 8015aea:	2f58      	cmp	r7, #88	; 0x58
 8015aec:	f000 80a3 	beq.w	8015c36 <_printf_i+0x16e>
 8015af0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015af4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015af8:	e03a      	b.n	8015b70 <_printf_i+0xa8>
 8015afa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015afe:	2b15      	cmp	r3, #21
 8015b00:	d8f6      	bhi.n	8015af0 <_printf_i+0x28>
 8015b02:	a101      	add	r1, pc, #4	; (adr r1, 8015b08 <_printf_i+0x40>)
 8015b04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015b08:	08015b61 	.word	0x08015b61
 8015b0c:	08015b75 	.word	0x08015b75
 8015b10:	08015af1 	.word	0x08015af1
 8015b14:	08015af1 	.word	0x08015af1
 8015b18:	08015af1 	.word	0x08015af1
 8015b1c:	08015af1 	.word	0x08015af1
 8015b20:	08015b75 	.word	0x08015b75
 8015b24:	08015af1 	.word	0x08015af1
 8015b28:	08015af1 	.word	0x08015af1
 8015b2c:	08015af1 	.word	0x08015af1
 8015b30:	08015af1 	.word	0x08015af1
 8015b34:	08015c81 	.word	0x08015c81
 8015b38:	08015ba5 	.word	0x08015ba5
 8015b3c:	08015c63 	.word	0x08015c63
 8015b40:	08015af1 	.word	0x08015af1
 8015b44:	08015af1 	.word	0x08015af1
 8015b48:	08015ca3 	.word	0x08015ca3
 8015b4c:	08015af1 	.word	0x08015af1
 8015b50:	08015ba5 	.word	0x08015ba5
 8015b54:	08015af1 	.word	0x08015af1
 8015b58:	08015af1 	.word	0x08015af1
 8015b5c:	08015c6b 	.word	0x08015c6b
 8015b60:	682b      	ldr	r3, [r5, #0]
 8015b62:	1d1a      	adds	r2, r3, #4
 8015b64:	681b      	ldr	r3, [r3, #0]
 8015b66:	602a      	str	r2, [r5, #0]
 8015b68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015b6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015b70:	2301      	movs	r3, #1
 8015b72:	e0a3      	b.n	8015cbc <_printf_i+0x1f4>
 8015b74:	6820      	ldr	r0, [r4, #0]
 8015b76:	6829      	ldr	r1, [r5, #0]
 8015b78:	0606      	lsls	r6, r0, #24
 8015b7a:	f101 0304 	add.w	r3, r1, #4
 8015b7e:	d50a      	bpl.n	8015b96 <_printf_i+0xce>
 8015b80:	680e      	ldr	r6, [r1, #0]
 8015b82:	602b      	str	r3, [r5, #0]
 8015b84:	2e00      	cmp	r6, #0
 8015b86:	da03      	bge.n	8015b90 <_printf_i+0xc8>
 8015b88:	232d      	movs	r3, #45	; 0x2d
 8015b8a:	4276      	negs	r6, r6
 8015b8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b90:	485e      	ldr	r0, [pc, #376]	; (8015d0c <_printf_i+0x244>)
 8015b92:	230a      	movs	r3, #10
 8015b94:	e019      	b.n	8015bca <_printf_i+0x102>
 8015b96:	680e      	ldr	r6, [r1, #0]
 8015b98:	602b      	str	r3, [r5, #0]
 8015b9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015b9e:	bf18      	it	ne
 8015ba0:	b236      	sxthne	r6, r6
 8015ba2:	e7ef      	b.n	8015b84 <_printf_i+0xbc>
 8015ba4:	682b      	ldr	r3, [r5, #0]
 8015ba6:	6820      	ldr	r0, [r4, #0]
 8015ba8:	1d19      	adds	r1, r3, #4
 8015baa:	6029      	str	r1, [r5, #0]
 8015bac:	0601      	lsls	r1, r0, #24
 8015bae:	d501      	bpl.n	8015bb4 <_printf_i+0xec>
 8015bb0:	681e      	ldr	r6, [r3, #0]
 8015bb2:	e002      	b.n	8015bba <_printf_i+0xf2>
 8015bb4:	0646      	lsls	r6, r0, #25
 8015bb6:	d5fb      	bpl.n	8015bb0 <_printf_i+0xe8>
 8015bb8:	881e      	ldrh	r6, [r3, #0]
 8015bba:	4854      	ldr	r0, [pc, #336]	; (8015d0c <_printf_i+0x244>)
 8015bbc:	2f6f      	cmp	r7, #111	; 0x6f
 8015bbe:	bf0c      	ite	eq
 8015bc0:	2308      	moveq	r3, #8
 8015bc2:	230a      	movne	r3, #10
 8015bc4:	2100      	movs	r1, #0
 8015bc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015bca:	6865      	ldr	r5, [r4, #4]
 8015bcc:	60a5      	str	r5, [r4, #8]
 8015bce:	2d00      	cmp	r5, #0
 8015bd0:	bfa2      	ittt	ge
 8015bd2:	6821      	ldrge	r1, [r4, #0]
 8015bd4:	f021 0104 	bicge.w	r1, r1, #4
 8015bd8:	6021      	strge	r1, [r4, #0]
 8015bda:	b90e      	cbnz	r6, 8015be0 <_printf_i+0x118>
 8015bdc:	2d00      	cmp	r5, #0
 8015bde:	d04d      	beq.n	8015c7c <_printf_i+0x1b4>
 8015be0:	4615      	mov	r5, r2
 8015be2:	fbb6 f1f3 	udiv	r1, r6, r3
 8015be6:	fb03 6711 	mls	r7, r3, r1, r6
 8015bea:	5dc7      	ldrb	r7, [r0, r7]
 8015bec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015bf0:	4637      	mov	r7, r6
 8015bf2:	42bb      	cmp	r3, r7
 8015bf4:	460e      	mov	r6, r1
 8015bf6:	d9f4      	bls.n	8015be2 <_printf_i+0x11a>
 8015bf8:	2b08      	cmp	r3, #8
 8015bfa:	d10b      	bne.n	8015c14 <_printf_i+0x14c>
 8015bfc:	6823      	ldr	r3, [r4, #0]
 8015bfe:	07de      	lsls	r6, r3, #31
 8015c00:	d508      	bpl.n	8015c14 <_printf_i+0x14c>
 8015c02:	6923      	ldr	r3, [r4, #16]
 8015c04:	6861      	ldr	r1, [r4, #4]
 8015c06:	4299      	cmp	r1, r3
 8015c08:	bfde      	ittt	le
 8015c0a:	2330      	movle	r3, #48	; 0x30
 8015c0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015c10:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015c14:	1b52      	subs	r2, r2, r5
 8015c16:	6122      	str	r2, [r4, #16]
 8015c18:	f8cd a000 	str.w	sl, [sp]
 8015c1c:	464b      	mov	r3, r9
 8015c1e:	aa03      	add	r2, sp, #12
 8015c20:	4621      	mov	r1, r4
 8015c22:	4640      	mov	r0, r8
 8015c24:	f7ff fee2 	bl	80159ec <_printf_common>
 8015c28:	3001      	adds	r0, #1
 8015c2a:	d14c      	bne.n	8015cc6 <_printf_i+0x1fe>
 8015c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8015c30:	b004      	add	sp, #16
 8015c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015c36:	4835      	ldr	r0, [pc, #212]	; (8015d0c <_printf_i+0x244>)
 8015c38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015c3c:	6829      	ldr	r1, [r5, #0]
 8015c3e:	6823      	ldr	r3, [r4, #0]
 8015c40:	f851 6b04 	ldr.w	r6, [r1], #4
 8015c44:	6029      	str	r1, [r5, #0]
 8015c46:	061d      	lsls	r5, r3, #24
 8015c48:	d514      	bpl.n	8015c74 <_printf_i+0x1ac>
 8015c4a:	07df      	lsls	r7, r3, #31
 8015c4c:	bf44      	itt	mi
 8015c4e:	f043 0320 	orrmi.w	r3, r3, #32
 8015c52:	6023      	strmi	r3, [r4, #0]
 8015c54:	b91e      	cbnz	r6, 8015c5e <_printf_i+0x196>
 8015c56:	6823      	ldr	r3, [r4, #0]
 8015c58:	f023 0320 	bic.w	r3, r3, #32
 8015c5c:	6023      	str	r3, [r4, #0]
 8015c5e:	2310      	movs	r3, #16
 8015c60:	e7b0      	b.n	8015bc4 <_printf_i+0xfc>
 8015c62:	6823      	ldr	r3, [r4, #0]
 8015c64:	f043 0320 	orr.w	r3, r3, #32
 8015c68:	6023      	str	r3, [r4, #0]
 8015c6a:	2378      	movs	r3, #120	; 0x78
 8015c6c:	4828      	ldr	r0, [pc, #160]	; (8015d10 <_printf_i+0x248>)
 8015c6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015c72:	e7e3      	b.n	8015c3c <_printf_i+0x174>
 8015c74:	0659      	lsls	r1, r3, #25
 8015c76:	bf48      	it	mi
 8015c78:	b2b6      	uxthmi	r6, r6
 8015c7a:	e7e6      	b.n	8015c4a <_printf_i+0x182>
 8015c7c:	4615      	mov	r5, r2
 8015c7e:	e7bb      	b.n	8015bf8 <_printf_i+0x130>
 8015c80:	682b      	ldr	r3, [r5, #0]
 8015c82:	6826      	ldr	r6, [r4, #0]
 8015c84:	6961      	ldr	r1, [r4, #20]
 8015c86:	1d18      	adds	r0, r3, #4
 8015c88:	6028      	str	r0, [r5, #0]
 8015c8a:	0635      	lsls	r5, r6, #24
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	d501      	bpl.n	8015c94 <_printf_i+0x1cc>
 8015c90:	6019      	str	r1, [r3, #0]
 8015c92:	e002      	b.n	8015c9a <_printf_i+0x1d2>
 8015c94:	0670      	lsls	r0, r6, #25
 8015c96:	d5fb      	bpl.n	8015c90 <_printf_i+0x1c8>
 8015c98:	8019      	strh	r1, [r3, #0]
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	6123      	str	r3, [r4, #16]
 8015c9e:	4615      	mov	r5, r2
 8015ca0:	e7ba      	b.n	8015c18 <_printf_i+0x150>
 8015ca2:	682b      	ldr	r3, [r5, #0]
 8015ca4:	1d1a      	adds	r2, r3, #4
 8015ca6:	602a      	str	r2, [r5, #0]
 8015ca8:	681d      	ldr	r5, [r3, #0]
 8015caa:	6862      	ldr	r2, [r4, #4]
 8015cac:	2100      	movs	r1, #0
 8015cae:	4628      	mov	r0, r5
 8015cb0:	f7ea fab6 	bl	8000220 <memchr>
 8015cb4:	b108      	cbz	r0, 8015cba <_printf_i+0x1f2>
 8015cb6:	1b40      	subs	r0, r0, r5
 8015cb8:	6060      	str	r0, [r4, #4]
 8015cba:	6863      	ldr	r3, [r4, #4]
 8015cbc:	6123      	str	r3, [r4, #16]
 8015cbe:	2300      	movs	r3, #0
 8015cc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015cc4:	e7a8      	b.n	8015c18 <_printf_i+0x150>
 8015cc6:	6923      	ldr	r3, [r4, #16]
 8015cc8:	462a      	mov	r2, r5
 8015cca:	4649      	mov	r1, r9
 8015ccc:	4640      	mov	r0, r8
 8015cce:	47d0      	blx	sl
 8015cd0:	3001      	adds	r0, #1
 8015cd2:	d0ab      	beq.n	8015c2c <_printf_i+0x164>
 8015cd4:	6823      	ldr	r3, [r4, #0]
 8015cd6:	079b      	lsls	r3, r3, #30
 8015cd8:	d413      	bmi.n	8015d02 <_printf_i+0x23a>
 8015cda:	68e0      	ldr	r0, [r4, #12]
 8015cdc:	9b03      	ldr	r3, [sp, #12]
 8015cde:	4298      	cmp	r0, r3
 8015ce0:	bfb8      	it	lt
 8015ce2:	4618      	movlt	r0, r3
 8015ce4:	e7a4      	b.n	8015c30 <_printf_i+0x168>
 8015ce6:	2301      	movs	r3, #1
 8015ce8:	4632      	mov	r2, r6
 8015cea:	4649      	mov	r1, r9
 8015cec:	4640      	mov	r0, r8
 8015cee:	47d0      	blx	sl
 8015cf0:	3001      	adds	r0, #1
 8015cf2:	d09b      	beq.n	8015c2c <_printf_i+0x164>
 8015cf4:	3501      	adds	r5, #1
 8015cf6:	68e3      	ldr	r3, [r4, #12]
 8015cf8:	9903      	ldr	r1, [sp, #12]
 8015cfa:	1a5b      	subs	r3, r3, r1
 8015cfc:	42ab      	cmp	r3, r5
 8015cfe:	dcf2      	bgt.n	8015ce6 <_printf_i+0x21e>
 8015d00:	e7eb      	b.n	8015cda <_printf_i+0x212>
 8015d02:	2500      	movs	r5, #0
 8015d04:	f104 0619 	add.w	r6, r4, #25
 8015d08:	e7f5      	b.n	8015cf6 <_printf_i+0x22e>
 8015d0a:	bf00      	nop
 8015d0c:	08018d75 	.word	0x08018d75
 8015d10:	08018d86 	.word	0x08018d86

08015d14 <_read_r>:
 8015d14:	b538      	push	{r3, r4, r5, lr}
 8015d16:	4d07      	ldr	r5, [pc, #28]	; (8015d34 <_read_r+0x20>)
 8015d18:	4604      	mov	r4, r0
 8015d1a:	4608      	mov	r0, r1
 8015d1c:	4611      	mov	r1, r2
 8015d1e:	2200      	movs	r2, #0
 8015d20:	602a      	str	r2, [r5, #0]
 8015d22:	461a      	mov	r2, r3
 8015d24:	f7ec f8b6 	bl	8001e94 <_read>
 8015d28:	1c43      	adds	r3, r0, #1
 8015d2a:	d102      	bne.n	8015d32 <_read_r+0x1e>
 8015d2c:	682b      	ldr	r3, [r5, #0]
 8015d2e:	b103      	cbz	r3, 8015d32 <_read_r+0x1e>
 8015d30:	6023      	str	r3, [r4, #0]
 8015d32:	bd38      	pop	{r3, r4, r5, pc}
 8015d34:	20005804 	.word	0x20005804

08015d38 <__swbuf_r>:
 8015d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015d3a:	460e      	mov	r6, r1
 8015d3c:	4614      	mov	r4, r2
 8015d3e:	4605      	mov	r5, r0
 8015d40:	b118      	cbz	r0, 8015d4a <__swbuf_r+0x12>
 8015d42:	6983      	ldr	r3, [r0, #24]
 8015d44:	b90b      	cbnz	r3, 8015d4a <__swbuf_r+0x12>
 8015d46:	f7ff f953 	bl	8014ff0 <__sinit>
 8015d4a:	4b21      	ldr	r3, [pc, #132]	; (8015dd0 <__swbuf_r+0x98>)
 8015d4c:	429c      	cmp	r4, r3
 8015d4e:	d12b      	bne.n	8015da8 <__swbuf_r+0x70>
 8015d50:	686c      	ldr	r4, [r5, #4]
 8015d52:	69a3      	ldr	r3, [r4, #24]
 8015d54:	60a3      	str	r3, [r4, #8]
 8015d56:	89a3      	ldrh	r3, [r4, #12]
 8015d58:	071a      	lsls	r2, r3, #28
 8015d5a:	d52f      	bpl.n	8015dbc <__swbuf_r+0x84>
 8015d5c:	6923      	ldr	r3, [r4, #16]
 8015d5e:	b36b      	cbz	r3, 8015dbc <__swbuf_r+0x84>
 8015d60:	6923      	ldr	r3, [r4, #16]
 8015d62:	6820      	ldr	r0, [r4, #0]
 8015d64:	1ac0      	subs	r0, r0, r3
 8015d66:	6963      	ldr	r3, [r4, #20]
 8015d68:	b2f6      	uxtb	r6, r6
 8015d6a:	4283      	cmp	r3, r0
 8015d6c:	4637      	mov	r7, r6
 8015d6e:	dc04      	bgt.n	8015d7a <__swbuf_r+0x42>
 8015d70:	4621      	mov	r1, r4
 8015d72:	4628      	mov	r0, r5
 8015d74:	f7ff fc86 	bl	8015684 <_fflush_r>
 8015d78:	bb30      	cbnz	r0, 8015dc8 <__swbuf_r+0x90>
 8015d7a:	68a3      	ldr	r3, [r4, #8]
 8015d7c:	3b01      	subs	r3, #1
 8015d7e:	60a3      	str	r3, [r4, #8]
 8015d80:	6823      	ldr	r3, [r4, #0]
 8015d82:	1c5a      	adds	r2, r3, #1
 8015d84:	6022      	str	r2, [r4, #0]
 8015d86:	701e      	strb	r6, [r3, #0]
 8015d88:	6963      	ldr	r3, [r4, #20]
 8015d8a:	3001      	adds	r0, #1
 8015d8c:	4283      	cmp	r3, r0
 8015d8e:	d004      	beq.n	8015d9a <__swbuf_r+0x62>
 8015d90:	89a3      	ldrh	r3, [r4, #12]
 8015d92:	07db      	lsls	r3, r3, #31
 8015d94:	d506      	bpl.n	8015da4 <__swbuf_r+0x6c>
 8015d96:	2e0a      	cmp	r6, #10
 8015d98:	d104      	bne.n	8015da4 <__swbuf_r+0x6c>
 8015d9a:	4621      	mov	r1, r4
 8015d9c:	4628      	mov	r0, r5
 8015d9e:	f7ff fc71 	bl	8015684 <_fflush_r>
 8015da2:	b988      	cbnz	r0, 8015dc8 <__swbuf_r+0x90>
 8015da4:	4638      	mov	r0, r7
 8015da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015da8:	4b0a      	ldr	r3, [pc, #40]	; (8015dd4 <__swbuf_r+0x9c>)
 8015daa:	429c      	cmp	r4, r3
 8015dac:	d101      	bne.n	8015db2 <__swbuf_r+0x7a>
 8015dae:	68ac      	ldr	r4, [r5, #8]
 8015db0:	e7cf      	b.n	8015d52 <__swbuf_r+0x1a>
 8015db2:	4b09      	ldr	r3, [pc, #36]	; (8015dd8 <__swbuf_r+0xa0>)
 8015db4:	429c      	cmp	r4, r3
 8015db6:	bf08      	it	eq
 8015db8:	68ec      	ldreq	r4, [r5, #12]
 8015dba:	e7ca      	b.n	8015d52 <__swbuf_r+0x1a>
 8015dbc:	4621      	mov	r1, r4
 8015dbe:	4628      	mov	r0, r5
 8015dc0:	f000 f80c 	bl	8015ddc <__swsetup_r>
 8015dc4:	2800      	cmp	r0, #0
 8015dc6:	d0cb      	beq.n	8015d60 <__swbuf_r+0x28>
 8015dc8:	f04f 37ff 	mov.w	r7, #4294967295
 8015dcc:	e7ea      	b.n	8015da4 <__swbuf_r+0x6c>
 8015dce:	bf00      	nop
 8015dd0:	08018d20 	.word	0x08018d20
 8015dd4:	08018d40 	.word	0x08018d40
 8015dd8:	08018d00 	.word	0x08018d00

08015ddc <__swsetup_r>:
 8015ddc:	4b32      	ldr	r3, [pc, #200]	; (8015ea8 <__swsetup_r+0xcc>)
 8015dde:	b570      	push	{r4, r5, r6, lr}
 8015de0:	681d      	ldr	r5, [r3, #0]
 8015de2:	4606      	mov	r6, r0
 8015de4:	460c      	mov	r4, r1
 8015de6:	b125      	cbz	r5, 8015df2 <__swsetup_r+0x16>
 8015de8:	69ab      	ldr	r3, [r5, #24]
 8015dea:	b913      	cbnz	r3, 8015df2 <__swsetup_r+0x16>
 8015dec:	4628      	mov	r0, r5
 8015dee:	f7ff f8ff 	bl	8014ff0 <__sinit>
 8015df2:	4b2e      	ldr	r3, [pc, #184]	; (8015eac <__swsetup_r+0xd0>)
 8015df4:	429c      	cmp	r4, r3
 8015df6:	d10f      	bne.n	8015e18 <__swsetup_r+0x3c>
 8015df8:	686c      	ldr	r4, [r5, #4]
 8015dfa:	89a3      	ldrh	r3, [r4, #12]
 8015dfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e00:	0719      	lsls	r1, r3, #28
 8015e02:	d42c      	bmi.n	8015e5e <__swsetup_r+0x82>
 8015e04:	06dd      	lsls	r5, r3, #27
 8015e06:	d411      	bmi.n	8015e2c <__swsetup_r+0x50>
 8015e08:	2309      	movs	r3, #9
 8015e0a:	6033      	str	r3, [r6, #0]
 8015e0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015e10:	81a3      	strh	r3, [r4, #12]
 8015e12:	f04f 30ff 	mov.w	r0, #4294967295
 8015e16:	e03e      	b.n	8015e96 <__swsetup_r+0xba>
 8015e18:	4b25      	ldr	r3, [pc, #148]	; (8015eb0 <__swsetup_r+0xd4>)
 8015e1a:	429c      	cmp	r4, r3
 8015e1c:	d101      	bne.n	8015e22 <__swsetup_r+0x46>
 8015e1e:	68ac      	ldr	r4, [r5, #8]
 8015e20:	e7eb      	b.n	8015dfa <__swsetup_r+0x1e>
 8015e22:	4b24      	ldr	r3, [pc, #144]	; (8015eb4 <__swsetup_r+0xd8>)
 8015e24:	429c      	cmp	r4, r3
 8015e26:	bf08      	it	eq
 8015e28:	68ec      	ldreq	r4, [r5, #12]
 8015e2a:	e7e6      	b.n	8015dfa <__swsetup_r+0x1e>
 8015e2c:	0758      	lsls	r0, r3, #29
 8015e2e:	d512      	bpl.n	8015e56 <__swsetup_r+0x7a>
 8015e30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015e32:	b141      	cbz	r1, 8015e46 <__swsetup_r+0x6a>
 8015e34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015e38:	4299      	cmp	r1, r3
 8015e3a:	d002      	beq.n	8015e42 <__swsetup_r+0x66>
 8015e3c:	4630      	mov	r0, r6
 8015e3e:	f7ff f9c3 	bl	80151c8 <_free_r>
 8015e42:	2300      	movs	r3, #0
 8015e44:	6363      	str	r3, [r4, #52]	; 0x34
 8015e46:	89a3      	ldrh	r3, [r4, #12]
 8015e48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8015e4c:	81a3      	strh	r3, [r4, #12]
 8015e4e:	2300      	movs	r3, #0
 8015e50:	6063      	str	r3, [r4, #4]
 8015e52:	6923      	ldr	r3, [r4, #16]
 8015e54:	6023      	str	r3, [r4, #0]
 8015e56:	89a3      	ldrh	r3, [r4, #12]
 8015e58:	f043 0308 	orr.w	r3, r3, #8
 8015e5c:	81a3      	strh	r3, [r4, #12]
 8015e5e:	6923      	ldr	r3, [r4, #16]
 8015e60:	b94b      	cbnz	r3, 8015e76 <__swsetup_r+0x9a>
 8015e62:	89a3      	ldrh	r3, [r4, #12]
 8015e64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8015e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015e6c:	d003      	beq.n	8015e76 <__swsetup_r+0x9a>
 8015e6e:	4621      	mov	r1, r4
 8015e70:	4630      	mov	r0, r6
 8015e72:	f000 f847 	bl	8015f04 <__smakebuf_r>
 8015e76:	89a0      	ldrh	r0, [r4, #12]
 8015e78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015e7c:	f010 0301 	ands.w	r3, r0, #1
 8015e80:	d00a      	beq.n	8015e98 <__swsetup_r+0xbc>
 8015e82:	2300      	movs	r3, #0
 8015e84:	60a3      	str	r3, [r4, #8]
 8015e86:	6963      	ldr	r3, [r4, #20]
 8015e88:	425b      	negs	r3, r3
 8015e8a:	61a3      	str	r3, [r4, #24]
 8015e8c:	6923      	ldr	r3, [r4, #16]
 8015e8e:	b943      	cbnz	r3, 8015ea2 <__swsetup_r+0xc6>
 8015e90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015e94:	d1ba      	bne.n	8015e0c <__swsetup_r+0x30>
 8015e96:	bd70      	pop	{r4, r5, r6, pc}
 8015e98:	0781      	lsls	r1, r0, #30
 8015e9a:	bf58      	it	pl
 8015e9c:	6963      	ldrpl	r3, [r4, #20]
 8015e9e:	60a3      	str	r3, [r4, #8]
 8015ea0:	e7f4      	b.n	8015e8c <__swsetup_r+0xb0>
 8015ea2:	2000      	movs	r0, #0
 8015ea4:	e7f7      	b.n	8015e96 <__swsetup_r+0xba>
 8015ea6:	bf00      	nop
 8015ea8:	20000088 	.word	0x20000088
 8015eac:	08018d20 	.word	0x08018d20
 8015eb0:	08018d40 	.word	0x08018d40
 8015eb4:	08018d00 	.word	0x08018d00

08015eb8 <__swhatbuf_r>:
 8015eb8:	b570      	push	{r4, r5, r6, lr}
 8015eba:	460e      	mov	r6, r1
 8015ebc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015ec0:	2900      	cmp	r1, #0
 8015ec2:	b096      	sub	sp, #88	; 0x58
 8015ec4:	4614      	mov	r4, r2
 8015ec6:	461d      	mov	r5, r3
 8015ec8:	da08      	bge.n	8015edc <__swhatbuf_r+0x24>
 8015eca:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015ece:	2200      	movs	r2, #0
 8015ed0:	602a      	str	r2, [r5, #0]
 8015ed2:	061a      	lsls	r2, r3, #24
 8015ed4:	d410      	bmi.n	8015ef8 <__swhatbuf_r+0x40>
 8015ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015eda:	e00e      	b.n	8015efa <__swhatbuf_r+0x42>
 8015edc:	466a      	mov	r2, sp
 8015ede:	f000 f851 	bl	8015f84 <_fstat_r>
 8015ee2:	2800      	cmp	r0, #0
 8015ee4:	dbf1      	blt.n	8015eca <__swhatbuf_r+0x12>
 8015ee6:	9a01      	ldr	r2, [sp, #4]
 8015ee8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015eec:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015ef0:	425a      	negs	r2, r3
 8015ef2:	415a      	adcs	r2, r3
 8015ef4:	602a      	str	r2, [r5, #0]
 8015ef6:	e7ee      	b.n	8015ed6 <__swhatbuf_r+0x1e>
 8015ef8:	2340      	movs	r3, #64	; 0x40
 8015efa:	2000      	movs	r0, #0
 8015efc:	6023      	str	r3, [r4, #0]
 8015efe:	b016      	add	sp, #88	; 0x58
 8015f00:	bd70      	pop	{r4, r5, r6, pc}
	...

08015f04 <__smakebuf_r>:
 8015f04:	898b      	ldrh	r3, [r1, #12]
 8015f06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015f08:	079d      	lsls	r5, r3, #30
 8015f0a:	4606      	mov	r6, r0
 8015f0c:	460c      	mov	r4, r1
 8015f0e:	d507      	bpl.n	8015f20 <__smakebuf_r+0x1c>
 8015f10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015f14:	6023      	str	r3, [r4, #0]
 8015f16:	6123      	str	r3, [r4, #16]
 8015f18:	2301      	movs	r3, #1
 8015f1a:	6163      	str	r3, [r4, #20]
 8015f1c:	b002      	add	sp, #8
 8015f1e:	bd70      	pop	{r4, r5, r6, pc}
 8015f20:	ab01      	add	r3, sp, #4
 8015f22:	466a      	mov	r2, sp
 8015f24:	f7ff ffc8 	bl	8015eb8 <__swhatbuf_r>
 8015f28:	9900      	ldr	r1, [sp, #0]
 8015f2a:	4605      	mov	r5, r0
 8015f2c:	4630      	mov	r0, r6
 8015f2e:	f7ff f9b7 	bl	80152a0 <_malloc_r>
 8015f32:	b948      	cbnz	r0, 8015f48 <__smakebuf_r+0x44>
 8015f34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015f38:	059a      	lsls	r2, r3, #22
 8015f3a:	d4ef      	bmi.n	8015f1c <__smakebuf_r+0x18>
 8015f3c:	f023 0303 	bic.w	r3, r3, #3
 8015f40:	f043 0302 	orr.w	r3, r3, #2
 8015f44:	81a3      	strh	r3, [r4, #12]
 8015f46:	e7e3      	b.n	8015f10 <__smakebuf_r+0xc>
 8015f48:	4b0d      	ldr	r3, [pc, #52]	; (8015f80 <__smakebuf_r+0x7c>)
 8015f4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8015f4c:	89a3      	ldrh	r3, [r4, #12]
 8015f4e:	6020      	str	r0, [r4, #0]
 8015f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f54:	81a3      	strh	r3, [r4, #12]
 8015f56:	9b00      	ldr	r3, [sp, #0]
 8015f58:	6163      	str	r3, [r4, #20]
 8015f5a:	9b01      	ldr	r3, [sp, #4]
 8015f5c:	6120      	str	r0, [r4, #16]
 8015f5e:	b15b      	cbz	r3, 8015f78 <__smakebuf_r+0x74>
 8015f60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015f64:	4630      	mov	r0, r6
 8015f66:	f000 f81f 	bl	8015fa8 <_isatty_r>
 8015f6a:	b128      	cbz	r0, 8015f78 <__smakebuf_r+0x74>
 8015f6c:	89a3      	ldrh	r3, [r4, #12]
 8015f6e:	f023 0303 	bic.w	r3, r3, #3
 8015f72:	f043 0301 	orr.w	r3, r3, #1
 8015f76:	81a3      	strh	r3, [r4, #12]
 8015f78:	89a0      	ldrh	r0, [r4, #12]
 8015f7a:	4305      	orrs	r5, r0
 8015f7c:	81a5      	strh	r5, [r4, #12]
 8015f7e:	e7cd      	b.n	8015f1c <__smakebuf_r+0x18>
 8015f80:	08014f89 	.word	0x08014f89

08015f84 <_fstat_r>:
 8015f84:	b538      	push	{r3, r4, r5, lr}
 8015f86:	4d07      	ldr	r5, [pc, #28]	; (8015fa4 <_fstat_r+0x20>)
 8015f88:	2300      	movs	r3, #0
 8015f8a:	4604      	mov	r4, r0
 8015f8c:	4608      	mov	r0, r1
 8015f8e:	4611      	mov	r1, r2
 8015f90:	602b      	str	r3, [r5, #0]
 8015f92:	f7eb ffc4 	bl	8001f1e <_fstat>
 8015f96:	1c43      	adds	r3, r0, #1
 8015f98:	d102      	bne.n	8015fa0 <_fstat_r+0x1c>
 8015f9a:	682b      	ldr	r3, [r5, #0]
 8015f9c:	b103      	cbz	r3, 8015fa0 <_fstat_r+0x1c>
 8015f9e:	6023      	str	r3, [r4, #0]
 8015fa0:	bd38      	pop	{r3, r4, r5, pc}
 8015fa2:	bf00      	nop
 8015fa4:	20005804 	.word	0x20005804

08015fa8 <_isatty_r>:
 8015fa8:	b538      	push	{r3, r4, r5, lr}
 8015faa:	4d06      	ldr	r5, [pc, #24]	; (8015fc4 <_isatty_r+0x1c>)
 8015fac:	2300      	movs	r3, #0
 8015fae:	4604      	mov	r4, r0
 8015fb0:	4608      	mov	r0, r1
 8015fb2:	602b      	str	r3, [r5, #0]
 8015fb4:	f7eb ffc3 	bl	8001f3e <_isatty>
 8015fb8:	1c43      	adds	r3, r0, #1
 8015fba:	d102      	bne.n	8015fc2 <_isatty_r+0x1a>
 8015fbc:	682b      	ldr	r3, [r5, #0]
 8015fbe:	b103      	cbz	r3, 8015fc2 <_isatty_r+0x1a>
 8015fc0:	6023      	str	r3, [r4, #0]
 8015fc2:	bd38      	pop	{r3, r4, r5, pc}
 8015fc4:	20005804 	.word	0x20005804

08015fc8 <_init>:
 8015fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fca:	bf00      	nop
 8015fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fce:	bc08      	pop	{r3}
 8015fd0:	469e      	mov	lr, r3
 8015fd2:	4770      	bx	lr

08015fd4 <_fini>:
 8015fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015fd6:	bf00      	nop
 8015fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015fda:	bc08      	pop	{r3}
 8015fdc:	469e      	mov	lr, r3
 8015fde:	4770      	bx	lr
