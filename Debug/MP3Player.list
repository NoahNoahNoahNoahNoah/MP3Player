
MP3Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cbe0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b40  0800cdb8  0800cdb8  0001cdb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8f8  0800f8f8  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8f8  0800f8f8  0001f8f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f900  0800f900  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f900  0800f900  0001f900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f904  0800f904  0001f904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800f908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b10  200000ec  0800f9f4  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bfc  0800f9f4  00020bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ae16  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000058a0  00000000  00000000  0004af32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002368  00000000  00000000  000507d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002128  00000000  00000000  00052b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a818  00000000  00000000  00054c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c401  00000000  00000000  0007f480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb83a  00000000  00000000  000ab881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001970bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009990  00000000  00000000  0019710c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000ec 	.word	0x200000ec
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800cda0 	.word	0x0800cda0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000f0 	.word	0x200000f0
 8000214:	0800cda0 	.word	0x0800cda0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f002 fcfe 	bl	8002f20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f8a6 	bl	8000674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 fba4 	bl	8000c74 <MX_GPIO_Init>
  MX_ADC1_Init();
 800052c:	f000 f942 	bl	80007b4 <MX_ADC1_Init>
  MX_DAC_Init();
 8000530:	f000 f992 	bl	8000858 <MX_DAC_Init>
  MX_DFSDM1_Init();
 8000534:	f000 f9ba 	bl	80008ac <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000538:	f000 f9f0 	bl	800091c <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 800053c:	f000 fa58 	bl	80009f0 <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000540:	f000 fd36 	bl	8000fb0 <MX_FSMC_Init>
  MX_I2S2_Init();
 8000544:	f000 fab8 	bl	8000ab8 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000548:	f000 fae4 	bl	8000b14 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 800054c:	f000 fb0e 	bl	8000b6c <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000550:	f000 fb3c 	bl	8000bcc <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000554:	f000 fb64 	bl	8000c20 <MX_USART6_UART_Init>
  MX_USB_HOST_Init();
 8000558:	f00b ffd8 	bl	800c50c <MX_USB_HOST_Init>
  MX_I2C2_Init();
 800055c:	f000 fa7e 	bl	8000a5c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  MX_UART10_Init();
 8000560:	f000 fb34 	bl	8000bcc <MX_UART10_Init>
  MX_USART6_UART_Init();
 8000564:	f000 fb5c 	bl	8000c20 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000568:	f000 fa78 	bl	8000a5c <MX_I2C2_Init>
  BSP_LCD_Init();
 800056c:	f002 f9d7 	bl	800291e <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000570:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000574:	f002 fa92 	bl	8002a9c <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000578:	2100      	movs	r1, #0
 800057a:	2000      	movs	r0, #0
 800057c:	f002 f818 	bl	80025b0 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 8000580:	4834      	ldr	r0, [pc, #208]	; (8000654 <main+0x138>)
 8000582:	f002 fa7b 	bl	8002a7c <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000586:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800058a:	f002 fa57 	bl	8002a3c <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800058e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000592:	f002 fa63 	bl	8002a5c <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project ...", CENTER_MODE);
 8000596:	2301      	movs	r3, #1
 8000598:	4a2f      	ldr	r2, [pc, #188]	; (8000658 <main+0x13c>)
 800059a:	2170      	movs	r1, #112	; 0x70
 800059c:	2000      	movs	r0, #0
 800059e:	f002 fadd 	bl	8002b5c <BSP_LCD_DisplayStringAt>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80005a2:	2201      	movs	r2, #1
 80005a4:	2120      	movs	r1, #32
 80005a6:	482d      	ldr	r0, [pc, #180]	; (800065c <main+0x140>)
 80005a8:	f003 fd1c 	bl	8003fe4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2108      	movs	r1, #8
 80005b0:	482b      	ldr	r0, [pc, #172]	; (8000660 <main+0x144>)
 80005b2:	f003 fd17 	bl	8003fe4 <HAL_GPIO_WritePin>
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80005b6:	f00b ffcf 	bl	800c558 <MX_USB_HOST_Process>

    static int spaceY = 112;
    static int spaceX = 0;

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_5);
 80005ba:	2120      	movs	r1, #32
 80005bc:	4827      	ldr	r0, [pc, #156]	; (800065c <main+0x140>)
 80005be:	f003 fd2a 	bl	8004016 <HAL_GPIO_TogglePin>
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 80005c2:	2108      	movs	r1, #8
 80005c4:	4826      	ldr	r0, [pc, #152]	; (8000660 <main+0x144>)
 80005c6:	f003 fd26 	bl	8004016 <HAL_GPIO_TogglePin>
    HAL_Delay(500);
 80005ca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ce:	f002 fd19 	bl	8003004 <HAL_Delay>

    if(HAL_GPIO_ReadPin (GPIOF, GPIO_PIN_10))// || HAL_GPIO_ReadPin (GPIOG, GPIO_PIN_13) || HAL_GPIO_ReadPin (GPIOF, GPIO_PIN_7) || HAL_GPIO_ReadPin (GPIOF, GPIO_PIN_6))
 80005d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005d6:	4823      	ldr	r0, [pc, #140]	; (8000664 <main+0x148>)
 80005d8:	f003 fcec 	bl	8003fb4 <HAL_GPIO_ReadPin>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d005      	beq.n	80005ee <main+0xd2>
        {
    		spaceX += 10;
 80005e2:	4b21      	ldr	r3, [pc, #132]	; (8000668 <main+0x14c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	330a      	adds	r3, #10
 80005e8:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <main+0x14c>)
 80005ea:	6013      	str	r3, [r2, #0]
 80005ec:	e026      	b.n	800063c <main+0x120>
        }
        else if(HAL_GPIO_ReadPin (GPIOG, GPIO_PIN_13))
 80005ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005f2:	481e      	ldr	r0, [pc, #120]	; (800066c <main+0x150>)
 80005f4:	f003 fcde 	bl	8003fb4 <HAL_GPIO_ReadPin>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d005      	beq.n	800060a <main+0xee>
        {
        	spaceX -= 10;
 80005fe:	4b1a      	ldr	r3, [pc, #104]	; (8000668 <main+0x14c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	3b0a      	subs	r3, #10
 8000604:	4a18      	ldr	r2, [pc, #96]	; (8000668 <main+0x14c>)
 8000606:	6013      	str	r3, [r2, #0]
 8000608:	e018      	b.n	800063c <main+0x120>
        }
        else if(HAL_GPIO_ReadPin (GPIOF, GPIO_PIN_7))
 800060a:	2180      	movs	r1, #128	; 0x80
 800060c:	4815      	ldr	r0, [pc, #84]	; (8000664 <main+0x148>)
 800060e:	f003 fcd1 	bl	8003fb4 <HAL_GPIO_ReadPin>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d005      	beq.n	8000624 <main+0x108>
        {
        	spaceY += 10;
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <main+0x154>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	330a      	adds	r3, #10
 800061e:	4a14      	ldr	r2, [pc, #80]	; (8000670 <main+0x154>)
 8000620:	6013      	str	r3, [r2, #0]
 8000622:	e00b      	b.n	800063c <main+0x120>
        }
        else if(HAL_GPIO_ReadPin (GPIOF, GPIO_PIN_6))
 8000624:	2140      	movs	r1, #64	; 0x40
 8000626:	480f      	ldr	r0, [pc, #60]	; (8000664 <main+0x148>)
 8000628:	f003 fcc4 	bl	8003fb4 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d004      	beq.n	800063c <main+0x120>
        {
        	spaceY -= 10;
 8000632:	4b0f      	ldr	r3, [pc, #60]	; (8000670 <main+0x154>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	3b0a      	subs	r3, #10
 8000638:	4a0d      	ldr	r2, [pc, #52]	; (8000670 <main+0x154>)
 800063a:	6013      	str	r3, [r2, #0]
        }

    BSP_LCD_DisplayStringAt(spaceX, spaceY, (uint8_t*)"Starting Project ...", CENTER_MODE);
 800063c:	4b0a      	ldr	r3, [pc, #40]	; (8000668 <main+0x14c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	b298      	uxth	r0, r3
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <main+0x154>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	b299      	uxth	r1, r3
 8000648:	2301      	movs	r3, #1
 800064a:	4a03      	ldr	r2, [pc, #12]	; (8000658 <main+0x13c>)
 800064c:	f002 fa86 	bl	8002b5c <BSP_LCD_DisplayStringAt>
  {
 8000650:	e7b1      	b.n	80005b6 <main+0x9a>
 8000652:	bf00      	nop
 8000654:	20000050 	.word	0x20000050
 8000658:	0800cdb8 	.word	0x0800cdb8
 800065c:	40020800 	.word	0x40020800
 8000660:	40021000 	.word	0x40021000
 8000664:	40021400 	.word	0x40021400
 8000668:	200004e4 	.word	0x200004e4
 800066c:	40021800 	.word	0x40021800
 8000670:	20000000 	.word	0x20000000

08000674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b0aa      	sub	sp, #168	; 0xa8
 8000678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800067e:	2234      	movs	r2, #52	; 0x34
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f00c fa86 	bl	800cb94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000688:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2258      	movs	r2, #88	; 0x58
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f00c fa77 	bl	800cb94 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b40      	ldr	r3, [pc, #256]	; (80007ac <SystemClock_Config+0x138>)
 80006ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ae:	4a3f      	ldr	r2, [pc, #252]	; (80007ac <SystemClock_Config+0x138>)
 80006b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b4:	6413      	str	r3, [r2, #64]	; 0x40
 80006b6:	4b3d      	ldr	r3, [pc, #244]	; (80007ac <SystemClock_Config+0x138>)
 80006b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b3a      	ldr	r3, [pc, #232]	; (80007b0 <SystemClock_Config+0x13c>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	4a39      	ldr	r2, [pc, #228]	; (80007b0 <SystemClock_Config+0x13c>)
 80006cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d0:	6013      	str	r3, [r2, #0]
 80006d2:	4b37      	ldr	r3, [pc, #220]	; (80007b0 <SystemClock_Config+0x13c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006de:	2303      	movs	r3, #3
 80006e0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006e2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006e6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ee:	2310      	movs	r3, #16
 80006f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f4:	2302      	movs	r3, #2
 80006f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000702:	230f      	movs	r3, #15
 8000704:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000708:	2390      	movs	r3, #144	; 0x90
 800070a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000714:	2305      	movs	r3, #5
 8000716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000720:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000724:	4618      	mov	r0, r3
 8000726:	f006 fdff 	bl	8007328 <HAL_RCC_OscConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000730:	f000 fcf0 	bl	8001114 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000734:	230f      	movs	r3, #15
 8000736:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073c:	2300      	movs	r3, #0
 800073e:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f006 f81a 	bl	8006788 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xea>
  {
    Error_Handler();
 800075a:	f000 fcdb 	bl	8001114 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800075e:	f240 1371 	movw	r3, #369	; 0x171
 8000762:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000764:	2332      	movs	r3, #50	; 0x32
 8000766:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000768:	230c      	movs	r3, #12
 800076a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800076c:	2302      	movs	r3, #2
 800076e:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 8000770:	2302      	movs	r3, #2
 8000772:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000778:	2300      	movs	r3, #0
 800077a:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 800077c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000780:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 8000782:	2300      	movs	r3, #0
 8000784:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 800078a:	2300      	movs	r3, #0
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	4618      	mov	r0, r3
 8000794:	f006 f9d8 	bl	8006b48 <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800079e:	f000 fcb9 	bl	8001114 <Error_Handler>
  }
}
 80007a2:	bf00      	nop
 80007a4:	37a8      	adds	r7, #168	; 0xa8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40023800 	.word	0x40023800
 80007b0:	40007000 	.word	0x40007000

080007b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ba:	463b      	mov	r3, r7
 80007bc:	2200      	movs	r2, #0
 80007be:	601a      	str	r2, [r3, #0]
 80007c0:	605a      	str	r2, [r3, #4]
 80007c2:	609a      	str	r2, [r3, #8]
 80007c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_ADC1_Init+0x98>)
 80007c8:	4a21      	ldr	r2, [pc, #132]	; (8000850 <MX_ADC1_Init+0x9c>)
 80007ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007cc:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_ADC1_Init+0x98>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_ADC1_Init+0x98>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_ADC1_Init+0x98>)
 80007da:	2200      	movs	r2, #0
 80007dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_ADC1_Init+0x98>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007e4:	4b19      	ldr	r3, [pc, #100]	; (800084c <MX_ADC1_Init+0x98>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_ADC1_Init+0x98>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <MX_ADC1_Init+0x98>)
 80007f4:	4a17      	ldr	r2, [pc, #92]	; (8000854 <MX_ADC1_Init+0xa0>)
 80007f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_ADC1_Init+0x98>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_ADC1_Init+0x98>)
 8000800:	2201      	movs	r2, #1
 8000802:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_ADC1_Init+0x98>)
 8000806:	2200      	movs	r2, #0
 8000808:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_ADC1_Init+0x98>)
 800080e:	2201      	movs	r2, #1
 8000810:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000812:	480e      	ldr	r0, [pc, #56]	; (800084c <MX_ADC1_Init+0x98>)
 8000814:	f002 fc1a 	bl	800304c <HAL_ADC_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800081e:	f000 fc79 	bl	8001114 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000822:	230a      	movs	r3, #10
 8000824:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800082e:	463b      	mov	r3, r7
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_ADC1_Init+0x98>)
 8000834:	f002 fc4e 	bl	80030d4 <HAL_ADC_ConfigChannel>
 8000838:	4603      	mov	r3, r0
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800083e:	f000 fc69 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000108 	.word	0x20000108
 8000850:	40012000 	.word	0x40012000
 8000854:	0f000001 	.word	0x0f000001

08000858 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800085e:	463b      	mov	r3, r7
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <MX_DAC_Init+0x4c>)
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <MX_DAC_Init+0x50>)
 800086a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800086c:	480d      	ldr	r0, [pc, #52]	; (80008a4 <MX_DAC_Init+0x4c>)
 800086e:	f002 ff70 	bl	8003752 <HAL_DAC_Init>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000878:	f000 fc4c 	bl	8001114 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800087c:	2300      	movs	r3, #0
 800087e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000884:	463b      	mov	r3, r7
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4806      	ldr	r0, [pc, #24]	; (80008a4 <MX_DAC_Init+0x4c>)
 800088c:	f002 ff83 	bl	8003796 <HAL_DAC_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000896:	f000 fc3d 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20000150 	.word	0x20000150
 80008a8:	40007400 	.word	0x40007400

080008ac <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80008b0:	4b18      	ldr	r3, [pc, #96]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008b2:	4a19      	ldr	r2, [pc, #100]	; (8000918 <MX_DFSDM1_Init+0x6c>)
 80008b4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80008b6:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008b8:	2201      	movs	r2, #1
 80008ba:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80008c2:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008c4:	2202      	movs	r2, #2
 80008c6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008ce:	4b11      	ldr	r3, [pc, #68]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008da:	4b0e      	ldr	r3, [pc, #56]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008dc:	2202      	movs	r2, #2
 80008de:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008e0:	4b0c      	ldr	r3, [pc, #48]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008ec:	4b09      	ldr	r3, [pc, #36]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008f2:	4b08      	ldr	r3, [pc, #32]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <MX_DFSDM1_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <MX_DFSDM1_Init+0x68>)
 8000900:	f002 ff96 	bl	8003830 <HAL_DFSDM_ChannelInit>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 800090a:	f000 fc03 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000164 	.word	0x20000164
 8000918:	40016020 	.word	0x40016020

0800091c <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 8000920:	4b2f      	ldr	r3, [pc, #188]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 8000922:	4a30      	ldr	r2, [pc, #192]	; (80009e4 <MX_DFSDM2_Init+0xc8>)
 8000924:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000926:	4b2e      	ldr	r3, [pc, #184]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 8000928:	2201      	movs	r2, #1
 800092a:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800092c:	4b2c      	ldr	r3, [pc, #176]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 800092e:	2200      	movs	r2, #0
 8000930:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 8000932:	4b2b      	ldr	r3, [pc, #172]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 8000934:	2202      	movs	r2, #2
 8000936:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000938:	4b29      	ldr	r3, [pc, #164]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 800093a:	2200      	movs	r2, #0
 800093c:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800093e:	4b28      	ldr	r3, [pc, #160]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 8000946:	2200      	movs	r2, #0
 8000948:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 800094a:	4b25      	ldr	r3, [pc, #148]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 800094c:	2202      	movs	r2, #2
 800094e:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8000950:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 8000952:	2200      	movs	r2, #0
 8000954:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000956:	4b22      	ldr	r3, [pc, #136]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 8000958:	2200      	movs	r2, #0
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 800095c:	4b20      	ldr	r3, [pc, #128]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 800095e:	2201      	movs	r2, #1
 8000960:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 8000962:	4b1f      	ldr	r3, [pc, #124]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 8000964:	2200      	movs	r2, #0
 8000966:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 800096a:	2200      	movs	r2, #0
 800096c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 800096e:	481c      	ldr	r0, [pc, #112]	; (80009e0 <MX_DFSDM2_Init+0xc4>)
 8000970:	f002 ff5e 	bl	8003830 <HAL_DFSDM_ChannelInit>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 800097a:	f000 fbcb 	bl	8001114 <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 8000980:	4a1a      	ldr	r2, [pc, #104]	; (80009ec <MX_DFSDM2_Init+0xd0>)
 8000982:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 8000986:	2201      	movs	r2, #1
 8000988:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 8000992:	2202      	movs	r2, #2
 8000994:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000996:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800099c:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80009a2:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 80009aa:	2202      	movs	r2, #2
 80009ac:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80009b4:	4b0c      	ldr	r3, [pc, #48]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 80009ba:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 80009bc:	2201      	movs	r2, #1
 80009be:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 80009c0:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 80009c6:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 80009cc:	4806      	ldr	r0, [pc, #24]	; (80009e8 <MX_DFSDM2_Init+0xcc>)
 80009ce:	f002 ff2f 	bl	8003830 <HAL_DFSDM_ChannelInit>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 80009d8:	f000 fb9c 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000019c 	.word	0x2000019c
 80009e4:	40016420 	.word	0x40016420
 80009e8:	200001d4 	.word	0x200001d4
 80009ec:	400164e0 	.word	0x400164e0

080009f0 <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80009f4:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 80009f6:	4a17      	ldr	r2, [pc, #92]	; (8000a54 <MX_FMPI2C1_Init+0x64>)
 80009f8:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 80009fa:	4b15      	ldr	r3, [pc, #84]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 80009fc:	4a16      	ldr	r2, [pc, #88]	; (8000a58 <MX_FMPI2C1_Init+0x68>)
 80009fe:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 8000a0c:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b0f      	ldr	r3, [pc, #60]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 8000a18:	4b0d      	ldr	r3, [pc, #52]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000a2a:	4809      	ldr	r0, [pc, #36]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 8000a2c:	f003 f854 	bl	8003ad8 <HAL_FMPI2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 fb6d 	bl	8001114 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4804      	ldr	r0, [pc, #16]	; (8000a50 <MX_FMPI2C1_Init+0x60>)
 8000a3e:	f003 f8da 	bl	8003bf6 <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 fb64 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	2000020c 	.word	0x2000020c
 8000a54:	40006000 	.word	0x40006000
 8000a58:	00303d5b 	.word	0x00303d5b

08000a5c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a62:	4a13      	ldr	r2, [pc, #76]	; (8000ab0 <MX_I2C2_Init+0x54>)
 8000a64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a68:	4a12      	ldr	r2, [pc, #72]	; (8000ab4 <MX_I2C2_Init+0x58>)
 8000a6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a86:	4b09      	ldr	r3, [pc, #36]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a8c:	4b07      	ldr	r3, [pc, #28]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_I2C2_Init+0x50>)
 8000a9a:	f004 ffcb 	bl	8005a34 <HAL_I2C_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000aa4:	f000 fb36 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000258 	.word	0x20000258
 8000ab0:	40005800 	.word	0x40005800
 8000ab4:	000186a0 	.word	0x000186a0

08000ab8 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000abc:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <MX_I2S2_Init+0x58>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000ac2:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000ac4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ac8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ad6:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000ad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000adc:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000ade:	4b0b      	ldr	r3, [pc, #44]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000ae0:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ae4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000af8:	4804      	ldr	r0, [pc, #16]	; (8000b0c <MX_I2S2_Init+0x54>)
 8000afa:	f005 f8df 	bl	8005cbc <HAL_I2S_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000b04:	f000 fb06 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200002ac 	.word	0x200002ac
 8000b10:	40003800 	.word	0x40003800

08000b14 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000b18:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b1a:	4a13      	ldr	r2, [pc, #76]	; (8000b68 <MX_QUADSPI_Init+0x54>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b20:	22ff      	movs	r2, #255	; 0xff
 8000b22:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b26:	2201      	movs	r2, #1
 8000b28:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b32:	2201      	movs	r2, #1
 8000b34:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b42:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	; (8000b64 <MX_QUADSPI_Init+0x50>)
 8000b50:	f005 fd58 	bl	8006604 <HAL_QSPI_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b5a:	f000 fadb 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	200002f4 	.word	0x200002f4
 8000b68:	a0001000 	.word	0xa0001000

08000b6c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_SDIO_SD_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_SDIO_SD_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_SDIO_SD_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_SDIO_SD_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_SDIO_SD_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_SDIO_SD_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <MX_SDIO_SD_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b94:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_SDIO_SD_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <MX_SDIO_SD_Init+0x58>)
 8000b9c:	f006 fe04 	bl	80077a8 <HAL_SD_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000ba6:	f000 fab5 	bl	8001114 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8000baa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_SDIO_SD_Init+0x58>)
 8000bb0:	f007 f82e 	bl	8007c10 <HAL_SD_ConfigWideBusOperation>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_SDIO_SD_Init+0x52>
  {
    Error_Handler();
 8000bba:	f000 faab 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000340 	.word	0x20000340
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <MX_UART10_Init+0x4c>)
 8000bd2:	4a12      	ldr	r2, [pc, #72]	; (8000c1c <MX_UART10_Init+0x50>)
 8000bd4:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <MX_UART10_Init+0x4c>)
 8000bd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bdc:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_UART10_Init+0x4c>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_UART10_Init+0x4c>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000bea:	4b0b      	ldr	r3, [pc, #44]	; (8000c18 <MX_UART10_Init+0x4c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000bf0:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_UART10_Init+0x4c>)
 8000bf2:	220c      	movs	r2, #12
 8000bf4:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf6:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <MX_UART10_Init+0x4c>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_UART10_Init+0x4c>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <MX_UART10_Init+0x4c>)
 8000c04:	f007 fb80 	bl	8008308 <HAL_UART_Init>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000c0e:	f000 fa81 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200003c4 	.word	0x200003c4
 8000c1c:	40011c00 	.word	0x40011c00

08000c20 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART6_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_USART6_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USART6_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART6_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART6_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART6_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART6_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART6_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART6_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART6_UART_Init+0x4c>)
 8000c58:	f007 fb56 	bl	8008308 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f000 fa57 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000404 	.word	0x20000404
 8000c70:	40011400 	.word	0x40011400

08000c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b08e      	sub	sp, #56	; 0x38
 8000c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
 8000c8e:	4bb0      	ldr	r3, [pc, #704]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4aaf      	ldr	r2, [pc, #700]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000c94:	f043 0310 	orr.w	r3, r3, #16
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4bad      	ldr	r3, [pc, #692]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0310 	and.w	r3, r3, #16
 8000ca2:	623b      	str	r3, [r7, #32]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
 8000caa:	4ba9      	ldr	r3, [pc, #676]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4aa8      	ldr	r2, [pc, #672]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000cb0:	f043 0304 	orr.w	r3, r3, #4
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4ba6      	ldr	r3, [pc, #664]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0304 	and.w	r3, r3, #4
 8000cbe:	61fb      	str	r3, [r7, #28]
 8000cc0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61bb      	str	r3, [r7, #24]
 8000cc6:	4ba2      	ldr	r3, [pc, #648]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4aa1      	ldr	r2, [pc, #644]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000ccc:	f043 0320 	orr.w	r3, r3, #32
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b9f      	ldr	r3, [pc, #636]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0320 	and.w	r3, r3, #32
 8000cda:	61bb      	str	r3, [r7, #24]
 8000cdc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
 8000ce2:	4b9b      	ldr	r3, [pc, #620]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a9a      	ldr	r2, [pc, #616]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000ce8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b98      	ldr	r3, [pc, #608]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	4b94      	ldr	r3, [pc, #592]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a93      	ldr	r2, [pc, #588]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d04:	f043 0301 	orr.w	r3, r3, #1
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b91      	ldr	r3, [pc, #580]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	613b      	str	r3, [r7, #16]
 8000d14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
 8000d1a:	4b8d      	ldr	r3, [pc, #564]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a8c      	ldr	r2, [pc, #560]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b8a      	ldr	r3, [pc, #552]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	4b86      	ldr	r3, [pc, #536]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a85      	ldr	r2, [pc, #532]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b83      	ldr	r3, [pc, #524]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	607b      	str	r3, [r7, #4]
 8000d52:	4b7f      	ldr	r3, [pc, #508]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a7e      	ldr	r2, [pc, #504]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b7c      	ldr	r3, [pc, #496]	; (8000f50 <MX_GPIO_Init+0x2dc>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0308 	and.w	r3, r3, #8
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2138      	movs	r1, #56	; 0x38
 8000d6e:	4879      	ldr	r0, [pc, #484]	; (8000f54 <MX_GPIO_Init+0x2e0>)
 8000d70:	f003 f938 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GREEN_GPIO_Port, LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2120      	movs	r1, #32
 8000d78:	4877      	ldr	r0, [pc, #476]	; (8000f58 <MX_GPIO_Init+0x2e4>)
 8000d7a:	f003 f933 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000d7e:	2200      	movs	r2, #0
 8000d80:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d84:	4875      	ldr	r0, [pc, #468]	; (8000f5c <MX_GPIO_Init+0x2e8>)
 8000d86:	f003 f92d 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d90:	4873      	ldr	r0, [pc, #460]	; (8000f60 <MX_GPIO_Init+0x2ec>)
 8000d92:	f003 f927 	bl	8003fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000d96:	2338      	movs	r3, #56	; 0x38
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000daa:	4619      	mov	r1, r3
 8000dac:	4869      	ldr	r0, [pc, #420]	; (8000f54 <MX_GPIO_Init+0x2e0>)
 8000dae:	f002 ff6d 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4861      	ldr	r0, [pc, #388]	; (8000f54 <MX_GPIO_Init+0x2e0>)
 8000dce:	f002 ff5d 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000dd2:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	485f      	ldr	r0, [pc, #380]	; (8000f64 <MX_GPIO_Init+0x2f0>)
 8000de8:	f002 ff50 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000dec:	2302      	movs	r3, #2
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df0:	4b5d      	ldr	r3, [pc, #372]	; (8000f68 <MX_GPIO_Init+0x2f4>)
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4856      	ldr	r0, [pc, #344]	; (8000f58 <MX_GPIO_Init+0x2e4>)
 8000e00:	f002 ff44 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000e04:	2301      	movs	r3, #1
 8000e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e08:	4b57      	ldr	r3, [pc, #348]	; (8000f68 <MX_GPIO_Init+0x2f4>)
 8000e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e14:	4619      	mov	r1, r3
 8000e16:	4855      	ldr	r0, [pc, #340]	; (8000f6c <MX_GPIO_Init+0x2f8>)
 8000e18:	f002 ff38 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = LED2_GREEN_Pin;
 8000e1c:	2320      	movs	r3, #32
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED2_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e30:	4619      	mov	r1, r3
 8000e32:	4849      	ldr	r0, [pc, #292]	; (8000f58 <MX_GPIO_Init+0x2e4>)
 8000e34:	f002 ff2a 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4842      	ldr	r0, [pc, #264]	; (8000f5c <MX_GPIO_Init+0x2e8>)
 8000e54:	f002 ff1a 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e5e:	4b42      	ldr	r3, [pc, #264]	; (8000f68 <MX_GPIO_Init+0x2f4>)
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	483d      	ldr	r0, [pc, #244]	; (8000f64 <MX_GPIO_Init+0x2f0>)
 8000e6e:	f002 ff0d 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e78:	2302      	movs	r3, #2
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e80:	2303      	movs	r3, #3
 8000e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e84:	2307      	movs	r3, #7
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4833      	ldr	r0, [pc, #204]	; (8000f5c <MX_GPIO_Init+0x2e8>)
 8000e90:	f002 fefc 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000e94:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	482b      	ldr	r0, [pc, #172]	; (8000f5c <MX_GPIO_Init+0x2e8>)
 8000eae:	f002 feed 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000eb2:	f248 0380 	movw	r3, #32896	; 0x8080
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000eb8:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <MX_GPIO_Init+0x2f4>)
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4826      	ldr	r0, [pc, #152]	; (8000f60 <MX_GPIO_Init+0x2ec>)
 8000ec8:	f002 fee0 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000ecc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ed0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	481e      	ldr	r0, [pc, #120]	; (8000f60 <MX_GPIO_Init+0x2ec>)
 8000ee6:	f002 fed1 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000efc:	2301      	movs	r3, #1
 8000efe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f04:	4619      	mov	r1, r3
 8000f06:	4819      	ldr	r0, [pc, #100]	; (8000f6c <MX_GPIO_Init+0x2f8>)
 8000f08:	f002 fec0 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f0c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480f      	ldr	r0, [pc, #60]	; (8000f60 <MX_GPIO_Init+0x2ec>)
 8000f22:	f002 feb3 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000f26:	2330      	movs	r3, #48	; 0x30
 8000f28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f32:	2303      	movs	r3, #3
 8000f34:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f36:	2306      	movs	r3, #6
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4806      	ldr	r0, [pc, #24]	; (8000f5c <MX_GPIO_Init+0x2e8>)
 8000f42:	f002 fea3 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f46:	2340      	movs	r3, #64	; 0x40
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <MX_GPIO_Init+0x2f4>)
 8000f4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f4e:	e00f      	b.n	8000f70 <MX_GPIO_Init+0x2fc>
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40020800 	.word	0x40020800
 8000f5c:	40020400 	.word	0x40020400
 8000f60:	40021800 	.word	0x40021800
 8000f64:	40021400 	.word	0x40021400
 8000f68:	10110000 	.word	0x10110000
 8000f6c:	40020000 	.word	0x40020000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f78:	4619      	mov	r1, r3
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <MX_GPIO_Init+0x338>)
 8000f7c:	f002 fe86 	bl	8003c8c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f92:	2302      	movs	r3, #2
 8000f94:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <MX_GPIO_Init+0x338>)
 8000f9e:	f002 fe75 	bl	8003c8c <HAL_GPIO_Init>

}
 8000fa2:	bf00      	nop
 8000fa4:	3738      	adds	r7, #56	; 0x38
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40020400 	.word	0x40020400

08000fb0 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <MX_FSMC_Init+0x158>)
 8000fca:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000fce:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000fd0:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <MX_FSMC_Init+0x158>)
 8000fd2:	4a4e      	ldr	r2, [pc, #312]	; (800110c <MX_FSMC_Init+0x15c>)
 8000fd4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000fd6:	4b4c      	ldr	r3, [pc, #304]	; (8001108 <MX_FSMC_Init+0x158>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fdc:	4b4a      	ldr	r3, [pc, #296]	; (8001108 <MX_FSMC_Init+0x158>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000fe2:	4b49      	ldr	r3, [pc, #292]	; (8001108 <MX_FSMC_Init+0x158>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fe8:	4b47      	ldr	r3, [pc, #284]	; (8001108 <MX_FSMC_Init+0x158>)
 8000fea:	2210      	movs	r2, #16
 8000fec:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fee:	4b46      	ldr	r3, [pc, #280]	; (8001108 <MX_FSMC_Init+0x158>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000ff4:	4b44      	ldr	r3, [pc, #272]	; (8001108 <MX_FSMC_Init+0x158>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000ffa:	4b43      	ldr	r3, [pc, #268]	; (8001108 <MX_FSMC_Init+0x158>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001000:	4b41      	ldr	r3, [pc, #260]	; (8001108 <MX_FSMC_Init+0x158>)
 8001002:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001006:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001008:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <MX_FSMC_Init+0x158>)
 800100a:	2200      	movs	r2, #0
 800100c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <MX_FSMC_Init+0x158>)
 8001010:	2200      	movs	r2, #0
 8001012:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <MX_FSMC_Init+0x158>)
 8001016:	2200      	movs	r2, #0
 8001018:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <MX_FSMC_Init+0x158>)
 800101c:	2200      	movs	r2, #0
 800101e:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001020:	4b39      	ldr	r3, [pc, #228]	; (8001108 <MX_FSMC_Init+0x158>)
 8001022:	2200      	movs	r2, #0
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <MX_FSMC_Init+0x158>)
 8001028:	2200      	movs	r2, #0
 800102a:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <MX_FSMC_Init+0x158>)
 800102e:	2200      	movs	r2, #0
 8001030:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001032:	230f      	movs	r3, #15
 8001034:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001036:	230f      	movs	r3, #15
 8001038:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800103a:	23ff      	movs	r3, #255	; 0xff
 800103c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800103e:	230f      	movs	r3, #15
 8001040:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001042:	2310      	movs	r3, #16
 8001044:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001046:	2311      	movs	r3, #17
 8001048:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	4619      	mov	r1, r3
 8001054:	482c      	ldr	r0, [pc, #176]	; (8001108 <MX_FSMC_Init+0x158>)
 8001056:	f007 f913 	bl	8008280 <HAL_SRAM_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001060:	f000 f858 	bl	8001114 <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 8001064:	4b2a      	ldr	r3, [pc, #168]	; (8001110 <MX_FSMC_Init+0x160>)
 8001066:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800106a:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800106c:	4b28      	ldr	r3, [pc, #160]	; (8001110 <MX_FSMC_Init+0x160>)
 800106e:	4a27      	ldr	r2, [pc, #156]	; (800110c <MX_FSMC_Init+0x15c>)
 8001070:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <MX_FSMC_Init+0x160>)
 8001074:	2204      	movs	r2, #4
 8001076:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001078:	4b25      	ldr	r3, [pc, #148]	; (8001110 <MX_FSMC_Init+0x160>)
 800107a:	2200      	movs	r2, #0
 800107c:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800107e:	4b24      	ldr	r3, [pc, #144]	; (8001110 <MX_FSMC_Init+0x160>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001084:	4b22      	ldr	r3, [pc, #136]	; (8001110 <MX_FSMC_Init+0x160>)
 8001086:	2210      	movs	r2, #16
 8001088:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <MX_FSMC_Init+0x160>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <MX_FSMC_Init+0x160>)
 8001092:	2200      	movs	r2, #0
 8001094:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001096:	4b1e      	ldr	r3, [pc, #120]	; (8001110 <MX_FSMC_Init+0x160>)
 8001098:	2200      	movs	r2, #0
 800109a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <MX_FSMC_Init+0x160>)
 800109e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a2:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <MX_FSMC_Init+0x160>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010aa:	4b19      	ldr	r3, [pc, #100]	; (8001110 <MX_FSMC_Init+0x160>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010b0:	4b17      	ldr	r3, [pc, #92]	; (8001110 <MX_FSMC_Init+0x160>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010b6:	4b16      	ldr	r3, [pc, #88]	; (8001110 <MX_FSMC_Init+0x160>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <MX_FSMC_Init+0x160>)
 80010be:	2200      	movs	r2, #0
 80010c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 80010c2:	4b13      	ldr	r3, [pc, #76]	; (8001110 <MX_FSMC_Init+0x160>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80010c8:	4b11      	ldr	r3, [pc, #68]	; (8001110 <MX_FSMC_Init+0x160>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010ce:	230f      	movs	r3, #15
 80010d0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80010d2:	230f      	movs	r3, #15
 80010d4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80010da:	230f      	movs	r3, #15
 80010dc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010de:	2310      	movs	r3, #16
 80010e0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010e2:	2311      	movs	r3, #17
 80010e4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2200      	movs	r2, #0
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_FSMC_Init+0x160>)
 80010f2:	f007 f8c5 	bl	8008280 <HAL_SRAM_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 80010fc:	f000 f80a 	bl	8001114 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001100:	bf00      	nop
 8001102:	3720      	adds	r7, #32
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000444 	.word	0x20000444
 800110c:	a0000104 	.word	0xa0000104
 8001110:	20000494 	.word	0x20000494

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001118:	bf00      	nop
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
	...

08001124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	607b      	str	r3, [r7, #4]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <HAL_MspInit+0x4c>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <HAL_MspInit+0x4c>)
 8001134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001138:	6453      	str	r3, [r2, #68]	; 0x44
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <HAL_MspInit+0x4c>)
 800113c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001142:	607b      	str	r3, [r7, #4]
 8001144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_MspInit+0x4c>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_MspInit+0x4c>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b06      	ldr	r3, [pc, #24]	; (8001170 <HAL_MspInit+0x4c>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	603b      	str	r3, [r7, #0]
 8001160:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08c      	sub	sp, #48	; 0x30
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117c:	f107 031c 	add.w	r3, r7, #28
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a31      	ldr	r2, [pc, #196]	; (8001258 <HAL_ADC_MspInit+0xe4>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d15b      	bne.n	800124e <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
 800119a:	4b30      	ldr	r3, [pc, #192]	; (800125c <HAL_ADC_MspInit+0xe8>)
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	4a2f      	ldr	r2, [pc, #188]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011a4:	6453      	str	r3, [r2, #68]	; 0x44
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ae:	61bb      	str	r3, [r7, #24]
 80011b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	4b29      	ldr	r3, [pc, #164]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a28      	ldr	r2, [pc, #160]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011bc:	f043 0304 	orr.w	r3, r3, #4
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b26      	ldr	r3, [pc, #152]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	617b      	str	r3, [r7, #20]
 80011cc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a21      	ldr	r2, [pc, #132]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	4b1b      	ldr	r3, [pc, #108]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a1a      	ldr	r2, [pc, #104]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011f4:	f043 0302 	orr.w	r3, r3, #2
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b18      	ldr	r3, [pc, #96]	; (800125c <HAL_ADC_MspInit+0xe8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A0_Pin|ARD_A5_Pin;
 8001206:	2311      	movs	r3, #17
 8001208:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001212:	f107 031c 	add.w	r3, r7, #28
 8001216:	4619      	mov	r1, r3
 8001218:	4811      	ldr	r0, [pc, #68]	; (8001260 <HAL_ADC_MspInit+0xec>)
 800121a:	f002 fd37 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 800121e:	2326      	movs	r3, #38	; 0x26
 8001220:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001222:	2303      	movs	r3, #3
 8001224:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122a:	f107 031c 	add.w	r3, r7, #28
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	; (8001264 <HAL_ADC_MspInit+0xf0>)
 8001232:	f002 fd2b 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 8001236:	2302      	movs	r3, #2
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 031c 	add.w	r3, r7, #28
 8001246:	4619      	mov	r1, r3
 8001248:	4807      	ldr	r0, [pc, #28]	; (8001268 <HAL_ADC_MspInit+0xf4>)
 800124a:	f002 fd1f 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800124e:	bf00      	nop
 8001250:	3730      	adds	r7, #48	; 0x30
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40012000 	.word	0x40012000
 800125c:	40023800 	.word	0x40023800
 8001260:	40020800 	.word	0x40020800
 8001264:	40020000 	.word	0x40020000
 8001268:	40020400 	.word	0x40020400

0800126c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	; 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <HAL_DAC_MspInit+0x7c>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d127      	bne.n	80012de <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b16      	ldr	r3, [pc, #88]	; (80012ec <HAL_DAC_MspInit+0x80>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	4a15      	ldr	r2, [pc, #84]	; (80012ec <HAL_DAC_MspInit+0x80>)
 8001298:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800129c:	6413      	str	r3, [r2, #64]	; 0x40
 800129e:	4b13      	ldr	r3, [pc, #76]	; (80012ec <HAL_DAC_MspInit+0x80>)
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_DAC_MspInit+0x80>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <HAL_DAC_MspInit+0x80>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <HAL_DAC_MspInit+0x80>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 80012c6:	2310      	movs	r3, #16
 80012c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ca:	2303      	movs	r3, #3
 80012cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 0314 	add.w	r3, r7, #20
 80012d6:	4619      	mov	r1, r3
 80012d8:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_DAC_MspInit+0x84>)
 80012da:	f002 fcd7 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80012de:	bf00      	nop
 80012e0:	3728      	adds	r7, #40	; 0x28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	40007400 	.word	0x40007400
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000

080012f4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08e      	sub	sp, #56	; 0x38
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a77      	ldr	r2, [pc, #476]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d00e      	beq.n	8001334 <HAL_DFSDM_ChannelMspInit+0x40>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a76      	ldr	r2, [pc, #472]	; (80014f4 <HAL_DFSDM_ChannelMspInit+0x200>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d009      	beq.n	8001334 <HAL_DFSDM_ChannelMspInit+0x40>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a74      	ldr	r2, [pc, #464]	; (80014f8 <HAL_DFSDM_ChannelMspInit+0x204>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d004      	beq.n	8001334 <HAL_DFSDM_ChannelMspInit+0x40>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a73      	ldr	r2, [pc, #460]	; (80014fc <HAL_DFSDM_ChannelMspInit+0x208>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d154      	bne.n	80013de <HAL_DFSDM_ChannelMspInit+0xea>
 8001334:	4b72      	ldr	r3, [pc, #456]	; (8001500 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d150      	bne.n	80013de <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 800133c:	2300      	movs	r3, #0
 800133e:	623b      	str	r3, [r7, #32]
 8001340:	4b70      	ldr	r3, [pc, #448]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001344:	4a6f      	ldr	r2, [pc, #444]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800134a:	6453      	str	r3, [r2, #68]	; 0x44
 800134c:	4b6d      	ldr	r3, [pc, #436]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 800134e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001350:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001354:	623b      	str	r3, [r7, #32]
 8001356:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
 800135c:	4b69      	ldr	r3, [pc, #420]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 800135e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001360:	4a68      	ldr	r2, [pc, #416]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6313      	str	r3, [r2, #48]	; 0x30
 8001368:	4b66      	ldr	r3, [pc, #408]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 800136a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	61bb      	str	r3, [r7, #24]
 8001378:	4b62      	ldr	r3, [pc, #392]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 800137a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137c:	4a61      	ldr	r2, [pc, #388]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 800137e:	f043 0308 	orr.w	r3, r3, #8
 8001382:	6313      	str	r3, [r2, #48]	; 0x30
 8001384:	4b5f      	ldr	r3, [pc, #380]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	61bb      	str	r3, [r7, #24]
 800138e:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001390:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001396:	2302      	movs	r3, #2
 8001398:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139a:	2300      	movs	r3, #0
 800139c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	2300      	movs	r3, #0
 80013a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013a2:	2306      	movs	r3, #6
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80013a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013aa:	4619      	mov	r1, r3
 80013ac:	4856      	ldr	r0, [pc, #344]	; (8001508 <HAL_DFSDM_ChannelMspInit+0x214>)
 80013ae:	f002 fc6d 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 80013b2:	2340      	movs	r3, #64	; 0x40
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b6:	2302      	movs	r3, #2
 80013b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013be:	2300      	movs	r3, #0
 80013c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80013c2:	2306      	movs	r3, #6
 80013c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 80013c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ca:	4619      	mov	r1, r3
 80013cc:	484f      	ldr	r0, [pc, #316]	; (800150c <HAL_DFSDM_ChannelMspInit+0x218>)
 80013ce:	f002 fc5d 	bl	8003c8c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80013d2:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	3301      	adds	r3, #1
 80013d8:	4a49      	ldr	r2, [pc, #292]	; (8001500 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80013da:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 80013dc:	e084      	b.n	80014e8 <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a43      	ldr	r2, [pc, #268]	; (80014f0 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d07f      	beq.n	80014e8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a41      	ldr	r2, [pc, #260]	; (80014f4 <HAL_DFSDM_ChannelMspInit+0x200>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d07a      	beq.n	80014e8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a40      	ldr	r2, [pc, #256]	; (80014f8 <HAL_DFSDM_ChannelMspInit+0x204>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d075      	beq.n	80014e8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a3e      	ldr	r2, [pc, #248]	; (80014fc <HAL_DFSDM_ChannelMspInit+0x208>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d070      	beq.n	80014e8 <HAL_DFSDM_ChannelMspInit+0x1f4>
 8001406:	4b42      	ldr	r3, [pc, #264]	; (8001510 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d16c      	bne.n	80014e8 <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a3b      	ldr	r2, [pc, #236]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001418:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b35      	ldr	r3, [pc, #212]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	4a34      	ldr	r2, [pc, #208]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6313      	str	r3, [r2, #48]	; 0x30
 800143a:	4b32      	ldr	r3, [pc, #200]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b2e      	ldr	r3, [pc, #184]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001450:	f043 0308 	orr.w	r3, r3, #8
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0308 	and.w	r3, r3, #8
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b27      	ldr	r3, [pc, #156]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a26      	ldr	r2, [pc, #152]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b24      	ldr	r3, [pc, #144]	; (8001504 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 800147e:	2380      	movs	r3, #128	; 0x80
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001482:	2302      	movs	r3, #2
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148a:	2300      	movs	r3, #0
 800148c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 800148e:	2307      	movs	r3, #7
 8001490:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	481b      	ldr	r0, [pc, #108]	; (8001508 <HAL_DFSDM_ChannelMspInit+0x214>)
 800149a:	f002 fbf7 	bl	8003c8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 800149e:	2304      	movs	r3, #4
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a2:	2302      	movs	r3, #2
 80014a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 80014ae:	2303      	movs	r3, #3
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80014b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b6:	4619      	mov	r1, r3
 80014b8:	4814      	ldr	r0, [pc, #80]	; (800150c <HAL_DFSDM_ChannelMspInit+0x218>)
 80014ba:	f002 fbe7 	bl	8003c8c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c2:	2302      	movs	r3, #2
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 80014ce:	2306      	movs	r3, #6
 80014d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 80014d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d6:	4619      	mov	r1, r3
 80014d8:	480e      	ldr	r0, [pc, #56]	; (8001514 <HAL_DFSDM_ChannelMspInit+0x220>)
 80014da:	f002 fbd7 	bl	8003c8c <HAL_GPIO_Init>
  DFSDM2_Init++;
 80014de:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	3301      	adds	r3, #1
 80014e4:	4a0a      	ldr	r2, [pc, #40]	; (8001510 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80014e6:	6013      	str	r3, [r2, #0]
}
 80014e8:	bf00      	nop
 80014ea:	3738      	adds	r7, #56	; 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40016000 	.word	0x40016000
 80014f4:	40016020 	.word	0x40016020
 80014f8:	40016040 	.word	0x40016040
 80014fc:	40016060 	.word	0x40016060
 8001500:	200004e8 	.word	0x200004e8
 8001504:	40023800 	.word	0x40023800
 8001508:	40020000 	.word	0x40020000
 800150c:	40020c00 	.word	0x40020c00
 8001510:	200004ec 	.word	0x200004ec
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08a      	sub	sp, #40	; 0x28
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <HAL_FMPI2C_MspInit+0x84>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d12b      	bne.n	8001592 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_FMPI2C_MspInit+0x88>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <HAL_FMPI2C_MspInit+0x88>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_FMPI2C_MspInit+0x88>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	613b      	str	r3, [r7, #16]
 8001554:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 8001556:	23c0      	movs	r3, #192	; 0xc0
 8001558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800155a:	2312      	movs	r3, #18
 800155c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155e:	2301      	movs	r3, #1
 8001560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001562:	2303      	movs	r3, #3
 8001564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 8001566:	2304      	movs	r3, #4
 8001568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156a:	f107 0314 	add.w	r3, r7, #20
 800156e:	4619      	mov	r1, r3
 8001570:	480c      	ldr	r0, [pc, #48]	; (80015a4 <HAL_FMPI2C_MspInit+0x8c>)
 8001572:	f002 fb8b 	bl	8003c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_FMPI2C_MspInit+0x88>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <HAL_FMPI2C_MspInit+0x88>)
 8001580:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001584:	6413      	str	r3, [r2, #64]	; 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_FMPI2C_MspInit+0x88>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40006000 	.word	0x40006000
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020800 	.word	0x40020800

080015a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a19      	ldr	r2, [pc, #100]	; (800162c <HAL_I2C_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d12c      	bne.n	8001624 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b18      	ldr	r3, [pc, #96]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6313      	str	r3, [r2, #48]	; 0x30
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_I2C_MspInit+0x88>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 80015e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015ec:	2312      	movs	r3, #18
 80015ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80015f8:	2304      	movs	r3, #4
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	4619      	mov	r1, r3
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <HAL_I2C_MspInit+0x8c>)
 8001604:	f002 fb42 	bl	8003c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4b08      	ldr	r3, [pc, #32]	; (8001630 <HAL_I2C_MspInit+0x88>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a07      	ldr	r2, [pc, #28]	; (8001630 <HAL_I2C_MspInit+0x88>)
 8001612:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_I2C_MspInit+0x88>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001624:	bf00      	nop
 8001626:	3728      	adds	r7, #40	; 0x28
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40005800 	.word	0x40005800
 8001630:	40023800 	.word	0x40023800
 8001634:	40020400 	.word	0x40020400

08001638 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08c      	sub	sp, #48	; 0x30
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001640:	f107 031c 	add.w	r3, r7, #28
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a4f      	ldr	r2, [pc, #316]	; (8001794 <HAL_I2S_MspInit+0x15c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	f040 8097 	bne.w	800178a <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800165c:	2300      	movs	r3, #0
 800165e:	61bb      	str	r3, [r7, #24]
 8001660:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_I2S_MspInit+0x160>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001664:	4a4c      	ldr	r2, [pc, #304]	; (8001798 <HAL_I2S_MspInit+0x160>)
 8001666:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800166a:	6413      	str	r3, [r2, #64]	; 0x40
 800166c:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_I2S_MspInit+0x160>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001674:	61bb      	str	r3, [r7, #24]
 8001676:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	4b46      	ldr	r3, [pc, #280]	; (8001798 <HAL_I2S_MspInit+0x160>)
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	4a45      	ldr	r2, [pc, #276]	; (8001798 <HAL_I2S_MspInit+0x160>)
 8001682:	f043 0304 	orr.w	r3, r3, #4
 8001686:	6313      	str	r3, [r2, #48]	; 0x30
 8001688:	4b43      	ldr	r3, [pc, #268]	; (8001798 <HAL_I2S_MspInit+0x160>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	617b      	str	r3, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	4b3f      	ldr	r3, [pc, #252]	; (8001798 <HAL_I2S_MspInit+0x160>)
 800169a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169c:	4a3e      	ldr	r2, [pc, #248]	; (8001798 <HAL_I2S_MspInit+0x160>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	6313      	str	r3, [r2, #48]	; 0x30
 80016a4:	4b3c      	ldr	r3, [pc, #240]	; (8001798 <HAL_I2S_MspInit+0x160>)
 80016a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a8:	f003 0301 	and.w	r3, r3, #1
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016b0:	2300      	movs	r3, #0
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	4b38      	ldr	r3, [pc, #224]	; (8001798 <HAL_I2S_MspInit+0x160>)
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	4a37      	ldr	r2, [pc, #220]	; (8001798 <HAL_I2S_MspInit+0x160>)
 80016ba:	f043 0308 	orr.w	r3, r3, #8
 80016be:	6313      	str	r3, [r2, #48]	; 0x30
 80016c0:	4b35      	ldr	r3, [pc, #212]	; (8001798 <HAL_I2S_MspInit+0x160>)
 80016c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c4:	f003 0308 	and.w	r3, r3, #8
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016cc:	2300      	movs	r3, #0
 80016ce:	60bb      	str	r3, [r7, #8]
 80016d0:	4b31      	ldr	r3, [pc, #196]	; (8001798 <HAL_I2S_MspInit+0x160>)
 80016d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d4:	4a30      	ldr	r2, [pc, #192]	; (8001798 <HAL_I2S_MspInit+0x160>)
 80016d6:	f043 0302 	orr.w	r3, r3, #2
 80016da:	6313      	str	r3, [r2, #48]	; 0x30
 80016dc:	4b2e      	ldr	r3, [pc, #184]	; (8001798 <HAL_I2S_MspInit+0x160>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	60bb      	str	r3, [r7, #8]
 80016e6:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 80016e8:	2304      	movs	r3, #4
 80016ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80016f8:	2306      	movs	r3, #6
 80016fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80016fc:	f107 031c 	add.w	r3, r7, #28
 8001700:	4619      	mov	r1, r3
 8001702:	4826      	ldr	r0, [pc, #152]	; (800179c <HAL_I2S_MspInit+0x164>)
 8001704:	f002 fac2 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 8001708:	2308      	movs	r3, #8
 800170a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2300      	movs	r3, #0
 8001716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001718:	2305      	movs	r3, #5
 800171a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 031c 	add.w	r3, r7, #28
 8001720:	4619      	mov	r1, r3
 8001722:	481e      	ldr	r0, [pc, #120]	; (800179c <HAL_I2S_MspInit+0x164>)
 8001724:	f002 fab2 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 8001728:	2308      	movs	r3, #8
 800172a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172c:	2302      	movs	r3, #2
 800172e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001730:	2300      	movs	r3, #0
 8001732:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001738:	2305      	movs	r3, #5
 800173a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 800173c:	f107 031c 	add.w	r3, r7, #28
 8001740:	4619      	mov	r1, r3
 8001742:	4817      	ldr	r0, [pc, #92]	; (80017a0 <HAL_I2S_MspInit+0x168>)
 8001744:	f002 faa2 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 8001748:	2308      	movs	r3, #8
 800174a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001758:	2305      	movs	r3, #5
 800175a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 800175c:	f107 031c 	add.w	r3, r7, #28
 8001760:	4619      	mov	r1, r3
 8001762:	4810      	ldr	r0, [pc, #64]	; (80017a4 <HAL_I2S_MspInit+0x16c>)
 8001764:	f002 fa92 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 8001768:	f44f 7300 	mov.w	r3, #512	; 0x200
 800176c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176e:	2302      	movs	r3, #2
 8001770:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001772:	2300      	movs	r3, #0
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001776:	2300      	movs	r3, #0
 8001778:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800177a:	2305      	movs	r3, #5
 800177c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 800177e:	f107 031c 	add.w	r3, r7, #28
 8001782:	4619      	mov	r1, r3
 8001784:	4808      	ldr	r0, [pc, #32]	; (80017a8 <HAL_I2S_MspInit+0x170>)
 8001786:	f002 fa81 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800178a:	bf00      	nop
 800178c:	3730      	adds	r7, #48	; 0x30
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40003800 	.word	0x40003800
 8001798:	40023800 	.word	0x40023800
 800179c:	40020800 	.word	0x40020800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020c00 	.word	0x40020c00
 80017a8:	40020400 	.word	0x40020400

080017ac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	; 0x38
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a56      	ldr	r2, [pc, #344]	; (8001924 <HAL_QSPI_MspInit+0x178>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	f040 80a6 	bne.w	800191c <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	623b      	str	r3, [r7, #32]
 80017d4:	4b54      	ldr	r3, [pc, #336]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 80017d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d8:	4a53      	ldr	r2, [pc, #332]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 80017da:	f043 0302 	orr.w	r3, r3, #2
 80017de:	6393      	str	r3, [r2, #56]	; 0x38
 80017e0:	4b51      	ldr	r3, [pc, #324]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 80017e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	623b      	str	r3, [r7, #32]
 80017ea:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	61fb      	str	r3, [r7, #28]
 80017f0:	4b4d      	ldr	r3, [pc, #308]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f4:	4a4c      	ldr	r2, [pc, #304]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 80017f6:	f043 0310 	orr.w	r3, r3, #16
 80017fa:	6313      	str	r3, [r2, #48]	; 0x30
 80017fc:	4b4a      	ldr	r3, [pc, #296]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001800:	f003 0310 	and.w	r3, r3, #16
 8001804:	61fb      	str	r3, [r7, #28]
 8001806:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
 800180c:	4b46      	ldr	r3, [pc, #280]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	4a45      	ldr	r2, [pc, #276]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 8001812:	f043 0320 	orr.w	r3, r3, #32
 8001816:	6313      	str	r3, [r2, #48]	; 0x30
 8001818:	4b43      	ldr	r3, [pc, #268]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181c:	f003 0320 	and.w	r3, r3, #32
 8001820:	61bb      	str	r3, [r7, #24]
 8001822:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	4b3f      	ldr	r3, [pc, #252]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	4a3e      	ldr	r2, [pc, #248]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 800182e:	f043 0302 	orr.w	r3, r3, #2
 8001832:	6313      	str	r3, [r2, #48]	; 0x30
 8001834:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	f003 0302 	and.w	r3, r3, #2
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001840:	2300      	movs	r3, #0
 8001842:	613b      	str	r3, [r7, #16]
 8001844:	4b38      	ldr	r3, [pc, #224]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 8001846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001848:	4a37      	ldr	r2, [pc, #220]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 800184a:	f043 0308 	orr.w	r3, r3, #8
 800184e:	6313      	str	r3, [r2, #48]	; 0x30
 8001850:	4b35      	ldr	r3, [pc, #212]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	613b      	str	r3, [r7, #16]
 800185a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800185c:	2300      	movs	r3, #0
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	4b31      	ldr	r3, [pc, #196]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	4a30      	ldr	r2, [pc, #192]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 8001866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800186a:	6313      	str	r3, [r2, #48]	; 0x30
 800186c:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <HAL_QSPI_MspInit+0x17c>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 8001878:	2304      	movs	r3, #4
 800187a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800187c:	2302      	movs	r3, #2
 800187e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001884:	2303      	movs	r3, #3
 8001886:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 8001888:	2309      	movs	r3, #9
 800188a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 800188c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001890:	4619      	mov	r1, r3
 8001892:	4826      	ldr	r0, [pc, #152]	; (800192c <HAL_QSPI_MspInit+0x180>)
 8001894:	f002 f9fa 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 8001898:	f44f 7340 	mov.w	r3, #768	; 0x300
 800189c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	2302      	movs	r3, #2
 80018a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a2:	2300      	movs	r3, #0
 80018a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a6:	2303      	movs	r3, #3
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80018aa:	230a      	movs	r3, #10
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b2:	4619      	mov	r1, r3
 80018b4:	481e      	ldr	r0, [pc, #120]	; (8001930 <HAL_QSPI_MspInit+0x184>)
 80018b6:	f002 f9e9 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 80018ba:	2304      	movs	r3, #4
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80018ca:	2309      	movs	r3, #9
 80018cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d2:	4619      	mov	r1, r3
 80018d4:	4817      	ldr	r0, [pc, #92]	; (8001934 <HAL_QSPI_MspInit+0x188>)
 80018d6:	f002 f9d9 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 80018da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	2302      	movs	r3, #2
 80018e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e8:	2303      	movs	r3, #3
 80018ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80018ec:	2309      	movs	r3, #9
 80018ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80018f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f4:	4619      	mov	r1, r3
 80018f6:	4810      	ldr	r0, [pc, #64]	; (8001938 <HAL_QSPI_MspInit+0x18c>)
 80018f8:	f002 f9c8 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80018fc:	2340      	movs	r3, #64	; 0x40
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800190c:	230a      	movs	r3, #10
 800190e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001914:	4619      	mov	r1, r3
 8001916:	4809      	ldr	r0, [pc, #36]	; (800193c <HAL_QSPI_MspInit+0x190>)
 8001918:	f002 f9b8 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800191c:	bf00      	nop
 800191e:	3738      	adds	r7, #56	; 0x38
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	a0001000 	.word	0xa0001000
 8001928:	40023800 	.word	0x40023800
 800192c:	40021000 	.word	0x40021000
 8001930:	40021400 	.word	0x40021400
 8001934:	40020400 	.word	0x40020400
 8001938:	40020c00 	.word	0x40020c00
 800193c:	40021800 	.word	0x40021800

08001940 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08a      	sub	sp, #40	; 0x28
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001948:	f107 0314 	add.w	r3, r7, #20
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a28      	ldr	r2, [pc, #160]	; (8001a00 <HAL_SD_MspInit+0xc0>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d14a      	bne.n	80019f8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_SD_MspInit+0xc4>)
 8001968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196a:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <HAL_SD_MspInit+0xc4>)
 800196c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001970:	6453      	str	r3, [r2, #68]	; 0x44
 8001972:	4b24      	ldr	r3, [pc, #144]	; (8001a04 <HAL_SD_MspInit+0xc4>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	4b20      	ldr	r3, [pc, #128]	; (8001a04 <HAL_SD_MspInit+0xc4>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a1f      	ldr	r2, [pc, #124]	; (8001a04 <HAL_SD_MspInit+0xc4>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b1d      	ldr	r3, [pc, #116]	; (8001a04 <HAL_SD_MspInit+0xc4>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	4b19      	ldr	r3, [pc, #100]	; (8001a04 <HAL_SD_MspInit+0xc4>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_SD_MspInit+0xc4>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b16      	ldr	r3, [pc, #88]	; (8001a04 <HAL_SD_MspInit+0xc4>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 80019b6:	2340      	movs	r3, #64	; 0x40
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019c6:	230c      	movs	r3, #12
 80019c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	480d      	ldr	r0, [pc, #52]	; (8001a08 <HAL_SD_MspInit+0xc8>)
 80019d2:	f002 f95b 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 80019d6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80019da:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80019e8:	230c      	movs	r3, #12
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	4619      	mov	r1, r3
 80019f2:	4806      	ldr	r0, [pc, #24]	; (8001a0c <HAL_SD_MspInit+0xcc>)
 80019f4:	f002 f94a 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80019f8:	bf00      	nop
 80019fa:	3728      	adds	r7, #40	; 0x28
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40012c00 	.word	0x40012c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	40020000 	.word	0x40020000
 8001a0c:	40020800 	.word	0x40020800

08001a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08c      	sub	sp, #48	; 0x30
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 031c 	add.w	r3, r7, #28
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a33      	ldr	r2, [pc, #204]	; (8001afc <HAL_UART_MspInit+0xec>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12d      	bne.n	8001a8e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	61bb      	str	r3, [r7, #24]
 8001a36:	4b32      	ldr	r3, [pc, #200]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a31      	ldr	r2, [pc, #196]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b2f      	ldr	r3, [pc, #188]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a4a:	61bb      	str	r3, [r7, #24]
 8001a4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a2a      	ldr	r2, [pc, #168]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b28      	ldr	r3, [pc, #160]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001a6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a74:	2301      	movs	r3, #1
 8001a76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001a7c:	230b      	movs	r3, #11
 8001a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001a80:	f107 031c 	add.w	r3, r7, #28
 8001a84:	4619      	mov	r1, r3
 8001a86:	481f      	ldr	r0, [pc, #124]	; (8001b04 <HAL_UART_MspInit+0xf4>)
 8001a88:	f002 f900 	bl	8003c8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001a8c:	e031      	b.n	8001af2 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_UART_MspInit+0xf8>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d12c      	bne.n	8001af2 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001a98:	2300      	movs	r3, #0
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	4a17      	ldr	r2, [pc, #92]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001aa2:	f043 0320 	orr.w	r3, r3, #32
 8001aa6:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa8:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aac:	f003 0320 	and.w	r3, r3, #32
 8001ab0:	613b      	str	r3, [r7, #16]
 8001ab2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	4b11      	ldr	r3, [pc, #68]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001abe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac4:	4b0e      	ldr	r3, [pc, #56]	; (8001b00 <HAL_UART_MspInit+0xf0>)
 8001ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001acc:	60fb      	str	r3, [r7, #12]
 8001ace:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001ad0:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ada:	2300      	movs	r3, #0
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ae2:	2308      	movs	r3, #8
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001ae6:	f107 031c 	add.w	r3, r7, #28
 8001aea:	4619      	mov	r1, r3
 8001aec:	4805      	ldr	r0, [pc, #20]	; (8001b04 <HAL_UART_MspInit+0xf4>)
 8001aee:	f002 f8cd 	bl	8003c8c <HAL_GPIO_Init>
}
 8001af2:	bf00      	nop
 8001af4:	3730      	adds	r7, #48	; 0x30
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40011c00 	.word	0x40011c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	40021800 	.word	0x40021800
 8001b08:	40011400 	.word	0x40011400

08001b0c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b086      	sub	sp, #24
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	609a      	str	r2, [r3, #8]
 8001b1c:	60da      	str	r2, [r3, #12]
 8001b1e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001b20:	4b2c      	ldr	r3, [pc, #176]	; (8001bd4 <HAL_FSMC_MspInit+0xc8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d151      	bne.n	8001bcc <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001b28:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <HAL_FSMC_MspInit+0xc8>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	603b      	str	r3, [r7, #0]
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <HAL_FSMC_MspInit+0xcc>)
 8001b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b36:	4a28      	ldr	r2, [pc, #160]	; (8001bd8 <HAL_FSMC_MspInit+0xcc>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6393      	str	r3, [r2, #56]	; 0x38
 8001b3e:	4b26      	ldr	r3, [pc, #152]	; (8001bd8 <HAL_FSMC_MspInit+0xcc>)
 8001b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	603b      	str	r3, [r7, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001b4a:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001b4e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b50:	2302      	movs	r3, #2
 8001b52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b54:	2300      	movs	r3, #0
 8001b56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	4619      	mov	r1, r3
 8001b64:	481d      	ldr	r0, [pc, #116]	; (8001bdc <HAL_FSMC_MspInit+0xd0>)
 8001b66:	f002 f891 	bl	8003c8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001b6a:	f240 433f 	movw	r3, #1087	; 0x43f
 8001b6e:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b70:	2302      	movs	r3, #2
 8001b72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b74:	2300      	movs	r3, #0
 8001b76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b7c:	230c      	movs	r3, #12
 8001b7e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	4619      	mov	r1, r3
 8001b84:	4816      	ldr	r0, [pc, #88]	; (8001be0 <HAL_FSMC_MspInit+0xd4>)
 8001b86:	f002 f881 	bl	8003c8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001b8a:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001b8e:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001b9c:	230c      	movs	r3, #12
 8001b9e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	480f      	ldr	r0, [pc, #60]	; (8001be4 <HAL_FSMC_MspInit+0xd8>)
 8001ba6:	f002 f871 	bl	8003c8c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001baa:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001bae:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb8:	2303      	movs	r3, #3
 8001bba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001bbc:	230c      	movs	r3, #12
 8001bbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4808      	ldr	r0, [pc, #32]	; (8001be8 <HAL_FSMC_MspInit+0xdc>)
 8001bc6:	f002 f861 	bl	8003c8c <HAL_GPIO_Init>
 8001bca:	e000      	b.n	8001bce <HAL_FSMC_MspInit+0xc2>
    return;
 8001bcc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001bce:	3718      	adds	r7, #24
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	200004f0 	.word	0x200004f0
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40021400 	.word	0x40021400
 8001be0:	40021800 	.word	0x40021800
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40020c00 	.word	0x40020c00

08001bec <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001bf4:	f7ff ff8a 	bl	8001b0c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <HardFault_Handler+0x4>

08001c14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <MemManage_Handler+0x4>

08001c1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c1e:	e7fe      	b.n	8001c1e <BusFault_Handler+0x4>

08001c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c24:	e7fe      	b.n	8001c24 <UsageFault_Handler+0x4>

08001c26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c42:	b480      	push	{r7}
 8001c44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c46:	bf00      	nop
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c54:	f001 f9b6 	bl	8002fc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <OTG_FS_IRQHandler+0x10>)
 8001c62:	f002 fc83 	bl	800456c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	20000928 	.word	0x20000928

08001c70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c78:	4a14      	ldr	r2, [pc, #80]	; (8001ccc <_sbrk+0x5c>)
 8001c7a:	4b15      	ldr	r3, [pc, #84]	; (8001cd0 <_sbrk+0x60>)
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d102      	bne.n	8001c92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <_sbrk+0x64>)
 8001c8e:	4a12      	ldr	r2, [pc, #72]	; (8001cd8 <_sbrk+0x68>)
 8001c90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c92:	4b10      	ldr	r3, [pc, #64]	; (8001cd4 <_sbrk+0x64>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	693a      	ldr	r2, [r7, #16]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d207      	bcs.n	8001cb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca0:	f00a ff3e 	bl	800cb20 <__errno>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	220c      	movs	r2, #12
 8001ca8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001caa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cae:	e009      	b.n	8001cc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <_sbrk+0x64>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cb6:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <_sbrk+0x64>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4413      	add	r3, r2
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <_sbrk+0x64>)
 8001cc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20050000 	.word	0x20050000
 8001cd0:	00000400 	.word	0x00000400
 8001cd4:	200004f4 	.word	0x200004f4
 8001cd8:	20000c00 	.word	0x20000c00

08001cdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ce0:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <SystemInit+0x28>)
 8001ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce6:	4a07      	ldr	r2, [pc, #28]	; (8001d04 <SystemInit+0x28>)
 8001ce8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cf0:	4b04      	ldr	r3, [pc, #16]	; (8001d04 <SystemInit+0x28>)
 8001cf2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf6:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001d0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d0e:	e003      	b.n	8001d18 <LoopCopyDataInit>

08001d10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d10:	4b0c      	ldr	r3, [pc, #48]	; (8001d44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d16:	3104      	adds	r1, #4

08001d18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d1a:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d20:	d3f6      	bcc.n	8001d10 <CopyDataInit>
  ldr  r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d24:	e002      	b.n	8001d2c <LoopFillZerobss>

08001d26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001d26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d28:	f842 3b04 	str.w	r3, [r2], #4

08001d2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d2c:	4b09      	ldr	r3, [pc, #36]	; (8001d54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d30:	d3f9      	bcc.n	8001d26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d32:	f7ff ffd3 	bl	8001cdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f00a fef9 	bl	800cb2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7fe fbef 	bl	800051c <main>
  bx  lr    
 8001d3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d40:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001d44:	0800f908 	.word	0x0800f908
  ldr  r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d4c:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8001d50:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8001d54:	20000bfc 	.word	0x20000bfc

08001d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC_IRQHandler>

08001d5a <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b084      	sub	sp, #16
 8001d5e:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001d60:	f000 fd78 	bl	8002854 <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	2010      	movs	r0, #16
 8001d6a:	f000 f9e4 	bl	8002136 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001d6e:	200a      	movs	r0, #10
 8001d70:	f000 fd97 	bl	80028a2 <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001d74:	2200      	movs	r2, #0
 8001d76:	2100      	movs	r1, #0
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 f9dc 	bl	8002136 <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8001d7e:	20c8      	movs	r0, #200	; 0xc8
 8001d80:	f000 fd8f 	bl	80028a2 <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8001d84:	2200      	movs	r2, #0
 8001d86:	2100      	movs	r1, #0
 8001d88:	2011      	movs	r0, #17
 8001d8a:	f000 f9d4 	bl	8002136 <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8001d8e:	2078      	movs	r0, #120	; 0x78
 8001d90:	f000 fd87 	bl	80028a2 <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8001d94:	2300      	movs	r3, #0
 8001d96:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001d98:	463b      	mov	r3, r7
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	2036      	movs	r0, #54	; 0x36
 8001da0:	f000 f9c9 	bl	8002136 <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8001da4:	2305      	movs	r3, #5
 8001da6:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001da8:	463b      	mov	r3, r7
 8001daa:	2201      	movs	r2, #1
 8001dac:	4619      	mov	r1, r3
 8001dae:	203a      	movs	r0, #58	; 0x3a
 8001db0:	f000 f9c1 	bl	8002136 <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001db4:	2200      	movs	r2, #0
 8001db6:	2100      	movs	r1, #0
 8001db8:	2021      	movs	r0, #33	; 0x21
 8001dba:	f000 f9bc 	bl	8002136 <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001dca:	23ef      	movs	r3, #239	; 0xef
 8001dcc:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001dce:	463b      	mov	r3, r7
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	202a      	movs	r0, #42	; 0x2a
 8001dd6:	f000 f9ae 	bl	8002136 <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001dde:	2300      	movs	r3, #0
 8001de0:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001de2:	2300      	movs	r3, #0
 8001de4:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001de6:	23ef      	movs	r3, #239	; 0xef
 8001de8:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001dea:	463b      	mov	r3, r7
 8001dec:	2204      	movs	r2, #4
 8001dee:	4619      	mov	r1, r3
 8001df0:	202b      	movs	r0, #43	; 0x2b
 8001df2:	f000 f9a0 	bl	8002136 <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001df6:	230c      	movs	r3, #12
 8001df8:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001dfa:	230c      	movs	r3, #12
 8001dfc:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001e02:	2333      	movs	r3, #51	; 0x33
 8001e04:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001e06:	2333      	movs	r3, #51	; 0x33
 8001e08:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001e0a:	463b      	mov	r3, r7
 8001e0c:	2205      	movs	r2, #5
 8001e0e:	4619      	mov	r1, r3
 8001e10:	20b2      	movs	r0, #178	; 0xb2
 8001e12:	f000 f990 	bl	8002136 <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001e16:	2335      	movs	r3, #53	; 0x35
 8001e18:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001e1a:	463b      	mov	r3, r7
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4619      	mov	r1, r3
 8001e20:	20b7      	movs	r0, #183	; 0xb7
 8001e22:	f000 f988 	bl	8002136 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001e26:	231f      	movs	r3, #31
 8001e28:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	4619      	mov	r1, r3
 8001e30:	20bb      	movs	r0, #187	; 0xbb
 8001e32:	f000 f980 	bl	8002136 <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001e36:	232c      	movs	r3, #44	; 0x2c
 8001e38:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	4619      	mov	r1, r3
 8001e40:	20c0      	movs	r0, #192	; 0xc0
 8001e42:	f000 f978 	bl	8002136 <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001e46:	2301      	movs	r3, #1
 8001e48:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001e4a:	23c3      	movs	r3, #195	; 0xc3
 8001e4c:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001e4e:	463b      	mov	r3, r7
 8001e50:	2202      	movs	r2, #2
 8001e52:	4619      	mov	r1, r3
 8001e54:	20c2      	movs	r0, #194	; 0xc2
 8001e56:	f000 f96e 	bl	8002136 <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001e5a:	2320      	movs	r3, #32
 8001e5c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2201      	movs	r2, #1
 8001e62:	4619      	mov	r1, r3
 8001e64:	20c4      	movs	r0, #196	; 0xc4
 8001e66:	f000 f966 	bl	8002136 <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8001e6a:	230f      	movs	r3, #15
 8001e6c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8001e6e:	463b      	mov	r3, r7
 8001e70:	2201      	movs	r2, #1
 8001e72:	4619      	mov	r1, r3
 8001e74:	20c6      	movs	r0, #198	; 0xc6
 8001e76:	f000 f95e 	bl	8002136 <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8001e7a:	23a4      	movs	r3, #164	; 0xa4
 8001e7c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8001e7e:	23a1      	movs	r3, #161	; 0xa1
 8001e80:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 8001e82:	463b      	mov	r3, r7
 8001e84:	2201      	movs	r2, #1
 8001e86:	4619      	mov	r1, r3
 8001e88:	20d0      	movs	r0, #208	; 0xd0
 8001e8a:	f000 f954 	bl	8002136 <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8001e8e:	23d0      	movs	r3, #208	; 0xd0
 8001e90:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001e92:	2308      	movs	r3, #8
 8001e94:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 8001e96:	2311      	movs	r3, #17
 8001e98:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 8001ea2:	2315      	movs	r3, #21
 8001ea4:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001ea6:	2339      	movs	r3, #57	; 0x39
 8001ea8:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8001eaa:	2333      	movs	r3, #51	; 0x33
 8001eac:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8001eae:	2350      	movs	r3, #80	; 0x50
 8001eb0:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 8001eb2:	2336      	movs	r3, #54	; 0x36
 8001eb4:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 8001eb6:	2313      	movs	r3, #19
 8001eb8:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001eba:	2314      	movs	r3, #20
 8001ebc:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8001ebe:	2329      	movs	r3, #41	; 0x29
 8001ec0:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 8001ec2:	232d      	movs	r3, #45	; 0x2d
 8001ec4:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 8001ec6:	463b      	mov	r3, r7
 8001ec8:	220e      	movs	r2, #14
 8001eca:	4619      	mov	r1, r3
 8001ecc:	20e0      	movs	r0, #224	; 0xe0
 8001ece:	f000 f932 	bl	8002136 <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 8001ed2:	23d0      	movs	r3, #208	; 0xd0
 8001ed4:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8001eda:	2310      	movs	r3, #16
 8001edc:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8001ede:	2308      	movs	r3, #8
 8001ee0:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 8001ee2:	2306      	movs	r3, #6
 8001ee4:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 8001ee6:	2306      	movs	r3, #6
 8001ee8:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8001eea:	2339      	movs	r3, #57	; 0x39
 8001eec:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8001eee:	2344      	movs	r3, #68	; 0x44
 8001ef0:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 8001ef2:	2351      	movs	r3, #81	; 0x51
 8001ef4:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 8001ef6:	230b      	movs	r3, #11
 8001ef8:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8001efa:	2316      	movs	r3, #22
 8001efc:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8001efe:	2314      	movs	r3, #20
 8001f00:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 8001f02:	232f      	movs	r3, #47	; 0x2f
 8001f04:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 8001f06:	2331      	movs	r3, #49	; 0x31
 8001f08:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 8001f0a:	463b      	mov	r3, r7
 8001f0c:	220e      	movs	r2, #14
 8001f0e:	4619      	mov	r1, r3
 8001f10:	20e1      	movs	r0, #225	; 0xe1
 8001f12:	f000 f910 	bl	8002136 <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 8001f16:	f000 f847 	bl	8001fa8 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	2035      	movs	r0, #53	; 0x35
 8001f26:	f000 f906 	bl	8002136 <ST7789H2_WriteReg>

}
 8001f2a:	bf00      	nop
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d102      	bne.n	8001f46 <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 8001f40:	2300      	movs	r3, #0
 8001f42:	723b      	strb	r3, [r7, #8]
 8001f44:	e025      	b.n	8001f92 <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d120      	bne.n	8001f8e <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 8001f50:	2300      	movs	r3, #0
 8001f52:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 8001f54:	2301      	movs	r3, #1
 8001f56:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 8001f58:	23f0      	movs	r3, #240	; 0xf0
 8001f5a:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 8001f60:	2300      	movs	r3, #0
 8001f62:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 8001f64:	f107 0308 	add.w	r3, r7, #8
 8001f68:	2206      	movs	r2, #6
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	2033      	movs	r0, #51	; 0x33
 8001f6e:	f000 f8e2 	bl	8002136 <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 8001f72:	2300      	movs	r3, #0
 8001f74:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 8001f76:	2350      	movs	r3, #80	; 0x50
 8001f78:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8001f7a:	f107 0308 	add.w	r3, r7, #8
 8001f7e:	2202      	movs	r2, #2
 8001f80:	4619      	mov	r1, r3
 8001f82:	2037      	movs	r0, #55	; 0x37
 8001f84:	f000 f8d7 	bl	8002136 <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8001f88:	23c0      	movs	r3, #192	; 0xc0
 8001f8a:	723b      	strb	r3, [r7, #8]
 8001f8c:	e001      	b.n	8001f92 <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8001f8e:	2360      	movs	r3, #96	; 0x60
 8001f90:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001f92:	f107 0308 	add.w	r3, r7, #8
 8001f96:	2201      	movs	r2, #1
 8001f98:	4619      	mov	r1, r3
 8001f9a:	2036      	movs	r0, #54	; 0x36
 8001f9c:	f000 f8cb 	bl	8002136 <ST7789H2_WriteReg>
}
 8001fa0:	bf00      	nop
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	2029      	movs	r0, #41	; 0x29
 8001fb2:	f000 f8c0 	bl	8002136 <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2011      	movs	r0, #17
 8001fbc:	f000 f8bb 	bl	8002136 <ST7789H2_WriteReg>
}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8001fca:	23fe      	movs	r3, #254	; 0xfe
 8001fcc:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8001fce:	1d3b      	adds	r3, r7, #4
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	20bd      	movs	r0, #189	; 0xbd
 8001fd6:	f000 f8ae 	bl	8002136 <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	2010      	movs	r0, #16
 8001fe0:	f000 f8a9 	bl	8002136 <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001fe4:	200a      	movs	r0, #10
 8001fe6:	f000 fc5c 	bl	80028a2 <LCD_IO_Delay>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 8001ff6:	23f0      	movs	r3, #240	; 0xf0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 8002002:	b480      	push	{r7}
 8002004:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 8002006:	23f0      	movs	r3, #240	; 0xf0
}
 8002008:	4618      	mov	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr

08002012 <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8002016:	f000 fc1d 	bl	8002854 <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 800201a:	2004      	movs	r0, #4
 800201c:	f000 f8ae 	bl	800217c <ST7789H2_ReadReg>
 8002020:	4603      	mov	r3, r0
 8002022:	b29b      	uxth	r3, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}

08002028 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b084      	sub	sp, #16
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	460a      	mov	r2, r1
 8002032:	80fb      	strh	r3, [r7, #6]
 8002034:	4613      	mov	r3, r2
 8002036:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 8002038:	2300      	movs	r3, #0
 800203a:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 800203c:	88fb      	ldrh	r3, [r7, #6]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002042:	2300      	movs	r3, #0
 8002044:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3b11      	subs	r3, #17
 800204c:	b2db      	uxtb	r3, r3
 800204e:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8002050:	f107 030c 	add.w	r3, r7, #12
 8002054:	2204      	movs	r2, #4
 8002056:	4619      	mov	r1, r3
 8002058:	202a      	movs	r0, #42	; 0x2a
 800205a:	f000 f86c 	bl	8002136 <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 800205e:	2300      	movs	r3, #0
 8002060:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 8002062:	88bb      	ldrh	r3, [r7, #4]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002068:	2300      	movs	r3, #0
 800206a:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 800206c:	88bb      	ldrh	r3, [r7, #4]
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3b11      	subs	r3, #17
 8002072:	b2db      	uxtb	r3, r3
 8002074:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8002076:	f107 030c 	add.w	r3, r7, #12
 800207a:	2204      	movs	r2, #4
 800207c:	4619      	mov	r1, r3
 800207e:	202b      	movs	r0, #43	; 0x2b
 8002080:	f000 f859 	bl	8002136 <ST7789H2_WriteReg>
}
 8002084:	bf00      	nop
 8002086:	3710      	adds	r7, #16
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}

0800208c <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	80fb      	strh	r3, [r7, #6]
 8002096:	460b      	mov	r3, r1
 8002098:	80bb      	strh	r3, [r7, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800209e:	88ba      	ldrh	r2, [r7, #4]
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	4611      	mov	r1, r2
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff ffbf 	bl	8002028 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80020aa:	2200      	movs	r2, #0
 80020ac:	2100      	movs	r1, #0
 80020ae:	202c      	movs	r0, #44	; 0x2c
 80020b0:	f000 f841 	bl	8002136 <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 80020b4:	887b      	ldrh	r3, [r7, #2]
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 fbd2 	bl	8002860 <LCD_IO_WriteData>
}
 80020bc:	bf00      	nop
 80020be:	3708      	adds	r7, #8
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	4603      	mov	r3, r0
 80020cc:	460a      	mov	r2, r1
 80020ce:	80fb      	strh	r3, [r7, #6]
 80020d0:	4613      	mov	r3, r2
 80020d2:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80020d4:	88ba      	ldrh	r2, [r7, #4]
 80020d6:	88fb      	ldrh	r3, [r7, #6]
 80020d8:	4611      	mov	r1, r2
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff ffa4 	bl	8002028 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 80020e0:	88ba      	ldrh	r2, [r7, #4]
 80020e2:	88fb      	ldrh	r3, [r7, #6]
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f000 f9c4 	bl	8002474 <ST7789H2_ReadPixel_rgb888>
 80020ec:	4603      	mov	r3, r0
 80020ee:	461a      	mov	r2, r3
 80020f0:	733a      	strb	r2, [r7, #12]
 80020f2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80020f6:	737a      	strb	r2, [r7, #13]
 80020f8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80020fc:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 80020fe:	7b3b      	ldrb	r3, [r7, #12]
 8002100:	08db      	lsrs	r3, r3, #3
 8002102:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 8002104:	7b7b      	ldrb	r3, [r7, #13]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 800210a:	7bbb      	ldrb	r3, [r7, #14]
 800210c:	08db      	lsrs	r3, r3, #3
 800210e:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 8002110:	7dfb      	ldrb	r3, [r7, #23]
 8002112:	b29b      	uxth	r3, r3
 8002114:	02db      	lsls	r3, r3, #11
 8002116:	b29a      	uxth	r2, r3
 8002118:	7dbb      	ldrb	r3, [r7, #22]
 800211a:	b29b      	uxth	r3, r3
 800211c:	015b      	lsls	r3, r3, #5
 800211e:	b29b      	uxth	r3, r3
 8002120:	4413      	add	r3, r2
 8002122:	b29a      	uxth	r2, r3
 8002124:	7d7b      	ldrb	r3, [r7, #21]
 8002126:	b29b      	uxth	r3, r3
 8002128:	4413      	add	r3, r2
 800212a:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 800212c:	8a7b      	ldrh	r3, [r7, #18]
}
 800212e:	4618      	mov	r0, r3
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b084      	sub	sp, #16
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	6039      	str	r1, [r7, #0]
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	4613      	mov	r3, r2
 8002144:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	4618      	mov	r0, r3
 800214a:	f000 fb96 	bl	800287a <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 800214e:	2300      	movs	r3, #0
 8002150:	73fb      	strb	r3, [r7, #15]
 8002152:	e00a      	b.n	800216a <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 8002154:	7bfb      	ldrb	r3, [r7, #15]
 8002156:	683a      	ldr	r2, [r7, #0]
 8002158:	4413      	add	r3, r2
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fb7e 	bl	8002860 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 8002164:	7bfb      	ldrb	r3, [r7, #15]
 8002166:	3301      	adds	r3, #1
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	7bfa      	ldrb	r2, [r7, #15]
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	429a      	cmp	r2, r3
 8002170:	d3f0      	bcc.n	8002154 <ST7789H2_WriteReg+0x1e>
  }
}
 8002172:	bf00      	nop
 8002174:	bf00      	nop
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 8002186:	79fb      	ldrb	r3, [r7, #7]
 8002188:	4618      	mov	r0, r3
 800218a:	f000 fb76 	bl	800287a <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 800218e:	f000 fb81 	bl	8002894 <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 8002192:	f000 fb7f 	bl	8002894 <LCD_IO_ReadData>
 8002196:	4603      	mov	r3, r0
 8002198:	b2db      	uxtb	r3, r3
}
 800219a:	4618      	mov	r0, r3
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 80021a4:	b490      	push	{r4, r7}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4604      	mov	r4, r0
 80021ac:	4608      	mov	r0, r1
 80021ae:	4611      	mov	r1, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	4623      	mov	r3, r4
 80021b4:	80fb      	strh	r3, [r7, #6]
 80021b6:	4603      	mov	r3, r0
 80021b8:	80bb      	strh	r3, [r7, #4]
 80021ba:	460b      	mov	r3, r1
 80021bc:	807b      	strh	r3, [r7, #2]
 80021be:	4613      	mov	r3, r2
 80021c0:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 80021c2:	88fb      	ldrh	r3, [r7, #6]
 80021c4:	2bef      	cmp	r3, #239	; 0xef
 80021c6:	d803      	bhi.n	80021d0 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 80021c8:	4a1b      	ldr	r2, [pc, #108]	; (8002238 <ST7789H2_SetDisplayWindow+0x94>)
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	8013      	strh	r3, [r2, #0]
 80021ce:	e002      	b.n	80021d6 <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <ST7789H2_SetDisplayWindow+0x94>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 80021d6:	88bb      	ldrh	r3, [r7, #4]
 80021d8:	2bef      	cmp	r3, #239	; 0xef
 80021da:	d803      	bhi.n	80021e4 <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 80021dc:	4a17      	ldr	r2, [pc, #92]	; (800223c <ST7789H2_SetDisplayWindow+0x98>)
 80021de:	88bb      	ldrh	r3, [r7, #4]
 80021e0:	8013      	strh	r3, [r2, #0]
 80021e2:	e002      	b.n	80021ea <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 80021e4:	4b15      	ldr	r3, [pc, #84]	; (800223c <ST7789H2_SetDisplayWindow+0x98>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 80021ea:	887a      	ldrh	r2, [r7, #2]
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	4413      	add	r3, r2
 80021f0:	2bf0      	cmp	r3, #240	; 0xf0
 80021f2:	dc08      	bgt.n	8002206 <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 80021f4:	887a      	ldrh	r2, [r7, #2]
 80021f6:	88fb      	ldrh	r3, [r7, #6]
 80021f8:	4413      	add	r3, r2
 80021fa:	b29b      	uxth	r3, r3
 80021fc:	3b01      	subs	r3, #1
 80021fe:	b29a      	uxth	r2, r3
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <ST7789H2_SetDisplayWindow+0x9c>)
 8002202:	801a      	strh	r2, [r3, #0]
 8002204:	e002      	b.n	800220c <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <ST7789H2_SetDisplayWindow+0x9c>)
 8002208:	22ef      	movs	r2, #239	; 0xef
 800220a:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 800220c:	883a      	ldrh	r2, [r7, #0]
 800220e:	88bb      	ldrh	r3, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	2bf0      	cmp	r3, #240	; 0xf0
 8002214:	dc08      	bgt.n	8002228 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 8002216:	883a      	ldrh	r2, [r7, #0]
 8002218:	88bb      	ldrh	r3, [r7, #4]
 800221a:	4413      	add	r3, r2
 800221c:	b29b      	uxth	r3, r3
 800221e:	3b01      	subs	r3, #1
 8002220:	b29a      	uxth	r2, r3
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <ST7789H2_SetDisplayWindow+0xa0>)
 8002224:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 8002226:	e002      	b.n	800222e <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <ST7789H2_SetDisplayWindow+0xa0>)
 800222a:	22ef      	movs	r2, #239	; 0xef
 800222c:	801a      	strh	r2, [r3, #0]
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bc90      	pop	{r4, r7}
 8002236:	4770      	bx	lr
 8002238:	200004f8 	.word	0x200004f8
 800223c:	200004fa 	.word	0x200004fa
 8002240:	20000040 	.word	0x20000040
 8002244:	20000042 	.word	0x20000042

08002248 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002248:	b590      	push	{r4, r7, lr}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	4604      	mov	r4, r0
 8002250:	4608      	mov	r0, r1
 8002252:	4611      	mov	r1, r2
 8002254:	461a      	mov	r2, r3
 8002256:	4623      	mov	r3, r4
 8002258:	80fb      	strh	r3, [r7, #6]
 800225a:	4603      	mov	r3, r0
 800225c:	80bb      	strh	r3, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	807b      	strh	r3, [r7, #2]
 8002262:	4613      	mov	r3, r2
 8002264:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 8002266:	2300      	movs	r3, #0
 8002268:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 800226a:	887a      	ldrh	r2, [r7, #2]
 800226c:	88bb      	ldrh	r3, [r7, #4]
 800226e:	4611      	mov	r1, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fed9 	bl	8002028 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002276:	2200      	movs	r2, #0
 8002278:	2100      	movs	r1, #0
 800227a:	202c      	movs	r0, #44	; 0x2c
 800227c:	f7ff ff5b 	bl	8002136 <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002280:	2300      	movs	r3, #0
 8002282:	81fb      	strh	r3, [r7, #14]
 8002284:	e006      	b.n	8002294 <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 8002286:	88fb      	ldrh	r3, [r7, #6]
 8002288:	4618      	mov	r0, r3
 800228a:	f000 fae9 	bl	8002860 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 800228e:	89fb      	ldrh	r3, [r7, #14]
 8002290:	3301      	adds	r3, #1
 8002292:	81fb      	strh	r3, [r7, #14]
 8002294:	89fa      	ldrh	r2, [r7, #14]
 8002296:	883b      	ldrh	r3, [r7, #0]
 8002298:	429a      	cmp	r2, r3
 800229a:	d3f4      	bcc.n	8002286 <ST7789H2_DrawHLine+0x3e>
  }  
}
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	3714      	adds	r7, #20
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd90      	pop	{r4, r7, pc}

080022a6 <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80022a6:	b590      	push	{r4, r7, lr}
 80022a8:	b085      	sub	sp, #20
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4604      	mov	r4, r0
 80022ae:	4608      	mov	r0, r1
 80022b0:	4611      	mov	r1, r2
 80022b2:	461a      	mov	r2, r3
 80022b4:	4623      	mov	r3, r4
 80022b6:	80fb      	strh	r3, [r7, #6]
 80022b8:	4603      	mov	r3, r0
 80022ba:	80bb      	strh	r3, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	88bb      	ldrh	r3, [r7, #4]
 80022cc:	4611      	mov	r1, r2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff feaa 	bl	8002028 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80022d4:	2200      	movs	r2, #0
 80022d6:	2100      	movs	r1, #0
 80022d8:	202c      	movs	r0, #44	; 0x2c
 80022da:	f7ff ff2c 	bl	8002136 <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 80022de:	2300      	movs	r3, #0
 80022e0:	81fb      	strh	r3, [r7, #14]
 80022e2:	e00b      	b.n	80022fc <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	89fb      	ldrh	r3, [r7, #14]
 80022e8:	4413      	add	r3, r2
 80022ea:	b299      	uxth	r1, r3
 80022ec:	88fa      	ldrh	r2, [r7, #6]
 80022ee:	88bb      	ldrh	r3, [r7, #4]
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff fecb 	bl	800208c <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 80022f6:	89fb      	ldrh	r3, [r7, #14]
 80022f8:	3301      	adds	r3, #1
 80022fa:	81fb      	strh	r3, [r7, #14]
 80022fc:	89fa      	ldrh	r2, [r7, #14]
 80022fe:	883b      	ldrh	r3, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d3ef      	bcc.n	80022e4 <ST7789H2_DrawVLine+0x3e>
  }
}
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bd90      	pop	{r4, r7, pc}
	...

08002310 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b088      	sub	sp, #32
 8002314:	af00      	add	r7, sp, #0
 8002316:	4603      	mov	r3, r0
 8002318:	603a      	str	r2, [r7, #0]
 800231a:	80fb      	strh	r3, [r7, #6]
 800231c:	460b      	mov	r3, r1
 800231e:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 8002320:	2300      	movs	r3, #0
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	2300      	movs	r3, #0
 8002326:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 8002328:	2300      	movs	r3, #0
 800232a:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <ST7789H2_DrawBitmap+0xe0>)
 800232e:	881a      	ldrh	r2, [r3, #0]
 8002330:	4b30      	ldr	r3, [pc, #192]	; (80023f4 <ST7789H2_DrawBitmap+0xe4>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	b29b      	uxth	r3, r3
 8002338:	3301      	adds	r3, #1
 800233a:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 800233c:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <ST7789H2_DrawBitmap+0xe8>)
 800233e:	881a      	ldrh	r2, [r3, #0]
 8002340:	4b2e      	ldr	r3, [pc, #184]	; (80023fc <ST7789H2_DrawBitmap+0xec>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	b29b      	uxth	r3, r3
 8002348:	3301      	adds	r3, #1
 800234a:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	3302      	adds	r3, #2
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	3304      	adds	r3, #4
 800235a:	881b      	ldrh	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	041b      	lsls	r3, r3, #16
 8002360:	461a      	mov	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	330a      	adds	r3, #10
 800236c:	881b      	ldrh	r3, [r3, #0]
 800236e:	b29b      	uxth	r3, r3
 8002370:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	330c      	adds	r3, #12
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	b29b      	uxth	r3, r3
 800237a:	041b      	lsls	r3, r3, #16
 800237c:	461a      	mov	r2, r3
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	4313      	orrs	r3, r2
 8002382:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	613b      	str	r3, [r7, #16]
  pbmp += index;
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	4413      	add	r3, r2
 8002394:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 8002396:	88ba      	ldrh	r2, [r7, #4]
 8002398:	89bb      	ldrh	r3, [r7, #12]
 800239a:	4413      	add	r3, r2
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	e01d      	b.n	80023dc <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	b29b      	uxth	r3, r3
 80023a4:	3b01      	subs	r3, #1
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	88fb      	ldrh	r3, [r7, #6]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff fe3b 	bl	8002028 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b299      	uxth	r1, r3
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	4413      	add	r3, r2
 80023c8:	89fa      	ldrh	r2, [r7, #14]
 80023ca:	88f8      	ldrh	r0, [r7, #6]
 80023cc:	f000 f89c 	bl	8002508 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80023d0:	69bb      	ldr	r3, [r7, #24]
 80023d2:	3301      	adds	r3, #1
 80023d4:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	3b01      	subs	r3, #1
 80023da:	61fb      	str	r3, [r7, #28]
 80023dc:	88bb      	ldrh	r3, [r7, #4]
 80023de:	69fa      	ldr	r2, [r7, #28]
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d8dd      	bhi.n	80023a0 <ST7789H2_DrawBitmap+0x90>
  }
}
 80023e4:	bf00      	nop
 80023e6:	bf00      	nop
 80023e8:	3720      	adds	r7, #32
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	20000040 	.word	0x20000040
 80023f4:	200004f8 	.word	0x200004f8
 80023f8:	20000042 	.word	0x20000042
 80023fc:	200004fa 	.word	0x200004fa

08002400 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002400:	b590      	push	{r4, r7, lr}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	4604      	mov	r4, r0
 8002408:	4608      	mov	r0, r1
 800240a:	4611      	mov	r1, r2
 800240c:	461a      	mov	r2, r3
 800240e:	4623      	mov	r3, r4
 8002410:	80fb      	strh	r3, [r7, #6]
 8002412:	4603      	mov	r3, r0
 8002414:	80bb      	strh	r3, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]
 800241a:	4613      	mov	r3, r2
 800241c:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002422:	88bb      	ldrh	r3, [r7, #4]
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e019      	b.n	800245c <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	b29a      	uxth	r2, r3
 800242c:	88fb      	ldrh	r3, [r7, #6]
 800242e:	4611      	mov	r1, r2
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fdf9 	bl	8002028 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	b299      	uxth	r1, r3
 800243a:	887b      	ldrh	r3, [r7, #2]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	fb02 f303 	mul.w	r3, r2, r3
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	6a3a      	ldr	r2, [r7, #32]
 8002446:	4413      	add	r3, r2
 8002448:	887a      	ldrh	r2, [r7, #2]
 800244a:	88f8      	ldrh	r0, [r7, #6]
 800244c:	f000 f85c 	bl	8002508 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	3301      	adds	r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3301      	adds	r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	88ba      	ldrh	r2, [r7, #4]
 800245e:	883b      	ldrh	r3, [r7, #0]
 8002460:	4413      	add	r3, r2
 8002462:	461a      	mov	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4293      	cmp	r3, r2
 8002468:	d3de      	bcc.n	8002428 <ST7789H2_DrawRGBImage+0x28>
  }
}
 800246a:	bf00      	nop
 800246c:	bf00      	nop
 800246e:	3714      	adds	r7, #20
 8002470:	46bd      	mov	sp, r7
 8002472:	bd90      	pop	{r4, r7, pc}

08002474 <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	4603      	mov	r3, r0
 800247c:	460a      	mov	r2, r1
 800247e:	80fb      	strh	r3, [r7, #6]
 8002480:	4613      	mov	r3, r2
 8002482:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002484:	88ba      	ldrh	r2, [r7, #4]
 8002486:	88fb      	ldrh	r3, [r7, #6]
 8002488:	4611      	mov	r1, r2
 800248a:	4618      	mov	r0, r3
 800248c:	f7ff fdcc 	bl	8002028 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002490:	2200      	movs	r2, #0
 8002492:	2100      	movs	r1, #0
 8002494:	202e      	movs	r0, #46	; 0x2e
 8002496:	f7ff fe4e 	bl	8002136 <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 800249a:	f000 f9fb 	bl	8002894 <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 800249e:	f000 f9f9 	bl	8002894 <LCD_IO_ReadData>
 80024a2:	4603      	mov	r3, r0
 80024a4:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 80024a6:	f000 f9f5 	bl	8002894 <LCD_IO_ReadData>
 80024aa:	4603      	mov	r3, r0
 80024ac:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 80024ae:	8afb      	ldrh	r3, [r7, #22]
 80024b0:	121b      	asrs	r3, r3, #8
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	f023 0303 	bic.w	r3, r3, #3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 80024bc:	8afb      	ldrh	r3, [r7, #22]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f023 0303 	bic.w	r3, r3, #3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 80024c8:	8abb      	ldrh	r3, [r7, #20]
 80024ca:	121b      	asrs	r3, r3, #8
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	f023 0303 	bic.w	r3, r3, #3
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 80024d6:	f107 0310 	add.w	r3, r7, #16
 80024da:	f107 020c 	add.w	r2, r7, #12
 80024de:	6812      	ldr	r2, [r2, #0]
 80024e0:	4611      	mov	r1, r2
 80024e2:	8019      	strh	r1, [r3, #0]
 80024e4:	3302      	adds	r3, #2
 80024e6:	0c12      	lsrs	r2, r2, #16
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	2300      	movs	r3, #0
 80024ec:	7c3a      	ldrb	r2, [r7, #16]
 80024ee:	f362 0307 	bfi	r3, r2, #0, #8
 80024f2:	7c7a      	ldrb	r2, [r7, #17]
 80024f4:	f362 230f 	bfi	r3, r2, #8, #8
 80024f8:	7cba      	ldrb	r2, [r7, #18]
 80024fa:	f362 4317 	bfi	r3, r2, #16, #8
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3718      	adds	r7, #24
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
	...

08002508 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b088      	sub	sp, #32
 800250c:	af00      	add	r7, sp, #0
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	4603      	mov	r3, r0
 8002512:	81fb      	strh	r3, [r7, #14]
 8002514:	460b      	mov	r3, r1
 8002516:	81bb      	strh	r3, [r7, #12]
 8002518:	4613      	mov	r3, r2
 800251a:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 800251c:	2300      	movs	r3, #0
 800251e:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002524:	2200      	movs	r2, #0
 8002526:	2100      	movs	r1, #0
 8002528:	202c      	movs	r0, #44	; 0x2c
 800252a:	f7ff fe04 	bl	8002136 <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800252e:	89fb      	ldrh	r3, [r7, #14]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e029      	b.n	8002588 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <ST7789H2_DrawRGBHLine+0x98>)
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	461a      	mov	r2, r3
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	4293      	cmp	r3, r2
 800253e:	d320      	bcc.n	8002582 <ST7789H2_DrawRGBHLine+0x7a>
 8002540:	4b18      	ldr	r3, [pc, #96]	; (80025a4 <ST7789H2_DrawRGBHLine+0x9c>)
 8002542:	881b      	ldrh	r3, [r3, #0]
 8002544:	89ba      	ldrh	r2, [r7, #12]
 8002546:	429a      	cmp	r2, r3
 8002548:	d31b      	bcc.n	8002582 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 800254a:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <ST7789H2_DrawRGBHLine+0xa0>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	4293      	cmp	r3, r2
 8002554:	d815      	bhi.n	8002582 <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 8002556:	4b15      	ldr	r3, [pc, #84]	; (80025ac <ST7789H2_DrawRGBHLine+0xa4>)
 8002558:	881b      	ldrh	r3, [r3, #0]
 800255a:	89ba      	ldrh	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d810      	bhi.n	8002582 <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 8002560:	897a      	ldrh	r2, [r7, #10]
 8002562:	89fb      	ldrh	r3, [r7, #14]
 8002564:	441a      	add	r2, r3
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	429a      	cmp	r2, r3
 800256a:	d007      	beq.n	800257c <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	005b      	lsls	r3, r3, #1
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4413      	add	r3, r2
 8002574:	881b      	ldrh	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f000 f972 	bl	8002860 <LCD_IO_WriteData>
      }      
      i++;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	3301      	adds	r3, #1
 8002580:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 8002582:	69bb      	ldr	r3, [r7, #24]
 8002584:	3301      	adds	r3, #1
 8002586:	61bb      	str	r3, [r7, #24]
 8002588:	897a      	ldrh	r2, [r7, #10]
 800258a:	89fb      	ldrh	r3, [r7, #14]
 800258c:	4413      	add	r3, r2
 800258e:	461a      	mov	r2, r3
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	4293      	cmp	r3, r2
 8002594:	d3ce      	bcc.n	8002534 <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	200004f8 	.word	0x200004f8
 80025a4:	200004fa 	.word	0x200004fa
 80025a8:	20000040 	.word	0x20000040
 80025ac:	20000042 	.word	0x20000042

080025b0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b088      	sub	sp, #32
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	71fb      	strb	r3, [r7, #7]
 80025bc:	4613      	mov	r3, r2
 80025be:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	4b22      	ldr	r3, [pc, #136]	; (8002650 <BSP_PB_Init+0xa0>)
 80025c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c8:	4a21      	ldr	r2, [pc, #132]	; (8002650 <BSP_PB_Init+0xa0>)
 80025ca:	f043 0301 	orr.w	r3, r3, #1
 80025ce:	6313      	str	r3, [r2, #48]	; 0x30
 80025d0:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <BSP_PB_Init+0xa0>)
 80025d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
 80025da:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d111      	bne.n	8002606 <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80025e2:	2301      	movs	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80025ea:	2302      	movs	r3, #2
 80025ec:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025ee:	2302      	movs	r3, #2
 80025f0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	4a17      	ldr	r2, [pc, #92]	; (8002654 <BSP_PB_Init+0xa4>)
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	f107 020c 	add.w	r2, r7, #12
 80025fe:	4611      	mov	r1, r2
 8002600:	4618      	mov	r0, r3
 8002602:	f001 fb43 	bl	8003c8c <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8002606:	79bb      	ldrb	r3, [r7, #6]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d11d      	bne.n	8002648 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800260c:	2301      	movs	r3, #1
 800260e:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002610:	2302      	movs	r3, #2
 8002612:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002614:	2303      	movs	r3, #3
 8002616:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002618:	4b0f      	ldr	r3, [pc, #60]	; (8002658 <BSP_PB_Init+0xa8>)
 800261a:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	4a0d      	ldr	r2, [pc, #52]	; (8002654 <BSP_PB_Init+0xa4>)
 8002620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002624:	f107 020c 	add.w	r2, r7, #12
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f001 fb2e 	bl	8003c8c <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8002630:	2306      	movs	r3, #6
 8002632:	b25b      	sxtb	r3, r3
 8002634:	2200      	movs	r2, #0
 8002636:	210f      	movs	r1, #15
 8002638:	4618      	mov	r0, r3
 800263a:	f001 f854 	bl	80036e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800263e:	2306      	movs	r3, #6
 8002640:	b25b      	sxtb	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f001 f86b 	bl	800371e <HAL_NVIC_EnableIRQ>
  }
}
 8002648:	bf00      	nop
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	20000044 	.word	0x20000044
 8002658:	10110000 	.word	0x10110000

0800265c <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08a      	sub	sp, #40	; 0x28
 8002660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 8002668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800266a:	4a39      	ldr	r2, [pc, #228]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	6393      	str	r3, [r2, #56]	; 0x38
 8002672:	4b37      	ldr	r3, [pc, #220]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 8002674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	613b      	str	r3, [r7, #16]
 800267c:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	4b33      	ldr	r3, [pc, #204]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002686:	4a32      	ldr	r2, [pc, #200]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 8002688:	f043 0308 	orr.w	r3, r3, #8
 800268c:	6313      	str	r3, [r2, #48]	; 0x30
 800268e:	4b30      	ldr	r3, [pc, #192]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 8002690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	60fb      	str	r3, [r7, #12]
 8002698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800269a:	2300      	movs	r3, #0
 800269c:	60bb      	str	r3, [r7, #8]
 800269e:	4b2c      	ldr	r3, [pc, #176]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	4a2b      	ldr	r2, [pc, #172]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 80026a4:	f043 0310 	orr.w	r3, r3, #16
 80026a8:	6313      	str	r3, [r2, #48]	; 0x30
 80026aa:	4b29      	ldr	r3, [pc, #164]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
 80026ba:	4b25      	ldr	r3, [pc, #148]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	4a24      	ldr	r2, [pc, #144]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 80026c0:	f043 0320 	orr.w	r3, r3, #32
 80026c4:	6313      	str	r3, [r2, #48]	; 0x30
 80026c6:	4b22      	ldr	r3, [pc, #136]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	f003 0320 	and.w	r3, r3, #32
 80026ce:	607b      	str	r3, [r7, #4]
 80026d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	603b      	str	r3, [r7, #0]
 80026d6:	4b1e      	ldr	r3, [pc, #120]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026da:	4a1d      	ldr	r2, [pc, #116]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 80026dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e0:	6313      	str	r3, [r2, #48]	; 0x30
 80026e2:	4b1b      	ldr	r3, [pc, #108]	; (8002750 <FMC_BANK3_MspInit+0xf4>)
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ea:	603b      	str	r3, [r7, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80026f2:	2301      	movs	r3, #1
 80026f4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f6:	2303      	movs	r3, #3
 80026f8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 80026fa:	230c      	movs	r3, #12
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 80026fe:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8002702:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	4619      	mov	r1, r3
 800270a:	4812      	ldr	r0, [pc, #72]	; (8002754 <FMC_BANK3_MspInit+0xf8>)
 800270c:	f001 fabe 	bl	8003c8c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 8002710:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002714:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8002716:	f107 0314 	add.w	r3, r7, #20
 800271a:	4619      	mov	r1, r3
 800271c:	480e      	ldr	r0, [pc, #56]	; (8002758 <FMC_BANK3_MspInit+0xfc>)
 800271e:	f001 fab5 	bl	8003c8c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002722:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002726:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8002728:	f107 0314 	add.w	r3, r7, #20
 800272c:	4619      	mov	r1, r3
 800272e:	480b      	ldr	r0, [pc, #44]	; (800275c <FMC_BANK3_MspInit+0x100>)
 8002730:	f001 faac 	bl	8003c8c <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8002734:	f240 433f 	movw	r3, #1087	; 0x43f
 8002738:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800273a:	f107 0314 	add.w	r3, r7, #20
 800273e:	4619      	mov	r1, r3
 8002740:	4807      	ldr	r0, [pc, #28]	; (8002760 <FMC_BANK3_MspInit+0x104>)
 8002742:	f001 faa3 	bl	8003c8c <HAL_GPIO_Init>
}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40023800 	.word	0x40023800
 8002754:	40020c00 	.word	0x40020c00
 8002758:	40021000 	.word	0x40021000
 800275c:	40021400 	.word	0x40021400
 8002760:	40021800 	.word	0x40021800

08002764 <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 8002764:	b580      	push	{r7, lr}
 8002766:	b09c      	sub	sp, #112	; 0x70
 8002768:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 800276a:	f7ff ff77 	bl	800265c <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 800276e:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8002772:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002774:	4b1e      	ldr	r3, [pc, #120]	; (80027f0 <FMC_BANK3_Init+0x8c>)
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002778:	2303      	movs	r3, #3
 800277a:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 800277c:	2301      	movs	r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002780:	2304      	movs	r3, #4
 8002782:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 8002784:	2301      	movs	r3, #1
 8002786:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002788:	2302      	movs	r3, #2
 800278a:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 800278c:	2302      	movs	r3, #2
 800278e:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002790:	2300      	movs	r3, #0
 8002792:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 8002794:	2304      	movs	r3, #4
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 800279c:	2300      	movs	r3, #0
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80027a0:	2310      	movs	r3, #16
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 80027a4:	2300      	movs	r3, #0
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80027a8:	2300      	movs	r3, #0
 80027aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 80027ac:	2300      	movs	r3, #0
 80027ae:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 80027b0:	2300      	movs	r3, #0
 80027b2:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 80027b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027b8:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 80027be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80027c2:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 80027cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80027d0:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80027d6:	2300      	movs	r3, #0
 80027d8:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 80027da:	1d3a      	adds	r2, r7, #4
 80027dc:	1d39      	adds	r1, r7, #4
 80027de:	f107 0320 	add.w	r3, r7, #32
 80027e2:	4618      	mov	r0, r3
 80027e4:	f005 fd4c 	bl	8008280 <HAL_SRAM_Init>
}
 80027e8:	bf00      	nop
 80027ea:	3770      	adds	r7, #112	; 0x70
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}
 80027f0:	a0000104 	.word	0xa0000104

080027f4 <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	4603      	mov	r3, r0
 80027fc:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 80027fe:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002806:	f3bf 8f4f 	dsb	sy
}
 800280a:	bf00      	nop
  __DSB();
}
 800280c:	bf00      	nop
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 8002822:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002826:	79fa      	ldrb	r2, [r7, #7]
 8002828:	b292      	uxth	r2, r2
 800282a:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800282c:	f3bf 8f4f 	dsb	sy
}
 8002830:	bf00      	nop
  __DSB();
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 800283e:	b480      	push	{r7}
 8002840:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 8002842:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 8002846:	885b      	ldrh	r3, [r3, #2]
 8002848:	b29b      	uxth	r3, r3
}
 800284a:	4618      	mov	r0, r3
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 8002858:	f7ff ff84 	bl	8002764 <FMC_BANK3_Init>
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}

08002860 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	4603      	mov	r3, r0
 8002868:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 800286a:	88fb      	ldrh	r3, [r7, #6]
 800286c:	4618      	mov	r0, r3
 800286e:	f7ff ffc1 	bl	80027f4 <FMC_BANK3_WriteData>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 800287a:	b580      	push	{r7, lr}
 800287c:	b082      	sub	sp, #8
 800287e:	af00      	add	r7, sp, #0
 8002880:	4603      	mov	r3, r0
 8002882:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002884:	79fb      	ldrb	r3, [r7, #7]
 8002886:	4618      	mov	r0, r3
 8002888:	f7ff ffc6 	bl	8002818 <FMC_BANK3_WriteReg>
}
 800288c:	bf00      	nop
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002898:	f7ff ffd1 	bl	800283e <FMC_BANK3_ReadData>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b082      	sub	sp, #8
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 fbaa 	bl	8003004 <HAL_Delay>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80028c0:	f000 f80e 	bl	80028e0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80028c4:	bf00      	nop
 80028c6:	3708      	adds	r7, #8
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 80028d4:	f000 f80b 	bl	80028ee <BSP_AUDIO_OUT_Error_CallBack>
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
}
 80028f2:	bf00      	nop
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002904:	f000 f804 	bl	8002910 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 800291e:	b580      	push	{r7, lr}
 8002920:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002922:	2001      	movs	r0, #1
 8002924:	f000 f804 	bl	8002930 <BSP_LCD_InitEx>
 8002928:	4603      	mov	r3, r0
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
	...

08002930 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 800293c:	4b2c      	ldr	r3, [pc, #176]	; (80029f0 <BSP_LCD_InitEx+0xc0>)
 800293e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002942:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002944:	4b2a      	ldr	r3, [pc, #168]	; (80029f0 <BSP_LCD_InitEx+0xc0>)
 8002946:	4a2b      	ldr	r2, [pc, #172]	; (80029f4 <BSP_LCD_InitEx+0xc4>)
 8002948:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 800294a:	4b29      	ldr	r3, [pc, #164]	; (80029f0 <BSP_LCD_InitEx+0xc0>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002950:	f000 f9f0 	bl	8002d34 <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002954:	2201      	movs	r2, #1
 8002956:	2120      	movs	r1, #32
 8002958:	4827      	ldr	r0, [pc, #156]	; (80029f8 <BSP_LCD_InitEx+0xc8>)
 800295a:	f001 fb43 	bl	8003fe4 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 800295e:	2200      	movs	r2, #0
 8002960:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002964:	4825      	ldr	r0, [pc, #148]	; (80029fc <BSP_LCD_InitEx+0xcc>)
 8002966:	f001 fb3d 	bl	8003fe4 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 800296a:	2005      	movs	r0, #5
 800296c:	f000 fb4a 	bl	8003004 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002970:	2201      	movs	r2, #1
 8002972:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002976:	4821      	ldr	r0, [pc, #132]	; (80029fc <BSP_LCD_InitEx+0xcc>)
 8002978:	f001 fb34 	bl	8003fe4 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 800297c:	200a      	movs	r0, #10
 800297e:	f000 fb41 	bl	8003004 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002982:	2200      	movs	r2, #0
 8002984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002988:	481c      	ldr	r0, [pc, #112]	; (80029fc <BSP_LCD_InitEx+0xcc>)
 800298a:	f001 fb2b 	bl	8003fe4 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 800298e:	2014      	movs	r0, #20
 8002990:	f000 fb38 	bl	8003004 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002994:	2201      	movs	r2, #1
 8002996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800299a:	4818      	ldr	r0, [pc, #96]	; (80029fc <BSP_LCD_InitEx+0xcc>)
 800299c:	f001 fb22 	bl	8003fe4 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 80029a0:	200a      	movs	r0, #10
 80029a2:	f000 fb2f 	bl	8003004 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <BSP_LCD_InitEx+0xd0>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4798      	blx	r3
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b85      	cmp	r3, #133	; 0x85
 80029b0:	d118      	bne.n	80029e4 <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 80029b2:	4b14      	ldr	r3, [pc, #80]	; (8002a04 <BSP_LCD_InitEx+0xd4>)
 80029b4:	4a12      	ldr	r2, [pc, #72]	; (8002a00 <BSP_LCD_InitEx+0xd0>)
 80029b6:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 80029b8:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <BSP_LCD_InitEx+0xd4>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d103      	bne.n	80029ce <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 80029c6:	2000      	movs	r0, #0
 80029c8:	f7ff fab3 	bl	8001f32 <ST7789H2_SetOrientation>
 80029cc:	e005      	b.n	80029da <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d102      	bne.n	80029da <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 80029d4:	2002      	movs	r0, #2
 80029d6:	f7ff faac 	bl	8001f32 <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80029da:	480b      	ldr	r0, [pc, #44]	; (8002a08 <BSP_LCD_InitEx+0xd8>)
 80029dc:	f000 f84e 	bl	8002a7c <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 80029e0:	2300      	movs	r3, #0
 80029e2:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80029e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200004fc 	.word	0x200004fc
 80029f4:	20000048 	.word	0x20000048
 80029f8:	40021000 	.word	0x40021000
 80029fc:	40020400 	.word	0x40020400
 8002a00:	20000008 	.word	0x20000008
 8002a04:	20000508 	.word	0x20000508
 8002a08:	20000058 	.word	0x20000058

08002a0c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002a10:	4b03      	ldr	r3, [pc, #12]	; (8002a20 <BSP_LCD_GetXSize+0x14>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	4798      	blx	r3
 8002a18:	4603      	mov	r3, r0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000508 	.word	0x20000508

08002a24 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <BSP_LCD_GetYSize+0x14>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2e:	4798      	blx	r3
 8002a30:	4603      	mov	r3, r0
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000508 	.word	0x20000508

08002a3c <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002a46:	88fb      	ldrh	r3, [r7, #6]
 8002a48:	4a03      	ldr	r2, [pc, #12]	; (8002a58 <BSP_LCD_SetTextColor+0x1c>)
 8002a4a:	6013      	str	r3, [r2, #0]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	200004fc 	.word	0x200004fc

08002a5c <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	4a03      	ldr	r2, [pc, #12]	; (8002a78 <BSP_LCD_SetBackColor+0x1c>)
 8002a6a:	6053      	str	r3, [r2, #4]
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	200004fc 	.word	0x200004fc

08002a7c <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002a84:	4a04      	ldr	r2, [pc, #16]	; (8002a98 <BSP_LCD_SetFont+0x1c>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6093      	str	r3, [r2, #8]
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	200004fc 	.word	0x200004fc

08002a9c <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8002aae:	4b15      	ldr	r3, [pc, #84]	; (8002b04 <BSP_LCD_Clear+0x68>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8002ab4:	88fb      	ldrh	r3, [r7, #6]
 8002ab6:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <BSP_LCD_Clear+0x68>)
 8002ab8:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8002aba:	f7ff ffb3 	bl	8002a24 <BSP_LCD_GetYSize>
 8002abe:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	e00d      	b.n	8002ae2 <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	b29c      	uxth	r4, r3
 8002aca:	f7ff ff9f 	bl	8002a0c <BSP_LCD_GetXSize>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4621      	mov	r1, r4
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f000 f8f2 	bl	8002cc0 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d3ed      	bcc.n	8002ac6 <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8002aea:	4a06      	ldr	r2, [pc, #24]	; (8002b04 <BSP_LCD_Clear+0x68>)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002af0:	4b04      	ldr	r3, [pc, #16]	; (8002b04 <BSP_LCD_Clear+0x68>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff ffa0 	bl	8002a3c <BSP_LCD_SetTextColor>
}
 8002afc:	bf00      	nop
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd90      	pop	{r4, r7, pc}
 8002b04:	200004fc 	.word	0x200004fc

08002b08 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	4603      	mov	r3, r0
 8002b10:	80fb      	strh	r3, [r7, #6]
 8002b12:	460b      	mov	r3, r1
 8002b14:	80bb      	strh	r3, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002b1a:	4b0f      	ldr	r3, [pc, #60]	; (8002b58 <BSP_LCD_DisplayChar+0x50>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002b24:	490c      	ldr	r1, [pc, #48]	; (8002b58 <BSP_LCD_DisplayChar+0x50>)
 8002b26:	6889      	ldr	r1, [r1, #8]
 8002b28:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002b2a:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002b2e:	4b0a      	ldr	r3, [pc, #40]	; (8002b58 <BSP_LCD_DisplayChar+0x50>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	889b      	ldrh	r3, [r3, #4]
 8002b34:	3307      	adds	r3, #7
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da00      	bge.n	8002b3c <BSP_LCD_DisplayChar+0x34>
 8002b3a:	3307      	adds	r3, #7
 8002b3c:	10db      	asrs	r3, r3, #3
 8002b3e:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002b42:	441a      	add	r2, r3
 8002b44:	88b9      	ldrh	r1, [r7, #4]
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f94f 	bl	8002dec <DrawChar>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	200004fc 	.word	0x200004fc

08002b5c <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002b5c:	b590      	push	{r4, r7, lr}
 8002b5e:	b089      	sub	sp, #36	; 0x24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60ba      	str	r2, [r7, #8]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4603      	mov	r3, r0
 8002b68:	81fb      	strh	r3, [r7, #14]
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	81bb      	strh	r3, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002b72:	2301      	movs	r3, #1
 8002b74:	83fb      	strh	r3, [r7, #30]
 8002b76:	2300      	movs	r3, #0
 8002b78:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61bb      	str	r3, [r7, #24]
 8002b7e:	2300      	movs	r3, #0
 8002b80:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002b86:	e002      	b.n	8002b8e <BSP_LCD_DisplayStringAt+0x32>
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	617a      	str	r2, [r7, #20]
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f6      	bne.n	8002b88 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002b9a:	f7ff ff37 	bl	8002a0c <BSP_LCD_GetXSize>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <BSP_LCD_DisplayStringAt+0x128>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	889b      	ldrh	r3, [r3, #4]
 8002ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002baa:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	d014      	beq.n	8002bdc <BSP_LCD_DisplayStringAt+0x80>
 8002bb2:	2b03      	cmp	r3, #3
 8002bb4:	dc23      	bgt.n	8002bfe <BSP_LCD_DisplayStringAt+0xa2>
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d002      	beq.n	8002bc0 <BSP_LCD_DisplayStringAt+0x64>
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d011      	beq.n	8002be2 <BSP_LCD_DisplayStringAt+0x86>
 8002bbe:	e01e      	b.n	8002bfe <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	4a2f      	ldr	r2, [pc, #188]	; (8002c84 <BSP_LCD_DisplayStringAt+0x128>)
 8002bc8:	6892      	ldr	r2, [r2, #8]
 8002bca:	8892      	ldrh	r2, [r2, #4]
 8002bcc:	fb02 f303 	mul.w	r3, r2, r3
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	89fb      	ldrh	r3, [r7, #14]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	83fb      	strh	r3, [r7, #30]
      break;
 8002bda:	e013      	b.n	8002c04 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002bdc:	89fb      	ldrh	r3, [r7, #14]
 8002bde:	83fb      	strh	r3, [r7, #30]
      break;
 8002be0:	e010      	b.n	8002c04 <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002be2:	693a      	ldr	r2, [r7, #16]
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	1ad3      	subs	r3, r2, r3
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	4b26      	ldr	r3, [pc, #152]	; (8002c84 <BSP_LCD_DisplayStringAt+0x128>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	889b      	ldrh	r3, [r3, #4]
 8002bf0:	fb12 f303 	smulbb	r3, r2, r3
 8002bf4:	b29a      	uxth	r2, r3
 8002bf6:	89fb      	ldrh	r3, [r7, #14]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	83fb      	strh	r3, [r7, #30]
      break;
 8002bfc:	e002      	b.n	8002c04 <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 8002bfe:	89fb      	ldrh	r3, [r7, #14]
 8002c00:	83fb      	strh	r3, [r7, #30]
      break;
 8002c02:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002c04:	8bfb      	ldrh	r3, [r7, #30]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <BSP_LCD_DisplayStringAt+0xb6>
 8002c0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da15      	bge.n	8002c3e <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8002c12:	2301      	movs	r3, #1
 8002c14:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002c16:	e012      	b.n	8002c3e <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	781a      	ldrb	r2, [r3, #0]
 8002c1c:	89b9      	ldrh	r1, [r7, #12]
 8002c1e:	8bfb      	ldrh	r3, [r7, #30]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7ff ff71 	bl	8002b08 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002c26:	4b17      	ldr	r3, [pc, #92]	; (8002c84 <BSP_LCD_DisplayStringAt+0x128>)
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	889a      	ldrh	r2, [r3, #4]
 8002c2c:	8bfb      	ldrh	r3, [r7, #30]
 8002c2e:	4413      	add	r3, r2
 8002c30:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	3301      	adds	r3, #1
 8002c36:	60bb      	str	r3, [r7, #8]
    i++;
 8002c38:	8bbb      	ldrh	r3, [r7, #28]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	bf14      	ite	ne
 8002c46:	2301      	movne	r3, #1
 8002c48:	2300      	moveq	r3, #0
 8002c4a:	b2dc      	uxtb	r4, r3
 8002c4c:	f7ff fede 	bl	8002a0c <BSP_LCD_GetXSize>
 8002c50:	4601      	mov	r1, r0
 8002c52:	8bbb      	ldrh	r3, [r7, #28]
 8002c54:	4a0b      	ldr	r2, [pc, #44]	; (8002c84 <BSP_LCD_DisplayStringAt+0x128>)
 8002c56:	6892      	ldr	r2, [r2, #8]
 8002c58:	8892      	ldrh	r2, [r2, #4]
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	1acb      	subs	r3, r1, r3
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	4a08      	ldr	r2, [pc, #32]	; (8002c84 <BSP_LCD_DisplayStringAt+0x128>)
 8002c64:	6892      	ldr	r2, [r2, #8]
 8002c66:	8892      	ldrh	r2, [r2, #4]
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	bf2c      	ite	cs
 8002c6c:	2301      	movcs	r3, #1
 8002c6e:	2300      	movcc	r3, #0
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	4023      	ands	r3, r4
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d1ce      	bne.n	8002c18 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	3724      	adds	r7, #36	; 0x24
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	200004fc 	.word	0x200004fc

08002c88 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	80fb      	strh	r3, [r7, #6]
 8002c92:	460b      	mov	r3, r1
 8002c94:	80bb      	strh	r3, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <BSP_LCD_DrawPixel+0x34>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d006      	beq.n	8002cb2 <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <BSP_LCD_DrawPixel+0x34>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	88b9      	ldrh	r1, [r7, #4]
 8002cae:	88f8      	ldrh	r0, [r7, #6]
 8002cb0:	4798      	blx	r3
  }
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000508 	.word	0x20000508

08002cc0 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002cc0:	b590      	push	{r4, r7, lr}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	80fb      	strh	r3, [r7, #6]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	80bb      	strh	r3, [r7, #4]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002cd6:	4b15      	ldr	r3, [pc, #84]	; (8002d2c <BSP_LCD_DrawHLine+0x6c>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002ce0:	4b12      	ldr	r3, [pc, #72]	; (8002d2c <BSP_LCD_DrawHLine+0x6c>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6a1c      	ldr	r4, [r3, #32]
 8002ce6:	4b12      	ldr	r3, [pc, #72]	; (8002d30 <BSP_LCD_DrawHLine+0x70>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	b298      	uxth	r0, r3
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	88ba      	ldrh	r2, [r7, #4]
 8002cf0:	88f9      	ldrh	r1, [r7, #6]
 8002cf2:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002cf4:	e015      	b.n	8002d22 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	e00e      	b.n	8002d1a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	b29a      	uxth	r2, r3
 8002d00:	88fb      	ldrh	r3, [r7, #6]
 8002d02:	4413      	add	r3, r2
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	4a0a      	ldr	r2, [pc, #40]	; (8002d30 <BSP_LCD_DrawHLine+0x70>)
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	b292      	uxth	r2, r2
 8002d0c:	88b9      	ldrh	r1, [r7, #4]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ffba 	bl	8002c88 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	3301      	adds	r3, #1
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	887b      	ldrh	r3, [r7, #2]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d3ec      	bcc.n	8002cfc <BSP_LCD_DrawHLine+0x3c>
}
 8002d22:	bf00      	nop
 8002d24:	3714      	adds	r7, #20
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd90      	pop	{r4, r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000508 	.word	0x20000508
 8002d30:	200004fc 	.word	0x200004fc

08002d34 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	4b28      	ldr	r3, [pc, #160]	; (8002de0 <BSP_LCD_MspInit+0xac>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <BSP_LCD_MspInit+0xac>)
 8002d44:	f043 0302 	orr.w	r3, r3, #2
 8002d48:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4a:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <BSP_LCD_MspInit+0xac>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	60bb      	str	r3, [r7, #8]
 8002d54:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8002d56:	2300      	movs	r3, #0
 8002d58:	607b      	str	r3, [r7, #4]
 8002d5a:	4b21      	ldr	r3, [pc, #132]	; (8002de0 <BSP_LCD_MspInit+0xac>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	4a20      	ldr	r2, [pc, #128]	; (8002de0 <BSP_LCD_MspInit+0xac>)
 8002d60:	f043 0302 	orr.w	r3, r3, #2
 8002d64:	6313      	str	r3, [r2, #48]	; 0x30
 8002d66:	4b1e      	ldr	r3, [pc, #120]	; (8002de0 <BSP_LCD_MspInit+0xac>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	607b      	str	r3, [r7, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	603b      	str	r3, [r7, #0]
 8002d76:	4b1a      	ldr	r3, [pc, #104]	; (8002de0 <BSP_LCD_MspInit+0xac>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	4a19      	ldr	r2, [pc, #100]	; (8002de0 <BSP_LCD_MspInit+0xac>)
 8002d7c:	f043 0310 	orr.w	r3, r3, #16
 8002d80:	6313      	str	r3, [r2, #48]	; 0x30
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <BSP_LCD_MspInit+0xac>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d86:	f003 0310 	and.w	r3, r3, #16
 8002d8a:	603b      	str	r3, [r7, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002d8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d92:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002da0:	f107 030c 	add.w	r3, r7, #12
 8002da4:	4619      	mov	r1, r3
 8002da6:	480f      	ldr	r0, [pc, #60]	; (8002de4 <BSP_LCD_MspInit+0xb0>)
 8002da8:	f000 ff70 	bl	8003c8c <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8002dac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002db0:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002db2:	2300      	movs	r3, #0
 8002db4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002db6:	f107 030c 	add.w	r3, r7, #12
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4809      	ldr	r0, [pc, #36]	; (8002de4 <BSP_LCD_MspInit+0xb0>)
 8002dbe:	f000 ff65 	bl	8003c8c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002dca:	f107 030c 	add.w	r3, r7, #12
 8002dce:	4619      	mov	r1, r3
 8002dd0:	4805      	ldr	r0, [pc, #20]	; (8002de8 <BSP_LCD_MspInit+0xb4>)
 8002dd2:	f000 ff5b 	bl	8003c8c <HAL_GPIO_Init>
}
 8002dd6:	bf00      	nop
 8002dd8:	3720      	adds	r7, #32
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023800 	.word	0x40023800
 8002de4:	40020400 	.word	0x40020400
 8002de8:	40021000 	.word	0x40021000

08002dec <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b088      	sub	sp, #32
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	4603      	mov	r3, r0
 8002df4:	603a      	str	r2, [r7, #0]
 8002df6:	80fb      	strh	r3, [r7, #6]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	61fb      	str	r3, [r7, #28]
 8002e00:	2300      	movs	r3, #0
 8002e02:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8002e04:	4b45      	ldr	r3, [pc, #276]	; (8002f1c <DrawChar+0x130>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	88db      	ldrh	r3, [r3, #6]
 8002e0a:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8002e0c:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <DrawChar+0x130>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	889b      	ldrh	r3, [r3, #4]
 8002e12:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002e14:	8a3b      	ldrh	r3, [r7, #16]
 8002e16:	3307      	adds	r3, #7
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	da00      	bge.n	8002e1e <DrawChar+0x32>
 8002e1c:	3307      	adds	r3, #7
 8002e1e:	10db      	asrs	r3, r3, #3
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	00db      	lsls	r3, r3, #3
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	8a3b      	ldrh	r3, [r7, #16]
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e069      	b.n	8002f08 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002e34:	8a3b      	ldrh	r3, [r7, #16]
 8002e36:	3307      	adds	r3, #7
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	da00      	bge.n	8002e3e <DrawChar+0x52>
 8002e3c:	3307      	adds	r3, #7
 8002e3e:	10db      	asrs	r3, r3, #3
 8002e40:	461a      	mov	r2, r3
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fb02 f303 	mul.w	r3, r2, r3
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002e4e:	8a3b      	ldrh	r3, [r7, #16]
 8002e50:	3307      	adds	r3, #7
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	da00      	bge.n	8002e58 <DrawChar+0x6c>
 8002e56:	3307      	adds	r3, #7
 8002e58:	10db      	asrs	r3, r3, #3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d002      	beq.n	8002e64 <DrawChar+0x78>
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d004      	beq.n	8002e6c <DrawChar+0x80>
 8002e62:	e00c      	b.n	8002e7e <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	617b      	str	r3, [r7, #20]
      break;    
 8002e6a:	e016      	b.n	8002e9a <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	3201      	adds	r2, #1
 8002e76:	7812      	ldrb	r2, [r2, #0]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	617b      	str	r3, [r7, #20]
      break;
 8002e7c:	e00d      	b.n	8002e9a <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	041a      	lsls	r2, r3, #16
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	3301      	adds	r3, #1
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	68ba      	ldr	r2, [r7, #8]
 8002e90:	3202      	adds	r2, #2
 8002e92:	7812      	ldrb	r2, [r2, #0]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
      break;
 8002e98:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	e029      	b.n	8002ef4 <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8002ea0:	8a3a      	ldrh	r2, [r7, #16]
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	1ad2      	subs	r2, r2, r3
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	2201      	movs	r2, #1
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00c      	beq.n	8002ed6 <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	88fb      	ldrh	r3, [r7, #6]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	b29b      	uxth	r3, r3
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <DrawChar+0x130>)
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	b292      	uxth	r2, r2
 8002ecc:	88b9      	ldrh	r1, [r7, #4]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7ff feda 	bl	8002c88 <BSP_LCD_DrawPixel>
 8002ed4:	e00b      	b.n	8002eee <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	b29a      	uxth	r2, r3
 8002eda:	88fb      	ldrh	r3, [r7, #6]
 8002edc:	4413      	add	r3, r2
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4a0e      	ldr	r2, [pc, #56]	; (8002f1c <DrawChar+0x130>)
 8002ee2:	6852      	ldr	r2, [r2, #4]
 8002ee4:	b292      	uxth	r2, r2
 8002ee6:	88b9      	ldrh	r1, [r7, #4]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7ff fecd 	bl	8002c88 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	61bb      	str	r3, [r7, #24]
 8002ef4:	8a3b      	ldrh	r3, [r7, #16]
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d3d1      	bcc.n	8002ea0 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8002efc:	88bb      	ldrh	r3, [r7, #4]
 8002efe:	3301      	adds	r3, #1
 8002f00:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	3301      	adds	r3, #1
 8002f06:	61fb      	str	r3, [r7, #28]
 8002f08:	8a7b      	ldrh	r3, [r7, #18]
 8002f0a:	69fa      	ldr	r2, [r7, #28]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d391      	bcc.n	8002e34 <DrawChar+0x48>
  }
}
 8002f10:	bf00      	nop
 8002f12:	bf00      	nop
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200004fc 	.word	0x200004fc

08002f20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f24:	4b0e      	ldr	r3, [pc, #56]	; (8002f60 <HAL_Init+0x40>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a0d      	ldr	r2, [pc, #52]	; (8002f60 <HAL_Init+0x40>)
 8002f2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_Init+0x40>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_Init+0x40>)
 8002f36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_Init+0x40>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a07      	ldr	r2, [pc, #28]	; (8002f60 <HAL_Init+0x40>)
 8002f42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f48:	2003      	movs	r0, #3
 8002f4a:	f000 fbc1 	bl	80036d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f4e:	2000      	movs	r0, #0
 8002f50:	f000 f808 	bl	8002f64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f54:	f7fe f8e6 	bl	8001124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40023c00 	.word	0x40023c00

08002f64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <HAL_InitTick+0x54>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	4b12      	ldr	r3, [pc, #72]	; (8002fbc <HAL_InitTick+0x58>)
 8002f72:	781b      	ldrb	r3, [r3, #0]
 8002f74:	4619      	mov	r1, r3
 8002f76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fbd9 	bl	800373a <HAL_SYSTICK_Config>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e00e      	b.n	8002fb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2b0f      	cmp	r3, #15
 8002f96:	d80a      	bhi.n	8002fae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f98:	2200      	movs	r2, #0
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa0:	f000 fba1 	bl	80036e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002fa4:	4a06      	ldr	r2, [pc, #24]	; (8002fc0 <HAL_InitTick+0x5c>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	e000      	b.n	8002fb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	20000004 	.word	0x20000004
 8002fbc:	20000064 	.word	0x20000064
 8002fc0:	20000060 	.word	0x20000060

08002fc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_IncTick+0x20>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	4b06      	ldr	r3, [pc, #24]	; (8002fe8 <HAL_IncTick+0x24>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	4a04      	ldr	r2, [pc, #16]	; (8002fe8 <HAL_IncTick+0x24>)
 8002fd6:	6013      	str	r3, [r2, #0]
}
 8002fd8:	bf00      	nop
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	20000064 	.word	0x20000064
 8002fe8:	2000050c 	.word	0x2000050c

08002fec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  return uwTick;
 8002ff0:	4b03      	ldr	r3, [pc, #12]	; (8003000 <HAL_GetTick+0x14>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	2000050c 	.word	0x2000050c

08003004 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b084      	sub	sp, #16
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800300c:	f7ff ffee 	bl	8002fec <HAL_GetTick>
 8003010:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d005      	beq.n	800302a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_Delay+0x44>)
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4413      	add	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800302a:	bf00      	nop
 800302c:	f7ff ffde 	bl	8002fec <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	429a      	cmp	r2, r3
 800303a:	d8f7      	bhi.n	800302c <HAL_Delay+0x28>
  {
  }
}
 800303c:	bf00      	nop
 800303e:	bf00      	nop
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	20000064 	.word	0x20000064

0800304c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003054:	2300      	movs	r3, #0
 8003056:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e033      	b.n	80030ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d109      	bne.n	800307e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fe f882 	bl	8001174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	2b00      	cmp	r3, #0
 8003088:	d118      	bne.n	80030bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003092:	f023 0302 	bic.w	r3, r3, #2
 8003096:	f043 0202 	orr.w	r2, r3, #2
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f94a 	bl	8003338 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f023 0303 	bic.w	r3, r3, #3
 80030b2:	f043 0201 	orr.w	r2, r3, #1
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	641a      	str	r2, [r3, #64]	; 0x40
 80030ba:	e001      	b.n	80030c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3710      	adds	r7, #16
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_ADC_ConfigChannel+0x1c>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e113      	b.n	8003318 <HAL_ADC_ConfigChannel+0x244>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	d925      	bls.n	800314c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68d9      	ldr	r1, [r3, #12]
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	b29b      	uxth	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	3b1e      	subs	r3, #30
 8003116:	2207      	movs	r2, #7
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43da      	mvns	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	400a      	ands	r2, r1
 8003124:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68d9      	ldr	r1, [r3, #12]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	b29b      	uxth	r3, r3
 8003136:	4618      	mov	r0, r3
 8003138:	4603      	mov	r3, r0
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4403      	add	r3, r0
 800313e:	3b1e      	subs	r3, #30
 8003140:	409a      	lsls	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	60da      	str	r2, [r3, #12]
 800314a:	e022      	b.n	8003192 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6919      	ldr	r1, [r3, #16]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	b29b      	uxth	r3, r3
 8003158:	461a      	mov	r2, r3
 800315a:	4613      	mov	r3, r2
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	4413      	add	r3, r2
 8003160:	2207      	movs	r2, #7
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	400a      	ands	r2, r1
 800316e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6919      	ldr	r1, [r3, #16]
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	b29b      	uxth	r3, r3
 8003180:	4618      	mov	r0, r3
 8003182:	4603      	mov	r3, r0
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	4403      	add	r3, r0
 8003188:	409a      	lsls	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	2b06      	cmp	r3, #6
 8003198:	d824      	bhi.n	80031e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	3b05      	subs	r3, #5
 80031ac:	221f      	movs	r2, #31
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	400a      	ands	r2, r1
 80031ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	3b05      	subs	r3, #5
 80031d6:	fa00 f203 	lsl.w	r2, r0, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	635a      	str	r2, [r3, #52]	; 0x34
 80031e2:	e04c      	b.n	800327e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	2b0c      	cmp	r3, #12
 80031ea:	d824      	bhi.n	8003236 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	3b23      	subs	r3, #35	; 0x23
 80031fe:	221f      	movs	r2, #31
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	43da      	mvns	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	400a      	ands	r2, r1
 800320c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	b29b      	uxth	r3, r3
 800321a:	4618      	mov	r0, r3
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685a      	ldr	r2, [r3, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	3b23      	subs	r3, #35	; 0x23
 8003228:	fa00 f203 	lsl.w	r2, r0, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	430a      	orrs	r2, r1
 8003232:	631a      	str	r2, [r3, #48]	; 0x30
 8003234:	e023      	b.n	800327e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	4613      	mov	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	4413      	add	r3, r2
 8003246:	3b41      	subs	r3, #65	; 0x41
 8003248:	221f      	movs	r2, #31
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43da      	mvns	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	400a      	ands	r2, r1
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	b29b      	uxth	r3, r3
 8003264:	4618      	mov	r0, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	3b41      	subs	r3, #65	; 0x41
 8003272:	fa00 f203 	lsl.w	r2, r0, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800327e:	4b29      	ldr	r3, [pc, #164]	; (8003324 <HAL_ADC_ConfigChannel+0x250>)
 8003280:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a28      	ldr	r2, [pc, #160]	; (8003328 <HAL_ADC_ConfigChannel+0x254>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d10f      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1d8>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b12      	cmp	r3, #18
 8003292:	d10b      	bne.n	80032ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a1d      	ldr	r2, [pc, #116]	; (8003328 <HAL_ADC_ConfigChannel+0x254>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d12b      	bne.n	800330e <HAL_ADC_ConfigChannel+0x23a>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a1c      	ldr	r2, [pc, #112]	; (800332c <HAL_ADC_ConfigChannel+0x258>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d003      	beq.n	80032c8 <HAL_ADC_ConfigChannel+0x1f4>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2b11      	cmp	r3, #17
 80032c6:	d122      	bne.n	800330e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_ADC_ConfigChannel+0x258>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d111      	bne.n	800330e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_ADC_ConfigChannel+0x25c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a11      	ldr	r2, [pc, #68]	; (8003334 <HAL_ADC_ConfigChannel+0x260>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	0c9a      	lsrs	r2, r3, #18
 80032f6:	4613      	mov	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4413      	add	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003300:	e002      	b.n	8003308 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	3b01      	subs	r3, #1
 8003306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f9      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003316:	2300      	movs	r3, #0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3714      	adds	r7, #20
 800331c:	46bd      	mov	sp, r7
 800331e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003322:	4770      	bx	lr
 8003324:	40012300 	.word	0x40012300
 8003328:	40012000 	.word	0x40012000
 800332c:	10000012 	.word	0x10000012
 8003330:	20000004 	.word	0x20000004
 8003334:	431bde83 	.word	0x431bde83

08003338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003340:	4b79      	ldr	r3, [pc, #484]	; (8003528 <ADC_Init+0x1f0>)
 8003342:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	431a      	orrs	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6859      	ldr	r1, [r3, #4]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	691b      	ldr	r3, [r3, #16]
 8003378:	021a      	lsls	r2, r3, #8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	685a      	ldr	r2, [r3, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	6899      	ldr	r1, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ca:	4a58      	ldr	r2, [pc, #352]	; (800352c <ADC_Init+0x1f4>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d022      	beq.n	8003416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6899      	ldr	r1, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	430a      	orrs	r2, r1
 80033f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6899      	ldr	r1, [r3, #8]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	430a      	orrs	r2, r1
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	e00f      	b.n	8003436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f022 0202 	bic.w	r2, r2, #2
 8003444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6899      	ldr	r1, [r3, #8]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7e1b      	ldrb	r3, [r3, #24]
 8003450:	005a      	lsls	r2, r3, #1
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d01b      	beq.n	800349c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003472:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6859      	ldr	r1, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348e:	3b01      	subs	r3, #1
 8003490:	035a      	lsls	r2, r3, #13
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	e007      	b.n	80034ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	69db      	ldr	r3, [r3, #28]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	051a      	lsls	r2, r3, #20
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	689a      	ldr	r2, [r3, #8]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80034e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6899      	ldr	r1, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80034ee:	025a      	lsls	r2, r3, #9
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	689a      	ldr	r2, [r3, #8]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	6899      	ldr	r1, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	029a      	lsls	r2, r3, #10
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	430a      	orrs	r2, r1
 800351a:	609a      	str	r2, [r3, #8]
}
 800351c:	bf00      	nop
 800351e:	3714      	adds	r7, #20
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr
 8003528:	40012300 	.word	0x40012300
 800352c:	0f000001 	.word	0x0f000001

08003530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003540:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <__NVIC_SetPriorityGrouping+0x44>)
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003546:	68ba      	ldr	r2, [r7, #8]
 8003548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800354c:	4013      	ands	r3, r2
 800354e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800355c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003562:	4a04      	ldr	r2, [pc, #16]	; (8003574 <__NVIC_SetPriorityGrouping+0x44>)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	60d3      	str	r3, [r2, #12]
}
 8003568:	bf00      	nop
 800356a:	3714      	adds	r7, #20
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	e000ed00 	.word	0xe000ed00

08003578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800357c:	4b04      	ldr	r3, [pc, #16]	; (8003590 <__NVIC_GetPriorityGrouping+0x18>)
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	f003 0307 	and.w	r3, r3, #7
}
 8003586:	4618      	mov	r0, r3
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800359e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	db0b      	blt.n	80035be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	f003 021f 	and.w	r2, r3, #31
 80035ac:	4907      	ldr	r1, [pc, #28]	; (80035cc <__NVIC_EnableIRQ+0x38>)
 80035ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b2:	095b      	lsrs	r3, r3, #5
 80035b4:	2001      	movs	r0, #1
 80035b6:	fa00 f202 	lsl.w	r2, r0, r2
 80035ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035be:	bf00      	nop
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	e000e100 	.word	0xe000e100

080035d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	4603      	mov	r3, r0
 80035d8:	6039      	str	r1, [r7, #0]
 80035da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	db0a      	blt.n	80035fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	b2da      	uxtb	r2, r3
 80035e8:	490c      	ldr	r1, [pc, #48]	; (800361c <__NVIC_SetPriority+0x4c>)
 80035ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ee:	0112      	lsls	r2, r2, #4
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	440b      	add	r3, r1
 80035f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f8:	e00a      	b.n	8003610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	b2da      	uxtb	r2, r3
 80035fe:	4908      	ldr	r1, [pc, #32]	; (8003620 <__NVIC_SetPriority+0x50>)
 8003600:	79fb      	ldrb	r3, [r7, #7]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	3b04      	subs	r3, #4
 8003608:	0112      	lsls	r2, r2, #4
 800360a:	b2d2      	uxtb	r2, r2
 800360c:	440b      	add	r3, r1
 800360e:	761a      	strb	r2, [r3, #24]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr
 800361c:	e000e100 	.word	0xe000e100
 8003620:	e000ed00 	.word	0xe000ed00

08003624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f003 0307 	and.w	r3, r3, #7
 8003636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f1c3 0307 	rsb	r3, r3, #7
 800363e:	2b04      	cmp	r3, #4
 8003640:	bf28      	it	cs
 8003642:	2304      	movcs	r3, #4
 8003644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3304      	adds	r3, #4
 800364a:	2b06      	cmp	r3, #6
 800364c:	d902      	bls.n	8003654 <NVIC_EncodePriority+0x30>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3b03      	subs	r3, #3
 8003652:	e000      	b.n	8003656 <NVIC_EncodePriority+0x32>
 8003654:	2300      	movs	r3, #0
 8003656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003658:	f04f 32ff 	mov.w	r2, #4294967295
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	fa02 f303 	lsl.w	r3, r2, r3
 8003662:	43da      	mvns	r2, r3
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	401a      	ands	r2, r3
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800366c:	f04f 31ff 	mov.w	r1, #4294967295
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	fa01 f303 	lsl.w	r3, r1, r3
 8003676:	43d9      	mvns	r1, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800367c:	4313      	orrs	r3, r2
         );
}
 800367e:	4618      	mov	r0, r3
 8003680:	3724      	adds	r7, #36	; 0x24
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3b01      	subs	r3, #1
 8003698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800369c:	d301      	bcc.n	80036a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800369e:	2301      	movs	r3, #1
 80036a0:	e00f      	b.n	80036c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036a2:	4a0a      	ldr	r2, [pc, #40]	; (80036cc <SysTick_Config+0x40>)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	3b01      	subs	r3, #1
 80036a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036aa:	210f      	movs	r1, #15
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	f7ff ff8e 	bl	80035d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036b4:	4b05      	ldr	r3, [pc, #20]	; (80036cc <SysTick_Config+0x40>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036ba:	4b04      	ldr	r3, [pc, #16]	; (80036cc <SysTick_Config+0x40>)
 80036bc:	2207      	movs	r2, #7
 80036be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3708      	adds	r7, #8
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	e000e010 	.word	0xe000e010

080036d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b082      	sub	sp, #8
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ff29 	bl	8003530 <__NVIC_SetPriorityGrouping>
}
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036e6:	b580      	push	{r7, lr}
 80036e8:	b086      	sub	sp, #24
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	4603      	mov	r3, r0
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f8:	f7ff ff3e 	bl	8003578 <__NVIC_GetPriorityGrouping>
 80036fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	68b9      	ldr	r1, [r7, #8]
 8003702:	6978      	ldr	r0, [r7, #20]
 8003704:	f7ff ff8e 	bl	8003624 <NVIC_EncodePriority>
 8003708:	4602      	mov	r2, r0
 800370a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800370e:	4611      	mov	r1, r2
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff ff5d 	bl	80035d0 <__NVIC_SetPriority>
}
 8003716:	bf00      	nop
 8003718:	3718      	adds	r7, #24
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	4603      	mov	r3, r0
 8003726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800372c:	4618      	mov	r0, r3
 800372e:	f7ff ff31 	bl	8003594 <__NVIC_EnableIRQ>
}
 8003732:	bf00      	nop
 8003734:	3708      	adds	r7, #8
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}

0800373a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800373a:	b580      	push	{r7, lr}
 800373c:	b082      	sub	sp, #8
 800373e:	af00      	add	r7, sp, #0
 8003740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff ffa2 	bl	800368c <SysTick_Config>
 8003748:	4603      	mov	r3, r0
}
 800374a:	4618      	mov	r0, r3
 800374c:	3708      	adds	r7, #8
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003752:	b580      	push	{r7, lr}
 8003754:	b082      	sub	sp, #8
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d101      	bne.n	8003764 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e014      	b.n	800378e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	791b      	ldrb	r3, [r3, #4]
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7fd fd79 	bl	800126c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2202      	movs	r2, #2
 800377e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2200      	movs	r2, #0
 8003784:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003796:	b480      	push	{r7}
 8003798:	b087      	sub	sp, #28
 800379a:	af00      	add	r7, sp, #0
 800379c:	60f8      	str	r0, [r7, #12]
 800379e:	60b9      	str	r1, [r7, #8]
 80037a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80037a2:	2300      	movs	r3, #0
 80037a4:	617b      	str	r3, [r7, #20]
 80037a6:	2300      	movs	r3, #0
 80037a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	795b      	ldrb	r3, [r3, #5]
 80037ae:	2b01      	cmp	r3, #1
 80037b0:	d101      	bne.n	80037b6 <HAL_DAC_ConfigChannel+0x20>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e036      	b.n	8003824 <HAL_DAC_ConfigChannel+0x8e>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2201      	movs	r2, #1
 80037ba:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2202      	movs	r2, #2
 80037c0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80037ca:	f640 72fe 	movw	r2, #4094	; 0xffe
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4013      	ands	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	697a      	ldr	r2, [r7, #20]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	6819      	ldr	r1, [r3, #0]
 8003804:	22c0      	movs	r2, #192	; 0xc0
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	43da      	mvns	r2, r3
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	400a      	ands	r2, r1
 8003814:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e0cf      	b.n	80039e2 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a69      	ldr	r2, [pc, #420]	; (80039ec <HAL_DFSDM_ChannelInit+0x1bc>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00e      	beq.n	800386a <HAL_DFSDM_ChannelInit+0x3a>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a67      	ldr	r2, [pc, #412]	; (80039f0 <HAL_DFSDM_ChannelInit+0x1c0>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d009      	beq.n	800386a <HAL_DFSDM_ChannelInit+0x3a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a66      	ldr	r2, [pc, #408]	; (80039f4 <HAL_DFSDM_ChannelInit+0x1c4>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d004      	beq.n	800386a <HAL_DFSDM_ChannelInit+0x3a>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a64      	ldr	r2, [pc, #400]	; (80039f8 <HAL_DFSDM_ChannelInit+0x1c8>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d106      	bne.n	8003878 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 800386a:	4b64      	ldr	r3, [pc, #400]	; (80039fc <HAL_DFSDM_ChannelInit+0x1cc>)
 800386c:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 800386e:	4b64      	ldr	r3, [pc, #400]	; (8003a00 <HAL_DFSDM_ChannelInit+0x1d0>)
 8003870:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003872:	4b5e      	ldr	r3, [pc, #376]	; (80039ec <HAL_DFSDM_ChannelInit+0x1bc>)
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e005      	b.n	8003884 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8003878:	4b62      	ldr	r3, [pc, #392]	; (8003a04 <HAL_DFSDM_ChannelInit+0x1d4>)
 800387a:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 800387c:	4b62      	ldr	r3, [pc, #392]	; (8003a08 <HAL_DFSDM_ChannelInit+0x1d8>)
 800387e:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8003880:	4b62      	ldr	r3, [pc, #392]	; (8003a0c <HAL_DFSDM_ChannelInit+0x1dc>)
 8003882:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f000 f8c1 	bl	8003a10 <DFSDM_GetChannelFromInstance>
 800388e:	4603      	mov	r3, r0
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	4413      	add	r3, r2
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0a0      	b.n	80039e2 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f7fd fd27 	bl	80012f4 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	1c5a      	adds	r2, r3, #1
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d125      	bne.n	8003904 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681a      	ldr	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	431a      	orrs	r2, r3
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	791b      	ldrb	r3, [r3, #4]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d108      	bne.n	80038f8 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	041b      	lsls	r3, r3, #16
 80038f2:	431a      	orrs	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003912:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6819      	ldr	r1, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003922:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003928:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	430a      	orrs	r2, r1
 8003930:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 020f 	bic.w	r2, r2, #15
 8003940:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6819      	ldr	r1, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	430a      	orrs	r2, r1
 8003958:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003968:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6899      	ldr	r1, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	3b01      	subs	r3, #1
 800397a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f002 0207 	and.w	r2, r2, #7
 8003994:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	430a      	orrs	r2, r1
 80039b0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80039c0:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2201      	movs	r2, #1
 80039c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f81e 	bl	8003a10 <DFSDM_GetChannelFromInstance>
 80039d4:	4603      	mov	r3, r0
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	693a      	ldr	r2, [r7, #16]
 80039da:	4413      	add	r3, r2
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 80039e0:	2300      	movs	r3, #0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3718      	adds	r7, #24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	40016000 	.word	0x40016000
 80039f0:	40016020 	.word	0x40016020
 80039f4:	40016040 	.word	0x40016040
 80039f8:	40016060 	.word	0x40016060
 80039fc:	20000510 	.word	0x20000510
 8003a00:	20000514 	.word	0x20000514
 8003a04:	20000524 	.word	0x20000524
 8003a08:	20000528 	.word	0x20000528
 8003a0c:	40016400 	.word	0x40016400

08003a10 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b085      	sub	sp, #20
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a24      	ldr	r2, [pc, #144]	; (8003aac <DFSDM_GetChannelFromInstance+0x9c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d003      	beq.n	8003a28 <DFSDM_GetChannelFromInstance+0x18>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a23      	ldr	r2, [pc, #140]	; (8003ab0 <DFSDM_GetChannelFromInstance+0xa0>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d102      	bne.n	8003a2e <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e037      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a20      	ldr	r2, [pc, #128]	; (8003ab4 <DFSDM_GetChannelFromInstance+0xa4>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d003      	beq.n	8003a3e <DFSDM_GetChannelFromInstance+0x2e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1f      	ldr	r2, [pc, #124]	; (8003ab8 <DFSDM_GetChannelFromInstance+0xa8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d102      	bne.n	8003a44 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	e02c      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a1d      	ldr	r2, [pc, #116]	; (8003abc <DFSDM_GetChannelFromInstance+0xac>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d003      	beq.n	8003a54 <DFSDM_GetChannelFromInstance+0x44>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <DFSDM_GetChannelFromInstance+0xb0>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d102      	bne.n	8003a5a <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003a54:	2302      	movs	r3, #2
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	e021      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a19      	ldr	r2, [pc, #100]	; (8003ac4 <DFSDM_GetChannelFromInstance+0xb4>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d003      	beq.n	8003a6a <DFSDM_GetChannelFromInstance+0x5a>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a18      	ldr	r2, [pc, #96]	; (8003ac8 <DFSDM_GetChannelFromInstance+0xb8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d102      	bne.n	8003a70 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	60fb      	str	r3, [r7, #12]
 8003a6e:	e016      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a16      	ldr	r2, [pc, #88]	; (8003acc <DFSDM_GetChannelFromInstance+0xbc>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d102      	bne.n	8003a7e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003a78:	2304      	movs	r3, #4
 8003a7a:	60fb      	str	r3, [r7, #12]
 8003a7c:	e00f      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a13      	ldr	r2, [pc, #76]	; (8003ad0 <DFSDM_GetChannelFromInstance+0xc0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d102      	bne.n	8003a8c <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8003a86:	2305      	movs	r3, #5
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e008      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a11      	ldr	r2, [pc, #68]	; (8003ad4 <DFSDM_GetChannelFromInstance+0xc4>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d102      	bne.n	8003a9a <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003a94:	2306      	movs	r3, #6
 8003a96:	60fb      	str	r3, [r7, #12]
 8003a98:	e001      	b.n	8003a9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8003a9a:	2307      	movs	r3, #7
 8003a9c:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40016000 	.word	0x40016000
 8003ab0:	40016400 	.word	0x40016400
 8003ab4:	40016020 	.word	0x40016020
 8003ab8:	40016420 	.word	0x40016420
 8003abc:	40016040 	.word	0x40016040
 8003ac0:	40016440 	.word	0x40016440
 8003ac4:	40016060 	.word	0x40016060
 8003ac8:	40016460 	.word	0x40016460
 8003acc:	40016480 	.word	0x40016480
 8003ad0:	400164a0 	.word	0x400164a0
 8003ad4:	400164c0 	.word	0x400164c0

08003ad8 <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e081      	b.n	8003bee <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003af0:	b2db      	uxtb	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d106      	bne.n	8003b04 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fd0a 	bl	8001518 <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2224      	movs	r2, #36	; 0x24
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b28:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689a      	ldr	r2, [r3, #8]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b38:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d107      	bne.n	8003b52 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b4e:	609a      	str	r2, [r3, #8]
 8003b50:	e006      	b.n	8003b60 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689a      	ldr	r2, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d104      	bne.n	8003b72 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b70:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6812      	ldr	r2, [r2, #0]
 8003b7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b84:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68da      	ldr	r2, [r3, #12]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b94:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691a      	ldr	r2, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	ea42 0103 	orr.w	r1, r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69d9      	ldr	r1, [r3, #28]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1a      	ldr	r2, [r3, #32]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2220      	movs	r2, #32
 8003bda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3708      	adds	r7, #8
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003bf6:	b480      	push	{r7}
 8003bf8:	b083      	sub	sp, #12
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
 8003bfe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d138      	bne.n	8003c7e <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d101      	bne.n	8003c1a <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003c16:	2302      	movs	r3, #2
 8003c18:	e032      	b.n	8003c80 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2224      	movs	r2, #36	; 0x24
 8003c26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0201 	bic.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c48:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	6819      	ldr	r1, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f042 0201 	orr.w	r2, r2, #1
 8003c68:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2220      	movs	r2, #32
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	e000      	b.n	8003c80 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c7e:	2302      	movs	r3, #2
  }
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	370c      	adds	r7, #12
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b089      	sub	sp, #36	; 0x24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	e165      	b.n	8003f74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ca8:	2201      	movs	r2, #1
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	f040 8154 	bne.w	8003f6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d00b      	beq.n	8003ce6 <HAL_GPIO_Init+0x5a>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d007      	beq.n	8003ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cda:	2b11      	cmp	r3, #17
 8003cdc:	d003      	beq.n	8003ce6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	2b12      	cmp	r3, #18
 8003ce4:	d130      	bne.n	8003d48 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0a:	69ba      	ldr	r2, [r7, #24]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d1c:	2201      	movs	r2, #1
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	fa02 f303 	lsl.w	r3, r2, r3
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f003 0201 	and.w	r2, r3, #1
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	69ba      	ldr	r2, [r7, #24]
 8003d46:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	69ba      	ldr	r2, [r7, #24]
 8003d76:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d003      	beq.n	8003d88 <HAL_GPIO_Init+0xfc>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b12      	cmp	r3, #18
 8003d86:	d123      	bne.n	8003dd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	08da      	lsrs	r2, r3, #3
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	3208      	adds	r2, #8
 8003d90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	220f      	movs	r2, #15
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691a      	ldr	r2, [r3, #16]
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dc2:	69fb      	ldr	r3, [r7, #28]
 8003dc4:	08da      	lsrs	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	3208      	adds	r2, #8
 8003dca:	69b9      	ldr	r1, [r7, #24]
 8003dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	2203      	movs	r2, #3
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	43db      	mvns	r3, r3
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	4013      	ands	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f003 0203 	and.w	r2, r3, #3
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	005b      	lsls	r3, r3, #1
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 80ae 	beq.w	8003f6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e12:	2300      	movs	r3, #0
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	4b5d      	ldr	r3, [pc, #372]	; (8003f8c <HAL_GPIO_Init+0x300>)
 8003e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1a:	4a5c      	ldr	r2, [pc, #368]	; (8003f8c <HAL_GPIO_Init+0x300>)
 8003e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e20:	6453      	str	r3, [r2, #68]	; 0x44
 8003e22:	4b5a      	ldr	r3, [pc, #360]	; (8003f8c <HAL_GPIO_Init+0x300>)
 8003e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e2e:	4a58      	ldr	r2, [pc, #352]	; (8003f90 <HAL_GPIO_Init+0x304>)
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	089b      	lsrs	r3, r3, #2
 8003e34:	3302      	adds	r3, #2
 8003e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	f003 0303 	and.w	r3, r3, #3
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	220f      	movs	r2, #15
 8003e46:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4a:	43db      	mvns	r3, r3
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4013      	ands	r3, r2
 8003e50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a4f      	ldr	r2, [pc, #316]	; (8003f94 <HAL_GPIO_Init+0x308>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d025      	beq.n	8003ea6 <HAL_GPIO_Init+0x21a>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a4e      	ldr	r2, [pc, #312]	; (8003f98 <HAL_GPIO_Init+0x30c>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d01f      	beq.n	8003ea2 <HAL_GPIO_Init+0x216>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a4d      	ldr	r2, [pc, #308]	; (8003f9c <HAL_GPIO_Init+0x310>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d019      	beq.n	8003e9e <HAL_GPIO_Init+0x212>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a4c      	ldr	r2, [pc, #304]	; (8003fa0 <HAL_GPIO_Init+0x314>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_GPIO_Init+0x20e>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a4b      	ldr	r2, [pc, #300]	; (8003fa4 <HAL_GPIO_Init+0x318>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d00d      	beq.n	8003e96 <HAL_GPIO_Init+0x20a>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4a      	ldr	r2, [pc, #296]	; (8003fa8 <HAL_GPIO_Init+0x31c>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d007      	beq.n	8003e92 <HAL_GPIO_Init+0x206>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a49      	ldr	r2, [pc, #292]	; (8003fac <HAL_GPIO_Init+0x320>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d101      	bne.n	8003e8e <HAL_GPIO_Init+0x202>
 8003e8a:	2306      	movs	r3, #6
 8003e8c:	e00c      	b.n	8003ea8 <HAL_GPIO_Init+0x21c>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e00a      	b.n	8003ea8 <HAL_GPIO_Init+0x21c>
 8003e92:	2305      	movs	r3, #5
 8003e94:	e008      	b.n	8003ea8 <HAL_GPIO_Init+0x21c>
 8003e96:	2304      	movs	r3, #4
 8003e98:	e006      	b.n	8003ea8 <HAL_GPIO_Init+0x21c>
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e004      	b.n	8003ea8 <HAL_GPIO_Init+0x21c>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e002      	b.n	8003ea8 <HAL_GPIO_Init+0x21c>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e000      	b.n	8003ea8 <HAL_GPIO_Init+0x21c>
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	69fa      	ldr	r2, [r7, #28]
 8003eaa:	f002 0203 	and.w	r2, r2, #3
 8003eae:	0092      	lsls	r2, r2, #2
 8003eb0:	4093      	lsls	r3, r2
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eb8:	4935      	ldr	r1, [pc, #212]	; (8003f90 <HAL_GPIO_Init+0x304>)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	089b      	lsrs	r3, r3, #2
 8003ebe:	3302      	adds	r3, #2
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ec6:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <HAL_GPIO_Init+0x324>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eea:	4a31      	ldr	r2, [pc, #196]	; (8003fb0 <HAL_GPIO_Init+0x324>)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ef0:	4b2f      	ldr	r3, [pc, #188]	; (8003fb0 <HAL_GPIO_Init+0x324>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	43db      	mvns	r3, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4013      	ands	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d003      	beq.n	8003f14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f14:	4a26      	ldr	r2, [pc, #152]	; (8003fb0 <HAL_GPIO_Init+0x324>)
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f1a:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_GPIO_Init+0x324>)
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	43db      	mvns	r3, r3
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	4013      	ands	r3, r2
 8003f28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f3e:	4a1c      	ldr	r2, [pc, #112]	; (8003fb0 <HAL_GPIO_Init+0x324>)
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f44:	4b1a      	ldr	r3, [pc, #104]	; (8003fb0 <HAL_GPIO_Init+0x324>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4013      	ands	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003f60:	69ba      	ldr	r2, [r7, #24]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f68:	4a11      	ldr	r2, [pc, #68]	; (8003fb0 <HAL_GPIO_Init+0x324>)
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	3301      	adds	r3, #1
 8003f72:	61fb      	str	r3, [r7, #28]
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	2b0f      	cmp	r3, #15
 8003f78:	f67f ae96 	bls.w	8003ca8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	bf00      	nop
 8003f80:	3724      	adds	r7, #36	; 0x24
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40023800 	.word	0x40023800
 8003f90:	40013800 	.word	0x40013800
 8003f94:	40020000 	.word	0x40020000
 8003f98:	40020400 	.word	0x40020400
 8003f9c:	40020800 	.word	0x40020800
 8003fa0:	40020c00 	.word	0x40020c00
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	40021400 	.word	0x40021400
 8003fac:	40021800 	.word	0x40021800
 8003fb0:	40013c00 	.word	0x40013c00

08003fb4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691a      	ldr	r2, [r3, #16]
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	4013      	ands	r3, r2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	73fb      	strb	r3, [r7, #15]
 8003fd0:	e001      	b.n	8003fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3714      	adds	r7, #20
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	460b      	mov	r3, r1
 8003fee:	807b      	strh	r3, [r7, #2]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff4:	787b      	ldrb	r3, [r7, #1]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ffa:	887a      	ldrh	r2, [r7, #2]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004000:	e003      	b.n	800400a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	041a      	lsls	r2, r3, #16
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	619a      	str	r2, [r3, #24]
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004016:	b480      	push	{r7}
 8004018:	b083      	sub	sp, #12
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	695a      	ldr	r2, [r3, #20]
 8004026:	887b      	ldrh	r3, [r7, #2]
 8004028:	401a      	ands	r2, r3
 800402a:	887b      	ldrh	r3, [r7, #2]
 800402c:	429a      	cmp	r2, r3
 800402e:	d104      	bne.n	800403a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004030:	887b      	ldrh	r3, [r7, #2]
 8004032:	041a      	lsls	r2, r3, #16
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004038:	e002      	b.n	8004040 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800403a:	887a      	ldrh	r2, [r7, #2]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	619a      	str	r2, [r3, #24]
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800404c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404e:	b08f      	sub	sp, #60	; 0x3c
 8004050:	af0a      	add	r7, sp, #40	; 0x28
 8004052:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e054      	b.n	8004108 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d106      	bne.n	800407e <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f008 faa5 	bl	800c5c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2203      	movs	r2, #3
 8004082:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408e:	2b00      	cmp	r3, #0
 8004090:	d102      	bne.n	8004098 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4618      	mov	r0, r3
 800409e:	f005 fc6d 	bl	800997c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	687e      	ldr	r6, [r7, #4]
 80040aa:	466d      	mov	r5, sp
 80040ac:	f106 0410 	add.w	r4, r6, #16
 80040b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80040c0:	1d33      	adds	r3, r6, #4
 80040c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c4:	6838      	ldr	r0, [r7, #0]
 80040c6:	f005 fbe7 	bl	8009898 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2101      	movs	r1, #1
 80040d0:	4618      	mov	r0, r3
 80040d2:	f005 fc64 	bl	800999e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	603b      	str	r3, [r7, #0]
 80040dc:	687e      	ldr	r6, [r7, #4]
 80040de:	466d      	mov	r5, sp
 80040e0:	f106 0410 	add.w	r4, r6, #16
 80040e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ec:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040f0:	e885 0003 	stmia.w	r5, {r0, r1}
 80040f4:	1d33      	adds	r3, r6, #4
 80040f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040f8:	6838      	ldr	r0, [r7, #0]
 80040fa:	f005 fd77 	bl	8009bec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004110 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004110:	b590      	push	{r4, r7, lr}
 8004112:	b089      	sub	sp, #36	; 0x24
 8004114:	af04      	add	r7, sp, #16
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	4608      	mov	r0, r1
 800411a:	4611      	mov	r1, r2
 800411c:	461a      	mov	r2, r3
 800411e:	4603      	mov	r3, r0
 8004120:	70fb      	strb	r3, [r7, #3]
 8004122:	460b      	mov	r3, r1
 8004124:	70bb      	strb	r3, [r7, #2]
 8004126:	4613      	mov	r3, r2
 8004128:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004130:	2b01      	cmp	r3, #1
 8004132:	d101      	bne.n	8004138 <HAL_HCD_HC_Init+0x28>
 8004134:	2302      	movs	r3, #2
 8004136:	e07f      	b.n	8004238 <HAL_HCD_HC_Init+0x128>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	440b      	add	r3, r1
 800414e:	333d      	adds	r3, #61	; 0x3d
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004154:	78fa      	ldrb	r2, [r7, #3]
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	4613      	mov	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	4413      	add	r3, r2
 800415e:	00db      	lsls	r3, r3, #3
 8004160:	440b      	add	r3, r1
 8004162:	3338      	adds	r3, #56	; 0x38
 8004164:	787a      	ldrb	r2, [r7, #1]
 8004166:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	4413      	add	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	440b      	add	r3, r1
 8004176:	3340      	adds	r3, #64	; 0x40
 8004178:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800417a:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800417c:	78fa      	ldrb	r2, [r7, #3]
 800417e:	6879      	ldr	r1, [r7, #4]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	3339      	adds	r3, #57	; 0x39
 800418c:	78fa      	ldrb	r2, [r7, #3]
 800418e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	440b      	add	r3, r1
 800419e:	333f      	adds	r3, #63	; 0x3f
 80041a0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80041a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80041a6:	78fa      	ldrb	r2, [r7, #3]
 80041a8:	78bb      	ldrb	r3, [r7, #2]
 80041aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041ae:	b2d8      	uxtb	r0, r3
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	00db      	lsls	r3, r3, #3
 80041ba:	440b      	add	r3, r1
 80041bc:	333a      	adds	r3, #58	; 0x3a
 80041be:	4602      	mov	r2, r0
 80041c0:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80041c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	da0a      	bge.n	80041e0 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80041ca:	78fa      	ldrb	r2, [r7, #3]
 80041cc:	6879      	ldr	r1, [r7, #4]
 80041ce:	4613      	mov	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	4413      	add	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	440b      	add	r3, r1
 80041d8:	333b      	adds	r3, #59	; 0x3b
 80041da:	2201      	movs	r2, #1
 80041dc:	701a      	strb	r2, [r3, #0]
 80041de:	e009      	b.n	80041f4 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80041e0:	78fa      	ldrb	r2, [r7, #3]
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	440b      	add	r3, r1
 80041ee:	333b      	adds	r3, #59	; 0x3b
 80041f0:	2200      	movs	r2, #0
 80041f2:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80041f4:	78fa      	ldrb	r2, [r7, #3]
 80041f6:	6879      	ldr	r1, [r7, #4]
 80041f8:	4613      	mov	r3, r2
 80041fa:	009b      	lsls	r3, r3, #2
 80041fc:	4413      	add	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	440b      	add	r3, r1
 8004202:	333c      	adds	r3, #60	; 0x3c
 8004204:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004208:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	787c      	ldrb	r4, [r7, #1]
 8004210:	78ba      	ldrb	r2, [r7, #2]
 8004212:	78f9      	ldrb	r1, [r7, #3]
 8004214:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004216:	9302      	str	r3, [sp, #8]
 8004218:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800421c:	9301      	str	r3, [sp, #4]
 800421e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	4623      	mov	r3, r4
 8004226:	f005 fe5d 	bl	8009ee4 <USB_HC_Init>
 800422a:	4603      	mov	r3, r0
 800422c:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004236:	7bfb      	ldrb	r3, [r7, #15]
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	bd90      	pop	{r4, r7, pc}

08004240 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800424c:	2300      	movs	r3, #0
 800424e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004256:	2b01      	cmp	r3, #1
 8004258:	d101      	bne.n	800425e <HAL_HCD_HC_Halt+0x1e>
 800425a:	2302      	movs	r3, #2
 800425c:	e00f      	b.n	800427e <HAL_HCD_HC_Halt+0x3e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	78fa      	ldrb	r2, [r7, #3]
 800426c:	4611      	mov	r1, r2
 800426e:	4618      	mov	r0, r3
 8004270:	f006 f897 	bl	800a3a2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b082      	sub	sp, #8
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	4608      	mov	r0, r1
 8004292:	4611      	mov	r1, r2
 8004294:	461a      	mov	r2, r3
 8004296:	4603      	mov	r3, r0
 8004298:	70fb      	strb	r3, [r7, #3]
 800429a:	460b      	mov	r3, r1
 800429c:	70bb      	strb	r3, [r7, #2]
 800429e:	4613      	mov	r3, r2
 80042a0:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80042a2:	78fa      	ldrb	r2, [r7, #3]
 80042a4:	6879      	ldr	r1, [r7, #4]
 80042a6:	4613      	mov	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	4413      	add	r3, r2
 80042ac:	00db      	lsls	r3, r3, #3
 80042ae:	440b      	add	r3, r1
 80042b0:	333b      	adds	r3, #59	; 0x3b
 80042b2:	78ba      	ldrb	r2, [r7, #2]
 80042b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	00db      	lsls	r3, r3, #3
 80042c2:	440b      	add	r3, r1
 80042c4:	333f      	adds	r3, #63	; 0x3f
 80042c6:	787a      	ldrb	r2, [r7, #1]
 80042c8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80042ca:	7c3b      	ldrb	r3, [r7, #16]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d114      	bne.n	80042fa <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	009b      	lsls	r3, r3, #2
 80042d8:	4413      	add	r3, r2
 80042da:	00db      	lsls	r3, r3, #3
 80042dc:	440b      	add	r3, r1
 80042de:	3342      	adds	r3, #66	; 0x42
 80042e0:	2203      	movs	r2, #3
 80042e2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	440b      	add	r3, r1
 80042f2:	333d      	adds	r3, #61	; 0x3d
 80042f4:	7f3a      	ldrb	r2, [r7, #28]
 80042f6:	701a      	strb	r2, [r3, #0]
 80042f8:	e009      	b.n	800430e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	6879      	ldr	r1, [r7, #4]
 80042fe:	4613      	mov	r3, r2
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	4413      	add	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	440b      	add	r3, r1
 8004308:	3342      	adds	r3, #66	; 0x42
 800430a:	2202      	movs	r2, #2
 800430c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800430e:	787b      	ldrb	r3, [r7, #1]
 8004310:	2b03      	cmp	r3, #3
 8004312:	f200 80d6 	bhi.w	80044c2 <HAL_HCD_HC_SubmitRequest+0x23a>
 8004316:	a201      	add	r2, pc, #4	; (adr r2, 800431c <HAL_HCD_HC_SubmitRequest+0x94>)
 8004318:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800431c:	0800432d 	.word	0x0800432d
 8004320:	080044ad 	.word	0x080044ad
 8004324:	08004399 	.word	0x08004399
 8004328:	08004423 	.word	0x08004423
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800432c:	7c3b      	ldrb	r3, [r7, #16]
 800432e:	2b01      	cmp	r3, #1
 8004330:	f040 80c9 	bne.w	80044c6 <HAL_HCD_HC_SubmitRequest+0x23e>
 8004334:	78bb      	ldrb	r3, [r7, #2]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f040 80c5 	bne.w	80044c6 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 800433c:	8b3b      	ldrh	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d109      	bne.n	8004356 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004342:	78fa      	ldrb	r2, [r7, #3]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	440b      	add	r3, r1
 8004350:	3351      	adds	r3, #81	; 0x51
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004356:	78fa      	ldrb	r2, [r7, #3]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	440b      	add	r3, r1
 8004364:	3351      	adds	r3, #81	; 0x51
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800436c:	78fa      	ldrb	r2, [r7, #3]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	4613      	mov	r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	4413      	add	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	440b      	add	r3, r1
 800437a:	3342      	adds	r3, #66	; 0x42
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004380:	e0a1      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004382:	78fa      	ldrb	r2, [r7, #3]
 8004384:	6879      	ldr	r1, [r7, #4]
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	440b      	add	r3, r1
 8004390:	3342      	adds	r3, #66	; 0x42
 8004392:	2202      	movs	r2, #2
 8004394:	701a      	strb	r2, [r3, #0]
      break;
 8004396:	e096      	b.n	80044c6 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004398:	78bb      	ldrb	r3, [r7, #2]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d120      	bne.n	80043e0 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	4413      	add	r3, r2
 80043a8:	00db      	lsls	r3, r3, #3
 80043aa:	440b      	add	r3, r1
 80043ac:	3351      	adds	r3, #81	; 0x51
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d10a      	bne.n	80043ca <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043b4:	78fa      	ldrb	r2, [r7, #3]
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	440b      	add	r3, r1
 80043c2:	3342      	adds	r3, #66	; 0x42
 80043c4:	2200      	movs	r2, #0
 80043c6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80043c8:	e07e      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043ca:	78fa      	ldrb	r2, [r7, #3]
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	4613      	mov	r3, r2
 80043d0:	009b      	lsls	r3, r3, #2
 80043d2:	4413      	add	r3, r2
 80043d4:	00db      	lsls	r3, r3, #3
 80043d6:	440b      	add	r3, r1
 80043d8:	3342      	adds	r3, #66	; 0x42
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
      break;
 80043de:	e073      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80043e0:	78fa      	ldrb	r2, [r7, #3]
 80043e2:	6879      	ldr	r1, [r7, #4]
 80043e4:	4613      	mov	r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4413      	add	r3, r2
 80043ea:	00db      	lsls	r3, r3, #3
 80043ec:	440b      	add	r3, r1
 80043ee:	3350      	adds	r3, #80	; 0x50
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d10a      	bne.n	800440c <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	00db      	lsls	r3, r3, #3
 8004402:	440b      	add	r3, r1
 8004404:	3342      	adds	r3, #66	; 0x42
 8004406:	2200      	movs	r2, #0
 8004408:	701a      	strb	r2, [r3, #0]
      break;
 800440a:	e05d      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	00db      	lsls	r3, r3, #3
 8004418:	440b      	add	r3, r1
 800441a:	3342      	adds	r3, #66	; 0x42
 800441c:	2202      	movs	r2, #2
 800441e:	701a      	strb	r2, [r3, #0]
      break;
 8004420:	e052      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004422:	78bb      	ldrb	r3, [r7, #2]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d120      	bne.n	800446a <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	440b      	add	r3, r1
 8004436:	3351      	adds	r3, #81	; 0x51
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800443e:	78fa      	ldrb	r2, [r7, #3]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	440b      	add	r3, r1
 800444c:	3342      	adds	r3, #66	; 0x42
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004452:	e039      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004454:	78fa      	ldrb	r2, [r7, #3]
 8004456:	6879      	ldr	r1, [r7, #4]
 8004458:	4613      	mov	r3, r2
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	4413      	add	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	440b      	add	r3, r1
 8004462:	3342      	adds	r3, #66	; 0x42
 8004464:	2202      	movs	r2, #2
 8004466:	701a      	strb	r2, [r3, #0]
      break;
 8004468:	e02e      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800446a:	78fa      	ldrb	r2, [r7, #3]
 800446c:	6879      	ldr	r1, [r7, #4]
 800446e:	4613      	mov	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4413      	add	r3, r2
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	440b      	add	r3, r1
 8004478:	3350      	adds	r3, #80	; 0x50
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10a      	bne.n	8004496 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	6879      	ldr	r1, [r7, #4]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	440b      	add	r3, r1
 800448e:	3342      	adds	r3, #66	; 0x42
 8004490:	2200      	movs	r2, #0
 8004492:	701a      	strb	r2, [r3, #0]
      break;
 8004494:	e018      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004496:	78fa      	ldrb	r2, [r7, #3]
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	4613      	mov	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	4413      	add	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	440b      	add	r3, r1
 80044a4:	3342      	adds	r3, #66	; 0x42
 80044a6:	2202      	movs	r2, #2
 80044a8:	701a      	strb	r2, [r3, #0]
      break;
 80044aa:	e00d      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044ac:	78fa      	ldrb	r2, [r7, #3]
 80044ae:	6879      	ldr	r1, [r7, #4]
 80044b0:	4613      	mov	r3, r2
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	440b      	add	r3, r1
 80044ba:	3342      	adds	r3, #66	; 0x42
 80044bc:	2200      	movs	r2, #0
 80044be:	701a      	strb	r2, [r3, #0]
      break;
 80044c0:	e002      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80044c2:	bf00      	nop
 80044c4:	e000      	b.n	80044c8 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80044c6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80044c8:	78fa      	ldrb	r2, [r7, #3]
 80044ca:	6879      	ldr	r1, [r7, #4]
 80044cc:	4613      	mov	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	4413      	add	r3, r2
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	440b      	add	r3, r1
 80044d6:	3344      	adds	r3, #68	; 0x44
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	8b39      	ldrh	r1, [r7, #24]
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	4613      	mov	r3, r2
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	4403      	add	r3, r0
 80044ec:	3348      	adds	r3, #72	; 0x48
 80044ee:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80044f0:	78fa      	ldrb	r2, [r7, #3]
 80044f2:	6879      	ldr	r1, [r7, #4]
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	440b      	add	r3, r1
 80044fe:	335c      	adds	r3, #92	; 0x5c
 8004500:	2200      	movs	r2, #0
 8004502:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004504:	78fa      	ldrb	r2, [r7, #3]
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	4613      	mov	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4413      	add	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	440b      	add	r3, r1
 8004512:	334c      	adds	r3, #76	; 0x4c
 8004514:	2200      	movs	r2, #0
 8004516:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004518:	78fa      	ldrb	r2, [r7, #3]
 800451a:	6879      	ldr	r1, [r7, #4]
 800451c:	4613      	mov	r3, r2
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	440b      	add	r3, r1
 8004526:	3339      	adds	r3, #57	; 0x39
 8004528:	78fa      	ldrb	r2, [r7, #3]
 800452a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800452c:	78fa      	ldrb	r2, [r7, #3]
 800452e:	6879      	ldr	r1, [r7, #4]
 8004530:	4613      	mov	r3, r2
 8004532:	009b      	lsls	r3, r3, #2
 8004534:	4413      	add	r3, r2
 8004536:	00db      	lsls	r3, r3, #3
 8004538:	440b      	add	r3, r1
 800453a:	335d      	adds	r3, #93	; 0x5d
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6818      	ldr	r0, [r3, #0]
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	4613      	mov	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4413      	add	r3, r2
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	3338      	adds	r3, #56	; 0x38
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	18d1      	adds	r1, r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	b2db      	uxtb	r3, r3
 800455a:	461a      	mov	r2, r3
 800455c:	f005 fdcc 	bl	800a0f8 <USB_HC_StartXfer>
 8004560:	4603      	mov	r3, r0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3708      	adds	r7, #8
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop

0800456c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f005 faef 	bl	8009b66 <USB_GetMode>
 8004588:	4603      	mov	r3, r0
 800458a:	2b01      	cmp	r3, #1
 800458c:	f040 80ef 	bne.w	800476e <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4618      	mov	r0, r3
 8004596:	f005 fad3 	bl	8009b40 <USB_ReadInterrupts>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 80e5 	beq.w	800476c <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f005 faca 	bl	8009b40 <USB_ReadInterrupts>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045b6:	d104      	bne.n	80045c2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80045c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f005 faba 	bl	8009b40 <USB_ReadInterrupts>
 80045cc:	4603      	mov	r3, r0
 80045ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045d6:	d104      	bne.n	80045e2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80045e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f005 faaa 	bl	8009b40 <USB_ReadInterrupts>
 80045ec:	4603      	mov	r3, r0
 80045ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80045f2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80045f6:	d104      	bne.n	8004602 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004600:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f005 fa9a 	bl	8009b40 <USB_ReadInterrupts>
 800460c:	4603      	mov	r3, r0
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b02      	cmp	r3, #2
 8004614:	d103      	bne.n	800461e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2202      	movs	r2, #2
 800461c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f005 fa8c 	bl	8009b40 <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800462e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004632:	d115      	bne.n	8004660 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800463c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d108      	bne.n	8004660 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f008 f838 	bl	800c6c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2101      	movs	r1, #1
 800465a:	4618      	mov	r0, r3
 800465c:	f005 fb7c 	bl	8009d58 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4618      	mov	r0, r3
 8004666:	f005 fa6b 	bl	8009b40 <USB_ReadInterrupts>
 800466a:	4603      	mov	r3, r0
 800466c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004674:	d102      	bne.n	800467c <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f001 f968 	bl	800594c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f005 fa5d 	bl	8009b40 <USB_ReadInterrupts>
 8004686:	4603      	mov	r3, r0
 8004688:	f003 0308 	and.w	r3, r3, #8
 800468c:	2b08      	cmp	r3, #8
 800468e:	d106      	bne.n	800469e <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f007 fffb 	bl	800c68c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2208      	movs	r2, #8
 800469c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f005 fa4c 	bl	8009b40 <USB_ReadInterrupts>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046b2:	d138      	bne.n	8004726 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f005 fe61 	bl	800a380 <USB_HC_ReadInterrupt>
 80046be:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	e025      	b.n	8004712 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f003 030f 	and.w	r3, r3, #15
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	fa22 f303 	lsr.w	r3, r2, r3
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d018      	beq.n	800470c <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	015a      	lsls	r2, r3, #5
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4413      	add	r3, r2
 80046e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046f0:	d106      	bne.n	8004700 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	4619      	mov	r1, r3
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f000 f8cf 	bl	800489c <HCD_HC_IN_IRQHandler>
 80046fe:	e005      	b.n	800470c <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	4619      	mov	r1, r3
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fcfd 	bl	8005106 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	3301      	adds	r3, #1
 8004710:	617b      	str	r3, [r7, #20]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	697a      	ldr	r2, [r7, #20]
 8004718:	429a      	cmp	r2, r3
 800471a:	d3d4      	bcc.n	80046c6 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f005 fa08 	bl	8009b40 <USB_ReadInterrupts>
 8004730:	4603      	mov	r3, r0
 8004732:	f003 0310 	and.w	r3, r3, #16
 8004736:	2b10      	cmp	r3, #16
 8004738:	d101      	bne.n	800473e <HAL_HCD_IRQHandler+0x1d2>
 800473a:	2301      	movs	r3, #1
 800473c:	e000      	b.n	8004740 <HAL_HCD_IRQHandler+0x1d4>
 800473e:	2300      	movs	r3, #0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d014      	beq.n	800476e <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	699a      	ldr	r2, [r3, #24]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0210 	bic.w	r2, r2, #16
 8004752:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f001 f84b 	bl	80057f0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699a      	ldr	r2, [r3, #24]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f042 0210 	orr.w	r2, r2, #16
 8004768:	619a      	str	r2, [r3, #24]
 800476a:	e000      	b.n	800476e <HAL_HCD_IRQHandler+0x202>
      return;
 800476c:	bf00      	nop
    }
  }
}
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004782:	2b01      	cmp	r3, #1
 8004784:	d101      	bne.n	800478a <HAL_HCD_Start+0x16>
 8004786:	2302      	movs	r3, #2
 8004788:	e013      	b.n	80047b2 <HAL_HCD_Start+0x3e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2201      	movs	r2, #1
 800478e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f005 f8df 	bl	800995a <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2101      	movs	r1, #1
 80047a2:	4618      	mov	r0, r3
 80047a4:	f005 fb3c 	bl	8009e20 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d101      	bne.n	80047d0 <HAL_HCD_Stop+0x16>
 80047cc:	2302      	movs	r3, #2
 80047ce:	e00d      	b.n	80047ec <HAL_HCD_Stop+0x32>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4618      	mov	r0, r3
 80047de:	f005 ff1b 	bl	800a618 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3708      	adds	r7, #8
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}

080047f4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4618      	mov	r0, r3
 8004802:	f005 fae3 	bl	8009dcc <USB_ResetPort>
 8004806:	4603      	mov	r3, r0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3708      	adds	r7, #8
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004810:	b480      	push	{r7}
 8004812:	b083      	sub	sp, #12
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
 8004818:	460b      	mov	r3, r1
 800481a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800481c:	78fa      	ldrb	r2, [r7, #3]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	00db      	lsls	r3, r3, #3
 8004828:	440b      	add	r3, r1
 800482a:	335c      	adds	r3, #92	; 0x5c
 800482c:	781b      	ldrb	r3, [r3, #0]
}
 800482e:	4618      	mov	r0, r3
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004846:	78fa      	ldrb	r2, [r7, #3]
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	00db      	lsls	r3, r3, #3
 8004852:	440b      	add	r3, r1
 8004854:	334c      	adds	r3, #76	; 0x4c
 8004856:	681b      	ldr	r3, [r3, #0]
}
 8004858:	4618      	mov	r0, r3
 800485a:	370c      	adds	r7, #12
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4618      	mov	r0, r3
 8004872:	f005 fb25 	bl	8009ec0 <USB_GetCurrentFrame>
 8004876:	4603      	mov	r3, r0
}
 8004878:	4618      	mov	r0, r3
 800487a:	3708      	adds	r7, #8
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f005 fb00 	bl	8009e92 <USB_GetHostSpeed>
 8004892:	4603      	mov	r3, r0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3708      	adds	r7, #8
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b086      	sub	sp, #24
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	460b      	mov	r3, r1
 80048a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80048b2:	78fb      	ldrb	r3, [r7, #3]
 80048b4:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	015a      	lsls	r2, r3, #5
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4413      	add	r3, r2
 80048be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b04      	cmp	r3, #4
 80048ca:	d119      	bne.n	8004900 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	015a      	lsls	r2, r3, #5
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	4413      	add	r3, r2
 80048d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048d8:	461a      	mov	r2, r3
 80048da:	2304      	movs	r3, #4
 80048dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80048f8:	f043 0302 	orr.w	r3, r3, #2
 80048fc:	60d3      	str	r3, [r2, #12]
 80048fe:	e0ce      	b.n	8004a9e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	4413      	add	r3, r2
 8004908:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004916:	d12c      	bne.n	8004972 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	015a      	lsls	r2, r3, #5
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	4413      	add	r3, r2
 8004920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004924:	461a      	mov	r2, r3
 8004926:	f44f 7380 	mov.w	r3, #256	; 0x100
 800492a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	68fa      	ldr	r2, [r7, #12]
 8004930:	4613      	mov	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4413      	add	r3, r2
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	440b      	add	r3, r1
 800493a:	335d      	adds	r3, #93	; 0x5d
 800493c:	2207      	movs	r2, #7
 800493e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	4413      	add	r3, r2
 8004948:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	0151      	lsls	r1, r2, #5
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	440a      	add	r2, r1
 8004956:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800495a:	f043 0302 	orr.w	r3, r3, #2
 800495e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	b2d2      	uxtb	r2, r2
 8004968:	4611      	mov	r1, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f005 fd19 	bl	800a3a2 <USB_HC_Halt>
 8004970:	e095      	b.n	8004a9e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	015a      	lsls	r2, r3, #5
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	4413      	add	r3, r2
 800497a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b20      	cmp	r3, #32
 8004986:	d109      	bne.n	800499c <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	4413      	add	r3, r2
 8004990:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004994:	461a      	mov	r2, r3
 8004996:	2320      	movs	r3, #32
 8004998:	6093      	str	r3, [r2, #8]
 800499a:	e080      	b.n	8004a9e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d134      	bne.n	8004a1c <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	0151      	lsls	r1, r2, #5
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	440a      	add	r2, r1
 80049c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80049cc:	f043 0302 	orr.w	r3, r3, #2
 80049d0:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 80049d2:	6879      	ldr	r1, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4613      	mov	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	00db      	lsls	r3, r3, #3
 80049de:	440b      	add	r3, r1
 80049e0:	335d      	adds	r3, #93	; 0x5d
 80049e2:	2205      	movs	r2, #5
 80049e4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	015a      	lsls	r2, r3, #5
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	4413      	add	r3, r2
 80049ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049f2:	461a      	mov	r2, r3
 80049f4:	2310      	movs	r3, #16
 80049f6:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a04:	461a      	mov	r2, r3
 8004a06:	2308      	movs	r3, #8
 8004a08:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	4611      	mov	r1, r2
 8004a14:	4618      	mov	r0, r3
 8004a16:	f005 fcc4 	bl	800a3a2 <USB_HC_Halt>
 8004a1a:	e040      	b.n	8004a9e <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a32:	d134      	bne.n	8004a9e <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004a4e:	f043 0302 	orr.w	r3, r3, #2
 8004a52:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f005 fc9f 	bl	800a3a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a70:	461a      	mov	r2, r3
 8004a72:	2310      	movs	r3, #16
 8004a74:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	440b      	add	r3, r1
 8004a84:	335d      	adds	r3, #93	; 0x5d
 8004a86:	2208      	movs	r2, #8
 8004a88:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a96:	461a      	mov	r2, r3
 8004a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a9c:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab4:	d122      	bne.n	8004afc <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	015a      	lsls	r2, r3, #5
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4413      	add	r3, r2
 8004abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	68fa      	ldr	r2, [r7, #12]
 8004ac6:	0151      	lsls	r1, r2, #5
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	440a      	add	r2, r1
 8004acc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ad0:	f043 0302 	orr.w	r3, r3, #2
 8004ad4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	b2d2      	uxtb	r2, r2
 8004ade:	4611      	mov	r1, r2
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f005 fc5e 	bl	800a3a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	015a      	lsls	r2, r3, #5
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	4413      	add	r3, r2
 8004aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004af2:	461a      	mov	r2, r3
 8004af4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004af8:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004afa:	e300      	b.n	80050fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 0301 	and.w	r3, r3, #1
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	f040 80fd 	bne.w	8004d0e <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	691b      	ldr	r3, [r3, #16]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d01b      	beq.n	8004b54 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004b1c:	6879      	ldr	r1, [r7, #4]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	440b      	add	r3, r1
 8004b2a:	3348      	adds	r3, #72	; 0x48
 8004b2c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	0159      	lsls	r1, r3, #5
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	440b      	add	r3, r1
 8004b36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004b40:	1ad1      	subs	r1, r2, r3
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4613      	mov	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4413      	add	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	4403      	add	r3, r0
 8004b50:	334c      	adds	r3, #76	; 0x4c
 8004b52:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	440b      	add	r3, r1
 8004b62:	335d      	adds	r3, #93	; 0x5d
 8004b64:	2201      	movs	r2, #1
 8004b66:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	440b      	add	r3, r1
 8004b76:	3358      	adds	r3, #88	; 0x58
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b8e:	6879      	ldr	r1, [r7, #4]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4613      	mov	r3, r2
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	00db      	lsls	r3, r3, #3
 8004b9a:	440b      	add	r3, r1
 8004b9c:	333f      	adds	r3, #63	; 0x3f
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00a      	beq.n	8004bba <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	440b      	add	r3, r1
 8004bb2:	333f      	adds	r3, #63	; 0x3f
 8004bb4:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d121      	bne.n	8004bfe <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	68fa      	ldr	r2, [r7, #12]
 8004bca:	0151      	lsls	r1, r2, #5
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	440a      	add	r2, r1
 8004bd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004bd4:	f043 0302 	orr.w	r3, r3, #2
 8004bd8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	4611      	mov	r1, r2
 8004be4:	4618      	mov	r0, r3
 8004be6:	f005 fbdc 	bl	800a3a2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	015a      	lsls	r2, r3, #5
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf6:	461a      	mov	r2, r3
 8004bf8:	2310      	movs	r3, #16
 8004bfa:	6093      	str	r3, [r2, #8]
 8004bfc:	e070      	b.n	8004ce0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	00db      	lsls	r3, r3, #3
 8004c0a:	440b      	add	r3, r1
 8004c0c:	333f      	adds	r3, #63	; 0x3f
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d12a      	bne.n	8004c6a <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	0151      	lsls	r1, r2, #5
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	440a      	add	r2, r1
 8004c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c32:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c34:	6879      	ldr	r1, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	00db      	lsls	r3, r3, #3
 8004c40:	440b      	add	r3, r1
 8004c42:	335c      	adds	r3, #92	; 0x5c
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	b2d8      	uxtb	r0, r3
 8004c4c:	6879      	ldr	r1, [r7, #4]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	440b      	add	r3, r1
 8004c5a:	335c      	adds	r3, #92	; 0x5c
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	4601      	mov	r1, r0
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f007 fd3c 	bl	800c6e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c68:	e03a      	b.n	8004ce0 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	00db      	lsls	r3, r3, #3
 8004c76:	440b      	add	r3, r1
 8004c78:	333f      	adds	r3, #63	; 0x3f
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d12f      	bne.n	8004ce0 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4613      	mov	r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	00db      	lsls	r3, r3, #3
 8004c8c:	440b      	add	r3, r1
 8004c8e:	335c      	adds	r3, #92	; 0x5c
 8004c90:	2201      	movs	r2, #1
 8004c92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	440b      	add	r3, r1
 8004ca2:	3350      	adds	r3, #80	; 0x50
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	f083 0301 	eor.w	r3, r3, #1
 8004caa:	b2d8      	uxtb	r0, r3
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	68fa      	ldr	r2, [r7, #12]
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	4413      	add	r3, r2
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	440b      	add	r3, r1
 8004cba:	3350      	adds	r3, #80	; 0x50
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	b2d8      	uxtb	r0, r3
 8004cc4:	6879      	ldr	r1, [r7, #4]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	00db      	lsls	r3, r3, #3
 8004cd0:	440b      	add	r3, r1
 8004cd2:	335c      	adds	r3, #92	; 0x5c
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4601      	mov	r1, r0
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f007 fd00 	bl	800c6e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ce0:	6879      	ldr	r1, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	00db      	lsls	r3, r3, #3
 8004cec:	440b      	add	r3, r1
 8004cee:	3350      	adds	r3, #80	; 0x50
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	f083 0301 	eor.w	r3, r3, #1
 8004cf6:	b2d8      	uxtb	r0, r3
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	00db      	lsls	r3, r3, #3
 8004d04:	440b      	add	r3, r1
 8004d06:	3350      	adds	r3, #80	; 0x50
 8004d08:	4602      	mov	r2, r0
 8004d0a:	701a      	strb	r2, [r3, #0]
}
 8004d0c:	e1f7      	b.n	80050fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	f040 811a 	bne.w	8004f5a <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	693a      	ldr	r2, [r7, #16]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d40:	f023 0302 	bic.w	r3, r3, #2
 8004d44:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	4613      	mov	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	4413      	add	r3, r2
 8004d50:	00db      	lsls	r3, r3, #3
 8004d52:	440b      	add	r3, r1
 8004d54:	335d      	adds	r3, #93	; 0x5d
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d10a      	bne.n	8004d72 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4613      	mov	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	00db      	lsls	r3, r3, #3
 8004d68:	440b      	add	r3, r1
 8004d6a:	335c      	adds	r3, #92	; 0x5c
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	701a      	strb	r2, [r3, #0]
 8004d70:	e0d9      	b.n	8004f26 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004d72:	6879      	ldr	r1, [r7, #4]
 8004d74:	68fa      	ldr	r2, [r7, #12]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	440b      	add	r3, r1
 8004d80:	335d      	adds	r3, #93	; 0x5d
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	2b05      	cmp	r3, #5
 8004d86:	d10a      	bne.n	8004d9e <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004d88:	6879      	ldr	r1, [r7, #4]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	00db      	lsls	r3, r3, #3
 8004d94:	440b      	add	r3, r1
 8004d96:	335c      	adds	r3, #92	; 0x5c
 8004d98:	2205      	movs	r2, #5
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	e0c3      	b.n	8004f26 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4613      	mov	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4413      	add	r3, r2
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	440b      	add	r3, r1
 8004dac:	335d      	adds	r3, #93	; 0x5d
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	2b06      	cmp	r3, #6
 8004db2:	d00a      	beq.n	8004dca <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	440b      	add	r3, r1
 8004dc2:	335d      	adds	r3, #93	; 0x5d
 8004dc4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004dc6:	2b08      	cmp	r3, #8
 8004dc8:	d156      	bne.n	8004e78 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	68fa      	ldr	r2, [r7, #12]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4413      	add	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	440b      	add	r3, r1
 8004dd8:	3358      	adds	r3, #88	; 0x58
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	1c59      	adds	r1, r3, #1
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4403      	add	r3, r0
 8004dec:	3358      	adds	r3, #88	; 0x58
 8004dee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004df0:	6879      	ldr	r1, [r7, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	00db      	lsls	r3, r3, #3
 8004dfc:	440b      	add	r3, r1
 8004dfe:	3358      	adds	r3, #88	; 0x58
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b03      	cmp	r3, #3
 8004e04:	d914      	bls.n	8004e30 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	00db      	lsls	r3, r3, #3
 8004e12:	440b      	add	r3, r1
 8004e14:	3358      	adds	r3, #88	; 0x58
 8004e16:	2200      	movs	r2, #0
 8004e18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	440b      	add	r3, r1
 8004e28:	335c      	adds	r3, #92	; 0x5c
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e009      	b.n	8004e44 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	440b      	add	r3, r1
 8004e3e:	335c      	adds	r3, #92	; 0x5c
 8004e40:	2202      	movs	r2, #2
 8004e42:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e5a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e62:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	015a      	lsls	r2, r3, #5
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e70:	461a      	mov	r2, r3
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	e056      	b.n	8004f26 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	440b      	add	r3, r1
 8004e86:	335d      	adds	r3, #93	; 0x5d
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b03      	cmp	r3, #3
 8004e8c:	d123      	bne.n	8004ed6 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004e8e:	6879      	ldr	r1, [r7, #4]
 8004e90:	68fa      	ldr	r2, [r7, #12]
 8004e92:	4613      	mov	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	00db      	lsls	r3, r3, #3
 8004e9a:	440b      	add	r3, r1
 8004e9c:	335c      	adds	r3, #92	; 0x5c
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eb8:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ec0:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ece:	461a      	mov	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	e027      	b.n	8004f26 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004ed6:	6879      	ldr	r1, [r7, #4]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	440b      	add	r3, r1
 8004ee4:	335d      	adds	r3, #93	; 0x5d
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b07      	cmp	r3, #7
 8004eea:	d11c      	bne.n	8004f26 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8004eec:	6879      	ldr	r1, [r7, #4]
 8004eee:	68fa      	ldr	r2, [r7, #12]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	440b      	add	r3, r1
 8004efa:	3358      	adds	r3, #88	; 0x58
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1c59      	adds	r1, r3, #1
 8004f00:	6878      	ldr	r0, [r7, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4403      	add	r3, r0
 8004f0e:	3358      	adds	r3, #88	; 0x58
 8004f10:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	68fa      	ldr	r2, [r7, #12]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	00db      	lsls	r3, r3, #3
 8004f1e:	440b      	add	r3, r1
 8004f20:	335c      	adds	r3, #92	; 0x5c
 8004f22:	2204      	movs	r2, #4
 8004f24:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	015a      	lsls	r2, r3, #5
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f32:	461a      	mov	r2, r3
 8004f34:	2302      	movs	r3, #2
 8004f36:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	b2d8      	uxtb	r0, r3
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	4613      	mov	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	00db      	lsls	r3, r3, #3
 8004f48:	440b      	add	r3, r1
 8004f4a:	335c      	adds	r3, #92	; 0x5c
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4601      	mov	r1, r0
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f007 fbc4 	bl	800c6e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004f58:	e0d1      	b.n	80050fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	015a      	lsls	r2, r3, #5
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	4413      	add	r3, r2
 8004f62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	2b80      	cmp	r3, #128	; 0x80
 8004f6e:	d13e      	bne.n	8004fee <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	0151      	lsls	r1, r2, #5
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	440a      	add	r2, r1
 8004f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f8a:	f043 0302 	orr.w	r3, r3, #2
 8004f8e:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8004f90:	6879      	ldr	r1, [r7, #4]
 8004f92:	68fa      	ldr	r2, [r7, #12]
 8004f94:	4613      	mov	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	4413      	add	r3, r2
 8004f9a:	00db      	lsls	r3, r3, #3
 8004f9c:	440b      	add	r3, r1
 8004f9e:	3358      	adds	r3, #88	; 0x58
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	1c59      	adds	r1, r3, #1
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	00db      	lsls	r3, r3, #3
 8004fb0:	4403      	add	r3, r0
 8004fb2:	3358      	adds	r3, #88	; 0x58
 8004fb4:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	440b      	add	r3, r1
 8004fc4:	335d      	adds	r3, #93	; 0x5d
 8004fc6:	2206      	movs	r2, #6
 8004fc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68fa      	ldr	r2, [r7, #12]
 8004fd0:	b2d2      	uxtb	r2, r2
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f005 f9e4 	bl	800a3a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	2380      	movs	r3, #128	; 0x80
 8004fea:	6093      	str	r3, [r2, #8]
}
 8004fec:	e087      	b.n	80050fe <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b10      	cmp	r3, #16
 8005002:	d17c      	bne.n	80050fe <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	440b      	add	r3, r1
 8005012:	333f      	adds	r3, #63	; 0x3f
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d122      	bne.n	8005060 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	440b      	add	r3, r1
 8005028:	3358      	adds	r3, #88	; 0x58
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	015a      	lsls	r2, r3, #5
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	4413      	add	r3, r2
 8005036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	0151      	lsls	r1, r2, #5
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	440a      	add	r2, r1
 8005044:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005048:	f043 0302 	orr.w	r3, r3, #2
 800504c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	4611      	mov	r1, r2
 8005058:	4618      	mov	r0, r3
 800505a:	f005 f9a2 	bl	800a3a2 <USB_HC_Halt>
 800505e:	e045      	b.n	80050ec <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005060:	6879      	ldr	r1, [r7, #4]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	00db      	lsls	r3, r3, #3
 800506c:	440b      	add	r3, r1
 800506e:	333f      	adds	r3, #63	; 0x3f
 8005070:	781b      	ldrb	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d00a      	beq.n	800508c <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005076:	6879      	ldr	r1, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	440b      	add	r3, r1
 8005084:	333f      	adds	r3, #63	; 0x3f
 8005086:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005088:	2b02      	cmp	r3, #2
 800508a:	d12f      	bne.n	80050ec <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	440b      	add	r3, r1
 800509a:	3358      	adds	r3, #88	; 0x58
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d121      	bne.n	80050ec <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4613      	mov	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	440b      	add	r3, r1
 80050b6:	335d      	adds	r3, #93	; 0x5d
 80050b8:	2203      	movs	r2, #3
 80050ba:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	0151      	lsls	r1, r2, #5
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	440a      	add	r2, r1
 80050d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80050d6:	f043 0302 	orr.w	r3, r3, #2
 80050da:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	4611      	mov	r1, r2
 80050e6:	4618      	mov	r0, r3
 80050e8:	f005 f95b 	bl	800a3a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	015a      	lsls	r2, r3, #5
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4413      	add	r3, r2
 80050f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050f8:	461a      	mov	r2, r3
 80050fa:	2310      	movs	r3, #16
 80050fc:	6093      	str	r3, [r2, #8]
}
 80050fe:	bf00      	nop
 8005100:	3718      	adds	r7, #24
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b086      	sub	sp, #24
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
 800510e:	460b      	mov	r3, r1
 8005110:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	015a      	lsls	r2, r3, #5
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	4413      	add	r3, r2
 8005128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d119      	bne.n	800516a <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	015a      	lsls	r2, r3, #5
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	4413      	add	r3, r2
 800513e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005142:	461a      	mov	r2, r3
 8005144:	2304      	movs	r3, #4
 8005146:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	4413      	add	r3, r2
 8005150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	440a      	add	r2, r1
 800515e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005162:	f043 0302 	orr.w	r3, r3, #2
 8005166:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8005168:	e33e      	b.n	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	015a      	lsls	r2, r3, #5
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	4413      	add	r3, r2
 8005172:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 0320 	and.w	r3, r3, #32
 800517c:	2b20      	cmp	r3, #32
 800517e:	d141      	bne.n	8005204 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	015a      	lsls	r2, r3, #5
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4413      	add	r3, r2
 8005188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800518c:	461a      	mov	r2, r3
 800518e:	2320      	movs	r3, #32
 8005190:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8005192:	6879      	ldr	r1, [r7, #4]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	440b      	add	r3, r1
 80051a0:	333d      	adds	r3, #61	; 0x3d
 80051a2:	781b      	ldrb	r3, [r3, #0]
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	f040 831f 	bne.w	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	00db      	lsls	r3, r3, #3
 80051b6:	440b      	add	r3, r1
 80051b8:	333d      	adds	r3, #61	; 0x3d
 80051ba:	2200      	movs	r2, #0
 80051bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	440b      	add	r3, r1
 80051cc:	335c      	adds	r3, #92	; 0x5c
 80051ce:	2202      	movs	r2, #2
 80051d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051ec:	f043 0302 	orr.w	r3, r3, #2
 80051f0:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	b2d2      	uxtb	r2, r2
 80051fa:	4611      	mov	r1, r2
 80051fc:	4618      	mov	r0, r3
 80051fe:	f005 f8d0 	bl	800a3a2 <USB_HC_Halt>
}
 8005202:	e2f1      	b.n	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	4413      	add	r3, r2
 800520c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005216:	2b40      	cmp	r3, #64	; 0x40
 8005218:	d13f      	bne.n	800529a <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800521a:	6879      	ldr	r1, [r7, #4]
 800521c:	68fa      	ldr	r2, [r7, #12]
 800521e:	4613      	mov	r3, r2
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	440b      	add	r3, r1
 8005228:	335d      	adds	r3, #93	; 0x5d
 800522a:	2204      	movs	r2, #4
 800522c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	440b      	add	r3, r1
 800523c:	333d      	adds	r3, #61	; 0x3d
 800523e:	2201      	movs	r2, #1
 8005240:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	4613      	mov	r3, r2
 8005248:	009b      	lsls	r3, r3, #2
 800524a:	4413      	add	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	440b      	add	r3, r1
 8005250:	3358      	adds	r3, #88	; 0x58
 8005252:	2200      	movs	r2, #0
 8005254:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	4413      	add	r3, r2
 800525e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	68fa      	ldr	r2, [r7, #12]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	440a      	add	r2, r1
 800526c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005270:	f043 0302 	orr.w	r3, r3, #2
 8005274:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	4611      	mov	r1, r2
 8005280:	4618      	mov	r0, r3
 8005282:	f005 f88e 	bl	800a3a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005292:	461a      	mov	r2, r3
 8005294:	2340      	movs	r3, #64	; 0x40
 8005296:	6093      	str	r3, [r2, #8]
}
 8005298:	e2a6      	b.n	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052b0:	d122      	bne.n	80052f8 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	0151      	lsls	r1, r2, #5
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	440a      	add	r2, r1
 80052c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052cc:	f043 0302 	orr.w	r3, r3, #2
 80052d0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f005 f860 	bl	800a3a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	015a      	lsls	r2, r3, #5
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	4413      	add	r3, r2
 80052ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052ee:	461a      	mov	r2, r3
 80052f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052f4:	6093      	str	r3, [r2, #8]
}
 80052f6:	e277      	b.n	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b01      	cmp	r3, #1
 800530c:	d135      	bne.n	800537a <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	4613      	mov	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	4413      	add	r3, r2
 8005318:	00db      	lsls	r3, r3, #3
 800531a:	440b      	add	r3, r1
 800531c:	3358      	adds	r3, #88	; 0x58
 800531e:	2200      	movs	r2, #0
 8005320:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	015a      	lsls	r2, r3, #5
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	4413      	add	r3, r2
 800532a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	68fa      	ldr	r2, [r7, #12]
 8005332:	0151      	lsls	r1, r2, #5
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	440a      	add	r2, r1
 8005338:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800533c:	f043 0302 	orr.w	r3, r3, #2
 8005340:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	68fa      	ldr	r2, [r7, #12]
 8005348:	b2d2      	uxtb	r2, r2
 800534a:	4611      	mov	r1, r2
 800534c:	4618      	mov	r0, r3
 800534e:	f005 f828 	bl	800a3a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535e:	461a      	mov	r2, r3
 8005360:	2301      	movs	r3, #1
 8005362:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	4613      	mov	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	4413      	add	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	440b      	add	r3, r1
 8005372:	335d      	adds	r3, #93	; 0x5d
 8005374:	2201      	movs	r2, #1
 8005376:	701a      	strb	r2, [r3, #0]
}
 8005378:	e236      	b.n	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	4413      	add	r3, r2
 8005382:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f003 0308 	and.w	r3, r3, #8
 800538c:	2b08      	cmp	r3, #8
 800538e:	d12b      	bne.n	80053e8 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4413      	add	r3, r2
 8005398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800539c:	461a      	mov	r2, r3
 800539e:	2308      	movs	r3, #8
 80053a0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	015a      	lsls	r2, r3, #5
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	4413      	add	r3, r2
 80053aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	0151      	lsls	r1, r2, #5
 80053b4:	693a      	ldr	r2, [r7, #16]
 80053b6:	440a      	add	r2, r1
 80053b8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053bc:	f043 0302 	orr.w	r3, r3, #2
 80053c0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68fa      	ldr	r2, [r7, #12]
 80053c8:	b2d2      	uxtb	r2, r2
 80053ca:	4611      	mov	r1, r2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f004 ffe8 	bl	800a3a2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	440b      	add	r3, r1
 80053e0:	335d      	adds	r3, #93	; 0x5d
 80053e2:	2205      	movs	r2, #5
 80053e4:	701a      	strb	r2, [r3, #0]
}
 80053e6:	e1ff      	b.n	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	015a      	lsls	r2, r3, #5
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	4413      	add	r3, r2
 80053f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b10      	cmp	r3, #16
 80053fc:	d155      	bne.n	80054aa <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	68fa      	ldr	r2, [r7, #12]
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	00db      	lsls	r3, r3, #3
 800540a:	440b      	add	r3, r1
 800540c:	3358      	adds	r3, #88	; 0x58
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	00db      	lsls	r3, r3, #3
 800541e:	440b      	add	r3, r1
 8005420:	335d      	adds	r3, #93	; 0x5d
 8005422:	2203      	movs	r2, #3
 8005424:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8005426:	6879      	ldr	r1, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4613      	mov	r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	4413      	add	r3, r2
 8005430:	00db      	lsls	r3, r3, #3
 8005432:	440b      	add	r3, r1
 8005434:	333d      	adds	r3, #61	; 0x3d
 8005436:	781b      	ldrb	r3, [r3, #0]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d114      	bne.n	8005466 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	68fa      	ldr	r2, [r7, #12]
 8005440:	4613      	mov	r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	440b      	add	r3, r1
 800544a:	333c      	adds	r3, #60	; 0x3c
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d109      	bne.n	8005466 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005452:	6879      	ldr	r1, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	00db      	lsls	r3, r3, #3
 800545e:	440b      	add	r3, r1
 8005460:	333d      	adds	r3, #61	; 0x3d
 8005462:	2201      	movs	r2, #1
 8005464:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4413      	add	r3, r2
 800546e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	68fa      	ldr	r2, [r7, #12]
 8005476:	0151      	lsls	r1, r2, #5
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	440a      	add	r2, r1
 800547c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005480:	f043 0302 	orr.w	r3, r3, #2
 8005484:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	b2d2      	uxtb	r2, r2
 800548e:	4611      	mov	r1, r2
 8005490:	4618      	mov	r0, r3
 8005492:	f004 ff86 	bl	800a3a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	015a      	lsls	r2, r3, #5
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	4413      	add	r3, r2
 800549e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a2:	461a      	mov	r2, r3
 80054a4:	2310      	movs	r3, #16
 80054a6:	6093      	str	r3, [r2, #8]
}
 80054a8:	e19e      	b.n	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b6:	689b      	ldr	r3, [r3, #8]
 80054b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054bc:	2b80      	cmp	r3, #128	; 0x80
 80054be:	d12b      	bne.n	8005518 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054da:	f043 0302 	orr.w	r3, r3, #2
 80054de:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	b2d2      	uxtb	r2, r2
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f004 ff59 	bl	800a3a2 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	4613      	mov	r3, r2
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	4413      	add	r3, r2
 80054fa:	00db      	lsls	r3, r3, #3
 80054fc:	440b      	add	r3, r1
 80054fe:	335d      	adds	r3, #93	; 0x5d
 8005500:	2206      	movs	r2, #6
 8005502:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4413      	add	r3, r2
 800550c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005510:	461a      	mov	r2, r3
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	6093      	str	r3, [r2, #8]
}
 8005516:	e167      	b.n	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800552a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800552e:	d135      	bne.n	800559c <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	015a      	lsls	r2, r3, #5
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	4413      	add	r3, r2
 8005538:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	0151      	lsls	r1, r2, #5
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	440a      	add	r2, r1
 8005546:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800554a:	f043 0302 	orr.w	r3, r3, #2
 800554e:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	b2d2      	uxtb	r2, r2
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f004 ff21 	bl	800a3a2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	015a      	lsls	r2, r3, #5
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4413      	add	r3, r2
 8005568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556c:	461a      	mov	r2, r3
 800556e:	2310      	movs	r3, #16
 8005570:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	015a      	lsls	r2, r3, #5
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	4413      	add	r3, r2
 800557a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557e:	461a      	mov	r2, r3
 8005580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005584:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	440b      	add	r3, r1
 8005594:	335d      	adds	r3, #93	; 0x5d
 8005596:	2208      	movs	r2, #8
 8005598:	701a      	strb	r2, [r3, #0]
}
 800559a:	e125      	b.n	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	015a      	lsls	r2, r3, #5
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	4413      	add	r3, r2
 80055a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f003 0302 	and.w	r3, r3, #2
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	f040 811a 	bne.w	80057e8 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c0:	68db      	ldr	r3, [r3, #12]
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	0151      	lsls	r1, r2, #5
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	440a      	add	r2, r1
 80055ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055ce:	f023 0302 	bic.w	r3, r3, #2
 80055d2:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80055d4:	6879      	ldr	r1, [r7, #4]
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	440b      	add	r3, r1
 80055e2:	335d      	adds	r3, #93	; 0x5d
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d137      	bne.n	800565a <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80055ea:	6879      	ldr	r1, [r7, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4613      	mov	r3, r2
 80055f0:	009b      	lsls	r3, r3, #2
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	440b      	add	r3, r1
 80055f8:	335c      	adds	r3, #92	; 0x5c
 80055fa:	2201      	movs	r2, #1
 80055fc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4613      	mov	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	440b      	add	r3, r1
 800560c:	333f      	adds	r3, #63	; 0x3f
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d00b      	beq.n	800562c <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005614:	6879      	ldr	r1, [r7, #4]
 8005616:	68fa      	ldr	r2, [r7, #12]
 8005618:	4613      	mov	r3, r2
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	440b      	add	r3, r1
 8005622:	333f      	adds	r3, #63	; 0x3f
 8005624:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005626:	2b03      	cmp	r3, #3
 8005628:	f040 80c5 	bne.w	80057b6 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 800562c:	6879      	ldr	r1, [r7, #4]
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	440b      	add	r3, r1
 800563a:	3351      	adds	r3, #81	; 0x51
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	f083 0301 	eor.w	r3, r3, #1
 8005642:	b2d8      	uxtb	r0, r3
 8005644:	6879      	ldr	r1, [r7, #4]
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	440b      	add	r3, r1
 8005652:	3351      	adds	r3, #81	; 0x51
 8005654:	4602      	mov	r2, r0
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e0ad      	b.n	80057b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	68fa      	ldr	r2, [r7, #12]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	440b      	add	r3, r1
 8005668:	335d      	adds	r3, #93	; 0x5d
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d10a      	bne.n	8005686 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	440b      	add	r3, r1
 800567e:	335c      	adds	r3, #92	; 0x5c
 8005680:	2202      	movs	r2, #2
 8005682:	701a      	strb	r2, [r3, #0]
 8005684:	e097      	b.n	80057b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005686:	6879      	ldr	r1, [r7, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	335d      	adds	r3, #93	; 0x5d
 8005696:	781b      	ldrb	r3, [r3, #0]
 8005698:	2b04      	cmp	r3, #4
 800569a:	d10a      	bne.n	80056b2 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800569c:	6879      	ldr	r1, [r7, #4]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	440b      	add	r3, r1
 80056aa:	335c      	adds	r3, #92	; 0x5c
 80056ac:	2202      	movs	r2, #2
 80056ae:	701a      	strb	r2, [r3, #0]
 80056b0:	e081      	b.n	80057b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80056b2:	6879      	ldr	r1, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	4613      	mov	r3, r2
 80056b8:	009b      	lsls	r3, r3, #2
 80056ba:	4413      	add	r3, r2
 80056bc:	00db      	lsls	r3, r3, #3
 80056be:	440b      	add	r3, r1
 80056c0:	335d      	adds	r3, #93	; 0x5d
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	2b05      	cmp	r3, #5
 80056c6:	d10a      	bne.n	80056de <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	440b      	add	r3, r1
 80056d6:	335c      	adds	r3, #92	; 0x5c
 80056d8:	2205      	movs	r2, #5
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	e06b      	b.n	80057b6 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	440b      	add	r3, r1
 80056ec:	335d      	adds	r3, #93	; 0x5d
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	2b06      	cmp	r3, #6
 80056f2:	d00a      	beq.n	800570a <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	440b      	add	r3, r1
 8005702:	335d      	adds	r3, #93	; 0x5d
 8005704:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8005706:	2b08      	cmp	r3, #8
 8005708:	d155      	bne.n	80057b6 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4613      	mov	r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	4413      	add	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	440b      	add	r3, r1
 8005718:	3358      	adds	r3, #88	; 0x58
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	1c59      	adds	r1, r3, #1
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	4613      	mov	r3, r2
 8005724:	009b      	lsls	r3, r3, #2
 8005726:	4413      	add	r3, r2
 8005728:	00db      	lsls	r3, r3, #3
 800572a:	4403      	add	r3, r0
 800572c:	3358      	adds	r3, #88	; 0x58
 800572e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4613      	mov	r3, r2
 8005736:	009b      	lsls	r3, r3, #2
 8005738:	4413      	add	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	440b      	add	r3, r1
 800573e:	3358      	adds	r3, #88	; 0x58
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b03      	cmp	r3, #3
 8005744:	d914      	bls.n	8005770 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005746:	6879      	ldr	r1, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	4613      	mov	r3, r2
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	4413      	add	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	440b      	add	r3, r1
 8005754:	3358      	adds	r3, #88	; 0x58
 8005756:	2200      	movs	r2, #0
 8005758:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800575a:	6879      	ldr	r1, [r7, #4]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	00db      	lsls	r3, r3, #3
 8005766:	440b      	add	r3, r1
 8005768:	335c      	adds	r3, #92	; 0x5c
 800576a:	2204      	movs	r2, #4
 800576c:	701a      	strb	r2, [r3, #0]
 800576e:	e009      	b.n	8005784 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4613      	mov	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	00db      	lsls	r3, r3, #3
 800577c:	440b      	add	r3, r1
 800577e:	335c      	adds	r3, #92	; 0x5c
 8005780:	2202      	movs	r2, #2
 8005782:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800579a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	015a      	lsls	r2, r3, #5
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b0:	461a      	mov	r2, r3
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c2:	461a      	mov	r2, r3
 80057c4:	2302      	movs	r3, #2
 80057c6:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	b2d8      	uxtb	r0, r3
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	440b      	add	r3, r1
 80057da:	335c      	adds	r3, #92	; 0x5c
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	4601      	mov	r1, r0
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f006 ff7c 	bl	800c6e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80057e8:	bf00      	nop
 80057ea:	3718      	adds	r7, #24
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08a      	sub	sp, #40	; 0x28
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005800:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	f003 030f 	and.w	r3, r3, #15
 8005810:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	0c5b      	lsrs	r3, r3, #17
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	091b      	lsrs	r3, r3, #4
 8005820:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005824:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d004      	beq.n	8005836 <HCD_RXQLVL_IRQHandler+0x46>
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	2b05      	cmp	r3, #5
 8005830:	f000 8082 	beq.w	8005938 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005834:	e083      	b.n	800593e <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d07f      	beq.n	800593c <HCD_RXQLVL_IRQHandler+0x14c>
 800583c:	6879      	ldr	r1, [r7, #4]
 800583e:	69ba      	ldr	r2, [r7, #24]
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	00db      	lsls	r3, r3, #3
 8005848:	440b      	add	r3, r1
 800584a:	3344      	adds	r3, #68	; 0x44
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d074      	beq.n	800593c <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	69ba      	ldr	r2, [r7, #24]
 800585a:	4613      	mov	r3, r2
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	440b      	add	r3, r1
 8005864:	3344      	adds	r3, #68	; 0x44
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	b292      	uxth	r2, r2
 800586c:	4619      	mov	r1, r3
 800586e:	f004 f93e 	bl	8009aee <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	69ba      	ldr	r2, [r7, #24]
 8005876:	4613      	mov	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4413      	add	r3, r2
 800587c:	00db      	lsls	r3, r3, #3
 800587e:	440b      	add	r3, r1
 8005880:	3344      	adds	r3, #68	; 0x44
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	18d1      	adds	r1, r2, r3
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	69ba      	ldr	r2, [r7, #24]
 800588c:	4613      	mov	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4413      	add	r3, r2
 8005892:	00db      	lsls	r3, r3, #3
 8005894:	4403      	add	r3, r0
 8005896:	3344      	adds	r3, #68	; 0x44
 8005898:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	69ba      	ldr	r2, [r7, #24]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	440b      	add	r3, r1
 80058a8:	334c      	adds	r3, #76	; 0x4c
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	18d1      	adds	r1, r2, r3
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	69ba      	ldr	r2, [r7, #24]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	4403      	add	r3, r0
 80058be:	334c      	adds	r3, #76	; 0x4c
 80058c0:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <HCD_RXQLVL_IRQHandler+0x158>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d031      	beq.n	800593c <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	015a      	lsls	r2, r3, #5
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	4413      	add	r3, r2
 80058e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ee:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058f6:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005904:	461a      	mov	r2, r3
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800590a:	6879      	ldr	r1, [r7, #4]
 800590c:	69ba      	ldr	r2, [r7, #24]
 800590e:	4613      	mov	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	4413      	add	r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	440b      	add	r3, r1
 8005918:	3350      	adds	r3, #80	; 0x50
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f083 0301 	eor.w	r3, r3, #1
 8005920:	b2d8      	uxtb	r0, r3
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	69ba      	ldr	r2, [r7, #24]
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	440b      	add	r3, r1
 8005930:	3350      	adds	r3, #80	; 0x50
 8005932:	4602      	mov	r2, r0
 8005934:	701a      	strb	r2, [r3, #0]
      break;
 8005936:	e001      	b.n	800593c <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005938:	bf00      	nop
 800593a:	e000      	b.n	800593e <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 800593c:	bf00      	nop
  }
}
 800593e:	bf00      	nop
 8005940:	3728      	adds	r7, #40	; 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	1ff80000 	.word	0x1ff80000

0800594c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005978:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b02      	cmp	r3, #2
 8005982:	d10b      	bne.n	800599c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d102      	bne.n	8005994 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f006 fe8a 	bl	800c6a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	f043 0302 	orr.w	r3, r3, #2
 800599a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 0308 	and.w	r3, r3, #8
 80059a2:	2b08      	cmp	r3, #8
 80059a4:	d132      	bne.n	8005a0c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f043 0308 	orr.w	r3, r3, #8
 80059ac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b04      	cmp	r3, #4
 80059b6:	d126      	bne.n	8005a06 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d113      	bne.n	80059e8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80059c6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80059ca:	d106      	bne.n	80059da <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2102      	movs	r1, #2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f004 f9c0 	bl	8009d58 <USB_InitFSLSPClkSel>
 80059d8:	e011      	b.n	80059fe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2101      	movs	r1, #1
 80059e0:	4618      	mov	r0, r3
 80059e2:	f004 f9b9 	bl	8009d58 <USB_InitFSLSPClkSel>
 80059e6:	e00a      	b.n	80059fe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d106      	bne.n	80059fe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f6:	461a      	mov	r2, r3
 80059f8:	f64e 2360 	movw	r3, #60000	; 0xea60
 80059fc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f006 fe7c 	bl	800c6fc <HAL_HCD_PortEnabled_Callback>
 8005a04:	e002      	b.n	8005a0c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f006 fe86 	bl	800c718 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	2b20      	cmp	r3, #32
 8005a14:	d103      	bne.n	8005a1e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	f043 0320 	orr.w	r3, r3, #32
 8005a1c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005a24:	461a      	mov	r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	6013      	str	r3, [r2, #0]
}
 8005a2a:	bf00      	nop
 8005a2c:	3718      	adds	r7, #24
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
	...

08005a34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b084      	sub	sp, #16
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e12b      	b.n	8005c9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fb fda4 	bl	80015a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2224      	movs	r2, #36	; 0x24
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a86:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005a96:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005a98:	f001 f82e 	bl	8006af8 <HAL_RCC_GetPCLK1Freq>
 8005a9c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	4a81      	ldr	r2, [pc, #516]	; (8005ca8 <HAL_I2C_Init+0x274>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d807      	bhi.n	8005ab8 <HAL_I2C_Init+0x84>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4a80      	ldr	r2, [pc, #512]	; (8005cac <HAL_I2C_Init+0x278>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	bf94      	ite	ls
 8005ab0:	2301      	movls	r3, #1
 8005ab2:	2300      	movhi	r3, #0
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	e006      	b.n	8005ac6 <HAL_I2C_Init+0x92>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a7d      	ldr	r2, [pc, #500]	; (8005cb0 <HAL_I2C_Init+0x27c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	bf94      	ite	ls
 8005ac0:	2301      	movls	r3, #1
 8005ac2:	2300      	movhi	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e0e7      	b.n	8005c9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a78      	ldr	r2, [pc, #480]	; (8005cb4 <HAL_I2C_Init+0x280>)
 8005ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad6:	0c9b      	lsrs	r3, r3, #18
 8005ad8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	4a6a      	ldr	r2, [pc, #424]	; (8005ca8 <HAL_I2C_Init+0x274>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d802      	bhi.n	8005b08 <HAL_I2C_Init+0xd4>
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	3301      	adds	r3, #1
 8005b06:	e009      	b.n	8005b1c <HAL_I2C_Init+0xe8>
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005b0e:	fb02 f303 	mul.w	r3, r2, r3
 8005b12:	4a69      	ldr	r2, [pc, #420]	; (8005cb8 <HAL_I2C_Init+0x284>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	099b      	lsrs	r3, r3, #6
 8005b1a:	3301      	adds	r3, #1
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6812      	ldr	r2, [r2, #0]
 8005b20:	430b      	orrs	r3, r1
 8005b22:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	69db      	ldr	r3, [r3, #28]
 8005b2a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005b2e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	495c      	ldr	r1, [pc, #368]	; (8005ca8 <HAL_I2C_Init+0x274>)
 8005b38:	428b      	cmp	r3, r1
 8005b3a:	d819      	bhi.n	8005b70 <HAL_I2C_Init+0x13c>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	1e59      	subs	r1, r3, #1
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	005b      	lsls	r3, r3, #1
 8005b46:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b4a:	1c59      	adds	r1, r3, #1
 8005b4c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b50:	400b      	ands	r3, r1
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_I2C_Init+0x138>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	1e59      	subs	r1, r3, #1
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b64:	3301      	adds	r3, #1
 8005b66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b6a:	e051      	b.n	8005c10 <HAL_I2C_Init+0x1dc>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	e04f      	b.n	8005c10 <HAL_I2C_Init+0x1dc>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d111      	bne.n	8005b9c <HAL_I2C_Init+0x168>
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	1e58      	subs	r0, r3, #1
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6859      	ldr	r1, [r3, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	440b      	add	r3, r1
 8005b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b8a:	3301      	adds	r3, #1
 8005b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	bf0c      	ite	eq
 8005b94:	2301      	moveq	r3, #1
 8005b96:	2300      	movne	r3, #0
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	e012      	b.n	8005bc2 <HAL_I2C_Init+0x18e>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	1e58      	subs	r0, r3, #1
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6859      	ldr	r1, [r3, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	440b      	add	r3, r1
 8005baa:	0099      	lsls	r1, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bb2:	3301      	adds	r3, #1
 8005bb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bf0c      	ite	eq
 8005bbc:	2301      	moveq	r3, #1
 8005bbe:	2300      	movne	r3, #0
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <HAL_I2C_Init+0x196>
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e022      	b.n	8005c10 <HAL_I2C_Init+0x1dc>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_I2C_Init+0x1bc>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	1e58      	subs	r0, r3, #1
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6859      	ldr	r1, [r3, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	440b      	add	r3, r1
 8005be0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005be4:	3301      	adds	r3, #1
 8005be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bee:	e00f      	b.n	8005c10 <HAL_I2C_Init+0x1dc>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1e58      	subs	r0, r3, #1
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	009b      	lsls	r3, r3, #2
 8005bfc:	440b      	add	r3, r1
 8005bfe:	0099      	lsls	r1, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c06:	3301      	adds	r3, #1
 8005c08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005c10:	6879      	ldr	r1, [r7, #4]
 8005c12:	6809      	ldr	r1, [r1, #0]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	69da      	ldr	r2, [r3, #28]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005c3e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6911      	ldr	r1, [r2, #16]
 8005c46:	687a      	ldr	r2, [r7, #4]
 8005c48:	68d2      	ldr	r2, [r2, #12]
 8005c4a:	4311      	orrs	r1, r2
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	6812      	ldr	r2, [r2, #0]
 8005c50:	430b      	orrs	r3, r1
 8005c52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68db      	ldr	r3, [r3, #12]
 8005c5a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	431a      	orrs	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0201 	orr.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}
 8005ca6:	bf00      	nop
 8005ca8:	000186a0 	.word	0x000186a0
 8005cac:	001e847f 	.word	0x001e847f
 8005cb0:	003d08ff 	.word	0x003d08ff
 8005cb4:	431bde83 	.word	0x431bde83
 8005cb8:	10624dd3 	.word	0x10624dd3

08005cbc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b088      	sub	sp, #32
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e154      	b.n	8005f78 <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a98      	ldr	r2, [pc, #608]	; (8005f48 <HAL_I2S_Init+0x28c>)
 8005ce6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f7fb fca5 	bl	8001638 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	69db      	ldr	r3, [r3, #28]
 8005cfc:	687a      	ldr	r2, [r7, #4]
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005d04:	f023 030f 	bic.w	r3, r3, #15
 8005d08:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	2b02      	cmp	r3, #2
 8005d18:	d06f      	beq.n	8005dfa <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005d22:	2310      	movs	r3, #16
 8005d24:	617b      	str	r3, [r7, #20]
 8005d26:	e001      	b.n	8005d2c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005d28:	2320      	movs	r3, #32
 8005d2a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	2b20      	cmp	r3, #32
 8005d32:	d802      	bhi.n	8005d3a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a83      	ldr	r2, [pc, #524]	; (8005f4c <HAL_I2S_Init+0x290>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d004      	beq.n	8005d4e <HAL_I2S_Init+0x92>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a81      	ldr	r2, [pc, #516]	; (8005f50 <HAL_I2S_Init+0x294>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d104      	bne.n	8005d58 <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8005d4e:	2001      	movs	r0, #1
 8005d50:	f001 f986 	bl	8007060 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d54:	60f8      	str	r0, [r7, #12]
 8005d56:	e003      	b.n	8005d60 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005d58:	2002      	movs	r0, #2
 8005d5a:	f001 f981 	bl	8007060 <HAL_RCCEx_GetPeriphCLKFreq>
 8005d5e:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d68:	d125      	bne.n	8005db6 <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	009b      	lsls	r3, r3, #2
 8005d80:	4413      	add	r3, r2
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	461a      	mov	r2, r3
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d8e:	3305      	adds	r3, #5
 8005d90:	613b      	str	r3, [r7, #16]
 8005d92:	e01f      	b.n	8005dd4 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	00db      	lsls	r3, r3, #3
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8005d9e:	4613      	mov	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	4413      	add	r3, r2
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	461a      	mov	r2, r3
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db0:	3305      	adds	r3, #5
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	e00e      	b.n	8005dd4 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	fbb2 f2f3 	udiv	r2, r2, r3
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dd0:	3305      	adds	r3, #5
 8005dd2:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005dd4:	693b      	ldr	r3, [r7, #16]
 8005dd6:	4a5f      	ldr	r2, [pc, #380]	; (8005f54 <HAL_I2S_Init+0x298>)
 8005dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ddc:	08db      	lsrs	r3, r3, #3
 8005dde:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f003 0301 	and.w	r3, r3, #1
 8005de6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005de8:	693a      	ldr	r2, [r7, #16]
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	1ad3      	subs	r3, r2, r3
 8005dee:	085b      	lsrs	r3, r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	e003      	b.n	8005e02 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005dfa:	2302      	movs	r3, #2
 8005dfc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d902      	bls.n	8005e0e <HAL_I2S_Init+0x152>
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	2bff      	cmp	r3, #255	; 0xff
 8005e0c:	d907      	bls.n	8005e1e <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f043 0210 	orr.w	r2, r3, #16
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e0ac      	b.n	8005f78 <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691a      	ldr	r2, [r3, #16]
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	ea42 0103 	orr.w	r1, r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	69fa      	ldr	r2, [r7, #28]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005e3c:	f023 030f 	bic.w	r3, r3, #15
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	6851      	ldr	r1, [r2, #4]
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6892      	ldr	r2, [r2, #8]
 8005e48:	4311      	orrs	r1, r2
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	68d2      	ldr	r2, [r2, #12]
 8005e4e:	4311      	orrs	r1, r2
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6992      	ldr	r2, [r2, #24]
 8005e54:	430a      	orrs	r2, r1
 8005e56:	431a      	orrs	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e60:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	2b30      	cmp	r3, #48	; 0x30
 8005e68:	d003      	beq.n	8005e72 <HAL_I2S_Init+0x1b6>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	2bb0      	cmp	r3, #176	; 0xb0
 8005e70:	d107      	bne.n	8005e82 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	69da      	ldr	r2, [r3, #28]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e80:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d16e      	bne.n	8005f68 <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a32      	ldr	r2, [pc, #200]	; (8005f58 <HAL_I2S_Init+0x29c>)
 8005e8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a2d      	ldr	r2, [pc, #180]	; (8005f4c <HAL_I2S_Init+0x290>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d101      	bne.n	8005e9e <HAL_I2S_Init+0x1e2>
 8005e9a:	4b30      	ldr	r3, [pc, #192]	; (8005f5c <HAL_I2S_Init+0x2a0>)
 8005e9c:	e001      	b.n	8005ea2 <HAL_I2S_Init+0x1e6>
 8005e9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ea2:	69db      	ldr	r3, [r3, #28]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	6812      	ldr	r2, [r2, #0]
 8005ea8:	4928      	ldr	r1, [pc, #160]	; (8005f4c <HAL_I2S_Init+0x290>)
 8005eaa:	428a      	cmp	r2, r1
 8005eac:	d101      	bne.n	8005eb2 <HAL_I2S_Init+0x1f6>
 8005eae:	4a2b      	ldr	r2, [pc, #172]	; (8005f5c <HAL_I2S_Init+0x2a0>)
 8005eb0:	e001      	b.n	8005eb6 <HAL_I2S_Init+0x1fa>
 8005eb2:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005eb6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005eba:	f023 030f 	bic.w	r3, r3, #15
 8005ebe:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a21      	ldr	r2, [pc, #132]	; (8005f4c <HAL_I2S_Init+0x290>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d101      	bne.n	8005ece <HAL_I2S_Init+0x212>
 8005eca:	4b24      	ldr	r3, [pc, #144]	; (8005f5c <HAL_I2S_Init+0x2a0>)
 8005ecc:	e001      	b.n	8005ed2 <HAL_I2S_Init+0x216>
 8005ece:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ed2:	2202      	movs	r2, #2
 8005ed4:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <HAL_I2S_Init+0x290>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d101      	bne.n	8005ee4 <HAL_I2S_Init+0x228>
 8005ee0:	4b1e      	ldr	r3, [pc, #120]	; (8005f5c <HAL_I2S_Init+0x2a0>)
 8005ee2:	e001      	b.n	8005ee8 <HAL_I2S_Init+0x22c>
 8005ee4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef4:	d003      	beq.n	8005efe <HAL_I2S_Init+0x242>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d103      	bne.n	8005f06 <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005efe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005f02:	613b      	str	r3, [r7, #16]
 8005f04:	e001      	b.n	8005f0a <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005f06:	2300      	movs	r3, #0
 8005f08:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	b299      	uxth	r1, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005f20:	4303      	orrs	r3, r0
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	430b      	orrs	r3, r1
 8005f26:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	897b      	ldrh	r3, [r7, #10]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005f36:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a03      	ldr	r2, [pc, #12]	; (8005f4c <HAL_I2S_Init+0x290>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d10e      	bne.n	8005f60 <HAL_I2S_Init+0x2a4>
 8005f42:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <HAL_I2S_Init+0x2a0>)
 8005f44:	e00e      	b.n	8005f64 <HAL_I2S_Init+0x2a8>
 8005f46:	bf00      	nop
 8005f48:	0800603b 	.word	0x0800603b
 8005f4c:	40003800 	.word	0x40003800
 8005f50:	40003c00 	.word	0x40003c00
 8005f54:	cccccccd 	.word	0xcccccccd
 8005f58:	08006151 	.word	0x08006151
 8005f5c:	40003400 	.word	0x40003400
 8005f60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f64:	897a      	ldrh	r2, [r7, #10]
 8005f66:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005f76:	2300      	movs	r3, #0
}
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f8c:	881a      	ldrh	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	1c9a      	adds	r2, r3, #2
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10e      	bne.n	8005fd4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	685a      	ldr	r2, [r3, #4]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005fc4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fc fc72 	bl	80028b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005fd4:	bf00      	nop
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}

08005fdc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b082      	sub	sp, #8
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68da      	ldr	r2, [r3, #12]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fee:	b292      	uxth	r2, r2
 8005ff0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff6:	1c9a      	adds	r2, r3, #2
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006000:	b29b      	uxth	r3, r3
 8006002:	3b01      	subs	r3, #1
 8006004:	b29a      	uxth	r2, r3
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800600e:	b29b      	uxth	r3, r3
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10e      	bne.n	8006032 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	685a      	ldr	r2, [r3, #4]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006022:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f7fc fc65 	bl	80028fc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006032:	bf00      	nop
 8006034:	3708      	adds	r7, #8
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b086      	sub	sp, #24
 800603e:	af00      	add	r7, sp, #0
 8006040:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b04      	cmp	r3, #4
 8006054:	d13a      	bne.n	80060cc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b01      	cmp	r3, #1
 800605e:	d109      	bne.n	8006074 <I2S_IRQHandler+0x3a>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d102      	bne.n	8006074 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff ffb4 	bl	8005fdc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607a:	2b40      	cmp	r3, #64	; 0x40
 800607c:	d126      	bne.n	80060cc <I2S_IRQHandler+0x92>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b20      	cmp	r3, #32
 800608a:	d11f      	bne.n	80060cc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	685a      	ldr	r2, [r3, #4]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800609a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800609c:	2300      	movs	r3, #0
 800609e:	613b      	str	r3, [r7, #16]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	613b      	str	r3, [r7, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060be:	f043 0202 	orr.w	r2, r3, #2
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7fc fc00 	bl	80028cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d136      	bne.n	8006146 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d109      	bne.n	80060f6 <I2S_IRQHandler+0xbc>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ec:	2b80      	cmp	r3, #128	; 0x80
 80060ee:	d102      	bne.n	80060f6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f7ff ff45 	bl	8005f80 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f003 0308 	and.w	r3, r3, #8
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d122      	bne.n	8006146 <I2S_IRQHandler+0x10c>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f003 0320 	and.w	r3, r3, #32
 800610a:	2b20      	cmp	r3, #32
 800610c:	d11b      	bne.n	8006146 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	685a      	ldr	r2, [r3, #4]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800611c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800611e:	2300      	movs	r3, #0
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	60fb      	str	r3, [r7, #12]
 800612a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006138:	f043 0204 	orr.w	r2, r3, #4
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f7fc fbc3 	bl	80028cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006146:	bf00      	nop
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b088      	sub	sp, #32
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a92      	ldr	r2, [pc, #584]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d101      	bne.n	800616e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800616a:	4b92      	ldr	r3, [pc, #584]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800616c:	e001      	b.n	8006172 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800616e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a8b      	ldr	r2, [pc, #556]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d101      	bne.n	800618c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006188:	4b8a      	ldr	r3, [pc, #552]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800618a:	e001      	b.n	8006190 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800618c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800619c:	d004      	beq.n	80061a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f040 8099 	bne.w	80062da <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	f003 0302 	and.w	r3, r3, #2
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d107      	bne.n	80061c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d002      	beq.n	80061c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 f925 	bl	800640c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d107      	bne.n	80061dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d002      	beq.n	80061dc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9c8 	bl	800656c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061e2:	2b40      	cmp	r3, #64	; 0x40
 80061e4:	d13a      	bne.n	800625c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d035      	beq.n	800625c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6e      	ldr	r2, [pc, #440]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d101      	bne.n	80061fe <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80061fa:	4b6e      	ldr	r3, [pc, #440]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80061fc:	e001      	b.n	8006202 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80061fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4969      	ldr	r1, [pc, #420]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800620a:	428b      	cmp	r3, r1
 800620c:	d101      	bne.n	8006212 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800620e:	4b69      	ldr	r3, [pc, #420]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006210:	e001      	b.n	8006216 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006212:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006216:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800621a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685a      	ldr	r2, [r3, #4]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800622a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	60fb      	str	r3, [r7, #12]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	689b      	ldr	r3, [r3, #8]
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	f043 0202 	orr.w	r2, r3, #2
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f7fc fb38 	bl	80028cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	f003 0308 	and.w	r3, r3, #8
 8006262:	2b08      	cmp	r3, #8
 8006264:	f040 80c3 	bne.w	80063ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f003 0320 	and.w	r3, r3, #32
 800626e:	2b00      	cmp	r3, #0
 8006270:	f000 80bd 	beq.w	80063ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685a      	ldr	r2, [r3, #4]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006282:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a49      	ldr	r2, [pc, #292]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d101      	bne.n	8006292 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800628e:	4b49      	ldr	r3, [pc, #292]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006290:	e001      	b.n	8006296 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006292:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006296:	685a      	ldr	r2, [r3, #4]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4944      	ldr	r1, [pc, #272]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800629e:	428b      	cmp	r3, r1
 80062a0:	d101      	bne.n	80062a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80062a2:	4b44      	ldr	r3, [pc, #272]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80062a4:	e001      	b.n	80062aa <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80062a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80062aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062ae:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80062b0:	2300      	movs	r3, #0
 80062b2:	60bb      	str	r3, [r7, #8]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	60bb      	str	r3, [r7, #8]
 80062bc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ca:	f043 0204 	orr.w	r2, r3, #4
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fc fafa 	bl	80028cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80062d8:	e089      	b.n	80063ee <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d107      	bne.n	80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f8be 	bl	8006470 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d107      	bne.n	800630e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f8fd 	bl	8006508 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006314:	2b40      	cmp	r3, #64	; 0x40
 8006316:	d12f      	bne.n	8006378 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b00      	cmp	r3, #0
 8006320:	d02a      	beq.n	8006378 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006330:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a1e      	ldr	r2, [pc, #120]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d101      	bne.n	8006340 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800633c:	4b1d      	ldr	r3, [pc, #116]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800633e:	e001      	b.n	8006344 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006340:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006344:	685a      	ldr	r2, [r3, #4]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4919      	ldr	r1, [pc, #100]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800634c:	428b      	cmp	r3, r1
 800634e:	d101      	bne.n	8006354 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006350:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006352:	e001      	b.n	8006358 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800635c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800636a:	f043 0202 	orr.w	r2, r3, #2
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f7fc faaa 	bl	80028cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	f003 0308 	and.w	r3, r3, #8
 800637e:	2b08      	cmp	r3, #8
 8006380:	d136      	bne.n	80063f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f003 0320 	and.w	r3, r3, #32
 8006388:	2b00      	cmp	r3, #0
 800638a:	d031      	beq.n	80063f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a07      	ldr	r2, [pc, #28]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d101      	bne.n	800639a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006396:	4b07      	ldr	r3, [pc, #28]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006398:	e001      	b.n	800639e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800639a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4902      	ldr	r1, [pc, #8]	; (80063b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80063a6:	428b      	cmp	r3, r1
 80063a8:	d106      	bne.n	80063b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80063aa:	4b02      	ldr	r3, [pc, #8]	; (80063b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80063ac:	e006      	b.n	80063bc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80063ae:	bf00      	nop
 80063b0:	40003800 	.word	0x40003800
 80063b4:	40003400 	.word	0x40003400
 80063b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80063c0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	685a      	ldr	r2, [r3, #4]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80063d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063de:	f043 0204 	orr.w	r2, r3, #4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7fc fa70 	bl	80028cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80063ec:	e000      	b.n	80063f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80063ee:	bf00      	nop
}
 80063f0:	bf00      	nop
 80063f2:	3720      	adds	r7, #32
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006418:	1c99      	adds	r1, r3, #2
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	6251      	str	r1, [r2, #36]	; 0x24
 800641e:	881a      	ldrh	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b01      	subs	r3, #1
 800642e:	b29a      	uxth	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006438:	b29b      	uxth	r3, r3
 800643a:	2b00      	cmp	r3, #0
 800643c:	d113      	bne.n	8006466 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	685a      	ldr	r2, [r3, #4]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800644c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006452:	b29b      	uxth	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2201      	movs	r2, #1
 800645c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7ff ffc9 	bl	80063f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006466:	bf00      	nop
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	1c99      	adds	r1, r3, #2
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	6251      	str	r1, [r2, #36]	; 0x24
 8006482:	8819      	ldrh	r1, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1d      	ldr	r2, [pc, #116]	; (8006500 <I2SEx_TxISR_I2SExt+0x90>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d101      	bne.n	8006492 <I2SEx_TxISR_I2SExt+0x22>
 800648e:	4b1d      	ldr	r3, [pc, #116]	; (8006504 <I2SEx_TxISR_I2SExt+0x94>)
 8006490:	e001      	b.n	8006496 <I2SEx_TxISR_I2SExt+0x26>
 8006492:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006496:	460a      	mov	r2, r1
 8006498:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800649e:	b29b      	uxth	r3, r3
 80064a0:	3b01      	subs	r3, #1
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064ac:	b29b      	uxth	r3, r3
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d121      	bne.n	80064f6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a12      	ldr	r2, [pc, #72]	; (8006500 <I2SEx_TxISR_I2SExt+0x90>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d101      	bne.n	80064c0 <I2SEx_TxISR_I2SExt+0x50>
 80064bc:	4b11      	ldr	r3, [pc, #68]	; (8006504 <I2SEx_TxISR_I2SExt+0x94>)
 80064be:	e001      	b.n	80064c4 <I2SEx_TxISR_I2SExt+0x54>
 80064c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064c4:	685a      	ldr	r2, [r3, #4]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	490d      	ldr	r1, [pc, #52]	; (8006500 <I2SEx_TxISR_I2SExt+0x90>)
 80064cc:	428b      	cmp	r3, r1
 80064ce:	d101      	bne.n	80064d4 <I2SEx_TxISR_I2SExt+0x64>
 80064d0:	4b0c      	ldr	r3, [pc, #48]	; (8006504 <I2SEx_TxISR_I2SExt+0x94>)
 80064d2:	e001      	b.n	80064d8 <I2SEx_TxISR_I2SExt+0x68>
 80064d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064d8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80064dc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80064e2:	b29b      	uxth	r3, r3
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d106      	bne.n	80064f6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7ff ff81 	bl	80063f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	40003800 	.word	0x40003800
 8006504:	40003400 	.word	0x40003400

08006508 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	68d8      	ldr	r0, [r3, #12]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651a:	1c99      	adds	r1, r3, #2
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006520:	b282      	uxth	r2, r0
 8006522:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006528:	b29b      	uxth	r3, r3
 800652a:	3b01      	subs	r3, #1
 800652c:	b29a      	uxth	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006536:	b29b      	uxth	r3, r3
 8006538:	2b00      	cmp	r3, #0
 800653a:	d113      	bne.n	8006564 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685a      	ldr	r2, [r3, #4]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800654a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006550:	b29b      	uxth	r3, r3
 8006552:	2b00      	cmp	r3, #0
 8006554:	d106      	bne.n	8006564 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff ff4a 	bl	80063f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a20      	ldr	r2, [pc, #128]	; (80065fc <I2SEx_RxISR_I2SExt+0x90>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d101      	bne.n	8006582 <I2SEx_RxISR_I2SExt+0x16>
 800657e:	4b20      	ldr	r3, [pc, #128]	; (8006600 <I2SEx_RxISR_I2SExt+0x94>)
 8006580:	e001      	b.n	8006586 <I2SEx_RxISR_I2SExt+0x1a>
 8006582:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006586:	68d8      	ldr	r0, [r3, #12]
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	1c99      	adds	r1, r3, #2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006592:	b282      	uxth	r2, r0
 8006594:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800659a:	b29b      	uxth	r3, r3
 800659c:	3b01      	subs	r3, #1
 800659e:	b29a      	uxth	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d121      	bne.n	80065f2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a12      	ldr	r2, [pc, #72]	; (80065fc <I2SEx_RxISR_I2SExt+0x90>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d101      	bne.n	80065bc <I2SEx_RxISR_I2SExt+0x50>
 80065b8:	4b11      	ldr	r3, [pc, #68]	; (8006600 <I2SEx_RxISR_I2SExt+0x94>)
 80065ba:	e001      	b.n	80065c0 <I2SEx_RxISR_I2SExt+0x54>
 80065bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065c0:	685a      	ldr	r2, [r3, #4]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	490d      	ldr	r1, [pc, #52]	; (80065fc <I2SEx_RxISR_I2SExt+0x90>)
 80065c8:	428b      	cmp	r3, r1
 80065ca:	d101      	bne.n	80065d0 <I2SEx_RxISR_I2SExt+0x64>
 80065cc:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <I2SEx_RxISR_I2SExt+0x94>)
 80065ce:	e001      	b.n	80065d4 <I2SEx_RxISR_I2SExt+0x68>
 80065d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065d8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065de:	b29b      	uxth	r3, r3
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d106      	bne.n	80065f2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7ff ff03 	bl	80063f8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80065f2:	bf00      	nop
 80065f4:	3708      	adds	r7, #8
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	40003800 	.word	0x40003800
 8006600:	40003400 	.word	0x40003400

08006604 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af02      	add	r7, sp, #8
 800660a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800660c:	f7fc fcee 	bl	8002fec <HAL_GetTick>
 8006610:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e069      	b.n	80066f0 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006622:	b2db      	uxtb	r3, r3
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7fb f8bb 	bl	80017ac <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006636:	f241 3188 	movw	r1, #5000	; 0x1388
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f85e 	bl	80066fc <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	3b01      	subs	r3, #1
 8006650:	021a      	lsls	r2, r3, #8
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800665e:	9300      	str	r3, [sp, #0]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	2120      	movs	r1, #32
 8006666:	6878      	ldr	r0, [r7, #4]
 8006668:	f000 f856 	bl	8006718 <QSPI_WaitFlagStateUntilTimeout>
 800666c:	4603      	mov	r3, r0
 800666e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006670:	7afb      	ldrb	r3, [r7, #11]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d137      	bne.n	80066e6 <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006680:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6852      	ldr	r2, [r2, #4]
 8006688:	0611      	lsls	r1, r2, #24
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	68d2      	ldr	r2, [r2, #12]
 800668e:	4311      	orrs	r1, r2
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	69d2      	ldr	r2, [r2, #28]
 8006694:	4311      	orrs	r1, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6a12      	ldr	r2, [r2, #32]
 800669a:	4311      	orrs	r1, r2
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	430b      	orrs	r3, r1
 80066a2:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <HAL_QSPI_Init+0xf4>)
 80066ac:	4013      	ands	r3, r2
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	6912      	ldr	r2, [r2, #16]
 80066b2:	0411      	lsls	r1, r2, #16
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6952      	ldr	r2, [r2, #20]
 80066b8:	4311      	orrs	r1, r2
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	6992      	ldr	r2, [r2, #24]
 80066be:	4311      	orrs	r1, r2
 80066c0:	687a      	ldr	r2, [r7, #4]
 80066c2:	6812      	ldr	r2, [r2, #0]
 80066c4:	430b      	orrs	r3, r1
 80066c6:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f042 0201 	orr.w	r2, r2, #1
 80066d6:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 80066ee:	7afb      	ldrb	r3, [r7, #11]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	ffe0f8fe 	.word	0xffe0f8fe

080066fc <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b083      	sub	sp, #12
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	649a      	str	r2, [r3, #72]	; 0x48
}
 800670c:	bf00      	nop
 800670e:	370c      	adds	r7, #12
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr

08006718 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b084      	sub	sp, #16
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	603b      	str	r3, [r7, #0]
 8006724:	4613      	mov	r3, r2
 8006726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006728:	e01a      	b.n	8006760 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800672a:	69bb      	ldr	r3, [r7, #24]
 800672c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006730:	d016      	beq.n	8006760 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006732:	f7fc fc5b 	bl	8002fec <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	429a      	cmp	r2, r3
 8006740:	d302      	bcc.n	8006748 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10b      	bne.n	8006760 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2204      	movs	r2, #4
 800674c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006754:	f043 0201 	orr.w	r2, r3, #1
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e00e      	b.n	800677e <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689a      	ldr	r2, [r3, #8]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	4013      	ands	r3, r2
 800676a:	2b00      	cmp	r3, #0
 800676c:	bf14      	ite	ne
 800676e:	2301      	movne	r3, #1
 8006770:	2300      	moveq	r3, #0
 8006772:	b2db      	uxtb	r3, r3
 8006774:	461a      	mov	r2, r3
 8006776:	79fb      	ldrb	r3, [r7, #7]
 8006778:	429a      	cmp	r2, r3
 800677a:	d1d6      	bne.n	800672a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3710      	adds	r7, #16
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
	...

08006788 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d101      	bne.n	800679c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e0cc      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800679c:	4b68      	ldr	r3, [pc, #416]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 030f 	and.w	r3, r3, #15
 80067a4:	683a      	ldr	r2, [r7, #0]
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d90c      	bls.n	80067c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067aa:	4b65      	ldr	r3, [pc, #404]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80067ac:	683a      	ldr	r2, [r7, #0]
 80067ae:	b2d2      	uxtb	r2, r2
 80067b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067b2:	4b63      	ldr	r3, [pc, #396]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 030f 	and.w	r3, r3, #15
 80067ba:	683a      	ldr	r2, [r7, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d001      	beq.n	80067c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067c0:	2301      	movs	r3, #1
 80067c2:	e0b8      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0302 	and.w	r3, r3, #2
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d020      	beq.n	8006812 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0304 	and.w	r3, r3, #4
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d005      	beq.n	80067e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80067dc:	4b59      	ldr	r3, [pc, #356]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	4a58      	ldr	r2, [pc, #352]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80067e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80067e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f003 0308 	and.w	r3, r3, #8
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d005      	beq.n	8006800 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80067f4:	4b53      	ldr	r3, [pc, #332]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	4a52      	ldr	r2, [pc, #328]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80067fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80067fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006800:	4b50      	ldr	r3, [pc, #320]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	494d      	ldr	r1, [pc, #308]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	4313      	orrs	r3, r2
 8006810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f003 0301 	and.w	r3, r3, #1
 800681a:	2b00      	cmp	r3, #0
 800681c:	d044      	beq.n	80068a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d107      	bne.n	8006836 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006826:	4b47      	ldr	r3, [pc, #284]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d119      	bne.n	8006866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006832:	2301      	movs	r3, #1
 8006834:	e07f      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	2b02      	cmp	r3, #2
 800683c:	d003      	beq.n	8006846 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006842:	2b03      	cmp	r3, #3
 8006844:	d107      	bne.n	8006856 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006846:	4b3f      	ldr	r3, [pc, #252]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d109      	bne.n	8006866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e06f      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006856:	4b3b      	ldr	r3, [pc, #236]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0302 	and.w	r3, r3, #2
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e067      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006866:	4b37      	ldr	r3, [pc, #220]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	f023 0203 	bic.w	r2, r3, #3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4934      	ldr	r1, [pc, #208]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006874:	4313      	orrs	r3, r2
 8006876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006878:	f7fc fbb8 	bl	8002fec <HAL_GetTick>
 800687c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800687e:	e00a      	b.n	8006896 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006880:	f7fc fbb4 	bl	8002fec <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	f241 3288 	movw	r2, #5000	; 0x1388
 800688e:	4293      	cmp	r3, r2
 8006890:	d901      	bls.n	8006896 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e04f      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006896:	4b2b      	ldr	r3, [pc, #172]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	f003 020c 	and.w	r2, r3, #12
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	429a      	cmp	r2, r3
 80068a6:	d1eb      	bne.n	8006880 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068a8:	4b25      	ldr	r3, [pc, #148]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f003 030f 	and.w	r3, r3, #15
 80068b0:	683a      	ldr	r2, [r7, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d20c      	bcs.n	80068d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068b6:	4b22      	ldr	r3, [pc, #136]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80068b8:	683a      	ldr	r2, [r7, #0]
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068be:	4b20      	ldr	r3, [pc, #128]	; (8006940 <HAL_RCC_ClockConfig+0x1b8>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 030f 	and.w	r3, r3, #15
 80068c6:	683a      	ldr	r2, [r7, #0]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d001      	beq.n	80068d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e032      	b.n	8006936 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f003 0304 	and.w	r3, r3, #4
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d008      	beq.n	80068ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80068dc:	4b19      	ldr	r3, [pc, #100]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	4916      	ldr	r1, [pc, #88]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d009      	beq.n	800690e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80068fa:	4b12      	ldr	r3, [pc, #72]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	490e      	ldr	r1, [pc, #56]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	4313      	orrs	r3, r2
 800690c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800690e:	f000 f821 	bl	8006954 <HAL_RCC_GetSysClockFreq>
 8006912:	4602      	mov	r2, r0
 8006914:	4b0b      	ldr	r3, [pc, #44]	; (8006944 <HAL_RCC_ClockConfig+0x1bc>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	091b      	lsrs	r3, r3, #4
 800691a:	f003 030f 	and.w	r3, r3, #15
 800691e:	490a      	ldr	r1, [pc, #40]	; (8006948 <HAL_RCC_ClockConfig+0x1c0>)
 8006920:	5ccb      	ldrb	r3, [r1, r3]
 8006922:	fa22 f303 	lsr.w	r3, r2, r3
 8006926:	4a09      	ldr	r2, [pc, #36]	; (800694c <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800692a:	4b09      	ldr	r3, [pc, #36]	; (8006950 <HAL_RCC_ClockConfig+0x1c8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4618      	mov	r0, r3
 8006930:	f7fc fb18 	bl	8002f64 <HAL_InitTick>

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3710      	adds	r7, #16
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	40023c00 	.word	0x40023c00
 8006944:	40023800 	.word	0x40023800
 8006948:	0800cdd4 	.word	0x0800cdd4
 800694c:	20000004 	.word	0x20000004
 8006950:	20000060 	.word	0x20000060

08006954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006954:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006958:	b090      	sub	sp, #64	; 0x40
 800695a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800695c:	2300      	movs	r3, #0
 800695e:	637b      	str	r3, [r7, #52]	; 0x34
 8006960:	2300      	movs	r3, #0
 8006962:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006964:	2300      	movs	r3, #0
 8006966:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006968:	2300      	movs	r3, #0
 800696a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800696c:	4b59      	ldr	r3, [pc, #356]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f003 030c 	and.w	r3, r3, #12
 8006974:	2b08      	cmp	r3, #8
 8006976:	d00d      	beq.n	8006994 <HAL_RCC_GetSysClockFreq+0x40>
 8006978:	2b08      	cmp	r3, #8
 800697a:	f200 80a1 	bhi.w	8006ac0 <HAL_RCC_GetSysClockFreq+0x16c>
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x34>
 8006982:	2b04      	cmp	r3, #4
 8006984:	d003      	beq.n	800698e <HAL_RCC_GetSysClockFreq+0x3a>
 8006986:	e09b      	b.n	8006ac0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006988:	4b53      	ldr	r3, [pc, #332]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 800698a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800698c:	e09b      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800698e:	4b53      	ldr	r3, [pc, #332]	; (8006adc <HAL_RCC_GetSysClockFreq+0x188>)
 8006990:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006992:	e098      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006994:	4b4f      	ldr	r3, [pc, #316]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800699c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800699e:	4b4d      	ldr	r3, [pc, #308]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d028      	beq.n	80069fc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069aa:	4b4a      	ldr	r3, [pc, #296]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	099b      	lsrs	r3, r3, #6
 80069b0:	2200      	movs	r2, #0
 80069b2:	623b      	str	r3, [r7, #32]
 80069b4:	627a      	str	r2, [r7, #36]	; 0x24
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80069bc:	2100      	movs	r1, #0
 80069be:	4b47      	ldr	r3, [pc, #284]	; (8006adc <HAL_RCC_GetSysClockFreq+0x188>)
 80069c0:	fb03 f201 	mul.w	r2, r3, r1
 80069c4:	2300      	movs	r3, #0
 80069c6:	fb00 f303 	mul.w	r3, r0, r3
 80069ca:	4413      	add	r3, r2
 80069cc:	4a43      	ldr	r2, [pc, #268]	; (8006adc <HAL_RCC_GetSysClockFreq+0x188>)
 80069ce:	fba0 1202 	umull	r1, r2, r0, r2
 80069d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069d4:	460a      	mov	r2, r1
 80069d6:	62ba      	str	r2, [r7, #40]	; 0x28
 80069d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069da:	4413      	add	r3, r2
 80069dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	2200      	movs	r2, #0
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	61fa      	str	r2, [r7, #28]
 80069e6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069ea:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80069ee:	f7f9 fc13 	bl	8000218 <__aeabi_uldivmod>
 80069f2:	4602      	mov	r2, r0
 80069f4:	460b      	mov	r3, r1
 80069f6:	4613      	mov	r3, r2
 80069f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069fa:	e053      	b.n	8006aa4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069fc:	4b35      	ldr	r3, [pc, #212]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	099b      	lsrs	r3, r3, #6
 8006a02:	2200      	movs	r2, #0
 8006a04:	613b      	str	r3, [r7, #16]
 8006a06:	617a      	str	r2, [r7, #20]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006a0e:	f04f 0b00 	mov.w	fp, #0
 8006a12:	4652      	mov	r2, sl
 8006a14:	465b      	mov	r3, fp
 8006a16:	f04f 0000 	mov.w	r0, #0
 8006a1a:	f04f 0100 	mov.w	r1, #0
 8006a1e:	0159      	lsls	r1, r3, #5
 8006a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a24:	0150      	lsls	r0, r2, #5
 8006a26:	4602      	mov	r2, r0
 8006a28:	460b      	mov	r3, r1
 8006a2a:	ebb2 080a 	subs.w	r8, r2, sl
 8006a2e:	eb63 090b 	sbc.w	r9, r3, fp
 8006a32:	f04f 0200 	mov.w	r2, #0
 8006a36:	f04f 0300 	mov.w	r3, #0
 8006a3a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a3e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a42:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a46:	ebb2 0408 	subs.w	r4, r2, r8
 8006a4a:	eb63 0509 	sbc.w	r5, r3, r9
 8006a4e:	f04f 0200 	mov.w	r2, #0
 8006a52:	f04f 0300 	mov.w	r3, #0
 8006a56:	00eb      	lsls	r3, r5, #3
 8006a58:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a5c:	00e2      	lsls	r2, r4, #3
 8006a5e:	4614      	mov	r4, r2
 8006a60:	461d      	mov	r5, r3
 8006a62:	eb14 030a 	adds.w	r3, r4, sl
 8006a66:	603b      	str	r3, [r7, #0]
 8006a68:	eb45 030b 	adc.w	r3, r5, fp
 8006a6c:	607b      	str	r3, [r7, #4]
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	028b      	lsls	r3, r1, #10
 8006a7e:	4621      	mov	r1, r4
 8006a80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a84:	4621      	mov	r1, r4
 8006a86:	028a      	lsls	r2, r1, #10
 8006a88:	4610      	mov	r0, r2
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8e:	2200      	movs	r2, #0
 8006a90:	60bb      	str	r3, [r7, #8]
 8006a92:	60fa      	str	r2, [r7, #12]
 8006a94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a98:	f7f9 fbbe 	bl	8000218 <__aeabi_uldivmod>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	460b      	mov	r3, r1
 8006aa0:	4613      	mov	r3, r2
 8006aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	0c1b      	lsrs	r3, r3, #16
 8006aaa:	f003 0303 	and.w	r3, r3, #3
 8006aae:	3301      	adds	r3, #1
 8006ab0:	005b      	lsls	r3, r3, #1
 8006ab2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006ab4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006abe:	e002      	b.n	8006ac6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ac0:	4b05      	ldr	r3, [pc, #20]	; (8006ad8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ac2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ac4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3740      	adds	r7, #64	; 0x40
 8006acc:	46bd      	mov	sp, r7
 8006ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40023800 	.word	0x40023800
 8006ad8:	00f42400 	.word	0x00f42400
 8006adc:	017d7840 	.word	0x017d7840

08006ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ae4:	4b03      	ldr	r3, [pc, #12]	; (8006af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr
 8006af2:	bf00      	nop
 8006af4:	20000004 	.word	0x20000004

08006af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006afc:	f7ff fff0 	bl	8006ae0 <HAL_RCC_GetHCLKFreq>
 8006b00:	4602      	mov	r2, r0
 8006b02:	4b05      	ldr	r3, [pc, #20]	; (8006b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b04:	689b      	ldr	r3, [r3, #8]
 8006b06:	0a9b      	lsrs	r3, r3, #10
 8006b08:	f003 0307 	and.w	r3, r3, #7
 8006b0c:	4903      	ldr	r1, [pc, #12]	; (8006b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b0e:	5ccb      	ldrb	r3, [r1, r3]
 8006b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40023800 	.word	0x40023800
 8006b1c:	0800cde4 	.word	0x0800cde4

08006b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006b24:	f7ff ffdc 	bl	8006ae0 <HAL_RCC_GetHCLKFreq>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	4b05      	ldr	r3, [pc, #20]	; (8006b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	0b5b      	lsrs	r3, r3, #13
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	4903      	ldr	r1, [pc, #12]	; (8006b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b36:	5ccb      	ldrb	r3, [r1, r3]
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	40023800 	.word	0x40023800
 8006b44:	0800cde4 	.word	0x0800cde4

08006b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006b54:	2300      	movs	r3, #0
 8006b56:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0301 	and.w	r3, r3, #1
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006b6c:	4b7a      	ldr	r3, [pc, #488]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b72:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	69db      	ldr	r3, [r3, #28]
 8006b7a:	4977      	ldr	r1, [pc, #476]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d101      	bne.n	8006b8e <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006b8a:	2301      	movs	r3, #1
 8006b8c:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0302 	and.w	r3, r3, #2
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d010      	beq.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006b9a:	4b6f      	ldr	r3, [pc, #444]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ba0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	496b      	ldr	r1, [pc, #428]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006baa:	4313      	orrs	r3, r2
 8006bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a1b      	ldr	r3, [r3, #32]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d022      	beq.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006bc8:	4b63      	ldr	r3, [pc, #396]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bd6:	4960      	ldr	r1, [pc, #384]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d101      	bne.n	8006bea <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006be6:	2301      	movs	r3, #1
 8006be8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006bee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bf2:	d10c      	bne.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006bf4:	4b58      	ldr	r3, [pc, #352]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006bf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bfa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	695b      	ldr	r3, [r3, #20]
 8006c02:	3b01      	subs	r3, #1
 8006c04:	021b      	lsls	r3, r3, #8
 8006c06:	4954      	ldr	r1, [pc, #336]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d022      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006c1a:	4b4f      	ldr	r3, [pc, #316]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c20:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c28:	494b      	ldr	r1, [pc, #300]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d101      	bne.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006c44:	d10c      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006c46:	4b44      	ldr	r3, [pc, #272]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c4c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	695b      	ldr	r3, [r3, #20]
 8006c54:	3b01      	subs	r3, #1
 8006c56:	021b      	lsls	r3, r3, #8
 8006c58:	493f      	ldr	r1, [pc, #252]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0308 	and.w	r3, r3, #8
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	f000 808a 	beq.w	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c6e:	2300      	movs	r3, #0
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	4b39      	ldr	r3, [pc, #228]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c76:	4a38      	ldr	r2, [pc, #224]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c7e:	4b36      	ldr	r3, [pc, #216]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c86:	60fb      	str	r3, [r7, #12]
 8006c88:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006c8a:	4b34      	ldr	r3, [pc, #208]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a33      	ldr	r2, [pc, #204]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c94:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c96:	f7fc f9a9 	bl	8002fec <HAL_GetTick>
 8006c9a:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006c9e:	f7fc f9a5 	bl	8002fec <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	69bb      	ldr	r3, [r7, #24]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e1d1      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006cb0:	4b2a      	ldr	r3, [pc, #168]	; (8006d5c <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0f0      	beq.n	8006c9e <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006cbc:	4b26      	ldr	r3, [pc, #152]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cc4:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d02f      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d028      	beq.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006cda:	4b1f      	ldr	r3, [pc, #124]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce2:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ce4:	4b1e      	ldr	r3, [pc, #120]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006cea:	4b1d      	ldr	r3, [pc, #116]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006cf0:	4a19      	ldr	r2, [pc, #100]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006cf2:	697b      	ldr	r3, [r7, #20]
 8006cf4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006cf6:	4b18      	ldr	r3, [pc, #96]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b01      	cmp	r3, #1
 8006d00:	d114      	bne.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006d02:	f7fc f973 	bl	8002fec <HAL_GetTick>
 8006d06:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d08:	e00a      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006d0a:	f7fc f96f 	bl	8002fec <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d901      	bls.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006d1c:	2303      	movs	r3, #3
 8006d1e:	e199      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d20:	4b0d      	ldr	r3, [pc, #52]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d24:	f003 0302 	and.w	r3, r3, #2
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0ee      	beq.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d38:	d114      	bne.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006d3a:	4b07      	ldr	r3, [pc, #28]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d3c:	689b      	ldr	r3, [r3, #8]
 8006d3e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d46:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4e:	4902      	ldr	r1, [pc, #8]	; (8006d58 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006d50:	4313      	orrs	r3, r2
 8006d52:	608b      	str	r3, [r1, #8]
 8006d54:	e00c      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006d56:	bf00      	nop
 8006d58:	40023800 	.word	0x40023800
 8006d5c:	40007000 	.word	0x40007000
 8006d60:	42470e40 	.word	0x42470e40
 8006d64:	4b89      	ldr	r3, [pc, #548]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	4a88      	ldr	r2, [pc, #544]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d6e:	6093      	str	r3, [r2, #8]
 8006d70:	4b86      	ldr	r3, [pc, #536]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d7c:	4983      	ldr	r1, [pc, #524]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0304 	and.w	r3, r3, #4
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d004      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 8006d94:	4b7e      	ldr	r3, [pc, #504]	; (8006f90 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 8006d96:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0310 	and.w	r3, r3, #16
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00a      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8006da4:	4b79      	ldr	r3, [pc, #484]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006daa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db2:	4976      	ldr	r1, [pc, #472]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0320 	and.w	r3, r3, #32
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d011      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006dc6:	4b71      	ldr	r3, [pc, #452]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dcc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd4:	496d      	ldr	r1, [pc, #436]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006de4:	d101      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 8006de6:	2301      	movs	r3, #1
 8006de8:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8006df6:	4b65      	ldr	r3, [pc, #404]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dfc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e04:	4961      	ldr	r1, [pc, #388]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e06:	4313      	orrs	r3, r2
 8006e08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d004      	beq.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b80      	cmp	r3, #128	; 0x80
 8006e18:	f040 80c6 	bne.w	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e1c:	4b5d      	ldr	r3, [pc, #372]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006e22:	f7fc f8e3 	bl	8002fec <HAL_GetTick>
 8006e26:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e28:	e008      	b.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006e2a:	f7fc f8df 	bl	8002fec <HAL_GetTick>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	1ad3      	subs	r3, r2, r3
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d901      	bls.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006e38:	2303      	movs	r3, #3
 8006e3a:	e10b      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006e3c:	4b53      	ldr	r3, [pc, #332]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d1f0      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 8006e48:	4a53      	ldr	r2, [pc, #332]	; (8006f98 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e4e:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f003 0301 	and.w	r3, r3, #1
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d003      	beq.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x31c>
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	69db      	ldr	r3, [r3, #28]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d023      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a1b      	ldr	r3, [r3, #32]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d019      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d004      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e88:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e8c:	d00e      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d019      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d115      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x386>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006eaa:	d110      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685a      	ldr	r2, [r3, #4]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	019b      	lsls	r3, r3, #6
 8006eb6:	431a      	orrs	r2, r3
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	061b      	lsls	r3, r3, #24
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	691b      	ldr	r3, [r3, #16]
 8006ec4:	071b      	lsls	r3, r3, #28
 8006ec6:	4931      	ldr	r1, [pc, #196]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d003      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d009      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d026      	beq.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d122      	bne.n	8006f3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ef6:	4b25      	ldr	r3, [pc, #148]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006efc:	0e1b      	lsrs	r3, r3, #24
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685a      	ldr	r2, [r3, #4]
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	019b      	lsls	r3, r3, #6
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	061b      	lsls	r3, r3, #24
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	691b      	ldr	r3, [r3, #16]
 8006f1a:	071b      	lsls	r3, r3, #28
 8006f1c:	491b      	ldr	r1, [pc, #108]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 8006f24:	4b19      	ldr	r3, [pc, #100]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f2a:	f023 021f 	bic.w	r2, r3, #31
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	3b01      	subs	r3, #1
 8006f34:	4915      	ldr	r1, [pc, #84]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d010      	beq.n	8006f6a <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685a      	ldr	r2, [r3, #4]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	019b      	lsls	r3, r3, #6
 8006f52:	431a      	orrs	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	061b      	lsls	r3, r3, #24
 8006f5a:	431a      	orrs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691b      	ldr	r3, [r3, #16]
 8006f60:	071b      	lsls	r3, r3, #28
 8006f62:	490a      	ldr	r1, [pc, #40]	; (8006f8c <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006f6a:	4b0a      	ldr	r3, [pc, #40]	; (8006f94 <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f70:	f7fc f83c 	bl	8002fec <HAL_GetTick>
 8006f74:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f76:	e011      	b.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006f78:	f7fc f838 	bl	8002fec <HAL_GetTick>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	69bb      	ldr	r3, [r7, #24]
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	2b02      	cmp	r3, #2
 8006f84:	d90a      	bls.n	8006f9c <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	e064      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8006f8a:	bf00      	nop
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	424711e0 	.word	0x424711e0
 8006f94:	42470068 	.word	0x42470068
 8006f98:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006f9c:	4b2f      	ldr	r3, [pc, #188]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d0e7      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00a      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006fb4:	4b29      	ldr	r3, [pc, #164]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fc2:	4926      	ldr	r1, [pc, #152]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006fc4:	4313      	orrs	r3, r2
 8006fc6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006fd6:	4b21      	ldr	r3, [pc, #132]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fdc:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fe4:	491d      	ldr	r1, [pc, #116]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006fe6:	4313      	orrs	r3, r2
 8006fe8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8006ff8:	4b18      	ldr	r3, [pc, #96]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8006ffa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ffe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	4915      	ldr	r1, [pc, #84]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007008:	4313      	orrs	r3, r2
 800700a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 800701a:	4b10      	ldr	r3, [pc, #64]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800701c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007020:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007028:	490c      	ldr	r1, [pc, #48]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800702a:	4313      	orrs	r3, r2
 800702c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800703c:	4b07      	ldr	r3, [pc, #28]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800703e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007042:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800704a:	4904      	ldr	r1, [pc, #16]	; (800705c <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800704c:	4313      	orrs	r3, r2
 800704e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3720      	adds	r7, #32
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40023800 	.word	0x40023800

08007060 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007060:	b480      	push	{r7}
 8007062:	b087      	sub	sp, #28
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007068:	2300      	movs	r3, #0
 800706a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800706c:	2300      	movs	r3, #0
 800706e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007070:	2300      	movs	r3, #0
 8007072:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d004      	beq.n	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b02      	cmp	r3, #2
 8007082:	f000 80a1 	beq.w	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 8007086:	e13f      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007088:	4ba3      	ldr	r3, [pc, #652]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800708a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800708e:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800709a:	f000 8084 	beq.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80070a4:	f200 808c 	bhi.w	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070ae:	d04f      	beq.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80070b6:	f200 8083 	bhi.w	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d006      	beq.n	80070ce <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80070c6:	d17b      	bne.n	80071c0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80070c8:	4b94      	ldr	r3, [pc, #592]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80070ca:	617b      	str	r3, [r7, #20]
          break;
 80070cc:	e07b      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 80070ce:	4b92      	ldr	r3, [pc, #584]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80070d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070dc:	d109      	bne.n	80070f2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80070de:	4b8e      	ldr	r3, [pc, #568]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80070e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070e8:	4a8c      	ldr	r2, [pc, #560]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80070ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ee:	613b      	str	r3, [r7, #16]
 80070f0:	e019      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80070f2:	4b89      	ldr	r3, [pc, #548]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070fe:	d109      	bne.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007100:	4b85      	ldr	r3, [pc, #532]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007106:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800710a:	4a85      	ldr	r2, [pc, #532]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800710c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	e008      	b.n	8007126 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007114:	4b80      	ldr	r3, [pc, #512]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800711e:	4a81      	ldr	r2, [pc, #516]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007120:	fbb2 f3f3 	udiv	r3, r2, r3
 8007124:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007126:	4b7c      	ldr	r3, [pc, #496]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007128:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800712c:	099b      	lsrs	r3, r3, #6
 800712e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	fb02 f303 	mul.w	r3, r2, r3
 8007138:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800713a:	4b77      	ldr	r3, [pc, #476]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800713c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007140:	0f1b      	lsrs	r3, r3, #28
 8007142:	f003 0307 	and.w	r3, r3, #7
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	fbb2 f3f3 	udiv	r3, r2, r3
 800714c:	617b      	str	r3, [r7, #20]
          break;
 800714e:	e03a      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007150:	4b71      	ldr	r3, [pc, #452]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007152:	685b      	ldr	r3, [r3, #4]
 8007154:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007158:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800715c:	d108      	bne.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800715e:	4b6e      	ldr	r3, [pc, #440]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007166:	4a6e      	ldr	r2, [pc, #440]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007168:	fbb2 f3f3 	udiv	r3, r2, r3
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	e007      	b.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007170:	4b69      	ldr	r3, [pc, #420]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007178:	4a6a      	ldr	r2, [pc, #424]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 800717a:	fbb2 f3f3 	udiv	r3, r2, r3
 800717e:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007180:	4b65      	ldr	r3, [pc, #404]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	099b      	lsrs	r3, r3, #6
 8007186:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	fb02 f303 	mul.w	r3, r2, r3
 8007190:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8007192:	4b61      	ldr	r3, [pc, #388]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	0f1b      	lsrs	r3, r3, #28
 8007198:	f003 0307 	and.w	r3, r3, #7
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a2:	617b      	str	r3, [r7, #20]
          break;
 80071a4:	e00f      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80071a6:	4b5c      	ldr	r3, [pc, #368]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071b2:	d102      	bne.n	80071ba <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 80071b4:	4b5a      	ldr	r3, [pc, #360]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80071b6:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80071b8:	e005      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 80071ba:	4b5a      	ldr	r3, [pc, #360]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80071bc:	617b      	str	r3, [r7, #20]
          break;
 80071be:	e002      	b.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	617b      	str	r3, [r7, #20]
          break;
 80071c4:	bf00      	nop
        }
      }
      break;
 80071c6:	e09f      	b.n	8007308 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80071c8:	4b53      	ldr	r3, [pc, #332]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80071ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ce:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80071da:	f000 8084 	beq.w	80072e6 <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80071e4:	f200 808c 	bhi.w	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071ee:	d04f      	beq.n	8007290 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071f6:	f200 8083 	bhi.w	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d006      	beq.n	800720e <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007206:	d17b      	bne.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007208:	4b44      	ldr	r3, [pc, #272]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800720a:	617b      	str	r3, [r7, #20]
          break;
 800720c:	e07b      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 800720e:	4b42      	ldr	r3, [pc, #264]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007210:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007214:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007218:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800721c:	d109      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800721e:	4b3e      	ldr	r3, [pc, #248]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007220:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007228:	4a3c      	ldr	r2, [pc, #240]	; (800731c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800722a:	fbb2 f3f3 	udiv	r3, r2, r3
 800722e:	613b      	str	r3, [r7, #16]
 8007230:	e019      	b.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007232:	4b39      	ldr	r3, [pc, #228]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007234:	685b      	ldr	r3, [r3, #4]
 8007236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800723a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800723e:	d109      	bne.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007240:	4b35      	ldr	r3, [pc, #212]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007246:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800724a:	4a35      	ldr	r2, [pc, #212]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800724c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007250:	613b      	str	r3, [r7, #16]
 8007252:	e008      	b.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007254:	4b30      	ldr	r3, [pc, #192]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800725a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800725e:	4a31      	ldr	r2, [pc, #196]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007260:	fbb2 f3f3 	udiv	r3, r2, r3
 8007264:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007266:	4b2c      	ldr	r3, [pc, #176]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007268:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800726c:	099b      	lsrs	r3, r3, #6
 800726e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	fb02 f303 	mul.w	r3, r2, r3
 8007278:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800727a:	4b27      	ldr	r3, [pc, #156]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800727c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007280:	0f1b      	lsrs	r3, r3, #28
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	fbb2 f3f3 	udiv	r3, r2, r3
 800728c:	617b      	str	r3, [r7, #20]
          break;
 800728e:	e03a      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007290:	4b21      	ldr	r3, [pc, #132]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007298:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800729c:	d108      	bne.n	80072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800729e:	4b1e      	ldr	r3, [pc, #120]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072a6:	4a1e      	ldr	r2, [pc, #120]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ac:	613b      	str	r3, [r7, #16]
 80072ae:	e007      	b.n	80072c0 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80072b0:	4b19      	ldr	r3, [pc, #100]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072b8:	4a1a      	ldr	r2, [pc, #104]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80072ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80072be:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80072c0:	4b15      	ldr	r3, [pc, #84]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	099b      	lsrs	r3, r3, #6
 80072c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	fb02 f303 	mul.w	r3, r2, r3
 80072d0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80072d2:	4b11      	ldr	r3, [pc, #68]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	0f1b      	lsrs	r3, r3, #28
 80072d8:	f003 0307 	and.w	r3, r3, #7
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e2:	617b      	str	r3, [r7, #20]
          break;
 80072e4:	e00f      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80072e6:	4b0c      	ldr	r3, [pc, #48]	; (8007318 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072f2:	d102      	bne.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 80072f4:	4b0a      	ldr	r3, [pc, #40]	; (8007320 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80072f6:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80072f8:	e005      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 80072fa:	4b0a      	ldr	r3, [pc, #40]	; (8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80072fc:	617b      	str	r3, [r7, #20]
          break;
 80072fe:	e002      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
          break;
 8007304:	bf00      	nop
        }
      }
      break;
 8007306:	bf00      	nop
    }
  }
  return frequency;
 8007308:	697b      	ldr	r3, [r7, #20]
}
 800730a:	4618      	mov	r0, r3
 800730c:	371c      	adds	r7, #28
 800730e:	46bd      	mov	sp, r7
 8007310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007314:	4770      	bx	lr
 8007316:	bf00      	nop
 8007318:	40023800 	.word	0x40023800
 800731c:	00bb8000 	.word	0x00bb8000
 8007320:	017d7840 	.word	0x017d7840
 8007324:	00f42400 	.word	0x00f42400

08007328 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b086      	sub	sp, #24
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007330:	2300      	movs	r3, #0
 8007332:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	2b00      	cmp	r3, #0
 800733e:	d075      	beq.n	800742c <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007340:	4b88      	ldr	r3, [pc, #544]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	f003 030c 	and.w	r3, r3, #12
 8007348:	2b04      	cmp	r3, #4
 800734a:	d00c      	beq.n	8007366 <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800734c:	4b85      	ldr	r3, [pc, #532]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8007354:	2b08      	cmp	r3, #8
 8007356:	d112      	bne.n	800737e <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007358:	4b82      	ldr	r3, [pc, #520]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007360:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007364:	d10b      	bne.n	800737e <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007366:	4b7f      	ldr	r3, [pc, #508]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800736e:	2b00      	cmp	r3, #0
 8007370:	d05b      	beq.n	800742a <HAL_RCC_OscConfig+0x102>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d157      	bne.n	800742a <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e20a      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007386:	d106      	bne.n	8007396 <HAL_RCC_OscConfig+0x6e>
 8007388:	4b76      	ldr	r3, [pc, #472]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a75      	ldr	r2, [pc, #468]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 800738e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007392:	6013      	str	r3, [r2, #0]
 8007394:	e01d      	b.n	80073d2 <HAL_RCC_OscConfig+0xaa>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	685b      	ldr	r3, [r3, #4]
 800739a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800739e:	d10c      	bne.n	80073ba <HAL_RCC_OscConfig+0x92>
 80073a0:	4b70      	ldr	r3, [pc, #448]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a6f      	ldr	r2, [pc, #444]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80073a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073aa:	6013      	str	r3, [r2, #0]
 80073ac:	4b6d      	ldr	r3, [pc, #436]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a6c      	ldr	r2, [pc, #432]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80073b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	e00b      	b.n	80073d2 <HAL_RCC_OscConfig+0xaa>
 80073ba:	4b6a      	ldr	r3, [pc, #424]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a69      	ldr	r2, [pc, #420]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80073c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	4b67      	ldr	r3, [pc, #412]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	4a66      	ldr	r2, [pc, #408]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80073cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073d0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d013      	beq.n	8007402 <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073da:	f7fb fe07 	bl	8002fec <HAL_GetTick>
 80073de:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073e0:	e008      	b.n	80073f4 <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80073e2:	f7fb fe03 	bl	8002fec <HAL_GetTick>
 80073e6:	4602      	mov	r2, r0
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	1ad3      	subs	r3, r2, r3
 80073ec:	2b64      	cmp	r3, #100	; 0x64
 80073ee:	d901      	bls.n	80073f4 <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 80073f0:	2303      	movs	r3, #3
 80073f2:	e1cf      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073f4:	4b5b      	ldr	r3, [pc, #364]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d0f0      	beq.n	80073e2 <HAL_RCC_OscConfig+0xba>
 8007400:	e014      	b.n	800742c <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007402:	f7fb fdf3 	bl	8002fec <HAL_GetTick>
 8007406:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007408:	e008      	b.n	800741c <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800740a:	f7fb fdef 	bl	8002fec <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	2b64      	cmp	r3, #100	; 0x64
 8007416:	d901      	bls.n	800741c <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e1bb      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800741c:	4b51      	ldr	r3, [pc, #324]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1f0      	bne.n	800740a <HAL_RCC_OscConfig+0xe2>
 8007428:	e000      	b.n	800742c <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800742a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d063      	beq.n	8007500 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8007438:	4b4a      	ldr	r3, [pc, #296]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f003 030c 	and.w	r3, r3, #12
 8007440:	2b00      	cmp	r3, #0
 8007442:	d00b      	beq.n	800745c <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007444:	4b47      	ldr	r3, [pc, #284]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800744c:	2b08      	cmp	r3, #8
 800744e:	d11c      	bne.n	800748a <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007450:	4b44      	ldr	r3, [pc, #272]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007458:	2b00      	cmp	r3, #0
 800745a:	d116      	bne.n	800748a <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800745c:	4b41      	ldr	r3, [pc, #260]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0302 	and.w	r3, r3, #2
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <HAL_RCC_OscConfig+0x14c>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	2b01      	cmp	r3, #1
 800746e:	d001      	beq.n	8007474 <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e18f      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007474:	4b3b      	ldr	r3, [pc, #236]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	00db      	lsls	r3, r3, #3
 8007482:	4938      	ldr	r1, [pc, #224]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 8007484:	4313      	orrs	r3, r2
 8007486:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007488:	e03a      	b.n	8007500 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d020      	beq.n	80074d4 <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007492:	4b35      	ldr	r3, [pc, #212]	; (8007568 <HAL_RCC_OscConfig+0x240>)
 8007494:	2201      	movs	r2, #1
 8007496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fb fda8 	bl	8002fec <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074a0:	f7fb fda4 	bl	8002fec <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e170      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074b2:	4b2c      	ldr	r3, [pc, #176]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074be:	4b29      	ldr	r3, [pc, #164]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	00db      	lsls	r3, r3, #3
 80074cc:	4925      	ldr	r1, [pc, #148]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80074ce:	4313      	orrs	r3, r2
 80074d0:	600b      	str	r3, [r1, #0]
 80074d2:	e015      	b.n	8007500 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80074d4:	4b24      	ldr	r3, [pc, #144]	; (8007568 <HAL_RCC_OscConfig+0x240>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074da:	f7fb fd87 	bl	8002fec <HAL_GetTick>
 80074de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074e0:	e008      	b.n	80074f4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80074e2:	f7fb fd83 	bl	8002fec <HAL_GetTick>
 80074e6:	4602      	mov	r2, r0
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad3      	subs	r3, r2, r3
 80074ec:	2b02      	cmp	r3, #2
 80074ee:	d901      	bls.n	80074f4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80074f0:	2303      	movs	r3, #3
 80074f2:	e14f      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074f4:	4b1b      	ldr	r3, [pc, #108]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f003 0302 	and.w	r3, r3, #2
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d1f0      	bne.n	80074e2 <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 0308 	and.w	r3, r3, #8
 8007508:	2b00      	cmp	r3, #0
 800750a:	d037      	beq.n	800757c <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	695b      	ldr	r3, [r3, #20]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d016      	beq.n	8007542 <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007514:	4b15      	ldr	r3, [pc, #84]	; (800756c <HAL_RCC_OscConfig+0x244>)
 8007516:	2201      	movs	r2, #1
 8007518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800751a:	f7fb fd67 	bl	8002fec <HAL_GetTick>
 800751e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007520:	e008      	b.n	8007534 <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007522:	f7fb fd63 	bl	8002fec <HAL_GetTick>
 8007526:	4602      	mov	r2, r0
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	1ad3      	subs	r3, r2, r3
 800752c:	2b02      	cmp	r3, #2
 800752e:	d901      	bls.n	8007534 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 8007530:	2303      	movs	r3, #3
 8007532:	e12f      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007534:	4b0b      	ldr	r3, [pc, #44]	; (8007564 <HAL_RCC_OscConfig+0x23c>)
 8007536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b00      	cmp	r3, #0
 800753e:	d0f0      	beq.n	8007522 <HAL_RCC_OscConfig+0x1fa>
 8007540:	e01c      	b.n	800757c <HAL_RCC_OscConfig+0x254>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007542:	4b0a      	ldr	r3, [pc, #40]	; (800756c <HAL_RCC_OscConfig+0x244>)
 8007544:	2200      	movs	r2, #0
 8007546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007548:	f7fb fd50 	bl	8002fec <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800754e:	e00f      	b.n	8007570 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007550:	f7fb fd4c 	bl	8002fec <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b02      	cmp	r3, #2
 800755c:	d908      	bls.n	8007570 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e118      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
 8007562:	bf00      	nop
 8007564:	40023800 	.word	0x40023800
 8007568:	42470000 	.word	0x42470000
 800756c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007570:	4b8a      	ldr	r3, [pc, #552]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d1e9      	bne.n	8007550 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 0304 	and.w	r3, r3, #4
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 8097 	beq.w	80076b8 <HAL_RCC_OscConfig+0x390>
  {
    FlagStatus       pwrclkchanged = RESET;
 800758a:	2300      	movs	r3, #0
 800758c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800758e:	4b83      	ldr	r3, [pc, #524]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10f      	bne.n	80075ba <HAL_RCC_OscConfig+0x292>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800759a:	2300      	movs	r3, #0
 800759c:	60fb      	str	r3, [r7, #12]
 800759e:	4b7f      	ldr	r3, [pc, #508]	; (800779c <HAL_RCC_OscConfig+0x474>)
 80075a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a2:	4a7e      	ldr	r2, [pc, #504]	; (800779c <HAL_RCC_OscConfig+0x474>)
 80075a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075a8:	6413      	str	r3, [r2, #64]	; 0x40
 80075aa:	4b7c      	ldr	r3, [pc, #496]	; (800779c <HAL_RCC_OscConfig+0x474>)
 80075ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075b2:	60fb      	str	r3, [r7, #12]
 80075b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80075b6:	2301      	movs	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ba:	4b79      	ldr	r3, [pc, #484]	; (80077a0 <HAL_RCC_OscConfig+0x478>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d118      	bne.n	80075f8 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80075c6:	4b76      	ldr	r3, [pc, #472]	; (80077a0 <HAL_RCC_OscConfig+0x478>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a75      	ldr	r2, [pc, #468]	; (80077a0 <HAL_RCC_OscConfig+0x478>)
 80075cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80075d2:	f7fb fd0b 	bl	8002fec <HAL_GetTick>
 80075d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075d8:	e008      	b.n	80075ec <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075da:	f7fb fd07 	bl	8002fec <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d901      	bls.n	80075ec <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 80075e8:	2303      	movs	r3, #3
 80075ea:	e0d3      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075ec:	4b6c      	ldr	r3, [pc, #432]	; (80077a0 <HAL_RCC_OscConfig+0x478>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0f0      	beq.n	80075da <HAL_RCC_OscConfig+0x2b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d106      	bne.n	800760e <HAL_RCC_OscConfig+0x2e6>
 8007600:	4b66      	ldr	r3, [pc, #408]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007604:	4a65      	ldr	r2, [pc, #404]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007606:	f043 0301 	orr.w	r3, r3, #1
 800760a:	6713      	str	r3, [r2, #112]	; 0x70
 800760c:	e01c      	b.n	8007648 <HAL_RCC_OscConfig+0x320>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b05      	cmp	r3, #5
 8007614:	d10c      	bne.n	8007630 <HAL_RCC_OscConfig+0x308>
 8007616:	4b61      	ldr	r3, [pc, #388]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800761a:	4a60      	ldr	r2, [pc, #384]	; (800779c <HAL_RCC_OscConfig+0x474>)
 800761c:	f043 0304 	orr.w	r3, r3, #4
 8007620:	6713      	str	r3, [r2, #112]	; 0x70
 8007622:	4b5e      	ldr	r3, [pc, #376]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007626:	4a5d      	ldr	r2, [pc, #372]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007628:	f043 0301 	orr.w	r3, r3, #1
 800762c:	6713      	str	r3, [r2, #112]	; 0x70
 800762e:	e00b      	b.n	8007648 <HAL_RCC_OscConfig+0x320>
 8007630:	4b5a      	ldr	r3, [pc, #360]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	4a59      	ldr	r2, [pc, #356]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007636:	f023 0301 	bic.w	r3, r3, #1
 800763a:	6713      	str	r3, [r2, #112]	; 0x70
 800763c:	4b57      	ldr	r3, [pc, #348]	; (800779c <HAL_RCC_OscConfig+0x474>)
 800763e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007640:	4a56      	ldr	r2, [pc, #344]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007642:	f023 0304 	bic.w	r3, r3, #4
 8007646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d015      	beq.n	800767c <HAL_RCC_OscConfig+0x354>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007650:	f7fb fccc 	bl	8002fec <HAL_GetTick>
 8007654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007656:	e00a      	b.n	800766e <HAL_RCC_OscConfig+0x346>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007658:	f7fb fcc8 	bl	8002fec <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	693b      	ldr	r3, [r7, #16]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	f241 3288 	movw	r2, #5000	; 0x1388
 8007666:	4293      	cmp	r3, r2
 8007668:	d901      	bls.n	800766e <HAL_RCC_OscConfig+0x346>
        {
          return HAL_TIMEOUT;
 800766a:	2303      	movs	r3, #3
 800766c:	e092      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800766e:	4b4b      	ldr	r3, [pc, #300]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007672:	f003 0302 	and.w	r3, r3, #2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d0ee      	beq.n	8007658 <HAL_RCC_OscConfig+0x330>
 800767a:	e014      	b.n	80076a6 <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800767c:	f7fb fcb6 	bl	8002fec <HAL_GetTick>
 8007680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007682:	e00a      	b.n	800769a <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007684:	f7fb fcb2 	bl	8002fec <HAL_GetTick>
 8007688:	4602      	mov	r2, r0
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007692:	4293      	cmp	r3, r2
 8007694:	d901      	bls.n	800769a <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e07c      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800769a:	4b40      	ldr	r3, [pc, #256]	; (800779c <HAL_RCC_OscConfig+0x474>)
 800769c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769e:	f003 0302 	and.w	r3, r3, #2
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1ee      	bne.n	8007684 <HAL_RCC_OscConfig+0x35c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	d105      	bne.n	80076b8 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076ac:	4b3b      	ldr	r3, [pc, #236]	; (800779c <HAL_RCC_OscConfig+0x474>)
 80076ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b0:	4a3a      	ldr	r2, [pc, #232]	; (800779c <HAL_RCC_OscConfig+0x474>)
 80076b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	699b      	ldr	r3, [r3, #24]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d068      	beq.n	8007792 <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80076c0:	4b36      	ldr	r3, [pc, #216]	; (800779c <HAL_RCC_OscConfig+0x474>)
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f003 030c 	and.w	r3, r3, #12
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d060      	beq.n	800778e <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	2b02      	cmp	r3, #2
 80076d2:	d145      	bne.n	8007760 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80076d4:	4b33      	ldr	r3, [pc, #204]	; (80077a4 <HAL_RCC_OscConfig+0x47c>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076da:	f7fb fc87 	bl	8002fec <HAL_GetTick>
 80076de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076e0:	e008      	b.n	80076f4 <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80076e2:	f7fb fc83 	bl	8002fec <HAL_GetTick>
 80076e6:	4602      	mov	r2, r0
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	1ad3      	subs	r3, r2, r3
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e04f      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076f4:	4b29      	ldr	r3, [pc, #164]	; (800779c <HAL_RCC_OscConfig+0x474>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1f0      	bne.n	80076e2 <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69da      	ldr	r2, [r3, #28]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	431a      	orrs	r2, r3
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800770e:	019b      	lsls	r3, r3, #6
 8007710:	431a      	orrs	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007716:	085b      	lsrs	r3, r3, #1
 8007718:	3b01      	subs	r3, #1
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	431a      	orrs	r2, r3
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007722:	061b      	lsls	r3, r3, #24
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800772a:	071b      	lsls	r3, r3, #28
 800772c:	491b      	ldr	r1, [pc, #108]	; (800779c <HAL_RCC_OscConfig+0x474>)
 800772e:	4313      	orrs	r3, r2
 8007730:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007732:	4b1c      	ldr	r3, [pc, #112]	; (80077a4 <HAL_RCC_OscConfig+0x47c>)
 8007734:	2201      	movs	r2, #1
 8007736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7fb fc58 	bl	8002fec <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007740:	f7fb fc54 	bl	8002fec <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e020      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007752:	4b12      	ldr	r3, [pc, #72]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d0f0      	beq.n	8007740 <HAL_RCC_OscConfig+0x418>
 800775e:	e018      	b.n	8007792 <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007760:	4b10      	ldr	r3, [pc, #64]	; (80077a4 <HAL_RCC_OscConfig+0x47c>)
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007766:	f7fb fc41 	bl	8002fec <HAL_GetTick>
 800776a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800776c:	e008      	b.n	8007780 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800776e:	f7fb fc3d 	bl	8002fec <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	2b02      	cmp	r3, #2
 800777a:	d901      	bls.n	8007780 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 800777c:	2303      	movs	r3, #3
 800777e:	e009      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007780:	4b06      	ldr	r3, [pc, #24]	; (800779c <HAL_RCC_OscConfig+0x474>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d1f0      	bne.n	800776e <HAL_RCC_OscConfig+0x446>
 800778c:	e001      	b.n	8007792 <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3718      	adds	r7, #24
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}
 800779c:	40023800 	.word	0x40023800
 80077a0:	40007000 	.word	0x40007000
 80077a4:	42470060 	.word	0x42470060

080077a8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d101      	bne.n	80077ba <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	e022      	b.n	8007800 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d105      	bne.n	80077d2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7fa f8b7 	bl	8001940 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2203      	movs	r2, #3
 80077d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f814 	bl	8007808 <HAL_SD_InitCard>
 80077e0:	4603      	mov	r3, r0
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d001      	beq.n	80077ea <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e00a      	b.n	8007800 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2201      	movs	r2, #1
 80077fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007808:	b5b0      	push	{r4, r5, r7, lr}
 800780a:	b08e      	sub	sp, #56	; 0x38
 800780c:	af04      	add	r7, sp, #16
 800780e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007810:	2300      	movs	r3, #0
 8007812:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007814:	2300      	movs	r3, #0
 8007816:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007818:	2300      	movs	r3, #0
 800781a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800781c:	2300      	movs	r3, #0
 800781e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007820:	2300      	movs	r3, #0
 8007822:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007824:	2376      	movs	r3, #118	; 0x76
 8007826:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681d      	ldr	r5, [r3, #0]
 800782c:	466c      	mov	r4, sp
 800782e:	f107 0314 	add.w	r3, r7, #20
 8007832:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007836:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800783a:	f107 0308 	add.w	r3, r7, #8
 800783e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007840:	4628      	mov	r0, r5
 8007842:	f001 fba1 	bl	8008f88 <SDIO_Init>
 8007846:	4603      	mov	r3, r0
 8007848:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800784c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	e031      	b.n	80078bc <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007858:	4b1a      	ldr	r3, [pc, #104]	; (80078c4 <HAL_SD_InitCard+0xbc>)
 800785a:	2200      	movs	r2, #0
 800785c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	4618      	mov	r0, r3
 8007864:	f001 fbc8 	bl	8008ff8 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007868:	4b16      	ldr	r3, [pc, #88]	; (80078c4 <HAL_SD_InitCard+0xbc>)
 800786a:	2201      	movs	r2, #1
 800786c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fb18 	bl	8007ea4 <SD_PowerON>
 8007874:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e013      	b.n	80078bc <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fa37 	bl	8007d08 <SD_InitCard>
 800789a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d00b      	beq.n	80078ba <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078ae:	6a3b      	ldr	r3, [r7, #32]
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3728      	adds	r7, #40	; 0x28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bdb0      	pop	{r4, r5, r7, pc}
 80078c4:	422580a0 	.word	0x422580a0

080078c8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d6:	0f9b      	lsrs	r3, r3, #30
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078e2:	0e9b      	lsrs	r3, r3, #26
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	f003 030f 	and.w	r3, r3, #15
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f4:	0e1b      	lsrs	r3, r3, #24
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	f003 0303 	and.w	r3, r3, #3
 80078fc:	b2da      	uxtb	r2, r3
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007906:	0c1b      	lsrs	r3, r3, #16
 8007908:	b2da      	uxtb	r2, r3
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007912:	0a1b      	lsrs	r3, r3, #8
 8007914:	b2da      	uxtb	r2, r3
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800791e:	b2da      	uxtb	r2, r3
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007928:	0d1b      	lsrs	r3, r3, #20
 800792a:	b29a      	uxth	r2, r3
 800792c:	683b      	ldr	r3, [r7, #0]
 800792e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007934:	0c1b      	lsrs	r3, r3, #16
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 030f 	and.w	r3, r3, #15
 800793c:	b2da      	uxtb	r2, r3
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007946:	0bdb      	lsrs	r3, r3, #15
 8007948:	b2db      	uxtb	r3, r3
 800794a:	f003 0301 	and.w	r3, r3, #1
 800794e:	b2da      	uxtb	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007958:	0b9b      	lsrs	r3, r3, #14
 800795a:	b2db      	uxtb	r3, r3
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	b2da      	uxtb	r2, r3
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800796a:	0b5b      	lsrs	r3, r3, #13
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800797c:	0b1b      	lsrs	r3, r3, #12
 800797e:	b2db      	uxtb	r3, r3
 8007980:	f003 0301 	and.w	r3, r3, #1
 8007984:	b2da      	uxtb	r2, r3
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	2200      	movs	r2, #0
 800798e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	2b00      	cmp	r3, #0
 8007996:	d163      	bne.n	8007a60 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800799c:	009a      	lsls	r2, r3, #2
 800799e:	f640 73fc 	movw	r3, #4092	; 0xffc
 80079a2:	4013      	ands	r3, r2
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80079a8:	0f92      	lsrs	r2, r2, #30
 80079aa:	431a      	orrs	r2, r3
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b4:	0edb      	lsrs	r3, r3, #27
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	f003 0307 	and.w	r3, r3, #7
 80079bc:	b2da      	uxtb	r2, r3
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c6:	0e1b      	lsrs	r3, r3, #24
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	f003 0307 	and.w	r3, r3, #7
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d8:	0d5b      	lsrs	r3, r3, #21
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079ea:	0c9b      	lsrs	r3, r3, #18
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	f003 0307 	and.w	r3, r3, #7
 80079f2:	b2da      	uxtb	r2, r3
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079fc:	0bdb      	lsrs	r3, r3, #15
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	f003 0307 	and.w	r3, r3, #7
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	7e1b      	ldrb	r3, [r3, #24]
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	f003 0307 	and.w	r3, r3, #7
 8007a1e:	3302      	adds	r3, #2
 8007a20:	2201      	movs	r2, #1
 8007a22:	fa02 f303 	lsl.w	r3, r2, r3
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a2a:	fb03 f202 	mul.w	r2, r3, r2
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	7a1b      	ldrb	r3, [r3, #8]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	f003 030f 	and.w	r3, r3, #15
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	409a      	lsls	r2, r3
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007a4c:	0a52      	lsrs	r2, r2, #9
 8007a4e:	fb03 f202 	mul.w	r2, r3, r2
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a5c:	661a      	str	r2, [r3, #96]	; 0x60
 8007a5e:	e031      	b.n	8007ac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d11d      	bne.n	8007aa4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a6c:	041b      	lsls	r3, r3, #16
 8007a6e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a76:	0c1b      	lsrs	r3, r3, #16
 8007a78:	431a      	orrs	r2, r3
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	3301      	adds	r3, #1
 8007a84:	029a      	lsls	r2, r3, #10
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a98:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	661a      	str	r2, [r3, #96]	; 0x60
 8007aa2:	e00f      	b.n	8007ac4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a58      	ldr	r2, [pc, #352]	; (8007c0c <HAL_SD_GetCardCSD+0x344>)
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ab0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e09d      	b.n	8007c00 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ac8:	0b9b      	lsrs	r3, r3, #14
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	f003 0301 	and.w	r3, r3, #1
 8007ad0:	b2da      	uxtb	r2, r3
 8007ad2:	683b      	ldr	r3, [r7, #0]
 8007ad4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ada:	09db      	lsrs	r3, r3, #7
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ae2:	b2da      	uxtb	r2, r3
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007aec:	b2db      	uxtb	r3, r3
 8007aee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007af2:	b2da      	uxtb	r2, r3
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afc:	0fdb      	lsrs	r3, r3, #31
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b08:	0f5b      	lsrs	r3, r3, #29
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1a:	0e9b      	lsrs	r3, r3, #26
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	b2da      	uxtb	r2, r3
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b2c:	0d9b      	lsrs	r3, r3, #22
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	f003 030f 	and.w	r3, r3, #15
 8007b34:	b2da      	uxtb	r2, r3
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3e:	0d5b      	lsrs	r3, r3, #21
 8007b40:	b2db      	uxtb	r3, r3
 8007b42:	f003 0301 	and.w	r3, r3, #1
 8007b46:	b2da      	uxtb	r2, r3
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	2200      	movs	r2, #0
 8007b52:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5a:	0c1b      	lsrs	r3, r3, #16
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6e:	0bdb      	lsrs	r3, r3, #15
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	b2da      	uxtb	r2, r3
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b82:	0b9b      	lsrs	r3, r3, #14
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	b2da      	uxtb	r2, r3
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	0b5b      	lsrs	r3, r3, #13
 8007b98:	b2db      	uxtb	r3, r3
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007baa:	0b1b      	lsrs	r3, r3, #12
 8007bac:	b2db      	uxtb	r3, r3
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbe:	0a9b      	lsrs	r3, r3, #10
 8007bc0:	b2db      	uxtb	r3, r3
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	b2da      	uxtb	r2, r3
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	f003 0303 	and.w	r3, r3, #3
 8007bda:	b2da      	uxtb	r2, r3
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be6:	085b      	lsrs	r3, r3, #1
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	004005ff 	.word	0x004005ff

08007c10 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007c10:	b5b0      	push	{r4, r5, r7, lr}
 8007c12:	b08e      	sub	sp, #56	; 0x38
 8007c14:	af04      	add	r7, sp, #16
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d02e      	beq.n	8007c88 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c30:	d106      	bne.n	8007c40 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c36:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	639a      	str	r2, [r3, #56]	; 0x38
 8007c3e:	e029      	b.n	8007c94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c46:	d10a      	bne.n	8007c5e <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 f9b9 	bl	8007fc0 <SD_WideBus_Enable>
 8007c4e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	431a      	orrs	r2, r3
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	639a      	str	r2, [r3, #56]	; 0x38
 8007c5c:	e01a      	b.n	8007c94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d10a      	bne.n	8007c7a <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f9f6 	bl	8008056 <SD_WideBus_Disable>
 8007c6a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c72:	431a      	orrs	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	639a      	str	r2, [r3, #56]	; 0x38
 8007c78:	e00c      	b.n	8007c94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	639a      	str	r2, [r3, #56]	; 0x38
 8007c86:	e005      	b.n	8007c94 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d009      	beq.n	8007cb0 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a18      	ldr	r2, [pc, #96]	; (8007d04 <HAL_SD_ConfigWideBusOperation+0xf4>)
 8007ca2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e024      	b.n	8007cfa <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	695b      	ldr	r3, [r3, #20]
 8007cca:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681d      	ldr	r5, [r3, #0]
 8007cd6:	466c      	mov	r4, sp
 8007cd8:	f107 0318 	add.w	r3, r7, #24
 8007cdc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ce0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ce4:	f107 030c 	add.w	r3, r7, #12
 8007ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cea:	4628      	mov	r0, r5
 8007cec:	f001 f94c 	bl	8008f88 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2201      	movs	r2, #1
 8007cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3728      	adds	r7, #40	; 0x28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bdb0      	pop	{r4, r5, r7, pc}
 8007d02:	bf00      	nop
 8007d04:	004005ff 	.word	0x004005ff

08007d08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007d08:	b5b0      	push	{r4, r5, r7, lr}
 8007d0a:	b094      	sub	sp, #80	; 0x50
 8007d0c:	af04      	add	r7, sp, #16
 8007d0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007d10:	2301      	movs	r3, #1
 8007d12:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f001 f97c 	bl	8009016 <SDIO_GetPowerState>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d102      	bne.n	8007d2a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007d24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007d28:	e0b8      	b.n	8007e9c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d2e:	2b03      	cmp	r3, #3
 8007d30:	d02f      	beq.n	8007d92 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 fafb 	bl	8009332 <SDMMC_CmdSendCID>
 8007d3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d001      	beq.n	8007d48 <SD_InitCard+0x40>
    {
      return errorstate;
 8007d44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d46:	e0a9      	b.n	8007e9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 f9a6 	bl	80090a0 <SDIO_GetResponse>
 8007d54:	4602      	mov	r2, r0
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	2104      	movs	r1, #4
 8007d60:	4618      	mov	r0, r3
 8007d62:	f001 f99d 	bl	80090a0 <SDIO_GetResponse>
 8007d66:	4602      	mov	r2, r0
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2108      	movs	r1, #8
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 f994 	bl	80090a0 <SDIO_GetResponse>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	210c      	movs	r1, #12
 8007d84:	4618      	mov	r0, r3
 8007d86:	f001 f98b 	bl	80090a0 <SDIO_GetResponse>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d96:	2b03      	cmp	r3, #3
 8007d98:	d00d      	beq.n	8007db6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f107 020e 	add.w	r2, r7, #14
 8007da2:	4611      	mov	r1, r2
 8007da4:	4618      	mov	r0, r3
 8007da6:	f001 fb01 	bl	80093ac <SDMMC_CmdSetRelAdd>
 8007daa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <SD_InitCard+0xae>
    {
      return errorstate;
 8007db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db4:	e072      	b.n	8007e9c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d036      	beq.n	8007e2c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007dbe:	89fb      	ldrh	r3, [r7, #14]
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dce:	041b      	lsls	r3, r3, #16
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	4610      	mov	r0, r2
 8007dd4:	f001 facb 	bl	800936e <SDMMC_CmdSendCSD>
 8007dd8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007dda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de2:	e05b      	b.n	8007e9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2100      	movs	r1, #0
 8007dea:	4618      	mov	r0, r3
 8007dec:	f001 f958 	bl	80090a0 <SDIO_GetResponse>
 8007df0:	4602      	mov	r2, r0
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2104      	movs	r1, #4
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f001 f94f 	bl	80090a0 <SDIO_GetResponse>
 8007e02:	4602      	mov	r2, r0
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2108      	movs	r1, #8
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f001 f946 	bl	80090a0 <SDIO_GetResponse>
 8007e14:	4602      	mov	r2, r0
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	210c      	movs	r1, #12
 8007e20:	4618      	mov	r0, r3
 8007e22:	f001 f93d 	bl	80090a0 <SDIO_GetResponse>
 8007e26:	4602      	mov	r2, r0
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2104      	movs	r1, #4
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 f934 	bl	80090a0 <SDIO_GetResponse>
 8007e38:	4603      	mov	r3, r0
 8007e3a:	0d1a      	lsrs	r2, r3, #20
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007e40:	f107 0310 	add.w	r3, r7, #16
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff fd3e 	bl	80078c8 <HAL_SD_GetCardCSD>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d002      	beq.n	8007e58 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007e52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007e56:	e021      	b.n	8007e9c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6819      	ldr	r1, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e60:	041b      	lsls	r3, r3, #16
 8007e62:	2200      	movs	r2, #0
 8007e64:	461c      	mov	r4, r3
 8007e66:	4615      	mov	r5, r2
 8007e68:	4622      	mov	r2, r4
 8007e6a:	462b      	mov	r3, r5
 8007e6c:	4608      	mov	r0, r1
 8007e6e:	f001 f978 	bl	8009162 <SDMMC_CmdSelDesel>
 8007e72:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d001      	beq.n	8007e7e <SD_InitCard+0x176>
  {
    return errorstate;
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7c:	e00e      	b.n	8007e9c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681d      	ldr	r5, [r3, #0]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	466c      	mov	r4, sp
 8007e86:	f103 0210 	add.w	r2, r3, #16
 8007e8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007e8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007e90:	3304      	adds	r3, #4
 8007e92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e94:	4628      	mov	r0, r5
 8007e96:	f001 f877 	bl	8008f88 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3740      	adds	r7, #64	; 0x40
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bdb0      	pop	{r4, r5, r7, pc}

08007ea4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	617b      	str	r3, [r7, #20]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f001 f973 	bl	80091a8 <SDMMC_CmdGoIdleState>
 8007ec2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <SD_PowerON+0x2a>
  {
    return errorstate;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	e072      	b.n	8007fb4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f001 f986 	bl	80091e4 <SDMMC_CmdOperCond>
 8007ed8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00d      	beq.n	8007efc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f001 f95c 	bl	80091a8 <SDMMC_CmdGoIdleState>
 8007ef0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	e05b      	b.n	8007fb4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2201      	movs	r2, #1
 8007f00:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d137      	bne.n	8007f7a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2100      	movs	r1, #0
 8007f10:	4618      	mov	r0, r3
 8007f12:	f001 f986 	bl	8009222 <SDMMC_CmdAppCommand>
 8007f16:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d02d      	beq.n	8007f7a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f22:	e047      	b.n	8007fb4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2100      	movs	r1, #0
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f001 f979 	bl	8009222 <SDMMC_CmdAppCommand>
 8007f30:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <SD_PowerON+0x98>
    {
      return errorstate;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	e03b      	b.n	8007fb4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	491e      	ldr	r1, [pc, #120]	; (8007fbc <SD_PowerON+0x118>)
 8007f42:	4618      	mov	r0, r3
 8007f44:	f001 f98f 	bl	8009266 <SDMMC_CmdAppOperCommand>
 8007f48:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f54:	e02e      	b.n	8007fb4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 f89f 	bl	80090a0 <SDIO_GetResponse>
 8007f62:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	0fdb      	lsrs	r3, r3, #31
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d101      	bne.n	8007f70 <SD_PowerON+0xcc>
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	e000      	b.n	8007f72 <SD_PowerON+0xce>
 8007f70:	2300      	movs	r3, #0
 8007f72:	613b      	str	r3, [r7, #16]

    count++;
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	3301      	adds	r3, #1
 8007f78:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d802      	bhi.n	8007f8a <SD_PowerON+0xe6>
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d0cc      	beq.n	8007f24 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d902      	bls.n	8007f9a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007f94:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f98:	e00c      	b.n	8007fb4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2201      	movs	r2, #1
 8007fa8:	645a      	str	r2, [r3, #68]	; 0x44
 8007faa:	e002      	b.n	8007fb2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8007fb2:	2300      	movs	r3, #0
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3718      	adds	r7, #24
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	c1100000 	.word	0xc1100000

08007fc0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b086      	sub	sp, #24
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007fc8:	2300      	movs	r3, #0
 8007fca:	60fb      	str	r3, [r7, #12]
 8007fcc:	2300      	movs	r3, #0
 8007fce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	2100      	movs	r1, #0
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f001 f862 	bl	80090a0 <SDIO_GetResponse>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fe6:	d102      	bne.n	8007fee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007fe8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007fec:	e02f      	b.n	800804e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007fee:	f107 030c 	add.w	r3, r7, #12
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f000 f879 	bl	80080ec <SD_FindSCR>
 8007ffa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	e023      	b.n	800804e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800800c:	2b00      	cmp	r3, #0
 800800e:	d01c      	beq.n	800804a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008018:	041b      	lsls	r3, r3, #16
 800801a:	4619      	mov	r1, r3
 800801c:	4610      	mov	r0, r2
 800801e:	f001 f900 	bl	8009222 <SDMMC_CmdAppCommand>
 8008022:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d001      	beq.n	800802e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	e00f      	b.n	800804e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2102      	movs	r1, #2
 8008034:	4618      	mov	r0, r3
 8008036:	f001 f939 	bl	80092ac <SDMMC_CmdBusWidth>
 800803a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008042:	697b      	ldr	r3, [r7, #20]
 8008044:	e003      	b.n	800804e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008046:	2300      	movs	r3, #0
 8008048:	e001      	b.n	800804e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800804a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}

08008056 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008056:	b580      	push	{r7, lr}
 8008058:	b086      	sub	sp, #24
 800805a:	af00      	add	r7, sp, #0
 800805c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800805e:	2300      	movs	r3, #0
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	2300      	movs	r3, #0
 8008064:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2100      	movs	r1, #0
 800806c:	4618      	mov	r0, r3
 800806e:	f001 f817 	bl	80090a0 <SDIO_GetResponse>
 8008072:	4603      	mov	r3, r0
 8008074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800807c:	d102      	bne.n	8008084 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800807e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008082:	e02f      	b.n	80080e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	4619      	mov	r1, r3
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 f82e 	bl	80080ec <SD_FindSCR>
 8008090:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d001      	beq.n	800809c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	e023      	b.n	80080e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d01c      	beq.n	80080e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f001 f8b5 	bl	8009222 <SDMMC_CmdAppCommand>
 80080b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	e00f      	b.n	80080e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2100      	movs	r1, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 f8ee 	bl	80092ac <SDMMC_CmdBusWidth>
 80080d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080d2:	697b      	ldr	r3, [r7, #20]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d001      	beq.n	80080dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	e003      	b.n	80080e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80080dc:	2300      	movs	r3, #0
 80080de:	e001      	b.n	80080e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80080e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3718      	adds	r7, #24
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80080ec:	b590      	push	{r4, r7, lr}
 80080ee:	b08f      	sub	sp, #60	; 0x3c
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80080f6:	f7fa ff79 	bl	8002fec <HAL_GetTick>
 80080fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80080fc:	2300      	movs	r3, #0
 80080fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008100:	2300      	movs	r3, #0
 8008102:	60bb      	str	r3, [r7, #8]
 8008104:	2300      	movs	r3, #0
 8008106:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2108      	movs	r1, #8
 8008112:	4618      	mov	r0, r3
 8008114:	f001 f803 	bl	800911e <SDMMC_CmdBlockLength>
 8008118:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800811a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800811c:	2b00      	cmp	r3, #0
 800811e:	d001      	beq.n	8008124 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008122:	e0a9      	b.n	8008278 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	4619      	mov	r1, r3
 8008130:	4610      	mov	r0, r2
 8008132:	f001 f876 	bl	8009222 <SDMMC_CmdAppCommand>
 8008136:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <SD_FindSCR+0x56>
  {
    return errorstate;
 800813e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008140:	e09a      	b.n	8008278 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008142:	f04f 33ff 	mov.w	r3, #4294967295
 8008146:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008148:	2308      	movs	r3, #8
 800814a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800814c:	2330      	movs	r3, #48	; 0x30
 800814e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8008150:	2302      	movs	r3, #2
 8008152:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008154:	2300      	movs	r3, #0
 8008156:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008158:	2301      	movs	r3, #1
 800815a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f107 0210 	add.w	r2, r7, #16
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f000 ffad 	bl	80090c6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4618      	mov	r0, r3
 8008172:	f001 f8bd 	bl	80092f0 <SDMMC_CmdSendSCR>
 8008176:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	2b00      	cmp	r3, #0
 800817c:	d022      	beq.n	80081c4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800817e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008180:	e07a      	b.n	8008278 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800818c:	2b00      	cmp	r3, #0
 800818e:	d00e      	beq.n	80081ae <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6819      	ldr	r1, [r3, #0]
 8008194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008196:	009b      	lsls	r3, r3, #2
 8008198:	f107 0208 	add.w	r2, r7, #8
 800819c:	18d4      	adds	r4, r2, r3
 800819e:	4608      	mov	r0, r1
 80081a0:	f000 ff1d 	bl	8008fde <SDIO_ReadFIFO>
 80081a4:	4603      	mov	r3, r0
 80081a6:	6023      	str	r3, [r4, #0]
      index++;
 80081a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081aa:	3301      	adds	r3, #1
 80081ac:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80081ae:	f7fa ff1d 	bl	8002fec <HAL_GetTick>
 80081b2:	4602      	mov	r2, r0
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081bc:	d102      	bne.n	80081c4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80081be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081c2:	e059      	b.n	8008278 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ca:	f240 432a 	movw	r3, #1066	; 0x42a
 80081ce:	4013      	ands	r3, r2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d0d6      	beq.n	8008182 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081da:	f003 0308 	and.w	r3, r3, #8
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d005      	beq.n	80081ee <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2208      	movs	r2, #8
 80081e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80081ea:	2308      	movs	r3, #8
 80081ec:	e044      	b.n	8008278 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f4:	f003 0302 	and.w	r3, r3, #2
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d005      	beq.n	8008208 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2202      	movs	r2, #2
 8008202:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008204:	2302      	movs	r3, #2
 8008206:	e037      	b.n	8008278 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800820e:	f003 0320 	and.w	r3, r3, #32
 8008212:	2b00      	cmp	r3, #0
 8008214:	d005      	beq.n	8008222 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2220      	movs	r2, #32
 800821c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800821e:	2320      	movs	r3, #32
 8008220:	e02a      	b.n	8008278 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f240 523a 	movw	r2, #1338	; 0x53a
 800822a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	061a      	lsls	r2, r3, #24
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	021b      	lsls	r3, r3, #8
 8008234:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008238:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	0a1b      	lsrs	r3, r3, #8
 800823e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008242:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	0e1b      	lsrs	r3, r3, #24
 8008248:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800824a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800824c:	601a      	str	r2, [r3, #0]
    scr++;
 800824e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008250:	3304      	adds	r3, #4
 8008252:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	061a      	lsls	r2, r3, #24
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	021b      	lsls	r3, r3, #8
 800825c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008260:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	0a1b      	lsrs	r3, r3, #8
 8008266:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800826a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	0e1b      	lsrs	r3, r3, #24
 8008270:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008274:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	373c      	adds	r7, #60	; 0x3c
 800827c:	46bd      	mov	sp, r7
 800827e:	bd90      	pop	{r4, r7, pc}

08008280 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d101      	bne.n	8008296 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e034      	b.n	8008300 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d106      	bne.n	80082b0 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	2200      	movs	r2, #0
 80082a6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	f7f9 fc9e 	bl	8001bec <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	3308      	adds	r3, #8
 80082b8:	4619      	mov	r1, r3
 80082ba:	4610      	mov	r0, r2
 80082bc:	f000 fd60 	bl	8008d80 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6818      	ldr	r0, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	461a      	mov	r2, r3
 80082ca:	68b9      	ldr	r1, [r7, #8]
 80082cc:	f000 fdc8 	bl	8008e60 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6858      	ldr	r0, [r3, #4]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	689a      	ldr	r2, [r3, #8]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	f000 fe13 	bl	8008f08 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	68fa      	ldr	r2, [r7, #12]
 80082e8:	6892      	ldr	r2, [r2, #8]
 80082ea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	68fa      	ldr	r2, [r7, #12]
 80082f4:	6892      	ldr	r2, [r2, #8]
 80082f6:	f041 0101 	orr.w	r1, r1, #1
 80082fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3710      	adds	r7, #16
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e03f      	b.n	800839a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d106      	bne.n	8008334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7f9 fb6e 	bl	8001a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2224      	movs	r2, #36	; 0x24
 8008338:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800834a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 f829 	bl	80083a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2220      	movs	r2, #32
 8008394:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083a8:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083b2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	691b      	ldr	r3, [r3, #16]
 80083ba:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80083be:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80083c2:	68d9      	ldr	r1, [r3, #12]
 80083c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80083c8:	681a      	ldr	r2, [r3, #0]
 80083ca:	ea40 0301 	orr.w	r3, r0, r1
 80083ce:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80083d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80083d4:	689a      	ldr	r2, [r3, #8]
 80083d6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80083da:	691b      	ldr	r3, [r3, #16]
 80083dc:	431a      	orrs	r2, r3
 80083de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80083e2:	695b      	ldr	r3, [r3, #20]
 80083e4:	431a      	orrs	r2, r3
 80083e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80083ea:	69db      	ldr	r3, [r3, #28]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 80083f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68db      	ldr	r3, [r3, #12]
 80083fa:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80083fe:	f021 010c 	bic.w	r1, r1, #12
 8008402:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008406:	681a      	ldr	r2, [r3, #0]
 8008408:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800840c:	430b      	orrs	r3, r1
 800840e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008410:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800841c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008420:	6999      	ldr	r1, [r3, #24]
 8008422:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	ea40 0301 	orr.w	r3, r0, r1
 800842c:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800842e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008438:	f040 825a 	bne.w	80088f0 <UART_SetConfig+0x54c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 800843c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	4b9c      	ldr	r3, [pc, #624]	; (80086b4 <UART_SetConfig+0x310>)
 8008444:	429a      	cmp	r2, r3
 8008446:	d012      	beq.n	800846e <UART_SetConfig+0xca>
 8008448:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800844c:	681a      	ldr	r2, [r3, #0]
 800844e:	4b9a      	ldr	r3, [pc, #616]	; (80086b8 <UART_SetConfig+0x314>)
 8008450:	429a      	cmp	r2, r3
 8008452:	d00c      	beq.n	800846e <UART_SetConfig+0xca>
 8008454:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	4b98      	ldr	r3, [pc, #608]	; (80086bc <UART_SetConfig+0x318>)
 800845c:	429a      	cmp	r2, r3
 800845e:	d006      	beq.n	800846e <UART_SetConfig+0xca>
 8008460:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	4b96      	ldr	r3, [pc, #600]	; (80086c0 <UART_SetConfig+0x31c>)
 8008468:	429a      	cmp	r2, r3
 800846a:	f040 812d 	bne.w	80086c8 <UART_SetConfig+0x324>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800846e:	f7fe fb57 	bl	8006b20 <HAL_RCC_GetPCLK2Freq>
 8008472:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008476:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800847a:	2200      	movs	r2, #0
 800847c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8008480:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8008484:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8008488:	4622      	mov	r2, r4
 800848a:	462b      	mov	r3, r5
 800848c:	1891      	adds	r1, r2, r2
 800848e:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008492:	415b      	adcs	r3, r3
 8008494:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008498:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 800849c:	4621      	mov	r1, r4
 800849e:	1851      	adds	r1, r2, r1
 80084a0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80084a4:	4629      	mov	r1, r5
 80084a6:	414b      	adcs	r3, r1
 80084a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80084ac:	f04f 0200 	mov.w	r2, #0
 80084b0:	f04f 0300 	mov.w	r3, #0
 80084b4:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 80084b8:	4649      	mov	r1, r9
 80084ba:	00cb      	lsls	r3, r1, #3
 80084bc:	4641      	mov	r1, r8
 80084be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80084c2:	4641      	mov	r1, r8
 80084c4:	00ca      	lsls	r2, r1, #3
 80084c6:	4610      	mov	r0, r2
 80084c8:	4619      	mov	r1, r3
 80084ca:	4603      	mov	r3, r0
 80084cc:	4622      	mov	r2, r4
 80084ce:	189b      	adds	r3, r3, r2
 80084d0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80084d4:	462b      	mov	r3, r5
 80084d6:	460a      	mov	r2, r1
 80084d8:	eb42 0303 	adc.w	r3, r2, r3
 80084dc:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 80084e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80084ec:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 80084f0:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 80084f4:	460b      	mov	r3, r1
 80084f6:	18db      	adds	r3, r3, r3
 80084f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80084fc:	4613      	mov	r3, r2
 80084fe:	eb42 0303 	adc.w	r3, r2, r3
 8008502:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008506:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800850a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800850e:	f7f7 fe83 	bl	8000218 <__aeabi_uldivmod>
 8008512:	4602      	mov	r2, r0
 8008514:	460b      	mov	r3, r1
 8008516:	4b6b      	ldr	r3, [pc, #428]	; (80086c4 <UART_SetConfig+0x320>)
 8008518:	fba3 2302 	umull	r2, r3, r3, r2
 800851c:	095b      	lsrs	r3, r3, #5
 800851e:	011c      	lsls	r4, r3, #4
 8008520:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008524:	2200      	movs	r2, #0
 8008526:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800852a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800852e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8008532:	4642      	mov	r2, r8
 8008534:	464b      	mov	r3, r9
 8008536:	1891      	adds	r1, r2, r2
 8008538:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800853c:	415b      	adcs	r3, r3
 800853e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008542:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008546:	4641      	mov	r1, r8
 8008548:	1851      	adds	r1, r2, r1
 800854a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800854e:	4649      	mov	r1, r9
 8008550:	414b      	adcs	r3, r1
 8008552:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008556:	f04f 0200 	mov.w	r2, #0
 800855a:	f04f 0300 	mov.w	r3, #0
 800855e:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8008562:	4659      	mov	r1, fp
 8008564:	00cb      	lsls	r3, r1, #3
 8008566:	4651      	mov	r1, sl
 8008568:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800856c:	4651      	mov	r1, sl
 800856e:	00ca      	lsls	r2, r1, #3
 8008570:	4610      	mov	r0, r2
 8008572:	4619      	mov	r1, r3
 8008574:	4603      	mov	r3, r0
 8008576:	4642      	mov	r2, r8
 8008578:	189b      	adds	r3, r3, r2
 800857a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 800857e:	464b      	mov	r3, r9
 8008580:	460a      	mov	r2, r1
 8008582:	eb42 0303 	adc.w	r3, r2, r3
 8008586:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800858a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	2200      	movs	r2, #0
 8008592:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008596:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800859a:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 800859e:	460b      	mov	r3, r1
 80085a0:	18db      	adds	r3, r3, r3
 80085a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085a6:	4613      	mov	r3, r2
 80085a8:	eb42 0303 	adc.w	r3, r2, r3
 80085ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80085b0:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80085b4:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 80085b8:	f7f7 fe2e 	bl	8000218 <__aeabi_uldivmod>
 80085bc:	4602      	mov	r2, r0
 80085be:	460b      	mov	r3, r1
 80085c0:	4611      	mov	r1, r2
 80085c2:	4b40      	ldr	r3, [pc, #256]	; (80086c4 <UART_SetConfig+0x320>)
 80085c4:	fba3 2301 	umull	r2, r3, r3, r1
 80085c8:	095b      	lsrs	r3, r3, #5
 80085ca:	2264      	movs	r2, #100	; 0x64
 80085cc:	fb02 f303 	mul.w	r3, r2, r3
 80085d0:	1acb      	subs	r3, r1, r3
 80085d2:	00db      	lsls	r3, r3, #3
 80085d4:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80085d8:	4b3a      	ldr	r3, [pc, #232]	; (80086c4 <UART_SetConfig+0x320>)
 80085da:	fba3 2302 	umull	r2, r3, r3, r2
 80085de:	095b      	lsrs	r3, r3, #5
 80085e0:	005b      	lsls	r3, r3, #1
 80085e2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80085e6:	441c      	add	r4, r3
 80085e8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80085f2:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80085f6:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80085fa:	4642      	mov	r2, r8
 80085fc:	464b      	mov	r3, r9
 80085fe:	1891      	adds	r1, r2, r2
 8008600:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8008604:	415b      	adcs	r3, r3
 8008606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800860a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800860e:	4641      	mov	r1, r8
 8008610:	1851      	adds	r1, r2, r1
 8008612:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8008616:	4649      	mov	r1, r9
 8008618:	414b      	adcs	r3, r1
 800861a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800862a:	4659      	mov	r1, fp
 800862c:	00cb      	lsls	r3, r1, #3
 800862e:	4651      	mov	r1, sl
 8008630:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008634:	4651      	mov	r1, sl
 8008636:	00ca      	lsls	r2, r1, #3
 8008638:	4610      	mov	r0, r2
 800863a:	4619      	mov	r1, r3
 800863c:	4603      	mov	r3, r0
 800863e:	4642      	mov	r2, r8
 8008640:	189b      	adds	r3, r3, r2
 8008642:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008646:	464b      	mov	r3, r9
 8008648:	460a      	mov	r2, r1
 800864a:	eb42 0303 	adc.w	r3, r2, r3
 800864e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008652:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 800865e:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8008662:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8008666:	460b      	mov	r3, r1
 8008668:	18db      	adds	r3, r3, r3
 800866a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800866e:	4613      	mov	r3, r2
 8008670:	eb42 0303 	adc.w	r3, r2, r3
 8008674:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008678:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800867c:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8008680:	f7f7 fdca 	bl	8000218 <__aeabi_uldivmod>
 8008684:	4602      	mov	r2, r0
 8008686:	460b      	mov	r3, r1
 8008688:	4b0e      	ldr	r3, [pc, #56]	; (80086c4 <UART_SetConfig+0x320>)
 800868a:	fba3 1302 	umull	r1, r3, r3, r2
 800868e:	095b      	lsrs	r3, r3, #5
 8008690:	2164      	movs	r1, #100	; 0x64
 8008692:	fb01 f303 	mul.w	r3, r1, r3
 8008696:	1ad3      	subs	r3, r2, r3
 8008698:	00db      	lsls	r3, r3, #3
 800869a:	3332      	adds	r3, #50	; 0x32
 800869c:	4a09      	ldr	r2, [pc, #36]	; (80086c4 <UART_SetConfig+0x320>)
 800869e:	fba2 2303 	umull	r2, r3, r2, r3
 80086a2:	095b      	lsrs	r3, r3, #5
 80086a4:	f003 0207 	and.w	r2, r3, #7
 80086a8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4422      	add	r2, r4
 80086b0:	609a      	str	r2, [r3, #8]
 80086b2:	e35d      	b.n	8008d70 <UART_SetConfig+0x9cc>
 80086b4:	40011000 	.word	0x40011000
 80086b8:	40011400 	.word	0x40011400
 80086bc:	40011800 	.word	0x40011800
 80086c0:	40011c00 	.word	0x40011c00
 80086c4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086c8:	f7fe fa16 	bl	8006af8 <HAL_RCC_GetPCLK1Freq>
 80086cc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086d0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80086d4:	2200      	movs	r2, #0
 80086d6:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80086da:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80086de:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80086e2:	4622      	mov	r2, r4
 80086e4:	462b      	mov	r3, r5
 80086e6:	1891      	adds	r1, r2, r2
 80086e8:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80086ec:	415b      	adcs	r3, r3
 80086ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80086f2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80086f6:	4621      	mov	r1, r4
 80086f8:	eb12 0a01 	adds.w	sl, r2, r1
 80086fc:	4629      	mov	r1, r5
 80086fe:	eb43 0b01 	adc.w	fp, r3, r1
 8008702:	f04f 0200 	mov.w	r2, #0
 8008706:	f04f 0300 	mov.w	r3, #0
 800870a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800870e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008712:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008716:	4692      	mov	sl, r2
 8008718:	469b      	mov	fp, r3
 800871a:	4623      	mov	r3, r4
 800871c:	eb1a 0303 	adds.w	r3, sl, r3
 8008720:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8008724:	462b      	mov	r3, r5
 8008726:	eb4b 0303 	adc.w	r3, fp, r3
 800872a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800872e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	2200      	movs	r2, #0
 8008736:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800873a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800873e:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8008742:	460b      	mov	r3, r1
 8008744:	18db      	adds	r3, r3, r3
 8008746:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800874a:	4613      	mov	r3, r2
 800874c:	eb42 0303 	adc.w	r3, r2, r3
 8008750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008754:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8008758:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 800875c:	f7f7 fd5c 	bl	8000218 <__aeabi_uldivmod>
 8008760:	4602      	mov	r2, r0
 8008762:	460b      	mov	r3, r1
 8008764:	4b61      	ldr	r3, [pc, #388]	; (80088ec <UART_SetConfig+0x548>)
 8008766:	fba3 2302 	umull	r2, r3, r3, r2
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	011c      	lsls	r4, r3, #4
 800876e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008772:	2200      	movs	r2, #0
 8008774:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8008778:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800877c:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8008780:	4642      	mov	r2, r8
 8008782:	464b      	mov	r3, r9
 8008784:	1891      	adds	r1, r2, r2
 8008786:	67b9      	str	r1, [r7, #120]	; 0x78
 8008788:	415b      	adcs	r3, r3
 800878a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800878c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8008790:	4641      	mov	r1, r8
 8008792:	1851      	adds	r1, r2, r1
 8008794:	6739      	str	r1, [r7, #112]	; 0x70
 8008796:	4649      	mov	r1, r9
 8008798:	414b      	adcs	r3, r1
 800879a:	677b      	str	r3, [r7, #116]	; 0x74
 800879c:	f04f 0200 	mov.w	r2, #0
 80087a0:	f04f 0300 	mov.w	r3, #0
 80087a4:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80087a8:	4659      	mov	r1, fp
 80087aa:	00cb      	lsls	r3, r1, #3
 80087ac:	4651      	mov	r1, sl
 80087ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087b2:	4651      	mov	r1, sl
 80087b4:	00ca      	lsls	r2, r1, #3
 80087b6:	4610      	mov	r0, r2
 80087b8:	4619      	mov	r1, r3
 80087ba:	4603      	mov	r3, r0
 80087bc:	4642      	mov	r2, r8
 80087be:	189b      	adds	r3, r3, r2
 80087c0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80087c4:	464b      	mov	r3, r9
 80087c6:	460a      	mov	r2, r1
 80087c8:	eb42 0303 	adc.w	r3, r2, r3
 80087cc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80087d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80087dc:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80087e0:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80087e4:	460b      	mov	r3, r1
 80087e6:	18db      	adds	r3, r3, r3
 80087e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80087ea:	4613      	mov	r3, r2
 80087ec:	eb42 0303 	adc.w	r3, r2, r3
 80087f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087f2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80087f6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80087fa:	f7f7 fd0d 	bl	8000218 <__aeabi_uldivmod>
 80087fe:	4602      	mov	r2, r0
 8008800:	460b      	mov	r3, r1
 8008802:	4611      	mov	r1, r2
 8008804:	4b39      	ldr	r3, [pc, #228]	; (80088ec <UART_SetConfig+0x548>)
 8008806:	fba3 2301 	umull	r2, r3, r3, r1
 800880a:	095b      	lsrs	r3, r3, #5
 800880c:	2264      	movs	r2, #100	; 0x64
 800880e:	fb02 f303 	mul.w	r3, r2, r3
 8008812:	1acb      	subs	r3, r1, r3
 8008814:	00db      	lsls	r3, r3, #3
 8008816:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800881a:	4b34      	ldr	r3, [pc, #208]	; (80088ec <UART_SetConfig+0x548>)
 800881c:	fba3 2302 	umull	r2, r3, r3, r2
 8008820:	095b      	lsrs	r3, r3, #5
 8008822:	005b      	lsls	r3, r3, #1
 8008824:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008828:	441c      	add	r4, r3
 800882a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800882e:	2200      	movs	r2, #0
 8008830:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8008834:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8008838:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 800883c:	4642      	mov	r2, r8
 800883e:	464b      	mov	r3, r9
 8008840:	1891      	adds	r1, r2, r2
 8008842:	6639      	str	r1, [r7, #96]	; 0x60
 8008844:	415b      	adcs	r3, r3
 8008846:	667b      	str	r3, [r7, #100]	; 0x64
 8008848:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800884c:	4641      	mov	r1, r8
 800884e:	1851      	adds	r1, r2, r1
 8008850:	65b9      	str	r1, [r7, #88]	; 0x58
 8008852:	4649      	mov	r1, r9
 8008854:	414b      	adcs	r3, r1
 8008856:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008858:	f04f 0200 	mov.w	r2, #0
 800885c:	f04f 0300 	mov.w	r3, #0
 8008860:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8008864:	4659      	mov	r1, fp
 8008866:	00cb      	lsls	r3, r1, #3
 8008868:	4651      	mov	r1, sl
 800886a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800886e:	4651      	mov	r1, sl
 8008870:	00ca      	lsls	r2, r1, #3
 8008872:	4610      	mov	r0, r2
 8008874:	4619      	mov	r1, r3
 8008876:	4603      	mov	r3, r0
 8008878:	4642      	mov	r2, r8
 800887a:	189b      	adds	r3, r3, r2
 800887c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8008880:	464b      	mov	r3, r9
 8008882:	460a      	mov	r2, r1
 8008884:	eb42 0303 	adc.w	r3, r2, r3
 8008888:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 800888c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8008898:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 800889c:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80088a0:	460b      	mov	r3, r1
 80088a2:	18db      	adds	r3, r3, r3
 80088a4:	653b      	str	r3, [r7, #80]	; 0x50
 80088a6:	4613      	mov	r3, r2
 80088a8:	eb42 0303 	adc.w	r3, r2, r3
 80088ac:	657b      	str	r3, [r7, #84]	; 0x54
 80088ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80088b2:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80088b6:	f7f7 fcaf 	bl	8000218 <__aeabi_uldivmod>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	4b0b      	ldr	r3, [pc, #44]	; (80088ec <UART_SetConfig+0x548>)
 80088c0:	fba3 1302 	umull	r1, r3, r3, r2
 80088c4:	095b      	lsrs	r3, r3, #5
 80088c6:	2164      	movs	r1, #100	; 0x64
 80088c8:	fb01 f303 	mul.w	r3, r1, r3
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	3332      	adds	r3, #50	; 0x32
 80088d2:	4a06      	ldr	r2, [pc, #24]	; (80088ec <UART_SetConfig+0x548>)
 80088d4:	fba2 2303 	umull	r2, r3, r2, r3
 80088d8:	095b      	lsrs	r3, r3, #5
 80088da:	f003 0207 	and.w	r2, r3, #7
 80088de:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4422      	add	r2, r4
 80088e6:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80088e8:	e242      	b.n	8008d70 <UART_SetConfig+0x9cc>
 80088ea:	bf00      	nop
 80088ec:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80088f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	4b93      	ldr	r3, [pc, #588]	; (8008b44 <UART_SetConfig+0x7a0>)
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d012      	beq.n	8008922 <UART_SetConfig+0x57e>
 80088fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008900:	681a      	ldr	r2, [r3, #0]
 8008902:	4b91      	ldr	r3, [pc, #580]	; (8008b48 <UART_SetConfig+0x7a4>)
 8008904:	429a      	cmp	r2, r3
 8008906:	d00c      	beq.n	8008922 <UART_SetConfig+0x57e>
 8008908:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800890c:	681a      	ldr	r2, [r3, #0]
 800890e:	4b8f      	ldr	r3, [pc, #572]	; (8008b4c <UART_SetConfig+0x7a8>)
 8008910:	429a      	cmp	r2, r3
 8008912:	d006      	beq.n	8008922 <UART_SetConfig+0x57e>
 8008914:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	4b8d      	ldr	r3, [pc, #564]	; (8008b50 <UART_SetConfig+0x7ac>)
 800891c:	429a      	cmp	r2, r3
 800891e:	f040 811b 	bne.w	8008b58 <UART_SetConfig+0x7b4>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008922:	f7fe f8fd 	bl	8006b20 <HAL_RCC_GetPCLK2Freq>
 8008926:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800892a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800892e:	2200      	movs	r2, #0
 8008930:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8008934:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8008938:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800893c:	4622      	mov	r2, r4
 800893e:	462b      	mov	r3, r5
 8008940:	1891      	adds	r1, r2, r2
 8008942:	64b9      	str	r1, [r7, #72]	; 0x48
 8008944:	415b      	adcs	r3, r3
 8008946:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008948:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800894c:	4621      	mov	r1, r4
 800894e:	eb12 0801 	adds.w	r8, r2, r1
 8008952:	4629      	mov	r1, r5
 8008954:	eb43 0901 	adc.w	r9, r3, r1
 8008958:	f04f 0200 	mov.w	r2, #0
 800895c:	f04f 0300 	mov.w	r3, #0
 8008960:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008964:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008968:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800896c:	4690      	mov	r8, r2
 800896e:	4699      	mov	r9, r3
 8008970:	4623      	mov	r3, r4
 8008972:	eb18 0303 	adds.w	r3, r8, r3
 8008976:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800897a:	462b      	mov	r3, r5
 800897c:	eb49 0303 	adc.w	r3, r9, r3
 8008980:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8008984:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8008990:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80089a0:	4629      	mov	r1, r5
 80089a2:	008b      	lsls	r3, r1, #2
 80089a4:	4621      	mov	r1, r4
 80089a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089aa:	4621      	mov	r1, r4
 80089ac:	008a      	lsls	r2, r1, #2
 80089ae:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80089b2:	f7f7 fc31 	bl	8000218 <__aeabi_uldivmod>
 80089b6:	4602      	mov	r2, r0
 80089b8:	460b      	mov	r3, r1
 80089ba:	4b66      	ldr	r3, [pc, #408]	; (8008b54 <UART_SetConfig+0x7b0>)
 80089bc:	fba3 2302 	umull	r2, r3, r3, r2
 80089c0:	095b      	lsrs	r3, r3, #5
 80089c2:	011c      	lsls	r4, r3, #4
 80089c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80089c8:	2200      	movs	r2, #0
 80089ca:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80089ce:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80089d2:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80089d6:	4642      	mov	r2, r8
 80089d8:	464b      	mov	r3, r9
 80089da:	1891      	adds	r1, r2, r2
 80089dc:	6439      	str	r1, [r7, #64]	; 0x40
 80089de:	415b      	adcs	r3, r3
 80089e0:	647b      	str	r3, [r7, #68]	; 0x44
 80089e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80089e6:	4641      	mov	r1, r8
 80089e8:	1851      	adds	r1, r2, r1
 80089ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80089ec:	4649      	mov	r1, r9
 80089ee:	414b      	adcs	r3, r1
 80089f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80089f2:	f04f 0200 	mov.w	r2, #0
 80089f6:	f04f 0300 	mov.w	r3, #0
 80089fa:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80089fe:	4659      	mov	r1, fp
 8008a00:	00cb      	lsls	r3, r1, #3
 8008a02:	4651      	mov	r1, sl
 8008a04:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a08:	4651      	mov	r1, sl
 8008a0a:	00ca      	lsls	r2, r1, #3
 8008a0c:	4610      	mov	r0, r2
 8008a0e:	4619      	mov	r1, r3
 8008a10:	4603      	mov	r3, r0
 8008a12:	4642      	mov	r2, r8
 8008a14:	189b      	adds	r3, r3, r2
 8008a16:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8008a1a:	464b      	mov	r3, r9
 8008a1c:	460a      	mov	r2, r1
 8008a1e:	eb42 0303 	adc.w	r3, r2, r3
 8008a22:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8008a26:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8008a32:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8008a36:	f04f 0200 	mov.w	r2, #0
 8008a3a:	f04f 0300 	mov.w	r3, #0
 8008a3e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8008a42:	4649      	mov	r1, r9
 8008a44:	008b      	lsls	r3, r1, #2
 8008a46:	4641      	mov	r1, r8
 8008a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a4c:	4641      	mov	r1, r8
 8008a4e:	008a      	lsls	r2, r1, #2
 8008a50:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8008a54:	f7f7 fbe0 	bl	8000218 <__aeabi_uldivmod>
 8008a58:	4602      	mov	r2, r0
 8008a5a:	460b      	mov	r3, r1
 8008a5c:	4b3d      	ldr	r3, [pc, #244]	; (8008b54 <UART_SetConfig+0x7b0>)
 8008a5e:	fba3 1302 	umull	r1, r3, r3, r2
 8008a62:	095b      	lsrs	r3, r3, #5
 8008a64:	2164      	movs	r1, #100	; 0x64
 8008a66:	fb01 f303 	mul.w	r3, r1, r3
 8008a6a:	1ad3      	subs	r3, r2, r3
 8008a6c:	011b      	lsls	r3, r3, #4
 8008a6e:	3332      	adds	r3, #50	; 0x32
 8008a70:	4a38      	ldr	r2, [pc, #224]	; (8008b54 <UART_SetConfig+0x7b0>)
 8008a72:	fba2 2303 	umull	r2, r3, r2, r3
 8008a76:	095b      	lsrs	r3, r3, #5
 8008a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a7c:	441c      	add	r4, r3
 8008a7e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008a82:	2200      	movs	r2, #0
 8008a84:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 8008a88:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8008a8c:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8008a90:	4642      	mov	r2, r8
 8008a92:	464b      	mov	r3, r9
 8008a94:	1891      	adds	r1, r2, r2
 8008a96:	6339      	str	r1, [r7, #48]	; 0x30
 8008a98:	415b      	adcs	r3, r3
 8008a9a:	637b      	str	r3, [r7, #52]	; 0x34
 8008a9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008aa0:	4641      	mov	r1, r8
 8008aa2:	1851      	adds	r1, r2, r1
 8008aa4:	62b9      	str	r1, [r7, #40]	; 0x28
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	414b      	adcs	r3, r1
 8008aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008aac:	f04f 0200 	mov.w	r2, #0
 8008ab0:	f04f 0300 	mov.w	r3, #0
 8008ab4:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 8008ab8:	4659      	mov	r1, fp
 8008aba:	00cb      	lsls	r3, r1, #3
 8008abc:	4651      	mov	r1, sl
 8008abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008ac2:	4651      	mov	r1, sl
 8008ac4:	00ca      	lsls	r2, r1, #3
 8008ac6:	4610      	mov	r0, r2
 8008ac8:	4619      	mov	r1, r3
 8008aca:	4603      	mov	r3, r0
 8008acc:	4642      	mov	r2, r8
 8008ace:	189b      	adds	r3, r3, r2
 8008ad0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8008ad4:	464b      	mov	r3, r9
 8008ad6:	460a      	mov	r2, r1
 8008ad8:	eb42 0303 	adc.w	r3, r2, r3
 8008adc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8008ae0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008ae4:	685b      	ldr	r3, [r3, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8008aec:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8008af0:	f04f 0200 	mov.w	r2, #0
 8008af4:	f04f 0300 	mov.w	r3, #0
 8008af8:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8008afc:	4649      	mov	r1, r9
 8008afe:	008b      	lsls	r3, r1, #2
 8008b00:	4641      	mov	r1, r8
 8008b02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008b06:	4641      	mov	r1, r8
 8008b08:	008a      	lsls	r2, r1, #2
 8008b0a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8008b0e:	f7f7 fb83 	bl	8000218 <__aeabi_uldivmod>
 8008b12:	4602      	mov	r2, r0
 8008b14:	460b      	mov	r3, r1
 8008b16:	4b0f      	ldr	r3, [pc, #60]	; (8008b54 <UART_SetConfig+0x7b0>)
 8008b18:	fba3 1302 	umull	r1, r3, r3, r2
 8008b1c:	095b      	lsrs	r3, r3, #5
 8008b1e:	2164      	movs	r1, #100	; 0x64
 8008b20:	fb01 f303 	mul.w	r3, r1, r3
 8008b24:	1ad3      	subs	r3, r2, r3
 8008b26:	011b      	lsls	r3, r3, #4
 8008b28:	3332      	adds	r3, #50	; 0x32
 8008b2a:	4a0a      	ldr	r2, [pc, #40]	; (8008b54 <UART_SetConfig+0x7b0>)
 8008b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b30:	095b      	lsrs	r3, r3, #5
 8008b32:	f003 020f 	and.w	r2, r3, #15
 8008b36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4422      	add	r2, r4
 8008b3e:	609a      	str	r2, [r3, #8]
 8008b40:	e116      	b.n	8008d70 <UART_SetConfig+0x9cc>
 8008b42:	bf00      	nop
 8008b44:	40011000 	.word	0x40011000
 8008b48:	40011400 	.word	0x40011400
 8008b4c:	40011800 	.word	0x40011800
 8008b50:	40011c00 	.word	0x40011c00
 8008b54:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b58:	f7fd ffce 	bl	8006af8 <HAL_RCC_GetPCLK1Freq>
 8008b5c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b60:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008b64:	2200      	movs	r2, #0
 8008b66:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8008b6a:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8008b6e:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8008b72:	4642      	mov	r2, r8
 8008b74:	464b      	mov	r3, r9
 8008b76:	1891      	adds	r1, r2, r2
 8008b78:	6239      	str	r1, [r7, #32]
 8008b7a:	415b      	adcs	r3, r3
 8008b7c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008b82:	4641      	mov	r1, r8
 8008b84:	1854      	adds	r4, r2, r1
 8008b86:	4649      	mov	r1, r9
 8008b88:	eb43 0501 	adc.w	r5, r3, r1
 8008b8c:	f04f 0200 	mov.w	r2, #0
 8008b90:	f04f 0300 	mov.w	r3, #0
 8008b94:	00eb      	lsls	r3, r5, #3
 8008b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008b9a:	00e2      	lsls	r2, r4, #3
 8008b9c:	4614      	mov	r4, r2
 8008b9e:	461d      	mov	r5, r3
 8008ba0:	4643      	mov	r3, r8
 8008ba2:	18e3      	adds	r3, r4, r3
 8008ba4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008ba8:	464b      	mov	r3, r9
 8008baa:	eb45 0303 	adc.w	r3, r5, r3
 8008bae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008bb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008bbe:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8008bc2:	f04f 0200 	mov.w	r2, #0
 8008bc6:	f04f 0300 	mov.w	r3, #0
 8008bca:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8008bce:	4629      	mov	r1, r5
 8008bd0:	008b      	lsls	r3, r1, #2
 8008bd2:	4621      	mov	r1, r4
 8008bd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008bd8:	4621      	mov	r1, r4
 8008bda:	008a      	lsls	r2, r1, #2
 8008bdc:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8008be0:	f7f7 fb1a 	bl	8000218 <__aeabi_uldivmod>
 8008be4:	4602      	mov	r2, r0
 8008be6:	460b      	mov	r3, r1
 8008be8:	4b64      	ldr	r3, [pc, #400]	; (8008d7c <UART_SetConfig+0x9d8>)
 8008bea:	fba3 2302 	umull	r2, r3, r3, r2
 8008bee:	095b      	lsrs	r3, r3, #5
 8008bf0:	011c      	lsls	r4, r3, #4
 8008bf2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008bfc:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8008c00:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8008c04:	4642      	mov	r2, r8
 8008c06:	464b      	mov	r3, r9
 8008c08:	1891      	adds	r1, r2, r2
 8008c0a:	61b9      	str	r1, [r7, #24]
 8008c0c:	415b      	adcs	r3, r3
 8008c0e:	61fb      	str	r3, [r7, #28]
 8008c10:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c14:	4641      	mov	r1, r8
 8008c16:	1851      	adds	r1, r2, r1
 8008c18:	6139      	str	r1, [r7, #16]
 8008c1a:	4649      	mov	r1, r9
 8008c1c:	414b      	adcs	r3, r1
 8008c1e:	617b      	str	r3, [r7, #20]
 8008c20:	f04f 0200 	mov.w	r2, #0
 8008c24:	f04f 0300 	mov.w	r3, #0
 8008c28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008c2c:	4659      	mov	r1, fp
 8008c2e:	00cb      	lsls	r3, r1, #3
 8008c30:	4651      	mov	r1, sl
 8008c32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c36:	4651      	mov	r1, sl
 8008c38:	00ca      	lsls	r2, r1, #3
 8008c3a:	4610      	mov	r0, r2
 8008c3c:	4619      	mov	r1, r3
 8008c3e:	4603      	mov	r3, r0
 8008c40:	4642      	mov	r2, r8
 8008c42:	189b      	adds	r3, r3, r2
 8008c44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008c48:	464b      	mov	r3, r9
 8008c4a:	460a      	mov	r2, r1
 8008c4c:	eb42 0303 	adc.w	r3, r2, r3
 8008c50:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c60:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8008c64:	f04f 0200 	mov.w	r2, #0
 8008c68:	f04f 0300 	mov.w	r3, #0
 8008c6c:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8008c70:	4649      	mov	r1, r9
 8008c72:	008b      	lsls	r3, r1, #2
 8008c74:	4641      	mov	r1, r8
 8008c76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008c7a:	4641      	mov	r1, r8
 8008c7c:	008a      	lsls	r2, r1, #2
 8008c7e:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8008c82:	f7f7 fac9 	bl	8000218 <__aeabi_uldivmod>
 8008c86:	4602      	mov	r2, r0
 8008c88:	460b      	mov	r3, r1
 8008c8a:	4b3c      	ldr	r3, [pc, #240]	; (8008d7c <UART_SetConfig+0x9d8>)
 8008c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8008c90:	095b      	lsrs	r3, r3, #5
 8008c92:	2164      	movs	r1, #100	; 0x64
 8008c94:	fb01 f303 	mul.w	r3, r1, r3
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	011b      	lsls	r3, r3, #4
 8008c9c:	3332      	adds	r3, #50	; 0x32
 8008c9e:	4a37      	ldr	r2, [pc, #220]	; (8008d7c <UART_SetConfig+0x9d8>)
 8008ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ca4:	095b      	lsrs	r3, r3, #5
 8008ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008caa:	441c      	add	r4, r3
 8008cac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008cb6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008cba:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8008cbe:	4642      	mov	r2, r8
 8008cc0:	464b      	mov	r3, r9
 8008cc2:	1891      	adds	r1, r2, r2
 8008cc4:	60b9      	str	r1, [r7, #8]
 8008cc6:	415b      	adcs	r3, r3
 8008cc8:	60fb      	str	r3, [r7, #12]
 8008cca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008cce:	4641      	mov	r1, r8
 8008cd0:	1851      	adds	r1, r2, r1
 8008cd2:	6039      	str	r1, [r7, #0]
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	414b      	adcs	r3, r1
 8008cd8:	607b      	str	r3, [r7, #4]
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008ce6:	4659      	mov	r1, fp
 8008ce8:	00cb      	lsls	r3, r1, #3
 8008cea:	4651      	mov	r1, sl
 8008cec:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cf0:	4651      	mov	r1, sl
 8008cf2:	00ca      	lsls	r2, r1, #3
 8008cf4:	4610      	mov	r0, r2
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	4642      	mov	r2, r8
 8008cfc:	189b      	adds	r3, r3, r2
 8008cfe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008d02:	464b      	mov	r3, r9
 8008d04:	460a      	mov	r2, r1
 8008d06:	eb42 0303 	adc.w	r3, r2, r3
 8008d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d0e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008d1e:	f04f 0200 	mov.w	r2, #0
 8008d22:	f04f 0300 	mov.w	r3, #0
 8008d26:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8008d2a:	4649      	mov	r1, r9
 8008d2c:	008b      	lsls	r3, r1, #2
 8008d2e:	4641      	mov	r1, r8
 8008d30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d34:	4641      	mov	r1, r8
 8008d36:	008a      	lsls	r2, r1, #2
 8008d38:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008d3c:	f7f7 fa6c 	bl	8000218 <__aeabi_uldivmod>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4b0d      	ldr	r3, [pc, #52]	; (8008d7c <UART_SetConfig+0x9d8>)
 8008d46:	fba3 1302 	umull	r1, r3, r3, r2
 8008d4a:	095b      	lsrs	r3, r3, #5
 8008d4c:	2164      	movs	r1, #100	; 0x64
 8008d4e:	fb01 f303 	mul.w	r3, r1, r3
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	011b      	lsls	r3, r3, #4
 8008d56:	3332      	adds	r3, #50	; 0x32
 8008d58:	4a08      	ldr	r2, [pc, #32]	; (8008d7c <UART_SetConfig+0x9d8>)
 8008d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8008d5e:	095b      	lsrs	r3, r3, #5
 8008d60:	f003 020f 	and.w	r2, r3, #15
 8008d64:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4422      	add	r2, r4
 8008d6c:	609a      	str	r2, [r3, #8]
}
 8008d6e:	e7ff      	b.n	8008d70 <UART_SetConfig+0x9cc>
 8008d70:	bf00      	nop
 8008d72:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8008d76:	46bd      	mov	sp, r7
 8008d78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d7c:	51eb851f 	.word	0x51eb851f

08008d80 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d98:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	4b2f      	ldr	r3, [pc, #188]	; (8008e5c <FSMC_NORSRAM_Init+0xdc>)
 8008d9e:	4013      	ands	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8008da6:	683b      	ldr	r3, [r7, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008daa:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8008db0:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8008db6:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8008dbc:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 8008dc2:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8008dc8:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8008dce:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8008dd4:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8008dda:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 8008de0:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 8008de6:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 8008dec:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 8008df2:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8008df4:	68fa      	ldr	r2, [r7, #12]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	2b08      	cmp	r3, #8
 8008e00:	d103      	bne.n	8008e0a <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e08:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8008e0a:	683b      	ldr	r3, [r7, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68f9      	ldr	r1, [r7, #12]
 8008e12:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008e1e:	d10a      	bne.n	8008e36 <FSMC_NORSRAM_Init+0xb6>
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d006      	beq.n	8008e36 <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681a      	ldr	r2, [r3, #0]
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e30:	431a      	orrs	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d006      	beq.n	8008e4c <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681a      	ldr	r2, [r3, #0]
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	431a      	orrs	r2, r3
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3714      	adds	r7, #20
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr
 8008e5a:	bf00      	nop
 8008e5c:	ffc00480 	.word	0xffc00480

08008e60 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008e60:	b480      	push	{r7}
 8008e62:	b087      	sub	sp, #28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	1c5a      	adds	r2, r3, #1
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e7a:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008e82:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008e8e:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8008e90:	68bb      	ldr	r3, [r7, #8]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8008e96:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8008e9e:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	3b01      	subs	r3, #1
 8008ea6:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008ea8:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	695b      	ldr	r3, [r3, #20]
 8008eae:	3b02      	subs	r3, #2
 8008eb0:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8008eb2:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	6979      	ldr	r1, [r7, #20]
 8008ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ed4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ed8:	d10e      	bne.n	8008ef8 <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ee2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	3b01      	subs	r3, #1
 8008eea:	051b      	lsls	r3, r3, #20
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	4313      	orrs	r3, r2
 8008ef0:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	697a      	ldr	r2, [r7, #20]
 8008ef6:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8008ef8:	2300      	movs	r3, #0
}
 8008efa:	4618      	mov	r0, r3
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
	...

08008f08 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b087      	sub	sp, #28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	60f8      	str	r0, [r7, #12]
 8008f10:	60b9      	str	r1, [r7, #8]
 8008f12:	607a      	str	r2, [r7, #4]
 8008f14:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8008f16:	2300      	movs	r3, #0
 8008f18:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f20:	d122      	bne.n	8008f68 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8008f2c:	697a      	ldr	r2, [r7, #20]
 8008f2e:	4b15      	ldr	r3, [pc, #84]	; (8008f84 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8008f30:	4013      	ands	r3, r2
 8008f32:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f3e:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	689b      	ldr	r3, [r3, #8]
 8008f44:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8008f46:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	68db      	ldr	r3, [r3, #12]
 8008f4c:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8008f4e:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8008f54:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	6979      	ldr	r1, [r7, #20]
 8008f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008f66:	e005      	b.n	8008f74 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	687a      	ldr	r2, [r7, #4]
 8008f6c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8008f74:	2300      	movs	r3, #0
}
 8008f76:	4618      	mov	r0, r3
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	cff00000 	.word	0xcff00000

08008f88 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008f88:	b084      	sub	sp, #16
 8008f8a:	b480      	push	{r7}
 8008f8c:	b085      	sub	sp, #20
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	f107 001c 	add.w	r0, r7, #28
 8008f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008f9e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008fa2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008fa6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008faa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008fae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008fb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8008fc2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008fc6:	68fa      	ldr	r2, [r7, #12]
 8008fc8:	431a      	orrs	r2, r3
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008fce:	2300      	movs	r3, #0
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	3714      	adds	r7, #20
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	b004      	add	sp, #16
 8008fdc:	4770      	bx	lr

08008fde <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008fde:	b480      	push	{r7}
 8008fe0:	b083      	sub	sp, #12
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	370c      	adds	r7, #12
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff6:	4770      	bx	lr

08008ff8 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b082      	sub	sp, #8
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2203      	movs	r2, #3
 8009004:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009006:	2002      	movs	r0, #2
 8009008:	f7f9 fffc 	bl	8003004 <HAL_Delay>
  
  return HAL_OK;
 800900c:	2300      	movs	r3, #0
}
 800900e:	4618      	mov	r0, r3
 8009010:	3708      	adds	r7, #8
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f003 0303 	and.w	r3, r3, #3
}
 8009026:	4618      	mov	r0, r3
 8009028:	370c      	adds	r7, #12
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr

08009032 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009032:	b480      	push	{r7}
 8009034:	b085      	sub	sp, #20
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681a      	ldr	r2, [r3, #0]
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009050:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009056:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800905c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4313      	orrs	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800906c:	f023 030f 	bic.w	r3, r3, #15
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	431a      	orrs	r2, r3
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009078:	2300      	movs	r3, #0
}
 800907a:	4618      	mov	r0, r3
 800907c:	3714      	adds	r7, #20
 800907e:	46bd      	mov	sp, r7
 8009080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009084:	4770      	bx	lr

08009086 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009086:	b480      	push	{r7}
 8009088:	b083      	sub	sp, #12
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	691b      	ldr	r3, [r3, #16]
 8009092:	b2db      	uxtb	r3, r3
}
 8009094:	4618      	mov	r0, r3
 8009096:	370c      	adds	r7, #12
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
 80090a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	3314      	adds	r3, #20
 80090ae:	461a      	mov	r2, r3
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	4413      	add	r3, r2
 80090b4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	681b      	ldr	r3, [r3, #0]
}  
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b085      	sub	sp, #20
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80090d0:	2300      	movs	r3, #0
 80090d2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	681a      	ldr	r2, [r3, #0]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80090ec:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80090f2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80090f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009104:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	431a      	orrs	r2, r3
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009110:	2300      	movs	r3, #0

}
 8009112:	4618      	mov	r0, r3
 8009114:	3714      	adds	r7, #20
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr

0800911e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b088      	sub	sp, #32
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
 8009126:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800912c:	2310      	movs	r3, #16
 800912e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009130:	2340      	movs	r3, #64	; 0x40
 8009132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009134:	2300      	movs	r3, #0
 8009136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800913c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800913e:	f107 0308 	add.w	r3, r7, #8
 8009142:	4619      	mov	r1, r3
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7ff ff74 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800914a:	f241 3288 	movw	r2, #5000	; 0x1388
 800914e:	2110      	movs	r1, #16
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 f975 	bl	8009440 <SDMMC_GetCmdResp1>
 8009156:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009158:	69fb      	ldr	r3, [r7, #28]
}
 800915a:	4618      	mov	r0, r3
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}

08009162 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009162:	b580      	push	{r7, lr}
 8009164:	b08a      	sub	sp, #40	; 0x28
 8009166:	af00      	add	r7, sp, #0
 8009168:	60f8      	str	r0, [r7, #12]
 800916a:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009172:	2307      	movs	r3, #7
 8009174:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009176:	2340      	movs	r3, #64	; 0x40
 8009178:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800917a:	2300      	movs	r3, #0
 800917c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800917e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009182:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009184:	f107 0310 	add.w	r3, r7, #16
 8009188:	4619      	mov	r1, r3
 800918a:	68f8      	ldr	r0, [r7, #12]
 800918c:	f7ff ff51 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009190:	f241 3288 	movw	r2, #5000	; 0x1388
 8009194:	2107      	movs	r1, #7
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f000 f952 	bl	8009440 <SDMMC_GetCmdResp1>
 800919c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800919e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3728      	adds	r7, #40	; 0x28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b088      	sub	sp, #32
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80091b0:	2300      	movs	r3, #0
 80091b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80091b4:	2300      	movs	r3, #0
 80091b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80091b8:	2300      	movs	r3, #0
 80091ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091bc:	2300      	movs	r3, #0
 80091be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80091c6:	f107 0308 	add.w	r3, r7, #8
 80091ca:	4619      	mov	r1, r3
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f7ff ff30 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f90c 	bl	80093f0 <SDMMC_GetCmdError>
 80091d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091da:	69fb      	ldr	r3, [r7, #28]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3720      	adds	r7, #32
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b088      	sub	sp, #32
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80091ec:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80091f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80091f2:	2308      	movs	r3, #8
 80091f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80091f6:	2340      	movs	r3, #64	; 0x40
 80091f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80091fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009202:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009204:	f107 0308 	add.w	r3, r7, #8
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7ff ff11 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f000 faf5 	bl	8009800 <SDMMC_GetCmdResp7>
 8009216:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009218:	69fb      	ldr	r3, [r7, #28]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3720      	adds	r7, #32
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b088      	sub	sp, #32
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
 800922a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009230:	2337      	movs	r3, #55	; 0x37
 8009232:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009234:	2340      	movs	r3, #64	; 0x40
 8009236:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009238:	2300      	movs	r3, #0
 800923a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800923c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009240:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009242:	f107 0308 	add.w	r3, r7, #8
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff fef2 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800924e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009252:	2137      	movs	r1, #55	; 0x37
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f8f3 	bl	8009440 <SDMMC_GetCmdResp1>
 800925a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800925c:	69fb      	ldr	r3, [r7, #28]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3720      	adds	r7, #32
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b088      	sub	sp, #32
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
 800926e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009276:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800927a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800927c:	2329      	movs	r3, #41	; 0x29
 800927e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009280:	2340      	movs	r3, #64	; 0x40
 8009282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009284:	2300      	movs	r3, #0
 8009286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800928c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800928e:	f107 0308 	add.w	r3, r7, #8
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff fecc 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa02 	bl	80096a4 <SDMMC_GetCmdResp3>
 80092a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092a2:	69fb      	ldr	r3, [r7, #28]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3720      	adds	r7, #32
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80092ba:	2306      	movs	r3, #6
 80092bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80092be:	2340      	movs	r3, #64	; 0x40
 80092c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80092c2:	2300      	movs	r3, #0
 80092c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80092c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80092cc:	f107 0308 	add.w	r3, r7, #8
 80092d0:	4619      	mov	r1, r3
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7ff fead 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80092d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80092dc:	2106      	movs	r1, #6
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f8ae 	bl	8009440 <SDMMC_GetCmdResp1>
 80092e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80092e6:	69fb      	ldr	r3, [r7, #28]
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3720      	adds	r7, #32
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b088      	sub	sp, #32
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80092f8:	2300      	movs	r3, #0
 80092fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80092fc:	2333      	movs	r3, #51	; 0x33
 80092fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009300:	2340      	movs	r3, #64	; 0x40
 8009302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009304:	2300      	movs	r3, #0
 8009306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009308:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800930c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800930e:	f107 0308 	add.w	r3, r7, #8
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff fe8c 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800931a:	f241 3288 	movw	r2, #5000	; 0x1388
 800931e:	2133      	movs	r1, #51	; 0x33
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 f88d 	bl	8009440 <SDMMC_GetCmdResp1>
 8009326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009328:	69fb      	ldr	r3, [r7, #28]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3720      	adds	r7, #32
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}

08009332 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b088      	sub	sp, #32
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800933a:	2300      	movs	r3, #0
 800933c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800933e:	2302      	movs	r3, #2
 8009340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009342:	23c0      	movs	r3, #192	; 0xc0
 8009344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009346:	2300      	movs	r3, #0
 8009348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800934a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800934e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009350:	f107 0308 	add.w	r3, r7, #8
 8009354:	4619      	mov	r1, r3
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f7ff fe6b 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f95b 	bl	8009618 <SDMMC_GetCmdResp2>
 8009362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009364:	69fb      	ldr	r3, [r7, #28]
}
 8009366:	4618      	mov	r0, r3
 8009368:	3720      	adds	r7, #32
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}

0800936e <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800936e:	b580      	push	{r7, lr}
 8009370:	b088      	sub	sp, #32
 8009372:	af00      	add	r7, sp, #0
 8009374:	6078      	str	r0, [r7, #4]
 8009376:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800937c:	2309      	movs	r3, #9
 800937e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009380:	23c0      	movs	r3, #192	; 0xc0
 8009382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009384:	2300      	movs	r3, #0
 8009386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800938c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800938e:	f107 0308 	add.w	r3, r7, #8
 8009392:	4619      	mov	r1, r3
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7ff fe4c 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f93c 	bl	8009618 <SDMMC_GetCmdResp2>
 80093a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093a2:	69fb      	ldr	r3, [r7, #28]
}
 80093a4:	4618      	mov	r0, r3
 80093a6:	3720      	adds	r7, #32
 80093a8:	46bd      	mov	sp, r7
 80093aa:	bd80      	pop	{r7, pc}

080093ac <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80093ac:	b580      	push	{r7, lr}
 80093ae:	b088      	sub	sp, #32
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
 80093b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80093b6:	2300      	movs	r3, #0
 80093b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80093ba:	2303      	movs	r3, #3
 80093bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80093be:	2340      	movs	r3, #64	; 0x40
 80093c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80093c2:	2300      	movs	r3, #0
 80093c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80093c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80093ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80093cc:	f107 0308 	add.w	r3, r7, #8
 80093d0:	4619      	mov	r1, r3
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f7ff fe2d 	bl	8009032 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80093d8:	683a      	ldr	r2, [r7, #0]
 80093da:	2103      	movs	r1, #3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f99b 	bl	8009718 <SDMMC_GetCmdResp6>
 80093e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80093e4:	69fb      	ldr	r3, [r7, #28]
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3720      	adds	r7, #32
 80093ea:	46bd      	mov	sp, r7
 80093ec:	bd80      	pop	{r7, pc}
	...

080093f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80093f0:	b490      	push	{r4, r7}
 80093f2:	b082      	sub	sp, #8
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80093f8:	4b0f      	ldr	r3, [pc, #60]	; (8009438 <SDMMC_GetCmdError+0x48>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	4a0f      	ldr	r2, [pc, #60]	; (800943c <SDMMC_GetCmdError+0x4c>)
 80093fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009402:	0a5b      	lsrs	r3, r3, #9
 8009404:	f241 3288 	movw	r2, #5000	; 0x1388
 8009408:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800940c:	4623      	mov	r3, r4
 800940e:	1e5c      	subs	r4, r3, #1
 8009410:	2b00      	cmp	r3, #0
 8009412:	d102      	bne.n	800941a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009414:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009418:	e009      	b.n	800942e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0f2      	beq.n	800940c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	22c5      	movs	r2, #197	; 0xc5
 800942a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bc90      	pop	{r4, r7}
 8009436:	4770      	bx	lr
 8009438:	20000004 	.word	0x20000004
 800943c:	10624dd3 	.word	0x10624dd3

08009440 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009440:	b590      	push	{r4, r7, lr}
 8009442:	b087      	sub	sp, #28
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	460b      	mov	r3, r1
 800944a:	607a      	str	r2, [r7, #4]
 800944c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800944e:	4b6f      	ldr	r3, [pc, #444]	; (800960c <SDMMC_GetCmdResp1+0x1cc>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a6f      	ldr	r2, [pc, #444]	; (8009610 <SDMMC_GetCmdResp1+0x1d0>)
 8009454:	fba2 2303 	umull	r2, r3, r2, r3
 8009458:	0a5b      	lsrs	r3, r3, #9
 800945a:	687a      	ldr	r2, [r7, #4]
 800945c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009460:	4623      	mov	r3, r4
 8009462:	1e5c      	subs	r4, r3, #1
 8009464:	2b00      	cmp	r3, #0
 8009466:	d102      	bne.n	800946e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009468:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800946c:	e0c9      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009472:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009474:	697b      	ldr	r3, [r7, #20]
 8009476:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800947a:	2b00      	cmp	r3, #0
 800947c:	d0f0      	beq.n	8009460 <SDMMC_GetCmdResp1+0x20>
 800947e:	697b      	ldr	r3, [r7, #20]
 8009480:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009484:	2b00      	cmp	r3, #0
 8009486:	d1eb      	bne.n	8009460 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800948c:	f003 0304 	and.w	r3, r3, #4
 8009490:	2b00      	cmp	r3, #0
 8009492:	d004      	beq.n	800949e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2204      	movs	r2, #4
 8009498:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800949a:	2304      	movs	r3, #4
 800949c:	e0b1      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094a2:	f003 0301 	and.w	r3, r3, #1
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d004      	beq.n	80094b4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2201      	movs	r2, #1
 80094ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e0a6      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	22c5      	movs	r2, #197	; 0xc5
 80094b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80094ba:	68f8      	ldr	r0, [r7, #12]
 80094bc:	f7ff fde3 	bl	8009086 <SDIO_GetCommandResponse>
 80094c0:	4603      	mov	r3, r0
 80094c2:	461a      	mov	r2, r3
 80094c4:	7afb      	ldrb	r3, [r7, #11]
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d001      	beq.n	80094ce <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e099      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80094ce:	2100      	movs	r1, #0
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f7ff fde5 	bl	80090a0 <SDIO_GetResponse>
 80094d6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80094d8:	693a      	ldr	r2, [r7, #16]
 80094da:	4b4e      	ldr	r3, [pc, #312]	; (8009614 <SDMMC_GetCmdResp1+0x1d4>)
 80094dc:	4013      	ands	r3, r2
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d101      	bne.n	80094e6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80094e2:	2300      	movs	r3, #0
 80094e4:	e08d      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	da02      	bge.n	80094f2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80094ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80094f0:	e087      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d001      	beq.n	8009500 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80094fc:	2340      	movs	r3, #64	; 0x40
 80094fe:	e080      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009506:	2b00      	cmp	r3, #0
 8009508:	d001      	beq.n	800950e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800950a:	2380      	movs	r3, #128	; 0x80
 800950c:	e079      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d002      	beq.n	800951e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009518:	f44f 7380 	mov.w	r3, #256	; 0x100
 800951c:	e071      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d002      	beq.n	800952e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009528:	f44f 7300 	mov.w	r3, #512	; 0x200
 800952c:	e069      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009538:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800953c:	e061      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009548:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800954c:	e059      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d002      	beq.n	800955e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800955c:	e051      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800955e:	693b      	ldr	r3, [r7, #16]
 8009560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009564:	2b00      	cmp	r3, #0
 8009566:	d002      	beq.n	800956e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009568:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800956c:	e049      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009574:	2b00      	cmp	r3, #0
 8009576:	d002      	beq.n	800957e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009578:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800957c:	e041      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800957e:	693b      	ldr	r3, [r7, #16]
 8009580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009588:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800958c:	e039      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009594:	2b00      	cmp	r3, #0
 8009596:	d002      	beq.n	800959e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009598:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800959c:	e031      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d002      	beq.n	80095ae <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80095a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80095ac:	e029      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d002      	beq.n	80095be <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80095b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80095bc:	e021      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d002      	beq.n	80095ce <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80095c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80095cc:	e019      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d002      	beq.n	80095de <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80095d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80095dc:	e011      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d002      	beq.n	80095ee <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80095e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80095ec:	e009      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	f003 0308 	and.w	r3, r3, #8
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d002      	beq.n	80095fe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80095f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80095fc:	e001      	b.n	8009602 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009602:	4618      	mov	r0, r3
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	bd90      	pop	{r4, r7, pc}
 800960a:	bf00      	nop
 800960c:	20000004 	.word	0x20000004
 8009610:	10624dd3 	.word	0x10624dd3
 8009614:	fdffe008 	.word	0xfdffe008

08009618 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009618:	b490      	push	{r4, r7}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009620:	4b1e      	ldr	r3, [pc, #120]	; (800969c <SDMMC_GetCmdResp2+0x84>)
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1e      	ldr	r2, [pc, #120]	; (80096a0 <SDMMC_GetCmdResp2+0x88>)
 8009626:	fba2 2303 	umull	r2, r3, r2, r3
 800962a:	0a5b      	lsrs	r3, r3, #9
 800962c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009630:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009634:	4623      	mov	r3, r4
 8009636:	1e5c      	subs	r4, r3, #1
 8009638:	2b00      	cmp	r3, #0
 800963a:	d102      	bne.n	8009642 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800963c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009640:	e026      	b.n	8009690 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009646:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800964e:	2b00      	cmp	r3, #0
 8009650:	d0f0      	beq.n	8009634 <SDMMC_GetCmdResp2+0x1c>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009658:	2b00      	cmp	r3, #0
 800965a:	d1eb      	bne.n	8009634 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009660:	f003 0304 	and.w	r3, r3, #4
 8009664:	2b00      	cmp	r3, #0
 8009666:	d004      	beq.n	8009672 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2204      	movs	r2, #4
 800966c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800966e:	2304      	movs	r3, #4
 8009670:	e00e      	b.n	8009690 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009676:	f003 0301 	and.w	r3, r3, #1
 800967a:	2b00      	cmp	r3, #0
 800967c:	d004      	beq.n	8009688 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2201      	movs	r2, #1
 8009682:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009684:	2301      	movs	r3, #1
 8009686:	e003      	b.n	8009690 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	22c5      	movs	r2, #197	; 0xc5
 800968c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bc90      	pop	{r4, r7}
 8009698:	4770      	bx	lr
 800969a:	bf00      	nop
 800969c:	20000004 	.word	0x20000004
 80096a0:	10624dd3 	.word	0x10624dd3

080096a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80096a4:	b490      	push	{r4, r7}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80096ac:	4b18      	ldr	r3, [pc, #96]	; (8009710 <SDMMC_GetCmdResp3+0x6c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	4a18      	ldr	r2, [pc, #96]	; (8009714 <SDMMC_GetCmdResp3+0x70>)
 80096b2:	fba2 2303 	umull	r2, r3, r2, r3
 80096b6:	0a5b      	lsrs	r3, r3, #9
 80096b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80096bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80096c0:	4623      	mov	r3, r4
 80096c2:	1e5c      	subs	r4, r3, #1
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d102      	bne.n	80096ce <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096cc:	e01b      	b.n	8009706 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d0f0      	beq.n	80096c0 <SDMMC_GetCmdResp3+0x1c>
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1eb      	bne.n	80096c0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ec:	f003 0304 	and.w	r3, r3, #4
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d004      	beq.n	80096fe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	2204      	movs	r2, #4
 80096f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80096fa:	2304      	movs	r3, #4
 80096fc:	e003      	b.n	8009706 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	22c5      	movs	r2, #197	; 0xc5
 8009702:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009704:	2300      	movs	r3, #0
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bc90      	pop	{r4, r7}
 800970e:	4770      	bx	lr
 8009710:	20000004 	.word	0x20000004
 8009714:	10624dd3 	.word	0x10624dd3

08009718 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009718:	b590      	push	{r4, r7, lr}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	60f8      	str	r0, [r7, #12]
 8009720:	460b      	mov	r3, r1
 8009722:	607a      	str	r2, [r7, #4]
 8009724:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009726:	4b34      	ldr	r3, [pc, #208]	; (80097f8 <SDMMC_GetCmdResp6+0xe0>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4a34      	ldr	r2, [pc, #208]	; (80097fc <SDMMC_GetCmdResp6+0xe4>)
 800972c:	fba2 2303 	umull	r2, r3, r2, r3
 8009730:	0a5b      	lsrs	r3, r3, #9
 8009732:	f241 3288 	movw	r2, #5000	; 0x1388
 8009736:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800973a:	4623      	mov	r3, r4
 800973c:	1e5c      	subs	r4, r3, #1
 800973e:	2b00      	cmp	r3, #0
 8009740:	d102      	bne.n	8009748 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009742:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009746:	e052      	b.n	80097ee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800974c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009754:	2b00      	cmp	r3, #0
 8009756:	d0f0      	beq.n	800973a <SDMMC_GetCmdResp6+0x22>
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800975e:	2b00      	cmp	r3, #0
 8009760:	d1eb      	bne.n	800973a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	f003 0304 	and.w	r3, r3, #4
 800976a:	2b00      	cmp	r3, #0
 800976c:	d004      	beq.n	8009778 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2204      	movs	r2, #4
 8009772:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009774:	2304      	movs	r3, #4
 8009776:	e03a      	b.n	80097ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800977c:	f003 0301 	and.w	r3, r3, #1
 8009780:	2b00      	cmp	r3, #0
 8009782:	d004      	beq.n	800978e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2201      	movs	r2, #1
 8009788:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800978a:	2301      	movs	r3, #1
 800978c:	e02f      	b.n	80097ee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800978e:	68f8      	ldr	r0, [r7, #12]
 8009790:	f7ff fc79 	bl	8009086 <SDIO_GetCommandResponse>
 8009794:	4603      	mov	r3, r0
 8009796:	461a      	mov	r2, r3
 8009798:	7afb      	ldrb	r3, [r7, #11]
 800979a:	4293      	cmp	r3, r2
 800979c:	d001      	beq.n	80097a2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800979e:	2301      	movs	r3, #1
 80097a0:	e025      	b.n	80097ee <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	22c5      	movs	r2, #197	; 0xc5
 80097a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80097a8:	2100      	movs	r1, #0
 80097aa:	68f8      	ldr	r0, [r7, #12]
 80097ac:	f7ff fc78 	bl	80090a0 <SDIO_GetResponse>
 80097b0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d106      	bne.n	80097ca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	0c1b      	lsrs	r3, r3, #16
 80097c0:	b29a      	uxth	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80097c6:	2300      	movs	r3, #0
 80097c8:	e011      	b.n	80097ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80097ca:	693b      	ldr	r3, [r7, #16]
 80097cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d002      	beq.n	80097da <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80097d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80097d8:	e009      	b.n	80097ee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d002      	beq.n	80097ea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80097e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80097e8:	e001      	b.n	80097ee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80097ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	bd90      	pop	{r4, r7, pc}
 80097f6:	bf00      	nop
 80097f8:	20000004 	.word	0x20000004
 80097fc:	10624dd3 	.word	0x10624dd3

08009800 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009800:	b490      	push	{r4, r7}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009808:	4b21      	ldr	r3, [pc, #132]	; (8009890 <SDMMC_GetCmdResp7+0x90>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a21      	ldr	r2, [pc, #132]	; (8009894 <SDMMC_GetCmdResp7+0x94>)
 800980e:	fba2 2303 	umull	r2, r3, r2, r3
 8009812:	0a5b      	lsrs	r3, r3, #9
 8009814:	f241 3288 	movw	r2, #5000	; 0x1388
 8009818:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800981c:	4623      	mov	r3, r4
 800981e:	1e5c      	subs	r4, r3, #1
 8009820:	2b00      	cmp	r3, #0
 8009822:	d102      	bne.n	800982a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009828:	e02c      	b.n	8009884 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800982e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009836:	2b00      	cmp	r3, #0
 8009838:	d0f0      	beq.n	800981c <SDMMC_GetCmdResp7+0x1c>
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1eb      	bne.n	800981c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009848:	f003 0304 	and.w	r3, r3, #4
 800984c:	2b00      	cmp	r3, #0
 800984e:	d004      	beq.n	800985a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2204      	movs	r2, #4
 8009854:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009856:	2304      	movs	r3, #4
 8009858:	e014      	b.n	8009884 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	d004      	beq.n	8009870 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800986c:	2301      	movs	r3, #1
 800986e:	e009      	b.n	8009884 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009878:	2b00      	cmp	r3, #0
 800987a:	d002      	beq.n	8009882 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2240      	movs	r2, #64	; 0x40
 8009880:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009882:	2300      	movs	r3, #0
  
}
 8009884:	4618      	mov	r0, r3
 8009886:	3710      	adds	r7, #16
 8009888:	46bd      	mov	sp, r7
 800988a:	bc90      	pop	{r4, r7}
 800988c:	4770      	bx	lr
 800988e:	bf00      	nop
 8009890:	20000004 	.word	0x20000004
 8009894:	10624dd3 	.word	0x10624dd3

08009898 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009898:	b084      	sub	sp, #16
 800989a:	b580      	push	{r7, lr}
 800989c:	b084      	sub	sp, #16
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
 80098a2:	f107 001c 	add.w	r0, r7, #28
 80098a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80098aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ac:	2b01      	cmp	r3, #1
 80098ae:	d122      	bne.n	80098f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80098c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	68db      	ldr	r3, [r3, #12]
 80098d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80098d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d105      	bne.n	80098ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	68db      	ldr	r3, [r3, #12]
 80098e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f000 f94a 	bl	8009b84 <USB_CoreReset>
 80098f0:	4603      	mov	r3, r0
 80098f2:	73fb      	strb	r3, [r7, #15]
 80098f4:	e01a      	b.n	800992c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	68db      	ldr	r3, [r3, #12]
 80098fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 f93e 	bl	8009b84 <USB_CoreReset>
 8009908:	4603      	mov	r3, r0
 800990a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800990c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800990e:	2b00      	cmp	r3, #0
 8009910:	d106      	bne.n	8009920 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009916:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	639a      	str	r2, [r3, #56]	; 0x38
 800991e:	e005      	b.n	800992c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009924:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	2b01      	cmp	r3, #1
 8009930:	d10b      	bne.n	800994a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	689b      	ldr	r3, [r3, #8]
 8009936:	f043 0206 	orr.w	r2, r3, #6
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	689b      	ldr	r3, [r3, #8]
 8009942:	f043 0220 	orr.w	r2, r3, #32
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800994a:	7bfb      	ldrb	r3, [r7, #15]
}
 800994c:	4618      	mov	r0, r3
 800994e:	3710      	adds	r7, #16
 8009950:	46bd      	mov	sp, r7
 8009952:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009956:	b004      	add	sp, #16
 8009958:	4770      	bx	lr

0800995a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800995a:	b480      	push	{r7}
 800995c:	b083      	sub	sp, #12
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	f043 0201 	orr.w	r2, r3, #1
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800996e:	2300      	movs	r3, #0
}
 8009970:	4618      	mov	r0, r3
 8009972:	370c      	adds	r7, #12
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	689b      	ldr	r3, [r3, #8]
 8009988:	f023 0201 	bic.w	r2, r3, #1
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	370c      	adds	r7, #12
 8009996:	46bd      	mov	sp, r7
 8009998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999c:	4770      	bx	lr

0800999e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b082      	sub	sp, #8
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	460b      	mov	r3, r1
 80099a8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	68db      	ldr	r3, [r3, #12]
 80099ae:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099b6:	78fb      	ldrb	r3, [r7, #3]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	d106      	bne.n	80099ca <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	60da      	str	r2, [r3, #12]
 80099c8:	e00b      	b.n	80099e2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80099ca:	78fb      	ldrb	r3, [r7, #3]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d106      	bne.n	80099de <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	68db      	ldr	r3, [r3, #12]
 80099d4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	60da      	str	r2, [r3, #12]
 80099dc:	e001      	b.n	80099e2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e003      	b.n	80099ea <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80099e2:	2032      	movs	r0, #50	; 0x32
 80099e4:	f7f9 fb0e 	bl	8003004 <HAL_Delay>

  return HAL_OK;
 80099e8:	2300      	movs	r3, #0
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3708      	adds	r7, #8
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}
	...

080099f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b085      	sub	sp, #20
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80099fe:	2300      	movs	r3, #0
 8009a00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	019b      	lsls	r3, r3, #6
 8009a06:	f043 0220 	orr.w	r2, r3, #32
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	3301      	adds	r3, #1
 8009a12:	60fb      	str	r3, [r7, #12]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	4a09      	ldr	r2, [pc, #36]	; (8009a3c <USB_FlushTxFifo+0x48>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d901      	bls.n	8009a20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8009a1c:	2303      	movs	r3, #3
 8009a1e:	e006      	b.n	8009a2e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	691b      	ldr	r3, [r3, #16]
 8009a24:	f003 0320 	and.w	r3, r3, #32
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	d0f0      	beq.n	8009a0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3714      	adds	r7, #20
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
 8009a3a:	bf00      	nop
 8009a3c:	00030d40 	.word	0x00030d40

08009a40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b085      	sub	sp, #20
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2210      	movs	r2, #16
 8009a50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	3301      	adds	r3, #1
 8009a56:	60fb      	str	r3, [r7, #12]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	4a09      	ldr	r2, [pc, #36]	; (8009a80 <USB_FlushRxFifo+0x40>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d901      	bls.n	8009a64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8009a60:	2303      	movs	r3, #3
 8009a62:	e006      	b.n	8009a72 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	691b      	ldr	r3, [r3, #16]
 8009a68:	f003 0310 	and.w	r3, r3, #16
 8009a6c:	2b10      	cmp	r3, #16
 8009a6e:	d0f0      	beq.n	8009a52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr
 8009a7e:	bf00      	nop
 8009a80:	00030d40 	.word	0x00030d40

08009a84 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b089      	sub	sp, #36	; 0x24
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	4611      	mov	r1, r2
 8009a90:	461a      	mov	r2, r3
 8009a92:	460b      	mov	r3, r1
 8009a94:	71fb      	strb	r3, [r7, #7]
 8009a96:	4613      	mov	r3, r2
 8009a98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009aa2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d11a      	bne.n	8009ae0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009aaa:	88bb      	ldrh	r3, [r7, #4]
 8009aac:	3303      	adds	r3, #3
 8009aae:	089b      	lsrs	r3, r3, #2
 8009ab0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	61bb      	str	r3, [r7, #24]
 8009ab6:	e00f      	b.n	8009ad8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009ab8:	79fb      	ldrb	r3, [r7, #7]
 8009aba:	031a      	lsls	r2, r3, #12
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	4413      	add	r3, r2
 8009ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	3304      	adds	r3, #4
 8009ad0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	3301      	adds	r3, #1
 8009ad6:	61bb      	str	r3, [r7, #24]
 8009ad8:	69ba      	ldr	r2, [r7, #24]
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d3eb      	bcc.n	8009ab8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ae0:	2300      	movs	r3, #0
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	3724      	adds	r7, #36	; 0x24
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009aee:	b480      	push	{r7}
 8009af0:	b089      	sub	sp, #36	; 0x24
 8009af2:	af00      	add	r7, sp, #0
 8009af4:	60f8      	str	r0, [r7, #12]
 8009af6:	60b9      	str	r1, [r7, #8]
 8009af8:	4613      	mov	r3, r2
 8009afa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8009b00:	68bb      	ldr	r3, [r7, #8]
 8009b02:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8009b04:	88fb      	ldrh	r3, [r7, #6]
 8009b06:	3303      	adds	r3, #3
 8009b08:	089b      	lsrs	r3, r3, #2
 8009b0a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	61bb      	str	r3, [r7, #24]
 8009b10:	e00b      	b.n	8009b2a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009b12:	697b      	ldr	r3, [r7, #20]
 8009b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b18:	681a      	ldr	r2, [r3, #0]
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	3304      	adds	r3, #4
 8009b22:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009b24:	69bb      	ldr	r3, [r7, #24]
 8009b26:	3301      	adds	r3, #1
 8009b28:	61bb      	str	r3, [r7, #24]
 8009b2a:	69ba      	ldr	r2, [r7, #24]
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d3ef      	bcc.n	8009b12 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8009b32:	69fb      	ldr	r3, [r7, #28]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3724      	adds	r7, #36	; 0x24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	695b      	ldr	r3, [r3, #20]
 8009b4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	699b      	ldr	r3, [r3, #24]
 8009b52:	68fa      	ldr	r2, [r7, #12]
 8009b54:	4013      	ands	r3, r2
 8009b56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009b58:	68fb      	ldr	r3, [r7, #12]
}
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	3714      	adds	r7, #20
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b083      	sub	sp, #12
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	695b      	ldr	r3, [r3, #20]
 8009b72:	f003 0301 	and.w	r3, r3, #1
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	370c      	adds	r7, #12
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
	...

08009b84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b085      	sub	sp, #20
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	3301      	adds	r3, #1
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	4a13      	ldr	r2, [pc, #76]	; (8009be8 <USB_CoreReset+0x64>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d901      	bls.n	8009ba2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	e01b      	b.n	8009bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	daf2      	bge.n	8009b90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
 8009bb2:	f043 0201 	orr.w	r2, r3, #1
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	60fb      	str	r3, [r7, #12]
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4a09      	ldr	r2, [pc, #36]	; (8009be8 <USB_CoreReset+0x64>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d901      	bls.n	8009bcc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009bc8:	2303      	movs	r3, #3
 8009bca:	e006      	b.n	8009bda <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f003 0301 	and.w	r3, r3, #1
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d0f0      	beq.n	8009bba <USB_CoreReset+0x36>

  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3714      	adds	r7, #20
 8009bde:	46bd      	mov	sp, r7
 8009be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be4:	4770      	bx	lr
 8009be6:	bf00      	nop
 8009be8:	00030d40 	.word	0x00030d40

08009bec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009bec:	b084      	sub	sp, #16
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	f107 001c 	add.w	r0, r7, #28
 8009bfa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c08:	461a      	mov	r2, r3
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c1e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d018      	beq.n	8009c64 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	2b01      	cmp	r3, #1
 8009c36:	d10a      	bne.n	8009c4e <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	68ba      	ldr	r2, [r7, #8]
 8009c42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c46:	f043 0304 	orr.w	r3, r3, #4
 8009c4a:	6013      	str	r3, [r2, #0]
 8009c4c:	e014      	b.n	8009c78 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	68ba      	ldr	r2, [r7, #8]
 8009c58:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c5c:	f023 0304 	bic.w	r3, r3, #4
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	e009      	b.n	8009c78 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009c72:	f023 0304 	bic.w	r3, r3, #4
 8009c76:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8009c78:	2110      	movs	r1, #16
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f7ff feba 	bl	80099f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f7ff fedd 	bl	8009a40 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	e015      	b.n	8009cb8 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	015a      	lsls	r2, r3, #5
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	4413      	add	r3, r2
 8009c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009c98:	461a      	mov	r2, r3
 8009c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8009c9e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	015a      	lsls	r2, r3, #5
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009cac:	461a      	mov	r2, r3
 8009cae:	2300      	movs	r3, #0
 8009cb0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	3301      	adds	r3, #1
 8009cb6:	60fb      	str	r3, [r7, #12]
 8009cb8:	6a3b      	ldr	r3, [r7, #32]
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	429a      	cmp	r2, r3
 8009cbe:	d3e5      	bcc.n	8009c8c <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8009cc0:	2101      	movs	r1, #1
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f8ac 	bl	8009e20 <USB_DriveVbus>

  HAL_Delay(200U);
 8009cc8:	20c8      	movs	r0, #200	; 0xc8
 8009cca:	f7f9 f99b 	bl	8003004 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8009cda:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00b      	beq.n	8009d00 <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009cee:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	4a14      	ldr	r2, [pc, #80]	; (8009d44 <USB_HostInit+0x158>)
 8009cf4:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a13      	ldr	r2, [pc, #76]	; (8009d48 <USB_HostInit+0x15c>)
 8009cfa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8009cfe:	e009      	b.n	8009d14 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2280      	movs	r2, #128	; 0x80
 8009d04:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a10      	ldr	r2, [pc, #64]	; (8009d4c <USB_HostInit+0x160>)
 8009d0a:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	4a10      	ldr	r2, [pc, #64]	; (8009d50 <USB_HostInit+0x164>)
 8009d10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d105      	bne.n	8009d26 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	f043 0210 	orr.w	r2, r3, #16
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	699a      	ldr	r2, [r3, #24]
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	; (8009d54 <USB_HostInit+0x168>)
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8009d32:	2300      	movs	r3, #0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3710      	adds	r7, #16
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009d3e:	b004      	add	sp, #16
 8009d40:	4770      	bx	lr
 8009d42:	bf00      	nop
 8009d44:	01000200 	.word	0x01000200
 8009d48:	00e00300 	.word	0x00e00300
 8009d4c:	00600080 	.word	0x00600080
 8009d50:	004000e0 	.word	0x004000e0
 8009d54:	a3200008 	.word	0xa3200008

08009d58 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b085      	sub	sp, #20
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
 8009d60:	460b      	mov	r3, r1
 8009d62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009d76:	f023 0303 	bic.w	r3, r3, #3
 8009d7a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	f003 0303 	and.w	r3, r3, #3
 8009d8a:	68f9      	ldr	r1, [r7, #12]
 8009d8c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009d90:	4313      	orrs	r3, r2
 8009d92:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009d94:	78fb      	ldrb	r3, [r7, #3]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d107      	bne.n	8009daa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009da0:	461a      	mov	r2, r3
 8009da2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009da6:	6053      	str	r3, [r2, #4]
 8009da8:	e009      	b.n	8009dbe <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8009daa:	78fb      	ldrb	r3, [r7, #3]
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d106      	bne.n	8009dbe <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009db6:	461a      	mov	r2, r3
 8009db8:	f241 7370 	movw	r3, #6000	; 0x1770
 8009dbc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b084      	sub	sp, #16
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009dec:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	68fa      	ldr	r2, [r7, #12]
 8009df2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009dfa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009dfc:	2064      	movs	r0, #100	; 0x64
 8009dfe:	f7f9 f901 	bl	8003004 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e0e:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009e10:	200a      	movs	r0, #10
 8009e12:	f7f9 f8f7 	bl	8003004 <HAL_Delay>

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009e20:	b480      	push	{r7}
 8009e22:	b085      	sub	sp, #20
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	460b      	mov	r3, r1
 8009e2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009e30:	2300      	movs	r3, #0
 8009e32:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009e3e:	68bb      	ldr	r3, [r7, #8]
 8009e40:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009e44:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d109      	bne.n	8009e64 <USB_DriveVbus+0x44>
 8009e50:	78fb      	ldrb	r3, [r7, #3]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d106      	bne.n	8009e64 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	68fa      	ldr	r2, [r7, #12]
 8009e5a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e5e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e62:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009e64:	68bb      	ldr	r3, [r7, #8]
 8009e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009e6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e6e:	d109      	bne.n	8009e84 <USB_DriveVbus+0x64>
 8009e70:	78fb      	ldrb	r3, [r7, #3]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d106      	bne.n	8009e84 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	68fa      	ldr	r2, [r7, #12]
 8009e7a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8009e7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e82:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3714      	adds	r7, #20
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b085      	sub	sp, #20
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	0c5b      	lsrs	r3, r3, #17
 8009eb0:	f003 0303 	and.w	r3, r3, #3
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3714      	adds	r7, #20
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebe:	4770      	bx	lr

08009ec0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8009ec0:	b480      	push	{r7}
 8009ec2:	b085      	sub	sp, #20
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	b29b      	uxth	r3, r3
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3714      	adds	r7, #20
 8009eda:	46bd      	mov	sp, r7
 8009edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee0:	4770      	bx	lr
	...

08009ee4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b087      	sub	sp, #28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
 8009eec:	4608      	mov	r0, r1
 8009eee:	4611      	mov	r1, r2
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	70fb      	strb	r3, [r7, #3]
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	70bb      	strb	r3, [r7, #2]
 8009efa:	4613      	mov	r3, r2
 8009efc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8009f06:	78fb      	ldrb	r3, [r7, #3]
 8009f08:	015a      	lsls	r2, r3, #5
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	4413      	add	r3, r2
 8009f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f12:	461a      	mov	r2, r3
 8009f14:	f04f 33ff 	mov.w	r3, #4294967295
 8009f18:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009f1a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009f1e:	2b03      	cmp	r3, #3
 8009f20:	d87e      	bhi.n	800a020 <USB_HC_Init+0x13c>
 8009f22:	a201      	add	r2, pc, #4	; (adr r2, 8009f28 <USB_HC_Init+0x44>)
 8009f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f28:	08009f39 	.word	0x08009f39
 8009f2c:	08009fe3 	.word	0x08009fe3
 8009f30:	08009f39 	.word	0x08009f39
 8009f34:	08009fa5 	.word	0x08009fa5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009f38:	78fb      	ldrb	r3, [r7, #3]
 8009f3a:	015a      	lsls	r2, r3, #5
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f44:	461a      	mov	r2, r3
 8009f46:	f240 439d 	movw	r3, #1181	; 0x49d
 8009f4a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009f4c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	da10      	bge.n	8009f76 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009f54:	78fb      	ldrb	r3, [r7, #3]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	78fa      	ldrb	r2, [r7, #3]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	68ba      	ldr	r2, [r7, #8]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f72:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8009f74:	e057      	b.n	800a026 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d051      	beq.n	800a026 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8009f82:	78fb      	ldrb	r3, [r7, #3]
 8009f84:	015a      	lsls	r2, r3, #5
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	4413      	add	r3, r2
 8009f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009f8e:	68db      	ldr	r3, [r3, #12]
 8009f90:	78fa      	ldrb	r2, [r7, #3]
 8009f92:	0151      	lsls	r1, r2, #5
 8009f94:	68ba      	ldr	r2, [r7, #8]
 8009f96:	440a      	add	r2, r1
 8009f98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009f9c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009fa0:	60d3      	str	r3, [r2, #12]
      break;
 8009fa2:	e040      	b.n	800a026 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009fa4:	78fb      	ldrb	r3, [r7, #3]
 8009fa6:	015a      	lsls	r2, r3, #5
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	4413      	add	r3, r2
 8009fac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fb0:	461a      	mov	r2, r3
 8009fb2:	f240 639d 	movw	r3, #1693	; 0x69d
 8009fb6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009fb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	da34      	bge.n	800a02a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	0151      	lsls	r1, r2, #5
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	440a      	add	r2, r1
 8009fd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fde:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009fe0:	e023      	b.n	800a02a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009fe2:	78fb      	ldrb	r3, [r7, #3]
 8009fe4:	015a      	lsls	r2, r3, #5
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	4413      	add	r3, r2
 8009fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f240 2325 	movw	r3, #549	; 0x225
 8009ff4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009ff6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	da17      	bge.n	800a02e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009ffe:	78fb      	ldrb	r3, [r7, #3]
 800a000:	015a      	lsls	r2, r3, #5
 800a002:	68bb      	ldr	r3, [r7, #8]
 800a004:	4413      	add	r3, r2
 800a006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	78fa      	ldrb	r2, [r7, #3]
 800a00e:	0151      	lsls	r1, r2, #5
 800a010:	68ba      	ldr	r2, [r7, #8]
 800a012:	440a      	add	r2, r1
 800a014:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a018:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a01c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a01e:	e006      	b.n	800a02e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	75fb      	strb	r3, [r7, #23]
      break;
 800a024:	e004      	b.n	800a030 <USB_HC_Init+0x14c>
      break;
 800a026:	bf00      	nop
 800a028:	e002      	b.n	800a030 <USB_HC_Init+0x14c>
      break;
 800a02a:	bf00      	nop
 800a02c:	e000      	b.n	800a030 <USB_HC_Init+0x14c>
      break;
 800a02e:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a036:	699a      	ldr	r2, [r3, #24]
 800a038:	78fb      	ldrb	r3, [r7, #3]
 800a03a:	f003 030f 	and.w	r3, r3, #15
 800a03e:	2101      	movs	r1, #1
 800a040:	fa01 f303 	lsl.w	r3, r1, r3
 800a044:	68b9      	ldr	r1, [r7, #8]
 800a046:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a04a:	4313      	orrs	r3, r2
 800a04c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	699b      	ldr	r3, [r3, #24]
 800a052:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a05a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	da03      	bge.n	800a06a <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a066:	613b      	str	r3, [r7, #16]
 800a068:	e001      	b.n	800a06e <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a06a:	2300      	movs	r3, #0
 800a06c:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a06e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a072:	2b02      	cmp	r3, #2
 800a074:	d103      	bne.n	800a07e <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a076:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	e001      	b.n	800a082 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a07e:	2300      	movs	r3, #0
 800a080:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a082:	787b      	ldrb	r3, [r7, #1]
 800a084:	059b      	lsls	r3, r3, #22
 800a086:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a08a:	78bb      	ldrb	r3, [r7, #2]
 800a08c:	02db      	lsls	r3, r3, #11
 800a08e:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a092:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a094:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a098:	049b      	lsls	r3, r3, #18
 800a09a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a09e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a0a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a0a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a0a6:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a0a8:	693b      	ldr	r3, [r7, #16]
 800a0aa:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a0ac:	78fb      	ldrb	r3, [r7, #3]
 800a0ae:	0159      	lsls	r1, r3, #5
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	440b      	add	r3, r1
 800a0b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0b8:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a0be:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a0c0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a0c4:	2b03      	cmp	r3, #3
 800a0c6:	d10f      	bne.n	800a0e8 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a0c8:	78fb      	ldrb	r3, [r7, #3]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	78fa      	ldrb	r2, [r7, #3]
 800a0d8:	0151      	lsls	r1, r2, #5
 800a0da:	68ba      	ldr	r2, [r7, #8]
 800a0dc:	440a      	add	r2, r1
 800a0de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a0e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a0e6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a0e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	371c      	adds	r7, #28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop

0800a0f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b08c      	sub	sp, #48	; 0x30
 800a0fc:	af02      	add	r7, sp, #8
 800a0fe:	60f8      	str	r0, [r7, #12]
 800a100:	60b9      	str	r1, [r7, #8]
 800a102:	4613      	mov	r3, r2
 800a104:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	785b      	ldrb	r3, [r3, #1]
 800a10e:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a110:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a114:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a11a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d028      	beq.n	800a174 <USB_HC_StartXfer+0x7c>
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	791b      	ldrb	r3, [r3, #4]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d124      	bne.n	800a174 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800a12a:	79fb      	ldrb	r3, [r7, #7]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d10b      	bne.n	800a148 <USB_HC_StartXfer+0x50>
 800a130:	68bb      	ldr	r3, [r7, #8]
 800a132:	795b      	ldrb	r3, [r3, #5]
 800a134:	2b01      	cmp	r3, #1
 800a136:	d107      	bne.n	800a148 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	785b      	ldrb	r3, [r3, #1]
 800a13c:	4619      	mov	r1, r3
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	f000 fa2e 	bl	800a5a0 <USB_DoPing>
      return HAL_OK;
 800a144:	2300      	movs	r3, #0
 800a146:	e113      	b.n	800a370 <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 800a148:	79fb      	ldrb	r3, [r7, #7]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d112      	bne.n	800a174 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a14e:	69fb      	ldr	r3, [r7, #28]
 800a150:	015a      	lsls	r2, r3, #5
 800a152:	6a3b      	ldr	r3, [r7, #32]
 800a154:	4413      	add	r3, r2
 800a156:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	69fa      	ldr	r2, [r7, #28]
 800a15e:	0151      	lsls	r1, r2, #5
 800a160:	6a3a      	ldr	r2, [r7, #32]
 800a162:	440a      	add	r2, r1
 800a164:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a168:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a16c:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2200      	movs	r2, #0
 800a172:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	691b      	ldr	r3, [r3, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d018      	beq.n	800a1ae <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	691b      	ldr	r3, [r3, #16]
 800a180:	68ba      	ldr	r2, [r7, #8]
 800a182:	8912      	ldrh	r2, [r2, #8]
 800a184:	4413      	add	r3, r2
 800a186:	3b01      	subs	r3, #1
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	8912      	ldrh	r2, [r2, #8]
 800a18c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a190:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800a192:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a194:	8b7b      	ldrh	r3, [r7, #26]
 800a196:	429a      	cmp	r2, r3
 800a198:	d90b      	bls.n	800a1b2 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800a19a:	8b7b      	ldrh	r3, [r7, #26]
 800a19c:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a19e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	8912      	ldrh	r2, [r2, #8]
 800a1a4:	fb03 f202 	mul.w	r2, r3, r2
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	611a      	str	r2, [r3, #16]
 800a1ac:	e001      	b.n	800a1b2 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	78db      	ldrb	r3, [r3, #3]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d006      	beq.n	800a1c8 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800a1ba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	8912      	ldrh	r2, [r2, #8]
 800a1c0:	fb03 f202 	mul.w	r2, r3, r2
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a1d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a1d2:	04d9      	lsls	r1, r3, #19
 800a1d4:	4b68      	ldr	r3, [pc, #416]	; (800a378 <USB_HC_StartXfer+0x280>)
 800a1d6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1d8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a1da:	68bb      	ldr	r3, [r7, #8]
 800a1dc:	7a9b      	ldrb	r3, [r3, #10]
 800a1de:	075b      	lsls	r3, r3, #29
 800a1e0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1e4:	69f9      	ldr	r1, [r7, #28]
 800a1e6:	0148      	lsls	r0, r1, #5
 800a1e8:	6a39      	ldr	r1, [r7, #32]
 800a1ea:	4401      	add	r1, r0
 800a1ec:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a1f0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800a1f2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a1f4:	79fb      	ldrb	r3, [r7, #7]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d009      	beq.n	800a20e <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	68d9      	ldr	r1, [r3, #12]
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	015a      	lsls	r2, r3, #5
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	4413      	add	r3, r2
 800a206:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a20a:	460a      	mov	r2, r1
 800a20c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a20e:	6a3b      	ldr	r3, [r7, #32]
 800a210:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f003 0301 	and.w	r3, r3, #1
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	bf0c      	ite	eq
 800a21e:	2301      	moveq	r3, #1
 800a220:	2300      	movne	r3, #0
 800a222:	b2db      	uxtb	r3, r3
 800a224:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	015a      	lsls	r2, r3, #5
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	4413      	add	r3, r2
 800a22e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	69fa      	ldr	r2, [r7, #28]
 800a236:	0151      	lsls	r1, r2, #5
 800a238:	6a3a      	ldr	r2, [r7, #32]
 800a23a:	440a      	add	r2, r1
 800a23c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a240:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a244:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	7e7b      	ldrb	r3, [r7, #25]
 800a256:	075b      	lsls	r3, r3, #29
 800a258:	69f9      	ldr	r1, [r7, #28]
 800a25a:	0148      	lsls	r0, r1, #5
 800a25c:	6a39      	ldr	r1, [r7, #32]
 800a25e:	4401      	add	r1, r0
 800a260:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800a264:	4313      	orrs	r3, r2
 800a266:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	015a      	lsls	r2, r3, #5
 800a26c:	6a3b      	ldr	r3, [r7, #32]
 800a26e:	4413      	add	r3, r2
 800a270:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	4a41      	ldr	r2, [pc, #260]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a278:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a27a:	4b40      	ldr	r3, [pc, #256]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a282:	4a3e      	ldr	r2, [pc, #248]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a284:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a286:	68bb      	ldr	r3, [r7, #8]
 800a288:	78db      	ldrb	r3, [r3, #3]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d006      	beq.n	800a29c <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a28e:	4b3b      	ldr	r3, [pc, #236]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a296:	4a39      	ldr	r2, [pc, #228]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	e005      	b.n	800a2a8 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a29c:	4b37      	ldr	r3, [pc, #220]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a2a4:	4a35      	ldr	r2, [pc, #212]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a2a6:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a2a8:	4b34      	ldr	r3, [pc, #208]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2b0:	4a32      	ldr	r2, [pc, #200]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a2b2:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a2b4:	69fb      	ldr	r3, [r7, #28]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	6a3b      	ldr	r3, [r7, #32]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	4b2e      	ldr	r3, [pc, #184]	; (800a37c <USB_HC_StartXfer+0x284>)
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a2c8:	79fb      	ldrb	r3, [r7, #7]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	e04e      	b.n	800a370 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	78db      	ldrb	r3, [r3, #3]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d149      	bne.n	800a36e <USB_HC_StartXfer+0x276>
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	691b      	ldr	r3, [r3, #16]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d045      	beq.n	800a36e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	79db      	ldrb	r3, [r3, #7]
 800a2e6:	2b03      	cmp	r3, #3
 800a2e8:	d830      	bhi.n	800a34c <USB_HC_StartXfer+0x254>
 800a2ea:	a201      	add	r2, pc, #4	; (adr r2, 800a2f0 <USB_HC_StartXfer+0x1f8>)
 800a2ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f0:	0800a301 	.word	0x0800a301
 800a2f4:	0800a325 	.word	0x0800a325
 800a2f8:	0800a301 	.word	0x0800a301
 800a2fc:	0800a325 	.word	0x0800a325
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	691b      	ldr	r3, [r3, #16]
 800a304:	3303      	adds	r3, #3
 800a306:	089b      	lsrs	r3, r3, #2
 800a308:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a30a:	8afa      	ldrh	r2, [r7, #22]
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a310:	b29b      	uxth	r3, r3
 800a312:	429a      	cmp	r2, r3
 800a314:	d91c      	bls.n	800a350 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	f043 0220 	orr.w	r2, r3, #32
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	619a      	str	r2, [r3, #24]
        }
        break;
 800a322:	e015      	b.n	800a350 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	691b      	ldr	r3, [r3, #16]
 800a328:	3303      	adds	r3, #3
 800a32a:	089b      	lsrs	r3, r3, #2
 800a32c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a32e:	8afa      	ldrh	r2, [r7, #22]
 800a330:	6a3b      	ldr	r3, [r7, #32]
 800a332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a336:	691b      	ldr	r3, [r3, #16]
 800a338:	b29b      	uxth	r3, r3
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d90a      	bls.n	800a354 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	699b      	ldr	r3, [r3, #24]
 800a342:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	619a      	str	r2, [r3, #24]
        }
        break;
 800a34a:	e003      	b.n	800a354 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800a34c:	bf00      	nop
 800a34e:	e002      	b.n	800a356 <USB_HC_StartXfer+0x25e>
        break;
 800a350:	bf00      	nop
 800a352:	e000      	b.n	800a356 <USB_HC_StartXfer+0x25e>
        break;
 800a354:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	68d9      	ldr	r1, [r3, #12]
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	785a      	ldrb	r2, [r3, #1]
 800a35e:	68bb      	ldr	r3, [r7, #8]
 800a360:	691b      	ldr	r3, [r3, #16]
 800a362:	b29b      	uxth	r3, r3
 800a364:	2000      	movs	r0, #0
 800a366:	9000      	str	r0, [sp, #0]
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f7ff fb8b 	bl	8009a84 <USB_WritePacket>
  }

  return HAL_OK;
 800a36e:	2300      	movs	r3, #0
}
 800a370:	4618      	mov	r0, r3
 800a372:	3728      	adds	r7, #40	; 0x28
 800a374:	46bd      	mov	sp, r7
 800a376:	bd80      	pop	{r7, pc}
 800a378:	1ff80000 	.word	0x1ff80000
 800a37c:	20000548 	.word	0x20000548

0800a380 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a380:	b480      	push	{r7}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a392:	695b      	ldr	r3, [r3, #20]
 800a394:	b29b      	uxth	r3, r3
}
 800a396:	4618      	mov	r0, r3
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b087      	sub	sp, #28
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800a3b2:	78fb      	ldrb	r3, [r7, #3]
 800a3b4:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	015a      	lsls	r2, r3, #5
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	0c9b      	lsrs	r3, r3, #18
 800a3ca:	f003 0303 	and.w	r3, r3, #3
 800a3ce:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d002      	beq.n	800a3dc <USB_HC_Halt+0x3a>
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d16c      	bne.n	800a4b6 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	015a      	lsls	r2, r3, #5
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	4413      	add	r3, r2
 800a3e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	0151      	lsls	r1, r2, #5
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	440a      	add	r2, r1
 800a3f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a3f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a3fa:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a404:	2b00      	cmp	r3, #0
 800a406:	d143      	bne.n	800a490 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	015a      	lsls	r2, r3, #5
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	4413      	add	r3, r2
 800a410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	0151      	lsls	r1, r2, #5
 800a41a:	693a      	ldr	r2, [r7, #16]
 800a41c:	440a      	add	r2, r1
 800a41e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a422:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a426:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	015a      	lsls	r2, r3, #5
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	4413      	add	r3, r2
 800a430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	68fa      	ldr	r2, [r7, #12]
 800a438:	0151      	lsls	r1, r2, #5
 800a43a:	693a      	ldr	r2, [r7, #16]
 800a43c:	440a      	add	r2, r1
 800a43e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a446:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	015a      	lsls	r2, r3, #5
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	4413      	add	r3, r2
 800a450:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68fa      	ldr	r2, [r7, #12]
 800a458:	0151      	lsls	r1, r2, #5
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	440a      	add	r2, r1
 800a45e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a462:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a466:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a468:	697b      	ldr	r3, [r7, #20]
 800a46a:	3301      	adds	r3, #1
 800a46c:	617b      	str	r3, [r7, #20]
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a474:	d81d      	bhi.n	800a4b2 <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	015a      	lsls	r2, r3, #5
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	4413      	add	r3, r2
 800a47e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a488:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a48c:	d0ec      	beq.n	800a468 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a48e:	e080      	b.n	800a592 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	015a      	lsls	r2, r3, #5
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	4413      	add	r3, r2
 800a498:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	68fa      	ldr	r2, [r7, #12]
 800a4a0:	0151      	lsls	r1, r2, #5
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	440a      	add	r2, r1
 800a4a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a4ae:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a4b0:	e06f      	b.n	800a592 <USB_HC_Halt+0x1f0>
          break;
 800a4b2:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a4b4:	e06d      	b.n	800a592 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	693a      	ldr	r2, [r7, #16]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a4d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a4d4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4dc:	691b      	ldr	r3, [r3, #16]
 800a4de:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d143      	bne.n	800a56e <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	015a      	lsls	r2, r3, #5
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68fa      	ldr	r2, [r7, #12]
 800a4f6:	0151      	lsls	r1, r2, #5
 800a4f8:	693a      	ldr	r2, [r7, #16]
 800a4fa:	440a      	add	r2, r1
 800a4fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a504:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	015a      	lsls	r2, r3, #5
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	4413      	add	r3, r2
 800a50e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	68fa      	ldr	r2, [r7, #12]
 800a516:	0151      	lsls	r1, r2, #5
 800a518:	693a      	ldr	r2, [r7, #16]
 800a51a:	440a      	add	r2, r1
 800a51c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a520:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a524:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	015a      	lsls	r2, r3, #5
 800a52a:	693b      	ldr	r3, [r7, #16]
 800a52c:	4413      	add	r3, r2
 800a52e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	68fa      	ldr	r2, [r7, #12]
 800a536:	0151      	lsls	r1, r2, #5
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	440a      	add	r2, r1
 800a53c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a540:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a544:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800a546:	697b      	ldr	r3, [r7, #20]
 800a548:	3301      	adds	r3, #1
 800a54a:	617b      	str	r3, [r7, #20]
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a552:	d81d      	bhi.n	800a590 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	015a      	lsls	r2, r3, #5
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	4413      	add	r3, r2
 800a55c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a566:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a56a:	d0ec      	beq.n	800a546 <USB_HC_Halt+0x1a4>
 800a56c:	e011      	b.n	800a592 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	015a      	lsls	r2, r3, #5
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	4413      	add	r3, r2
 800a576:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	0151      	lsls	r1, r2, #5
 800a580:	693a      	ldr	r2, [r7, #16]
 800a582:	440a      	add	r2, r1
 800a584:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a588:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a58c:	6013      	str	r3, [r2, #0]
 800a58e:	e000      	b.n	800a592 <USB_HC_Halt+0x1f0>
          break;
 800a590:	bf00      	nop
    }
  }

  return HAL_OK;
 800a592:	2300      	movs	r3, #0
}
 800a594:	4618      	mov	r0, r3
 800a596:	371c      	adds	r7, #28
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a5a0:	b480      	push	{r7}
 800a5a2:	b087      	sub	sp, #28
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	460b      	mov	r3, r1
 800a5aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a5b0:	78fb      	ldrb	r3, [r7, #3]
 800a5b2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	04da      	lsls	r2, r3, #19
 800a5bc:	4b15      	ldr	r3, [pc, #84]	; (800a614 <USB_DoPing+0x74>)
 800a5be:	4013      	ands	r3, r2
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	0151      	lsls	r1, r2, #5
 800a5c4:	697a      	ldr	r2, [r7, #20]
 800a5c6:	440a      	add	r2, r1
 800a5c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a5cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5d0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	015a      	lsls	r2, r3, #5
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	4413      	add	r3, r2
 800a5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800a5e8:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a5f0:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	015a      	lsls	r2, r3, #5
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	4413      	add	r3, r2
 800a5fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a5fe:	461a      	mov	r2, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a604:	2300      	movs	r3, #0
}
 800a606:	4618      	mov	r0, r3
 800a608:	371c      	adds	r7, #28
 800a60a:	46bd      	mov	sp, r7
 800a60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a610:	4770      	bx	lr
 800a612:	bf00      	nop
 800a614:	1ff80000 	.word	0x1ff80000

0800a618 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b086      	sub	sp, #24
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800a624:	2300      	movs	r3, #0
 800a626:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f7ff f9a7 	bl	800997c <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800a62e:	2110      	movs	r1, #16
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f7ff f9df 	bl	80099f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff fa02 	bl	8009a40 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a63c:	2300      	movs	r3, #0
 800a63e:	613b      	str	r3, [r7, #16]
 800a640:	e01f      	b.n	800a682 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	015a      	lsls	r2, r3, #5
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	4413      	add	r3, r2
 800a64a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a658:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a660:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a668:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	015a      	lsls	r2, r3, #5
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	4413      	add	r3, r2
 800a672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a676:	461a      	mov	r2, r3
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	3301      	adds	r3, #1
 800a680:	613b      	str	r3, [r7, #16]
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	2b0f      	cmp	r3, #15
 800a686:	d9dc      	bls.n	800a642 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a688:	2300      	movs	r3, #0
 800a68a:	613b      	str	r3, [r7, #16]
 800a68c:	e034      	b.n	800a6f8 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	015a      	lsls	r2, r3, #5
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	4413      	add	r3, r2
 800a696:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6a4:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a6ac:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800a6b4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	015a      	lsls	r2, r3, #5
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	4413      	add	r3, r2
 800a6be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800a6c8:	697b      	ldr	r3, [r7, #20]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	617b      	str	r3, [r7, #20]
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a6d4:	d80c      	bhi.n	800a6f0 <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6ec:	d0ec      	beq.n	800a6c8 <USB_StopHost+0xb0>
 800a6ee:	e000      	b.n	800a6f2 <USB_StopHost+0xda>
        break;
 800a6f0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	3301      	adds	r3, #1
 800a6f6:	613b      	str	r3, [r7, #16]
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	2b0f      	cmp	r3, #15
 800a6fc:	d9c7      	bls.n	800a68e <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a704:	461a      	mov	r2, r3
 800a706:	f04f 33ff 	mov.w	r3, #4294967295
 800a70a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f04f 32ff 	mov.w	r2, #4294967295
 800a712:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f7ff f920 	bl	800995a <USB_EnableGlobalInt>

  return HAL_OK;
 800a71a:	2300      	movs	r3, #0
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	3718      	adds	r7, #24
 800a720:	46bd      	mov	sp, r7
 800a722:	bd80      	pop	{r7, pc}

0800a724 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a724:	b590      	push	{r4, r7, lr}
 800a726:	b089      	sub	sp, #36	; 0x24
 800a728:	af04      	add	r7, sp, #16
 800a72a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a72c:	2301      	movs	r3, #1
 800a72e:	2202      	movs	r2, #2
 800a730:	2102      	movs	r1, #2
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	f000 fc66 	bl	800b004 <USBH_FindInterface>
 800a738:	4603      	mov	r3, r0
 800a73a:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a73c:	7bfb      	ldrb	r3, [r7, #15]
 800a73e:	2bff      	cmp	r3, #255	; 0xff
 800a740:	d002      	beq.n	800a748 <USBH_CDC_InterfaceInit+0x24>
 800a742:	7bfb      	ldrb	r3, [r7, #15]
 800a744:	2b01      	cmp	r3, #1
 800a746:	d901      	bls.n	800a74c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a748:	2302      	movs	r3, #2
 800a74a:	e13d      	b.n	800a9c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	4619      	mov	r1, r3
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f000 fc3b 	bl	800afcc <USBH_SelectInterface>
 800a756:	4603      	mov	r3, r0
 800a758:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d001      	beq.n	800a764 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a760:	2302      	movs	r3, #2
 800a762:	e131      	b.n	800a9c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800a76a:	2050      	movs	r0, #80	; 0x50
 800a76c:	f002 fa02 	bl	800cb74 <malloc>
 800a770:	4603      	mov	r3, r0
 800a772:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a77a:	69db      	ldr	r3, [r3, #28]
 800a77c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a784:	2302      	movs	r3, #2
 800a786:	e11f      	b.n	800a9c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a788:	2250      	movs	r2, #80	; 0x50
 800a78a:	2100      	movs	r1, #0
 800a78c:	68b8      	ldr	r0, [r7, #8]
 800a78e:	f002 fa01 	bl	800cb94 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a792:	7bfb      	ldrb	r3, [r7, #15]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	211a      	movs	r1, #26
 800a798:	fb01 f303 	mul.w	r3, r1, r3
 800a79c:	4413      	add	r3, r2
 800a79e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	b25b      	sxtb	r3, r3
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	da15      	bge.n	800a7d6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a7aa:	7bfb      	ldrb	r3, [r7, #15]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	211a      	movs	r1, #26
 800a7b0:	fb01 f303 	mul.w	r3, r1, r3
 800a7b4:	4413      	add	r3, r2
 800a7b6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a7ba:	781a      	ldrb	r2, [r3, #0]
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a7c0:	7bfb      	ldrb	r3, [r7, #15]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	211a      	movs	r1, #26
 800a7c6:	fb01 f303 	mul.w	r3, r1, r3
 800a7ca:	4413      	add	r3, r2
 800a7cc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a7d0:	881a      	ldrh	r2, [r3, #0]
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	785b      	ldrb	r3, [r3, #1]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 fe32 	bl	800c446 <USBH_AllocPipe>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	7819      	ldrb	r1, [r3, #0]
 800a7ee:	68bb      	ldr	r3, [r7, #8]
 800a7f0:	7858      	ldrb	r0, [r3, #1]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a7fe:	68ba      	ldr	r2, [r7, #8]
 800a800:	8952      	ldrh	r2, [r2, #10]
 800a802:	9202      	str	r2, [sp, #8]
 800a804:	2203      	movs	r2, #3
 800a806:	9201      	str	r2, [sp, #4]
 800a808:	9300      	str	r3, [sp, #0]
 800a80a:	4623      	mov	r3, r4
 800a80c:	4602      	mov	r2, r0
 800a80e:	6878      	ldr	r0, [r7, #4]
 800a810:	f001 fdea 	bl	800c3e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	2200      	movs	r2, #0
 800a81a:	4619      	mov	r1, r3
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f002 f8f9 	bl	800ca14 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a822:	2300      	movs	r3, #0
 800a824:	2200      	movs	r2, #0
 800a826:	210a      	movs	r1, #10
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fbeb 	bl	800b004 <USBH_FindInterface>
 800a82e:	4603      	mov	r3, r0
 800a830:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a832:	7bfb      	ldrb	r3, [r7, #15]
 800a834:	2bff      	cmp	r3, #255	; 0xff
 800a836:	d002      	beq.n	800a83e <USBH_CDC_InterfaceInit+0x11a>
 800a838:	7bfb      	ldrb	r3, [r7, #15]
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d901      	bls.n	800a842 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a83e:	2302      	movs	r3, #2
 800a840:	e0c2      	b.n	800a9c8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800a842:	7bfb      	ldrb	r3, [r7, #15]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	211a      	movs	r1, #26
 800a848:	fb01 f303 	mul.w	r3, r1, r3
 800a84c:	4413      	add	r3, r2
 800a84e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	b25b      	sxtb	r3, r3
 800a856:	2b00      	cmp	r3, #0
 800a858:	da16      	bge.n	800a888 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	211a      	movs	r1, #26
 800a860:	fb01 f303 	mul.w	r3, r1, r3
 800a864:	4413      	add	r3, r2
 800a866:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a86a:	781a      	ldrb	r2, [r3, #0]
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a870:	7bfb      	ldrb	r3, [r7, #15]
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	211a      	movs	r1, #26
 800a876:	fb01 f303 	mul.w	r3, r1, r3
 800a87a:	4413      	add	r3, r2
 800a87c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a880:	881a      	ldrh	r2, [r3, #0]
 800a882:	68bb      	ldr	r3, [r7, #8]
 800a884:	835a      	strh	r2, [r3, #26]
 800a886:	e015      	b.n	800a8b4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a888:	7bfb      	ldrb	r3, [r7, #15]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	211a      	movs	r1, #26
 800a88e:	fb01 f303 	mul.w	r3, r1, r3
 800a892:	4413      	add	r3, r2
 800a894:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800a898:	781a      	ldrb	r2, [r3, #0]
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a89e:	7bfb      	ldrb	r3, [r7, #15]
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	211a      	movs	r1, #26
 800a8a4:	fb01 f303 	mul.w	r3, r1, r3
 800a8a8:	4413      	add	r3, r2
 800a8aa:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800a8ae:	881a      	ldrh	r2, [r3, #0]
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	211a      	movs	r1, #26
 800a8ba:	fb01 f303 	mul.w	r3, r1, r3
 800a8be:	4413      	add	r3, r2
 800a8c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	b25b      	sxtb	r3, r3
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	da16      	bge.n	800a8fa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a8cc:	7bfb      	ldrb	r3, [r7, #15]
 800a8ce:	687a      	ldr	r2, [r7, #4]
 800a8d0:	211a      	movs	r1, #26
 800a8d2:	fb01 f303 	mul.w	r3, r1, r3
 800a8d6:	4413      	add	r3, r2
 800a8d8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a8dc:	781a      	ldrb	r2, [r3, #0]
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	211a      	movs	r1, #26
 800a8e8:	fb01 f303 	mul.w	r3, r1, r3
 800a8ec:	4413      	add	r3, r2
 800a8ee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a8f2:	881a      	ldrh	r2, [r3, #0]
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	835a      	strh	r2, [r3, #26]
 800a8f8:	e015      	b.n	800a926 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800a8fa:	7bfb      	ldrb	r3, [r7, #15]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	211a      	movs	r1, #26
 800a900:	fb01 f303 	mul.w	r3, r1, r3
 800a904:	4413      	add	r3, r2
 800a906:	f203 3356 	addw	r3, r3, #854	; 0x356
 800a90a:	781a      	ldrb	r2, [r3, #0]
 800a90c:	68bb      	ldr	r3, [r7, #8]
 800a90e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	211a      	movs	r1, #26
 800a916:	fb01 f303 	mul.w	r3, r1, r3
 800a91a:	4413      	add	r3, r2
 800a91c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a920:	881a      	ldrh	r2, [r3, #0]
 800a922:	68bb      	ldr	r3, [r7, #8]
 800a924:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800a926:	68bb      	ldr	r3, [r7, #8]
 800a928:	7b9b      	ldrb	r3, [r3, #14]
 800a92a:	4619      	mov	r1, r3
 800a92c:	6878      	ldr	r0, [r7, #4]
 800a92e:	f001 fd8a 	bl	800c446 <USBH_AllocPipe>
 800a932:	4603      	mov	r3, r0
 800a934:	461a      	mov	r2, r3
 800a936:	68bb      	ldr	r3, [r7, #8]
 800a938:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	7bdb      	ldrb	r3, [r3, #15]
 800a93e:	4619      	mov	r1, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f001 fd80 	bl	800c446 <USBH_AllocPipe>
 800a946:	4603      	mov	r3, r0
 800a948:	461a      	mov	r2, r3
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	7b59      	ldrb	r1, [r3, #13]
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	7b98      	ldrb	r0, [r3, #14]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a962:	68ba      	ldr	r2, [r7, #8]
 800a964:	8b12      	ldrh	r2, [r2, #24]
 800a966:	9202      	str	r2, [sp, #8]
 800a968:	2202      	movs	r2, #2
 800a96a:	9201      	str	r2, [sp, #4]
 800a96c:	9300      	str	r3, [sp, #0]
 800a96e:	4623      	mov	r3, r4
 800a970:	4602      	mov	r2, r0
 800a972:	6878      	ldr	r0, [r7, #4]
 800a974:	f001 fd38 	bl	800c3e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	7b19      	ldrb	r1, [r3, #12]
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	7bd8      	ldrb	r0, [r3, #15]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a98c:	68ba      	ldr	r2, [r7, #8]
 800a98e:	8b52      	ldrh	r2, [r2, #26]
 800a990:	9202      	str	r2, [sp, #8]
 800a992:	2202      	movs	r2, #2
 800a994:	9201      	str	r2, [sp, #4]
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	4623      	mov	r3, r4
 800a99a:	4602      	mov	r2, r0
 800a99c:	6878      	ldr	r0, [r7, #4]
 800a99e:	f001 fd23 	bl	800c3e8 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	7b5b      	ldrb	r3, [r3, #13]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f002 f82e 	bl	800ca14 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800a9b8:	68bb      	ldr	r3, [r7, #8]
 800a9ba:	7b1b      	ldrb	r3, [r3, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f002 f827 	bl	800ca14 <USBH_LL_SetToggle>

  return USBH_OK;
 800a9c6:	2300      	movs	r3, #0
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3714      	adds	r7, #20
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd90      	pop	{r4, r7, pc}

0800a9d0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a9de:	69db      	ldr	r3, [r3, #28]
 800a9e0:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00e      	beq.n	800aa08 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	6878      	ldr	r0, [r7, #4]
 800a9f2:	f001 fd18 	bl	800c426 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	4619      	mov	r1, r3
 800a9fc:	6878      	ldr	r0, [r7, #4]
 800a9fe:	f001 fd43 	bl	800c488 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	2200      	movs	r2, #0
 800aa06:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	7b1b      	ldrb	r3, [r3, #12]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d00e      	beq.n	800aa2e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	7b1b      	ldrb	r3, [r3, #12]
 800aa14:	4619      	mov	r1, r3
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 fd05 	bl	800c426 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	7b1b      	ldrb	r3, [r3, #12]
 800aa20:	4619      	mov	r1, r3
 800aa22:	6878      	ldr	r0, [r7, #4]
 800aa24:	f001 fd30 	bl	800c488 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	7b5b      	ldrb	r3, [r3, #13]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00e      	beq.n	800aa54 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	7b5b      	ldrb	r3, [r3, #13]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f001 fcf2 	bl	800c426 <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	7b5b      	ldrb	r3, [r3, #13]
 800aa46:	4619      	mov	r1, r3
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f001 fd1d 	bl	800c488 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	2200      	movs	r2, #0
 800aa52:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa5a:	69db      	ldr	r3, [r3, #28]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d00b      	beq.n	800aa78 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa66:	69db      	ldr	r3, [r3, #28]
 800aa68:	4618      	mov	r0, r3
 800aa6a:	f002 f88b 	bl	800cb84 <free>
    phost->pActiveClass->pData = 0U;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa74:	2200      	movs	r2, #0
 800aa76:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800aa78:	2300      	movs	r3, #0
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}

0800aa82 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800aa82:	b580      	push	{r7, lr}
 800aa84:	b084      	sub	sp, #16
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aa90:	69db      	ldr	r3, [r3, #28]
 800aa92:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	3340      	adds	r3, #64	; 0x40
 800aa98:	4619      	mov	r1, r3
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f8b1 	bl	800ac02 <GetLineCoding>
 800aaa0:	4603      	mov	r3, r0
 800aaa2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800aaa4:	7afb      	ldrb	r3, [r7, #11]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d105      	bne.n	800aab6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800aab0:	2102      	movs	r1, #2
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800aab6:	7afb      	ldrb	r3, [r7, #11]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3710      	adds	r7, #16
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800aac8:	2301      	movs	r3, #1
 800aaca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800aad6:	69db      	ldr	r3, [r3, #28]
 800aad8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	d877      	bhi.n	800abd4 <USBH_CDC_Process+0x114>
 800aae4:	a201      	add	r2, pc, #4	; (adr r2, 800aaec <USBH_CDC_Process+0x2c>)
 800aae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaea:	bf00      	nop
 800aaec:	0800ab01 	.word	0x0800ab01
 800aaf0:	0800ab07 	.word	0x0800ab07
 800aaf4:	0800ab37 	.word	0x0800ab37
 800aaf8:	0800abab 	.word	0x0800abab
 800aafc:	0800abb9 	.word	0x0800abb9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ab00:	2300      	movs	r3, #0
 800ab02:	73fb      	strb	r3, [r7, #15]
      break;
 800ab04:	e06d      	b.n	800abe2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab0a:	4619      	mov	r1, r3
 800ab0c:	6878      	ldr	r0, [r7, #4]
 800ab0e:	f000 f897 	bl	800ac40 <SetLineCoding>
 800ab12:	4603      	mov	r3, r0
 800ab14:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab16:	7bbb      	ldrb	r3, [r7, #14]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d104      	bne.n	800ab26 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ab1c:	68bb      	ldr	r3, [r7, #8]
 800ab1e:	2202      	movs	r2, #2
 800ab20:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ab24:	e058      	b.n	800abd8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d055      	beq.n	800abd8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2204      	movs	r2, #4
 800ab30:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800ab34:	e050      	b.n	800abd8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	3340      	adds	r3, #64	; 0x40
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	6878      	ldr	r0, [r7, #4]
 800ab3e:	f000 f860 	bl	800ac02 <GetLineCoding>
 800ab42:	4603      	mov	r3, r0
 800ab44:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d126      	bne.n	800ab9a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab5e:	791b      	ldrb	r3, [r3, #4]
 800ab60:	429a      	cmp	r2, r3
 800ab62:	d13b      	bne.n	800abdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab6e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ab70:	429a      	cmp	r2, r3
 800ab72:	d133      	bne.n	800abdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab7e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d12b      	bne.n	800abdc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab8c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d124      	bne.n	800abdc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 f958 	bl	800ae48 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ab98:	e020      	b.n	800abdc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ab9a:	7bbb      	ldrb	r3, [r7, #14]
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	d01d      	beq.n	800abdc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2204      	movs	r2, #4
 800aba4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800aba8:	e018      	b.n	800abdc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f867 	bl	800ac7e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 f8da 	bl	800ad6a <CDC_ProcessReception>
      break;
 800abb6:	e014      	b.n	800abe2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800abb8:	2100      	movs	r1, #0
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f000 ffe3 	bl	800bb86 <USBH_ClrFeature>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d10a      	bne.n	800abe0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800abca:	68bb      	ldr	r3, [r7, #8]
 800abcc:	2200      	movs	r2, #0
 800abce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800abd2:	e005      	b.n	800abe0 <USBH_CDC_Process+0x120>

    default:
      break;
 800abd4:	bf00      	nop
 800abd6:	e004      	b.n	800abe2 <USBH_CDC_Process+0x122>
      break;
 800abd8:	bf00      	nop
 800abda:	e002      	b.n	800abe2 <USBH_CDC_Process+0x122>
      break;
 800abdc:	bf00      	nop
 800abde:	e000      	b.n	800abe2 <USBH_CDC_Process+0x122>
      break;
 800abe0:	bf00      	nop

  }

  return status;
 800abe2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	3710      	adds	r7, #16
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800abec:	b480      	push	{r7}
 800abee:	b083      	sub	sp, #12
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800abf4:	2300      	movs	r3, #0
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ac02:	b580      	push	{r7, lr}
 800ac04:	b082      	sub	sp, #8
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	22a1      	movs	r2, #161	; 0xa1
 800ac10:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2221      	movs	r2, #33	; 0x21
 800ac16:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2200      	movs	r2, #0
 800ac22:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2207      	movs	r2, #7
 800ac28:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	2207      	movs	r2, #7
 800ac2e:	4619      	mov	r1, r3
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f001 f988 	bl	800bf46 <USBH_CtlReq>
 800ac36:	4603      	mov	r3, r0
}
 800ac38:	4618      	mov	r0, r3
 800ac3a:	3708      	adds	r7, #8
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b082      	sub	sp, #8
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2221      	movs	r2, #33	; 0x21
 800ac4e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2220      	movs	r2, #32
 800ac54:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	2200      	movs	r2, #0
 800ac60:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2207      	movs	r2, #7
 800ac66:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	2207      	movs	r2, #7
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f001 f969 	bl	800bf46 <USBH_CtlReq>
 800ac74:	4603      	mov	r3, r0
}
 800ac76:	4618      	mov	r0, r3
 800ac78:	3708      	adds	r7, #8
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}

0800ac7e <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ac7e:	b580      	push	{r7, lr}
 800ac80:	b086      	sub	sp, #24
 800ac82:	af02      	add	r7, sp, #8
 800ac84:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac90:	2300      	movs	r3, #0
 800ac92:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d002      	beq.n	800aca4 <CDC_ProcessTransmission+0x26>
 800ac9e:	2b02      	cmp	r3, #2
 800aca0:	d023      	beq.n	800acea <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800aca2:	e05e      	b.n	800ad62 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	8b12      	ldrh	r2, [r2, #24]
 800acac:	4293      	cmp	r3, r2
 800acae:	d90b      	bls.n	800acc8 <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	69d9      	ldr	r1, [r3, #28]
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	8b1a      	ldrh	r2, [r3, #24]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	7b5b      	ldrb	r3, [r3, #13]
 800acbc:	2001      	movs	r0, #1
 800acbe:	9000      	str	r0, [sp, #0]
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f001 fb4e 	bl	800c362 <USBH_BulkSendData>
 800acc6:	e00b      	b.n	800ace0 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 800acd0:	b29a      	uxth	r2, r3
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	7b5b      	ldrb	r3, [r3, #13]
 800acd6:	2001      	movs	r0, #1
 800acd8:	9000      	str	r0, [sp, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f001 fb41 	bl	800c362 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2202      	movs	r2, #2
 800ace4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ace8:	e03b      	b.n	800ad62 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	7b5b      	ldrb	r3, [r3, #13]
 800acee:	4619      	mov	r1, r3
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f001 fe65 	bl	800c9c0 <USBH_LL_GetURBState>
 800acf6:	4603      	mov	r3, r0
 800acf8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800acfa:	7afb      	ldrb	r3, [r7, #11]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d128      	bne.n	800ad52 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	8b12      	ldrh	r2, [r2, #24]
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d90e      	bls.n	800ad2a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad10:	68fa      	ldr	r2, [r7, #12]
 800ad12:	8b12      	ldrh	r2, [r2, #24]
 800ad14:	1a9a      	subs	r2, r3, r2
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	69db      	ldr	r3, [r3, #28]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	8b12      	ldrh	r2, [r2, #24]
 800ad22:	441a      	add	r2, r3
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	61da      	str	r2, [r3, #28]
 800ad28:	e002      	b.n	800ad30 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d004      	beq.n	800ad42 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	2201      	movs	r2, #1
 800ad3c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ad40:	e00e      	b.n	800ad60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2200      	movs	r2, #0
 800ad46:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 f868 	bl	800ae20 <USBH_CDC_TransmitCallback>
      break;
 800ad50:	e006      	b.n	800ad60 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ad52:	7afb      	ldrb	r3, [r7, #11]
 800ad54:	2b02      	cmp	r3, #2
 800ad56:	d103      	bne.n	800ad60 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800ad60:	bf00      	nop
  }
}
 800ad62:	bf00      	nop
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b086      	sub	sp, #24
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ad86:	2b03      	cmp	r3, #3
 800ad88:	d002      	beq.n	800ad90 <CDC_ProcessReception+0x26>
 800ad8a:	2b04      	cmp	r3, #4
 800ad8c:	d00e      	beq.n	800adac <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ad8e:	e043      	b.n	800ae18 <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	6a19      	ldr	r1, [r3, #32]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	8b5a      	ldrh	r2, [r3, #26]
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	7b1b      	ldrb	r3, [r3, #12]
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	f001 fb05 	bl	800c3ac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ada2:	697b      	ldr	r3, [r7, #20]
 800ada4:	2204      	movs	r2, #4
 800ada6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800adaa:	e035      	b.n	800ae18 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	7b1b      	ldrb	r3, [r3, #12]
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f001 fe04 	bl	800c9c0 <USBH_LL_GetURBState>
 800adb8:	4603      	mov	r3, r0
 800adba:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800adbc:	7cfb      	ldrb	r3, [r7, #19]
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d129      	bne.n	800ae16 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	7b1b      	ldrb	r3, [r3, #12]
 800adc6:	4619      	mov	r1, r3
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f001 fd67 	bl	800c89c <USBH_LL_GetLastXferSize>
 800adce:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800add4:	68fa      	ldr	r2, [r7, #12]
 800add6:	429a      	cmp	r2, r3
 800add8:	d016      	beq.n	800ae08 <CDC_ProcessReception+0x9e>
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	8b5b      	ldrh	r3, [r3, #26]
 800adde:	461a      	mov	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d910      	bls.n	800ae08 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	1ad2      	subs	r2, r2, r3
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	6a1a      	ldr	r2, [r3, #32]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	441a      	add	r2, r3
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800adfe:	697b      	ldr	r3, [r7, #20]
 800ae00:	2203      	movs	r2, #3
 800ae02:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800ae06:	e006      	b.n	800ae16 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f80f 	bl	800ae34 <USBH_CDC_ReceiveCallback>
      break;
 800ae16:	bf00      	nop
  }
}
 800ae18:	bf00      	nop
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b083      	sub	sp, #12
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae28:	bf00      	nop
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae3c:	bf00      	nop
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b083      	sub	sp, #12
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ae50:	bf00      	nop
 800ae52:	370c      	adds	r7, #12
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b084      	sub	sp, #16
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	4613      	mov	r3, r2
 800ae68:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d101      	bne.n	800ae74 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800ae70:	2302      	movs	r3, #2
 800ae72:	e029      	b.n	800aec8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	79fa      	ldrb	r2, [r7, #7]
 800ae78:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2200      	movs	r2, #0
 800ae88:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800ae8c:	68f8      	ldr	r0, [r7, #12]
 800ae8e:	f000 f81f 	bl	800aed0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d003      	beq.n	800aec0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	68ba      	ldr	r2, [r7, #8]
 800aebc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800aec0:	68f8      	ldr	r0, [r7, #12]
 800aec2:	f001 fc37 	bl	800c734 <USBH_LL_Init>

  return USBH_OK;
 800aec6:	2300      	movs	r3, #0
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3710      	adds	r7, #16
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}

0800aed0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b085      	sub	sp, #20
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800aed8:	2300      	movs	r3, #0
 800aeda:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aedc:	2300      	movs	r3, #0
 800aede:	60fb      	str	r3, [r7, #12]
 800aee0:	e009      	b.n	800aef6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800aee2:	687a      	ldr	r2, [r7, #4]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	33e0      	adds	r3, #224	; 0xe0
 800aee8:	009b      	lsls	r3, r3, #2
 800aeea:	4413      	add	r3, r2
 800aeec:	2200      	movs	r2, #0
 800aeee:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60fb      	str	r3, [r7, #12]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	2b0e      	cmp	r3, #14
 800aefa:	d9f2      	bls.n	800aee2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800aefc:	2300      	movs	r3, #0
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	e009      	b.n	800af16 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	4413      	add	r3, r2
 800af08:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800af0c:	2200      	movs	r2, #0
 800af0e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	3301      	adds	r3, #1
 800af14:	60fb      	str	r3, [r7, #12]
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af1c:	d3f1      	bcc.n	800af02 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	2200      	movs	r2, #0
 800af22:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	2200      	movs	r2, #0
 800af28:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2201      	movs	r2, #1
 800af2e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2200      	movs	r2, #0
 800af34:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	2201      	movs	r2, #1
 800af3c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2240      	movs	r2, #64	; 0x40
 800af42:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2200      	movs	r2, #0
 800af48:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	2200      	movs	r2, #0
 800af4e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2201      	movs	r2, #1
 800af56:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2200      	movs	r2, #0
 800af5e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800af78:	b480      	push	{r7}
 800af7a:	b085      	sub	sp, #20
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
 800af80:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800af82:	2300      	movs	r3, #0
 800af84:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800af86:	683b      	ldr	r3, [r7, #0]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d016      	beq.n	800afba <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800af92:	2b00      	cmp	r3, #0
 800af94:	d10e      	bne.n	800afb4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800af9c:	1c59      	adds	r1, r3, #1
 800af9e:	687a      	ldr	r2, [r7, #4]
 800afa0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800afa4:	687a      	ldr	r2, [r7, #4]
 800afa6:	33de      	adds	r3, #222	; 0xde
 800afa8:	6839      	ldr	r1, [r7, #0]
 800afaa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	73fb      	strb	r3, [r7, #15]
 800afb2:	e004      	b.n	800afbe <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800afb4:	2302      	movs	r3, #2
 800afb6:	73fb      	strb	r3, [r7, #15]
 800afb8:	e001      	b.n	800afbe <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800afba:	2302      	movs	r3, #2
 800afbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr

0800afcc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800afcc:	b480      	push	{r7}
 800afce:	b085      	sub	sp, #20
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	460b      	mov	r3, r1
 800afd6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800afd8:	2300      	movs	r3, #0
 800afda:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800afe2:	78fa      	ldrb	r2, [r7, #3]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d204      	bcs.n	800aff2 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	78fa      	ldrb	r2, [r7, #3]
 800afec:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800aff0:	e001      	b.n	800aff6 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800aff2:	2302      	movs	r3, #2
 800aff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3714      	adds	r7, #20
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	4608      	mov	r0, r1
 800b00e:	4611      	mov	r1, r2
 800b010:	461a      	mov	r2, r3
 800b012:	4603      	mov	r3, r0
 800b014:	70fb      	strb	r3, [r7, #3]
 800b016:	460b      	mov	r3, r1
 800b018:	70bb      	strb	r3, [r7, #2]
 800b01a:	4613      	mov	r3, r2
 800b01c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b01e:	2300      	movs	r3, #0
 800b020:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800b022:	2300      	movs	r3, #0
 800b024:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b02c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b02e:	e025      	b.n	800b07c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b030:	7dfb      	ldrb	r3, [r7, #23]
 800b032:	221a      	movs	r2, #26
 800b034:	fb02 f303 	mul.w	r3, r2, r3
 800b038:	3308      	adds	r3, #8
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	4413      	add	r3, r2
 800b03e:	3302      	adds	r3, #2
 800b040:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	795b      	ldrb	r3, [r3, #5]
 800b046:	78fa      	ldrb	r2, [r7, #3]
 800b048:	429a      	cmp	r2, r3
 800b04a:	d002      	beq.n	800b052 <USBH_FindInterface+0x4e>
 800b04c:	78fb      	ldrb	r3, [r7, #3]
 800b04e:	2bff      	cmp	r3, #255	; 0xff
 800b050:	d111      	bne.n	800b076 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b052:	693b      	ldr	r3, [r7, #16]
 800b054:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b056:	78ba      	ldrb	r2, [r7, #2]
 800b058:	429a      	cmp	r2, r3
 800b05a:	d002      	beq.n	800b062 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b05c:	78bb      	ldrb	r3, [r7, #2]
 800b05e:	2bff      	cmp	r3, #255	; 0xff
 800b060:	d109      	bne.n	800b076 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b066:	787a      	ldrb	r2, [r7, #1]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d002      	beq.n	800b072 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b06c:	787b      	ldrb	r3, [r7, #1]
 800b06e:	2bff      	cmp	r3, #255	; 0xff
 800b070:	d101      	bne.n	800b076 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b072:	7dfb      	ldrb	r3, [r7, #23]
 800b074:	e006      	b.n	800b084 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b076:	7dfb      	ldrb	r3, [r7, #23]
 800b078:	3301      	adds	r3, #1
 800b07a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b07c:	7dfb      	ldrb	r3, [r7, #23]
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d9d6      	bls.n	800b030 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b082:	23ff      	movs	r3, #255	; 0xff
}
 800b084:	4618      	mov	r0, r3
 800b086:	371c      	adds	r7, #28
 800b088:	46bd      	mov	sp, r7
 800b08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08e:	4770      	bx	lr

0800b090 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f001 fb87 	bl	800c7ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800b09e:	2101      	movs	r1, #1
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f001 fca0 	bl	800c9e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b0a6:	2300      	movs	r3, #0
}
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	3708      	adds	r7, #8
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	bd80      	pop	{r7, pc}

0800b0b0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af04      	add	r7, sp, #16
 800b0b6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d102      	bne.n	800b0d2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2203      	movs	r2, #3
 800b0d0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	781b      	ldrb	r3, [r3, #0]
 800b0d6:	b2db      	uxtb	r3, r3
 800b0d8:	2b0b      	cmp	r3, #11
 800b0da:	f200 81b3 	bhi.w	800b444 <USBH_Process+0x394>
 800b0de:	a201      	add	r2, pc, #4	; (adr r2, 800b0e4 <USBH_Process+0x34>)
 800b0e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0e4:	0800b115 	.word	0x0800b115
 800b0e8:	0800b147 	.word	0x0800b147
 800b0ec:	0800b1af 	.word	0x0800b1af
 800b0f0:	0800b3df 	.word	0x0800b3df
 800b0f4:	0800b445 	.word	0x0800b445
 800b0f8:	0800b253 	.word	0x0800b253
 800b0fc:	0800b385 	.word	0x0800b385
 800b100:	0800b289 	.word	0x0800b289
 800b104:	0800b2a9 	.word	0x0800b2a9
 800b108:	0800b2c9 	.word	0x0800b2c9
 800b10c:	0800b2f7 	.word	0x0800b2f7
 800b110:	0800b3c7 	.word	0x0800b3c7
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800b11a:	b2db      	uxtb	r3, r3
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f000 8193 	beq.w	800b448 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b128:	20c8      	movs	r0, #200	; 0xc8
 800b12a:	f001 fca6 	bl	800ca7a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f001 fb99 	bl	800c866 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2200      	movs	r2, #0
 800b140:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b144:	e180      	b.n	800b448 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800b14c:	2b01      	cmp	r3, #1
 800b14e:	d107      	bne.n	800b160 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2200      	movs	r2, #0
 800b154:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2202      	movs	r2, #2
 800b15c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b15e:	e182      	b.n	800b466 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b166:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b16a:	d914      	bls.n	800b196 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b172:	3301      	adds	r3, #1
 800b174:	b2da      	uxtb	r2, r3
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800b182:	2b03      	cmp	r3, #3
 800b184:	d903      	bls.n	800b18e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	220d      	movs	r2, #13
 800b18a:	701a      	strb	r2, [r3, #0]
      break;
 800b18c:	e16b      	b.n	800b466 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	701a      	strb	r2, [r3, #0]
      break;
 800b194:	e167      	b.n	800b466 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800b19c:	f103 020a 	add.w	r2, r3, #10
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800b1a6:	200a      	movs	r0, #10
 800b1a8:	f001 fc67 	bl	800ca7a <USBH_Delay>
      break;
 800b1ac:	e15b      	b.n	800b466 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d005      	beq.n	800b1c4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b1be:	2104      	movs	r1, #4
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b1c4:	2064      	movs	r0, #100	; 0x64
 800b1c6:	f001 fc58 	bl	800ca7a <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f001 fb24 	bl	800c818 <USBH_LL_GetSpeed>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	461a      	mov	r2, r3
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2205      	movs	r2, #5
 800b1de:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f001 f92f 	bl	800c446 <USBH_AllocPipe>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	461a      	mov	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b1f0:	2180      	movs	r1, #128	; 0x80
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f001 f927 	bl	800c446 <USBH_AllocPipe>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	7919      	ldrb	r1, [r3, #4]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b210:	687a      	ldr	r2, [r7, #4]
 800b212:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b214:	b292      	uxth	r2, r2
 800b216:	9202      	str	r2, [sp, #8]
 800b218:	2200      	movs	r2, #0
 800b21a:	9201      	str	r2, [sp, #4]
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	4603      	mov	r3, r0
 800b220:	2280      	movs	r2, #128	; 0x80
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f001 f8e0 	bl	800c3e8 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	7959      	ldrb	r1, [r3, #5]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b238:	687a      	ldr	r2, [r7, #4]
 800b23a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b23c:	b292      	uxth	r2, r2
 800b23e:	9202      	str	r2, [sp, #8]
 800b240:	2200      	movs	r2, #0
 800b242:	9201      	str	r2, [sp, #4]
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	4603      	mov	r3, r0
 800b248:	2200      	movs	r2, #0
 800b24a:	6878      	ldr	r0, [r7, #4]
 800b24c:	f001 f8cc 	bl	800c3e8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b250:	e109      	b.n	800b466 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 f90c 	bl	800b470 <USBH_HandleEnum>
 800b258:	4603      	mov	r3, r0
 800b25a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
 800b25e:	b2db      	uxtb	r3, r3
 800b260:	2b00      	cmp	r3, #0
 800b262:	f040 80f3 	bne.w	800b44c <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	2200      	movs	r2, #0
 800b26a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800b274:	2b01      	cmp	r3, #1
 800b276:	d103      	bne.n	800b280 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2208      	movs	r2, #8
 800b27c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b27e:	e0e5      	b.n	800b44c <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2207      	movs	r2, #7
 800b284:	701a      	strb	r2, [r3, #0]
      break;
 800b286:	e0e1      	b.n	800b44c <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b28e:	2b00      	cmp	r3, #0
 800b290:	f000 80de 	beq.w	800b450 <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b29a:	2101      	movs	r1, #1
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2208      	movs	r2, #8
 800b2a4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800b2a6:	e0d3      	b.n	800b450 <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4619      	mov	r1, r3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 fc20 	bl	800baf8 <USBH_SetCfg>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	f040 80ca 	bne.w	800b454 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2209      	movs	r2, #9
 800b2c4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2c6:	e0c5      	b.n	800b454 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800b2ce:	f003 0320 	and.w	r3, r3, #32
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d00b      	beq.n	800b2ee <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800b2d6:	2101      	movs	r1, #1
 800b2d8:	6878      	ldr	r0, [r7, #4]
 800b2da:	f000 fc30 	bl	800bb3e <USBH_SetFeature>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	f040 80b9 	bne.w	800b458 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	220a      	movs	r2, #10
 800b2ea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b2ec:	e0b4      	b.n	800b458 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	220a      	movs	r2, #10
 800b2f2:	701a      	strb	r2, [r3, #0]
      break;
 800b2f4:	e0b0      	b.n	800b458 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 80ad 	beq.w	800b45c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b30a:	2300      	movs	r3, #0
 800b30c:	73fb      	strb	r3, [r7, #15]
 800b30e:	e016      	b.n	800b33e <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b310:	7bfa      	ldrb	r2, [r7, #15]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	32de      	adds	r2, #222	; 0xde
 800b316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b31a:	791a      	ldrb	r2, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800b322:	429a      	cmp	r2, r3
 800b324:	d108      	bne.n	800b338 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b326:	7bfa      	ldrb	r2, [r7, #15]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	32de      	adds	r2, #222	; 0xde
 800b32c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800b336:	e005      	b.n	800b344 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b338:	7bfb      	ldrb	r3, [r7, #15]
 800b33a:	3301      	adds	r3, #1
 800b33c:	73fb      	strb	r3, [r7, #15]
 800b33e:	7bfb      	ldrb	r3, [r7, #15]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d0e5      	beq.n	800b310 <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d016      	beq.n	800b37c <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	4798      	blx	r3
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d109      	bne.n	800b374 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2206      	movs	r2, #6
 800b364:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b36c:	2103      	movs	r1, #3
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b372:	e073      	b.n	800b45c <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	220d      	movs	r2, #13
 800b378:	701a      	strb	r2, [r3, #0]
      break;
 800b37a:	e06f      	b.n	800b45c <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	220d      	movs	r2, #13
 800b380:	701a      	strb	r2, [r3, #0]
      break;
 800b382:	e06b      	b.n	800b45c <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d017      	beq.n	800b3be <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	4798      	blx	r3
 800b39a:	4603      	mov	r3, r0
 800b39c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b39e:	7bbb      	ldrb	r3, [r7, #14]
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d103      	bne.n	800b3ae <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	220b      	movs	r2, #11
 800b3aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b3ac:	e058      	b.n	800b460 <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 800b3ae:	7bbb      	ldrb	r3, [r7, #14]
 800b3b0:	b2db      	uxtb	r3, r3
 800b3b2:	2b02      	cmp	r3, #2
 800b3b4:	d154      	bne.n	800b460 <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	220d      	movs	r2, #13
 800b3ba:	701a      	strb	r2, [r3, #0]
      break;
 800b3bc:	e050      	b.n	800b460 <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	220d      	movs	r2, #13
 800b3c2:	701a      	strb	r2, [r3, #0]
      break;
 800b3c4:	e04c      	b.n	800b460 <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d049      	beq.n	800b464 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3d6:	695b      	ldr	r3, [r3, #20]
 800b3d8:	6878      	ldr	r0, [r7, #4]
 800b3da:	4798      	blx	r3
      }
      break;
 800b3dc:	e042      	b.n	800b464 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800b3e6:	6878      	ldr	r0, [r7, #4]
 800b3e8:	f7ff fd72 	bl	800aed0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d009      	beq.n	800b40a <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b3fc:	68db      	ldr	r3, [r3, #12]
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b410:	2b00      	cmp	r3, #0
 800b412:	d005      	beq.n	800b420 <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800b41a:	2105      	movs	r1, #5
 800b41c:	6878      	ldr	r0, [r7, #4]
 800b41e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800b426:	b2db      	uxtb	r3, r3
 800b428:	2b01      	cmp	r3, #1
 800b42a:	d107      	bne.n	800b43c <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2200      	movs	r2, #0
 800b430:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f7ff fe2b 	bl	800b090 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800b43a:	e014      	b.n	800b466 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 800b43c:	6878      	ldr	r0, [r7, #4]
 800b43e:	f001 f9b5 	bl	800c7ac <USBH_LL_Start>
      break;
 800b442:	e010      	b.n	800b466 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b444:	bf00      	nop
 800b446:	e00e      	b.n	800b466 <USBH_Process+0x3b6>
      break;
 800b448:	bf00      	nop
 800b44a:	e00c      	b.n	800b466 <USBH_Process+0x3b6>
      break;
 800b44c:	bf00      	nop
 800b44e:	e00a      	b.n	800b466 <USBH_Process+0x3b6>
    break;
 800b450:	bf00      	nop
 800b452:	e008      	b.n	800b466 <USBH_Process+0x3b6>
      break;
 800b454:	bf00      	nop
 800b456:	e006      	b.n	800b466 <USBH_Process+0x3b6>
      break;
 800b458:	bf00      	nop
 800b45a:	e004      	b.n	800b466 <USBH_Process+0x3b6>
      break;
 800b45c:	bf00      	nop
 800b45e:	e002      	b.n	800b466 <USBH_Process+0x3b6>
      break;
 800b460:	bf00      	nop
 800b462:	e000      	b.n	800b466 <USBH_Process+0x3b6>
      break;
 800b464:	bf00      	nop
  }
  return USBH_OK;
 800b466:	2300      	movs	r3, #0
}
 800b468:	4618      	mov	r0, r3
 800b46a:	3710      	adds	r7, #16
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}

0800b470 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af04      	add	r7, sp, #16
 800b476:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b478:	2301      	movs	r3, #1
 800b47a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b47c:	2301      	movs	r3, #1
 800b47e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	785b      	ldrb	r3, [r3, #1]
 800b484:	2b07      	cmp	r3, #7
 800b486:	f200 81c1 	bhi.w	800b80c <USBH_HandleEnum+0x39c>
 800b48a:	a201      	add	r2, pc, #4	; (adr r2, 800b490 <USBH_HandleEnum+0x20>)
 800b48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b490:	0800b4b1 	.word	0x0800b4b1
 800b494:	0800b56f 	.word	0x0800b56f
 800b498:	0800b5d9 	.word	0x0800b5d9
 800b49c:	0800b667 	.word	0x0800b667
 800b4a0:	0800b6d1 	.word	0x0800b6d1
 800b4a4:	0800b741 	.word	0x0800b741
 800b4a8:	0800b787 	.word	0x0800b787
 800b4ac:	0800b7cd 	.word	0x0800b7cd
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b4b0:	2108      	movs	r1, #8
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fa50 	bl	800b958 <USBH_Get_DevDesc>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b4bc:	7bbb      	ldrb	r3, [r7, #14]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d130      	bne.n	800b524 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7919      	ldrb	r1, [r3, #4]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b4e6:	b292      	uxth	r2, r2
 800b4e8:	9202      	str	r2, [sp, #8]
 800b4ea:	2200      	movs	r2, #0
 800b4ec:	9201      	str	r2, [sp, #4]
 800b4ee:	9300      	str	r3, [sp, #0]
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2280      	movs	r2, #128	; 0x80
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f000 ff77 	bl	800c3e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	7959      	ldrb	r1, [r3, #5]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b50e:	b292      	uxth	r2, r2
 800b510:	9202      	str	r2, [sp, #8]
 800b512:	2200      	movs	r2, #0
 800b514:	9201      	str	r2, [sp, #4]
 800b516:	9300      	str	r3, [sp, #0]
 800b518:	4603      	mov	r3, r0
 800b51a:	2200      	movs	r2, #0
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 ff63 	bl	800c3e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b522:	e175      	b.n	800b810 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b524:	7bbb      	ldrb	r3, [r7, #14]
 800b526:	2b03      	cmp	r3, #3
 800b528:	f040 8172 	bne.w	800b810 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b532:	3301      	adds	r3, #1
 800b534:	b2da      	uxtb	r2, r3
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b542:	2b03      	cmp	r3, #3
 800b544:	d903      	bls.n	800b54e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	220d      	movs	r2, #13
 800b54a:	701a      	strb	r2, [r3, #0]
      break;
 800b54c:	e160      	b.n	800b810 <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	795b      	ldrb	r3, [r3, #5]
 800b552:	4619      	mov	r1, r3
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 ff97 	bl	800c488 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	791b      	ldrb	r3, [r3, #4]
 800b55e:	4619      	mov	r1, r3
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 ff91 	bl	800c488 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	2200      	movs	r2, #0
 800b56a:	701a      	strb	r2, [r3, #0]
      break;
 800b56c:	e150      	b.n	800b810 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b56e:	2112      	movs	r1, #18
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f000 f9f1 	bl	800b958 <USBH_Get_DevDesc>
 800b576:	4603      	mov	r3, r0
 800b578:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b57a:	7bbb      	ldrb	r3, [r7, #14]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d103      	bne.n	800b588 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2202      	movs	r2, #2
 800b584:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b586:	e145      	b.n	800b814 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b588:	7bbb      	ldrb	r3, [r7, #14]
 800b58a:	2b03      	cmp	r3, #3
 800b58c:	f040 8142 	bne.w	800b814 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b596:	3301      	adds	r3, #1
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b5a6:	2b03      	cmp	r3, #3
 800b5a8:	d903      	bls.n	800b5b2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	220d      	movs	r2, #13
 800b5ae:	701a      	strb	r2, [r3, #0]
      break;
 800b5b0:	e130      	b.n	800b814 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	795b      	ldrb	r3, [r3, #5]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 ff65 	bl	800c488 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	791b      	ldrb	r3, [r3, #4]
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 ff5f 	bl	800c488 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	701a      	strb	r2, [r3, #0]
      break;
 800b5d6:	e11d      	b.n	800b814 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b5d8:	2101      	movs	r1, #1
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 fa68 	bl	800bab0 <USBH_SetAddress>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d132      	bne.n	800b650 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800b5ea:	2002      	movs	r0, #2
 800b5ec:	f001 fa45 	bl	800ca7a <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2203      	movs	r2, #3
 800b5fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	7919      	ldrb	r1, [r3, #4]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b612:	b292      	uxth	r2, r2
 800b614:	9202      	str	r2, [sp, #8]
 800b616:	2200      	movs	r2, #0
 800b618:	9201      	str	r2, [sp, #4]
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	4603      	mov	r3, r0
 800b61e:	2280      	movs	r2, #128	; 0x80
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fee1 	bl	800c3e8 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	7959      	ldrb	r1, [r3, #5]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800b636:	687a      	ldr	r2, [r7, #4]
 800b638:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b63a:	b292      	uxth	r2, r2
 800b63c:	9202      	str	r2, [sp, #8]
 800b63e:	2200      	movs	r2, #0
 800b640:	9201      	str	r2, [sp, #4]
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	4603      	mov	r3, r0
 800b646:	2200      	movs	r2, #0
 800b648:	6878      	ldr	r0, [r7, #4]
 800b64a:	f000 fecd 	bl	800c3e8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b64e:	e0e3      	b.n	800b818 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b650:	7bbb      	ldrb	r3, [r7, #14]
 800b652:	2b03      	cmp	r3, #3
 800b654:	f040 80e0 	bne.w	800b818 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	220d      	movs	r2, #13
 800b65c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	705a      	strb	r2, [r3, #1]
      break;
 800b664:	e0d8      	b.n	800b818 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b666:	2109      	movs	r1, #9
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f99d 	bl	800b9a8 <USBH_Get_CfgDesc>
 800b66e:	4603      	mov	r3, r0
 800b670:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b672:	7bbb      	ldrb	r3, [r7, #14]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d103      	bne.n	800b680 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2204      	movs	r2, #4
 800b67c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b67e:	e0cd      	b.n	800b81c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b680:	7bbb      	ldrb	r3, [r7, #14]
 800b682:	2b03      	cmp	r3, #3
 800b684:	f040 80ca 	bne.w	800b81c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b68e:	3301      	adds	r3, #1
 800b690:	b2da      	uxtb	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b69e:	2b03      	cmp	r3, #3
 800b6a0:	d903      	bls.n	800b6aa <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	220d      	movs	r2, #13
 800b6a6:	701a      	strb	r2, [r3, #0]
      break;
 800b6a8:	e0b8      	b.n	800b81c <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	795b      	ldrb	r3, [r3, #5]
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	6878      	ldr	r0, [r7, #4]
 800b6b2:	f000 fee9 	bl	800c488 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	791b      	ldrb	r3, [r3, #4]
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 fee3 	bl	800c488 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	701a      	strb	r2, [r3, #0]
      break;
 800b6ce:	e0a5      	b.n	800b81c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	6878      	ldr	r0, [r7, #4]
 800b6da:	f000 f965 	bl	800b9a8 <USBH_Get_CfgDesc>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6e2:	7bbb      	ldrb	r3, [r7, #14]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d103      	bne.n	800b6f0 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2205      	movs	r2, #5
 800b6ec:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b6ee:	e097      	b.n	800b820 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b6f0:	7bbb      	ldrb	r3, [r7, #14]
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	f040 8094 	bne.w	800b820 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b6fe:	3301      	adds	r3, #1
 800b700:	b2da      	uxtb	r2, r3
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800b70e:	2b03      	cmp	r3, #3
 800b710:	d903      	bls.n	800b71a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	220d      	movs	r2, #13
 800b716:	701a      	strb	r2, [r3, #0]
      break;
 800b718:	e082      	b.n	800b820 <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	795b      	ldrb	r3, [r3, #5]
 800b71e:	4619      	mov	r1, r3
 800b720:	6878      	ldr	r0, [r7, #4]
 800b722:	f000 feb1 	bl	800c488 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	791b      	ldrb	r3, [r3, #4]
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f000 feab 	bl	800c488 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2200      	movs	r2, #0
 800b736:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	701a      	strb	r2, [r3, #0]
      break;
 800b73e:	e06f      	b.n	800b820 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800b746:	2b00      	cmp	r3, #0
 800b748:	d019      	beq.n	800b77e <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b756:	23ff      	movs	r3, #255	; 0xff
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 f949 	bl	800b9f0 <USBH_Get_StringDesc>
 800b75e:	4603      	mov	r3, r0
 800b760:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b762:	7bbb      	ldrb	r3, [r7, #14]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d103      	bne.n	800b770 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2206      	movs	r2, #6
 800b76c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b76e:	e059      	b.n	800b824 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	2b03      	cmp	r3, #3
 800b774:	d156      	bne.n	800b824 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	2206      	movs	r2, #6
 800b77a:	705a      	strb	r2, [r3, #1]
      break;
 800b77c:	e052      	b.n	800b824 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2206      	movs	r2, #6
 800b782:	705a      	strb	r2, [r3, #1]
      break;
 800b784:	e04e      	b.n	800b824 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d019      	beq.n	800b7c4 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b79c:	23ff      	movs	r3, #255	; 0xff
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	f000 f926 	bl	800b9f0 <USBH_Get_StringDesc>
 800b7a4:	4603      	mov	r3, r0
 800b7a6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b7a8:	7bbb      	ldrb	r3, [r7, #14]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d103      	bne.n	800b7b6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	2207      	movs	r2, #7
 800b7b2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800b7b4:	e038      	b.n	800b828 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7b6:	7bbb      	ldrb	r3, [r7, #14]
 800b7b8:	2b03      	cmp	r3, #3
 800b7ba:	d135      	bne.n	800b828 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2207      	movs	r2, #7
 800b7c0:	705a      	strb	r2, [r3, #1]
      break;
 800b7c2:	e031      	b.n	800b828 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2207      	movs	r2, #7
 800b7c8:	705a      	strb	r2, [r3, #1]
      break;
 800b7ca:	e02d      	b.n	800b828 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d017      	beq.n	800b806 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b7e2:	23ff      	movs	r3, #255	; 0xff
 800b7e4:	6878      	ldr	r0, [r7, #4]
 800b7e6:	f000 f903 	bl	800b9f0 <USBH_Get_StringDesc>
 800b7ea:	4603      	mov	r3, r0
 800b7ec:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b7ee:	7bbb      	ldrb	r3, [r7, #14]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d102      	bne.n	800b7fa <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b7f8:	e018      	b.n	800b82c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b7fa:	7bbb      	ldrb	r3, [r7, #14]
 800b7fc:	2b03      	cmp	r3, #3
 800b7fe:	d115      	bne.n	800b82c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	73fb      	strb	r3, [r7, #15]
      break;
 800b804:	e012      	b.n	800b82c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800b806:	2300      	movs	r3, #0
 800b808:	73fb      	strb	r3, [r7, #15]
      break;
 800b80a:	e00f      	b.n	800b82c <USBH_HandleEnum+0x3bc>

    default:
      break;
 800b80c:	bf00      	nop
 800b80e:	e00e      	b.n	800b82e <USBH_HandleEnum+0x3be>
      break;
 800b810:	bf00      	nop
 800b812:	e00c      	b.n	800b82e <USBH_HandleEnum+0x3be>
      break;
 800b814:	bf00      	nop
 800b816:	e00a      	b.n	800b82e <USBH_HandleEnum+0x3be>
      break;
 800b818:	bf00      	nop
 800b81a:	e008      	b.n	800b82e <USBH_HandleEnum+0x3be>
      break;
 800b81c:	bf00      	nop
 800b81e:	e006      	b.n	800b82e <USBH_HandleEnum+0x3be>
      break;
 800b820:	bf00      	nop
 800b822:	e004      	b.n	800b82e <USBH_HandleEnum+0x3be>
      break;
 800b824:	bf00      	nop
 800b826:	e002      	b.n	800b82e <USBH_HandleEnum+0x3be>
      break;
 800b828:	bf00      	nop
 800b82a:	e000      	b.n	800b82e <USBH_HandleEnum+0x3be>
      break;
 800b82c:	bf00      	nop
  }
  return Status;
 800b82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b830:	4618      	mov	r0, r3
 800b832:	3710      	adds	r7, #16
 800b834:	46bd      	mov	sp, r7
 800b836:	bd80      	pop	{r7, pc}

0800b838 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	683a      	ldr	r2, [r7, #0]
 800b846:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800b84a:	bf00      	nop
 800b84c:	370c      	adds	r7, #12
 800b84e:	46bd      	mov	sp, r7
 800b850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b854:	4770      	bx	lr

0800b856 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800b856:	b580      	push	{r7, lr}
 800b858:	b082      	sub	sp, #8
 800b85a:	af00      	add	r7, sp, #0
 800b85c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b864:	1c5a      	adds	r2, r3, #1
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 f804 	bl	800b87a <USBH_HandleSof>
}
 800b872:	bf00      	nop
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}

0800b87a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800b87a:	b580      	push	{r7, lr}
 800b87c:	b082      	sub	sp, #8
 800b87e:	af00      	add	r7, sp, #0
 800b880:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	b2db      	uxtb	r3, r3
 800b888:	2b0b      	cmp	r3, #11
 800b88a:	d10a      	bne.n	800b8a2 <USBH_HandleSof+0x28>
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b892:	2b00      	cmp	r3, #0
 800b894:	d005      	beq.n	800b8a2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	6878      	ldr	r0, [r7, #4]
 800b8a0:	4798      	blx	r3
  }
}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800b8aa:	b480      	push	{r7}
 800b8ac:	b083      	sub	sp, #12
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2201      	movs	r2, #1
 800b8b6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 800b8ba:	bf00      	nop
}
 800b8bc:	370c      	adds	r7, #12
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr

0800b8c6 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800b8c6:	b480      	push	{r7}
 800b8c8:	b083      	sub	sp, #12
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800b8d6:	bf00      	nop
}
 800b8d8:	370c      	adds	r7, #12
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e0:	4770      	bx	lr

0800b8e2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800b8e2:	b480      	push	{r7}
 800b8e4:	b083      	sub	sp, #12
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	2201      	movs	r2, #1
 800b8ee:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2200      	movs	r2, #0
 800b8f6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b902:	2300      	movs	r3, #0
}
 800b904:	4618      	mov	r0, r3
 800b906:	370c      	adds	r7, #12
 800b908:	46bd      	mov	sp, r7
 800b90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90e:	4770      	bx	lr

0800b910 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b082      	sub	sp, #8
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	2201      	movs	r2, #1
 800b91c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	2200      	movs	r2, #0
 800b924:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	2200      	movs	r2, #0
 800b92c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f000 ff56 	bl	800c7e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	791b      	ldrb	r3, [r3, #4]
 800b93a:	4619      	mov	r1, r3
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fda3 	bl	800c488 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	795b      	ldrb	r3, [r3, #5]
 800b946:	4619      	mov	r1, r3
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fd9d 	bl	800c488 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b086      	sub	sp, #24
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	460b      	mov	r3, r1
 800b962:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800b96a:	78fb      	ldrb	r3, [r7, #3]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	4613      	mov	r3, r2
 800b972:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b976:	2100      	movs	r1, #0
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f864 	bl	800ba46 <USBH_GetDescriptor>
 800b97e:	4603      	mov	r3, r0
 800b980:	73fb      	strb	r3, [r7, #15]
 800b982:	7bfb      	ldrb	r3, [r7, #15]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d10a      	bne.n	800b99e <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b994:	78fa      	ldrb	r2, [r7, #3]
 800b996:	b292      	uxth	r2, r2
 800b998:	4619      	mov	r1, r3
 800b99a:	f000 f918 	bl	800bbce <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800b99e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b086      	sub	sp, #24
 800b9ac:	af02      	add	r7, sp, #8
 800b9ae:	6078      	str	r0, [r7, #4]
 800b9b0:	460b      	mov	r3, r1
 800b9b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	331c      	adds	r3, #28
 800b9b8:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800b9ba:	887b      	ldrh	r3, [r7, #2]
 800b9bc:	9300      	str	r3, [sp, #0]
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9c4:	2100      	movs	r1, #0
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f83d 	bl	800ba46 <USBH_GetDescriptor>
 800b9cc:	4603      	mov	r3, r0
 800b9ce:	72fb      	strb	r3, [r7, #11]
 800b9d0:	7afb      	ldrb	r3, [r7, #11]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d107      	bne.n	800b9e6 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b9dc:	887a      	ldrh	r2, [r7, #2]
 800b9de:	68f9      	ldr	r1, [r7, #12]
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f000 f964 	bl	800bcae <USBH_ParseCfgDesc>
  }

  return status;
 800b9e6:	7afb      	ldrb	r3, [r7, #11]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b088      	sub	sp, #32
 800b9f4:	af02      	add	r7, sp, #8
 800b9f6:	60f8      	str	r0, [r7, #12]
 800b9f8:	607a      	str	r2, [r7, #4]
 800b9fa:	461a      	mov	r2, r3
 800b9fc:	460b      	mov	r3, r1
 800b9fe:	72fb      	strb	r3, [r7, #11]
 800ba00:	4613      	mov	r3, r2
 800ba02:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800ba04:	7afb      	ldrb	r3, [r7, #11]
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ba0c:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800ba14:	893b      	ldrh	r3, [r7, #8]
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	460b      	mov	r3, r1
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	68f8      	ldr	r0, [r7, #12]
 800ba1e:	f000 f812 	bl	800ba46 <USBH_GetDescriptor>
 800ba22:	4603      	mov	r3, r0
 800ba24:	75fb      	strb	r3, [r7, #23]
 800ba26:	7dfb      	ldrb	r3, [r7, #23]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d107      	bne.n	800ba3c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ba32:	893a      	ldrh	r2, [r7, #8]
 800ba34:	6879      	ldr	r1, [r7, #4]
 800ba36:	4618      	mov	r0, r3
 800ba38:	f000 fa37 	bl	800beaa <USBH_ParseStringDesc>
  }

  return status;
 800ba3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3718      	adds	r7, #24
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}

0800ba46 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ba46:	b580      	push	{r7, lr}
 800ba48:	b084      	sub	sp, #16
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	60f8      	str	r0, [r7, #12]
 800ba4e:	607b      	str	r3, [r7, #4]
 800ba50:	460b      	mov	r3, r1
 800ba52:	72fb      	strb	r3, [r7, #11]
 800ba54:	4613      	mov	r3, r2
 800ba56:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	789b      	ldrb	r3, [r3, #2]
 800ba5c:	2b01      	cmp	r3, #1
 800ba5e:	d11c      	bne.n	800ba9a <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ba60:	7afb      	ldrb	r3, [r7, #11]
 800ba62:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ba66:	b2da      	uxtb	r2, r3
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	2206      	movs	r2, #6
 800ba70:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	893a      	ldrh	r2, [r7, #8]
 800ba76:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ba78:	893b      	ldrh	r3, [r7, #8]
 800ba7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ba7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba82:	d104      	bne.n	800ba8e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	f240 4209 	movw	r2, #1033	; 0x409
 800ba8a:	829a      	strh	r2, [r3, #20]
 800ba8c:	e002      	b.n	800ba94 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	8b3a      	ldrh	r2, [r7, #24]
 800ba98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ba9a:	8b3b      	ldrh	r3, [r7, #24]
 800ba9c:	461a      	mov	r2, r3
 800ba9e:	6879      	ldr	r1, [r7, #4]
 800baa0:	68f8      	ldr	r0, [r7, #12]
 800baa2:	f000 fa50 	bl	800bf46 <USBH_CtlReq>
 800baa6:	4603      	mov	r3, r0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3710      	adds	r7, #16
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}

0800bab0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
 800bab8:	460b      	mov	r3, r1
 800baba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	789b      	ldrb	r3, [r3, #2]
 800bac0:	2b01      	cmp	r3, #1
 800bac2:	d10f      	bne.n	800bae4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2200      	movs	r2, #0
 800bac8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	2205      	movs	r2, #5
 800bace:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bad0:	78fb      	ldrb	r3, [r7, #3]
 800bad2:	b29a      	uxth	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bae4:	2200      	movs	r2, #0
 800bae6:	2100      	movs	r1, #0
 800bae8:	6878      	ldr	r0, [r7, #4]
 800baea:	f000 fa2c 	bl	800bf46 <USBH_CtlReq>
 800baee:	4603      	mov	r3, r0
}
 800baf0:	4618      	mov	r0, r3
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}

0800baf8 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b082      	sub	sp, #8
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
 800bb00:	460b      	mov	r3, r1
 800bb02:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	789b      	ldrb	r3, [r3, #2]
 800bb08:	2b01      	cmp	r3, #1
 800bb0a:	d10e      	bne.n	800bb2a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2200      	movs	r2, #0
 800bb10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2209      	movs	r2, #9
 800bb16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	887a      	ldrh	r2, [r7, #2]
 800bb1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb2a:	2200      	movs	r2, #0
 800bb2c:	2100      	movs	r1, #0
 800bb2e:	6878      	ldr	r0, [r7, #4]
 800bb30:	f000 fa09 	bl	800bf46 <USBH_CtlReq>
 800bb34:	4603      	mov	r3, r0
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3708      	adds	r7, #8
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	b082      	sub	sp, #8
 800bb42:	af00      	add	r7, sp, #0
 800bb44:	6078      	str	r0, [r7, #4]
 800bb46:	460b      	mov	r3, r1
 800bb48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	789b      	ldrb	r3, [r3, #2]
 800bb4e:	2b01      	cmp	r3, #1
 800bb50:	d10f      	bne.n	800bb72 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	2200      	movs	r2, #0
 800bb56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	2203      	movs	r2, #3
 800bb5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bb5e:	78fb      	ldrb	r3, [r7, #3]
 800bb60:	b29a      	uxth	r2, r3
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2200      	movs	r2, #0
 800bb70:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800bb72:	2200      	movs	r2, #0
 800bb74:	2100      	movs	r1, #0
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f000 f9e5 	bl	800bf46 <USBH_CtlReq>
 800bb7c:	4603      	mov	r3, r0
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	3708      	adds	r7, #8
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd80      	pop	{r7, pc}

0800bb86 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bb86:	b580      	push	{r7, lr}
 800bb88:	b082      	sub	sp, #8
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	789b      	ldrb	r3, [r3, #2]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d10f      	bne.n	800bbba <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2202      	movs	r2, #2
 800bb9e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2201      	movs	r2, #1
 800bba4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bbac:	78fb      	ldrb	r3, [r7, #3]
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800bbba:	2200      	movs	r2, #0
 800bbbc:	2100      	movs	r1, #0
 800bbbe:	6878      	ldr	r0, [r7, #4]
 800bbc0:	f000 f9c1 	bl	800bf46 <USBH_CtlReq>
 800bbc4:	4603      	mov	r3, r0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3708      	adds	r7, #8
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800bbce:	b480      	push	{r7}
 800bbd0:	b085      	sub	sp, #20
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	60f8      	str	r0, [r7, #12]
 800bbd6:	60b9      	str	r1, [r7, #8]
 800bbd8:	4613      	mov	r3, r2
 800bbda:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800bbdc:	68bb      	ldr	r3, [r7, #8]
 800bbde:	781a      	ldrb	r2, [r3, #0]
 800bbe0:	68fb      	ldr	r3, [r7, #12]
 800bbe2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	785a      	ldrb	r2, [r3, #1]
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	3302      	adds	r3, #2
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	b29a      	uxth	r2, r3
 800bbf4:	68bb      	ldr	r3, [r7, #8]
 800bbf6:	3303      	adds	r3, #3
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	021b      	lsls	r3, r3, #8
 800bbfe:	b29b      	uxth	r3, r3
 800bc00:	4313      	orrs	r3, r2
 800bc02:	b29a      	uxth	r2, r3
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	791a      	ldrb	r2, [r3, #4]
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	795a      	ldrb	r2, [r3, #5]
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	799a      	ldrb	r2, [r3, #6]
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	79da      	ldrb	r2, [r3, #7]
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800bc28:	88fb      	ldrh	r3, [r7, #6]
 800bc2a:	2b08      	cmp	r3, #8
 800bc2c:	d939      	bls.n	800bca2 <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	3308      	adds	r3, #8
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	b29a      	uxth	r2, r3
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	3309      	adds	r3, #9
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	021b      	lsls	r3, r3, #8
 800bc40:	b29b      	uxth	r3, r3
 800bc42:	4313      	orrs	r3, r2
 800bc44:	b29a      	uxth	r2, r3
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	330a      	adds	r3, #10
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	b29a      	uxth	r2, r3
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	330b      	adds	r3, #11
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	b29b      	uxth	r3, r3
 800bc5a:	021b      	lsls	r3, r3, #8
 800bc5c:	b29b      	uxth	r3, r3
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	b29a      	uxth	r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	330c      	adds	r3, #12
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	330d      	adds	r3, #13
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	b29b      	uxth	r3, r3
 800bc76:	021b      	lsls	r3, r3, #8
 800bc78:	b29b      	uxth	r3, r3
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	b29a      	uxth	r2, r3
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	7b9a      	ldrb	r2, [r3, #14]
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	7bda      	ldrb	r2, [r3, #15]
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800bc92:	68bb      	ldr	r3, [r7, #8]
 800bc94:	7c1a      	ldrb	r2, [r3, #16]
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	7c5a      	ldrb	r2, [r3, #17]
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	745a      	strb	r2, [r3, #17]
  }
}
 800bca2:	bf00      	nop
 800bca4:	3714      	adds	r7, #20
 800bca6:	46bd      	mov	sp, r7
 800bca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcac:	4770      	bx	lr

0800bcae <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b08a      	sub	sp, #40	; 0x28
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	60f8      	str	r0, [r7, #12]
 800bcb6:	60b9      	str	r1, [r7, #8]
 800bcb8:	4613      	mov	r3, r2
 800bcba:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	781a      	ldrb	r2, [r3, #0]
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	785a      	ldrb	r2, [r3, #1]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	3302      	adds	r3, #2
 800bce4:	781b      	ldrb	r3, [r3, #0]
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	3303      	adds	r3, #3
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	b29b      	uxth	r3, r3
 800bcf0:	021b      	lsls	r3, r3, #8
 800bcf2:	b29b      	uxth	r3, r3
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	b29a      	uxth	r2, r3
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	791a      	ldrb	r2, [r3, #4]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800bd04:	68bb      	ldr	r3, [r7, #8]
 800bd06:	795a      	ldrb	r2, [r3, #5]
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	799a      	ldrb	r2, [r3, #6]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	79da      	ldrb	r2, [r3, #7]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	7a1a      	ldrb	r2, [r3, #8]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bd24:	88fb      	ldrh	r3, [r7, #6]
 800bd26:	2b09      	cmp	r3, #9
 800bd28:	d95f      	bls.n	800bdea <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800bd2a:	2309      	movs	r3, #9
 800bd2c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bd32:	e051      	b.n	800bdd8 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd34:	f107 0316 	add.w	r3, r7, #22
 800bd38:	4619      	mov	r1, r3
 800bd3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd3c:	f000 f8e8 	bl	800bf10 <USBH_GetNextDesc>
 800bd40:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800bd42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd44:	785b      	ldrb	r3, [r3, #1]
 800bd46:	2b04      	cmp	r3, #4
 800bd48:	d146      	bne.n	800bdd8 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800bd4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd4e:	221a      	movs	r2, #26
 800bd50:	fb02 f303 	mul.w	r3, r2, r3
 800bd54:	3308      	adds	r3, #8
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	4413      	add	r3, r2
 800bd5a:	3302      	adds	r3, #2
 800bd5c:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800bd5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bd60:	69f8      	ldr	r0, [r7, #28]
 800bd62:	f000 f846 	bl	800bdf2 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800bd66:	2300      	movs	r3, #0
 800bd68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bd70:	e022      	b.n	800bdb8 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bd72:	f107 0316 	add.w	r3, r7, #22
 800bd76:	4619      	mov	r1, r3
 800bd78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bd7a:	f000 f8c9 	bl	800bf10 <USBH_GetNextDesc>
 800bd7e:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	785b      	ldrb	r3, [r3, #1]
 800bd84:	2b05      	cmp	r3, #5
 800bd86:	d117      	bne.n	800bdb8 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800bd88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bd8c:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bd90:	3201      	adds	r2, #1
 800bd92:	00d2      	lsls	r2, r2, #3
 800bd94:	211a      	movs	r1, #26
 800bd96:	fb01 f303 	mul.w	r3, r1, r3
 800bd9a:	4413      	add	r3, r2
 800bd9c:	3308      	adds	r3, #8
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	4413      	add	r3, r2
 800bda2:	3304      	adds	r3, #4
 800bda4:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800bda6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bda8:	69b8      	ldr	r0, [r7, #24]
 800bdaa:	f000 f851 	bl	800be50 <USBH_ParseEPDesc>
            ep_ix++;
 800bdae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800bdb2:	3301      	adds	r3, #1
 800bdb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	791b      	ldrb	r3, [r3, #4]
 800bdbc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d204      	bcs.n	800bdce <USBH_ParseCfgDesc+0x120>
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	885a      	ldrh	r2, [r3, #2]
 800bdc8:	8afb      	ldrh	r3, [r7, #22]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d8d1      	bhi.n	800bd72 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800bdce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bdd2:	3301      	adds	r3, #1
 800bdd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bdd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800bddc:	2b01      	cmp	r3, #1
 800bdde:	d804      	bhi.n	800bdea <USBH_ParseCfgDesc+0x13c>
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	885a      	ldrh	r2, [r3, #2]
 800bde4:	8afb      	ldrh	r3, [r7, #22]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d8a4      	bhi.n	800bd34 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800bdea:	bf00      	nop
 800bdec:	3728      	adds	r7, #40	; 0x28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b083      	sub	sp, #12
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	781a      	ldrb	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	785a      	ldrb	r2, [r3, #1]
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	789a      	ldrb	r2, [r3, #2]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800be14:	683b      	ldr	r3, [r7, #0]
 800be16:	78da      	ldrb	r2, [r3, #3]
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	791a      	ldrb	r2, [r3, #4]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	795a      	ldrb	r2, [r3, #5]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	799a      	ldrb	r2, [r3, #6]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800be34:	683b      	ldr	r3, [r7, #0]
 800be36:	79da      	ldrb	r2, [r3, #7]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800be3c:	683b      	ldr	r3, [r7, #0]
 800be3e:	7a1a      	ldrb	r2, [r3, #8]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	721a      	strb	r2, [r3, #8]
}
 800be44:	bf00      	nop
 800be46:	370c      	adds	r7, #12
 800be48:	46bd      	mov	sp, r7
 800be4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4e:	4770      	bx	lr

0800be50 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800be50:	b480      	push	{r7}
 800be52:	b083      	sub	sp, #12
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800be5a:	683b      	ldr	r3, [r7, #0]
 800be5c:	781a      	ldrb	r2, [r3, #0]
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	785a      	ldrb	r2, [r3, #1]
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800be6a:	683b      	ldr	r3, [r7, #0]
 800be6c:	789a      	ldrb	r2, [r3, #2]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	78da      	ldrb	r2, [r3, #3]
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	3304      	adds	r3, #4
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	b29a      	uxth	r2, r3
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	3305      	adds	r3, #5
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	b29b      	uxth	r3, r3
 800be8a:	021b      	lsls	r3, r3, #8
 800be8c:	b29b      	uxth	r3, r3
 800be8e:	4313      	orrs	r3, r2
 800be90:	b29a      	uxth	r2, r3
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	799a      	ldrb	r2, [r3, #6]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	719a      	strb	r2, [r3, #6]
}
 800be9e:	bf00      	nop
 800bea0:	370c      	adds	r7, #12
 800bea2:	46bd      	mov	sp, r7
 800bea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea8:	4770      	bx	lr

0800beaa <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800beaa:	b480      	push	{r7}
 800beac:	b087      	sub	sp, #28
 800beae:	af00      	add	r7, sp, #0
 800beb0:	60f8      	str	r0, [r7, #12]
 800beb2:	60b9      	str	r1, [r7, #8]
 800beb4:	4613      	mov	r3, r2
 800beb6:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	3301      	adds	r3, #1
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d120      	bne.n	800bf04 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	781b      	ldrb	r3, [r3, #0]
 800bec6:	1e9a      	subs	r2, r3, #2
 800bec8:	88fb      	ldrh	r3, [r7, #6]
 800beca:	4293      	cmp	r3, r2
 800becc:	bf28      	it	cs
 800bece:	4613      	movcs	r3, r2
 800bed0:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	3302      	adds	r3, #2
 800bed6:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800bed8:	2300      	movs	r3, #0
 800beda:	82fb      	strh	r3, [r7, #22]
 800bedc:	e00b      	b.n	800bef6 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800bede:	8afb      	ldrh	r3, [r7, #22]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	4413      	add	r3, r2
 800bee4:	781a      	ldrb	r2, [r3, #0]
 800bee6:	68bb      	ldr	r3, [r7, #8]
 800bee8:	701a      	strb	r2, [r3, #0]
      pdest++;
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	3301      	adds	r3, #1
 800beee:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800bef0:	8afb      	ldrh	r3, [r7, #22]
 800bef2:	3302      	adds	r3, #2
 800bef4:	82fb      	strh	r3, [r7, #22]
 800bef6:	8afa      	ldrh	r2, [r7, #22]
 800bef8:	8abb      	ldrh	r3, [r7, #20]
 800befa:	429a      	cmp	r2, r3
 800befc:	d3ef      	bcc.n	800bede <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800befe:	68bb      	ldr	r3, [r7, #8]
 800bf00:	2200      	movs	r2, #0
 800bf02:	701a      	strb	r2, [r3, #0]
  }
}
 800bf04:	bf00      	nop
 800bf06:	371c      	adds	r7, #28
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	881a      	ldrh	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	b29b      	uxth	r3, r3
 800bf24:	4413      	add	r3, r2
 800bf26:	b29a      	uxth	r2, r3
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	781b      	ldrb	r3, [r3, #0]
 800bf30:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	4413      	add	r3, r2
 800bf36:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bf38:	68fb      	ldr	r3, [r7, #12]
}
 800bf3a:	4618      	mov	r0, r3
 800bf3c:	3714      	adds	r7, #20
 800bf3e:	46bd      	mov	sp, r7
 800bf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf44:	4770      	bx	lr

0800bf46 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800bf46:	b580      	push	{r7, lr}
 800bf48:	b086      	sub	sp, #24
 800bf4a:	af00      	add	r7, sp, #0
 800bf4c:	60f8      	str	r0, [r7, #12]
 800bf4e:	60b9      	str	r1, [r7, #8]
 800bf50:	4613      	mov	r3, r2
 800bf52:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800bf54:	2301      	movs	r3, #1
 800bf56:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	789b      	ldrb	r3, [r3, #2]
 800bf5c:	2b01      	cmp	r3, #1
 800bf5e:	d002      	beq.n	800bf66 <USBH_CtlReq+0x20>
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d00f      	beq.n	800bf84 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800bf64:	e027      	b.n	800bfb6 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	88fa      	ldrh	r2, [r7, #6]
 800bf70:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2201      	movs	r2, #1
 800bf76:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800bf7e:	2301      	movs	r3, #1
 800bf80:	75fb      	strb	r3, [r7, #23]
      break;
 800bf82:	e018      	b.n	800bfb6 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800bf84:	68f8      	ldr	r0, [r7, #12]
 800bf86:	f000 f81b 	bl	800bfc0 <USBH_HandleControl>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800bf8e:	7dfb      	ldrb	r3, [r7, #23]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d002      	beq.n	800bf9a <USBH_CtlReq+0x54>
 800bf94:	7dfb      	ldrb	r3, [r7, #23]
 800bf96:	2b03      	cmp	r3, #3
 800bf98:	d106      	bne.n	800bfa8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	761a      	strb	r2, [r3, #24]
      break;
 800bfa6:	e005      	b.n	800bfb4 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800bfa8:	7dfb      	ldrb	r3, [r7, #23]
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d102      	bne.n	800bfb4 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2201      	movs	r2, #1
 800bfb2:	709a      	strb	r2, [r3, #2]
      break;
 800bfb4:	bf00      	nop
  }
  return status;
 800bfb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfb8:	4618      	mov	r0, r3
 800bfba:	3718      	adds	r7, #24
 800bfbc:	46bd      	mov	sp, r7
 800bfbe:	bd80      	pop	{r7, pc}

0800bfc0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800bfc0:	b580      	push	{r7, lr}
 800bfc2:	b086      	sub	sp, #24
 800bfc4:	af02      	add	r7, sp, #8
 800bfc6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bfcc:	2300      	movs	r3, #0
 800bfce:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	7e1b      	ldrb	r3, [r3, #24]
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	2b0a      	cmp	r3, #10
 800bfd8:	f200 8156 	bhi.w	800c288 <USBH_HandleControl+0x2c8>
 800bfdc:	a201      	add	r2, pc, #4	; (adr r2, 800bfe4 <USBH_HandleControl+0x24>)
 800bfde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfe2:	bf00      	nop
 800bfe4:	0800c011 	.word	0x0800c011
 800bfe8:	0800c02b 	.word	0x0800c02b
 800bfec:	0800c095 	.word	0x0800c095
 800bff0:	0800c0bb 	.word	0x0800c0bb
 800bff4:	0800c0f3 	.word	0x0800c0f3
 800bff8:	0800c11d 	.word	0x0800c11d
 800bffc:	0800c16f 	.word	0x0800c16f
 800c000:	0800c191 	.word	0x0800c191
 800c004:	0800c1cd 	.word	0x0800c1cd
 800c008:	0800c1f3 	.word	0x0800c1f3
 800c00c:	0800c231 	.word	0x0800c231
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	f103 0110 	add.w	r1, r3, #16
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	795b      	ldrb	r3, [r3, #5]
 800c01a:	461a      	mov	r2, r3
 800c01c:	6878      	ldr	r0, [r7, #4]
 800c01e:	f000 f943 	bl	800c2a8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	2202      	movs	r2, #2
 800c026:	761a      	strb	r2, [r3, #24]
      break;
 800c028:	e139      	b.n	800c29e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	795b      	ldrb	r3, [r3, #5]
 800c02e:	4619      	mov	r1, r3
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fcc5 	bl	800c9c0 <USBH_LL_GetURBState>
 800c036:	4603      	mov	r3, r0
 800c038:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c03a:	7bbb      	ldrb	r3, [r7, #14]
 800c03c:	2b01      	cmp	r3, #1
 800c03e:	d11e      	bne.n	800c07e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	7c1b      	ldrb	r3, [r3, #16]
 800c044:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c048:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	8adb      	ldrh	r3, [r3, #22]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00a      	beq.n	800c068 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c052:	7b7b      	ldrb	r3, [r7, #13]
 800c054:	2b80      	cmp	r3, #128	; 0x80
 800c056:	d103      	bne.n	800c060 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	2203      	movs	r2, #3
 800c05c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c05e:	e115      	b.n	800c28c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2205      	movs	r2, #5
 800c064:	761a      	strb	r2, [r3, #24]
      break;
 800c066:	e111      	b.n	800c28c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c068:	7b7b      	ldrb	r3, [r7, #13]
 800c06a:	2b80      	cmp	r3, #128	; 0x80
 800c06c:	d103      	bne.n	800c076 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2209      	movs	r2, #9
 800c072:	761a      	strb	r2, [r3, #24]
      break;
 800c074:	e10a      	b.n	800c28c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2207      	movs	r2, #7
 800c07a:	761a      	strb	r2, [r3, #24]
      break;
 800c07c:	e106      	b.n	800c28c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c07e:	7bbb      	ldrb	r3, [r7, #14]
 800c080:	2b04      	cmp	r3, #4
 800c082:	d003      	beq.n	800c08c <USBH_HandleControl+0xcc>
 800c084:	7bbb      	ldrb	r3, [r7, #14]
 800c086:	2b02      	cmp	r3, #2
 800c088:	f040 8100 	bne.w	800c28c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	220b      	movs	r2, #11
 800c090:	761a      	strb	r2, [r3, #24]
      break;
 800c092:	e0fb      	b.n	800c28c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c09a:	b29a      	uxth	r2, r3
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	6899      	ldr	r1, [r3, #8]
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	899a      	ldrh	r2, [r3, #12]
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	791b      	ldrb	r3, [r3, #4]
 800c0ac:	6878      	ldr	r0, [r7, #4]
 800c0ae:	f000 f93a 	bl	800c326 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2204      	movs	r2, #4
 800c0b6:	761a      	strb	r2, [r3, #24]
      break;
 800c0b8:	e0f1      	b.n	800c29e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	791b      	ldrb	r3, [r3, #4]
 800c0be:	4619      	mov	r1, r3
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 fc7d 	bl	800c9c0 <USBH_LL_GetURBState>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c0ca:	7bbb      	ldrb	r3, [r7, #14]
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d102      	bne.n	800c0d6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2209      	movs	r2, #9
 800c0d4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c0d6:	7bbb      	ldrb	r3, [r7, #14]
 800c0d8:	2b05      	cmp	r3, #5
 800c0da:	d102      	bne.n	800c0e2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c0dc:	2303      	movs	r3, #3
 800c0de:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c0e0:	e0d6      	b.n	800c290 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c0e2:	7bbb      	ldrb	r3, [r7, #14]
 800c0e4:	2b04      	cmp	r3, #4
 800c0e6:	f040 80d3 	bne.w	800c290 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	220b      	movs	r2, #11
 800c0ee:	761a      	strb	r2, [r3, #24]
      break;
 800c0f0:	e0ce      	b.n	800c290 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6899      	ldr	r1, [r3, #8]
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	899a      	ldrh	r2, [r3, #12]
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	795b      	ldrb	r3, [r3, #5]
 800c0fe:	2001      	movs	r0, #1
 800c100:	9000      	str	r0, [sp, #0]
 800c102:	6878      	ldr	r0, [r7, #4]
 800c104:	f000 f8ea 	bl	800c2dc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c10e:	b29a      	uxth	r2, r3
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2206      	movs	r2, #6
 800c118:	761a      	strb	r2, [r3, #24]
      break;
 800c11a:	e0c0      	b.n	800c29e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	795b      	ldrb	r3, [r3, #5]
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fc4c 	bl	800c9c0 <USBH_LL_GetURBState>
 800c128:	4603      	mov	r3, r0
 800c12a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c12c:	7bbb      	ldrb	r3, [r7, #14]
 800c12e:	2b01      	cmp	r3, #1
 800c130:	d103      	bne.n	800c13a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2207      	movs	r2, #7
 800c136:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c138:	e0ac      	b.n	800c294 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	2b05      	cmp	r3, #5
 800c13e:	d105      	bne.n	800c14c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	220c      	movs	r2, #12
 800c144:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c146:	2303      	movs	r3, #3
 800c148:	73fb      	strb	r3, [r7, #15]
      break;
 800c14a:	e0a3      	b.n	800c294 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c14c:	7bbb      	ldrb	r3, [r7, #14]
 800c14e:	2b02      	cmp	r3, #2
 800c150:	d103      	bne.n	800c15a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	2205      	movs	r2, #5
 800c156:	761a      	strb	r2, [r3, #24]
      break;
 800c158:	e09c      	b.n	800c294 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c15a:	7bbb      	ldrb	r3, [r7, #14]
 800c15c:	2b04      	cmp	r3, #4
 800c15e:	f040 8099 	bne.w	800c294 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	220b      	movs	r2, #11
 800c166:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c168:	2302      	movs	r3, #2
 800c16a:	73fb      	strb	r3, [r7, #15]
      break;
 800c16c:	e092      	b.n	800c294 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	791b      	ldrb	r3, [r3, #4]
 800c172:	2200      	movs	r2, #0
 800c174:	2100      	movs	r1, #0
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f8d5 	bl	800c326 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c182:	b29a      	uxth	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2208      	movs	r2, #8
 800c18c:	761a      	strb	r2, [r3, #24]

      break;
 800c18e:	e086      	b.n	800c29e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	791b      	ldrb	r3, [r3, #4]
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f000 fc12 	bl	800c9c0 <USBH_LL_GetURBState>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
 800c1a2:	2b01      	cmp	r3, #1
 800c1a4:	d105      	bne.n	800c1b2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	220d      	movs	r2, #13
 800c1aa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c1ac:	2300      	movs	r3, #0
 800c1ae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c1b0:	e072      	b.n	800c298 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c1b2:	7bbb      	ldrb	r3, [r7, #14]
 800c1b4:	2b04      	cmp	r3, #4
 800c1b6:	d103      	bne.n	800c1c0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	220b      	movs	r2, #11
 800c1bc:	761a      	strb	r2, [r3, #24]
      break;
 800c1be:	e06b      	b.n	800c298 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c1c0:	7bbb      	ldrb	r3, [r7, #14]
 800c1c2:	2b05      	cmp	r3, #5
 800c1c4:	d168      	bne.n	800c298 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ca:	e065      	b.n	800c298 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	795b      	ldrb	r3, [r3, #5]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	9200      	str	r2, [sp, #0]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f87f 	bl	800c2dc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800c1e4:	b29a      	uxth	r2, r3
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	220a      	movs	r2, #10
 800c1ee:	761a      	strb	r2, [r3, #24]
      break;
 800c1f0:	e055      	b.n	800c29e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	795b      	ldrb	r3, [r3, #5]
 800c1f6:	4619      	mov	r1, r3
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 fbe1 	bl	800c9c0 <USBH_LL_GetURBState>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c202:	7bbb      	ldrb	r3, [r7, #14]
 800c204:	2b01      	cmp	r3, #1
 800c206:	d105      	bne.n	800c214 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c208:	2300      	movs	r3, #0
 800c20a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	220d      	movs	r2, #13
 800c210:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c212:	e043      	b.n	800c29c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c214:	7bbb      	ldrb	r3, [r7, #14]
 800c216:	2b02      	cmp	r3, #2
 800c218:	d103      	bne.n	800c222 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2209      	movs	r2, #9
 800c21e:	761a      	strb	r2, [r3, #24]
      break;
 800c220:	e03c      	b.n	800c29c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c222:	7bbb      	ldrb	r3, [r7, #14]
 800c224:	2b04      	cmp	r3, #4
 800c226:	d139      	bne.n	800c29c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	220b      	movs	r2, #11
 800c22c:	761a      	strb	r2, [r3, #24]
      break;
 800c22e:	e035      	b.n	800c29c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	7e5b      	ldrb	r3, [r3, #25]
 800c234:	3301      	adds	r3, #1
 800c236:	b2da      	uxtb	r2, r3
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	765a      	strb	r2, [r3, #25]
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	7e5b      	ldrb	r3, [r3, #25]
 800c240:	2b02      	cmp	r3, #2
 800c242:	d806      	bhi.n	800c252 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2201      	movs	r2, #1
 800c248:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2201      	movs	r2, #1
 800c24e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c250:	e025      	b.n	800c29e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c258:	2106      	movs	r1, #6
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2200      	movs	r2, #0
 800c262:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	795b      	ldrb	r3, [r3, #5]
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f90c 	bl	800c488 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	791b      	ldrb	r3, [r3, #4]
 800c274:	4619      	mov	r1, r3
 800c276:	6878      	ldr	r0, [r7, #4]
 800c278:	f000 f906 	bl	800c488 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c282:	2302      	movs	r3, #2
 800c284:	73fb      	strb	r3, [r7, #15]
      break;
 800c286:	e00a      	b.n	800c29e <USBH_HandleControl+0x2de>

    default:
      break;
 800c288:	bf00      	nop
 800c28a:	e008      	b.n	800c29e <USBH_HandleControl+0x2de>
      break;
 800c28c:	bf00      	nop
 800c28e:	e006      	b.n	800c29e <USBH_HandleControl+0x2de>
      break;
 800c290:	bf00      	nop
 800c292:	e004      	b.n	800c29e <USBH_HandleControl+0x2de>
      break;
 800c294:	bf00      	nop
 800c296:	e002      	b.n	800c29e <USBH_HandleControl+0x2de>
      break;
 800c298:	bf00      	nop
 800c29a:	e000      	b.n	800c29e <USBH_HandleControl+0x2de>
      break;
 800c29c:	bf00      	nop
  }

  return status;
 800c29e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	b088      	sub	sp, #32
 800c2ac:	af04      	add	r7, sp, #16
 800c2ae:	60f8      	str	r0, [r7, #12]
 800c2b0:	60b9      	str	r1, [r7, #8]
 800c2b2:	4613      	mov	r3, r2
 800c2b4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c2b6:	79f9      	ldrb	r1, [r7, #7]
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9303      	str	r3, [sp, #12]
 800c2bc:	2308      	movs	r3, #8
 800c2be:	9302      	str	r3, [sp, #8]
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	9301      	str	r3, [sp, #4]
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	9300      	str	r3, [sp, #0]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	68f8      	ldr	r0, [r7, #12]
 800c2ce:	f000 fb46 	bl	800c95e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3710      	adds	r7, #16
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	bd80      	pop	{r7, pc}

0800c2dc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	b088      	sub	sp, #32
 800c2e0:	af04      	add	r7, sp, #16
 800c2e2:	60f8      	str	r0, [r7, #12]
 800c2e4:	60b9      	str	r1, [r7, #8]
 800c2e6:	4611      	mov	r1, r2
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	460b      	mov	r3, r1
 800c2ec:	80fb      	strh	r3, [r7, #6]
 800c2ee:	4613      	mov	r3, r2
 800c2f0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d001      	beq.n	800c300 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c300:	7979      	ldrb	r1, [r7, #5]
 800c302:	7e3b      	ldrb	r3, [r7, #24]
 800c304:	9303      	str	r3, [sp, #12]
 800c306:	88fb      	ldrh	r3, [r7, #6]
 800c308:	9302      	str	r3, [sp, #8]
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	9301      	str	r3, [sp, #4]
 800c30e:	2301      	movs	r3, #1
 800c310:	9300      	str	r3, [sp, #0]
 800c312:	2300      	movs	r3, #0
 800c314:	2200      	movs	r2, #0
 800c316:	68f8      	ldr	r0, [r7, #12]
 800c318:	f000 fb21 	bl	800c95e <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c31c:	2300      	movs	r3, #0
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3710      	adds	r7, #16
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}

0800c326 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c326:	b580      	push	{r7, lr}
 800c328:	b088      	sub	sp, #32
 800c32a:	af04      	add	r7, sp, #16
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	4611      	mov	r1, r2
 800c332:	461a      	mov	r2, r3
 800c334:	460b      	mov	r3, r1
 800c336:	80fb      	strh	r3, [r7, #6]
 800c338:	4613      	mov	r3, r2
 800c33a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c33c:	7979      	ldrb	r1, [r7, #5]
 800c33e:	2300      	movs	r3, #0
 800c340:	9303      	str	r3, [sp, #12]
 800c342:	88fb      	ldrh	r3, [r7, #6]
 800c344:	9302      	str	r3, [sp, #8]
 800c346:	68bb      	ldr	r3, [r7, #8]
 800c348:	9301      	str	r3, [sp, #4]
 800c34a:	2301      	movs	r3, #1
 800c34c:	9300      	str	r3, [sp, #0]
 800c34e:	2300      	movs	r3, #0
 800c350:	2201      	movs	r2, #1
 800c352:	68f8      	ldr	r0, [r7, #12]
 800c354:	f000 fb03 	bl	800c95e <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c358:	2300      	movs	r3, #0

}
 800c35a:	4618      	mov	r0, r3
 800c35c:	3710      	adds	r7, #16
 800c35e:	46bd      	mov	sp, r7
 800c360:	bd80      	pop	{r7, pc}

0800c362 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c362:	b580      	push	{r7, lr}
 800c364:	b088      	sub	sp, #32
 800c366:	af04      	add	r7, sp, #16
 800c368:	60f8      	str	r0, [r7, #12]
 800c36a:	60b9      	str	r1, [r7, #8]
 800c36c:	4611      	mov	r1, r2
 800c36e:	461a      	mov	r2, r3
 800c370:	460b      	mov	r3, r1
 800c372:	80fb      	strh	r3, [r7, #6]
 800c374:	4613      	mov	r3, r2
 800c376:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d001      	beq.n	800c386 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c382:	2300      	movs	r3, #0
 800c384:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c386:	7979      	ldrb	r1, [r7, #5]
 800c388:	7e3b      	ldrb	r3, [r7, #24]
 800c38a:	9303      	str	r3, [sp, #12]
 800c38c:	88fb      	ldrh	r3, [r7, #6]
 800c38e:	9302      	str	r3, [sp, #8]
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	9301      	str	r3, [sp, #4]
 800c394:	2301      	movs	r3, #1
 800c396:	9300      	str	r3, [sp, #0]
 800c398:	2302      	movs	r3, #2
 800c39a:	2200      	movs	r2, #0
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 fade 	bl	800c95e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c3a2:	2300      	movs	r3, #0
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}

0800c3ac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b088      	sub	sp, #32
 800c3b0:	af04      	add	r7, sp, #16
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	461a      	mov	r2, r3
 800c3ba:	460b      	mov	r3, r1
 800c3bc:	80fb      	strh	r3, [r7, #6]
 800c3be:	4613      	mov	r3, r2
 800c3c0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800c3c2:	7979      	ldrb	r1, [r7, #5]
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	9303      	str	r3, [sp, #12]
 800c3c8:	88fb      	ldrh	r3, [r7, #6]
 800c3ca:	9302      	str	r3, [sp, #8]
 800c3cc:	68bb      	ldr	r3, [r7, #8]
 800c3ce:	9301      	str	r3, [sp, #4]
 800c3d0:	2301      	movs	r3, #1
 800c3d2:	9300      	str	r3, [sp, #0]
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	68f8      	ldr	r0, [r7, #12]
 800c3da:	f000 fac0 	bl	800c95e <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800c3de:	2300      	movs	r3, #0
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}

0800c3e8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b086      	sub	sp, #24
 800c3ec:	af04      	add	r7, sp, #16
 800c3ee:	6078      	str	r0, [r7, #4]
 800c3f0:	4608      	mov	r0, r1
 800c3f2:	4611      	mov	r1, r2
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	70fb      	strb	r3, [r7, #3]
 800c3fa:	460b      	mov	r3, r1
 800c3fc:	70bb      	strb	r3, [r7, #2]
 800c3fe:	4613      	mov	r3, r2
 800c400:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c402:	7878      	ldrb	r0, [r7, #1]
 800c404:	78ba      	ldrb	r2, [r7, #2]
 800c406:	78f9      	ldrb	r1, [r7, #3]
 800c408:	8b3b      	ldrh	r3, [r7, #24]
 800c40a:	9302      	str	r3, [sp, #8]
 800c40c:	7d3b      	ldrb	r3, [r7, #20]
 800c40e:	9301      	str	r3, [sp, #4]
 800c410:	7c3b      	ldrb	r3, [r7, #16]
 800c412:	9300      	str	r3, [sp, #0]
 800c414:	4603      	mov	r3, r0
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fa53 	bl	800c8c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800c41c:	2300      	movs	r3, #0
}
 800c41e:	4618      	mov	r0, r3
 800c420:	3708      	adds	r7, #8
 800c422:	46bd      	mov	sp, r7
 800c424:	bd80      	pop	{r7, pc}

0800c426 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b082      	sub	sp, #8
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	460b      	mov	r3, r1
 800c430:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800c432:	78fb      	ldrb	r3, [r7, #3]
 800c434:	4619      	mov	r1, r3
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f000 fa72 	bl	800c920 <USBH_LL_ClosePipe>

  return USBH_OK;
 800c43c:	2300      	movs	r3, #0
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3708      	adds	r7, #8
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}

0800c446 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	6078      	str	r0, [r7, #4]
 800c44e:	460b      	mov	r3, r1
 800c450:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c452:	6878      	ldr	r0, [r7, #4]
 800c454:	f000 f836 	bl	800c4c4 <USBH_GetFreePipe>
 800c458:	4603      	mov	r3, r0
 800c45a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c45c:	89fb      	ldrh	r3, [r7, #14]
 800c45e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c462:	4293      	cmp	r3, r2
 800c464:	d00a      	beq.n	800c47c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800c466:	78fa      	ldrb	r2, [r7, #3]
 800c468:	89fb      	ldrh	r3, [r7, #14]
 800c46a:	f003 030f 	and.w	r3, r3, #15
 800c46e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c472:	6879      	ldr	r1, [r7, #4]
 800c474:	33e0      	adds	r3, #224	; 0xe0
 800c476:	009b      	lsls	r3, r3, #2
 800c478:	440b      	add	r3, r1
 800c47a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c47c:	89fb      	ldrh	r3, [r7, #14]
 800c47e:	b2db      	uxtb	r3, r3
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	460b      	mov	r3, r1
 800c492:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800c494:	78fb      	ldrb	r3, [r7, #3]
 800c496:	2b0a      	cmp	r3, #10
 800c498:	d80d      	bhi.n	800c4b6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c49a:	78fb      	ldrb	r3, [r7, #3]
 800c49c:	687a      	ldr	r2, [r7, #4]
 800c49e:	33e0      	adds	r3, #224	; 0xe0
 800c4a0:	009b      	lsls	r3, r3, #2
 800c4a2:	4413      	add	r3, r2
 800c4a4:	685a      	ldr	r2, [r3, #4]
 800c4a6:	78fb      	ldrb	r3, [r7, #3]
 800c4a8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c4ac:	6879      	ldr	r1, [r7, #4]
 800c4ae:	33e0      	adds	r3, #224	; 0xe0
 800c4b0:	009b      	lsls	r3, r3, #2
 800c4b2:	440b      	add	r3, r1
 800c4b4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c4b6:	2300      	movs	r3, #0
}
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	370c      	adds	r7, #12
 800c4bc:	46bd      	mov	sp, r7
 800c4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c2:	4770      	bx	lr

0800c4c4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	73fb      	strb	r3, [r7, #15]
 800c4d4:	e00f      	b.n	800c4f6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c4d6:	7bfb      	ldrb	r3, [r7, #15]
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	33e0      	adds	r3, #224	; 0xe0
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d102      	bne.n	800c4f0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c4ea:	7bfb      	ldrb	r3, [r7, #15]
 800c4ec:	b29b      	uxth	r3, r3
 800c4ee:	e007      	b.n	800c500 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	73fb      	strb	r3, [r7, #15]
 800c4f6:	7bfb      	ldrb	r3, [r7, #15]
 800c4f8:	2b0a      	cmp	r3, #10
 800c4fa:	d9ec      	bls.n	800c4d6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c4fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800c500:	4618      	mov	r0, r3
 800c502:	3714      	adds	r7, #20
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c510:	2201      	movs	r2, #1
 800c512:	490e      	ldr	r1, [pc, #56]	; (800c54c <MX_USB_HOST_Init+0x40>)
 800c514:	480e      	ldr	r0, [pc, #56]	; (800c550 <MX_USB_HOST_Init+0x44>)
 800c516:	f7fe fca1 	bl	800ae5c <USBH_Init>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d001      	beq.n	800c524 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c520:	f7f4 fdf8 	bl	8001114 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c524:	490b      	ldr	r1, [pc, #44]	; (800c554 <MX_USB_HOST_Init+0x48>)
 800c526:	480a      	ldr	r0, [pc, #40]	; (800c550 <MX_USB_HOST_Init+0x44>)
 800c528:	f7fe fd26 	bl	800af78 <USBH_RegisterClass>
 800c52c:	4603      	mov	r3, r0
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d001      	beq.n	800c536 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c532:	f7f4 fdef 	bl	8001114 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c536:	4806      	ldr	r0, [pc, #24]	; (800c550 <MX_USB_HOST_Init+0x44>)
 800c538:	f7fe fdaa 	bl	800b090 <USBH_Start>
 800c53c:	4603      	mov	r3, r0
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d001      	beq.n	800c546 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c542:	f7f4 fde7 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c546:	bf00      	nop
 800c548:	bd80      	pop	{r7, pc}
 800c54a:	bf00      	nop
 800c54c:	0800c56d 	.word	0x0800c56d
 800c550:	2000054c 	.word	0x2000054c
 800c554:	20000068 	.word	0x20000068

0800c558 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800c55c:	4802      	ldr	r0, [pc, #8]	; (800c568 <MX_USB_HOST_Process+0x10>)
 800c55e:	f7fe fda7 	bl	800b0b0 <USBH_Process>
}
 800c562:	bf00      	nop
 800c564:	bd80      	pop	{r7, pc}
 800c566:	bf00      	nop
 800c568:	2000054c 	.word	0x2000054c

0800c56c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b083      	sub	sp, #12
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	460b      	mov	r3, r1
 800c576:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800c578:	78fb      	ldrb	r3, [r7, #3]
 800c57a:	3b01      	subs	r3, #1
 800c57c:	2b04      	cmp	r3, #4
 800c57e:	d819      	bhi.n	800c5b4 <USBH_UserProcess+0x48>
 800c580:	a201      	add	r2, pc, #4	; (adr r2, 800c588 <USBH_UserProcess+0x1c>)
 800c582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c586:	bf00      	nop
 800c588:	0800c5b5 	.word	0x0800c5b5
 800c58c:	0800c5a5 	.word	0x0800c5a5
 800c590:	0800c5b5 	.word	0x0800c5b5
 800c594:	0800c5ad 	.word	0x0800c5ad
 800c598:	0800c59d 	.word	0x0800c59d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800c59c:	4b09      	ldr	r3, [pc, #36]	; (800c5c4 <USBH_UserProcess+0x58>)
 800c59e:	2203      	movs	r2, #3
 800c5a0:	701a      	strb	r2, [r3, #0]
  break;
 800c5a2:	e008      	b.n	800c5b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800c5a4:	4b07      	ldr	r3, [pc, #28]	; (800c5c4 <USBH_UserProcess+0x58>)
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	701a      	strb	r2, [r3, #0]
  break;
 800c5aa:	e004      	b.n	800c5b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800c5ac:	4b05      	ldr	r3, [pc, #20]	; (800c5c4 <USBH_UserProcess+0x58>)
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	701a      	strb	r2, [r3, #0]
  break;
 800c5b2:	e000      	b.n	800c5b6 <USBH_UserProcess+0x4a>

  default:
  break;
 800c5b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800c5b6:	bf00      	nop
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr
 800c5c2:	bf00      	nop
 800c5c4:	20000924 	.word	0x20000924

0800c5c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b08a      	sub	sp, #40	; 0x28
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5d0:	f107 0314 	add.w	r3, r7, #20
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	601a      	str	r2, [r3, #0]
 800c5d8:	605a      	str	r2, [r3, #4]
 800c5da:	609a      	str	r2, [r3, #8]
 800c5dc:	60da      	str	r2, [r3, #12]
 800c5de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c5e8:	d147      	bne.n	800c67a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	613b      	str	r3, [r7, #16]
 800c5ee:	4b25      	ldr	r3, [pc, #148]	; (800c684 <HAL_HCD_MspInit+0xbc>)
 800c5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5f2:	4a24      	ldr	r2, [pc, #144]	; (800c684 <HAL_HCD_MspInit+0xbc>)
 800c5f4:	f043 0301 	orr.w	r3, r3, #1
 800c5f8:	6313      	str	r3, [r2, #48]	; 0x30
 800c5fa:	4b22      	ldr	r3, [pc, #136]	; (800c684 <HAL_HCD_MspInit+0xbc>)
 800c5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5fe:	f003 0301 	and.w	r3, r3, #1
 800c602:	613b      	str	r3, [r7, #16]
 800c604:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800c606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c60a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c60c:	2300      	movs	r3, #0
 800c60e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c610:	2300      	movs	r3, #0
 800c612:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800c614:	f107 0314 	add.w	r3, r7, #20
 800c618:	4619      	mov	r1, r3
 800c61a:	481b      	ldr	r0, [pc, #108]	; (800c688 <HAL_HCD_MspInit+0xc0>)
 800c61c:	f7f7 fb36 	bl	8003c8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 800c620:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c626:	2302      	movs	r3, #2
 800c628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c62e:	2303      	movs	r3, #3
 800c630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c632:	230a      	movs	r3, #10
 800c634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c636:	f107 0314 	add.w	r3, r7, #20
 800c63a:	4619      	mov	r1, r3
 800c63c:	4812      	ldr	r0, [pc, #72]	; (800c688 <HAL_HCD_MspInit+0xc0>)
 800c63e:	f7f7 fb25 	bl	8003c8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c642:	4b10      	ldr	r3, [pc, #64]	; (800c684 <HAL_HCD_MspInit+0xbc>)
 800c644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c646:	4a0f      	ldr	r2, [pc, #60]	; (800c684 <HAL_HCD_MspInit+0xbc>)
 800c648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c64c:	6353      	str	r3, [r2, #52]	; 0x34
 800c64e:	2300      	movs	r3, #0
 800c650:	60fb      	str	r3, [r7, #12]
 800c652:	4b0c      	ldr	r3, [pc, #48]	; (800c684 <HAL_HCD_MspInit+0xbc>)
 800c654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c656:	4a0b      	ldr	r2, [pc, #44]	; (800c684 <HAL_HCD_MspInit+0xbc>)
 800c658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c65c:	6453      	str	r3, [r2, #68]	; 0x44
 800c65e:	4b09      	ldr	r3, [pc, #36]	; (800c684 <HAL_HCD_MspInit+0xbc>)
 800c660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c666:	60fb      	str	r3, [r7, #12]
 800c668:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c66a:	2200      	movs	r2, #0
 800c66c:	2100      	movs	r1, #0
 800c66e:	2043      	movs	r0, #67	; 0x43
 800c670:	f7f7 f839 	bl	80036e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c674:	2043      	movs	r0, #67	; 0x43
 800c676:	f7f7 f852 	bl	800371e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c67a:	bf00      	nop
 800c67c:	3728      	adds	r7, #40	; 0x28
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	40023800 	.word	0x40023800
 800c688:	40020000 	.word	0x40020000

0800c68c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b082      	sub	sp, #8
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c69a:	4618      	mov	r0, r3
 800c69c:	f7ff f8db 	bl	800b856 <USBH_LL_IncTimer>
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b082      	sub	sp, #8
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff f913 	bl	800b8e2 <USBH_LL_Connect>
}
 800c6bc:	bf00      	nop
 800c6be:	3708      	adds	r7, #8
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b082      	sub	sp, #8
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	f7ff f91c 	bl	800b910 <USBH_LL_Disconnect>
}
 800c6d8:	bf00      	nop
 800c6da:	3708      	adds	r7, #8
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	bd80      	pop	{r7, pc}

0800c6e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
 800c6e8:	460b      	mov	r3, r1
 800c6ea:	70fb      	strb	r3, [r7, #3]
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b082      	sub	sp, #8
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff f8cd 	bl	800b8aa <USBH_LL_PortEnabled>
}
 800c710:	bf00      	nop
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}

0800c718 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c726:	4618      	mov	r0, r3
 800c728:	f7ff f8cd 	bl	800b8c6 <USBH_LL_PortDisabled>
}
 800c72c:	bf00      	nop
 800c72e:	3708      	adds	r7, #8
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b082      	sub	sp, #8
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c742:	2b01      	cmp	r3, #1
 800c744:	d12a      	bne.n	800c79c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800c746:	4a18      	ldr	r2, [pc, #96]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	4a15      	ldr	r2, [pc, #84]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c752:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c756:	4b14      	ldr	r3, [pc, #80]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c758:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c75c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 800c75e:	4b12      	ldr	r3, [pc, #72]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c760:	220c      	movs	r2, #12
 800c762:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800c764:	4b10      	ldr	r3, [pc, #64]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c766:	2201      	movs	r2, #1
 800c768:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c76a:	4b0f      	ldr	r3, [pc, #60]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c76c:	2200      	movs	r2, #0
 800c76e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800c770:	4b0d      	ldr	r3, [pc, #52]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c772:	2202      	movs	r2, #2
 800c774:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c776:	4b0c      	ldr	r3, [pc, #48]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c778:	2200      	movs	r2, #0
 800c77a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800c77c:	480a      	ldr	r0, [pc, #40]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c77e:	f7f7 fc65 	bl	800404c <HAL_HCD_Init>
 800c782:	4603      	mov	r3, r0
 800c784:	2b00      	cmp	r3, #0
 800c786:	d001      	beq.n	800c78c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800c788:	f7f4 fcc4 	bl	8001114 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800c78c:	4806      	ldr	r0, [pc, #24]	; (800c7a8 <USBH_LL_Init+0x74>)
 800c78e:	f7f8 f869 	bl	8004864 <HAL_HCD_GetCurrentFrame>
 800c792:	4603      	mov	r3, r0
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f7ff f84e 	bl	800b838 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20000928 	.word	0x20000928

0800c7ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7c2:	4618      	mov	r0, r3
 800c7c4:	f7f7 ffd6 	bl	8004774 <HAL_HCD_Start>
 800c7c8:	4603      	mov	r3, r0
 800c7ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c7cc:	7bfb      	ldrb	r3, [r7, #15]
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	f000 f95e 	bl	800ca90 <USBH_Get_USB_Status>
 800c7d4:	4603      	mov	r3, r0
 800c7d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7f7 ffde 	bl	80047ba <HAL_HCD_Stop>
 800c7fe:	4603      	mov	r3, r0
 800c800:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c802:	7bfb      	ldrb	r3, [r7, #15]
 800c804:	4618      	mov	r0, r3
 800c806:	f000 f943 	bl	800ca90 <USBH_Get_USB_Status>
 800c80a:	4603      	mov	r3, r0
 800c80c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c80e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c810:	4618      	mov	r0, r3
 800c812:	3710      	adds	r7, #16
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}

0800c818 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800c818:	b580      	push	{r7, lr}
 800c81a:	b084      	sub	sp, #16
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800c820:	2301      	movs	r3, #1
 800c822:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c82a:	4618      	mov	r0, r3
 800c82c:	f7f8 f828 	bl	8004880 <HAL_HCD_GetCurrentSpeed>
 800c830:	4603      	mov	r3, r0
 800c832:	2b02      	cmp	r3, #2
 800c834:	d00c      	beq.n	800c850 <USBH_LL_GetSpeed+0x38>
 800c836:	2b02      	cmp	r3, #2
 800c838:	d80d      	bhi.n	800c856 <USBH_LL_GetSpeed+0x3e>
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <USBH_LL_GetSpeed+0x2c>
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d003      	beq.n	800c84a <USBH_LL_GetSpeed+0x32>
 800c842:	e008      	b.n	800c856 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800c844:	2300      	movs	r3, #0
 800c846:	73fb      	strb	r3, [r7, #15]
    break;
 800c848:	e008      	b.n	800c85c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800c84a:	2301      	movs	r3, #1
 800c84c:	73fb      	strb	r3, [r7, #15]
    break;
 800c84e:	e005      	b.n	800c85c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800c850:	2302      	movs	r3, #2
 800c852:	73fb      	strb	r3, [r7, #15]
    break;
 800c854:	e002      	b.n	800c85c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800c856:	2301      	movs	r3, #1
 800c858:	73fb      	strb	r3, [r7, #15]
    break;
 800c85a:	bf00      	nop
  }
  return  speed;
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85e:	4618      	mov	r0, r3
 800c860:	3710      	adds	r7, #16
 800c862:	46bd      	mov	sp, r7
 800c864:	bd80      	pop	{r7, pc}

0800c866 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800c866:	b580      	push	{r7, lr}
 800c868:	b084      	sub	sp, #16
 800c86a:	af00      	add	r7, sp, #0
 800c86c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c872:	2300      	movs	r3, #0
 800c874:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7f7 ffb9 	bl	80047f4 <HAL_HCD_ResetPort>
 800c882:	4603      	mov	r3, r0
 800c884:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c886:	7bfb      	ldrb	r3, [r7, #15]
 800c888:	4618      	mov	r0, r3
 800c88a:	f000 f901 	bl	800ca90 <USBH_Get_USB_Status>
 800c88e:	4603      	mov	r3, r0
 800c890:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c892:	7bbb      	ldrb	r3, [r7, #14]
}
 800c894:	4618      	mov	r0, r3
 800c896:	3710      	adds	r7, #16
 800c898:	46bd      	mov	sp, r7
 800c89a:	bd80      	pop	{r7, pc}

0800c89c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b082      	sub	sp, #8
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c8ae:	78fa      	ldrb	r2, [r7, #3]
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7f7 ffc1 	bl	800483a <HAL_HCD_HC_GetXferCount>
 800c8b8:	4603      	mov	r3, r0
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3708      	adds	r7, #8
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}

0800c8c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c8c2:	b590      	push	{r4, r7, lr}
 800c8c4:	b089      	sub	sp, #36	; 0x24
 800c8c6:	af04      	add	r7, sp, #16
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	4608      	mov	r0, r1
 800c8cc:	4611      	mov	r1, r2
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	4603      	mov	r3, r0
 800c8d2:	70fb      	strb	r3, [r7, #3]
 800c8d4:	460b      	mov	r3, r1
 800c8d6:	70bb      	strb	r3, [r7, #2]
 800c8d8:	4613      	mov	r3, r2
 800c8da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c8ea:	787c      	ldrb	r4, [r7, #1]
 800c8ec:	78ba      	ldrb	r2, [r7, #2]
 800c8ee:	78f9      	ldrb	r1, [r7, #3]
 800c8f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c8f2:	9302      	str	r3, [sp, #8]
 800c8f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c8f8:	9301      	str	r3, [sp, #4]
 800c8fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c8fe:	9300      	str	r3, [sp, #0]
 800c900:	4623      	mov	r3, r4
 800c902:	f7f7 fc05 	bl	8004110 <HAL_HCD_HC_Init>
 800c906:	4603      	mov	r3, r0
 800c908:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800c90a:	7bfb      	ldrb	r3, [r7, #15]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f000 f8bf 	bl	800ca90 <USBH_Get_USB_Status>
 800c912:	4603      	mov	r3, r0
 800c914:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c916:	7bbb      	ldrb	r3, [r7, #14]
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3714      	adds	r7, #20
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd90      	pop	{r4, r7, pc}

0800c920 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	460b      	mov	r3, r1
 800c92a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c92c:	2300      	movs	r3, #0
 800c92e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c930:	2300      	movs	r3, #0
 800c932:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c93a:	78fa      	ldrb	r2, [r7, #3]
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f7f7 fc7e 	bl	8004240 <HAL_HCD_HC_Halt>
 800c944:	4603      	mov	r3, r0
 800c946:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800c948:	7bfb      	ldrb	r3, [r7, #15]
 800c94a:	4618      	mov	r0, r3
 800c94c:	f000 f8a0 	bl	800ca90 <USBH_Get_USB_Status>
 800c950:	4603      	mov	r3, r0
 800c952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c954:	7bbb      	ldrb	r3, [r7, #14]
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800c95e:	b590      	push	{r4, r7, lr}
 800c960:	b089      	sub	sp, #36	; 0x24
 800c962:	af04      	add	r7, sp, #16
 800c964:	6078      	str	r0, [r7, #4]
 800c966:	4608      	mov	r0, r1
 800c968:	4611      	mov	r1, r2
 800c96a:	461a      	mov	r2, r3
 800c96c:	4603      	mov	r3, r0
 800c96e:	70fb      	strb	r3, [r7, #3]
 800c970:	460b      	mov	r3, r1
 800c972:	70bb      	strb	r3, [r7, #2]
 800c974:	4613      	mov	r3, r2
 800c976:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c978:	2300      	movs	r3, #0
 800c97a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800c986:	787c      	ldrb	r4, [r7, #1]
 800c988:	78ba      	ldrb	r2, [r7, #2]
 800c98a:	78f9      	ldrb	r1, [r7, #3]
 800c98c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c990:	9303      	str	r3, [sp, #12]
 800c992:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c994:	9302      	str	r3, [sp, #8]
 800c996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c998:	9301      	str	r3, [sp, #4]
 800c99a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	4623      	mov	r3, r4
 800c9a2:	f7f7 fc71 	bl	8004288 <HAL_HCD_HC_SubmitRequest>
 800c9a6:	4603      	mov	r3, r0
 800c9a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800c9aa:	7bfb      	ldrb	r3, [r7, #15]
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	f000 f86f 	bl	800ca90 <USBH_Get_USB_Status>
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3714      	adds	r7, #20
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd90      	pop	{r4, r7, pc}

0800c9c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b082      	sub	sp, #8
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800c9d2:	78fa      	ldrb	r2, [r7, #3]
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7f7 ff1a 	bl	8004810 <HAL_HCD_HC_GetURBState>
 800c9dc:	4603      	mov	r3, r0
}
 800c9de:	4618      	mov	r0, r3
 800c9e0:	3708      	adds	r7, #8
 800c9e2:	46bd      	mov	sp, r7
 800c9e4:	bd80      	pop	{r7, pc}

0800c9e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800c9e6:	b580      	push	{r7, lr}
 800c9e8:	b082      	sub	sp, #8
 800c9ea:	af00      	add	r7, sp, #0
 800c9ec:	6078      	str	r0, [r7, #4]
 800c9ee:	460b      	mov	r3, r1
 800c9f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800c9f8:	2b01      	cmp	r3, #1
 800c9fa:	d103      	bne.n	800ca04 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800c9fc:	78fb      	ldrb	r3, [r7, #3]
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f000 f872 	bl	800cae8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ca04:	20c8      	movs	r0, #200	; 0xc8
 800ca06:	f7f6 fafd 	bl	8003004 <HAL_Delay>
  return USBH_OK;
 800ca0a:	2300      	movs	r3, #0
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3708      	adds	r7, #8
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	460b      	mov	r3, r1
 800ca1e:	70fb      	strb	r3, [r7, #3]
 800ca20:	4613      	mov	r3, r2
 800ca22:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800ca2a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ca2c:	78fa      	ldrb	r2, [r7, #3]
 800ca2e:	68f9      	ldr	r1, [r7, #12]
 800ca30:	4613      	mov	r3, r2
 800ca32:	009b      	lsls	r3, r3, #2
 800ca34:	4413      	add	r3, r2
 800ca36:	00db      	lsls	r3, r3, #3
 800ca38:	440b      	add	r3, r1
 800ca3a:	333b      	adds	r3, #59	; 0x3b
 800ca3c:	781b      	ldrb	r3, [r3, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d00a      	beq.n	800ca58 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ca42:	78fa      	ldrb	r2, [r7, #3]
 800ca44:	68f9      	ldr	r1, [r7, #12]
 800ca46:	4613      	mov	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4413      	add	r3, r2
 800ca4c:	00db      	lsls	r3, r3, #3
 800ca4e:	440b      	add	r3, r1
 800ca50:	3350      	adds	r3, #80	; 0x50
 800ca52:	78ba      	ldrb	r2, [r7, #2]
 800ca54:	701a      	strb	r2, [r3, #0]
 800ca56:	e009      	b.n	800ca6c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ca58:	78fa      	ldrb	r2, [r7, #3]
 800ca5a:	68f9      	ldr	r1, [r7, #12]
 800ca5c:	4613      	mov	r3, r2
 800ca5e:	009b      	lsls	r3, r3, #2
 800ca60:	4413      	add	r3, r2
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	440b      	add	r3, r1
 800ca66:	3351      	adds	r3, #81	; 0x51
 800ca68:	78ba      	ldrb	r2, [r7, #2]
 800ca6a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ca6c:	2300      	movs	r3, #0
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3714      	adds	r7, #20
 800ca72:	46bd      	mov	sp, r7
 800ca74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca78:	4770      	bx	lr

0800ca7a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b082      	sub	sp, #8
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ca82:	6878      	ldr	r0, [r7, #4]
 800ca84:	f7f6 fabe 	bl	8003004 <HAL_Delay>
}
 800ca88:	bf00      	nop
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b085      	sub	sp, #20
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	4603      	mov	r3, r0
 800ca98:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca9e:	79fb      	ldrb	r3, [r7, #7]
 800caa0:	2b03      	cmp	r3, #3
 800caa2:	d817      	bhi.n	800cad4 <USBH_Get_USB_Status+0x44>
 800caa4:	a201      	add	r2, pc, #4	; (adr r2, 800caac <USBH_Get_USB_Status+0x1c>)
 800caa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caaa:	bf00      	nop
 800caac:	0800cabd 	.word	0x0800cabd
 800cab0:	0800cac3 	.word	0x0800cac3
 800cab4:	0800cac9 	.word	0x0800cac9
 800cab8:	0800cacf 	.word	0x0800cacf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cabc:	2300      	movs	r3, #0
 800cabe:	73fb      	strb	r3, [r7, #15]
    break;
 800cac0:	e00b      	b.n	800cada <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cac2:	2302      	movs	r3, #2
 800cac4:	73fb      	strb	r3, [r7, #15]
    break;
 800cac6:	e008      	b.n	800cada <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cac8:	2301      	movs	r3, #1
 800caca:	73fb      	strb	r3, [r7, #15]
    break;
 800cacc:	e005      	b.n	800cada <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cace:	2302      	movs	r3, #2
 800cad0:	73fb      	strb	r3, [r7, #15]
    break;
 800cad2:	e002      	b.n	800cada <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cad4:	2302      	movs	r3, #2
 800cad6:	73fb      	strb	r3, [r7, #15]
    break;
 800cad8:	bf00      	nop
  }
  return usb_status;
 800cada:	7bfb      	ldrb	r3, [r7, #15]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	3714      	adds	r7, #20
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	4603      	mov	r3, r0
 800caf0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800caf2:	79fb      	ldrb	r3, [r7, #7]
 800caf4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800caf6:	79fb      	ldrb	r3, [r7, #7]
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d102      	bne.n	800cb02 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800cafc:	2301      	movs	r3, #1
 800cafe:	73fb      	strb	r3, [r7, #15]
 800cb00:	e001      	b.n	800cb06 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800cb02:	2300      	movs	r3, #0
 800cb04:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 800cb06:	7bfb      	ldrb	r3, [r7, #15]
 800cb08:	461a      	mov	r2, r3
 800cb0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800cb0e:	4803      	ldr	r0, [pc, #12]	; (800cb1c <MX_DriverVbusFS+0x34>)
 800cb10:	f7f7 fa68 	bl	8003fe4 <HAL_GPIO_WritePin>
}
 800cb14:	bf00      	nop
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	40021800 	.word	0x40021800

0800cb20 <__errno>:
 800cb20:	4b01      	ldr	r3, [pc, #4]	; (800cb28 <__errno+0x8>)
 800cb22:	6818      	ldr	r0, [r3, #0]
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	20000088 	.word	0x20000088

0800cb2c <__libc_init_array>:
 800cb2c:	b570      	push	{r4, r5, r6, lr}
 800cb2e:	4d0d      	ldr	r5, [pc, #52]	; (800cb64 <__libc_init_array+0x38>)
 800cb30:	4c0d      	ldr	r4, [pc, #52]	; (800cb68 <__libc_init_array+0x3c>)
 800cb32:	1b64      	subs	r4, r4, r5
 800cb34:	10a4      	asrs	r4, r4, #2
 800cb36:	2600      	movs	r6, #0
 800cb38:	42a6      	cmp	r6, r4
 800cb3a:	d109      	bne.n	800cb50 <__libc_init_array+0x24>
 800cb3c:	4d0b      	ldr	r5, [pc, #44]	; (800cb6c <__libc_init_array+0x40>)
 800cb3e:	4c0c      	ldr	r4, [pc, #48]	; (800cb70 <__libc_init_array+0x44>)
 800cb40:	f000 f92e 	bl	800cda0 <_init>
 800cb44:	1b64      	subs	r4, r4, r5
 800cb46:	10a4      	asrs	r4, r4, #2
 800cb48:	2600      	movs	r6, #0
 800cb4a:	42a6      	cmp	r6, r4
 800cb4c:	d105      	bne.n	800cb5a <__libc_init_array+0x2e>
 800cb4e:	bd70      	pop	{r4, r5, r6, pc}
 800cb50:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb54:	4798      	blx	r3
 800cb56:	3601      	adds	r6, #1
 800cb58:	e7ee      	b.n	800cb38 <__libc_init_array+0xc>
 800cb5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cb5e:	4798      	blx	r3
 800cb60:	3601      	adds	r6, #1
 800cb62:	e7f2      	b.n	800cb4a <__libc_init_array+0x1e>
 800cb64:	0800f900 	.word	0x0800f900
 800cb68:	0800f900 	.word	0x0800f900
 800cb6c:	0800f900 	.word	0x0800f900
 800cb70:	0800f904 	.word	0x0800f904

0800cb74 <malloc>:
 800cb74:	4b02      	ldr	r3, [pc, #8]	; (800cb80 <malloc+0xc>)
 800cb76:	4601      	mov	r1, r0
 800cb78:	6818      	ldr	r0, [r3, #0]
 800cb7a:	f000 b87f 	b.w	800cc7c <_malloc_r>
 800cb7e:	bf00      	nop
 800cb80:	20000088 	.word	0x20000088

0800cb84 <free>:
 800cb84:	4b02      	ldr	r3, [pc, #8]	; (800cb90 <free+0xc>)
 800cb86:	4601      	mov	r1, r0
 800cb88:	6818      	ldr	r0, [r3, #0]
 800cb8a:	f000 b80b 	b.w	800cba4 <_free_r>
 800cb8e:	bf00      	nop
 800cb90:	20000088 	.word	0x20000088

0800cb94 <memset>:
 800cb94:	4402      	add	r2, r0
 800cb96:	4603      	mov	r3, r0
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d100      	bne.n	800cb9e <memset+0xa>
 800cb9c:	4770      	bx	lr
 800cb9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cba2:	e7f9      	b.n	800cb98 <memset+0x4>

0800cba4 <_free_r>:
 800cba4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cba6:	2900      	cmp	r1, #0
 800cba8:	d044      	beq.n	800cc34 <_free_r+0x90>
 800cbaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbae:	9001      	str	r0, [sp, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f1a1 0404 	sub.w	r4, r1, #4
 800cbb6:	bfb8      	it	lt
 800cbb8:	18e4      	addlt	r4, r4, r3
 800cbba:	f000 f8e3 	bl	800cd84 <__malloc_lock>
 800cbbe:	4a1e      	ldr	r2, [pc, #120]	; (800cc38 <_free_r+0x94>)
 800cbc0:	9801      	ldr	r0, [sp, #4]
 800cbc2:	6813      	ldr	r3, [r2, #0]
 800cbc4:	b933      	cbnz	r3, 800cbd4 <_free_r+0x30>
 800cbc6:	6063      	str	r3, [r4, #4]
 800cbc8:	6014      	str	r4, [r2, #0]
 800cbca:	b003      	add	sp, #12
 800cbcc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cbd0:	f000 b8de 	b.w	800cd90 <__malloc_unlock>
 800cbd4:	42a3      	cmp	r3, r4
 800cbd6:	d908      	bls.n	800cbea <_free_r+0x46>
 800cbd8:	6825      	ldr	r5, [r4, #0]
 800cbda:	1961      	adds	r1, r4, r5
 800cbdc:	428b      	cmp	r3, r1
 800cbde:	bf01      	itttt	eq
 800cbe0:	6819      	ldreq	r1, [r3, #0]
 800cbe2:	685b      	ldreq	r3, [r3, #4]
 800cbe4:	1949      	addeq	r1, r1, r5
 800cbe6:	6021      	streq	r1, [r4, #0]
 800cbe8:	e7ed      	b.n	800cbc6 <_free_r+0x22>
 800cbea:	461a      	mov	r2, r3
 800cbec:	685b      	ldr	r3, [r3, #4]
 800cbee:	b10b      	cbz	r3, 800cbf4 <_free_r+0x50>
 800cbf0:	42a3      	cmp	r3, r4
 800cbf2:	d9fa      	bls.n	800cbea <_free_r+0x46>
 800cbf4:	6811      	ldr	r1, [r2, #0]
 800cbf6:	1855      	adds	r5, r2, r1
 800cbf8:	42a5      	cmp	r5, r4
 800cbfa:	d10b      	bne.n	800cc14 <_free_r+0x70>
 800cbfc:	6824      	ldr	r4, [r4, #0]
 800cbfe:	4421      	add	r1, r4
 800cc00:	1854      	adds	r4, r2, r1
 800cc02:	42a3      	cmp	r3, r4
 800cc04:	6011      	str	r1, [r2, #0]
 800cc06:	d1e0      	bne.n	800cbca <_free_r+0x26>
 800cc08:	681c      	ldr	r4, [r3, #0]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	6053      	str	r3, [r2, #4]
 800cc0e:	4421      	add	r1, r4
 800cc10:	6011      	str	r1, [r2, #0]
 800cc12:	e7da      	b.n	800cbca <_free_r+0x26>
 800cc14:	d902      	bls.n	800cc1c <_free_r+0x78>
 800cc16:	230c      	movs	r3, #12
 800cc18:	6003      	str	r3, [r0, #0]
 800cc1a:	e7d6      	b.n	800cbca <_free_r+0x26>
 800cc1c:	6825      	ldr	r5, [r4, #0]
 800cc1e:	1961      	adds	r1, r4, r5
 800cc20:	428b      	cmp	r3, r1
 800cc22:	bf04      	itt	eq
 800cc24:	6819      	ldreq	r1, [r3, #0]
 800cc26:	685b      	ldreq	r3, [r3, #4]
 800cc28:	6063      	str	r3, [r4, #4]
 800cc2a:	bf04      	itt	eq
 800cc2c:	1949      	addeq	r1, r1, r5
 800cc2e:	6021      	streq	r1, [r4, #0]
 800cc30:	6054      	str	r4, [r2, #4]
 800cc32:	e7ca      	b.n	800cbca <_free_r+0x26>
 800cc34:	b003      	add	sp, #12
 800cc36:	bd30      	pop	{r4, r5, pc}
 800cc38:	20000bec 	.word	0x20000bec

0800cc3c <sbrk_aligned>:
 800cc3c:	b570      	push	{r4, r5, r6, lr}
 800cc3e:	4e0e      	ldr	r6, [pc, #56]	; (800cc78 <sbrk_aligned+0x3c>)
 800cc40:	460c      	mov	r4, r1
 800cc42:	6831      	ldr	r1, [r6, #0]
 800cc44:	4605      	mov	r5, r0
 800cc46:	b911      	cbnz	r1, 800cc4e <sbrk_aligned+0x12>
 800cc48:	f000 f88c 	bl	800cd64 <_sbrk_r>
 800cc4c:	6030      	str	r0, [r6, #0]
 800cc4e:	4621      	mov	r1, r4
 800cc50:	4628      	mov	r0, r5
 800cc52:	f000 f887 	bl	800cd64 <_sbrk_r>
 800cc56:	1c43      	adds	r3, r0, #1
 800cc58:	d00a      	beq.n	800cc70 <sbrk_aligned+0x34>
 800cc5a:	1cc4      	adds	r4, r0, #3
 800cc5c:	f024 0403 	bic.w	r4, r4, #3
 800cc60:	42a0      	cmp	r0, r4
 800cc62:	d007      	beq.n	800cc74 <sbrk_aligned+0x38>
 800cc64:	1a21      	subs	r1, r4, r0
 800cc66:	4628      	mov	r0, r5
 800cc68:	f000 f87c 	bl	800cd64 <_sbrk_r>
 800cc6c:	3001      	adds	r0, #1
 800cc6e:	d101      	bne.n	800cc74 <sbrk_aligned+0x38>
 800cc70:	f04f 34ff 	mov.w	r4, #4294967295
 800cc74:	4620      	mov	r0, r4
 800cc76:	bd70      	pop	{r4, r5, r6, pc}
 800cc78:	20000bf0 	.word	0x20000bf0

0800cc7c <_malloc_r>:
 800cc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc80:	1ccd      	adds	r5, r1, #3
 800cc82:	f025 0503 	bic.w	r5, r5, #3
 800cc86:	3508      	adds	r5, #8
 800cc88:	2d0c      	cmp	r5, #12
 800cc8a:	bf38      	it	cc
 800cc8c:	250c      	movcc	r5, #12
 800cc8e:	2d00      	cmp	r5, #0
 800cc90:	4607      	mov	r7, r0
 800cc92:	db01      	blt.n	800cc98 <_malloc_r+0x1c>
 800cc94:	42a9      	cmp	r1, r5
 800cc96:	d905      	bls.n	800cca4 <_malloc_r+0x28>
 800cc98:	230c      	movs	r3, #12
 800cc9a:	603b      	str	r3, [r7, #0]
 800cc9c:	2600      	movs	r6, #0
 800cc9e:	4630      	mov	r0, r6
 800cca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca4:	4e2e      	ldr	r6, [pc, #184]	; (800cd60 <_malloc_r+0xe4>)
 800cca6:	f000 f86d 	bl	800cd84 <__malloc_lock>
 800ccaa:	6833      	ldr	r3, [r6, #0]
 800ccac:	461c      	mov	r4, r3
 800ccae:	bb34      	cbnz	r4, 800ccfe <_malloc_r+0x82>
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	4638      	mov	r0, r7
 800ccb4:	f7ff ffc2 	bl	800cc3c <sbrk_aligned>
 800ccb8:	1c43      	adds	r3, r0, #1
 800ccba:	4604      	mov	r4, r0
 800ccbc:	d14d      	bne.n	800cd5a <_malloc_r+0xde>
 800ccbe:	6834      	ldr	r4, [r6, #0]
 800ccc0:	4626      	mov	r6, r4
 800ccc2:	2e00      	cmp	r6, #0
 800ccc4:	d140      	bne.n	800cd48 <_malloc_r+0xcc>
 800ccc6:	6823      	ldr	r3, [r4, #0]
 800ccc8:	4631      	mov	r1, r6
 800ccca:	4638      	mov	r0, r7
 800cccc:	eb04 0803 	add.w	r8, r4, r3
 800ccd0:	f000 f848 	bl	800cd64 <_sbrk_r>
 800ccd4:	4580      	cmp	r8, r0
 800ccd6:	d13a      	bne.n	800cd4e <_malloc_r+0xd2>
 800ccd8:	6821      	ldr	r1, [r4, #0]
 800ccda:	3503      	adds	r5, #3
 800ccdc:	1a6d      	subs	r5, r5, r1
 800ccde:	f025 0503 	bic.w	r5, r5, #3
 800cce2:	3508      	adds	r5, #8
 800cce4:	2d0c      	cmp	r5, #12
 800cce6:	bf38      	it	cc
 800cce8:	250c      	movcc	r5, #12
 800ccea:	4629      	mov	r1, r5
 800ccec:	4638      	mov	r0, r7
 800ccee:	f7ff ffa5 	bl	800cc3c <sbrk_aligned>
 800ccf2:	3001      	adds	r0, #1
 800ccf4:	d02b      	beq.n	800cd4e <_malloc_r+0xd2>
 800ccf6:	6823      	ldr	r3, [r4, #0]
 800ccf8:	442b      	add	r3, r5
 800ccfa:	6023      	str	r3, [r4, #0]
 800ccfc:	e00e      	b.n	800cd1c <_malloc_r+0xa0>
 800ccfe:	6822      	ldr	r2, [r4, #0]
 800cd00:	1b52      	subs	r2, r2, r5
 800cd02:	d41e      	bmi.n	800cd42 <_malloc_r+0xc6>
 800cd04:	2a0b      	cmp	r2, #11
 800cd06:	d916      	bls.n	800cd36 <_malloc_r+0xba>
 800cd08:	1961      	adds	r1, r4, r5
 800cd0a:	42a3      	cmp	r3, r4
 800cd0c:	6025      	str	r5, [r4, #0]
 800cd0e:	bf18      	it	ne
 800cd10:	6059      	strne	r1, [r3, #4]
 800cd12:	6863      	ldr	r3, [r4, #4]
 800cd14:	bf08      	it	eq
 800cd16:	6031      	streq	r1, [r6, #0]
 800cd18:	5162      	str	r2, [r4, r5]
 800cd1a:	604b      	str	r3, [r1, #4]
 800cd1c:	4638      	mov	r0, r7
 800cd1e:	f104 060b 	add.w	r6, r4, #11
 800cd22:	f000 f835 	bl	800cd90 <__malloc_unlock>
 800cd26:	f026 0607 	bic.w	r6, r6, #7
 800cd2a:	1d23      	adds	r3, r4, #4
 800cd2c:	1af2      	subs	r2, r6, r3
 800cd2e:	d0b6      	beq.n	800cc9e <_malloc_r+0x22>
 800cd30:	1b9b      	subs	r3, r3, r6
 800cd32:	50a3      	str	r3, [r4, r2]
 800cd34:	e7b3      	b.n	800cc9e <_malloc_r+0x22>
 800cd36:	6862      	ldr	r2, [r4, #4]
 800cd38:	42a3      	cmp	r3, r4
 800cd3a:	bf0c      	ite	eq
 800cd3c:	6032      	streq	r2, [r6, #0]
 800cd3e:	605a      	strne	r2, [r3, #4]
 800cd40:	e7ec      	b.n	800cd1c <_malloc_r+0xa0>
 800cd42:	4623      	mov	r3, r4
 800cd44:	6864      	ldr	r4, [r4, #4]
 800cd46:	e7b2      	b.n	800ccae <_malloc_r+0x32>
 800cd48:	4634      	mov	r4, r6
 800cd4a:	6876      	ldr	r6, [r6, #4]
 800cd4c:	e7b9      	b.n	800ccc2 <_malloc_r+0x46>
 800cd4e:	230c      	movs	r3, #12
 800cd50:	603b      	str	r3, [r7, #0]
 800cd52:	4638      	mov	r0, r7
 800cd54:	f000 f81c 	bl	800cd90 <__malloc_unlock>
 800cd58:	e7a1      	b.n	800cc9e <_malloc_r+0x22>
 800cd5a:	6025      	str	r5, [r4, #0]
 800cd5c:	e7de      	b.n	800cd1c <_malloc_r+0xa0>
 800cd5e:	bf00      	nop
 800cd60:	20000bec 	.word	0x20000bec

0800cd64 <_sbrk_r>:
 800cd64:	b538      	push	{r3, r4, r5, lr}
 800cd66:	4d06      	ldr	r5, [pc, #24]	; (800cd80 <_sbrk_r+0x1c>)
 800cd68:	2300      	movs	r3, #0
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	4608      	mov	r0, r1
 800cd6e:	602b      	str	r3, [r5, #0]
 800cd70:	f7f4 ff7e 	bl	8001c70 <_sbrk>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d102      	bne.n	800cd7e <_sbrk_r+0x1a>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	b103      	cbz	r3, 800cd7e <_sbrk_r+0x1a>
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	20000bf4 	.word	0x20000bf4

0800cd84 <__malloc_lock>:
 800cd84:	4801      	ldr	r0, [pc, #4]	; (800cd8c <__malloc_lock+0x8>)
 800cd86:	f000 b809 	b.w	800cd9c <__retarget_lock_acquire_recursive>
 800cd8a:	bf00      	nop
 800cd8c:	20000bf8 	.word	0x20000bf8

0800cd90 <__malloc_unlock>:
 800cd90:	4801      	ldr	r0, [pc, #4]	; (800cd98 <__malloc_unlock+0x8>)
 800cd92:	f000 b804 	b.w	800cd9e <__retarget_lock_release_recursive>
 800cd96:	bf00      	nop
 800cd98:	20000bf8 	.word	0x20000bf8

0800cd9c <__retarget_lock_acquire_recursive>:
 800cd9c:	4770      	bx	lr

0800cd9e <__retarget_lock_release_recursive>:
 800cd9e:	4770      	bx	lr

0800cda0 <_init>:
 800cda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cda2:	bf00      	nop
 800cda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cda6:	bc08      	pop	{r3}
 800cda8:	469e      	mov	lr, r3
 800cdaa:	4770      	bx	lr

0800cdac <_fini>:
 800cdac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cdae:	bf00      	nop
 800cdb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cdb2:	bc08      	pop	{r3}
 800cdb4:	469e      	mov	lr, r3
 800cdb6:	4770      	bx	lr
