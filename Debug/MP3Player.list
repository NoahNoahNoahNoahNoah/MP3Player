
MP3Player.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013424  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ccc  08013604  08013604  00023604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080162d0  080162d0  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  080162d0  080162d0  000262d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080162d8  080162d8  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080162d8  080162d8  000262d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080162dc  080162dc  000262dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080162e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005810  200000ec  080163cc  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  200058fc  080163cc  000358fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00045494  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008ca6  00000000  00000000  000755b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003580  00000000  00000000  0007e258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000031f0  00000000  00000000  000817d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000f9df  00000000  00000000  000849c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00046781  00000000  00000000  000943a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fff65  00000000  00000000  000dab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001daa8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000e700  00000000  00000000  001daae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000ec 	.word	0x200000ec
 80001fc:	00000000 	.word	0x00000000
 8000200:	080135ec 	.word	0x080135ec

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000f0 	.word	0x200000f0
 800021c:	080135ec 	.word	0x080135ec

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b974 	b.w	8000520 <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9d08      	ldr	r5, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	468e      	mov	lr, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14d      	bne.n	80002fa <__udivmoddi4+0xaa>
 800025e:	428a      	cmp	r2, r1
 8000260:	4694      	mov	ip, r2
 8000262:	d969      	bls.n	8000338 <__udivmoddi4+0xe8>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b152      	cbz	r2, 8000280 <__udivmoddi4+0x30>
 800026a:	fa01 f302 	lsl.w	r3, r1, r2
 800026e:	f1c2 0120 	rsb	r1, r2, #32
 8000272:	fa20 f101 	lsr.w	r1, r0, r1
 8000276:	fa0c fc02 	lsl.w	ip, ip, r2
 800027a:	ea41 0e03 	orr.w	lr, r1, r3
 800027e:	4094      	lsls	r4, r2
 8000280:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000284:	0c21      	lsrs	r1, r4, #16
 8000286:	fbbe f6f8 	udiv	r6, lr, r8
 800028a:	fa1f f78c 	uxth.w	r7, ip
 800028e:	fb08 e316 	mls	r3, r8, r6, lr
 8000292:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000296:	fb06 f107 	mul.w	r1, r6, r7
 800029a:	4299      	cmp	r1, r3
 800029c:	d90a      	bls.n	80002b4 <__udivmoddi4+0x64>
 800029e:	eb1c 0303 	adds.w	r3, ip, r3
 80002a2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002a6:	f080 811f 	bcs.w	80004e8 <__udivmoddi4+0x298>
 80002aa:	4299      	cmp	r1, r3
 80002ac:	f240 811c 	bls.w	80004e8 <__udivmoddi4+0x298>
 80002b0:	3e02      	subs	r6, #2
 80002b2:	4463      	add	r3, ip
 80002b4:	1a5b      	subs	r3, r3, r1
 80002b6:	b2a4      	uxth	r4, r4
 80002b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002bc:	fb08 3310 	mls	r3, r8, r0, r3
 80002c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c4:	fb00 f707 	mul.w	r7, r0, r7
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	d90a      	bls.n	80002e2 <__udivmoddi4+0x92>
 80002cc:	eb1c 0404 	adds.w	r4, ip, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002d4:	f080 810a 	bcs.w	80004ec <__udivmoddi4+0x29c>
 80002d8:	42a7      	cmp	r7, r4
 80002da:	f240 8107 	bls.w	80004ec <__udivmoddi4+0x29c>
 80002de:	4464      	add	r4, ip
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002e6:	1be4      	subs	r4, r4, r7
 80002e8:	2600      	movs	r6, #0
 80002ea:	b11d      	cbz	r5, 80002f4 <__udivmoddi4+0xa4>
 80002ec:	40d4      	lsrs	r4, r2
 80002ee:	2300      	movs	r3, #0
 80002f0:	e9c5 4300 	strd	r4, r3, [r5]
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xc2>
 80002fe:	2d00      	cmp	r5, #0
 8000300:	f000 80ef 	beq.w	80004e2 <__udivmoddi4+0x292>
 8000304:	2600      	movs	r6, #0
 8000306:	e9c5 0100 	strd	r0, r1, [r5]
 800030a:	4630      	mov	r0, r6
 800030c:	4631      	mov	r1, r6
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f683 	clz	r6, r3
 8000316:	2e00      	cmp	r6, #0
 8000318:	d14a      	bne.n	80003b0 <__udivmoddi4+0x160>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd4>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80f9 	bhi.w	8000516 <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469e      	mov	lr, r3
 800032e:	2d00      	cmp	r5, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa4>
 8000332:	e9c5 4e00 	strd	r4, lr, [r5]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa4>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xec>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 8092 	bne.w	800046a <__udivmoddi4+0x21a>
 8000346:	eba1 010c 	sub.w	r1, r1, ip
 800034a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800034e:	fa1f fe8c 	uxth.w	lr, ip
 8000352:	2601      	movs	r6, #1
 8000354:	0c20      	lsrs	r0, r4, #16
 8000356:	fbb1 f3f7 	udiv	r3, r1, r7
 800035a:	fb07 1113 	mls	r1, r7, r3, r1
 800035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000362:	fb0e f003 	mul.w	r0, lr, r3
 8000366:	4288      	cmp	r0, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x12c>
 800036a:	eb1c 0101 	adds.w	r1, ip, r1
 800036e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x12a>
 8000374:	4288      	cmp	r0, r1
 8000376:	f200 80cb 	bhi.w	8000510 <__udivmoddi4+0x2c0>
 800037a:	4643      	mov	r3, r8
 800037c:	1a09      	subs	r1, r1, r0
 800037e:	b2a4      	uxth	r4, r4
 8000380:	fbb1 f0f7 	udiv	r0, r1, r7
 8000384:	fb07 1110 	mls	r1, r7, r0, r1
 8000388:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800038c:	fb0e fe00 	mul.w	lr, lr, r0
 8000390:	45a6      	cmp	lr, r4
 8000392:	d908      	bls.n	80003a6 <__udivmoddi4+0x156>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f100 31ff 	add.w	r1, r0, #4294967295
 800039c:	d202      	bcs.n	80003a4 <__udivmoddi4+0x154>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f200 80bb 	bhi.w	800051a <__udivmoddi4+0x2ca>
 80003a4:	4608      	mov	r0, r1
 80003a6:	eba4 040e 	sub.w	r4, r4, lr
 80003aa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ae:	e79c      	b.n	80002ea <__udivmoddi4+0x9a>
 80003b0:	f1c6 0720 	rsb	r7, r6, #32
 80003b4:	40b3      	lsls	r3, r6
 80003b6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa20 f407 	lsr.w	r4, r0, r7
 80003c2:	fa01 f306 	lsl.w	r3, r1, r6
 80003c6:	431c      	orrs	r4, r3
 80003c8:	40f9      	lsrs	r1, r7
 80003ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ce:	fa00 f306 	lsl.w	r3, r0, r6
 80003d2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003d6:	0c20      	lsrs	r0, r4, #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fb09 1118 	mls	r1, r9, r8, r1
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	fb08 f00e 	mul.w	r0, r8, lr
 80003e8:	4288      	cmp	r0, r1
 80003ea:	fa02 f206 	lsl.w	r2, r2, r6
 80003ee:	d90b      	bls.n	8000408 <__udivmoddi4+0x1b8>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f8:	f080 8088 	bcs.w	800050c <__udivmoddi4+0x2bc>
 80003fc:	4288      	cmp	r0, r1
 80003fe:	f240 8085 	bls.w	800050c <__udivmoddi4+0x2bc>
 8000402:	f1a8 0802 	sub.w	r8, r8, #2
 8000406:	4461      	add	r1, ip
 8000408:	1a09      	subs	r1, r1, r0
 800040a:	b2a4      	uxth	r4, r4
 800040c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000410:	fb09 1110 	mls	r1, r9, r0, r1
 8000414:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000418:	fb00 fe0e 	mul.w	lr, r0, lr
 800041c:	458e      	cmp	lr, r1
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1e2>
 8000420:	eb1c 0101 	adds.w	r1, ip, r1
 8000424:	f100 34ff 	add.w	r4, r0, #4294967295
 8000428:	d26c      	bcs.n	8000504 <__udivmoddi4+0x2b4>
 800042a:	458e      	cmp	lr, r1
 800042c:	d96a      	bls.n	8000504 <__udivmoddi4+0x2b4>
 800042e:	3802      	subs	r0, #2
 8000430:	4461      	add	r1, ip
 8000432:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000436:	fba0 9402 	umull	r9, r4, r0, r2
 800043a:	eba1 010e 	sub.w	r1, r1, lr
 800043e:	42a1      	cmp	r1, r4
 8000440:	46c8      	mov	r8, r9
 8000442:	46a6      	mov	lr, r4
 8000444:	d356      	bcc.n	80004f4 <__udivmoddi4+0x2a4>
 8000446:	d053      	beq.n	80004f0 <__udivmoddi4+0x2a0>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x212>
 800044a:	ebb3 0208 	subs.w	r2, r3, r8
 800044e:	eb61 010e 	sbc.w	r1, r1, lr
 8000452:	fa01 f707 	lsl.w	r7, r1, r7
 8000456:	fa22 f306 	lsr.w	r3, r2, r6
 800045a:	40f1      	lsrs	r1, r6
 800045c:	431f      	orrs	r7, r3
 800045e:	e9c5 7100 	strd	r7, r1, [r5]
 8000462:	2600      	movs	r6, #0
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	f1c2 0320 	rsb	r3, r2, #32
 800046e:	40d8      	lsrs	r0, r3
 8000470:	fa0c fc02 	lsl.w	ip, ip, r2
 8000474:	fa21 f303 	lsr.w	r3, r1, r3
 8000478:	4091      	lsls	r1, r2
 800047a:	4301      	orrs	r1, r0
 800047c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fbb3 f0f7 	udiv	r0, r3, r7
 8000488:	fb07 3610 	mls	r6, r7, r0, r3
 800048c:	0c0b      	lsrs	r3, r1, #16
 800048e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000492:	fb00 f60e 	mul.w	r6, r0, lr
 8000496:	429e      	cmp	r6, r3
 8000498:	fa04 f402 	lsl.w	r4, r4, r2
 800049c:	d908      	bls.n	80004b0 <__udivmoddi4+0x260>
 800049e:	eb1c 0303 	adds.w	r3, ip, r3
 80004a2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004a6:	d22f      	bcs.n	8000508 <__udivmoddi4+0x2b8>
 80004a8:	429e      	cmp	r6, r3
 80004aa:	d92d      	bls.n	8000508 <__udivmoddi4+0x2b8>
 80004ac:	3802      	subs	r0, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	1b9b      	subs	r3, r3, r6
 80004b2:	b289      	uxth	r1, r1
 80004b4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b8:	fb07 3316 	mls	r3, r7, r6, r3
 80004bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004c0:	fb06 f30e 	mul.w	r3, r6, lr
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x28a>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004d0:	d216      	bcs.n	8000500 <__udivmoddi4+0x2b0>
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d914      	bls.n	8000500 <__udivmoddi4+0x2b0>
 80004d6:	3e02      	subs	r6, #2
 80004d8:	4461      	add	r1, ip
 80004da:	1ac9      	subs	r1, r1, r3
 80004dc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004e0:	e738      	b.n	8000354 <__udivmoddi4+0x104>
 80004e2:	462e      	mov	r6, r5
 80004e4:	4628      	mov	r0, r5
 80004e6:	e705      	b.n	80002f4 <__udivmoddi4+0xa4>
 80004e8:	4606      	mov	r6, r0
 80004ea:	e6e3      	b.n	80002b4 <__udivmoddi4+0x64>
 80004ec:	4618      	mov	r0, r3
 80004ee:	e6f8      	b.n	80002e2 <__udivmoddi4+0x92>
 80004f0:	454b      	cmp	r3, r9
 80004f2:	d2a9      	bcs.n	8000448 <__udivmoddi4+0x1f8>
 80004f4:	ebb9 0802 	subs.w	r8, r9, r2
 80004f8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004fc:	3801      	subs	r0, #1
 80004fe:	e7a3      	b.n	8000448 <__udivmoddi4+0x1f8>
 8000500:	4646      	mov	r6, r8
 8000502:	e7ea      	b.n	80004da <__udivmoddi4+0x28a>
 8000504:	4620      	mov	r0, r4
 8000506:	e794      	b.n	8000432 <__udivmoddi4+0x1e2>
 8000508:	4640      	mov	r0, r8
 800050a:	e7d1      	b.n	80004b0 <__udivmoddi4+0x260>
 800050c:	46d0      	mov	r8, sl
 800050e:	e77b      	b.n	8000408 <__udivmoddi4+0x1b8>
 8000510:	3b02      	subs	r3, #2
 8000512:	4461      	add	r1, ip
 8000514:	e732      	b.n	800037c <__udivmoddi4+0x12c>
 8000516:	4630      	mov	r0, r6
 8000518:	e709      	b.n	800032e <__udivmoddi4+0xde>
 800051a:	4464      	add	r4, ip
 800051c:	3802      	subs	r0, #2
 800051e:	e742      	b.n	80003a6 <__udivmoddi4+0x156>

08000520 <__aeabi_idiv0>:
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f002 fdfa 	bl	8003120 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f890 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 fb84 	bl	8000c3c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000534:	f000 f92c 	bl	8000790 <MX_ADC1_Init>
  MX_DAC_Init();
 8000538:	f000 f97c 	bl	8000834 <MX_DAC_Init>
  MX_DFSDM1_Init();
 800053c:	f000 f9a4 	bl	8000888 <MX_DFSDM1_Init>
  MX_DFSDM2_Init();
 8000540:	f000 f9da 	bl	80008f8 <MX_DFSDM2_Init>
  MX_FMPI2C1_Init();
 8000544:	f000 fa42 	bl	80009cc <MX_FMPI2C1_Init>
  MX_FSMC_Init();
 8000548:	f000 fd16 	bl	8000f78 <MX_FSMC_Init>
  MX_I2S2_Init();
 800054c:	f000 faa2 	bl	8000a94 <MX_I2S2_Init>
  MX_QUADSPI_Init();
 8000550:	f000 face 	bl	8000af0 <MX_QUADSPI_Init>
  MX_SDIO_SD_Init();
 8000554:	f000 faf8 	bl	8000b48 <MX_SDIO_SD_Init>
  MX_UART10_Init();
 8000558:	f000 fb1c 	bl	8000b94 <MX_UART10_Init>
  MX_USART6_UART_Init();
 800055c:	f000 fb44 	bl	8000be8 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000560:	f000 fa6a 	bl	8000a38 <MX_I2C2_Init>
  MX_FATFS_Init();
 8000564:	f00a fd1c 	bl	800afa0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  MX_UART10_Init();
 8000568:	f000 fb14 	bl	8000b94 <MX_UART10_Init>
  MX_USART6_UART_Init();
 800056c:	f000 fb3c 	bl	8000be8 <MX_USART6_UART_Init>
  MX_I2C2_Init();
 8000570:	f000 fa62 	bl	8000a38 <MX_I2C2_Init>
  BSP_LCD_Init();
 8000574:	f002 fa9f 	bl	8002ab6 <BSP_LCD_Init>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000578:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800057c:	f002 fb5a 	bl	8002c34 <BSP_LCD_Clear>
  BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_GPIO);
 8000580:	2100      	movs	r1, #0
 8000582:	2000      	movs	r0, #0
 8000584:	f002 f8e0 	bl	8002748 <BSP_PB_Init>
  BSP_LCD_SetFont(&Font16);
 8000588:	4820      	ldr	r0, [pc, #128]	; (800060c <main+0xe8>)
 800058a:	f002 fb43 	bl	8002c14 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800058e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8000592:	f002 fb1f 	bl	8002bd4 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000596:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800059a:	f002 fb2b 	bl	8002bf4 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, 112, (uint8_t*)"Starting Project ...", CENTER_MODE);
 800059e:	2301      	movs	r3, #1
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <main+0xec>)
 80005a2:	2170      	movs	r1, #112	; 0x70
 80005a4:	2000      	movs	r0, #0
 80005a6:	f002 fba5 	bl	8002cf4 <BSP_LCD_DisplayStringAt>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005aa:	f00e fd79 	bl	800f0a0 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of audioBufferMutex */
  audioBufferMutexHandle = osMutexNew(&audioBufferMutex_attributes);
 80005ae:	4819      	ldr	r0, [pc, #100]	; (8000614 <main+0xf0>)
 80005b0:	f00e feb4 	bl	800f31c <osMutexNew>
 80005b4:	4603      	mov	r3, r0
 80005b6:	4a18      	ldr	r2, [pc, #96]	; (8000618 <main+0xf4>)
 80005b8:	6013      	str	r3, [r2, #0]

  /* creation of buttonBufferMutex */
  buttonBufferMutexHandle = osMutexNew(&buttonBufferMutex_attributes);
 80005ba:	4818      	ldr	r0, [pc, #96]	; (800061c <main+0xf8>)
 80005bc:	f00e feae 	bl	800f31c <osMutexNew>
 80005c0:	4603      	mov	r3, r0
 80005c2:	4a17      	ldr	r2, [pc, #92]	; (8000620 <main+0xfc>)
 80005c4:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of audioBufferSem */
  audioBufferSemHandle = osSemaphoreNew(1, 1, &audioBufferSem_attributes);
 80005c6:	4a17      	ldr	r2, [pc, #92]	; (8000624 <main+0x100>)
 80005c8:	2101      	movs	r1, #1
 80005ca:	2001      	movs	r0, #1
 80005cc:	f00e ff40 	bl	800f450 <osSemaphoreNew>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <main+0x104>)
 80005d4:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005d6:	4a15      	ldr	r2, [pc, #84]	; (800062c <main+0x108>)
 80005d8:	2100      	movs	r1, #0
 80005da:	4815      	ldr	r0, [pc, #84]	; (8000630 <main+0x10c>)
 80005dc:	f00e fdca 	bl	800f174 <osThreadNew>
 80005e0:	4603      	mov	r3, r0
 80005e2:	4a14      	ldr	r2, [pc, #80]	; (8000634 <main+0x110>)
 80005e4:	6013      	str	r3, [r2, #0]

  /* creation of mountUSB */
  mountUSBHandle = osThreadNew(StartMountUSB, NULL, &mountUSB_attributes);
 80005e6:	4a14      	ldr	r2, [pc, #80]	; (8000638 <main+0x114>)
 80005e8:	2100      	movs	r1, #0
 80005ea:	4814      	ldr	r0, [pc, #80]	; (800063c <main+0x118>)
 80005ec:	f00e fdc2 	bl	800f174 <osThreadNew>
 80005f0:	4603      	mov	r3, r0
 80005f2:	4a13      	ldr	r2, [pc, #76]	; (8000640 <main+0x11c>)
 80005f4:	6013      	str	r3, [r2, #0]

  /* creation of readUSB */
  readUSBHandle = osThreadNew(StartReadUSB, NULL, &readUSB_attributes);
 80005f6:	4a13      	ldr	r2, [pc, #76]	; (8000644 <main+0x120>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	4813      	ldr	r0, [pc, #76]	; (8000648 <main+0x124>)
 80005fc:	f00e fdba 	bl	800f174 <osThreadNew>
 8000600:	4603      	mov	r3, r0
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <main+0x128>)
 8000604:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000606:	f00e fd7f 	bl	800f108 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 800060a:	e7fe      	b.n	800060a <main+0xe6>
 800060c:	2000004c 	.word	0x2000004c
 8000610:	0801365c 	.word	0x0801365c
 8000614:	08013708 	.word	0x08013708
 8000618:	200004f0 	.word	0x200004f0
 800061c:	08013718 	.word	0x08013718
 8000620:	200004f4 	.word	0x200004f4
 8000624:	08013728 	.word	0x08013728
 8000628:	200004f8 	.word	0x200004f8
 800062c:	0801369c 	.word	0x0801369c
 8000630:	080010dd 	.word	0x080010dd
 8000634:	200004e4 	.word	0x200004e4
 8000638:	080136c0 	.word	0x080136c0
 800063c:	08001159 	.word	0x08001159
 8000640:	200004e8 	.word	0x200004e8
 8000644:	080136e4 	.word	0x080136e4
 8000648:	08001179 	.word	0x08001179
 800064c:	200004ec 	.word	0x200004ec

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0aa      	sub	sp, #168	; 0xa8
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800065a:	2234      	movs	r2, #52	; 0x34
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f012 fe56 	bl	8013310 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	2258      	movs	r2, #88	; 0x58
 800067a:	2100      	movs	r1, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f012 fe47 	bl	8013310 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	4b40      	ldr	r3, [pc, #256]	; (8000788 <SystemClock_Config+0x138>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	4a3f      	ldr	r2, [pc, #252]	; (8000788 <SystemClock_Config+0x138>)
 800068c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000690:	6413      	str	r3, [r2, #64]	; 0x40
 8000692:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemClock_Config+0x138>)
 8000694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069e:	2300      	movs	r3, #0
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	4b3a      	ldr	r3, [pc, #232]	; (800078c <SystemClock_Config+0x13c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a39      	ldr	r2, [pc, #228]	; (800078c <SystemClock_Config+0x13c>)
 80006a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ac:	6013      	str	r3, [r2, #0]
 80006ae:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemClock_Config+0x13c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b6:	603b      	str	r3, [r7, #0]
 80006b8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006ba:	2303      	movs	r3, #3
 80006bc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c2:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2310      	movs	r3, #16
 80006cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d0:	2302      	movs	r3, #2
 80006d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006de:	230f      	movs	r3, #15
 80006e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006e4:	2390      	movs	r3, #144	; 0x90
 80006e6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006f0:	2305      	movs	r3, #5
 80006f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f6:	2302      	movs	r3, #2
 80006f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000700:	4618      	mov	r0, r3
 8000702:	f006 ff4d 	bl	80075a0 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800070c:	f000 fd4e 	bl	80011ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	663b      	str	r3, [r7, #96]	; 0x60
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000714:	2300      	movs	r3, #0
 8000716:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	673b      	str	r3, [r7, #112]	; 0x70

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000724:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f006 f936 	bl	800699c <HAL_RCC_ClockConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000736:	f000 fd39 	bl	80011ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S_APB1|RCC_PERIPHCLK_DFSDM1
 800073a:	f240 1371 	movw	r3, #369	; 0x171
 800073e:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48
                              |RCC_PERIPHCLK_FMPI2C1;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000740:	2332      	movs	r3, #50	; 0x32
 8000742:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 12;
 8000744:	230c      	movs	r3, #12
 8000746:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 800074c:	2302      	movs	r3, #2
 800074e:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000750:	2300      	movs	r3, #0
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_APB2;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_SYSCLK;
 8000758:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800075c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLI2SSelection = RCC_PLLI2SCLKSOURCE_PLLSRC;
 800075e:	2300      	movs	r3, #0
 8000760:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.I2sApb1ClockSelection = RCC_I2SAPB1CLKSOURCE_PLLI2S;
 8000762:	2300      	movs	r3, #0
 8000764:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.Fmpi2c1ClockSelection = RCC_FMPI2C1CLKSOURCE_APB;
 8000766:	2300      	movs	r3, #0
 8000768:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	4618      	mov	r0, r3
 8000770:	f006 fb26 	bl	8006dc0 <HAL_RCCEx_PeriphCLKConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x12e>
  {
    Error_Handler();
 800077a:	f000 fd17 	bl	80011ac <Error_Handler>
  }
}
 800077e:	bf00      	nop
 8000780:	37a8      	adds	r7, #168	; 0xa8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40023800 	.word	0x40023800
 800078c:	40007000 	.word	0x40007000

08000790 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000796:	463b      	mov	r3, r7
 8000798:	2200      	movs	r2, #0
 800079a:	601a      	str	r2, [r3, #0]
 800079c:	605a      	str	r2, [r3, #4]
 800079e:	609a      	str	r2, [r3, #8]
 80007a0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_ADC1_Init+0x98>)
 80007a4:	4a21      	ldr	r2, [pc, #132]	; (800082c <MX_ADC1_Init+0x9c>)
 80007a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_ADC1_Init+0x98>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007ae:	4b1e      	ldr	r3, [pc, #120]	; (8000828 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007b4:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_ADC1_Init+0x98>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007ba:	4b1b      	ldr	r3, [pc, #108]	; (8000828 <MX_ADC1_Init+0x98>)
 80007bc:	2200      	movs	r2, #0
 80007be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007c0:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_ADC1_Init+0x98>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_ADC1_Init+0x98>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_ADC1_Init+0x98>)
 80007d0:	4a17      	ldr	r2, [pc, #92]	; (8000830 <MX_ADC1_Init+0xa0>)
 80007d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_ADC1_Init+0x98>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_ADC1_Init+0x98>)
 80007dc:	2201      	movs	r2, #1
 80007de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_ADC1_Init+0x98>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_ADC1_Init+0x98>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007ee:	480e      	ldr	r0, [pc, #56]	; (8000828 <MX_ADC1_Init+0x98>)
 80007f0:	f002 fcfc 	bl	80031ec <HAL_ADC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80007fa:	f000 fcd7 	bl	80011ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007fe:	2301      	movs	r3, #1
 8000800:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000802:	2301      	movs	r3, #1
 8000804:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800080a:	463b      	mov	r3, r7
 800080c:	4619      	mov	r1, r3
 800080e:	4806      	ldr	r0, [pc, #24]	; (8000828 <MX_ADC1_Init+0x98>)
 8000810:	f002 fd30 	bl	8003274 <HAL_ADC_ConfigChannel>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800081a:	f000 fcc7 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000108 	.word	0x20000108
 800082c:	40012000 	.word	0x40012000
 8000830:	0f000001 	.word	0x0f000001

08000834 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800083a:	463b      	mov	r3, r7
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000842:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_DAC_Init+0x4c>)
 8000844:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <MX_DAC_Init+0x50>)
 8000846:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000848:	480d      	ldr	r0, [pc, #52]	; (8000880 <MX_DAC_Init+0x4c>)
 800084a:	f003 f823 	bl	8003894 <HAL_DAC_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000854:	f000 fcaa 	bl	80011ac <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000858:	2300      	movs	r3, #0
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800085c:	2300      	movs	r3, #0
 800085e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	4619      	mov	r1, r3
 8000866:	4806      	ldr	r0, [pc, #24]	; (8000880 <MX_DAC_Init+0x4c>)
 8000868:	f003 f88a 	bl	8003980 <HAL_DAC_ConfigChannel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000872:	f000 fc9b 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000150 	.word	0x20000150
 8000884:	40007400 	.word	0x40007400

08000888 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 800088e:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <MX_DFSDM1_Init+0x6c>)
 8000890:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 8000894:	2201      	movs	r2, #1
 8000896:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000898:	4b15      	ldr	r3, [pc, #84]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008a0:	2202      	movs	r2, #2
 80008a2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008b8:	2202      	movs	r2, #2
 80008ba:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80008bc:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80008c2:	4b0b      	ldr	r3, [pc, #44]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80008c8:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80008ce:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	; (80008f0 <MX_DFSDM1_Init+0x68>)
 80008dc:	f003 f8a8 	bl	8003a30 <HAL_DFSDM_ChannelInit>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_DFSDM1_Init+0x62>
  {
    Error_Handler();
 80008e6:	f000 fc61 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000164 	.word	0x20000164
 80008f4:	40016020 	.word	0x40016020

080008f8 <MX_DFSDM2_Init>:
  * @brief DFSDM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM2_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM2_Init 0 */

  /* USER CODE BEGIN DFSDM2_Init 1 */

  /* USER CODE END DFSDM2_Init 1 */
  hdfsdm2_channel1.Instance = DFSDM2_Channel1;
 80008fc:	4b2f      	ldr	r3, [pc, #188]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 80008fe:	4a30      	ldr	r2, [pc, #192]	; (80009c0 <MX_DFSDM2_Init+0xc8>)
 8000900:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel1.Init.OutputClock.Activation = ENABLE;
 8000902:	4b2e      	ldr	r3, [pc, #184]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 8000904:	2201      	movs	r2, #1
 8000906:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000908:	4b2c      	ldr	r3, [pc, #176]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel1.Init.OutputClock.Divider = 2;
 800090e:	4b2b      	ldr	r3, [pc, #172]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 8000910:	2202      	movs	r2, #2
 8000912:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000914:	4b29      	ldr	r3, [pc, #164]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800091a:	4b28      	ldr	r3, [pc, #160]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 800091c:	2200      	movs	r2, #0
 800091e:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8000920:	4b26      	ldr	r3, [pc, #152]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000926:	4b25      	ldr	r3, [pc, #148]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 8000928:	2202      	movs	r2, #2
 800092a:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800092c:	4b23      	ldr	r3, [pc, #140]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 800092e:	2200      	movs	r2, #0
 8000930:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000932:	4b22      	ldr	r3, [pc, #136]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 8000934:	2200      	movs	r2, #0
 8000936:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel1.Init.Awd.Oversampling = 1;
 8000938:	4b20      	ldr	r3, [pc, #128]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 800093a:	2201      	movs	r2, #1
 800093c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel1.Init.Offset = 0;
 800093e:	4b1f      	ldr	r3, [pc, #124]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 8000940:	2200      	movs	r2, #0
 8000942:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel1.Init.RightBitShift = 0x00;
 8000944:	4b1d      	ldr	r3, [pc, #116]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 8000946:	2200      	movs	r2, #0
 8000948:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel1) != HAL_OK)
 800094a:	481c      	ldr	r0, [pc, #112]	; (80009bc <MX_DFSDM2_Init+0xc4>)
 800094c:	f003 f870 	bl	8003a30 <HAL_DFSDM_ChannelInit>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_DFSDM2_Init+0x62>
  {
    Error_Handler();
 8000956:	f000 fc29 	bl	80011ac <Error_Handler>
  }
  hdfsdm2_channel7.Instance = DFSDM2_Channel7;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 800095c:	4a1a      	ldr	r2, [pc, #104]	; (80009c8 <MX_DFSDM2_Init+0xd0>)
 800095e:	601a      	str	r2, [r3, #0]
  hdfsdm2_channel7.Init.OutputClock.Activation = ENABLE;
 8000960:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 8000962:	2201      	movs	r2, #1
 8000964:	711a      	strb	r2, [r3, #4]
  hdfsdm2_channel7.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000966:	4b17      	ldr	r3, [pc, #92]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hdfsdm2_channel7.Init.OutputClock.Divider = 2;
 800096c:	4b15      	ldr	r3, [pc, #84]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 800096e:	2202      	movs	r2, #2
 8000970:	60da      	str	r2, [r3, #12]
  hdfsdm2_channel7.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000972:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hdfsdm2_channel7.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000978:	4b12      	ldr	r3, [pc, #72]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hdfsdm2_channel7.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 8000980:	2200      	movs	r2, #0
 8000982:	619a      	str	r2, [r3, #24]
  hdfsdm2_channel7.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 8000986:	2202      	movs	r2, #2
 8000988:	61da      	str	r2, [r3, #28]
  hdfsdm2_channel7.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 800098c:	2200      	movs	r2, #0
 800098e:	621a      	str	r2, [r3, #32]
  hdfsdm2_channel7.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 8000992:	2200      	movs	r2, #0
 8000994:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm2_channel7.Init.Awd.Oversampling = 1;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 8000998:	2201      	movs	r2, #1
 800099a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm2_channel7.Init.Offset = 0;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 800099e:	2200      	movs	r2, #0
 80009a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm2_channel7.Init.RightBitShift = 0x00;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm2_channel7) != HAL_OK)
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <MX_DFSDM2_Init+0xcc>)
 80009aa:	f003 f841 	bl	8003a30 <HAL_DFSDM_ChannelInit>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_DFSDM2_Init+0xc0>
  {
    Error_Handler();
 80009b4:	f000 fbfa 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM2_Init 2 */

  /* USER CODE END DFSDM2_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	2000019c 	.word	0x2000019c
 80009c0:	40016420 	.word	0x40016420
 80009c4:	200001d4 	.word	0x200001d4
 80009c8:	400164e0 	.word	0x400164e0

080009cc <MX_FMPI2C1_Init>:
  * @brief FMPI2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FMPI2C1_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE END FMPI2C1_Init 0 */

  /* USER CODE BEGIN FMPI2C1_Init 1 */

  /* USER CODE END FMPI2C1_Init 1 */
  hfmpi2c1.Instance = FMPI2C1;
 80009d0:	4b16      	ldr	r3, [pc, #88]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <MX_FMPI2C1_Init+0x64>)
 80009d4:	601a      	str	r2, [r3, #0]
  hfmpi2c1.Init.Timing = 0x00303D5B;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 80009d8:	4a16      	ldr	r2, [pc, #88]	; (8000a34 <MX_FMPI2C1_Init+0x68>)
 80009da:	605a      	str	r2, [r3, #4]
  hfmpi2c1.Init.OwnAddress1 = 0;
 80009dc:	4b13      	ldr	r3, [pc, #76]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  hfmpi2c1.Init.AddressingMode = FMPI2C_ADDRESSINGMODE_7BIT;
 80009e2:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 80009e4:	2201      	movs	r2, #1
 80009e6:	60da      	str	r2, [r3, #12]
  hfmpi2c1.Init.DualAddressMode = FMPI2C_DUALADDRESS_DISABLE;
 80009e8:	4b10      	ldr	r3, [pc, #64]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  hfmpi2c1.Init.OwnAddress2 = 0;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	615a      	str	r2, [r3, #20]
  hfmpi2c1.Init.OwnAddress2Masks = FMPI2C_OA2_NOMASK;
 80009f4:	4b0d      	ldr	r3, [pc, #52]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	619a      	str	r2, [r3, #24]
  hfmpi2c1.Init.GeneralCallMode = FMPI2C_GENERALCALL_DISABLE;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	61da      	str	r2, [r3, #28]
  hfmpi2c1.Init.NoStretchMode = FMPI2C_NOSTRETCH_DISABLE;
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	621a      	str	r2, [r3, #32]
  if (HAL_FMPI2C_Init(&hfmpi2c1) != HAL_OK)
 8000a06:	4809      	ldr	r0, [pc, #36]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 8000a08:	f003 f988 	bl	8003d1c <HAL_FMPI2C_Init>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_FMPI2C1_Init+0x4a>
  {
    Error_Handler();
 8000a12:	f000 fbcb 	bl	80011ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_FMPI2CEx_ConfigAnalogFilter(&hfmpi2c1, FMPI2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <MX_FMPI2C1_Init+0x60>)
 8000a1a:	f003 fa0e 	bl	8003e3a <HAL_FMPI2CEx_ConfigAnalogFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_FMPI2C1_Init+0x5c>
  {
    Error_Handler();
 8000a24:	f000 fbc2 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN FMPI2C1_Init 2 */

  /* USER CODE END FMPI2C1_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	2000020c 	.word	0x2000020c
 8000a30:	40006000 	.word	0x40006000
 8000a34:	00303d5b 	.word	0x00303d5b

08000a38 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a3c:	4b12      	ldr	r3, [pc, #72]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a3e:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <MX_I2C2_Init+0x54>)
 8000a40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a44:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <MX_I2C2_Init+0x58>)
 8000a46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a48:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a54:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b0a      	ldr	r3, [pc, #40]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000a62:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a68:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	; (8000a88 <MX_I2C2_Init+0x50>)
 8000a76:	f005 f8e7 	bl	8005c48 <HAL_I2C_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000a80:	f000 fb94 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20000258 	.word	0x20000258
 8000a8c:	40005800 	.word	0x40005800
 8000a90:	000186a0 	.word	0x000186a0

08000a94 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000a9a:	4a14      	ldr	r2, [pc, #80]	; (8000aec <MX_I2S2_Init+0x58>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000a9e:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000aa0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000aac:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ab2:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ab8:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000abc:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000ac0:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000ac8:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000ad4:	4804      	ldr	r0, [pc, #16]	; (8000ae8 <MX_I2S2_Init+0x54>)
 8000ad6:	f005 f9fb 	bl	8005ed0 <HAL_I2S_Init>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000ae0:	f000 fb64 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200002ac 	.word	0x200002ac
 8000aec:	40003800 	.word	0x40003800

08000af0 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000af6:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <MX_QUADSPI_Init+0x54>)
 8000af8:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000afa:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000afc:	22ff      	movs	r2, #255	; 0xff
 8000afe:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_QUADSPI_Init+0x50>)
 8000b2c:	f005 fe74 	bl	8006818 <HAL_QSPI_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000b36:	f000 fb39 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200002f4 	.word	0x200002f4
 8000b44:	a0001000 	.word	0xa0001000

08000b48 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SDIO_SD_Init+0x44>)
 8000b4e:	4a10      	ldr	r2, [pc, #64]	; (8000b90 <MX_SDIO_SD_Init+0x48>)
 8000b50:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SDIO_SD_Init+0x44>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SDIO_SD_Init+0x44>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SDIO_SD_Init+0x44>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SDIO_SD_Init+0x44>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SDIO_SD_Init+0x44>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SDIO_SD_Init+0x44>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd) != HAL_OK)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <MX_SDIO_SD_Init+0x44>)
 8000b78:	f006 ff52 	bl	8007a20 <HAL_SD_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SDIO_SD_Init+0x3e>
  {
    Error_Handler();
 8000b82:	f000 fb13 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000340 	.word	0x20000340
 8000b90:	40012c00 	.word	0x40012c00

08000b94 <MX_UART10_Init>:
  * @brief UART10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART10_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE END UART10_Init 0 */

  /* USER CODE BEGIN UART10_Init 1 */

  /* USER CODE END UART10_Init 1 */
  huart10.Instance = UART10;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <MX_UART10_Init+0x4c>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <MX_UART10_Init+0x50>)
 8000b9c:	601a      	str	r2, [r3, #0]
  huart10.Init.BaudRate = 115200;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <MX_UART10_Init+0x4c>)
 8000ba0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ba4:	605a      	str	r2, [r3, #4]
  huart10.Init.WordLength = UART_WORDLENGTH_8B;
 8000ba6:	4b0e      	ldr	r3, [pc, #56]	; (8000be0 <MX_UART10_Init+0x4c>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  huart10.Init.StopBits = UART_STOPBITS_1;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_UART10_Init+0x4c>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  huart10.Init.Parity = UART_PARITY_NONE;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <MX_UART10_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  huart10.Init.Mode = UART_MODE_TX_RX;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_UART10_Init+0x4c>)
 8000bba:	220c      	movs	r2, #12
 8000bbc:	615a      	str	r2, [r3, #20]
  huart10.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bbe:	4b08      	ldr	r3, [pc, #32]	; (8000be0 <MX_UART10_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	619a      	str	r2, [r3, #24]
  huart10.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_UART10_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart10) != HAL_OK)
 8000bca:	4805      	ldr	r0, [pc, #20]	; (8000be0 <MX_UART10_Init+0x4c>)
 8000bcc:	f008 f816 	bl	8008bfc <HAL_UART_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_UART10_Init+0x46>
  {
    Error_Handler();
 8000bd6:	f000 fae9 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN UART10_Init 2 */

  /* USER CODE END UART10_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200003c4 	.word	0x200003c4
 8000be4:	40011c00 	.word	0x40011c00

08000be8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000bec:	4b11      	ldr	r3, [pc, #68]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	; (8000c38 <MX_USART6_UART_Init+0x50>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	; (8000c34 <MX_USART6_UART_Init+0x4c>)
 8000c20:	f007 ffec 	bl	8008bfc <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000c2a:	f000 fabf 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000404 	.word	0x20000404
 8000c38:	40011400 	.word	0x40011400

08000c3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
 8000c56:	4bb0      	ldr	r3, [pc, #704]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4aaf      	ldr	r2, [pc, #700]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000c5c:	f043 0310 	orr.w	r3, r3, #16
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4bad      	ldr	r3, [pc, #692]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0310 	and.w	r3, r3, #16
 8000c6a:	623b      	str	r3, [r7, #32]
 8000c6c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
 8000c72:	4ba9      	ldr	r3, [pc, #676]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4aa8      	ldr	r2, [pc, #672]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000c78:	f043 0304 	orr.w	r3, r3, #4
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4ba6      	ldr	r3, [pc, #664]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0304 	and.w	r3, r3, #4
 8000c86:	61fb      	str	r3, [r7, #28]
 8000c88:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
 8000c8e:	4ba2      	ldr	r3, [pc, #648]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4aa1      	ldr	r2, [pc, #644]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000c94:	f043 0320 	orr.w	r3, r3, #32
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b9f      	ldr	r3, [pc, #636]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0320 	and.w	r3, r3, #32
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	4b9b      	ldr	r3, [pc, #620]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a9a      	ldr	r2, [pc, #616]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b98      	ldr	r3, [pc, #608]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbe:	617b      	str	r3, [r7, #20]
 8000cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	613b      	str	r3, [r7, #16]
 8000cc6:	4b94      	ldr	r3, [pc, #592]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	4a93      	ldr	r2, [pc, #588]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd2:	4b91      	ldr	r3, [pc, #580]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
 8000ce2:	4b8d      	ldr	r3, [pc, #564]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	4a8c      	ldr	r2, [pc, #560]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000ce8:	f043 0302 	orr.w	r3, r3, #2
 8000cec:	6313      	str	r3, [r2, #48]	; 0x30
 8000cee:	4b8a      	ldr	r3, [pc, #552]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b86      	ldr	r3, [pc, #536]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	4a85      	ldr	r2, [pc, #532]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d08:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0a:	4b83      	ldr	r3, [pc, #524]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d16:	2300      	movs	r3, #0
 8000d18:	607b      	str	r3, [r7, #4]
 8000d1a:	4b7f      	ldr	r3, [pc, #508]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a7e      	ldr	r2, [pc, #504]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000d20:	f043 0308 	orr.w	r3, r3, #8
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b7c      	ldr	r3, [pc, #496]	; (8000f18 <MX_GPIO_Init+0x2dc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	607b      	str	r3, [r7, #4]
 8000d30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2138      	movs	r1, #56	; 0x38
 8000d36:	4879      	ldr	r0, [pc, #484]	; (8000f1c <MX_GPIO_Init+0x2e0>)
 8000d38:	f003 fa5e 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|LED2_GREEN_Pin, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2121      	movs	r1, #33	; 0x21
 8000d40:	4877      	ldr	r0, [pc, #476]	; (8000f20 <MX_GPIO_Init+0x2e4>)
 8000d42:	f003 fa59 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8000d4c:	4875      	ldr	r0, [pc, #468]	; (8000f24 <MX_GPIO_Init+0x2e8>)
 8000d4e:	f003 fa53 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d58:	4873      	ldr	r0, [pc, #460]	; (8000f28 <MX_GPIO_Init+0x2ec>)
 8000d5a:	f003 fa4d 	bl	80041f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_RED_Pin MEMS_LED_Pin LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LED1_RED_Pin|MEMS_LED_Pin|LCD_BL_CTRL_Pin;
 8000d5e:	2338      	movs	r3, #56	; 0x38
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d72:	4619      	mov	r1, r3
 8000d74:	4869      	ldr	r0, [pc, #420]	; (8000f1c <MX_GPIO_Init+0x2e0>)
 8000d76:	f003 f8ab 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D5_Pin */
  GPIO_InitStruct.Pin = ARD_D5_Pin;
 8000d7a:	2340      	movs	r3, #64	; 0x40
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d86:	2300      	movs	r3, #0
 8000d88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D5_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d92:	4619      	mov	r1, r3
 8000d94:	4861      	ldr	r0, [pc, #388]	; (8000f1c <MX_GPIO_Init+0x2e0>)
 8000d96:	f003 f89b 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000d9a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000da0:	2300      	movs	r3, #0
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dac:	4619      	mov	r1, r3
 8000dae:	485f      	ldr	r0, [pc, #380]	; (8000f2c <MX_GPIO_Init+0x2f0>)
 8000db0:	f003 f88e 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 LED2_GREEN_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LED2_GREEN_Pin;
 8000db4:	2321      	movs	r3, #33	; 0x21
 8000db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db8:	2301      	movs	r3, #1
 8000dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc8:	4619      	mov	r1, r3
 8000dca:	4855      	ldr	r0, [pc, #340]	; (8000f20 <MX_GPIO_Init+0x2e4>)
 8000dcc:	f003 f880 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CTP_INT_Pin */
  GPIO_InitStruct.Pin = CTP_INT_Pin;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dd4:	4b56      	ldr	r3, [pc, #344]	; (8000f30 <MX_GPIO_Init+0x2f4>)
 8000dd6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CTP_INT_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de0:	4619      	mov	r1, r3
 8000de2:	484f      	ldr	r0, [pc, #316]	; (8000f20 <MX_GPIO_Init+0x2e4>)
 8000de4:	f003 f874 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B_USER_Pin */
  GPIO_InitStruct.Pin = B_USER_Pin;
 8000de8:	2301      	movs	r3, #1
 8000dea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dec:	4b50      	ldr	r3, [pc, #320]	; (8000f30 <MX_GPIO_Init+0x2f4>)
 8000dee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df8:	4619      	mov	r1, r3
 8000dfa:	484e      	ldr	r0, [pc, #312]	; (8000f34 <MX_GPIO_Init+0x2f8>)
 8000dfc:	f003 f868 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000e00:	2301      	movs	r3, #1
 8000e02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e04:	2302      	movs	r3, #2
 8000e06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e10:	2302      	movs	r3, #2
 8000e12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4842      	ldr	r0, [pc, #264]	; (8000f24 <MX_GPIO_Init+0x2e8>)
 8000e1c:	f003 f858 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_Detect_Pin */
  GPIO_InitStruct.Pin = SD_Detect_Pin;
 8000e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e26:	4b42      	ldr	r3, [pc, #264]	; (8000f30 <MX_GPIO_Init+0x2f4>)
 8000e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(SD_Detect_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e32:	4619      	mov	r1, r3
 8000e34:	483d      	ldr	r0, [pc, #244]	; (8000f2c <MX_GPIO_Init+0x2f0>)
 8000e36:	f003 f84b 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D13_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin;
 8000e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000e4c:	2307      	movs	r3, #7
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D13_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4833      	ldr	r0, [pc, #204]	; (8000f24 <MX_GPIO_Init+0x2e8>)
 8000e58:	f003 f83a 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_CTP_RST_Pin LCD_TE_Pin WIFI_WKUP_Pin */
  GPIO_InitStruct.Pin = LCD_CTP_RST_Pin|LCD_TE_Pin|WIFI_WKUP_Pin;
 8000e5c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	482b      	ldr	r0, [pc, #172]	; (8000f24 <MX_GPIO_Init+0x2e8>)
 8000e76:	f003 f82b 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_Pin CODEC_INT_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_Pin|CODEC_INT_Pin;
 8000e7a:	f248 0380 	movw	r3, #32896	; 0x8080
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <MX_GPIO_Init+0x2f4>)
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4826      	ldr	r0, [pc, #152]	; (8000f28 <MX_GPIO_Init+0x2ec>)
 8000e90:	f003 f81e 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000ea6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eaa:	4619      	mov	r1, r3
 8000eac:	481e      	ldr	r0, [pc, #120]	; (8000f28 <MX_GPIO_Init+0x2ec>)
 8000eae:	f003 f80f 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D10_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin;
 8000eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb8:	2302      	movs	r3, #2
 8000eba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D10_GPIO_Port, &GPIO_InitStruct);
 8000ec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ecc:	4619      	mov	r1, r3
 8000ece:	4819      	ldr	r0, [pc, #100]	; (8000f34 <MX_GPIO_Init+0x2f8>)
 8000ed0:	f002 fffe 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ed4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ee2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480f      	ldr	r0, [pc, #60]	; (8000f28 <MX_GPIO_Init+0x2ec>)
 8000eea:	f002 fff1 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D12_Pin|ARD_D11_Pin;
 8000eee:	2330      	movs	r3, #48	; 0x30
 8000ef0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efa:	2303      	movs	r3, #3
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000efe:	2306      	movs	r3, #6
 8000f00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f06:	4619      	mov	r1, r3
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_GPIO_Init+0x2e8>)
 8000f0a:	f002 ffe1 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000f0e:	2340      	movs	r3, #64	; 0x40
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <MX_GPIO_Init+0x2f4>)
 8000f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f16:	e00f      	b.n	8000f38 <MX_GPIO_Init+0x2fc>
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40021000 	.word	0x40021000
 8000f20:	40020800 	.word	0x40020800
 8000f24:	40020400 	.word	0x40020400
 8000f28:	40021800 	.word	0x40021800
 8000f2c:	40021400 	.word	0x40021400
 8000f30:	10110000 	.word	0x10110000
 8000f34:	40020000 	.word	0x40020000
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	480c      	ldr	r0, [pc, #48]	; (8000f74 <MX_GPIO_Init+0x338>)
 8000f44:	f002 ffc4 	bl	8003ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D9_Pin;
 8000f48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ARD_D9_GPIO_Port, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	4803      	ldr	r0, [pc, #12]	; (8000f74 <MX_GPIO_Init+0x338>)
 8000f66:	f002 ffb3 	bl	8003ed0 <HAL_GPIO_Init>

}
 8000f6a:	bf00      	nop
 8000f6c:	3738      	adds	r7, #56	; 0x38
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40020400 	.word	0x40020400

08000f78 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b088      	sub	sp, #32
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
 8000f8c:	615a      	str	r2, [r3, #20]
 8000f8e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000f90:	4b4f      	ldr	r3, [pc, #316]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000f92:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000f96:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000f98:	4b4d      	ldr	r3, [pc, #308]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000f9a:	4a4e      	ldr	r2, [pc, #312]	; (80010d4 <MX_FSMC_Init+0x15c>)
 8000f9c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8000f9e:	4b4c      	ldr	r3, [pc, #304]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000fa4:	4b4a      	ldr	r3, [pc, #296]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8000faa:	4b49      	ldr	r3, [pc, #292]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000fb0:	4b47      	ldr	r3, [pc, #284]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fb2:	2210      	movs	r2, #16
 8000fb4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000fb6:	4b46      	ldr	r3, [pc, #280]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8000fbc:	4b44      	ldr	r3, [pc, #272]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000fc2:	4b43      	ldr	r3, [pc, #268]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8000fc8:	4b41      	ldr	r3, [pc, #260]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000fd0:	4b3f      	ldr	r3, [pc, #252]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8000fd6:	4b3e      	ldr	r3, [pc, #248]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000fdc:	4b3c      	ldr	r3, [pc, #240]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8000fe2:	4b3b      	ldr	r3, [pc, #236]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000fe8:	4b39      	ldr	r3, [pc, #228]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 8000fee:	4b38      	ldr	r3, [pc, #224]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000ff4:	4b36      	ldr	r3, [pc, #216]	; (80010d0 <MX_FSMC_Init+0x158>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000ffe:	230f      	movs	r3, #15
 8001000:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001002:	23ff      	movs	r3, #255	; 0xff
 8001004:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001006:	230f      	movs	r3, #15
 8001008:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 800100a:	2310      	movs	r3, #16
 800100c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 800100e:	2311      	movs	r3, #17
 8001010:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001012:	2300      	movs	r3, #0
 8001014:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	2200      	movs	r2, #0
 800101a:	4619      	mov	r1, r3
 800101c:	482c      	ldr	r0, [pc, #176]	; (80010d0 <MX_FSMC_Init+0x158>)
 800101e:	f007 fb6b 	bl	80086f8 <HAL_SRAM_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_FSMC_Init+0xb4>
  {
    Error_Handler( );
 8001028:	f000 f8c0 	bl	80011ac <Error_Handler>
  }

  /** Perform the SRAM2 memory initialization sequence
  */
  hsram2.Instance = FSMC_NORSRAM_DEVICE;
 800102c:	4b2a      	ldr	r3, [pc, #168]	; (80010d8 <MX_FSMC_Init+0x160>)
 800102e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001032:	601a      	str	r2, [r3, #0]
  hsram2.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001036:	4a27      	ldr	r2, [pc, #156]	; (80010d4 <MX_FSMC_Init+0x15c>)
 8001038:	605a      	str	r2, [r3, #4]
  /* hsram2.Init */
  hsram2.Init.NSBank = FSMC_NORSRAM_BANK3;
 800103a:	4b27      	ldr	r3, [pc, #156]	; (80010d8 <MX_FSMC_Init+0x160>)
 800103c:	2204      	movs	r2, #4
 800103e:	609a      	str	r2, [r3, #8]
  hsram2.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001040:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001042:	2200      	movs	r2, #0
 8001044:	60da      	str	r2, [r3, #12]
  hsram2.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001046:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  hsram2.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800104c:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <MX_FSMC_Init+0x160>)
 800104e:	2210      	movs	r2, #16
 8001050:	615a      	str	r2, [r3, #20]
  hsram2.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001052:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001054:	2200      	movs	r2, #0
 8001056:	619a      	str	r2, [r3, #24]
  hsram2.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001058:	4b1f      	ldr	r3, [pc, #124]	; (80010d8 <MX_FSMC_Init+0x160>)
 800105a:	2200      	movs	r2, #0
 800105c:	61da      	str	r2, [r3, #28]
  hsram2.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800105e:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001060:	2200      	movs	r2, #0
 8001062:	625a      	str	r2, [r3, #36]	; 0x24
  hsram2.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001066:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram2.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 800106c:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <MX_FSMC_Init+0x160>)
 800106e:	2200      	movs	r2, #0
 8001070:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram2.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001074:	2200      	movs	r2, #0
 8001076:	631a      	str	r2, [r3, #48]	; 0x30
  hsram2.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <MX_FSMC_Init+0x160>)
 800107a:	2200      	movs	r2, #0
 800107c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram2.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800107e:	4b16      	ldr	r3, [pc, #88]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001080:	2200      	movs	r2, #0
 8001082:	639a      	str	r2, [r3, #56]	; 0x38
  hsram2.Init.ContinuousClock = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001086:	2200      	movs	r2, #0
 8001088:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram2.Init.WriteFifo = FSMC_WRITE_FIFO_ENABLE;
 800108a:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <MX_FSMC_Init+0x160>)
 800108c:	2200      	movs	r2, #0
 800108e:	641a      	str	r2, [r3, #64]	; 0x40
  hsram2.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <MX_FSMC_Init+0x160>)
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001096:	230f      	movs	r3, #15
 8001098:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 800109a:	230f      	movs	r3, #15
 800109c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800109e:	23ff      	movs	r3, #255	; 0xff
 80010a0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80010a2:	230f      	movs	r3, #15
 80010a4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010a6:	2310      	movs	r3, #16
 80010a8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010aa:	2311      	movs	r3, #17
 80010ac:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010ae:	2300      	movs	r3, #0
 80010b0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram2, &Timing, NULL) != HAL_OK)
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	4807      	ldr	r0, [pc, #28]	; (80010d8 <MX_FSMC_Init+0x160>)
 80010ba:	f007 fb1d 	bl	80086f8 <HAL_SRAM_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_FSMC_Init+0x150>
  {
    Error_Handler( );
 80010c4:	f000 f872 	bl	80011ac <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80010c8:	bf00      	nop
 80010ca:	3720      	adds	r7, #32
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000444 	.word	0x20000444
 80010d4:	a0000104 	.word	0xa0000104
 80010d8:	20000494 	.word	0x20000494

080010dc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80010e4:	f011 fd92 	bl	8012c0c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* USER CODE BEGIN StartMountUSB */
  	USBMounted = false;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <StartDefaultTask+0x68>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	701a      	strb	r2, [r3, #0]
    /* Infinite loop */
    for(;;)
    {
  	  if(Appli_state == APPLICATION_START)
 80010ee:	4b16      	ldr	r3, [pc, #88]	; (8001148 <StartDefaultTask+0x6c>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d105      	bne.n	8001102 <StartDefaultTask+0x26>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	2120      	movs	r1, #32
 80010fa:	4814      	ldr	r0, [pc, #80]	; (800114c <StartDefaultTask+0x70>)
 80010fc:	f003 f87c 	bl	80041f8 <HAL_GPIO_WritePin>
 8001100:	e008      	b.n	8001114 <StartDefaultTask+0x38>
  	  else if(Appli_state == APPLICATION_DISCONNECT)
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <StartDefaultTask+0x6c>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b03      	cmp	r3, #3
 8001108:	d104      	bne.n	8001114 <StartDefaultTask+0x38>
  		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_5, GPIO_PIN_RESET);
 800110a:	2200      	movs	r2, #0
 800110c:	2120      	movs	r1, #32
 800110e:	480f      	ldr	r0, [pc, #60]	; (800114c <StartDefaultTask+0x70>)
 8001110:	f003 f872 	bl	80041f8 <HAL_GPIO_WritePin>

  	  if(Appli_state == APPLICATION_READY)
 8001114:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <StartDefaultTask+0x6c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b02      	cmp	r3, #2
 800111a:	d10f      	bne.n	800113c <StartDefaultTask+0x60>
  	  {
  		  if(!USBMounted)
 800111c:	4b09      	ldr	r3, [pc, #36]	; (8001144 <StartDefaultTask+0x68>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f083 0301 	eor.w	r3, r3, #1
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0e1      	beq.n	80010ee <StartDefaultTask+0x12>
  		  {
  			  f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	4908      	ldr	r1, [pc, #32]	; (8001150 <StartDefaultTask+0x74>)
 800112e:	4809      	ldr	r0, [pc, #36]	; (8001154 <StartDefaultTask+0x78>)
 8001130:	f00d fea8 	bl	800ee84 <f_mount>
  			  USBMounted = true;
 8001134:	4b03      	ldr	r3, [pc, #12]	; (8001144 <StartDefaultTask+0x68>)
 8001136:	2201      	movs	r2, #1
 8001138:	701a      	strb	r2, [r3, #0]
 800113a:	e7d8      	b.n	80010ee <StartDefaultTask+0x12>
  		  }
  	  }
  	  else
  		  USBMounted = false;
 800113c:	4b01      	ldr	r3, [pc, #4]	; (8001144 <StartDefaultTask+0x68>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
  	  if(Appli_state == APPLICATION_START)
 8001142:	e7d4      	b.n	80010ee <StartDefaultTask+0x12>
 8001144:	200004fc 	.word	0x200004fc
 8001148:	20005624 	.word	0x20005624
 800114c:	40020800 	.word	0x40020800
 8001150:	200005a8 	.word	0x200005a8
 8001154:	200005ac 	.word	0x200005ac

08001158 <StartMountUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMountUSB */
void StartMountUSB(void *argument)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  for(;;)
    {
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8001160:	2108      	movs	r1, #8
 8001162:	4804      	ldr	r0, [pc, #16]	; (8001174 <StartMountUSB+0x1c>)
 8001164:	f003 f861 	bl	800422a <HAL_GPIO_TogglePin>
      osDelay(333);
 8001168:	f240 104d 	movw	r0, #333	; 0x14d
 800116c:	f00e f8a8 	bl	800f2c0 <osDelay>
  	  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8001170:	e7f6      	b.n	8001160 <StartMountUSB+0x8>
 8001172:	bf00      	nop
 8001174:	40021000 	.word	0x40021000

08001178 <StartReadUSB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReadUSB */
void StartReadUSB(void *argument)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReadUSB */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001180:	2001      	movs	r0, #1
 8001182:	f00e f89d 	bl	800f2c0 <osDelay>
 8001186:	e7fb      	b.n	8001180 <StartReadUSB+0x8>

08001188 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d101      	bne.n	800119e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800119a:	f001 ffe3 	bl	8003164 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40001000 	.word	0x40001000

080011ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80011b0:	bf00      	nop
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr
	...

080011bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	4b13      	ldr	r3, [pc, #76]	; (8001214 <HAL_MspInit+0x58>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <HAL_MspInit+0x58>)
 80011cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d0:	6453      	str	r3, [r2, #68]	; 0x44
 80011d2:	4b10      	ldr	r3, [pc, #64]	; (8001214 <HAL_MspInit+0x58>)
 80011d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011da:	607b      	str	r3, [r7, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <HAL_MspInit+0x58>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	4a0b      	ldr	r2, [pc, #44]	; (8001214 <HAL_MspInit+0x58>)
 80011e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ec:	6413      	str	r3, [r2, #64]	; 0x40
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <HAL_MspInit+0x58>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	603b      	str	r3, [r7, #0]
 80011f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	2005      	movs	r0, #5
 8001200:	f002 fb1e 	bl	8003840 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001204:	2005      	movs	r0, #5
 8001206:	f002 fb37 	bl	8003878 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a31      	ldr	r2, [pc, #196]	; (80012fc <HAL_ADC_MspInit+0xe4>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d15b      	bne.n	80012f2 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	4a2f      	ldr	r2, [pc, #188]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 8001244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001248:	6453      	str	r3, [r2, #68]	; 0x44
 800124a:	4b2d      	ldr	r3, [pc, #180]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001252:	61bb      	str	r3, [r7, #24]
 8001254:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
 800125a:	4b29      	ldr	r3, [pc, #164]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	6313      	str	r3, [r2, #48]	; 0x30
 8001266:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	4b22      	ldr	r3, [pc, #136]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a21      	ldr	r2, [pc, #132]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 800127c:	f043 0304 	orr.w	r3, r3, #4
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0304 	and.w	r3, r3, #4
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	4a1a      	ldr	r2, [pc, #104]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	; 0x30
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_ADC_MspInit+0xe8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> ADC1_IN2
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A2_Pin|ARD_A3_Pin;
 80012aa:	2326      	movs	r3, #38	; 0x26
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ae:	2303      	movs	r3, #3
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b2:	2300      	movs	r3, #0
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 031c 	add.w	r3, r7, #28
 80012ba:	4619      	mov	r1, r3
 80012bc:	4811      	ldr	r0, [pc, #68]	; (8001304 <HAL_ADC_MspInit+0xec>)
 80012be:	f002 fe07 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A5_Pin;
 80012c2:	2310      	movs	r3, #16
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012c6:	2303      	movs	r3, #3
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A5_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	480c      	ldr	r0, [pc, #48]	; (8001308 <HAL_ADC_MspInit+0xf0>)
 80012d6:	f002 fdfb 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARD_A4_Pin;
 80012da:	2302      	movs	r3, #2
 80012dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012de:	2303      	movs	r3, #3
 80012e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARD_A4_GPIO_Port, &GPIO_InitStruct);
 80012e6:	f107 031c 	add.w	r3, r7, #28
 80012ea:	4619      	mov	r1, r3
 80012ec:	4807      	ldr	r0, [pc, #28]	; (800130c <HAL_ADC_MspInit+0xf4>)
 80012ee:	f002 fdef 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012f2:	bf00      	nop
 80012f4:	3730      	adds	r7, #48	; 0x30
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40012000 	.word	0x40012000
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020800 	.word	0x40020800
 800130c:	40020400 	.word	0x40020400

08001310 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a1b      	ldr	r2, [pc, #108]	; (800139c <HAL_DAC_MspInit+0x8c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12f      	bne.n	8001392 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <HAL_DAC_MspInit+0x90>)
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <HAL_DAC_MspInit+0x90>)
 800133c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001340:	6413      	str	r3, [r2, #64]	; 0x40
 8001342:	4b17      	ldr	r3, [pc, #92]	; (80013a0 <HAL_DAC_MspInit+0x90>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <HAL_DAC_MspInit+0x90>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_DAC_MspInit+0x90>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <HAL_DAC_MspInit+0x90>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = ARD_D8_Pin;
 800136a:	2310      	movs	r3, #16
 800136c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800136e:	2303      	movs	r3, #3
 8001370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARD_D8_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4809      	ldr	r0, [pc, #36]	; (80013a4 <HAL_DAC_MspInit+0x94>)
 800137e:	f002 fda7 	bl	8003ed0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	2036      	movs	r0, #54	; 0x36
 8001388:	f002 fa5a 	bl	8003840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800138c:	2036      	movs	r0, #54	; 0x36
 800138e:	f002 fa73 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001392:	bf00      	nop
 8001394:	3728      	adds	r7, #40	; 0x28
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40007400 	.word	0x40007400
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020000 	.word	0x40020000

080013a8 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08e      	sub	sp, #56	; 0x38
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]
  if((IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM1_Init == 0))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a77      	ldr	r2, [pc, #476]	; (80015a4 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d00e      	beq.n	80013e8 <HAL_DFSDM_ChannelMspInit+0x40>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a76      	ldr	r2, [pc, #472]	; (80015a8 <HAL_DFSDM_ChannelMspInit+0x200>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d009      	beq.n	80013e8 <HAL_DFSDM_ChannelMspInit+0x40>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a74      	ldr	r2, [pc, #464]	; (80015ac <HAL_DFSDM_ChannelMspInit+0x204>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d004      	beq.n	80013e8 <HAL_DFSDM_ChannelMspInit+0x40>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a73      	ldr	r2, [pc, #460]	; (80015b0 <HAL_DFSDM_ChannelMspInit+0x208>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d154      	bne.n	8001492 <HAL_DFSDM_ChannelMspInit+0xea>
 80013e8:	4b72      	ldr	r3, [pc, #456]	; (80015b4 <HAL_DFSDM_ChannelMspInit+0x20c>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d150      	bne.n	8001492 <HAL_DFSDM_ChannelMspInit+0xea>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
 80013f4:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f8:	4a6f      	ldr	r2, [pc, #444]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80013fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013fe:	6453      	str	r3, [r2, #68]	; 0x44
 8001400:	4b6d      	ldr	r3, [pc, #436]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001408:	623b      	str	r3, [r7, #32]
 800140a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800140c:	2300      	movs	r3, #0
 800140e:	61fb      	str	r3, [r7, #28]
 8001410:	4b69      	ldr	r3, [pc, #420]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4a68      	ldr	r2, [pc, #416]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001416:	f043 0301 	orr.w	r3, r3, #1
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
 800141c:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	f003 0301 	and.w	r3, r3, #1
 8001424:	61fb      	str	r3, [r7, #28]
 8001426:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	4b62      	ldr	r3, [pc, #392]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800142e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001430:	4a61      	ldr	r2, [pc, #388]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001432:	f043 0308 	orr.w	r3, r3, #8
 8001436:	6313      	str	r3, [r2, #48]	; 0x30
 8001438:	4b5f      	ldr	r3, [pc, #380]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800143a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	69bb      	ldr	r3, [r7, #24]
    /**DFSDM1 GPIO Configuration
    PA8     ------> DFSDM1_CKOUT
    PD6     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 8001444:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001448:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144a:	2302      	movs	r3, #2
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001456:	2306      	movs	r3, #6
 8001458:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 800145a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800145e:	4619      	mov	r1, r3
 8001460:	4856      	ldr	r0, [pc, #344]	; (80015bc <HAL_DFSDM_ChannelMspInit+0x214>)
 8001462:	f002 fd35 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DFSDM1_DATIN1_Pin;
 8001466:	2340      	movs	r3, #64	; 0x40
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146e:	2300      	movs	r3, #0
 8001470:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001472:	2300      	movs	r3, #0
 8001474:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001476:	2306      	movs	r3, #6
 8001478:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM1_DATIN1_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147e:	4619      	mov	r1, r3
 8001480:	484f      	ldr	r0, [pc, #316]	; (80015c0 <HAL_DFSDM_ChannelMspInit+0x218>)
 8001482:	f002 fd25 	bl	8003ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8001486:	4b4b      	ldr	r3, [pc, #300]	; (80015b4 <HAL_DFSDM_ChannelMspInit+0x20c>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3301      	adds	r3, #1
 800148c:	4a49      	ldr	r2, [pc, #292]	; (80015b4 <HAL_DFSDM_ChannelMspInit+0x20c>)
 800148e:	6013      	str	r3, [r2, #0]

  /* USER CODE END DFSDM2_MspInit 1 */
  DFSDM2_Init++;
  }

}
 8001490:	e084      	b.n	800159c <HAL_DFSDM_ChannelMspInit+0x1f4>
  else if(!(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))&&(DFSDM2_Init == 0))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a43      	ldr	r2, [pc, #268]	; (80015a4 <HAL_DFSDM_ChannelMspInit+0x1fc>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d07f      	beq.n	800159c <HAL_DFSDM_ChannelMspInit+0x1f4>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a41      	ldr	r2, [pc, #260]	; (80015a8 <HAL_DFSDM_ChannelMspInit+0x200>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d07a      	beq.n	800159c <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a40      	ldr	r2, [pc, #256]	; (80015ac <HAL_DFSDM_ChannelMspInit+0x204>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d075      	beq.n	800159c <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a3e      	ldr	r2, [pc, #248]	; (80015b0 <HAL_DFSDM_ChannelMspInit+0x208>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d070      	beq.n	800159c <HAL_DFSDM_ChannelMspInit+0x1f4>
 80014ba:	4b42      	ldr	r3, [pc, #264]	; (80015c4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d16c      	bne.n	800159c <HAL_DFSDM_ChannelMspInit+0x1f4>
    __HAL_RCC_DFSDM2_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ca:	4a3b      	ldr	r2, [pc, #236]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014d0:	6453      	str	r3, [r2, #68]	; 0x44
 80014d2:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	613b      	str	r3, [r7, #16]
 80014e2:	4b35      	ldr	r3, [pc, #212]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a34      	ldr	r2, [pc, #208]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b32      	ldr	r3, [pc, #200]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	613b      	str	r3, [r7, #16]
 80014f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	4b2e      	ldr	r3, [pc, #184]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001504:	f043 0308 	orr.w	r3, r3, #8
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b2b      	ldr	r3, [pc, #172]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60bb      	str	r3, [r7, #8]
 800151a:	4b27      	ldr	r3, [pc, #156]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a26      	ldr	r2, [pc, #152]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <HAL_DFSDM_ChannelMspInit+0x210>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = DFSDM2_DATIN1_Pin;
 8001532:	2380      	movs	r3, #128	; 0x80
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153e:	2300      	movs	r3, #0
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_DFSDM2;
 8001542:	2307      	movs	r3, #7
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN1_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	481b      	ldr	r0, [pc, #108]	; (80015bc <HAL_DFSDM_ChannelMspInit+0x214>)
 800154e:	f002 fcbf 	bl	8003ed0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_CKOUT_Pin;
 8001552:	2304      	movs	r3, #4
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM2;
 8001562:	2303      	movs	r3, #3
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	4814      	ldr	r0, [pc, #80]	; (80015c0 <HAL_DFSDM_ChannelMspInit+0x218>)
 800156e:	f002 fcaf 	bl	8003ed0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DFSDM2_DATIN7_Pin;
 8001572:	2380      	movs	r3, #128	; 0x80
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001576:	2302      	movs	r3, #2
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157e:	2300      	movs	r3, #0
 8001580:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM2;
 8001582:	2306      	movs	r3, #6
 8001584:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DFSDM2_DATIN7_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	480e      	ldr	r0, [pc, #56]	; (80015c8 <HAL_DFSDM_ChannelMspInit+0x220>)
 800158e:	f002 fc9f 	bl	8003ed0 <HAL_GPIO_Init>
  DFSDM2_Init++;
 8001592:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	3301      	adds	r3, #1
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_DFSDM_ChannelMspInit+0x21c>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	3738      	adds	r7, #56	; 0x38
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40016000 	.word	0x40016000
 80015a8:	40016020 	.word	0x40016020
 80015ac:	40016040 	.word	0x40016040
 80015b0:	40016060 	.word	0x40016060
 80015b4:	20000500 	.word	0x20000500
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020000 	.word	0x40020000
 80015c0:	40020c00 	.word	0x40020c00
 80015c4:	20000504 	.word	0x20000504
 80015c8:	40020400 	.word	0x40020400

080015cc <HAL_FMPI2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hfmpi2c: FMPI2C handle pointer
* @retval None
*/
void HAL_FMPI2C_MspInit(FMPI2C_HandleTypeDef* hfmpi2c)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	; 0x28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d4:	f107 0314 	add.w	r3, r7, #20
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  if(hfmpi2c->Instance==FMPI2C1)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a19      	ldr	r2, [pc, #100]	; (8001650 <HAL_FMPI2C_MspInit+0x84>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d12b      	bne.n	8001646 <HAL_FMPI2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN FMPI2C1_MspInit 0 */

  /* USER CODE END FMPI2C1_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <HAL_FMPI2C_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <HAL_FMPI2C_MspInit+0x88>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <HAL_FMPI2C_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	613b      	str	r3, [r7, #16]
 8001608:	693b      	ldr	r3, [r7, #16]
    /**FMPI2C1 GPIO Configuration
    PC6     ------> FMPI2C1_SCL
    PC7     ------> FMPI2C1_SDA
    */
    GPIO_InitStruct.Pin = I2CFMP1_SCL_Pin|I2CFMP_SDA_Pin;
 800160a:	23c0      	movs	r3, #192	; 0xc0
 800160c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800160e:	2312      	movs	r3, #18
 8001610:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001612:	2301      	movs	r3, #1
 8001614:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001616:	2303      	movs	r3, #3
 8001618:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_FMPI2C1;
 800161a:	2304      	movs	r3, #4
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161e:	f107 0314 	add.w	r3, r7, #20
 8001622:	4619      	mov	r1, r3
 8001624:	480c      	ldr	r0, [pc, #48]	; (8001658 <HAL_FMPI2C_MspInit+0x8c>)
 8001626:	f002 fc53 	bl	8003ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_FMPI2C1_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_FMPI2C_MspInit+0x88>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_FMPI2C_MspInit+0x88>)
 8001634:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_FMPI2C_MspInit+0x88>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN FMPI2C1_MspInit 1 */

  /* USER CODE END FMPI2C1_MspInit 1 */
  }

}
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40006000 	.word	0x40006000
 8001654:	40023800 	.word	0x40023800
 8001658:	40020800 	.word	0x40020800

0800165c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a19      	ldr	r2, [pc, #100]	; (80016e0 <HAL_I2C_MspInit+0x84>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d12c      	bne.n	80016d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
 8001682:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4a17      	ldr	r2, [pc, #92]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b15      	ldr	r3, [pc, #84]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800169a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800169e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016a0:	2312      	movs	r3, #18
 80016a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a4:	2301      	movs	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ac:	2304      	movs	r3, #4
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	480c      	ldr	r0, [pc, #48]	; (80016e8 <HAL_I2C_MspInit+0x8c>)
 80016b8:	f002 fc0a 	bl	8003ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
 80016c0:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ca:	6413      	str	r3, [r2, #64]	; 0x40
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_I2C_MspInit+0x88>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40005800 	.word	0x40005800
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40020400 	.word	0x40020400

080016ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b08c      	sub	sp, #48	; 0x30
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f4:	f107 031c 	add.w	r3, r7, #28
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
 80016fc:	605a      	str	r2, [r3, #4]
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a4f      	ldr	r2, [pc, #316]	; (8001848 <HAL_I2S_MspInit+0x15c>)
 800170a:	4293      	cmp	r3, r2
 800170c:	f040 8097 	bne.w	800183e <HAL_I2S_MspInit+0x152>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	61bb      	str	r3, [r7, #24]
 8001714:	4b4d      	ldr	r3, [pc, #308]	; (800184c <HAL_I2S_MspInit+0x160>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001718:	4a4c      	ldr	r2, [pc, #304]	; (800184c <HAL_I2S_MspInit+0x160>)
 800171a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800171e:	6413      	str	r3, [r2, #64]	; 0x40
 8001720:	4b4a      	ldr	r3, [pc, #296]	; (800184c <HAL_I2S_MspInit+0x160>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001728:	61bb      	str	r3, [r7, #24]
 800172a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	4b46      	ldr	r3, [pc, #280]	; (800184c <HAL_I2S_MspInit+0x160>)
 8001732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001734:	4a45      	ldr	r2, [pc, #276]	; (800184c <HAL_I2S_MspInit+0x160>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6313      	str	r3, [r2, #48]	; 0x30
 800173c:	4b43      	ldr	r3, [pc, #268]	; (800184c <HAL_I2S_MspInit+0x160>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	f003 0304 	and.w	r3, r3, #4
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001748:	2300      	movs	r3, #0
 800174a:	613b      	str	r3, [r7, #16]
 800174c:	4b3f      	ldr	r3, [pc, #252]	; (800184c <HAL_I2S_MspInit+0x160>)
 800174e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001750:	4a3e      	ldr	r2, [pc, #248]	; (800184c <HAL_I2S_MspInit+0x160>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	6313      	str	r3, [r2, #48]	; 0x30
 8001758:	4b3c      	ldr	r3, [pc, #240]	; (800184c <HAL_I2S_MspInit+0x160>)
 800175a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
 8001768:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_I2S_MspInit+0x160>)
 800176a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176c:	4a37      	ldr	r2, [pc, #220]	; (800184c <HAL_I2S_MspInit+0x160>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6313      	str	r3, [r2, #48]	; 0x30
 8001774:	4b35      	ldr	r3, [pc, #212]	; (800184c <HAL_I2S_MspInit+0x160>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	4b31      	ldr	r3, [pc, #196]	; (800184c <HAL_I2S_MspInit+0x160>)
 8001786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001788:	4a30      	ldr	r2, [pc, #192]	; (800184c <HAL_I2S_MspInit+0x160>)
 800178a:	f043 0302 	orr.w	r3, r3, #2
 800178e:	6313      	str	r3, [r2, #48]	; 0x30
 8001790:	4b2e      	ldr	r3, [pc, #184]	; (800184c <HAL_I2S_MspInit+0x160>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> I2S2_SD
    PA3     ------> I2S2_MCK
    PD3     ------> I2S2_CK
    PB9     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = CODEC_ext_SD_Pin;
 800179c:	2304      	movs	r3, #4
 800179e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a0:	2302      	movs	r3, #2
 80017a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI2;
 80017ac:	2306      	movs	r3, #6
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_ext_SD_GPIO_Port, &GPIO_InitStruct);
 80017b0:	f107 031c 	add.w	r3, r7, #28
 80017b4:	4619      	mov	r1, r3
 80017b6:	4826      	ldr	r0, [pc, #152]	; (8001850 <HAL_I2S_MspInit+0x164>)
 80017b8:	f002 fb8a 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_SD_Pin;
 80017bc:	2308      	movs	r3, #8
 80017be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c0:	2302      	movs	r3, #2
 80017c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c8:	2300      	movs	r3, #0
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017cc:	2305      	movs	r3, #5
 80017ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_SD_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 031c 	add.w	r3, r7, #28
 80017d4:	4619      	mov	r1, r3
 80017d6:	481e      	ldr	r0, [pc, #120]	; (8001850 <HAL_I2S_MspInit+0x164>)
 80017d8:	f002 fb7a 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_MCK_Pin;
 80017dc:	2308      	movs	r3, #8
 80017de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e0:	2302      	movs	r3, #2
 80017e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e8:	2300      	movs	r3, #0
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017ec:	2305      	movs	r3, #5
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_MCK_GPIO_Port, &GPIO_InitStruct);
 80017f0:	f107 031c 	add.w	r3, r7, #28
 80017f4:	4619      	mov	r1, r3
 80017f6:	4817      	ldr	r0, [pc, #92]	; (8001854 <HAL_I2S_MspInit+0x168>)
 80017f8:	f002 fb6a 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_CK_Pin;
 80017fc:	2308      	movs	r3, #8
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800180c:	2305      	movs	r3, #5
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_CK_GPIO_Port, &GPIO_InitStruct);
 8001810:	f107 031c 	add.w	r3, r7, #28
 8001814:	4619      	mov	r1, r3
 8001816:	4810      	ldr	r0, [pc, #64]	; (8001858 <HAL_I2S_MspInit+0x16c>)
 8001818:	f002 fb5a 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CODEC_WS_Pin;
 800181c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001820:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800182a:	2300      	movs	r3, #0
 800182c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800182e:	2305      	movs	r3, #5
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(CODEC_WS_GPIO_Port, &GPIO_InitStruct);
 8001832:	f107 031c 	add.w	r3, r7, #28
 8001836:	4619      	mov	r1, r3
 8001838:	4808      	ldr	r0, [pc, #32]	; (800185c <HAL_I2S_MspInit+0x170>)
 800183a:	f002 fb49 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800183e:	bf00      	nop
 8001840:	3730      	adds	r7, #48	; 0x30
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40003800 	.word	0x40003800
 800184c:	40023800 	.word	0x40023800
 8001850:	40020800 	.word	0x40020800
 8001854:	40020000 	.word	0x40020000
 8001858:	40020c00 	.word	0x40020c00
 800185c:	40020400 	.word	0x40020400

08001860 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08e      	sub	sp, #56	; 0x38
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a56      	ldr	r2, [pc, #344]	; (80019d8 <HAL_QSPI_MspInit+0x178>)
 800187e:	4293      	cmp	r3, r2
 8001880:	f040 80a6 	bne.w	80019d0 <HAL_QSPI_MspInit+0x170>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
 8001888:	4b54      	ldr	r3, [pc, #336]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 800188a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188c:	4a53      	ldr	r2, [pc, #332]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 800188e:	f043 0302 	orr.w	r3, r3, #2
 8001892:	6393      	str	r3, [r2, #56]	; 0x38
 8001894:	4b51      	ldr	r3, [pc, #324]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 8001896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	623b      	str	r3, [r7, #32]
 800189e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80018a0:	2300      	movs	r3, #0
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018aa:	f043 0310 	orr.w	r3, r3, #16
 80018ae:	6313      	str	r3, [r2, #48]	; 0x30
 80018b0:	4b4a      	ldr	r3, [pc, #296]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b4:	f003 0310 	and.w	r3, r3, #16
 80018b8:	61fb      	str	r3, [r7, #28]
 80018ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
 80018c0:	4b46      	ldr	r3, [pc, #280]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	4a45      	ldr	r2, [pc, #276]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018c6:	f043 0320 	orr.w	r3, r3, #32
 80018ca:	6313      	str	r3, [r2, #48]	; 0x30
 80018cc:	4b43      	ldr	r3, [pc, #268]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d8:	2300      	movs	r3, #0
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	4b3f      	ldr	r3, [pc, #252]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e0:	4a3e      	ldr	r2, [pc, #248]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018e2:	f043 0302 	orr.w	r3, r3, #2
 80018e6:	6313      	str	r3, [r2, #48]	; 0x30
 80018e8:	4b3c      	ldr	r3, [pc, #240]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
 80018f8:	4b38      	ldr	r3, [pc, #224]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fc:	4a37      	ldr	r2, [pc, #220]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 80018fe:	f043 0308 	orr.w	r3, r3, #8
 8001902:	6313      	str	r3, [r2, #48]	; 0x30
 8001904:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 8001906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001908:	f003 0308 	and.w	r3, r3, #8
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4b31      	ldr	r3, [pc, #196]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 8001916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001918:	4a30      	ldr	r2, [pc, #192]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 800191a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800191e:	6313      	str	r3, [r2, #48]	; 0x30
 8001920:	4b2e      	ldr	r3, [pc, #184]	; (80019dc <HAL_QSPI_MspInit+0x17c>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	68fb      	ldr	r3, [r7, #12]
    PF9     ------> QUADSPI_BK1_IO1
    PB2     ------> QUADSPI_CLK
    PD13     ------> QUADSPI_BK1_IO3
    PG6     ------> QUADSPI_BK1_NCS
    */
    GPIO_InitStruct.Pin = QSPI_BK1_IO2_Pin;
 800192c:	2304      	movs	r3, #4
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800193c:	2309      	movs	r3, #9
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO2_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001944:	4619      	mov	r1, r3
 8001946:	4826      	ldr	r0, [pc, #152]	; (80019e0 <HAL_QSPI_MspInit+0x180>)
 8001948:	f002 fac2 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO0_Pin|QSPI_BK1_IO1_Pin;
 800194c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800195e:	230a      	movs	r3, #10
 8001960:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001962:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001966:	4619      	mov	r1, r3
 8001968:	481e      	ldr	r0, [pc, #120]	; (80019e4 <HAL_QSPI_MspInit+0x184>)
 800196a:	f002 fab1 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_CLK_Pin;
 800196e:	2304      	movs	r3, #4
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 800197e:	2309      	movs	r3, #9
 8001980:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_CLK_GPIO_Port, &GPIO_InitStruct);
 8001982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001986:	4619      	mov	r1, r3
 8001988:	4817      	ldr	r0, [pc, #92]	; (80019e8 <HAL_QSPI_MspInit+0x188>)
 800198a:	f002 faa1 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_IO3_Pin;
 800198e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001994:	2302      	movs	r3, #2
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_QSPI;
 80019a0:	2309      	movs	r3, #9
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_IO3_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019a8:	4619      	mov	r1, r3
 80019aa:	4810      	ldr	r0, [pc, #64]	; (80019ec <HAL_QSPI_MspInit+0x18c>)
 80019ac:	f002 fa90 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_BK1_NCS_Pin;
 80019b0:	2340      	movs	r3, #64	; 0x40
 80019b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019c0:	230a      	movs	r3, #10
 80019c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(QSPI_BK1_NCS_GPIO_Port, &GPIO_InitStruct);
 80019c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019c8:	4619      	mov	r1, r3
 80019ca:	4809      	ldr	r0, [pc, #36]	; (80019f0 <HAL_QSPI_MspInit+0x190>)
 80019cc:	f002 fa80 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 80019d0:	bf00      	nop
 80019d2:	3738      	adds	r7, #56	; 0x38
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	a0001000 	.word	0xa0001000
 80019dc:	40023800 	.word	0x40023800
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40021400 	.word	0x40021400
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40020c00 	.word	0x40020c00
 80019f0:	40021800 	.word	0x40021800

080019f4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b08a      	sub	sp, #40	; 0x28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	f107 0314 	add.w	r3, r7, #20
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
 8001a04:	605a      	str	r2, [r3, #4]
 8001a06:	609a      	str	r2, [r3, #8]
 8001a08:	60da      	str	r2, [r3, #12]
 8001a0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a2c      	ldr	r2, [pc, #176]	; (8001ac4 <HAL_SD_MspInit+0xd0>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d152      	bne.n	8001abc <HAL_SD_MspInit+0xc8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	613b      	str	r3, [r7, #16]
 8001a1a:	4b2b      	ldr	r3, [pc, #172]	; (8001ac8 <HAL_SD_MspInit+0xd4>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a2a      	ldr	r2, [pc, #168]	; (8001ac8 <HAL_SD_MspInit+0xd4>)
 8001a20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <HAL_SD_MspInit+0xd4>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a2e:	613b      	str	r3, [r7, #16]
 8001a30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	4b24      	ldr	r3, [pc, #144]	; (8001ac8 <HAL_SD_MspInit+0xd4>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	4a23      	ldr	r2, [pc, #140]	; (8001ac8 <HAL_SD_MspInit+0xd4>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6313      	str	r3, [r2, #48]	; 0x30
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_SD_MspInit+0xd4>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b1d      	ldr	r3, [pc, #116]	; (8001ac8 <HAL_SD_MspInit+0xd4>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a1c      	ldr	r2, [pc, #112]	; (8001ac8 <HAL_SD_MspInit+0xd4>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b1a      	ldr	r3, [pc, #104]	; (8001ac8 <HAL_SD_MspInit+0xd4>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0304 	and.w	r3, r3, #4
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
    PC9     ------> SDIO_D1
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    */
    GPIO_InitStruct.Pin = SD_CMD_Pin;
 8001a6a:	2340      	movs	r3, #64	; 0x40
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6e:	2302      	movs	r3, #2
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a76:	2303      	movs	r3, #3
 8001a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a7a:	230c      	movs	r3, #12
 8001a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SD_CMD_GPIO_Port, &GPIO_InitStruct);
 8001a7e:	f107 0314 	add.w	r3, r7, #20
 8001a82:	4619      	mov	r1, r3
 8001a84:	4811      	ldr	r0, [pc, #68]	; (8001acc <HAL_SD_MspInit+0xd8>)
 8001a86:	f002 fa23 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SD_D0_Pin|SD_D1_Pin|SD_D2_Pin|SD_D3_Pin
 8001a8a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a8e:	617b      	str	r3, [r7, #20]
                          |SD_CLK_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a90:	2302      	movs	r3, #2
 8001a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001a9c:	230c      	movs	r3, #12
 8001a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <HAL_SD_MspInit+0xdc>)
 8001aa8:	f002 fa12 	bl	8003ed0 <HAL_GPIO_Init>

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 10, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	210a      	movs	r1, #10
 8001ab0:	2031      	movs	r0, #49	; 0x31
 8001ab2:	f001 fec5 	bl	8003840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001ab6:	2031      	movs	r0, #49	; 0x31
 8001ab8:	f001 fede 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40012c00 	.word	0x40012c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020000 	.word	0x40020000
 8001ad0:	40020800 	.word	0x40020800

08001ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08c      	sub	sp, #48	; 0x30
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART10)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a33      	ldr	r2, [pc, #204]	; (8001bc0 <HAL_UART_MspInit+0xec>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d12d      	bne.n	8001b52 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART10_MspInit 0 */

  /* USER CODE END UART10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART10_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	61bb      	str	r3, [r7, #24]
 8001afa:	4b32      	ldr	r3, [pc, #200]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	4a31      	ldr	r2, [pc, #196]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b04:	6453      	str	r3, [r2, #68]	; 0x44
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b0e:	61bb      	str	r3, [r7, #24]
 8001b10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	617b      	str	r3, [r7, #20]
 8001b16:	4b2b      	ldr	r3, [pc, #172]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
    /**UART10 GPIO Configuration
    PG11     ------> UART10_RX
    PG12     ------> UART10_TX
    */
    GPIO_InitStruct.Pin = WIFI_SPI_CSN_Pin|WIFI_DRDY_Pin;
 8001b2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b34:	2302      	movs	r3, #2
 8001b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_UART10;
 8001b40:	230b      	movs	r3, #11
 8001b42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b44:	f107 031c 	add.w	r3, r7, #28
 8001b48:	4619      	mov	r1, r3
 8001b4a:	481f      	ldr	r0, [pc, #124]	; (8001bc8 <HAL_UART_MspInit+0xf4>)
 8001b4c:	f002 f9c0 	bl	8003ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8001b50:	e031      	b.n	8001bb6 <HAL_UART_MspInit+0xe2>
  else if(huart->Instance==USART6)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_UART_MspInit+0xf8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d12c      	bne.n	8001bb6 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	4b18      	ldr	r3, [pc, #96]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	4a17      	ldr	r2, [pc, #92]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b66:	f043 0320 	orr.w	r3, r3, #32
 8001b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6c:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	f003 0320 	and.w	r3, r3, #32
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a10      	ldr	r2, [pc, #64]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <HAL_UART_MspInit+0xf0>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = VCP_RX_Pin|VCP_TX_Pin;
 8001b94:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001ba6:	2308      	movs	r3, #8
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_UART_MspInit+0xf4>)
 8001bb2:	f002 f98d 	bl	8003ed0 <HAL_GPIO_Init>
}
 8001bb6:	bf00      	nop
 8001bb8:	3730      	adds	r7, #48	; 0x30
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40011c00 	.word	0x40011c00
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40021800 	.word	0x40021800
 8001bcc:	40011400 	.word	0x40011400

08001bd0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001be4:	4b2c      	ldr	r3, [pc, #176]	; (8001c98 <HAL_FSMC_MspInit+0xc8>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d151      	bne.n	8001c90 <HAL_FSMC_MspInit+0xc0>
    return;
  }
  FSMC_Initialized = 1;
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_FSMC_MspInit+0xc8>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	603b      	str	r3, [r7, #0]
 8001bf6:	4b29      	ldr	r3, [pc, #164]	; (8001c9c <HAL_FSMC_MspInit+0xcc>)
 8001bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfa:	4a28      	ldr	r2, [pc, #160]	; (8001c9c <HAL_FSMC_MspInit+0xcc>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6393      	str	r3, [r2, #56]	; 0x38
 8001c02:	4b26      	ldr	r3, [pc, #152]	; (8001c9c <HAL_FSMC_MspInit+0xcc>)
 8001c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
  PD7   ------> FSMC_NE1
  PG10   ------> FSMC_NE3
  PE0   ------> FSMC_NBL0
  PE1   ------> FSMC_NBL1
  */
  GPIO_InitStruct.Pin = PSRAM_A0_Pin|PSRAM_A1_Pin|PSRAM_A2_Pin|PSRAM_A3_Pin
 8001c0e:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001c12:	607b      	str	r3, [r7, #4]
                          |PSRAM_A4_Pin|PSRAM_A5_Pin|PSRAM_A6_Pin|PSRAM_A7_Pin
                          |PSRAM_A8_Pin|PSRAM_A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c14:	2302      	movs	r3, #2
 8001c16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c20:	230c      	movs	r3, #12
 8001c22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	481d      	ldr	r0, [pc, #116]	; (8001ca0 <HAL_FSMC_MspInit+0xd0>)
 8001c2a:	f002 f951 	bl	8003ed0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = PSRAM_A10_Pin|PSRAM_A11_Pin|PSRAM_A12_Pin|PSRAM_A13_Pin
 8001c2e:	f240 433f 	movw	r3, #1087	; 0x43f
 8001c32:	607b      	str	r3, [r7, #4]
                          |PSRAM_A14_Pin|PSRAM_A15_Pin|LCD_NE3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c40:	230c      	movs	r3, #12
 8001c42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4816      	ldr	r0, [pc, #88]	; (8001ca4 <HAL_FSMC_MspInit+0xd4>)
 8001c4a:	f002 f941 	bl	8003ed0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D4_Pin|LCD_PSRAM_D5_Pin|LCD_PSRAM_D6_Pin|LCD_PSRAM_D7_Pin
 8001c4e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001c52:	607b      	str	r3, [r7, #4]
                          |LCD_PSRAM_D8_Pin|LCD_PSRAM_D9_Pin|LCD_PSRAM_D10_Pin|LCD_PSRAM_D11_Pin
                          |LCD_PSRAM_D12_Pin|PSRAM_NBL0_Pin|PSRAM_NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c60:	230c      	movs	r3, #12
 8001c62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <HAL_FSMC_MspInit+0xd8>)
 8001c6a:	f002 f931 	bl	8003ed0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = LCD_PSRAM_D13_Pin|LCD_PSRAM_D14_Pin|LCd_PSRAM_D15_Pin|PSRAM_A16_Pin
 8001c6e:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 8001c72:	607b      	str	r3, [r7, #4]
                          |PSRAM_A17_Pin|LCD_PSRAM_D0_Pin|LCD_PSRAM_D1_Pin|LCD_PSRAM_D2_Pin
                          |LCD_PSRAM_D3_Pin|LCD_PSRAM_NOE_Pin|LCD_PSRAM_NWE_Pin|PSRAM_NE1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c74:	2302      	movs	r3, #2
 8001c76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001c80:	230c      	movs	r3, #12
 8001c82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4808      	ldr	r0, [pc, #32]	; (8001cac <HAL_FSMC_MspInit+0xdc>)
 8001c8a:	f002 f921 	bl	8003ed0 <HAL_GPIO_Init>
 8001c8e:	e000      	b.n	8001c92 <HAL_FSMC_MspInit+0xc2>
    return;
 8001c90:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001c92:	3718      	adds	r7, #24
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000508 	.word	0x20000508
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40021400 	.word	0x40021400
 8001ca4:	40021800 	.word	0x40021800
 8001ca8:	40021000 	.word	0x40021000
 8001cac:	40020c00 	.word	0x40020c00

08001cb0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001cb8:	f7ff ff8a 	bl	8001bd0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001cbc:	bf00      	nop
 8001cbe:	3708      	adds	r7, #8
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08c      	sub	sp, #48	; 0x30
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	2036      	movs	r0, #54	; 0x36
 8001cda:	f001 fdb1 	bl	8003840 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cde:	2036      	movs	r0, #54	; 0x36
 8001ce0:	f001 fdca 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	4b1e      	ldr	r3, [pc, #120]	; (8001d64 <HAL_InitTick+0xa0>)
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	4a1d      	ldr	r2, [pc, #116]	; (8001d64 <HAL_InitTick+0xa0>)
 8001cee:	f043 0310 	orr.w	r3, r3, #16
 8001cf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_InitTick+0xa0>)
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f003 0310 	and.w	r3, r3, #16
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d00:	f107 0210 	add.w	r2, r7, #16
 8001d04:	f107 0314 	add.w	r3, r7, #20
 8001d08:	4611      	mov	r1, r2
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f005 f826 	bl	8006d5c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001d10:	f004 fffc 	bl	8006d0c <HAL_RCC_GetPCLK1Freq>
 8001d14:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d18:	4a13      	ldr	r2, [pc, #76]	; (8001d68 <HAL_InitTick+0xa4>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0c9b      	lsrs	r3, r3, #18
 8001d20:	3b01      	subs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d24:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d26:	4a12      	ldr	r2, [pc, #72]	; (8001d70 <HAL_InitTick+0xac>)
 8001d28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8001d2a:	4b10      	ldr	r3, [pc, #64]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d32:	4a0e      	ldr	r2, [pc, #56]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d3e:	4b0b      	ldr	r3, [pc, #44]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d44:	4809      	ldr	r0, [pc, #36]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d46:	f006 fd1b 	bl	8008780 <HAL_TIM_Base_Init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d104      	bne.n	8001d5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d50:	4806      	ldr	r0, [pc, #24]	; (8001d6c <HAL_InitTick+0xa8>)
 8001d52:	f006 fd4a 	bl	80087ea <HAL_TIM_Base_Start_IT>
 8001d56:	4603      	mov	r3, r0
 8001d58:	e000      	b.n	8001d5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3730      	adds	r7, #48	; 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40023800 	.word	0x40023800
 8001d68:	431bde83 	.word	0x431bde83
 8001d6c:	2000050c 	.word	0x2000050c
 8001d70:	40001000 	.word	0x40001000

08001d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <HardFault_Handler+0x4>

08001d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d8c:	e7fe      	b.n	8001d8c <MemManage_Handler+0x4>

08001d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d92:	e7fe      	b.n	8001d92 <BusFault_Handler+0x4>

08001d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d94:	b480      	push	{r7}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d98:	e7fe      	b.n	8001d98 <UsageFault_Handler+0x4>

08001d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001dac:	bf00      	nop
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
	...

08001db8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001dbc:	4802      	ldr	r0, [pc, #8]	; (8001dc8 <SDIO_IRQHandler+0x10>)
 8001dbe:	f005 febf 	bl	8007b40 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000340 	.word	0x20000340

08001dcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <TIM6_DAC_IRQHandler+0x20>)
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d002      	beq.n	8001de0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001dda:	4804      	ldr	r0, [pc, #16]	; (8001dec <TIM6_DAC_IRQHandler+0x20>)
 8001ddc:	f001 fd7c 	bl	80038d8 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001de0:	4803      	ldr	r0, [pc, #12]	; (8001df0 <TIM6_DAC_IRQHandler+0x24>)
 8001de2:	f006 fd26 	bl	8008832 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000150 	.word	0x20000150
 8001df0:	2000050c 	.word	0x2000050c

08001df4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001df8:	4802      	ldr	r0, [pc, #8]	; (8001e04 <OTG_FS_IRQHandler+0x10>)
 8001dfa:	f002 fcc1 	bl	8004780 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001dfe:	bf00      	nop
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	20005628 	.word	0x20005628

08001e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e10:	4a14      	ldr	r2, [pc, #80]	; (8001e64 <_sbrk+0x5c>)
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <_sbrk+0x60>)
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e1c:	4b13      	ldr	r3, [pc, #76]	; (8001e6c <_sbrk+0x64>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d102      	bne.n	8001e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <_sbrk+0x64>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <_sbrk+0x68>)
 8001e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <_sbrk+0x64>)
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4413      	add	r3, r2
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d207      	bcs.n	8001e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e38:	f011 fa20 	bl	801327c <__errno>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	220c      	movs	r2, #12
 8001e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295
 8001e46:	e009      	b.n	8001e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e48:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <_sbrk+0x64>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e4e:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <_sbrk+0x64>)
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <_sbrk+0x64>)
 8001e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	20050000 	.word	0x20050000
 8001e68:	00000800 	.word	0x00000800
 8001e6c:	2000054c 	.word	0x2000054c
 8001e70:	20005900 	.word	0x20005900

08001e74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <SystemInit+0x28>)
 8001e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e7e:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <SystemInit+0x28>)
 8001e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e88:	4b04      	ldr	r3, [pc, #16]	; (8001e9c <SystemInit+0x28>)
 8001e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e8e:	609a      	str	r2, [r3, #8]
#endif
}
 8001e90:	bf00      	nop
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8001ea4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ea6:	e003      	b.n	8001eb0 <LoopCopyDataInit>

08001ea8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eaa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001eac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001eae:	3104      	adds	r1, #4

08001eb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001eb0:	480b      	ldr	r0, [pc, #44]	; (8001ee0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001eb2:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001eb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001eb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001eb8:	d3f6      	bcc.n	8001ea8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eba:	4a0b      	ldr	r2, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ebc:	e002      	b.n	8001ec4 <LoopFillZerobss>

08001ebe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8001ebe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ec0:	f842 3b04 	str.w	r3, [r2], #4

08001ec4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ec6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ec8:	d3f9      	bcc.n	8001ebe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001eca:	f7ff ffd3 	bl	8001e74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ece:	f011 f9db 	bl	8013288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ed2:	f7fe fb27 	bl	8000524 <main>
  bx  lr    
 8001ed6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001ed8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8001edc:	080162e0 	.word	0x080162e0
  ldr  r0, =_sdata
 8001ee0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001ee4:	200000ec 	.word	0x200000ec
  ldr  r2, =_sbss
 8001ee8:	200000ec 	.word	0x200000ec
  ldr  r3, = _ebss
 8001eec:	200058fc 	.word	0x200058fc

08001ef0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ef0:	e7fe      	b.n	8001ef0 <ADC_IRQHandler>

08001ef2 <ST7789H2_Init>:
  * @brief  Initialize the st7789h2 LCD Component.
  * @param  None
  * @retval None
  */
void ST7789H2_Init(void)
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b084      	sub	sp, #16
 8001ef6:	af00      	add	r7, sp, #0
  uint8_t   parameter[14];
  
  /* Initialize st7789h2 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001ef8:	f000 fd78 	bl	80029ec <LCD_IO_Init>
  /* Sleep In Command */ 
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2010      	movs	r0, #16
 8001f02:	f000 f9e4 	bl	80022ce <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 8001f06:	200a      	movs	r0, #10
 8001f08:	f000 fd97 	bl	8002a3a <LCD_IO_Delay>
  
  /* SW Reset Command */
  ST7789H2_WriteReg(0x01, (uint8_t*)NULL, 0); 
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2001      	movs	r0, #1
 8001f12:	f000 f9dc 	bl	80022ce <ST7789H2_WriteReg>
  /* Wait for 200ms */
  LCD_IO_Delay(200);
 8001f16:	20c8      	movs	r0, #200	; 0xc8
 8001f18:	f000 fd8f 	bl	8002a3a <LCD_IO_Delay>
  
  /* Sleep Out Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0); 
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2100      	movs	r1, #0
 8001f20:	2011      	movs	r0, #17
 8001f22:	f000 f9d4 	bl	80022ce <ST7789H2_WriteReg>
  /* Wait for 120ms */
  LCD_IO_Delay(120); 
 8001f26:	2078      	movs	r0, #120	; 0x78
 8001f28:	f000 fd87 	bl	8002a3a <LCD_IO_Delay>

  /* Normal display for Driver Down side */
  parameter[0] = 0x00;     
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 8001f30:	463b      	mov	r3, r7
 8001f32:	2201      	movs	r2, #1
 8001f34:	4619      	mov	r1, r3
 8001f36:	2036      	movs	r0, #54	; 0x36
 8001f38:	f000 f9c9 	bl	80022ce <ST7789H2_WriteReg>
 
  /* Color mode 16bits/pixel */
  parameter[0] = 0x05;     
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_COLOR_MODE, parameter, 1);
 8001f40:	463b      	mov	r3, r7
 8001f42:	2201      	movs	r2, #1
 8001f44:	4619      	mov	r1, r3
 8001f46:	203a      	movs	r0, #58	; 0x3a
 8001f48:	f000 f9c1 	bl	80022ce <ST7789H2_WriteReg>
  
  /* Display inversion On */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_INVERSION, (uint8_t*)NULL, 0);     
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2021      	movs	r0, #33	; 0x21
 8001f52:	f000 f9bc 	bl	80022ce <ST7789H2_WriteReg>
  
  /* Set Column address CASET */  
  parameter[0] = 0x00;
 8001f56:	2300      	movs	r3, #0
 8001f58:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001f62:	23ef      	movs	r3, #239	; 0xef
 8001f64:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 8001f66:	463b      	mov	r3, r7
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	202a      	movs	r0, #42	; 0x2a
 8001f6e:	f000 f9ae 	bl	80022ce <ST7789H2_WriteReg>
  /* Set Row address RASET */  
  parameter[0] = 0x00;
 8001f72:	2300      	movs	r3, #0
 8001f74:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x00;
 8001f76:	2300      	movs	r3, #0
 8001f78:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0xEF;
 8001f7e:	23ef      	movs	r3, #239	; 0xef
 8001f80:	70fb      	strb	r3, [r7, #3]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 8001f82:	463b      	mov	r3, r7
 8001f84:	2204      	movs	r2, #4
 8001f86:	4619      	mov	r1, r3
 8001f88:	202b      	movs	r0, #43	; 0x2b
 8001f8a:	f000 f9a0 	bl	80022ce <ST7789H2_WriteReg>

  /*--------------- ST7789H2 Frame rate setting -------------------------------*/
  /* PORCH control setting */      
  parameter[0] = 0x0C;
 8001f8e:	230c      	movs	r3, #12
 8001f90:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x0C;
 8001f92:	230c      	movs	r3, #12
 8001f94:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x00;
 8001f96:	2300      	movs	r3, #0
 8001f98:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x33;
 8001f9a:	2333      	movs	r3, #51	; 0x33
 8001f9c:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x33; 
 8001f9e:	2333      	movs	r3, #51	; 0x33
 8001fa0:	713b      	strb	r3, [r7, #4]
  ST7789H2_WriteReg(ST7789H2_PORCH_CTRL, parameter, 5);
 8001fa2:	463b      	mov	r3, r7
 8001fa4:	2205      	movs	r2, #5
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	20b2      	movs	r0, #178	; 0xb2
 8001faa:	f000 f990 	bl	80022ce <ST7789H2_WriteReg>
  
  /* GATE control setting */
  parameter[0] = 0x35; 
 8001fae:	2335      	movs	r3, #53	; 0x35
 8001fb0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_GATE_CTRL, parameter, 1);
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	20b7      	movs	r0, #183	; 0xb7
 8001fba:	f000 f988 	bl	80022ce <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Power setting ------------------------------------*/
  /* VCOM setting */ 
  parameter[0] = 0x1F; 
 8001fbe:	231f      	movs	r3, #31
 8001fc0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VCOM_SET, parameter, 1); 
 8001fc2:	463b      	mov	r3, r7
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	20bb      	movs	r0, #187	; 0xbb
 8001fca:	f000 f980 	bl	80022ce <ST7789H2_WriteReg>
  
  /* LCM Control setting */ 
  parameter[0] = 0x2C; 
 8001fce:	232c      	movs	r3, #44	; 0x2c
 8001fd0:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_LCM_CTRL, parameter, 1);
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	20c0      	movs	r0, #192	; 0xc0
 8001fda:	f000 f978 	bl	80022ce <ST7789H2_WriteReg>
  
  /* VDV and VRH Command Enable */ 
  parameter[0] = 0x01;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xC3;
 8001fe2:	23c3      	movs	r3, #195	; 0xc3
 8001fe4:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_VDV_VRH_EN, parameter, 2);
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2202      	movs	r2, #2
 8001fea:	4619      	mov	r1, r3
 8001fec:	20c2      	movs	r0, #194	; 0xc2
 8001fee:	f000 f96e 	bl	80022ce <ST7789H2_WriteReg>
  
  /* VDV Set */ 
  parameter[0] = 0x20; 
 8001ff2:	2320      	movs	r3, #32
 8001ff4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_VDV_SET, parameter, 1); 
 8001ff6:	463b      	mov	r3, r7
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	20c4      	movs	r0, #196	; 0xc4
 8001ffe:	f000 f966 	bl	80022ce <ST7789H2_WriteReg>
  
  /* Frame Rate Control in normal mode */ 
  parameter[0] = 0x0F; 
 8002002:	230f      	movs	r3, #15
 8002004:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_FR_CTRL, parameter, 1); 
 8002006:	463b      	mov	r3, r7
 8002008:	2201      	movs	r2, #1
 800200a:	4619      	mov	r1, r3
 800200c:	20c6      	movs	r0, #198	; 0xc6
 800200e:	f000 f95e 	bl	80022ce <ST7789H2_WriteReg>
  
  /* Power Control */     
  parameter[0] = 0xA4;
 8002012:	23a4      	movs	r3, #164	; 0xa4
 8002014:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0xA1;
 8002016:	23a1      	movs	r3, #161	; 0xa1
 8002018:	707b      	strb	r3, [r7, #1]
  ST7789H2_WriteReg(ST7789H2_POWER_CTRL, parameter, 1); 
 800201a:	463b      	mov	r3, r7
 800201c:	2201      	movs	r2, #1
 800201e:	4619      	mov	r1, r3
 8002020:	20d0      	movs	r0, #208	; 0xd0
 8002022:	f000 f954 	bl	80022ce <ST7789H2_WriteReg>
  
  /*--------------- ST7789H2 Gamma setting ------------------------------------*/
  /* Positive Voltage Gamma Control */ 
  parameter[0] = 0xD0;
 8002026:	23d0      	movs	r3, #208	; 0xd0
 8002028:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800202a:	2308      	movs	r3, #8
 800202c:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x11;
 800202e:	2311      	movs	r3, #17
 8002030:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002032:	2308      	movs	r3, #8
 8002034:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x0C;
 8002036:	230c      	movs	r3, #12
 8002038:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x15;
 800203a:	2315      	movs	r3, #21
 800203c:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 800203e:	2339      	movs	r3, #57	; 0x39
 8002040:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x33;
 8002042:	2333      	movs	r3, #51	; 0x33
 8002044:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x50;
 8002046:	2350      	movs	r3, #80	; 0x50
 8002048:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x36;
 800204a:	2336      	movs	r3, #54	; 0x36
 800204c:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x13;
 800204e:	2313      	movs	r3, #19
 8002050:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002052:	2314      	movs	r3, #20
 8002054:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x29;
 8002056:	2329      	movs	r3, #41	; 0x29
 8002058:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x2D;
 800205a:	232d      	movs	r3, #45	; 0x2d
 800205c:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_PV_GAMMA_CTRL, parameter, 14); 
 800205e:	463b      	mov	r3, r7
 8002060:	220e      	movs	r2, #14
 8002062:	4619      	mov	r1, r3
 8002064:	20e0      	movs	r0, #224	; 0xe0
 8002066:	f000 f932 	bl	80022ce <ST7789H2_WriteReg>
  
  /* Negative Voltage Gamma Control */     
  parameter[0] = 0xD0;
 800206a:	23d0      	movs	r3, #208	; 0xd0
 800206c:	703b      	strb	r3, [r7, #0]
  parameter[1] = 0x08;
 800206e:	2308      	movs	r3, #8
 8002070:	707b      	strb	r3, [r7, #1]
  parameter[2] = 0x10;
 8002072:	2310      	movs	r3, #16
 8002074:	70bb      	strb	r3, [r7, #2]
  parameter[3] = 0x08;
 8002076:	2308      	movs	r3, #8
 8002078:	70fb      	strb	r3, [r7, #3]
  parameter[4] = 0x06;
 800207a:	2306      	movs	r3, #6
 800207c:	713b      	strb	r3, [r7, #4]
  parameter[5] = 0x06;
 800207e:	2306      	movs	r3, #6
 8002080:	717b      	strb	r3, [r7, #5]
  parameter[6] = 0x39;
 8002082:	2339      	movs	r3, #57	; 0x39
 8002084:	71bb      	strb	r3, [r7, #6]
  parameter[7] = 0x44;
 8002086:	2344      	movs	r3, #68	; 0x44
 8002088:	71fb      	strb	r3, [r7, #7]
  parameter[8] = 0x51;
 800208a:	2351      	movs	r3, #81	; 0x51
 800208c:	723b      	strb	r3, [r7, #8]
  parameter[9] = 0x0B;
 800208e:	230b      	movs	r3, #11
 8002090:	727b      	strb	r3, [r7, #9]
  parameter[10] = 0x16;
 8002092:	2316      	movs	r3, #22
 8002094:	72bb      	strb	r3, [r7, #10]
  parameter[11] = 0x14;
 8002096:	2314      	movs	r3, #20
 8002098:	72fb      	strb	r3, [r7, #11]
  parameter[12] = 0x2F;
 800209a:	232f      	movs	r3, #47	; 0x2f
 800209c:	733b      	strb	r3, [r7, #12]
  parameter[13] = 0x31;
 800209e:	2331      	movs	r3, #49	; 0x31
 80020a0:	737b      	strb	r3, [r7, #13]
  ST7789H2_WriteReg(ST7789H2_NV_GAMMA_CTRL, parameter, 14); 
 80020a2:	463b      	mov	r3, r7
 80020a4:	220e      	movs	r2, #14
 80020a6:	4619      	mov	r1, r3
 80020a8:	20e1      	movs	r0, #225	; 0xe1
 80020aa:	f000 f910 	bl	80022ce <ST7789H2_WriteReg>
  
  /* Display ON command */
  ST7789H2_DisplayOn();  
 80020ae:	f000 f847 	bl	8002140 <ST7789H2_DisplayOn>
  
  /* Tearing Effect Line On: Option (00h:VSYNC Interface OFF, 01h:VSYNC Interface ON) */
  parameter[0] = 0x00;     
 80020b2:	2300      	movs	r3, #0
 80020b4:	703b      	strb	r3, [r7, #0]
  ST7789H2_WriteReg(ST7789H2_TEARING_EFFECT, parameter, 1);
 80020b6:	463b      	mov	r3, r7
 80020b8:	2201      	movs	r2, #1
 80020ba:	4619      	mov	r1, r3
 80020bc:	2035      	movs	r0, #53	; 0x35
 80020be:	f000 f906 	bl	80022ce <ST7789H2_WriteReg>

}
 80020c2:	bf00      	nop
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}

080020ca <ST7789H2_SetOrientation>:
  * @param  orientation: ST7789H2_ORIENTATION_PORTRAIT, ST7789H2_ORIENTATION_LANDSCAPE
  *                      or ST7789H2_ORIENTATION_LANDSCAPE_ROT180  
  * @retval None
  */
void ST7789H2_SetOrientation(uint32_t orientation)
{
 80020ca:	b580      	push	{r7, lr}
 80020cc:	b084      	sub	sp, #16
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  uint8_t   parameter[6];

  if(orientation == ST7789H2_ORIENTATION_LANDSCAPE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d102      	bne.n	80020de <ST7789H2_SetOrientation+0x14>
  {
    parameter[0] = 0x00;     
 80020d8:	2300      	movs	r3, #0
 80020da:	723b      	strb	r3, [r7, #8]
 80020dc:	e025      	b.n	800212a <ST7789H2_SetOrientation+0x60>
  }
  else if(orientation == ST7789H2_ORIENTATION_LANDSCAPE_ROT180)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d120      	bne.n	8002126 <ST7789H2_SetOrientation+0x5c>
  {
    /* Vertical Scrolling Definition */
    /* TFA describes the Top Fixed Area */
    parameter[0] = 0x00;
 80020e4:	2300      	movs	r3, #0
 80020e6:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x00;
 80020e8:	2300      	movs	r3, #0
 80020ea:	727b      	strb	r3, [r7, #9]
    /* VSA describes the height of the Vertical Scrolling Area */
    parameter[2] = 0x01;
 80020ec:	2301      	movs	r3, #1
 80020ee:	72bb      	strb	r3, [r7, #10]
    parameter[3] = 0xF0;
 80020f0:	23f0      	movs	r3, #240	; 0xf0
 80020f2:	72fb      	strb	r3, [r7, #11]
    /* BFA describes the Bottom Fixed Area */
    parameter[4] = 0x00;
 80020f4:	2300      	movs	r3, #0
 80020f6:	733b      	strb	r3, [r7, #12]
    parameter[5] = 0x00; 
 80020f8:	2300      	movs	r3, #0
 80020fa:	737b      	strb	r3, [r7, #13]
    ST7789H2_WriteReg(ST7789H2_VSCRDEF, parameter, 6);
 80020fc:	f107 0308 	add.w	r3, r7, #8
 8002100:	2206      	movs	r2, #6
 8002102:	4619      	mov	r1, r3
 8002104:	2033      	movs	r0, #51	; 0x33
 8002106:	f000 f8e2 	bl	80022ce <ST7789H2_WriteReg>

    /* Vertical Scroll Start Address of RAM */
    /* GRAM row nbr (320) - Display row nbr (240) = 80 = 0x50 */
    parameter[0] = 0x00;
 800210a:	2300      	movs	r3, #0
 800210c:	723b      	strb	r3, [r7, #8]
    parameter[1] = 0x50;
 800210e:	2350      	movs	r3, #80	; 0x50
 8002110:	727b      	strb	r3, [r7, #9]
    ST7789H2_WriteReg(ST7789H2_VSCSAD, parameter, 2);
 8002112:	f107 0308 	add.w	r3, r7, #8
 8002116:	2202      	movs	r2, #2
 8002118:	4619      	mov	r1, r3
 800211a:	2037      	movs	r0, #55	; 0x37
 800211c:	f000 f8d7 	bl	80022ce <ST7789H2_WriteReg>
    
    parameter[0] = 0xC0; 
 8002120:	23c0      	movs	r3, #192	; 0xc0
 8002122:	723b      	strb	r3, [r7, #8]
 8002124:	e001      	b.n	800212a <ST7789H2_SetOrientation+0x60>
  }
  else
  {
    parameter[0] = 0x60;     
 8002126:	2360      	movs	r3, #96	; 0x60
 8002128:	723b      	strb	r3, [r7, #8]
  }
  ST7789H2_WriteReg(ST7789H2_NORMAL_DISPLAY, parameter, 1);
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	2201      	movs	r2, #1
 8002130:	4619      	mov	r1, r3
 8002132:	2036      	movs	r0, #54	; 0x36
 8002134:	f000 f8cb 	bl	80022ce <ST7789H2_WriteReg>
}
 8002138:	bf00      	nop
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <ST7789H2_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOn(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* Display ON command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_ON, (uint8_t*)NULL, 0);
 8002144:	2200      	movs	r2, #0
 8002146:	2100      	movs	r1, #0
 8002148:	2029      	movs	r0, #41	; 0x29
 800214a:	f000 f8c0 	bl	80022ce <ST7789H2_WriteReg>

  /* Sleep Out command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_OUT, (uint8_t*)NULL, 0);
 800214e:	2200      	movs	r2, #0
 8002150:	2100      	movs	r1, #0
 8002152:	2011      	movs	r0, #17
 8002154:	f000 f8bb 	bl	80022ce <ST7789H2_WriteReg>
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <ST7789H2_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ST7789H2_DisplayOff(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
  uint8_t   parameter[1];
  parameter[0] = 0xFE;
 8002162:	23fe      	movs	r3, #254	; 0xfe
 8002164:	713b      	strb	r3, [r7, #4]
  /* Display OFF command */
  ST7789H2_WriteReg(ST7789H2_DISPLAY_OFF, parameter, 1);  
 8002166:	1d3b      	adds	r3, r7, #4
 8002168:	2201      	movs	r2, #1
 800216a:	4619      	mov	r1, r3
 800216c:	20bd      	movs	r0, #189	; 0xbd
 800216e:	f000 f8ae 	bl	80022ce <ST7789H2_WriteReg>
  /* Sleep In Command */
  ST7789H2_WriteReg(ST7789H2_SLEEP_IN, (uint8_t*)NULL, 0); 
 8002172:	2200      	movs	r2, #0
 8002174:	2100      	movs	r1, #0
 8002176:	2010      	movs	r0, #16
 8002178:	f000 f8a9 	bl	80022ce <ST7789H2_WriteReg>
  /* Wait for 10ms */
  LCD_IO_Delay(10);  
 800217c:	200a      	movs	r0, #10
 800217e:	f000 fc5c 	bl	8002a3a <LCD_IO_Delay>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <ST7789H2_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ST7789H2_GetLcdPixelWidth(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_WIDTH;
 800218e:	23f0      	movs	r3, #240	; 0xf0
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <ST7789H2_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ST7789H2_GetLcdPixelHeight(void)
{
 800219a:	b480      	push	{r7}
 800219c:	af00      	add	r7, sp, #0
 return (uint16_t)ST7789H2_LCD_PIXEL_HEIGHT;
 800219e:	23f0      	movs	r3, #240	; 0xf0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <ST7789H2_ReadID>:
  * @brief  Get the st7789h2 ID.
  * @param  None
  * @retval The st7789h2 ID 
  */
uint16_t ST7789H2_ReadID(void)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80021ae:	f000 fc1d 	bl	80029ec <LCD_IO_Init>
  
  return ST7789H2_ReadReg(ST7789H2_LCD_ID);
 80021b2:	2004      	movs	r0, #4
 80021b4:	f000 f8ae 	bl	8002314 <ST7789H2_ReadReg>
 80021b8:	4603      	mov	r3, r0
 80021ba:	b29b      	uxth	r3, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}

080021c0 <ST7789H2_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ST7789H2_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	80fb      	strh	r3, [r7, #6]
 80021cc:	4613      	mov	r3, r2
 80021ce:	80bb      	strh	r3, [r7, #4]
  uint8_t   parameter[4];
  /* CASET: Comumn Addrses Set */
  parameter[0] = 0x00;     
 80021d0:	2300      	movs	r3, #0
 80021d2:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Xpos;
 80021d4:	88fb      	ldrh	r3, [r7, #6]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 80021da:	2300      	movs	r3, #0
 80021dc:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Xpos;
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	3b11      	subs	r3, #17
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_CASET, parameter, 4);
 80021e8:	f107 030c 	add.w	r3, r7, #12
 80021ec:	2204      	movs	r2, #4
 80021ee:	4619      	mov	r1, r3
 80021f0:	202a      	movs	r0, #42	; 0x2a
 80021f2:	f000 f86c 	bl	80022ce <ST7789H2_WriteReg>
  /* RASET: Row Addrses Set */  
  parameter[0] = 0x00;
 80021f6:	2300      	movs	r3, #0
 80021f8:	733b      	strb	r3, [r7, #12]
  parameter[1] = 0x00 + Ypos;
 80021fa:	88bb      	ldrh	r3, [r7, #4]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	737b      	strb	r3, [r7, #13]
  parameter[2] = 0x00;
 8002200:	2300      	movs	r3, #0
 8002202:	73bb      	strb	r3, [r7, #14]
  parameter[3] = 0xEF + Ypos;
 8002204:	88bb      	ldrh	r3, [r7, #4]
 8002206:	b2db      	uxtb	r3, r3
 8002208:	3b11      	subs	r3, #17
 800220a:	b2db      	uxtb	r3, r3
 800220c:	73fb      	strb	r3, [r7, #15]
  ST7789H2_WriteReg(ST7789H2_RASET, parameter, 4);
 800220e:	f107 030c 	add.w	r3, r7, #12
 8002212:	2204      	movs	r2, #4
 8002214:	4619      	mov	r1, r3
 8002216:	202b      	movs	r0, #43	; 0x2b
 8002218:	f000 f859 	bl	80022ce <ST7789H2_WriteReg>
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <ST7789H2_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color in RGB565 format
  * @retval None
  */
void ST7789H2_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	80fb      	strh	r3, [r7, #6]
 800222e:	460b      	mov	r3, r1
 8002230:	80bb      	strh	r3, [r7, #4]
 8002232:	4613      	mov	r3, r2
 8002234:	807b      	strh	r3, [r7, #2]
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002236:	88ba      	ldrh	r2, [r7, #4]
 8002238:	88fb      	ldrh	r3, [r7, #6]
 800223a:	4611      	mov	r1, r2
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ffbf 	bl	80021c0 <ST7789H2_SetCursor>

  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	202c      	movs	r0, #44	; 0x2c
 8002248:	f000 f841 	bl	80022ce <ST7789H2_WriteReg>

  /* Write RAM data */
  LCD_IO_WriteData(RGBCode);
 800224c:	887b      	ldrh	r3, [r7, #2]
 800224e:	4618      	mov	r0, r3
 8002250:	f000 fbd2 	bl	80029f8 <LCD_IO_WriteData>
}
 8002254:	bf00      	nop
 8002256:	3708      	adds	r7, #8
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <ST7789H2_ReadPixel>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval The RGB pixel color in RGB565 format
  */
uint16_t ST7789H2_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	460a      	mov	r2, r1
 8002266:	80fb      	strh	r3, [r7, #6]
 8002268:	4613      	mov	r3, r2
 800226a:	80bb      	strh	r3, [r7, #4]
  ST7789H2_Rgb888 rgb888;
  uint8_t          r, g, b;
  uint16_t         rgb565;

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800226c:	88ba      	ldrh	r2, [r7, #4]
 800226e:	88fb      	ldrh	r3, [r7, #6]
 8002270:	4611      	mov	r1, r2
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ffa4 	bl	80021c0 <ST7789H2_SetCursor>
  
  /* Read RGB888 data from LCD RAM */
  rgb888 = ST7789H2_ReadPixel_rgb888(Xpos, Ypos);
 8002278:	88ba      	ldrh	r2, [r7, #4]
 800227a:	88fb      	ldrh	r3, [r7, #6]
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f000 f9c4 	bl	800260c <ST7789H2_ReadPixel_rgb888>
 8002284:	4603      	mov	r3, r0
 8002286:	461a      	mov	r2, r3
 8002288:	733a      	strb	r2, [r7, #12]
 800228a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800228e:	737a      	strb	r2, [r7, #13]
 8002290:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002294:	73bb      	strb	r3, [r7, #14]
  
  /* Convert RGB888 to RGB565 */
  r = ((rgb888.red & 0xF8) >> 3);    /* Extract the red component 5 most significant bits */
 8002296:	7b3b      	ldrb	r3, [r7, #12]
 8002298:	08db      	lsrs	r3, r3, #3
 800229a:	75fb      	strb	r3, [r7, #23]
  g = ((rgb888.green & 0xFC) >> 2);  /* Extract the green component 6 most significant bits */
 800229c:	7b7b      	ldrb	r3, [r7, #13]
 800229e:	089b      	lsrs	r3, r3, #2
 80022a0:	75bb      	strb	r3, [r7, #22]
  b = ((rgb888.blue & 0xF8) >> 3);   /* Extract the blue component 5 most significant bits */
 80022a2:	7bbb      	ldrb	r3, [r7, #14]
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	757b      	strb	r3, [r7, #21]

  rgb565 = ((uint16_t)(r) << 11) + ((uint16_t)(g) << 5) + ((uint16_t)(b) << 0);
 80022a8:	7dfb      	ldrb	r3, [r7, #23]
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	02db      	lsls	r3, r3, #11
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	7dbb      	ldrb	r3, [r7, #22]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	015b      	lsls	r3, r3, #5
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	4413      	add	r3, r2
 80022ba:	b29a      	uxth	r2, r3
 80022bc:	7d7b      	ldrb	r3, [r7, #21]
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	827b      	strh	r3, [r7, #18]
  
  return (rgb565);
 80022c4:	8a7b      	ldrh	r3, [r7, #18]
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}

080022ce <ST7789H2_WriteReg>:
  * @param  Parameters: pointer on parameters value (if command uses one or several parameters).
  * @param  NbParameters: number of command parameters (0 if no parameter)
  * @retval None
  */
void ST7789H2_WriteReg(uint8_t Command, uint8_t *Parameters, uint8_t NbParameters)
{
 80022ce:	b580      	push	{r7, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	4603      	mov	r3, r0
 80022d6:	6039      	str	r1, [r7, #0]
 80022d8:	71fb      	strb	r3, [r7, #7]
 80022da:	4613      	mov	r3, r2
 80022dc:	71bb      	strb	r3, [r7, #6]
  uint8_t   i;

  /* Send command */
  LCD_IO_WriteReg(Command);
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f000 fb96 	bl	8002a12 <LCD_IO_WriteReg>
  
  /* Send command's parameters if any */
  for (i=0; i<NbParameters; i++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
 80022ea:	e00a      	b.n	8002302 <ST7789H2_WriteReg+0x34>
  {
    LCD_IO_WriteData(Parameters[i]);
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	683a      	ldr	r2, [r7, #0]
 80022f0:	4413      	add	r3, r2
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	4618      	mov	r0, r3
 80022f8:	f000 fb7e 	bl	80029f8 <LCD_IO_WriteData>
  for (i=0; i<NbParameters; i++)
 80022fc:	7bfb      	ldrb	r3, [r7, #15]
 80022fe:	3301      	adds	r3, #1
 8002300:	73fb      	strb	r3, [r7, #15]
 8002302:	7bfa      	ldrb	r2, [r7, #15]
 8002304:	79bb      	ldrb	r3, [r7, #6]
 8002306:	429a      	cmp	r2, r3
 8002308:	d3f0      	bcc.n	80022ec <ST7789H2_WriteReg+0x1e>
  }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <ST7789H2_ReadReg>:
  * @brief  Reads the selected LCD Register.
  * @param  Command: command value (or register address as named in st7789h2 doc).
  * @retval Register Value.
  */
uint8_t ST7789H2_ReadReg(uint8_t Command)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	71fb      	strb	r3, [r7, #7]
  /* Send command */
  LCD_IO_WriteReg(Command);
 800231e:	79fb      	ldrb	r3, [r7, #7]
 8002320:	4618      	mov	r0, r3
 8002322:	f000 fb76 	bl	8002a12 <LCD_IO_WriteReg>

  /* Read dummy data */
  LCD_IO_ReadData();
 8002326:	f000 fb81 	bl	8002a2c <LCD_IO_ReadData>
  
  /* Read register value */
  return (LCD_IO_ReadData());
 800232a:	f000 fb7f 	bl	8002a2c <LCD_IO_ReadData>
 800232e:	4603      	mov	r3, r0
 8002330:	b2db      	uxtb	r3, r3
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <ST7789H2_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ST7789H2_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800233c:	b490      	push	{r4, r7}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	4604      	mov	r4, r0
 8002344:	4608      	mov	r0, r1
 8002346:	4611      	mov	r1, r2
 8002348:	461a      	mov	r2, r3
 800234a:	4623      	mov	r3, r4
 800234c:	80fb      	strh	r3, [r7, #6]
 800234e:	4603      	mov	r3, r0
 8002350:	80bb      	strh	r3, [r7, #4]
 8002352:	460b      	mov	r3, r1
 8002354:	807b      	strh	r3, [r7, #2]
 8002356:	4613      	mov	r3, r2
 8002358:	803b      	strh	r3, [r7, #0]
  if (Xpos < ST7789H2_LCD_PIXEL_WIDTH)
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2bef      	cmp	r3, #239	; 0xef
 800235e:	d803      	bhi.n	8002368 <ST7789H2_SetDisplayWindow+0x2c>
  {
    WindowsXstart = Xpos;
 8002360:	4a1b      	ldr	r2, [pc, #108]	; (80023d0 <ST7789H2_SetDisplayWindow+0x94>)
 8002362:	88fb      	ldrh	r3, [r7, #6]
 8002364:	8013      	strh	r3, [r2, #0]
 8002366:	e002      	b.n	800236e <ST7789H2_SetDisplayWindow+0x32>
  }
  else
  {
    WindowsXstart = 0;
 8002368:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <ST7789H2_SetDisplayWindow+0x94>)
 800236a:	2200      	movs	r2, #0
 800236c:	801a      	strh	r2, [r3, #0]
  }

  if (Ypos < ST7789H2_LCD_PIXEL_HEIGHT)
 800236e:	88bb      	ldrh	r3, [r7, #4]
 8002370:	2bef      	cmp	r3, #239	; 0xef
 8002372:	d803      	bhi.n	800237c <ST7789H2_SetDisplayWindow+0x40>
  {
    WindowsYstart = Ypos;
 8002374:	4a17      	ldr	r2, [pc, #92]	; (80023d4 <ST7789H2_SetDisplayWindow+0x98>)
 8002376:	88bb      	ldrh	r3, [r7, #4]
 8002378:	8013      	strh	r3, [r2, #0]
 800237a:	e002      	b.n	8002382 <ST7789H2_SetDisplayWindow+0x46>
  }
  else
  {
    WindowsYstart = 0;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <ST7789H2_SetDisplayWindow+0x98>)
 800237e:	2200      	movs	r2, #0
 8002380:	801a      	strh	r2, [r3, #0]
  }

  if (Width  + Xpos <= ST7789H2_LCD_PIXEL_WIDTH)
 8002382:	887a      	ldrh	r2, [r7, #2]
 8002384:	88fb      	ldrh	r3, [r7, #6]
 8002386:	4413      	add	r3, r2
 8002388:	2bf0      	cmp	r3, #240	; 0xf0
 800238a:	dc08      	bgt.n	800239e <ST7789H2_SetDisplayWindow+0x62>
  {
    WindowsXend = Width  + Xpos - 1;
 800238c:	887a      	ldrh	r2, [r7, #2]
 800238e:	88fb      	ldrh	r3, [r7, #6]
 8002390:	4413      	add	r3, r2
 8002392:	b29b      	uxth	r3, r3
 8002394:	3b01      	subs	r3, #1
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b0f      	ldr	r3, [pc, #60]	; (80023d8 <ST7789H2_SetDisplayWindow+0x9c>)
 800239a:	801a      	strh	r2, [r3, #0]
 800239c:	e002      	b.n	80023a4 <ST7789H2_SetDisplayWindow+0x68>
  }
  else
  {
    WindowsXend = ST7789H2_LCD_PIXEL_WIDTH - 1;
 800239e:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <ST7789H2_SetDisplayWindow+0x9c>)
 80023a0:	22ef      	movs	r2, #239	; 0xef
 80023a2:	801a      	strh	r2, [r3, #0]
  }

  if (Height + Ypos <= ST7789H2_LCD_PIXEL_HEIGHT)
 80023a4:	883a      	ldrh	r2, [r7, #0]
 80023a6:	88bb      	ldrh	r3, [r7, #4]
 80023a8:	4413      	add	r3, r2
 80023aa:	2bf0      	cmp	r3, #240	; 0xf0
 80023ac:	dc08      	bgt.n	80023c0 <ST7789H2_SetDisplayWindow+0x84>
  {
    WindowsYend = Height + Ypos - 1;
 80023ae:	883a      	ldrh	r2, [r7, #0]
 80023b0:	88bb      	ldrh	r3, [r7, #4]
 80023b2:	4413      	add	r3, r2
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	3b01      	subs	r3, #1
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <ST7789H2_SetDisplayWindow+0xa0>)
 80023bc:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
  }
}
 80023be:	e002      	b.n	80023c6 <ST7789H2_SetDisplayWindow+0x8a>
    WindowsYend = ST7789H2_LCD_PIXEL_HEIGHT-1;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <ST7789H2_SetDisplayWindow+0xa0>)
 80023c2:	22ef      	movs	r2, #239	; 0xef
 80023c4:	801a      	strh	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc90      	pop	{r4, r7}
 80023ce:	4770      	bx	lr
 80023d0:	20000550 	.word	0x20000550
 80023d4:	20000552 	.word	0x20000552
 80023d8:	2000003c 	.word	0x2000003c
 80023dc:	2000003e 	.word	0x2000003e

080023e0 <ST7789H2_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	4604      	mov	r4, r0
 80023e8:	4608      	mov	r0, r1
 80023ea:	4611      	mov	r1, r2
 80023ec:	461a      	mov	r2, r3
 80023ee:	4623      	mov	r3, r4
 80023f0:	80fb      	strh	r3, [r7, #6]
 80023f2:	4603      	mov	r3, r0
 80023f4:	80bb      	strh	r3, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	807b      	strh	r3, [r7, #2]
 80023fa:	4613      	mov	r3, r2
 80023fc:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	81fb      	strh	r3, [r7, #14]
  
  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos); 
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	88bb      	ldrh	r3, [r7, #4]
 8002406:	4611      	mov	r1, r2
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff fed9 	bl	80021c0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800240e:	2200      	movs	r2, #0
 8002410:	2100      	movs	r1, #0
 8002412:	202c      	movs	r0, #44	; 0x2c
 8002414:	f7ff ff5b 	bl	80022ce <ST7789H2_WriteReg>
  
  /* Sent a complete line */
  for(counter = 0; counter < Length; counter++)
 8002418:	2300      	movs	r3, #0
 800241a:	81fb      	strh	r3, [r7, #14]
 800241c:	e006      	b.n	800242c <ST7789H2_DrawHLine+0x4c>
  {
    LCD_IO_WriteData(RGBCode);
 800241e:	88fb      	ldrh	r3, [r7, #6]
 8002420:	4618      	mov	r0, r3
 8002422:	f000 fae9 	bl	80029f8 <LCD_IO_WriteData>
  for(counter = 0; counter < Length; counter++)
 8002426:	89fb      	ldrh	r3, [r7, #14]
 8002428:	3301      	adds	r3, #1
 800242a:	81fb      	strh	r3, [r7, #14]
 800242c:	89fa      	ldrh	r2, [r7, #14]
 800242e:	883b      	ldrh	r3, [r7, #0]
 8002430:	429a      	cmp	r2, r3
 8002432:	d3f4      	bcc.n	800241e <ST7789H2_DrawHLine+0x3e>
  }  
}
 8002434:	bf00      	nop
 8002436:	bf00      	nop
 8002438:	3714      	adds	r7, #20
 800243a:	46bd      	mov	sp, r7
 800243c:	bd90      	pop	{r4, r7, pc}

0800243e <ST7789H2_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.  
  * @retval None
  */
void ST7789H2_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 800243e:	b590      	push	{r4, r7, lr}
 8002440:	b085      	sub	sp, #20
 8002442:	af00      	add	r7, sp, #0
 8002444:	4604      	mov	r4, r0
 8002446:	4608      	mov	r0, r1
 8002448:	4611      	mov	r1, r2
 800244a:	461a      	mov	r2, r3
 800244c:	4623      	mov	r3, r4
 800244e:	80fb      	strh	r3, [r7, #6]
 8002450:	4603      	mov	r3, r0
 8002452:	80bb      	strh	r3, [r7, #4]
 8002454:	460b      	mov	r3, r1
 8002456:	807b      	strh	r3, [r7, #2]
 8002458:	4613      	mov	r3, r2
 800245a:	803b      	strh	r3, [r7, #0]
  uint16_t counter = 0;
 800245c:	2300      	movs	r3, #0
 800245e:	81fb      	strh	r3, [r7, #14]

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 8002460:	887a      	ldrh	r2, [r7, #2]
 8002462:	88bb      	ldrh	r3, [r7, #4]
 8002464:	4611      	mov	r1, r2
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff feaa 	bl	80021c0 <ST7789H2_SetCursor>
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 800246c:	2200      	movs	r2, #0
 800246e:	2100      	movs	r1, #0
 8002470:	202c      	movs	r0, #44	; 0x2c
 8002472:	f7ff ff2c 	bl	80022ce <ST7789H2_WriteReg>

  /* Fill a complete vertical line */
  for(counter = 0; counter < Length; counter++)
 8002476:	2300      	movs	r3, #0
 8002478:	81fb      	strh	r3, [r7, #14]
 800247a:	e00b      	b.n	8002494 <ST7789H2_DrawVLine+0x56>
  {
    ST7789H2_WritePixel(Xpos, Ypos + counter, RGBCode);
 800247c:	887a      	ldrh	r2, [r7, #2]
 800247e:	89fb      	ldrh	r3, [r7, #14]
 8002480:	4413      	add	r3, r2
 8002482:	b299      	uxth	r1, r3
 8002484:	88fa      	ldrh	r2, [r7, #6]
 8002486:	88bb      	ldrh	r3, [r7, #4]
 8002488:	4618      	mov	r0, r3
 800248a:	f7ff fecb 	bl	8002224 <ST7789H2_WritePixel>
  for(counter = 0; counter < Length; counter++)
 800248e:	89fb      	ldrh	r3, [r7, #14]
 8002490:	3301      	adds	r3, #1
 8002492:	81fb      	strh	r3, [r7, #14]
 8002494:	89fa      	ldrh	r2, [r7, #14]
 8002496:	883b      	ldrh	r3, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d3ef      	bcc.n	800247c <ST7789H2_DrawVLine+0x3e>
  }
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	3714      	adds	r7, #20
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd90      	pop	{r4, r7, pc}
	...

080024a8 <ST7789H2_DrawBitmap>:
  * @param  Xpos: Bmp X position in the LCD
  * @param  Ypos: Bmp Y position in the LCD    
  * @retval None
  */
void ST7789H2_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	603a      	str	r2, [r7, #0]
 80024b2:	80fb      	strh	r3, [r7, #6]
 80024b4:	460b      	mov	r3, r1
 80024b6:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, size = 0;
 80024b8:	2300      	movs	r3, #0
 80024ba:	617b      	str	r3, [r7, #20]
 80024bc:	2300      	movs	r3, #0
 80024be:	613b      	str	r3, [r7, #16]
  uint32_t posY;
  uint32_t nb_line = 0;
 80024c0:	2300      	movs	r3, #0
 80024c2:	61bb      	str	r3, [r7, #24]
  uint16_t Xsize = WindowsXend - WindowsXstart + 1;
 80024c4:	4b30      	ldr	r3, [pc, #192]	; (8002588 <ST7789H2_DrawBitmap+0xe0>)
 80024c6:	881a      	ldrh	r2, [r3, #0]
 80024c8:	4b30      	ldr	r3, [pc, #192]	; (800258c <ST7789H2_DrawBitmap+0xe4>)
 80024ca:	881b      	ldrh	r3, [r3, #0]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	81fb      	strh	r3, [r7, #14]
  uint16_t Ysize = WindowsYend - WindowsYstart + 1;
 80024d4:	4b2e      	ldr	r3, [pc, #184]	; (8002590 <ST7789H2_DrawBitmap+0xe8>)
 80024d6:	881a      	ldrh	r2, [r3, #0]
 80024d8:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <ST7789H2_DrawBitmap+0xec>)
 80024da:	881b      	ldrh	r3, [r3, #0]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	b29b      	uxth	r3, r3
 80024e0:	3301      	adds	r3, #1
 80024e2:	81bb      	strh	r3, [r7, #12]

  /* Read bitmap size */
  size = *(volatile uint16_t *) (pbmp + 2);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	3302      	adds	r3, #2
 80024e8:	881b      	ldrh	r3, [r3, #0]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	613b      	str	r3, [r7, #16]
  size |= (*(volatile uint16_t *) (pbmp + 4)) << 16;
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	3304      	adds	r3, #4
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	041b      	lsls	r3, r3, #16
 80024f8:	461a      	mov	r2, r3
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
  /* Get bitmap data address offset */
  index = *(volatile uint16_t *) (pbmp + 10);
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	330a      	adds	r3, #10
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b29b      	uxth	r3, r3
 8002508:	617b      	str	r3, [r7, #20]
  index |= (*(volatile uint16_t *) (pbmp + 12)) << 16;
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	330c      	adds	r3, #12
 800250e:	881b      	ldrh	r3, [r3, #0]
 8002510:	b29b      	uxth	r3, r3
 8002512:	041b      	lsls	r3, r3, #16
 8002514:	461a      	mov	r2, r3
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	4313      	orrs	r3, r2
 800251a:	617b      	str	r3, [r7, #20]
  size = (size - index)/2;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	085b      	lsrs	r3, r3, #1
 8002524:	613b      	str	r3, [r7, #16]
  pbmp += index;
 8002526:	683a      	ldr	r2, [r7, #0]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	4413      	add	r3, r2
 800252c:	603b      	str	r3, [r7, #0]

  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800252e:	88ba      	ldrh	r2, [r7, #4]
 8002530:	89bb      	ldrh	r3, [r7, #12]
 8002532:	4413      	add	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e01d      	b.n	8002574 <ST7789H2_DrawBitmap+0xcc>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY - 1);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	b29b      	uxth	r3, r3
 800253c:	3b01      	subs	r3, #1
 800253e:	b29a      	uxth	r2, r3
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	4611      	mov	r1, r2
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fe3b 	bl	80021c0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY - 1, Xsize, (pbmp + (nb_line * Xsize * 2)));
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	b29b      	uxth	r3, r3
 800254e:	3b01      	subs	r3, #1
 8002550:	b299      	uxth	r1, r3
 8002552:	89fb      	ldrh	r3, [r7, #14]
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	fb02 f303 	mul.w	r3, r2, r3
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	4413      	add	r3, r2
 8002560:	89fa      	ldrh	r2, [r7, #14]
 8002562:	88f8      	ldrh	r0, [r7, #6]
 8002564:	f000 f89c 	bl	80026a0 <ST7789H2_DrawRGBHLine>
    nb_line++;
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	3301      	adds	r3, #1
 800256c:	61bb      	str	r3, [r7, #24]
  for (posY = (Ypos + Ysize); posY > Ypos; posY--)  /* In BMP files the line order is inverted */
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3b01      	subs	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	88bb      	ldrh	r3, [r7, #4]
 8002576:	69fa      	ldr	r2, [r7, #28]
 8002578:	429a      	cmp	r2, r3
 800257a:	d8dd      	bhi.n	8002538 <ST7789H2_DrawBitmap+0x90>
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3720      	adds	r7, #32
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	2000003c 	.word	0x2000003c
 800258c:	20000550 	.word	0x20000550
 8002590:	2000003e 	.word	0x2000003e
 8002594:	20000552 	.word	0x20000552

08002598 <ST7789H2_DrawRGBImage>:
  * @param  Xsize: Image X size in the LCD
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  */
void ST7789H2_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint8_t *pdata)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	4604      	mov	r4, r0
 80025a0:	4608      	mov	r0, r1
 80025a2:	4611      	mov	r1, r2
 80025a4:	461a      	mov	r2, r3
 80025a6:	4623      	mov	r3, r4
 80025a8:	80fb      	strh	r3, [r7, #6]
 80025aa:	4603      	mov	r3, r0
 80025ac:	80bb      	strh	r3, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	807b      	strh	r3, [r7, #2]
 80025b2:	4613      	mov	r3, r2
 80025b4:	803b      	strh	r3, [r7, #0]
  uint32_t posY;
  uint32_t nb_line = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]

  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80025ba:	88bb      	ldrh	r3, [r7, #4]
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e019      	b.n	80025f4 <ST7789H2_DrawRGBImage+0x5c>
  {
    /* Set Cursor */
    ST7789H2_SetCursor(Xpos, posY);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	88fb      	ldrh	r3, [r7, #6]
 80025c6:	4611      	mov	r1, r2
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fdf9 	bl	80021c0 <ST7789H2_SetCursor>

    /* Draw one line of the picture */
    ST7789H2_DrawRGBHLine(Xpos, posY, Xsize, (pdata + (nb_line * Xsize * 2)));
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	b299      	uxth	r1, r3
 80025d2:	887b      	ldrh	r3, [r7, #2]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	4413      	add	r3, r2
 80025e0:	887a      	ldrh	r2, [r7, #2]
 80025e2:	88f8      	ldrh	r0, [r7, #6]
 80025e4:	f000 f85c 	bl	80026a0 <ST7789H2_DrawRGBHLine>
    nb_line++;
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	3301      	adds	r3, #1
 80025ec:	60bb      	str	r3, [r7, #8]
  for (posY = Ypos; posY < (Ypos + Ysize); posY ++)
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	3301      	adds	r3, #1
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	88ba      	ldrh	r2, [r7, #4]
 80025f6:	883b      	ldrh	r3, [r7, #0]
 80025f8:	4413      	add	r3, r2
 80025fa:	461a      	mov	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4293      	cmp	r3, r2
 8002600:	d3de      	bcc.n	80025c0 <ST7789H2_DrawRGBImage+0x28>
  }
}
 8002602:	bf00      	nop
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}

0800260c <ST7789H2_ReadPixel_rgb888>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval Each RGB pixel color components in a structure
  */
static ST7789H2_Rgb888 ST7789H2_ReadPixel_rgb888(uint16_t Xpos, uint16_t Ypos)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	4603      	mov	r3, r0
 8002614:	460a      	mov	r2, r1
 8002616:	80fb      	strh	r3, [r7, #6]
 8002618:	4613      	mov	r3, r2
 800261a:	80bb      	strh	r3, [r7, #4]
   * address 1 :    blue pixel 0    X  X  |     red pixel 1   X  X
   * address 2 :   green pixel 1    X  X  |    blue pixel 1   X  X
   */

  /* Set Cursor */
  ST7789H2_SetCursor(Xpos, Ypos);
 800261c:	88ba      	ldrh	r2, [r7, #4]
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	4611      	mov	r1, r2
 8002622:	4618      	mov	r0, r3
 8002624:	f7ff fdcc 	bl	80021c0 <ST7789H2_SetCursor>
  /* Prepare to read LCD RAM */
  ST7789H2_WriteReg(ST7789H2_READ_RAM, (uint8_t*)NULL, 0);   /* RAM read data command */
 8002628:	2200      	movs	r2, #0
 800262a:	2100      	movs	r1, #0
 800262c:	202e      	movs	r0, #46	; 0x2e
 800262e:	f7ff fe4e 	bl	80022ce <ST7789H2_WriteReg>
  /* Dummy read */
  LCD_IO_ReadData();
 8002632:	f000 f9fb 	bl	8002a2c <LCD_IO_ReadData>
  /* Read first part of the RGB888 data */
  rgb888_part1 = LCD_IO_ReadData();
 8002636:	f000 f9f9 	bl	8002a2c <LCD_IO_ReadData>
 800263a:	4603      	mov	r3, r0
 800263c:	82fb      	strh	r3, [r7, #22]
  /* Read first part of the RGB888 data */
  rgb888_part2 = LCD_IO_ReadData();
 800263e:	f000 f9f5 	bl	8002a2c <LCD_IO_ReadData>
 8002642:	4603      	mov	r3, r0
 8002644:	82bb      	strh	r3, [r7, #20]

  /* red component */
  rgb888.red   = (rgb888_part1 & 0xFC00) >> 8;
 8002646:	8afb      	ldrh	r3, [r7, #22]
 8002648:	121b      	asrs	r3, r3, #8
 800264a:	b2db      	uxtb	r3, r3
 800264c:	f023 0303 	bic.w	r3, r3, #3
 8002650:	b2db      	uxtb	r3, r3
 8002652:	733b      	strb	r3, [r7, #12]
  /* green component */
  rgb888.green = (rgb888_part1 & 0x00FC) >> 0;
 8002654:	8afb      	ldrh	r3, [r7, #22]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	f023 0303 	bic.w	r3, r3, #3
 800265c:	b2db      	uxtb	r3, r3
 800265e:	737b      	strb	r3, [r7, #13]
  /* blue component */
  rgb888.blue  = (rgb888_part2 & 0xFC00) >> 8;
 8002660:	8abb      	ldrh	r3, [r7, #20]
 8002662:	121b      	asrs	r3, r3, #8
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f023 0303 	bic.w	r3, r3, #3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	73bb      	strb	r3, [r7, #14]

  return rgb888;
 800266e:	f107 0310 	add.w	r3, r7, #16
 8002672:	f107 020c 	add.w	r2, r7, #12
 8002676:	6812      	ldr	r2, [r2, #0]
 8002678:	4611      	mov	r1, r2
 800267a:	8019      	strh	r1, [r3, #0]
 800267c:	3302      	adds	r3, #2
 800267e:	0c12      	lsrs	r2, r2, #16
 8002680:	701a      	strb	r2, [r3, #0]
 8002682:	2300      	movs	r3, #0
 8002684:	7c3a      	ldrb	r2, [r7, #16]
 8002686:	f362 0307 	bfi	r3, r2, #0, #8
 800268a:	7c7a      	ldrb	r2, [r7, #17]
 800268c:	f362 230f 	bfi	r3, r2, #8, #8
 8002690:	7cba      	ldrb	r2, [r7, #18]
 8002692:	f362 4317 	bfi	r3, r2, #16, #8
}
 8002696:	4618      	mov	r0, r3
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
	...

080026a0 <ST7789H2_DrawRGBHLine>:
  * @param  Ypos: Image Y position in the LCD
  * @param  Xsize: Image X size in the LCD
  * @retval None
  */
static void ST7789H2_DrawRGBHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint8_t *pdata)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b088      	sub	sp, #32
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	4603      	mov	r3, r0
 80026aa:	81fb      	strh	r3, [r7, #14]
 80026ac:	460b      	mov	r3, r1
 80026ae:	81bb      	strh	r3, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	817b      	strh	r3, [r7, #10]
  uint32_t i = 0;
 80026b4:	2300      	movs	r3, #0
 80026b6:	61fb      	str	r3, [r7, #28]
  uint32_t posX;
  uint16_t *rgb565 = (uint16_t*)pdata;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	617b      	str	r3, [r7, #20]
  
  /* Prepare to write to LCD RAM */
  ST7789H2_WriteReg(ST7789H2_WRITE_RAM, (uint8_t*)NULL, 0);   /* RAM write data command */
 80026bc:	2200      	movs	r2, #0
 80026be:	2100      	movs	r1, #0
 80026c0:	202c      	movs	r0, #44	; 0x2c
 80026c2:	f7ff fe04 	bl	80022ce <ST7789H2_WriteReg>
  
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 80026c6:	89fb      	ldrh	r3, [r7, #14]
 80026c8:	61bb      	str	r3, [r7, #24]
 80026ca:	e029      	b.n	8002720 <ST7789H2_DrawRGBHLine+0x80>
  {
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80026cc:	4b1a      	ldr	r3, [pc, #104]	; (8002738 <ST7789H2_DrawRGBHLine+0x98>)
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	461a      	mov	r2, r3
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d320      	bcc.n	800271a <ST7789H2_DrawRGBHLine+0x7a>
 80026d8:	4b18      	ldr	r3, [pc, #96]	; (800273c <ST7789H2_DrawRGBHLine+0x9c>)
 80026da:	881b      	ldrh	r3, [r3, #0]
 80026dc:	89ba      	ldrh	r2, [r7, #12]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d31b      	bcc.n	800271a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80026e2:	4b17      	ldr	r3, [pc, #92]	; (8002740 <ST7789H2_DrawRGBHLine+0xa0>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	461a      	mov	r2, r3
    if ((posX >= WindowsXstart) && (Ypos >= WindowsYstart) &&     /* Check we are in the defined window */
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d815      	bhi.n	800271a <ST7789H2_DrawRGBHLine+0x7a>
        (posX <= WindowsXend) && (Ypos <= WindowsYend))
 80026ee:	4b15      	ldr	r3, [pc, #84]	; (8002744 <ST7789H2_DrawRGBHLine+0xa4>)
 80026f0:	881b      	ldrh	r3, [r3, #0]
 80026f2:	89ba      	ldrh	r2, [r7, #12]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d810      	bhi.n	800271a <ST7789H2_DrawRGBHLine+0x7a>
    {
      if (posX != (Xsize + Xpos))     /* When writing last pixel when size is odd, the third part is not written */
 80026f8:	897a      	ldrh	r2, [r7, #10]
 80026fa:	89fb      	ldrh	r3, [r7, #14]
 80026fc:	441a      	add	r2, r3
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	429a      	cmp	r2, r3
 8002702:	d007      	beq.n	8002714 <ST7789H2_DrawRGBHLine+0x74>
      {
        LCD_IO_WriteData(rgb565[i]);        
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	697a      	ldr	r2, [r7, #20]
 800270a:	4413      	add	r3, r2
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f000 f972 	bl	80029f8 <LCD_IO_WriteData>
      }      
      i++;
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	3301      	adds	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
  for (posX = Xpos; posX < (Xsize + Xpos); posX++)
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3301      	adds	r3, #1
 800271e:	61bb      	str	r3, [r7, #24]
 8002720:	897a      	ldrh	r2, [r7, #10]
 8002722:	89fb      	ldrh	r3, [r7, #14]
 8002724:	4413      	add	r3, r2
 8002726:	461a      	mov	r2, r3
 8002728:	69bb      	ldr	r3, [r7, #24]
 800272a:	4293      	cmp	r3, r2
 800272c:	d3ce      	bcc.n	80026cc <ST7789H2_DrawRGBHLine+0x2c>
    }
  }
}
 800272e:	bf00      	nop
 8002730:	bf00      	nop
 8002732:	3720      	adds	r7, #32
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	20000550 	.word	0x20000550
 800273c:	20000552 	.word	0x20000552
 8002740:	2000003c 	.word	0x2000003c
 8002744:	2000003e 	.word	0x2000003e

08002748 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line 
  *                                    with interrupt generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b088      	sub	sp, #32
 800274c:	af00      	add	r7, sp, #0
 800274e:	4603      	mov	r3, r0
 8002750:	460a      	mov	r2, r1
 8002752:	71fb      	strb	r3, [r7, #7]
 8002754:	4613      	mov	r3, r2
 8002756:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the BUTTON clock */
  WAKEUP_BUTTON_GPIO_CLK_ENABLE();
 8002758:	2300      	movs	r3, #0
 800275a:	60bb      	str	r3, [r7, #8]
 800275c:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <BSP_PB_Init+0xa0>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	4a21      	ldr	r2, [pc, #132]	; (80027e8 <BSP_PB_Init+0xa0>)
 8002762:	f043 0301 	orr.w	r3, r3, #1
 8002766:	6313      	str	r3, [r2, #48]	; 0x30
 8002768:	4b1f      	ldr	r3, [pc, #124]	; (80027e8 <BSP_PB_Init+0xa0>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	60bb      	str	r3, [r7, #8]
 8002772:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8002774:	79bb      	ldrb	r3, [r7, #6]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d111      	bne.n	800279e <BSP_PB_Init+0x56>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 800277a:	2301      	movs	r3, #1
 800277c:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800277e:	2300      	movs	r3, #0
 8002780:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002782:	2302      	movs	r3, #2
 8002784:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002786:	2302      	movs	r3, #2
 8002788:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <BSP_PB_Init+0xa4>)
 800278e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002792:	f107 020c 	add.w	r2, r7, #12
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f001 fb99 	bl	8003ed0 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 800279e:	79bb      	ldrb	r3, [r7, #6]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d11d      	bne.n	80027e0 <BSP_PB_Init+0x98>
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Pin = BUTTON_PIN[Button];
 80027a4:	2301      	movs	r3, #1
 80027a6:	60fb      	str	r3, [r7, #12]
    gpio_init_structure.Pull = GPIO_PULLDOWN;
 80027a8:	2302      	movs	r3, #2
 80027aa:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ac:	2303      	movs	r3, #3
 80027ae:	61bb      	str	r3, [r7, #24]
    
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80027b0:	4b0f      	ldr	r3, [pc, #60]	; (80027f0 <BSP_PB_Init+0xa8>)
 80027b2:	613b      	str	r3, [r7, #16]
    
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80027b4:	79fb      	ldrb	r3, [r7, #7]
 80027b6:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <BSP_PB_Init+0xa4>)
 80027b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027bc:	f107 020c 	add.w	r2, r7, #12
 80027c0:	4611      	mov	r1, r2
 80027c2:	4618      	mov	r0, r3
 80027c4:	f001 fb84 	bl	8003ed0 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 80027c8:	2306      	movs	r3, #6
 80027ca:	b25b      	sxtb	r3, r3
 80027cc:	2200      	movs	r2, #0
 80027ce:	210f      	movs	r1, #15
 80027d0:	4618      	mov	r0, r3
 80027d2:	f001 f835 	bl	8003840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 80027d6:	2306      	movs	r3, #6
 80027d8:	b25b      	sxtb	r3, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f001 f84c 	bl	8003878 <HAL_NVIC_EnableIRQ>
  }
}
 80027e0:	bf00      	nop
 80027e2:	3720      	adds	r7, #32
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	20000040 	.word	0x20000040
 80027f0:	10110000 	.word	0x10110000

080027f4 <FMC_BANK3_MspInit>:
/*************************** FMC Routines ************************************/
/**
  * @brief  Initializes FMC_BANK3 MSP.
  */
static void FMC_BANK3_MspInit(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;
    
  /* Enable FSMC clock */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	4b3a      	ldr	r3, [pc, #232]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	4a39      	ldr	r2, [pc, #228]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6393      	str	r3, [r2, #56]	; 0x38
 800280a:	4b37      	ldr	r3, [pc, #220]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 800280c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b33      	ldr	r3, [pc, #204]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a32      	ldr	r2, [pc, #200]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002820:	f043 0308 	orr.w	r3, r3, #8
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b30      	ldr	r3, [pc, #192]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60bb      	str	r3, [r7, #8]
 8002836:	4b2c      	ldr	r3, [pc, #176]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283a:	4a2b      	ldr	r2, [pc, #172]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 800283c:	f043 0310 	orr.w	r3, r3, #16
 8002840:	6313      	str	r3, [r2, #48]	; 0x30
 8002842:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002846:	f003 0310 	and.w	r3, r3, #16
 800284a:	60bb      	str	r3, [r7, #8]
 800284c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	607b      	str	r3, [r7, #4]
 8002852:	4b25      	ldr	r3, [pc, #148]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	4a24      	ldr	r2, [pc, #144]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002858:	f043 0320 	orr.w	r3, r3, #32
 800285c:	6313      	str	r3, [r2, #48]	; 0x30
 800285e:	4b22      	ldr	r3, [pc, #136]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	607b      	str	r3, [r7, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	603b      	str	r3, [r7, #0]
 800286e:	4b1e      	ldr	r3, [pc, #120]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	4a1d      	ldr	r2, [pc, #116]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 8002874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002878:	6313      	str	r3, [r2, #48]	; 0x30
 800287a:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <FMC_BANK3_MspInit+0xf4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002882:	603b      	str	r3, [r7, #0]
 8002884:	683b      	ldr	r3, [r7, #0]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8002886:	2302      	movs	r3, #2
 8002888:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800288a:	2301      	movs	r3, #1
 800288c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = GPIO_AF12_FSMC;
 8002892:	230c      	movs	r3, #12
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* GPIOD configuration: GPIO_PIN_7 is  FMC_NE1 , GPIO_PIN_11 ans GPIO_PIN_12 are PSRAM_A16 and PSRAM_A17 */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 |\
 8002896:	f64d 73b3 	movw	r3, #57267	; 0xdfb3
 800289a:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_7|\
                              GPIO_PIN_11 | GPIO_PIN_12;
   
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	4812      	ldr	r0, [pc, #72]	; (80028ec <FMC_BANK3_MspInit+0xf8>)
 80028a4:	f001 fb14 	bl	8003ed0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 |\
 80028a8:	f64f 7380 	movw	r3, #65408	; 0xff80
 80028ac:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_12 |GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80028ae:	f107 0314 	add.w	r3, r7, #20
 80028b2:	4619      	mov	r1, r3
 80028b4:	480e      	ldr	r0, [pc, #56]	; (80028f0 <FMC_BANK3_MspInit+0xfc>)
 80028b6:	f001 fb0b 	bl	8003ed0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80028ba:	f24f 033f 	movw	r3, #61503	; 0xf03f
 80028be:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15; 
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80028c0:	f107 0314 	add.w	r3, r7, #20
 80028c4:	4619      	mov	r1, r3
 80028c6:	480b      	ldr	r0, [pc, #44]	; (80028f4 <FMC_BANK3_MspInit+0x100>)
 80028c8:	f001 fb02 	bl	8003ed0 <HAL_GPIO_Init>

  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80028cc:	f240 433f 	movw	r3, #1087	; 0x43f
 80028d0:	617b      	str	r3, [r7, #20]
                              GPIO_PIN_5 | GPIO_PIN_10 ; 
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80028d2:	f107 0314 	add.w	r3, r7, #20
 80028d6:	4619      	mov	r1, r3
 80028d8:	4807      	ldr	r0, [pc, #28]	; (80028f8 <FMC_BANK3_MspInit+0x104>)
 80028da:	f001 faf9 	bl	8003ed0 <HAL_GPIO_Init>
}
 80028de:	bf00      	nop
 80028e0:	3728      	adds	r7, #40	; 0x28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40021400 	.word	0x40021400
 80028f8:	40021800 	.word	0x40021800

080028fc <FMC_BANK3_Init>:

/**
  * @brief  Initializes LCD IOs.
  */ 
static void FMC_BANK3_Init(void) 
{  
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b09c      	sub	sp, #112	; 0x70
 8002900:	af00      	add	r7, sp, #0
  SRAM_HandleTypeDef hsram;
  FSMC_NORSRAM_TimingTypeDef sram_timing;

  /* Initialize the SRAM controller */
  FMC_BANK3_MspInit();
 8002902:	f7ff ff77 	bl	80027f4 <FMC_BANK3_MspInit>
  
  /*** Configure the SRAM Bank 1 ***/
  /* Configure IPs */
  hsram.Instance  = FSMC_NORSRAM_DEVICE;
 8002906:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 800290a:	623b      	str	r3, [r7, #32]
  hsram.Extended  = FSMC_NORSRAM_EXTENDED_DEVICE;
 800290c:	4b1e      	ldr	r3, [pc, #120]	; (8002988 <FMC_BANK3_Init+0x8c>)
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Timing config */
  sram_timing.AddressSetupTime      = 3;
 8002910:	2303      	movs	r3, #3
 8002912:	607b      	str	r3, [r7, #4]
  sram_timing.AddressHoldTime       = 1;
 8002914:	2301      	movs	r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
  sram_timing.DataSetupTime         = 4;
 8002918:	2304      	movs	r3, #4
 800291a:	60fb      	str	r3, [r7, #12]
  sram_timing.BusTurnAroundDuration = 1;
 800291c:	2301      	movs	r3, #1
 800291e:	613b      	str	r3, [r7, #16]
  sram_timing.CLKDivision           = 2;
 8002920:	2302      	movs	r3, #2
 8002922:	617b      	str	r3, [r7, #20]
  sram_timing.DataLatency           = 2;
 8002924:	2302      	movs	r3, #2
 8002926:	61bb      	str	r3, [r7, #24]
  sram_timing.AccessMode            = FSMC_ACCESS_MODE_A;
 8002928:	2300      	movs	r3, #0
 800292a:	61fb      	str	r3, [r7, #28]
      
  hsram.Init.NSBank             = FSMC_NORSRAM_BANK3;
 800292c:	2304      	movs	r3, #4
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
  hsram.Init.DataAddressMux     = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002930:	2300      	movs	r3, #0
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
  hsram.Init.MemoryType         = FSMC_MEMORY_TYPE_SRAM;
 8002934:	2300      	movs	r3, #0
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
  hsram.Init.MemoryDataWidth    = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002938:	2310      	movs	r3, #16
 800293a:	637b      	str	r3, [r7, #52]	; 0x34
  hsram.Init.BurstAccessMode    = FSMC_BURST_ACCESS_MODE_DISABLE;
 800293c:	2300      	movs	r3, #0
 800293e:	63bb      	str	r3, [r7, #56]	; 0x38
  hsram.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002940:	2300      	movs	r3, #0
 8002942:	63fb      	str	r3, [r7, #60]	; 0x3c
  hsram.Init.WrapMode           = FSMC_WRAP_MODE_DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	643b      	str	r3, [r7, #64]	; 0x40
  hsram.Init.WaitSignalActive   = FSMC_WAIT_TIMING_BEFORE_WS;
 8002948:	2300      	movs	r3, #0
 800294a:	647b      	str	r3, [r7, #68]	; 0x44
  hsram.Init.WriteOperation     = FSMC_WRITE_OPERATION_ENABLE;
 800294c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002950:	64bb      	str	r3, [r7, #72]	; 0x48
  hsram.Init.WaitSignal         = FSMC_WAIT_SIGNAL_DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	64fb      	str	r3, [r7, #76]	; 0x4c
  hsram.Init.ExtendedMode       = FSMC_EXTENDED_MODE_ENABLE;
 8002956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800295a:	653b      	str	r3, [r7, #80]	; 0x50
  hsram.Init.AsynchronousWait   = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 800295c:	2300      	movs	r3, #0
 800295e:	657b      	str	r3, [r7, #84]	; 0x54
  hsram.Init.WriteBurst         = FSMC_WRITE_BURST_DISABLE;
 8002960:	2300      	movs	r3, #0
 8002962:	65bb      	str	r3, [r7, #88]	; 0x58
  hsram.Init.WriteFifo          = FSMC_WRITE_FIFO_DISABLE;
 8002964:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002968:	663b      	str	r3, [r7, #96]	; 0x60
  hsram.Init.PageSize           = FSMC_PAGE_SIZE_NONE;
 800296a:	2300      	movs	r3, #0
 800296c:	667b      	str	r3, [r7, #100]	; 0x64
  hsram.Init.ContinuousClock    = FSMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800296e:	2300      	movs	r3, #0
 8002970:	65fb      	str	r3, [r7, #92]	; 0x5c

  HAL_SRAM_Init(&hsram, &sram_timing, &sram_timing);
 8002972:	1d3a      	adds	r2, r7, #4
 8002974:	1d39      	adds	r1, r7, #4
 8002976:	f107 0320 	add.w	r3, r7, #32
 800297a:	4618      	mov	r0, r3
 800297c:	f005 febc 	bl	80086f8 <HAL_SRAM_Init>
}
 8002980:	bf00      	nop
 8002982:	3770      	adds	r7, #112	; 0x70
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	a0000104 	.word	0xa0000104

0800298c <FMC_BANK3_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written 
  */
static void FMC_BANK3_WriteData(uint16_t Data) 
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	4603      	mov	r3, r0
 8002994:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3->RAM = Data;
 8002996:	f04f 42d0 	mov.w	r2, #1744830464	; 0x68000000
 800299a:	88fb      	ldrh	r3, [r7, #6]
 800299c:	8053      	strh	r3, [r2, #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800299e:	f3bf 8f4f 	dsb	sy
}
 80029a2:	bf00      	nop
  __DSB();
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <FMC_BANK3_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
static void FMC_BANK3_WriteReg(uint8_t Reg) 
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then write register */
  FMC_BANK3->REG = Reg;
 80029ba:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80029be:	79fa      	ldrb	r2, [r7, #7]
 80029c0:	b292      	uxth	r2, r2
 80029c2:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80029c4:	f3bf 8f4f 	dsb	sy
}
 80029c8:	bf00      	nop
  __DSB();
}
 80029ca:	bf00      	nop
 80029cc:	370c      	adds	r7, #12
 80029ce:	46bd      	mov	sp, r7
 80029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d4:	4770      	bx	lr

080029d6 <FMC_BANK3_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
static uint16_t FMC_BANK3_ReadData(void) 
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  return FMC_BANK3->RAM;
 80029da:	f04f 43d0 	mov.w	r3, #1744830464	; 0x68000000
 80029de:	885b      	ldrh	r3, [r3, #2]
 80029e0:	b29b      	uxth	r3, r3
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/
/**
  * @brief  Initializes LCD low level.
  */
void LCD_IO_Init(void) 
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	af00      	add	r7, sp, #0
  FMC_BANK3_Init();
 80029f0:	f7ff ff84 	bl	80028fc <FMC_BANK3_Init>
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <LCD_IO_WriteData>:
/**
  * @brief  Writes data on LCD data register.
  * @param  RegValue: Data to be written
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	80fb      	strh	r3, [r7, #6]
  /* Write 16-bit Reg */
  FMC_BANK3_WriteData(RegValue);
 8002a02:	88fb      	ldrh	r3, [r7, #6]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff ffc1 	bl	800298c <FMC_BANK3_WriteData>
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <LCD_IO_WriteReg>:
/**
  * @brief  Writes register on LCD register.
  * @param  Reg: Register to be written
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
  /* Write 16-bit Index, then Write Reg */
  FMC_BANK3_WriteReg(Reg);
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff ffc6 	bl	80029b0 <FMC_BANK3_WriteReg>
}
 8002a24:	bf00      	nop
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <LCD_IO_ReadData>:
/**
  * @brief  Reads data from LCD data register.
  * @retval Read data.
  */
uint16_t LCD_IO_ReadData(void) 
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  return FMC_BANK3_ReadData();
 8002a30:	f7ff ffd1 	bl	80029d6 <FMC_BANK3_ReadData>
 8002a34:	4603      	mov	r3, r0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <LCD_IO_Delay>:
/**
  * @brief  LCD delay
  * @param  Delay: Delay in ms
  */
void LCD_IO_Delay(uint32_t Delay)
{
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	b082      	sub	sp, #8
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f000 fbae 	bl	80031a4 <HAL_Delay>
}
 8002a48:	bf00      	nop
 8002a4a:	3708      	adds	r7, #8
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in STM32F413H_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002a58:	f000 f80e 	bl	8002a78 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b082      	sub	sp, #8
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  BSP_AUDIO_OUT_Error_CallBack();
 8002a6c:	f000 f80b 	bl	8002a86 <BSP_AUDIO_OUT_Error_CallBack>
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <BSP_AUDIO_OUT_TransferComplete_CallBack>:

/**
  * @brief  Manages the DMA full Transfer complete event.
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
}
 8002a7c:	bf00      	nop
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <BSP_AUDIO_OUT_Error_CallBack>:

/**
  * @brief  Manages the DMA FIFO error event.
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002a86:	b480      	push	{r7}
 8002a88:	af00      	add	r7, sp, #0
}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Reception complete callback.
  * @param  hi2s : I2S handle.
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002a9c:	f000 f804 	bl	8002aa8 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/**
  * @brief  User callback when record buffer is filled.
  */
__weak void BSP_AUDIO_IN_TransferComplete_CallBack(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  /* This function should be implemented by the user application.
     It is called into this driver when the current buffer is filled
     to prepare the next buffer pointer and its size. */
}
 8002aac:	bf00      	nop
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	af00      	add	r7, sp, #0
 return (BSP_LCD_InitEx(LCD_ORIENTATION_LANDSCAPE));
 8002aba:	2001      	movs	r0, #1
 8002abc:	f000 f804 	bl	8002ac8 <BSP_LCD_InitEx>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <BSP_LCD_InitEx>:
  * @param  orientation: LCD_ORIENTATION_PORTRAIT or LCD_ORIENTATION_LANDSCAPE
  *         or LCD_ORIENTATION_LANDSCAPE_ROT180
  * @retval LCD state
  */
uint8_t BSP_LCD_InitEx(uint32_t orientation)
{ 
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint8_t ret = LCD_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]

  /* Default value for draw propriety */
  DrawProp.BackColor = 0xFFFF;
 8002ad4:	4b2c      	ldr	r3, [pc, #176]	; (8002b88 <BSP_LCD_InitEx+0xc0>)
 8002ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ada:	605a      	str	r2, [r3, #4]
  DrawProp.pFont     = &Font24;
 8002adc:	4b2a      	ldr	r3, [pc, #168]	; (8002b88 <BSP_LCD_InitEx+0xc0>)
 8002ade:	4a2b      	ldr	r2, [pc, #172]	; (8002b8c <BSP_LCD_InitEx+0xc4>)
 8002ae0:	609a      	str	r2, [r3, #8]
  DrawProp.TextColor = 0x0000;
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <BSP_LCD_InitEx+0xc0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
  
  /* Initialize LCD special pins GPIOs */
  BSP_LCD_MspInit();
 8002ae8:	f000 f9f0 	bl	8002ecc <BSP_LCD_MspInit>
  
  /* Backlight control signal assertion */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002aec:	2201      	movs	r2, #1
 8002aee:	2120      	movs	r1, #32
 8002af0:	4827      	ldr	r0, [pc, #156]	; (8002b90 <BSP_LCD_InitEx+0xc8>)
 8002af2:	f001 fb81 	bl	80041f8 <HAL_GPIO_WritePin>
  
  /* Apply hardware reset according to procedure indicated in FRD154BP2901 documentation */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002af6:	2200      	movs	r2, #0
 8002af8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002afc:	4825      	ldr	r0, [pc, #148]	; (8002b94 <BSP_LCD_InitEx+0xcc>)
 8002afe:	f001 fb7b 	bl	80041f8 <HAL_GPIO_WritePin>
  HAL_Delay(5);   /* Reset signal asserted during 5ms  */
 8002b02:	2005      	movs	r0, #5
 8002b04:	f000 fb4e 	bl	80031a4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b0e:	4821      	ldr	r0, [pc, #132]	; (8002b94 <BSP_LCD_InitEx+0xcc>)
 8002b10:	f001 fb72 	bl	80041f8 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002b14:	200a      	movs	r0, #10
 8002b16:	f000 fb45 	bl	80031a4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_RESET);
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b20:	481c      	ldr	r0, [pc, #112]	; (8002b94 <BSP_LCD_InitEx+0xcc>)
 8002b22:	f001 fb69 	bl	80041f8 <HAL_GPIO_WritePin>
  HAL_Delay(20);  /* Reset signal asserted during 20ms */
 8002b26:	2014      	movs	r0, #20
 8002b28:	f000 fb3c 	bl	80031a4 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT, LCD_RESET_PIN, GPIO_PIN_SET);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b32:	4818      	ldr	r0, [pc, #96]	; (8002b94 <BSP_LCD_InitEx+0xcc>)
 8002b34:	f001 fb60 	bl	80041f8 <HAL_GPIO_WritePin>
  HAL_Delay(10);  /* Reset signal released during 10ms */
 8002b38:	200a      	movs	r0, #10
 8002b3a:	f000 fb33 	bl	80031a4 <HAL_Delay>
  
  if(ST7789H2_drv.ReadID() == ST7789H2_ID)
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <BSP_LCD_InitEx+0xd0>)
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4798      	blx	r3
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b85      	cmp	r3, #133	; 0x85
 8002b48:	d118      	bne.n	8002b7c <BSP_LCD_InitEx+0xb4>
  {    
    LcdDrv = &ST7789H2_drv;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <BSP_LCD_InitEx+0xd4>)
 8002b4c:	4a12      	ldr	r2, [pc, #72]	; (8002b98 <BSP_LCD_InitEx+0xd0>)
 8002b4e:	601a      	str	r2, [r3, #0]
    
    /* LCD Init */   
    LcdDrv->Init();
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <BSP_LCD_InitEx+0xd4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4798      	blx	r3
    
    if(orientation == LCD_ORIENTATION_PORTRAIT)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d103      	bne.n	8002b66 <BSP_LCD_InitEx+0x9e>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_PORTRAIT); 
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7ff fab3 	bl	80020ca <ST7789H2_SetOrientation>
 8002b64:	e005      	b.n	8002b72 <BSP_LCD_InitEx+0xaa>
    }
    else if(orientation == LCD_ORIENTATION_LANDSCAPE_ROT180)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d102      	bne.n	8002b72 <BSP_LCD_InitEx+0xaa>
    {
      ST7789H2_SetOrientation(ST7789H2_ORIENTATION_LANDSCAPE_ROT180);
 8002b6c:	2002      	movs	r0, #2
 8002b6e:	f7ff faac 	bl	80020ca <ST7789H2_SetOrientation>
    else
    {
      /* Default landscape orientation is selected */
    }
    /* Initialize the font */
    BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002b72:	480b      	ldr	r0, [pc, #44]	; (8002ba0 <BSP_LCD_InitEx+0xd8>)
 8002b74:	f000 f84e 	bl	8002c14 <BSP_LCD_SetFont>
    
    ret = LCD_OK;   
 8002b78:	2300      	movs	r3, #0
 8002b7a:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002b7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3710      	adds	r7, #16
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	20000554 	.word	0x20000554
 8002b8c:	20000044 	.word	0x20000044
 8002b90:	40021000 	.word	0x40021000
 8002b94:	40020400 	.word	0x40020400
 8002b98:	20000004 	.word	0x20000004
 8002b9c:	20000560 	.word	0x20000560
 8002ba0:	20000054 	.word	0x20000054

08002ba4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size. 
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelWidth());
 8002ba8:	4b03      	ldr	r3, [pc, #12]	; (8002bb8 <BSP_LCD_GetXSize+0x14>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	4798      	blx	r3
 8002bb0:	4603      	mov	r3, r0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	20000560 	.word	0x20000560

08002bbc <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size. 
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  return(LcdDrv->GetLcdPixelHeight());
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <BSP_LCD_GetYSize+0x14>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	4798      	blx	r3
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000560 	.word	0x20000560

08002bd4 <BSP_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	4603      	mov	r3, r0
 8002bdc:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	4a03      	ldr	r2, [pc, #12]	; (8002bf0 <BSP_LCD_SetTextColor+0x1c>)
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	20000554 	.word	0x20000554

08002bf4 <BSP_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 8002bfe:	88fb      	ldrh	r3, [r7, #6]
 8002c00:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <BSP_LCD_SetBackColor+0x1c>)
 8002c02:	6053      	str	r3, [r2, #4]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	20000554 	.word	0x20000554

08002c14 <BSP_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts: Font to be used
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  DrawProp.pFont = fonts;
 8002c1c:	4a04      	ldr	r2, [pc, #16]	; (8002c30 <BSP_LCD_SetFont+0x1c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6093      	str	r3, [r2, #8]
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	20000554 	.word	0x20000554

08002c34 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  */
void BSP_LCD_Clear(uint16_t Color)
{ 
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b087      	sub	sp, #28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t y_size = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  uint32_t color_backup = DrawProp.TextColor; 
 8002c46:	4b15      	ldr	r3, [pc, #84]	; (8002c9c <BSP_LCD_Clear+0x68>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	60fb      	str	r3, [r7, #12]

  DrawProp.TextColor = Color;
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	4a13      	ldr	r2, [pc, #76]	; (8002c9c <BSP_LCD_Clear+0x68>)
 8002c50:	6013      	str	r3, [r2, #0]
  y_size =  BSP_LCD_GetYSize();
 8002c52:	f7ff ffb3 	bl	8002bbc <BSP_LCD_GetYSize>
 8002c56:	6138      	str	r0, [r7, #16]
  
  for(counter = 0; counter < y_size; counter++)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	e00d      	b.n	8002c7a <BSP_LCD_Clear+0x46>
  {
    BSP_LCD_DrawHLine(0, counter, BSP_LCD_GetXSize());
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	b29c      	uxth	r4, r3
 8002c62:	f7ff ff9f 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002c66:	4603      	mov	r3, r0
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	2000      	movs	r0, #0
 8002c70:	f000 f8f2 	bl	8002e58 <BSP_LCD_DrawHLine>
  for(counter = 0; counter < y_size; counter++)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d3ed      	bcc.n	8002c5e <BSP_LCD_Clear+0x2a>
  }
  DrawProp.TextColor = color_backup; 
 8002c82:	4a06      	ldr	r2, [pc, #24]	; (8002c9c <BSP_LCD_Clear+0x68>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6013      	str	r3, [r2, #0]
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8002c88:	4b04      	ldr	r3, [pc, #16]	; (8002c9c <BSP_LCD_Clear+0x68>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ffa0 	bl	8002bd4 <BSP_LCD_SetTextColor>
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd90      	pop	{r4, r7, pc}
 8002c9c:	20000554 	.word	0x20000554

08002ca0 <BSP_LCD_DisplayChar>:
  * @param  Ypos: Line where to display the character shape.
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	80fb      	strh	r3, [r7, #6]
 8002caa:	460b      	mov	r3, r1
 8002cac:	80bb      	strh	r3, [r7, #4]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002cb2:	4b0f      	ldr	r3, [pc, #60]	; (8002cf0 <BSP_LCD_DisplayChar+0x50>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	78fb      	ldrb	r3, [r7, #3]
 8002cba:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002cbc:	490c      	ldr	r1, [pc, #48]	; (8002cf0 <BSP_LCD_DisplayChar+0x50>)
 8002cbe:	6889      	ldr	r1, [r1, #8]
 8002cc0:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002cc2:	fb03 f101 	mul.w	r1, r3, r1
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <BSP_LCD_DisplayChar+0x50>)
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	889b      	ldrh	r3, [r3, #4]
 8002ccc:	3307      	adds	r3, #7
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	da00      	bge.n	8002cd4 <BSP_LCD_DisplayChar+0x34>
 8002cd2:	3307      	adds	r3, #7
 8002cd4:	10db      	asrs	r3, r3, #3
 8002cd6:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8002cda:	441a      	add	r2, r3
 8002cdc:	88b9      	ldrh	r1, [r7, #4]
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f000 f94f 	bl	8002f84 <DrawChar>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000554 	.word	0x20000554

08002cf4 <BSP_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 8002cf4:	b590      	push	{r4, r7, lr}
 8002cf6:	b089      	sub	sp, #36	; 0x24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60ba      	str	r2, [r7, #8]
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4603      	mov	r3, r0
 8002d00:	81fb      	strh	r3, [r7, #14]
 8002d02:	460b      	mov	r3, r1
 8002d04:	81bb      	strh	r3, [r7, #12]
 8002d06:	4613      	mov	r3, r2
 8002d08:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	83fb      	strh	r3, [r7, #30]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002d1e:	e002      	b.n	8002d26 <BSP_LCD_DisplayStringAt+0x32>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	3301      	adds	r3, #1
 8002d24:	61bb      	str	r3, [r7, #24]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1c5a      	adds	r2, r3, #1
 8002d2a:	617a      	str	r2, [r7, #20]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f6      	bne.n	8002d20 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 8002d32:	f7ff ff37 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002d36:	4602      	mov	r2, r0
 8002d38:	4b38      	ldr	r3, [pc, #224]	; (8002e1c <BSP_LCD_DisplayStringAt+0x128>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	889b      	ldrh	r3, [r3, #4]
 8002d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d42:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002d44:	79fb      	ldrb	r3, [r7, #7]
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d014      	beq.n	8002d74 <BSP_LCD_DisplayStringAt+0x80>
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	dc23      	bgt.n	8002d96 <BSP_LCD_DisplayStringAt+0xa2>
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d002      	beq.n	8002d58 <BSP_LCD_DisplayStringAt+0x64>
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d011      	beq.n	8002d7a <BSP_LCD_DisplayStringAt+0x86>
 8002d56:	e01e      	b.n	8002d96 <BSP_LCD_DisplayStringAt+0xa2>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	1ad3      	subs	r3, r2, r3
 8002d5e:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <BSP_LCD_DisplayStringAt+0x128>)
 8002d60:	6892      	ldr	r2, [r2, #8]
 8002d62:	8892      	ldrh	r2, [r2, #4]
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	085b      	lsrs	r3, r3, #1
 8002d6a:	b29a      	uxth	r2, r3
 8002d6c:	89fb      	ldrh	r3, [r7, #14]
 8002d6e:	4413      	add	r3, r2
 8002d70:	83fb      	strh	r3, [r7, #30]
      break;
 8002d72:	e013      	b.n	8002d9c <BSP_LCD_DisplayStringAt+0xa8>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8002d74:	89fb      	ldrh	r3, [r7, #14]
 8002d76:	83fb      	strh	r3, [r7, #30]
      break;
 8002d78:	e010      	b.n	8002d9c <BSP_LCD_DisplayStringAt+0xa8>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <BSP_LCD_DisplayStringAt+0x128>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	889b      	ldrh	r3, [r3, #4]
 8002d88:	fb12 f303 	smulbb	r3, r2, r3
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	89fb      	ldrh	r3, [r7, #14]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	83fb      	strh	r3, [r7, #30]
      break;
 8002d94:	e002      	b.n	8002d9c <BSP_LCD_DisplayStringAt+0xa8>
    }    
  default:
    {
      refcolumn = Xpos;
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	83fb      	strh	r3, [r7, #30]
      break;
 8002d9a:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 8002d9c:	8bfb      	ldrh	r3, [r7, #30]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <BSP_LCD_DisplayStringAt+0xb6>
 8002da2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	da15      	bge.n	8002dd6 <BSP_LCD_DisplayStringAt+0xe2>
  {
    refcolumn = 1;
 8002daa:	2301      	movs	r3, #1
 8002dac:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002dae:	e012      	b.n	8002dd6 <BSP_LCD_DisplayStringAt+0xe2>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	89b9      	ldrh	r1, [r7, #12]
 8002db6:	8bfb      	ldrh	r3, [r7, #30]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff71 	bl	8002ca0 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8002dbe:	4b17      	ldr	r3, [pc, #92]	; (8002e1c <BSP_LCD_DisplayStringAt+0x128>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	889a      	ldrh	r2, [r3, #4]
 8002dc4:	8bfb      	ldrh	r3, [r7, #30]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	60bb      	str	r3, [r7, #8]
    i++;
 8002dd0:	8bbb      	ldrh	r3, [r7, #28]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	bf14      	ite	ne
 8002dde:	2301      	movne	r3, #1
 8002de0:	2300      	moveq	r3, #0
 8002de2:	b2dc      	uxtb	r4, r3
 8002de4:	f7ff fede 	bl	8002ba4 <BSP_LCD_GetXSize>
 8002de8:	4601      	mov	r1, r0
 8002dea:	8bbb      	ldrh	r3, [r7, #28]
 8002dec:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <BSP_LCD_DisplayStringAt+0x128>)
 8002dee:	6892      	ldr	r2, [r2, #8]
 8002df0:	8892      	ldrh	r2, [r2, #4]
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	1acb      	subs	r3, r1, r3
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <BSP_LCD_DisplayStringAt+0x128>)
 8002dfc:	6892      	ldr	r2, [r2, #8]
 8002dfe:	8892      	ldrh	r2, [r2, #4]
 8002e00:	4293      	cmp	r3, r2
 8002e02:	bf2c      	ite	cs
 8002e04:	2301      	movcs	r3, #1
 8002e06:	2300      	movcc	r3, #0
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	4023      	ands	r3, r4
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1ce      	bne.n	8002db0 <BSP_LCD_DisplayStringAt+0xbc>
  }
}
 8002e12:	bf00      	nop
 8002e14:	bf00      	nop
 8002e16:	3724      	adds	r7, #36	; 0x24
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd90      	pop	{r4, r7, pc}
 8002e1c:	20000554 	.word	0x20000554

08002e20 <BSP_LCD_DrawPixel>:
  * @param  Xpos: X position 
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	80bb      	strh	r3, [r7, #4]
 8002e2e:	4613      	mov	r3, r2
 8002e30:	807b      	strh	r3, [r7, #2]
  if(LcdDrv->WritePixel != NULL)
 8002e32:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <BSP_LCD_DrawPixel+0x34>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d006      	beq.n	8002e4a <BSP_LCD_DrawPixel+0x2a>
  {
    LcdDrv->WritePixel(Xpos, Ypos, RGB_Code);
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <BSP_LCD_DrawPixel+0x34>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695b      	ldr	r3, [r3, #20]
 8002e42:	887a      	ldrh	r2, [r7, #2]
 8002e44:	88b9      	ldrh	r1, [r7, #4]
 8002e46:	88f8      	ldrh	r0, [r7, #6]
 8002e48:	4798      	blx	r3
  }
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000560 	.word	0x20000560

08002e58 <BSP_LCD_DrawHLine>:
  * @param  Xpos: X position
  * @param  Ypos: Y position
  * @param  Length: Line length
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e58:	b590      	push	{r4, r7, lr}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	4603      	mov	r3, r0
 8002e60:	80fb      	strh	r3, [r7, #6]
 8002e62:	460b      	mov	r3, r1
 8002e64:	80bb      	strh	r3, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	60fb      	str	r3, [r7, #12]
  
  if(LcdDrv->DrawHLine != NULL)
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <BSP_LCD_DrawHLine+0x6c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00a      	beq.n	8002e8e <BSP_LCD_DrawHLine+0x36>
  {
    LcdDrv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8002e78:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <BSP_LCD_DrawHLine+0x6c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6a1c      	ldr	r4, [r3, #32]
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <BSP_LCD_DrawHLine+0x70>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	b298      	uxth	r0, r3
 8002e84:	887b      	ldrh	r3, [r7, #2]
 8002e86:	88ba      	ldrh	r2, [r7, #4]
 8002e88:	88f9      	ldrh	r1, [r7, #6]
 8002e8a:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8002e8c:	e015      	b.n	8002eba <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	e00e      	b.n	8002eb2 <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	88fb      	ldrh	r3, [r7, #6]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <BSP_LCD_DrawHLine+0x70>)
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	88b9      	ldrh	r1, [r7, #4]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff ffba 	bl	8002e20 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	887b      	ldrh	r3, [r7, #2]
 8002eb4:	68fa      	ldr	r2, [r7, #12]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d3ec      	bcc.n	8002e94 <BSP_LCD_DrawHLine+0x3c>
}
 8002eba:	bf00      	nop
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd90      	pop	{r4, r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000560 	.word	0x20000560
 8002ec8:	20000554 	.word	0x20000554

08002ecc <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LCD GPIO special pins MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIOs clock */
  LCD_RESET_GPIO_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <BSP_LCD_MspInit+0xac>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <BSP_LCD_MspInit+0xac>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <BSP_LCD_MspInit+0xac>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
  LCD_TE_GPIO_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	607b      	str	r3, [r7, #4]
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <BSP_LCD_MspInit+0xac>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <BSP_LCD_MspInit+0xac>)
 8002ef8:	f043 0302 	orr.w	r3, r3, #2
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <BSP_LCD_MspInit+0xac>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	607b      	str	r3, [r7, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	603b      	str	r3, [r7, #0]
 8002f0e:	4b1a      	ldr	r3, [pc, #104]	; (8002f78 <BSP_LCD_MspInit+0xac>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <BSP_LCD_MspInit+0xac>)
 8002f14:	f043 0310 	orr.w	r3, r3, #16
 8002f18:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <BSP_LCD_MspInit+0xac>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	f003 0310 	and.w	r3, r3, #16
 8002f22:	603b      	str	r3, [r7, #0]
 8002f24:	683b      	ldr	r3, [r7, #0]

  /* LCD_RESET GPIO configuration */
  gpio_init_structure.Pin       = LCD_RESET_PIN;     /* LCD_RESET pin has to be manually controlled */
 8002f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f2a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8002f30:	2302      	movs	r3, #2
 8002f32:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f34:	2301      	movs	r3, #1
 8002f36:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT, &gpio_init_structure);
 8002f38:	f107 030c 	add.w	r3, r7, #12
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	480f      	ldr	r0, [pc, #60]	; (8002f7c <BSP_LCD_MspInit+0xb0>)
 8002f40:	f000 ffc6 	bl	8003ed0 <HAL_GPIO_Init>

  /* LCD_TE GPIO configuration */
  gpio_init_structure.Pin       = LCD_TE_PIN;        /* LCD_TE pin has to be manually managed */
 8002f44:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002f48:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8002f4e:	f107 030c 	add.w	r3, r7, #12
 8002f52:	4619      	mov	r1, r3
 8002f54:	4809      	ldr	r0, [pc, #36]	; (8002f7c <BSP_LCD_MspInit+0xb0>)
 8002f56:	f000 ffbb 	bl	8003ed0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;   /* LCD_BL_CTRL pin has to be manually controlled */
 8002f5a:	2320      	movs	r3, #32
 8002f5c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8002f62:	f107 030c 	add.w	r3, r7, #12
 8002f66:	4619      	mov	r1, r3
 8002f68:	4805      	ldr	r0, [pc, #20]	; (8002f80 <BSP_LCD_MspInit+0xb4>)
 8002f6a:	f000 ffb1 	bl	8003ed0 <HAL_GPIO_Init>
}
 8002f6e:	bf00      	nop
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	40021000 	.word	0x40021000

08002f84 <DrawChar>:
  * @param  Xpos: Line where to display the character shape
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	603a      	str	r2, [r7, #0]
 8002f8e:	80fb      	strh	r3, [r7, #6]
 8002f90:	460b      	mov	r3, r1
 8002f92:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	61fb      	str	r3, [r7, #28]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line;
  
  height = DrawProp.pFont->Height;
 8002f9c:	4b45      	ldr	r3, [pc, #276]	; (80030b4 <DrawChar+0x130>)
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	88db      	ldrh	r3, [r3, #6]
 8002fa2:	827b      	strh	r3, [r7, #18]
  width  = DrawProp.pFont->Width;
 8002fa4:	4b43      	ldr	r3, [pc, #268]	; (80030b4 <DrawChar+0x130>)
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	889b      	ldrh	r3, [r3, #4]
 8002faa:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8002fac:	8a3b      	ldrh	r3, [r7, #16]
 8002fae:	3307      	adds	r3, #7
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	da00      	bge.n	8002fb6 <DrawChar+0x32>
 8002fb4:	3307      	adds	r3, #7
 8002fb6:	10db      	asrs	r3, r3, #3
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	b2da      	uxtb	r2, r3
 8002fbe:	8a3b      	ldrh	r3, [r7, #16]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e069      	b.n	80030a0 <DrawChar+0x11c>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8002fcc:	8a3b      	ldrh	r3, [r7, #16]
 8002fce:	3307      	adds	r3, #7
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	da00      	bge.n	8002fd6 <DrawChar+0x52>
 8002fd4:	3307      	adds	r3, #7
 8002fd6:	10db      	asrs	r3, r3, #3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fb02 f303 	mul.w	r3, r2, r3
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8002fe6:	8a3b      	ldrh	r3, [r7, #16]
 8002fe8:	3307      	adds	r3, #7
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	da00      	bge.n	8002ff0 <DrawChar+0x6c>
 8002fee:	3307      	adds	r3, #7
 8002ff0:	10db      	asrs	r3, r3, #3
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d002      	beq.n	8002ffc <DrawChar+0x78>
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d004      	beq.n	8003004 <DrawChar+0x80>
 8002ffa:	e00c      	b.n	8003016 <DrawChar+0x92>
    {
    case 1:
      line =  pchar[0];
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	617b      	str	r3, [r7, #20]
      break;    
 8003002:	e016      	b.n	8003032 <DrawChar+0xae>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	021b      	lsls	r3, r3, #8
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	3201      	adds	r2, #1
 800300e:	7812      	ldrb	r2, [r2, #0]
 8003010:	4313      	orrs	r3, r2
 8003012:	617b      	str	r3, [r7, #20]
      break;
 8003014:	e00d      	b.n	8003032 <DrawChar+0xae>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	041a      	lsls	r2, r3, #16
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	3301      	adds	r3, #1
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	021b      	lsls	r3, r3, #8
 8003024:	4313      	orrs	r3, r2
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	3202      	adds	r2, #2
 800302a:	7812      	ldrb	r2, [r2, #0]
 800302c:	4313      	orrs	r3, r2
 800302e:	617b      	str	r3, [r7, #20]
      break;
 8003030:	bf00      	nop
    }  
    
    for (j = 0; j < width; j++)
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
 8003036:	e029      	b.n	800308c <DrawChar+0x108>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003038:	8a3a      	ldrh	r2, [r7, #16]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	4413      	add	r3, r2
 8003042:	3b01      	subs	r3, #1
 8003044:	2201      	movs	r2, #1
 8003046:	fa02 f303 	lsl.w	r3, r2, r3
 800304a:	461a      	mov	r2, r3
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	4013      	ands	r3, r2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d00c      	beq.n	800306e <DrawChar+0xea>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.TextColor);
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	b29a      	uxth	r2, r3
 8003058:	88fb      	ldrh	r3, [r7, #6]
 800305a:	4413      	add	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	4a15      	ldr	r2, [pc, #84]	; (80030b4 <DrawChar+0x130>)
 8003060:	6812      	ldr	r2, [r2, #0]
 8003062:	b292      	uxth	r2, r2
 8003064:	88b9      	ldrh	r1, [r7, #4]
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff feda 	bl	8002e20 <BSP_LCD_DrawPixel>
 800306c:	e00b      	b.n	8003086 <DrawChar+0x102>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp.BackColor);
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	b29a      	uxth	r2, r3
 8003072:	88fb      	ldrh	r3, [r7, #6]
 8003074:	4413      	add	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	4a0e      	ldr	r2, [pc, #56]	; (80030b4 <DrawChar+0x130>)
 800307a:	6852      	ldr	r2, [r2, #4]
 800307c:	b292      	uxth	r2, r2
 800307e:	88b9      	ldrh	r1, [r7, #4]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff fecd 	bl	8002e20 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	3301      	adds	r3, #1
 800308a:	61bb      	str	r3, [r7, #24]
 800308c:	8a3b      	ldrh	r3, [r7, #16]
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	429a      	cmp	r2, r3
 8003092:	d3d1      	bcc.n	8003038 <DrawChar+0xb4>
      } 
    }
    Ypos++;
 8003094:	88bb      	ldrh	r3, [r7, #4]
 8003096:	3301      	adds	r3, #1
 8003098:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	3301      	adds	r3, #1
 800309e:	61fb      	str	r3, [r7, #28]
 80030a0:	8a7b      	ldrh	r3, [r7, #18]
 80030a2:	69fa      	ldr	r2, [r7, #28]
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d391      	bcc.n	8002fcc <DrawChar+0x48>
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000554 	.word	0x20000554

080030b8 <HAL_SD_AbortCallback>:
/**
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80030c0:	f000 f818 	bl	80030f4 <BSP_SD_AbortCallback>
}
 80030c4:	bf00      	nop
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <HAL_SD_TxCpltCallback>:
/**
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80030d4:	f000 f815 	bl	8003102 <BSP_SD_WriteCpltCallback>
}
 80030d8:	bf00      	nop
 80030da:	3708      	adds	r7, #8
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_SD_RxCpltCallback>:
/**
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80030e8:	f000 f812 	bl	8003110 <BSP_SD_ReadCpltCallback>
}
 80030ec:	bf00      	nop
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <BSP_SD_AbortCallback>:

/**
  * @brief BSP SD Abort callbacks
  */
__weak void BSP_SD_AbortCallback(void)
{
 80030f4:	b480      	push	{r7}
 80030f6:	af00      	add	r7, sp, #0

}
 80030f8:	bf00      	nop
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <BSP_SD_WriteCpltCallback>:

/**
  * @brief BSP Tx Transfer completed callbacks
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8003102:	b480      	push	{r7}
 8003104:	af00      	add	r7, sp, #0

}
 8003106:	bf00      	nop
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <BSP_SD_ReadCpltCallback>:

/**
  * @brief BSP Rx Transfer completed callbacks
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8003110:	b480      	push	{r7}
 8003112:	af00      	add	r7, sp, #0

}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
	...

08003120 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003124:	4b0e      	ldr	r3, [pc, #56]	; (8003160 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a0d      	ldr	r2, [pc, #52]	; (8003160 <HAL_Init+0x40>)
 800312a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800312e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003130:	4b0b      	ldr	r3, [pc, #44]	; (8003160 <HAL_Init+0x40>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a0a      	ldr	r2, [pc, #40]	; (8003160 <HAL_Init+0x40>)
 8003136:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800313a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <HAL_Init+0x40>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a07      	ldr	r2, [pc, #28]	; (8003160 <HAL_Init+0x40>)
 8003142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003146:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003148:	2003      	movs	r0, #3
 800314a:	f000 fb6e 	bl	800382a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800314e:	2000      	movs	r0, #0
 8003150:	f7fe fdb8 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003154:	f7fe f832 	bl	80011bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	40023c00 	.word	0x40023c00

08003164 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003164:	b480      	push	{r7}
 8003166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003168:	4b06      	ldr	r3, [pc, #24]	; (8003184 <HAL_IncTick+0x20>)
 800316a:	781b      	ldrb	r3, [r3, #0]
 800316c:	461a      	mov	r2, r3
 800316e:	4b06      	ldr	r3, [pc, #24]	; (8003188 <HAL_IncTick+0x24>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4413      	add	r3, r2
 8003174:	4a04      	ldr	r2, [pc, #16]	; (8003188 <HAL_IncTick+0x24>)
 8003176:	6013      	str	r3, [r2, #0]
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	20000060 	.word	0x20000060
 8003188:	20000564 	.word	0x20000564

0800318c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return uwTick;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_GetTick+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000564 	.word	0x20000564

080031a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b084      	sub	sp, #16
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7ff ffee 	bl	800318c <HAL_GetTick>
 80031b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d005      	beq.n	80031ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031be:	4b0a      	ldr	r3, [pc, #40]	; (80031e8 <HAL_Delay+0x44>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	461a      	mov	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4413      	add	r3, r2
 80031c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031ca:	bf00      	nop
 80031cc:	f7ff ffde 	bl	800318c <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	429a      	cmp	r2, r3
 80031da:	d8f7      	bhi.n	80031cc <HAL_Delay+0x28>
  {
  }
}
 80031dc:	bf00      	nop
 80031de:	bf00      	nop
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20000060 	.word	0x20000060

080031ec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e033      	b.n	800326a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	2b00      	cmp	r3, #0
 8003208:	d109      	bne.n	800321e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f7fe f804 	bl	8001218 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d118      	bne.n	800325c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003232:	f023 0302 	bic.w	r3, r3, #2
 8003236:	f043 0202 	orr.w	r2, r3, #2
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 f94a 	bl	80034d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	f043 0201 	orr.w	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	641a      	str	r2, [r3, #64]	; 0x40
 800325a:	e001      	b.n	8003260 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003268:	7bfb      	ldrb	r3, [r7, #15]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
	...

08003274 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_ADC_ConfigChannel+0x1c>
 800328c:	2302      	movs	r3, #2
 800328e:	e113      	b.n	80034b8 <HAL_ADC_ConfigChannel+0x244>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2b09      	cmp	r3, #9
 800329e:	d925      	bls.n	80032ec <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68d9      	ldr	r1, [r3, #12]
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	b29b      	uxth	r3, r3
 80032ac:	461a      	mov	r2, r3
 80032ae:	4613      	mov	r3, r2
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	4413      	add	r3, r2
 80032b4:	3b1e      	subs	r3, #30
 80032b6:	2207      	movs	r2, #7
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43da      	mvns	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	400a      	ands	r2, r1
 80032c4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68d9      	ldr	r1, [r3, #12]
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	689a      	ldr	r2, [r3, #8]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	4618      	mov	r0, r3
 80032d8:	4603      	mov	r3, r0
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4403      	add	r3, r0
 80032de:	3b1e      	subs	r3, #30
 80032e0:	409a      	lsls	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	e022      	b.n	8003332 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6919      	ldr	r1, [r3, #16]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	461a      	mov	r2, r3
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	2207      	movs	r2, #7
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	43da      	mvns	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	400a      	ands	r2, r1
 800330e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6919      	ldr	r1, [r3, #16]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	b29b      	uxth	r3, r3
 8003320:	4618      	mov	r0, r3
 8003322:	4603      	mov	r3, r0
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4403      	add	r3, r0
 8003328:	409a      	lsls	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b06      	cmp	r3, #6
 8003338:	d824      	bhi.n	8003384 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685a      	ldr	r2, [r3, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	3b05      	subs	r3, #5
 800334c:	221f      	movs	r2, #31
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43da      	mvns	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	400a      	ands	r2, r1
 800335a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	b29b      	uxth	r3, r3
 8003368:	4618      	mov	r0, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685a      	ldr	r2, [r3, #4]
 800336e:	4613      	mov	r3, r2
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	3b05      	subs	r3, #5
 8003376:	fa00 f203 	lsl.w	r2, r0, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	635a      	str	r2, [r3, #52]	; 0x34
 8003382:	e04c      	b.n	800341e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	2b0c      	cmp	r3, #12
 800338a:	d824      	bhi.n	80033d6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	3b23      	subs	r3, #35	; 0x23
 800339e:	221f      	movs	r2, #31
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	43da      	mvns	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	400a      	ands	r2, r1
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	4618      	mov	r0, r3
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	4613      	mov	r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	4413      	add	r3, r2
 80033c6:	3b23      	subs	r3, #35	; 0x23
 80033c8:	fa00 f203 	lsl.w	r2, r0, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30
 80033d4:	e023      	b.n	800341e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	4613      	mov	r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	3b41      	subs	r3, #65	; 0x41
 80033e8:	221f      	movs	r2, #31
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43da      	mvns	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	400a      	ands	r2, r1
 80033f6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	b29b      	uxth	r3, r3
 8003404:	4618      	mov	r0, r3
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	3b41      	subs	r3, #65	; 0x41
 8003412:	fa00 f203 	lsl.w	r2, r0, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	430a      	orrs	r2, r1
 800341c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800341e:	4b29      	ldr	r3, [pc, #164]	; (80034c4 <HAL_ADC_ConfigChannel+0x250>)
 8003420:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a28      	ldr	r2, [pc, #160]	; (80034c8 <HAL_ADC_ConfigChannel+0x254>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d10f      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1d8>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2b12      	cmp	r3, #18
 8003432:	d10b      	bne.n	800344c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a1d      	ldr	r2, [pc, #116]	; (80034c8 <HAL_ADC_ConfigChannel+0x254>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d12b      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x23a>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a1c      	ldr	r2, [pc, #112]	; (80034cc <HAL_ADC_ConfigChannel+0x258>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <HAL_ADC_ConfigChannel+0x1f4>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b11      	cmp	r3, #17
 8003466:	d122      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a11      	ldr	r2, [pc, #68]	; (80034cc <HAL_ADC_ConfigChannel+0x258>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d111      	bne.n	80034ae <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800348a:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_ADC_ConfigChannel+0x25c>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <HAL_ADC_ConfigChannel+0x260>)
 8003490:	fba2 2303 	umull	r2, r3, r2, r3
 8003494:	0c9a      	lsrs	r2, r3, #18
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	005b      	lsls	r3, r3, #1
 800349e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034a0:	e002      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f9      	bne.n	80034a2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr
 80034c4:	40012300 	.word	0x40012300
 80034c8:	40012000 	.word	0x40012000
 80034cc:	10000012 	.word	0x10000012
 80034d0:	20000000 	.word	0x20000000
 80034d4:	431bde83 	.word	0x431bde83

080034d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034e0:	4b79      	ldr	r3, [pc, #484]	; (80036c8 <ADC_Init+0x1f0>)
 80034e2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800350c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6859      	ldr	r1, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	691b      	ldr	r3, [r3, #16]
 8003518:	021a      	lsls	r2, r3, #8
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685a      	ldr	r2, [r3, #4]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003530:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689a      	ldr	r2, [r3, #8]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	689a      	ldr	r2, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003552:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6899      	ldr	r1, [r3, #8]
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	4a58      	ldr	r2, [pc, #352]	; (80036cc <ADC_Init+0x1f4>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d022      	beq.n	80035b6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689a      	ldr	r2, [r3, #8]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800357e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6899      	ldr	r1, [r3, #8]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	430a      	orrs	r2, r1
 8003590:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6899      	ldr	r1, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	430a      	orrs	r2, r1
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	e00f      	b.n	80035d6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80035d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f022 0202 	bic.w	r2, r2, #2
 80035e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	6899      	ldr	r1, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	7e1b      	ldrb	r3, [r3, #24]
 80035f0:	005a      	lsls	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01b      	beq.n	800363c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003612:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685a      	ldr	r2, [r3, #4]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003622:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362e:	3b01      	subs	r3, #1
 8003630:	035a      	lsls	r2, r3, #13
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	605a      	str	r2, [r3, #4]
 800363a:	e007      	b.n	800364c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800364a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800365a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	69db      	ldr	r3, [r3, #28]
 8003666:	3b01      	subs	r3, #1
 8003668:	051a      	lsls	r2, r3, #20
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	430a      	orrs	r2, r1
 8003670:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003680:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6899      	ldr	r1, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800368e:	025a      	lsls	r2, r3, #9
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	689a      	ldr	r2, [r3, #8]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	6899      	ldr	r1, [r3, #8]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695b      	ldr	r3, [r3, #20]
 80036b2:	029a      	lsls	r2, r3, #10
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	609a      	str	r2, [r3, #8]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	40012300 	.word	0x40012300
 80036cc:	0f000001 	.word	0x0f000001

080036d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <__NVIC_SetPriorityGrouping+0x44>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036ec:	4013      	ands	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003702:	4a04      	ldr	r2, [pc, #16]	; (8003714 <__NVIC_SetPriorityGrouping+0x44>)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	60d3      	str	r3, [r2, #12]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <__NVIC_GetPriorityGrouping+0x18>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	f003 0307 	and.w	r3, r3, #7
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	2b00      	cmp	r3, #0
 8003744:	db0b      	blt.n	800375e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	f003 021f 	and.w	r2, r3, #31
 800374c:	4907      	ldr	r1, [pc, #28]	; (800376c <__NVIC_EnableIRQ+0x38>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	2001      	movs	r0, #1
 8003756:	fa00 f202 	lsl.w	r2, r0, r2
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000e100 	.word	0xe000e100

08003770 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	2b00      	cmp	r3, #0
 8003782:	db0a      	blt.n	800379a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	490c      	ldr	r1, [pc, #48]	; (80037bc <__NVIC_SetPriority+0x4c>)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	0112      	lsls	r2, r2, #4
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	440b      	add	r3, r1
 8003794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003798:	e00a      	b.n	80037b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4908      	ldr	r1, [pc, #32]	; (80037c0 <__NVIC_SetPriority+0x50>)
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	3b04      	subs	r3, #4
 80037a8:	0112      	lsls	r2, r2, #4
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	440b      	add	r3, r1
 80037ae:	761a      	strb	r2, [r3, #24]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000e100 	.word	0xe000e100
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	; 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f1c3 0307 	rsb	r3, r3, #7
 80037de:	2b04      	cmp	r3, #4
 80037e0:	bf28      	it	cs
 80037e2:	2304      	movcs	r3, #4
 80037e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2b06      	cmp	r3, #6
 80037ec:	d902      	bls.n	80037f4 <NVIC_EncodePriority+0x30>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3b03      	subs	r3, #3
 80037f2:	e000      	b.n	80037f6 <NVIC_EncodePriority+0x32>
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f8:	f04f 32ff 	mov.w	r2, #4294967295
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43da      	mvns	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	401a      	ands	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800380c:	f04f 31ff 	mov.w	r1, #4294967295
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	43d9      	mvns	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	4313      	orrs	r3, r2
         );
}
 800381e:	4618      	mov	r0, r3
 8003820:	3724      	adds	r7, #36	; 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr

0800382a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b082      	sub	sp, #8
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ff4c 	bl	80036d0 <__NVIC_SetPriorityGrouping>
}
 8003838:	bf00      	nop
 800383a:	3708      	adds	r7, #8
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af00      	add	r7, sp, #0
 8003846:	4603      	mov	r3, r0
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003852:	f7ff ff61 	bl	8003718 <__NVIC_GetPriorityGrouping>
 8003856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	68b9      	ldr	r1, [r7, #8]
 800385c:	6978      	ldr	r0, [r7, #20]
 800385e:	f7ff ffb1 	bl	80037c4 <NVIC_EncodePriority>
 8003862:	4602      	mov	r2, r0
 8003864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003868:	4611      	mov	r1, r2
 800386a:	4618      	mov	r0, r3
 800386c:	f7ff ff80 	bl	8003770 <__NVIC_SetPriority>
}
 8003870:	bf00      	nop
 8003872:	3718      	adds	r7, #24
 8003874:	46bd      	mov	sp, r7
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	4618      	mov	r0, r3
 8003888:	f7ff ff54 	bl	8003734 <__NVIC_EnableIRQ>
}
 800388c:	bf00      	nop
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e014      	b.n	80038d0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	791b      	ldrb	r3, [r3, #4]
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d105      	bne.n	80038bc <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fd fd2a 	bl	8001310 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2202      	movs	r2, #2
 80038c0:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80038ce:	2300      	movs	r3, #0
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	d118      	bne.n	8003922 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2204      	movs	r2, #4
 80038f4:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f043 0201 	orr.w	r2, r3, #1
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800390a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800391a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 f825 	bl	800396c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003928:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003930:	d118      	bne.n	8003964 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2204      	movs	r2, #4
 8003936:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f043 0202 	orr.w	r2, r3, #2
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800394c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800395c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f000 f85b 	bl	8003a1a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003980:	b480      	push	{r7}
 8003982:	b087      	sub	sp, #28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	2300      	movs	r3, #0
 8003992:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	795b      	ldrb	r3, [r3, #5]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d101      	bne.n	80039a0 <HAL_DAC_ConfigChannel+0x20>
 800399c:	2302      	movs	r3, #2
 800399e:	e036      	b.n	8003a0e <HAL_DAC_ConfigChannel+0x8e>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2202      	movs	r2, #2
 80039aa:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80039b4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	4013      	ands	r3, r2
 80039c4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	fa02 f303 	lsl.w	r3, r2, r3
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4313      	orrs	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6819      	ldr	r1, [r3, #0]
 80039ee:	22c0      	movs	r2, #192	; 0xc0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	400a      	ands	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2201      	movs	r2, #1
 8003a04:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	371c      	adds	r7, #28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr

08003a1a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003a1a:	b480      	push	{r7}
 8003a1c:	b083      	sub	sp, #12
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8003a22:	bf00      	nop
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
	...

08003a30 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  DFSDM_Channel_HandleTypeDef  **channelHandleTable;
  DFSDM_Channel_TypeDef*       channel0Instance;
#endif /* defined(DFSDM2_Channel0) */
  
  /* Check DFSDM Channel handle */
  if(hdfsdm_channel == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e0cf      	b.n	8003be2 <HAL_DFSDM_ChannelInit+0x1b2>
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));
  
#if defined(DFSDM2_Channel0)
  /* Get channel counter, channel handle table and channel 0 instance */
  if(IS_DFSDM1_CHANNEL_INSTANCE(hdfsdm_channel->Instance))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a69      	ldr	r2, [pc, #420]	; (8003bec <HAL_DFSDM_ChannelInit+0x1bc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00e      	beq.n	8003a6a <HAL_DFSDM_ChannelInit+0x3a>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a67      	ldr	r2, [pc, #412]	; (8003bf0 <HAL_DFSDM_ChannelInit+0x1c0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_DFSDM_ChannelInit+0x3a>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a66      	ldr	r2, [pc, #408]	; (8003bf4 <HAL_DFSDM_ChannelInit+0x1c4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_DFSDM_ChannelInit+0x3a>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a64      	ldr	r2, [pc, #400]	; (8003bf8 <HAL_DFSDM_ChannelInit+0x1c8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d106      	bne.n	8003a78 <HAL_DFSDM_ChannelInit+0x48>
  {
    channelCounterPtr  = &v_dfsdm1ChannelCounter;
 8003a6a:	4b64      	ldr	r3, [pc, #400]	; (8003bfc <HAL_DFSDM_ChannelInit+0x1cc>)
 8003a6c:	617b      	str	r3, [r7, #20]
    channelHandleTable =  a_dfsdm1ChannelHandle;
 8003a6e:	4b64      	ldr	r3, [pc, #400]	; (8003c00 <HAL_DFSDM_ChannelInit+0x1d0>)
 8003a70:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM1_Channel0;
 8003a72:	4b5e      	ldr	r3, [pc, #376]	; (8003bec <HAL_DFSDM_ChannelInit+0x1bc>)
 8003a74:	60fb      	str	r3, [r7, #12]
 8003a76:	e005      	b.n	8003a84 <HAL_DFSDM_ChannelInit+0x54>
  }
  else
  {
    channelCounterPtr  = &v_dfsdm2ChannelCounter;
 8003a78:	4b62      	ldr	r3, [pc, #392]	; (8003c04 <HAL_DFSDM_ChannelInit+0x1d4>)
 8003a7a:	617b      	str	r3, [r7, #20]
    channelHandleTable = a_dfsdm2ChannelHandle;
 8003a7c:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <HAL_DFSDM_ChannelInit+0x1d8>)
 8003a7e:	613b      	str	r3, [r7, #16]
    channel0Instance   = DFSDM2_Channel0;
 8003a80:	4b62      	ldr	r3, [pc, #392]	; (8003c0c <HAL_DFSDM_ChannelInit+0x1dc>)
 8003a82:	60fb      	str	r3, [r7, #12]
  }
  
  /* Check that channel has not been already initialized */
  if(channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f000 f8c1 	bl	8003c10 <DFSDM_GetChannelFromInstance>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <HAL_DFSDM_ChannelInit+0x70>
  {
    return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e0a0      	b.n	8003be2 <HAL_DFSDM_ChannelInit+0x1b2>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f7fd fc81 	bl	80013a8 <HAL_DFSDM_ChannelMspInit>
#endif
  
  /* Update the channel counter */
  (*channelCounterPtr)++;
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	1c5a      	adds	r2, r3, #1
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	601a      	str	r2, [r3, #0]
  
  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if(*channelCounterPtr == 1U)
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d125      	bne.n	8003b04 <HAL_DFSDM_ChannelInit+0xd4>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	601a      	str	r2, [r3, #0]
    channel0Instance->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	431a      	orrs	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	601a      	str	r2, [r3, #0]
    
    /* Reset clock divider */
    channel0Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	601a      	str	r2, [r3, #0]
    if(hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	791b      	ldrb	r3, [r3, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d108      	bne.n	8003af8 <HAL_DFSDM_ChannelInit+0xc8>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      channel0Instance->CHCFGR1 |= (uint32_t) ((hdfsdm_channel->Init.OutputClock.Divider - 1U) << 
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	3b01      	subs	r3, #1
 8003af0:	041b      	lsls	r3, r3, #16
 8003af2:	431a      	orrs	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	601a      	str	r2, [r3, #0]
                                               DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }
    
    /* enable the DFSDM global interface */
    channel0Instance->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]
  }
  
  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX | 
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8003b12:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	6819      	ldr	r1, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003b22:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking | 
 8003b28:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer | 
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	601a      	str	r2, [r3, #0]
  
  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 020f 	bic.w	r2, r2, #15
 8003b40:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6819      	ldr	r1, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type | 
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	601a      	str	r2, [r3, #0]
  
  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689a      	ldr	r2, [r3, #8]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8003b68:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6899      	ldr	r1, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                       ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder | 
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685a      	ldr	r2, [r3, #4]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f002 0207 	and.w	r2, r2, #7
 8003b94:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	6859      	ldr	r1, [r3, #4]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) | 
 8003ba8:	431a      	orrs	r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003bc0:	601a      	str	r2, [r3, #0]
  
  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  channelHandleTable[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f000 f81e 	bl	8003c10 <DFSDM_GetChannelFromInstance>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4413      	add	r3, r2
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	601a      	str	r2, [r3, #0]

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
#endif /* DFSDM2_Channel0 */
  
  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3718      	adds	r7, #24
 8003be6:	46bd      	mov	sp, r7
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	40016000 	.word	0x40016000
 8003bf0:	40016020 	.word	0x40016020
 8003bf4:	40016040 	.word	0x40016040
 8003bf8:	40016060 	.word	0x40016060
 8003bfc:	20000568 	.word	0x20000568
 8003c00:	2000056c 	.word	0x2000056c
 8003c04:	2000057c 	.word	0x2000057c
 8003c08:	20000580 	.word	0x20000580
 8003c0c:	40016400 	.word	0x40016400

08003c10 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(DFSDM_Channel_TypeDef* Instance)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t channel;
  
  /* Get channel from instance */
#if defined(DFSDM2_Channel0)
  if((Instance == DFSDM1_Channel0) || (Instance == DFSDM2_Channel0))
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a24      	ldr	r2, [pc, #144]	; (8003cac <DFSDM_GetChannelFromInstance+0x9c>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d003      	beq.n	8003c28 <DFSDM_GetChannelFromInstance+0x18>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <DFSDM_GetChannelFromInstance+0xa0>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d102      	bne.n	8003c2e <DFSDM_GetChannelFromInstance+0x1e>
  {
    channel = 0U;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	60fb      	str	r3, [r7, #12]
 8003c2c:	e037      	b.n	8003c9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel1) ||  (Instance == DFSDM2_Channel1))
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a20      	ldr	r2, [pc, #128]	; (8003cb4 <DFSDM_GetChannelFromInstance+0xa4>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d003      	beq.n	8003c3e <DFSDM_GetChannelFromInstance+0x2e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a1f      	ldr	r2, [pc, #124]	; (8003cb8 <DFSDM_GetChannelFromInstance+0xa8>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d102      	bne.n	8003c44 <DFSDM_GetChannelFromInstance+0x34>
  {
    channel = 1U;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	60fb      	str	r3, [r7, #12]
 8003c42:	e02c      	b.n	8003c9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel2) ||  (Instance == DFSDM2_Channel2))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <DFSDM_GetChannelFromInstance+0xac>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d003      	beq.n	8003c54 <DFSDM_GetChannelFromInstance+0x44>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a1c      	ldr	r2, [pc, #112]	; (8003cc0 <DFSDM_GetChannelFromInstance+0xb0>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d102      	bne.n	8003c5a <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 2U;
 8003c54:	2302      	movs	r3, #2
 8003c56:	60fb      	str	r3, [r7, #12]
 8003c58:	e021      	b.n	8003c9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if((Instance == DFSDM1_Channel3) ||  (Instance == DFSDM2_Channel3))
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	; (8003cc4 <DFSDM_GetChannelFromInstance+0xb4>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d003      	beq.n	8003c6a <DFSDM_GetChannelFromInstance+0x5a>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <DFSDM_GetChannelFromInstance+0xb8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d102      	bne.n	8003c70 <DFSDM_GetChannelFromInstance+0x60>
  {
    channel = 3U;
 8003c6a:	2303      	movs	r3, #3
 8003c6c:	60fb      	str	r3, [r7, #12]
 8003c6e:	e016      	b.n	8003c9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel4)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <DFSDM_GetChannelFromInstance+0xbc>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d102      	bne.n	8003c7e <DFSDM_GetChannelFromInstance+0x6e>
  {
    channel = 4U;
 8003c78:	2304      	movs	r3, #4
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	e00f      	b.n	8003c9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel5)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a13      	ldr	r2, [pc, #76]	; (8003cd0 <DFSDM_GetChannelFromInstance+0xc0>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d102      	bne.n	8003c8c <DFSDM_GetChannelFromInstance+0x7c>
  {
    channel = 5U;
 8003c86:	2305      	movs	r3, #5
 8003c88:	60fb      	str	r3, [r7, #12]
 8003c8a:	e008      	b.n	8003c9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else if(Instance == DFSDM2_Channel6)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a11      	ldr	r2, [pc, #68]	; (8003cd4 <DFSDM_GetChannelFromInstance+0xc4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d102      	bne.n	8003c9a <DFSDM_GetChannelFromInstance+0x8a>
  {
    channel = 6U;
 8003c94:	2306      	movs	r3, #6
 8003c96:	60fb      	str	r3, [r7, #12]
 8003c98:	e001      	b.n	8003c9e <DFSDM_GetChannelFromInstance+0x8e>
  }
  else /* DFSDM2_Channel7 */
  {
    channel = 7U;
 8003c9a:	2307      	movs	r3, #7
 8003c9c:	60fb      	str	r3, [r7, #12]
  {
    channel = 3U;
  }
#endif /* defined(DFSDM2_Channel0) */

  return channel;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr
 8003cac:	40016000 	.word	0x40016000
 8003cb0:	40016400 	.word	0x40016400
 8003cb4:	40016020 	.word	0x40016020
 8003cb8:	40016420 	.word	0x40016420
 8003cbc:	40016040 	.word	0x40016040
 8003cc0:	40016440 	.word	0x40016440
 8003cc4:	40016060 	.word	0x40016060
 8003cc8:	40016460 	.word	0x40016460
 8003ccc:	40016480 	.word	0x40016480
 8003cd0:	400164a0 	.word	0x400164a0
 8003cd4:	400164c0 	.word	0x400164c0

08003cd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d004      	beq.n	8003cf6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2280      	movs	r2, #128	; 0x80
 8003cf0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	e00c      	b.n	8003d10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2205      	movs	r2, #5
 8003cfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0201 	bic.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_FMPI2C_Init>:
  * @param  hfmpi2c Pointer to a FMPI2C_HandleTypeDef structure that contains
  *                the configuration information for the specified FMPI2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2C_Init(FMPI2C_HandleTypeDef *hfmpi2c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the FMPI2C handle allocation */
  if (hfmpi2c == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_FMPI2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e081      	b.n	8003e32 <HAL_FMPI2C_Init+0x116>
  assert_param(IS_FMPI2C_OWN_ADDRESS2(hfmpi2c->Init.OwnAddress2));
  assert_param(IS_FMPI2C_OWN_ADDRESS2_MASK(hfmpi2c->Init.OwnAddress2Masks));
  assert_param(IS_FMPI2C_GENERAL_CALL(hfmpi2c->Init.GeneralCallMode));
  assert_param(IS_FMPI2C_NO_STRETCH(hfmpi2c->Init.NoStretchMode));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_FMPI2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfmpi2c->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hfmpi2c->MspInitCallback(hfmpi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_FMPI2C_MspInit(hfmpi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fc42 	bl	80015cc <HAL_FMPI2C_MspInit>
#endif /* USE_HAL_FMPI2C_REGISTER_CALLBACKS */
  }

  hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	; 0x24
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected FMPI2C peripheral */
  __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- FMPI2Cx TIMINGR Configuration ------------------*/
  /* Configure FMPI2Cx: Frequency range */
  hfmpi2c->Instance->TIMINGR = hfmpi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- FMPI2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hfmpi2c->Instance->OAR1 &= ~FMPI2C_OAR1_OA1EN;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Configure FMPI2Cx: Own Address1 and ack own address1 mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_7BIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d107      	bne.n	8003d96 <HAL_FMPI2C_Init+0x7a>
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | hfmpi2c->Init.OwnAddress1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	e006      	b.n	8003da4 <HAL_FMPI2C_Init+0x88>
  }
  else /* FMPI2C_ADDRESSINGMODE_10BIT */
  {
    hfmpi2c->Instance->OAR1 = (FMPI2C_OAR1_OA1EN | FMPI2C_OAR1_OA1MODE | hfmpi2c->Init.OwnAddress1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- FMPI2Cx CR2 Configuration ----------------------*/
  /* Configure FMPI2Cx: Addressing Master mode */
  if (hfmpi2c->Init.AddressingMode == FMPI2C_ADDRESSINGMODE_10BIT)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d104      	bne.n	8003db6 <HAL_FMPI2C_Init+0x9a>
  {
    hfmpi2c->Instance->CR2 = (FMPI2C_CR2_ADD10);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hfmpi2c->Instance->CR2 |= (FMPI2C_CR2_AUTOEND | FMPI2C_CR2_NACK);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6812      	ldr	r2, [r2, #0]
 8003dc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc8:	6053      	str	r3, [r2, #4]

  /*---------------------------- FMPI2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hfmpi2c->Instance->OAR2 &= ~FMPI2C_DUALADDRESS_ENABLE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68da      	ldr	r2, [r3, #12]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003dd8:	60da      	str	r2, [r3, #12]

  /* Configure FMPI2Cx: Dual mode and Own Address2 */
  hfmpi2c->Instance->OAR2 = (hfmpi2c->Init.DualAddressMode | hfmpi2c->Init.OwnAddress2 | (hfmpi2c->Init.OwnAddress2Masks << 8));
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691a      	ldr	r2, [r3, #16]
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	ea42 0103 	orr.w	r1, r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	021a      	lsls	r2, r3, #8
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	430a      	orrs	r2, r1
 8003df2:	60da      	str	r2, [r3, #12]

  /*---------------------------- FMPI2Cx CR1 Configuration ----------------------*/
  /* Configure FMPI2Cx: Generalcall and NoStretch mode */
  hfmpi2c->Instance->CR1 = (hfmpi2c->Init.GeneralCallMode | hfmpi2c->Init.NoStretchMode);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a1a      	ldr	r2, [r3, #32]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

  /* Enable the selected FMPI2C peripheral */
  __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f042 0201 	orr.w	r2, r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

  hfmpi2c->ErrorCode = HAL_FMPI2C_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	645a      	str	r2, [r3, #68]	; 0x44
  hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hfmpi2c->PreviousState = FMPI2C_STATE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
  hfmpi2c->Mode = HAL_FMPI2C_MODE_NONE;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}

08003e3a <HAL_FMPI2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified FMPI2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FMPI2CEx_ConfigAnalogFilter(FMPI2C_HandleTypeDef *hfmpi2c, uint32_t AnalogFilter)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMPI2C_ALL_INSTANCE(hfmpi2c->Instance));
  assert_param(IS_FMPI2C_ANALOG_FILTER(AnalogFilter));

  if (hfmpi2c->State == HAL_FMPI2C_STATE_READY)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b20      	cmp	r3, #32
 8003e4e:	d138      	bne.n	8003ec2 <HAL_FMPI2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hfmpi2c);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d101      	bne.n	8003e5e <HAL_FMPI2CEx_ConfigAnalogFilter+0x24>
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	e032      	b.n	8003ec4 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hfmpi2c->State = HAL_FMPI2C_STATE_BUSY;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2224      	movs	r2, #36	; 0x24
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected FMPI2C peripheral */
    __HAL_FMPI2C_DISABLE(hfmpi2c);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f022 0201 	bic.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]

    /* Reset FMPI2Cx ANOFF bit */
    hfmpi2c->Instance->CR1 &= ~(FMPI2C_CR1_ANFOFF);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e8c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hfmpi2c->Instance->CR1 |= AnalogFilter;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6819      	ldr	r1, [r3, #0]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	601a      	str	r2, [r3, #0]

    __HAL_FMPI2C_ENABLE(hfmpi2c);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0201 	orr.w	r2, r2, #1
 8003eac:	601a      	str	r2, [r3, #0]

    hfmpi2c->State = HAL_FMPI2C_STATE_READY;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hfmpi2c);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e000      	b.n	8003ec4 <HAL_FMPI2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ec2:	2302      	movs	r3, #2
  }
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
 8003eea:	e165      	b.n	80041b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003eec:	2201      	movs	r2, #1
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4013      	ands	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f00:	693a      	ldr	r2, [r7, #16]
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	f040 8154 	bne.w	80041b2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d00b      	beq.n	8003f2a <HAL_GPIO_Init+0x5a>
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d007      	beq.n	8003f2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f1e:	2b11      	cmp	r3, #17
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b12      	cmp	r3, #18
 8003f28:	d130      	bne.n	8003f8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	2203      	movs	r2, #3
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	43db      	mvns	r3, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4013      	ands	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4e:	69ba      	ldr	r2, [r7, #24]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f60:	2201      	movs	r2, #1
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	091b      	lsrs	r3, r3, #4
 8003f76:	f003 0201 	and.w	r2, r3, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	69ba      	ldr	r2, [r7, #24]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	005b      	lsls	r3, r3, #1
 8003f96:	2203      	movs	r2, #3
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69ba      	ldr	r2, [r7, #24]
 8003fba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d003      	beq.n	8003fcc <HAL_GPIO_Init+0xfc>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b12      	cmp	r3, #18
 8003fca:	d123      	bne.n	8004014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	08da      	lsrs	r2, r3, #3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	3208      	adds	r2, #8
 8003fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	220f      	movs	r2, #15
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	08da      	lsrs	r2, r3, #3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3208      	adds	r2, #8
 800400e:	69b9      	ldr	r1, [r7, #24]
 8004010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	2203      	movs	r2, #3
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43db      	mvns	r3, r3
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	4013      	ands	r3, r2
 800402a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f003 0203 	and.w	r2, r3, #3
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	fa02 f303 	lsl.w	r3, r2, r3
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	4313      	orrs	r3, r2
 8004040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	f000 80ae 	beq.w	80041b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	4b5d      	ldr	r3, [pc, #372]	; (80041d0 <HAL_GPIO_Init+0x300>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	4a5c      	ldr	r2, [pc, #368]	; (80041d0 <HAL_GPIO_Init+0x300>)
 8004060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004064:	6453      	str	r3, [r2, #68]	; 0x44
 8004066:	4b5a      	ldr	r3, [pc, #360]	; (80041d0 <HAL_GPIO_Init+0x300>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004072:	4a58      	ldr	r2, [pc, #352]	; (80041d4 <HAL_GPIO_Init+0x304>)
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	089b      	lsrs	r3, r3, #2
 8004078:	3302      	adds	r3, #2
 800407a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800407e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	220f      	movs	r2, #15
 800408a:	fa02 f303 	lsl.w	r3, r2, r3
 800408e:	43db      	mvns	r3, r3
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4013      	ands	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a4f      	ldr	r2, [pc, #316]	; (80041d8 <HAL_GPIO_Init+0x308>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d025      	beq.n	80040ea <HAL_GPIO_Init+0x21a>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a4e      	ldr	r2, [pc, #312]	; (80041dc <HAL_GPIO_Init+0x30c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01f      	beq.n	80040e6 <HAL_GPIO_Init+0x216>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a4d      	ldr	r2, [pc, #308]	; (80041e0 <HAL_GPIO_Init+0x310>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d019      	beq.n	80040e2 <HAL_GPIO_Init+0x212>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a4c      	ldr	r2, [pc, #304]	; (80041e4 <HAL_GPIO_Init+0x314>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_GPIO_Init+0x20e>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a4b      	ldr	r2, [pc, #300]	; (80041e8 <HAL_GPIO_Init+0x318>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d00d      	beq.n	80040da <HAL_GPIO_Init+0x20a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a4a      	ldr	r2, [pc, #296]	; (80041ec <HAL_GPIO_Init+0x31c>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d007      	beq.n	80040d6 <HAL_GPIO_Init+0x206>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a49      	ldr	r2, [pc, #292]	; (80041f0 <HAL_GPIO_Init+0x320>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d101      	bne.n	80040d2 <HAL_GPIO_Init+0x202>
 80040ce:	2306      	movs	r3, #6
 80040d0:	e00c      	b.n	80040ec <HAL_GPIO_Init+0x21c>
 80040d2:	2307      	movs	r3, #7
 80040d4:	e00a      	b.n	80040ec <HAL_GPIO_Init+0x21c>
 80040d6:	2305      	movs	r3, #5
 80040d8:	e008      	b.n	80040ec <HAL_GPIO_Init+0x21c>
 80040da:	2304      	movs	r3, #4
 80040dc:	e006      	b.n	80040ec <HAL_GPIO_Init+0x21c>
 80040de:	2303      	movs	r3, #3
 80040e0:	e004      	b.n	80040ec <HAL_GPIO_Init+0x21c>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e002      	b.n	80040ec <HAL_GPIO_Init+0x21c>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_GPIO_Init+0x21c>
 80040ea:	2300      	movs	r3, #0
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	f002 0203 	and.w	r2, r2, #3
 80040f2:	0092      	lsls	r2, r2, #2
 80040f4:	4093      	lsls	r3, r2
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040fc:	4935      	ldr	r1, [pc, #212]	; (80041d4 <HAL_GPIO_Init+0x304>)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	089b      	lsrs	r3, r3, #2
 8004102:	3302      	adds	r3, #2
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800410a:	4b3a      	ldr	r3, [pc, #232]	; (80041f4 <HAL_GPIO_Init+0x324>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800412e:	4a31      	ldr	r2, [pc, #196]	; (80041f4 <HAL_GPIO_Init+0x324>)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004134:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <HAL_GPIO_Init+0x324>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004158:	4a26      	ldr	r2, [pc, #152]	; (80041f4 <HAL_GPIO_Init+0x324>)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800415e:	4b25      	ldr	r3, [pc, #148]	; (80041f4 <HAL_GPIO_Init+0x324>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004182:	4a1c      	ldr	r2, [pc, #112]	; (80041f4 <HAL_GPIO_Init+0x324>)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004188:	4b1a      	ldr	r3, [pc, #104]	; (80041f4 <HAL_GPIO_Init+0x324>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041ac:	4a11      	ldr	r2, [pc, #68]	; (80041f4 <HAL_GPIO_Init+0x324>)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3301      	adds	r3, #1
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b0f      	cmp	r3, #15
 80041bc:	f67f ae96 	bls.w	8003eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	3724      	adds	r7, #36	; 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40013800 	.word	0x40013800
 80041d8:	40020000 	.word	0x40020000
 80041dc:	40020400 	.word	0x40020400
 80041e0:	40020800 	.word	0x40020800
 80041e4:	40020c00 	.word	0x40020c00
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40021400 	.word	0x40021400
 80041f0:	40021800 	.word	0x40021800
 80041f4:	40013c00 	.word	0x40013c00

080041f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
 8004204:	4613      	mov	r3, r2
 8004206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004208:	787b      	ldrb	r3, [r7, #1]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d003      	beq.n	8004216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800420e:	887a      	ldrh	r2, [r7, #2]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004214:	e003      	b.n	800421e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004216:	887b      	ldrh	r3, [r7, #2]
 8004218:	041a      	lsls	r2, r3, #16
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	619a      	str	r2, [r3, #24]
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	460b      	mov	r3, r1
 8004234:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	887b      	ldrh	r3, [r7, #2]
 800423c:	401a      	ands	r2, r3
 800423e:	887b      	ldrh	r3, [r7, #2]
 8004240:	429a      	cmp	r2, r3
 8004242:	d104      	bne.n	800424e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004244:	887b      	ldrh	r3, [r7, #2]
 8004246:	041a      	lsls	r2, r3, #16
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800424c:	e002      	b.n	8004254 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800424e:	887a      	ldrh	r2, [r7, #2]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	619a      	str	r2, [r3, #24]
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8004260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004262:	b08f      	sub	sp, #60	; 0x3c
 8004264:	af0a      	add	r7, sp, #40	; 0x28
 8004266:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e054      	b.n	800431c <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f00e fd11 	bl	8012cb4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2203      	movs	r2, #3
 8004296:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f005 ffa1 	bl	800a1f8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	603b      	str	r3, [r7, #0]
 80042bc:	687e      	ldr	r6, [r7, #4]
 80042be:	466d      	mov	r5, sp
 80042c0:	f106 0410 	add.w	r4, r6, #16
 80042c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80042d0:	e885 0003 	stmia.w	r5, {r0, r1}
 80042d4:	1d33      	adds	r3, r6, #4
 80042d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042d8:	6838      	ldr	r0, [r7, #0]
 80042da:	f005 ff1b 	bl	800a114 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2101      	movs	r1, #1
 80042e4:	4618      	mov	r0, r3
 80042e6:	f005 ff98 	bl	800a21a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	603b      	str	r3, [r7, #0]
 80042f0:	687e      	ldr	r6, [r7, #4]
 80042f2:	466d      	mov	r5, sp
 80042f4:	f106 0410 	add.w	r4, r6, #16
 80042f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80042fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80042fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004300:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004304:	e885 0003 	stmia.w	r5, {r0, r1}
 8004308:	1d33      	adds	r3, r6, #4
 800430a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800430c:	6838      	ldr	r0, [r7, #0]
 800430e:	f006 f8ab 	bl	800a468 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800431a:	2300      	movs	r3, #0
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004324 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8004324:	b590      	push	{r4, r7, lr}
 8004326:	b089      	sub	sp, #36	; 0x24
 8004328:	af04      	add	r7, sp, #16
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	4608      	mov	r0, r1
 800432e:	4611      	mov	r1, r2
 8004330:	461a      	mov	r2, r3
 8004332:	4603      	mov	r3, r0
 8004334:	70fb      	strb	r3, [r7, #3]
 8004336:	460b      	mov	r3, r1
 8004338:	70bb      	strb	r3, [r7, #2]
 800433a:	4613      	mov	r3, r2
 800433c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004344:	2b01      	cmp	r3, #1
 8004346:	d101      	bne.n	800434c <HAL_HCD_HC_Init+0x28>
 8004348:	2302      	movs	r3, #2
 800434a:	e07f      	b.n	800444c <HAL_HCD_HC_Init+0x128>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8004354:	78fa      	ldrb	r2, [r7, #3]
 8004356:	6879      	ldr	r1, [r7, #4]
 8004358:	4613      	mov	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	333d      	adds	r3, #61	; 0x3d
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	440b      	add	r3, r1
 8004376:	3338      	adds	r3, #56	; 0x38
 8004378:	787a      	ldrb	r2, [r7, #1]
 800437a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	440b      	add	r3, r1
 800438a:	3340      	adds	r3, #64	; 0x40
 800438c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800438e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004390:	78fa      	ldrb	r2, [r7, #3]
 8004392:	6879      	ldr	r1, [r7, #4]
 8004394:	4613      	mov	r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	4413      	add	r3, r2
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	440b      	add	r3, r1
 800439e:	3339      	adds	r3, #57	; 0x39
 80043a0:	78fa      	ldrb	r2, [r7, #3]
 80043a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	00db      	lsls	r3, r3, #3
 80043b0:	440b      	add	r3, r1
 80043b2:	333f      	adds	r3, #63	; 0x3f
 80043b4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80043b8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80043ba:	78fa      	ldrb	r2, [r7, #3]
 80043bc:	78bb      	ldrb	r3, [r7, #2]
 80043be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043c2:	b2d8      	uxtb	r0, r3
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	440b      	add	r3, r1
 80043d0:	333a      	adds	r3, #58	; 0x3a
 80043d2:	4602      	mov	r2, r0
 80043d4:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80043d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	da0a      	bge.n	80043f4 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80043de:	78fa      	ldrb	r2, [r7, #3]
 80043e0:	6879      	ldr	r1, [r7, #4]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	333b      	adds	r3, #59	; 0x3b
 80043ee:	2201      	movs	r2, #1
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	e009      	b.n	8004408 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	440b      	add	r3, r1
 8004402:	333b      	adds	r3, #59	; 0x3b
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4413      	add	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	440b      	add	r3, r1
 8004416:	333c      	adds	r3, #60	; 0x3c
 8004418:	f897 2020 	ldrb.w	r2, [r7, #32]
 800441c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	787c      	ldrb	r4, [r7, #1]
 8004424:	78ba      	ldrb	r2, [r7, #2]
 8004426:	78f9      	ldrb	r1, [r7, #3]
 8004428:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800442a:	9302      	str	r3, [sp, #8]
 800442c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	4623      	mov	r3, r4
 800443a:	f006 f991 	bl	800a760 <USB_HC_Init>
 800443e:	4603      	mov	r3, r0
 8004440:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 800444a:	7bfb      	ldrb	r3, [r7, #15]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	bd90      	pop	{r4, r7, pc}

08004454 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	460b      	mov	r3, r1
 800445e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_HCD_HC_Halt+0x1e>
 800446e:	2302      	movs	r3, #2
 8004470:	e00f      	b.n	8004492 <HAL_HCD_HC_Halt+0x3e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	4611      	mov	r1, r2
 8004482:	4618      	mov	r0, r3
 8004484:	f006 fbcb 	bl	800ac1e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8004490:	7bfb      	ldrb	r3, [r7, #15]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
	...

0800449c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	4608      	mov	r0, r1
 80044a6:	4611      	mov	r1, r2
 80044a8:	461a      	mov	r2, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	70fb      	strb	r3, [r7, #3]
 80044ae:	460b      	mov	r3, r1
 80044b0:	70bb      	strb	r3, [r7, #2]
 80044b2:	4613      	mov	r3, r2
 80044b4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80044b6:	78fa      	ldrb	r2, [r7, #3]
 80044b8:	6879      	ldr	r1, [r7, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4413      	add	r3, r2
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	440b      	add	r3, r1
 80044c4:	333b      	adds	r3, #59	; 0x3b
 80044c6:	78ba      	ldrb	r2, [r7, #2]
 80044c8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80044ca:	78fa      	ldrb	r2, [r7, #3]
 80044cc:	6879      	ldr	r1, [r7, #4]
 80044ce:	4613      	mov	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	4413      	add	r3, r2
 80044d4:	00db      	lsls	r3, r3, #3
 80044d6:	440b      	add	r3, r1
 80044d8:	333f      	adds	r3, #63	; 0x3f
 80044da:	787a      	ldrb	r2, [r7, #1]
 80044dc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80044de:	7c3b      	ldrb	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d114      	bne.n	800450e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	440b      	add	r3, r1
 80044f2:	3342      	adds	r3, #66	; 0x42
 80044f4:	2203      	movs	r2, #3
 80044f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	6879      	ldr	r1, [r7, #4]
 80044fc:	4613      	mov	r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4413      	add	r3, r2
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	440b      	add	r3, r1
 8004506:	333d      	adds	r3, #61	; 0x3d
 8004508:	7f3a      	ldrb	r2, [r7, #28]
 800450a:	701a      	strb	r2, [r3, #0]
 800450c:	e009      	b.n	8004522 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800450e:	78fa      	ldrb	r2, [r7, #3]
 8004510:	6879      	ldr	r1, [r7, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	440b      	add	r3, r1
 800451c:	3342      	adds	r3, #66	; 0x42
 800451e:	2202      	movs	r2, #2
 8004520:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004522:	787b      	ldrb	r3, [r7, #1]
 8004524:	2b03      	cmp	r3, #3
 8004526:	f200 80d6 	bhi.w	80046d6 <HAL_HCD_HC_SubmitRequest+0x23a>
 800452a:	a201      	add	r2, pc, #4	; (adr r2, 8004530 <HAL_HCD_HC_SubmitRequest+0x94>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004541 	.word	0x08004541
 8004534:	080046c1 	.word	0x080046c1
 8004538:	080045ad 	.word	0x080045ad
 800453c:	08004637 	.word	0x08004637
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8004540:	7c3b      	ldrb	r3, [r7, #16]
 8004542:	2b01      	cmp	r3, #1
 8004544:	f040 80c9 	bne.w	80046da <HAL_HCD_HC_SubmitRequest+0x23e>
 8004548:	78bb      	ldrb	r3, [r7, #2]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 80c5 	bne.w	80046da <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 8004550:	8b3b      	ldrh	r3, [r7, #24]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d109      	bne.n	800456a <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8004556:	78fa      	ldrb	r2, [r7, #3]
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	4613      	mov	r3, r2
 800455c:	009b      	lsls	r3, r3, #2
 800455e:	4413      	add	r3, r2
 8004560:	00db      	lsls	r3, r3, #3
 8004562:	440b      	add	r3, r1
 8004564:	3351      	adds	r3, #81	; 0x51
 8004566:	2201      	movs	r2, #1
 8004568:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800456a:	78fa      	ldrb	r2, [r7, #3]
 800456c:	6879      	ldr	r1, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	440b      	add	r3, r1
 8004578:	3351      	adds	r3, #81	; 0x51
 800457a:	781b      	ldrb	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d10a      	bne.n	8004596 <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004580:	78fa      	ldrb	r2, [r7, #3]
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	00db      	lsls	r3, r3, #3
 800458c:	440b      	add	r3, r1
 800458e:	3342      	adds	r3, #66	; 0x42
 8004590:	2200      	movs	r2, #0
 8004592:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004594:	e0a1      	b.n	80046da <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	00db      	lsls	r3, r3, #3
 80045a2:	440b      	add	r3, r1
 80045a4:	3342      	adds	r3, #66	; 0x42
 80045a6:	2202      	movs	r2, #2
 80045a8:	701a      	strb	r2, [r3, #0]
      break;
 80045aa:	e096      	b.n	80046da <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80045ac:	78bb      	ldrb	r3, [r7, #2]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d120      	bne.n	80045f4 <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	440b      	add	r3, r1
 80045c0:	3351      	adds	r3, #81	; 0x51
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d10a      	bne.n	80045de <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045c8:	78fa      	ldrb	r2, [r7, #3]
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	4613      	mov	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4413      	add	r3, r2
 80045d2:	00db      	lsls	r3, r3, #3
 80045d4:	440b      	add	r3, r1
 80045d6:	3342      	adds	r3, #66	; 0x42
 80045d8:	2200      	movs	r2, #0
 80045da:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80045dc:	e07e      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	4413      	add	r3, r2
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	440b      	add	r3, r1
 80045ec:	3342      	adds	r3, #66	; 0x42
 80045ee:	2202      	movs	r2, #2
 80045f0:	701a      	strb	r2, [r3, #0]
      break;
 80045f2:	e073      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045f4:	78fa      	ldrb	r2, [r7, #3]
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	4613      	mov	r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	4413      	add	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	440b      	add	r3, r1
 8004602:	3350      	adds	r3, #80	; 0x50
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d10a      	bne.n	8004620 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	00db      	lsls	r3, r3, #3
 8004616:	440b      	add	r3, r1
 8004618:	3342      	adds	r3, #66	; 0x42
 800461a:	2200      	movs	r2, #0
 800461c:	701a      	strb	r2, [r3, #0]
      break;
 800461e:	e05d      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	00db      	lsls	r3, r3, #3
 800462c:	440b      	add	r3, r1
 800462e:	3342      	adds	r3, #66	; 0x42
 8004630:	2202      	movs	r2, #2
 8004632:	701a      	strb	r2, [r3, #0]
      break;
 8004634:	e052      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004636:	78bb      	ldrb	r3, [r7, #2]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d120      	bne.n	800467e <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	440b      	add	r3, r1
 800464a:	3351      	adds	r3, #81	; 0x51
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d10a      	bne.n	8004668 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004652:	78fa      	ldrb	r2, [r7, #3]
 8004654:	6879      	ldr	r1, [r7, #4]
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	440b      	add	r3, r1
 8004660:	3342      	adds	r3, #66	; 0x42
 8004662:	2200      	movs	r2, #0
 8004664:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004666:	e039      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004668:	78fa      	ldrb	r2, [r7, #3]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	4413      	add	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	440b      	add	r3, r1
 8004676:	3342      	adds	r3, #66	; 0x42
 8004678:	2202      	movs	r2, #2
 800467a:	701a      	strb	r2, [r3, #0]
      break;
 800467c:	e02e      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800467e:	78fa      	ldrb	r2, [r7, #3]
 8004680:	6879      	ldr	r1, [r7, #4]
 8004682:	4613      	mov	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4413      	add	r3, r2
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	440b      	add	r3, r1
 800468c:	3350      	adds	r3, #80	; 0x50
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10a      	bne.n	80046aa <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004694:	78fa      	ldrb	r2, [r7, #3]
 8004696:	6879      	ldr	r1, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	440b      	add	r3, r1
 80046a2:	3342      	adds	r3, #66	; 0x42
 80046a4:	2200      	movs	r2, #0
 80046a6:	701a      	strb	r2, [r3, #0]
      break;
 80046a8:	e018      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046aa:	78fa      	ldrb	r2, [r7, #3]
 80046ac:	6879      	ldr	r1, [r7, #4]
 80046ae:	4613      	mov	r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	4413      	add	r3, r2
 80046b4:	00db      	lsls	r3, r3, #3
 80046b6:	440b      	add	r3, r1
 80046b8:	3342      	adds	r3, #66	; 0x42
 80046ba:	2202      	movs	r2, #2
 80046bc:	701a      	strb	r2, [r3, #0]
      break;
 80046be:	e00d      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046c0:	78fa      	ldrb	r2, [r7, #3]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	009b      	lsls	r3, r3, #2
 80046c8:	4413      	add	r3, r2
 80046ca:	00db      	lsls	r3, r3, #3
 80046cc:	440b      	add	r3, r1
 80046ce:	3342      	adds	r3, #66	; 0x42
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
      break;
 80046d4:	e002      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 80046d6:	bf00      	nop
 80046d8:	e000      	b.n	80046dc <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 80046da:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80046dc:	78fa      	ldrb	r2, [r7, #3]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	00db      	lsls	r3, r3, #3
 80046e8:	440b      	add	r3, r1
 80046ea:	3344      	adds	r3, #68	; 0x44
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	8b39      	ldrh	r1, [r7, #24]
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4413      	add	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	4403      	add	r3, r0
 8004700:	3348      	adds	r3, #72	; 0x48
 8004702:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	440b      	add	r3, r1
 8004712:	335c      	adds	r3, #92	; 0x5c
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	4413      	add	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	440b      	add	r3, r1
 8004726:	334c      	adds	r3, #76	; 0x4c
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	3339      	adds	r3, #57	; 0x39
 800473c:	78fa      	ldrb	r2, [r7, #3]
 800473e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	4413      	add	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	440b      	add	r3, r1
 800474e:	335d      	adds	r3, #93	; 0x5d
 8004750:	2200      	movs	r2, #0
 8004752:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	4613      	mov	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4413      	add	r3, r2
 8004760:	00db      	lsls	r3, r3, #3
 8004762:	3338      	adds	r3, #56	; 0x38
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	18d1      	adds	r1, r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	f006 f900 	bl	800a974 <USB_HC_StartXfer>
 8004774:	4603      	mov	r3, r0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3708      	adds	r7, #8
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop

08004780 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f005 fe23 	bl	800a3e2 <USB_GetMode>
 800479c:	4603      	mov	r3, r0
 800479e:	2b01      	cmp	r3, #1
 80047a0:	f040 80ef 	bne.w	8004982 <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f005 fe07 	bl	800a3bc <USB_ReadInterrupts>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80e5 	beq.w	8004980 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f005 fdfe 	bl	800a3bc <USB_ReadInterrupts>
 80047c0:	4603      	mov	r3, r0
 80047c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80047ca:	d104      	bne.n	80047d6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80047d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4618      	mov	r0, r3
 80047dc:	f005 fdee 	bl	800a3bc <USB_ReadInterrupts>
 80047e0:	4603      	mov	r3, r0
 80047e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047ea:	d104      	bne.n	80047f6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80047f4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f005 fdde 	bl	800a3bc <USB_ReadInterrupts>
 8004800:	4603      	mov	r3, r0
 8004802:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004806:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800480a:	d104      	bne.n	8004816 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004814:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f005 fdce 	bl	800a3bc <USB_ReadInterrupts>
 8004820:	4603      	mov	r3, r0
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b02      	cmp	r3, #2
 8004828:	d103      	bne.n	8004832 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2202      	movs	r2, #2
 8004830:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4618      	mov	r0, r3
 8004838:	f005 fdc0 	bl	800a3bc <USB_ReadInterrupts>
 800483c:	4603      	mov	r3, r0
 800483e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004842:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004846:	d115      	bne.n	8004874 <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004850:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d108      	bne.n	8004874 <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f00e faa4 	bl	8012db0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2101      	movs	r1, #1
 800486e:	4618      	mov	r0, r3
 8004870:	f005 feb0 	bl	800a5d4 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4618      	mov	r0, r3
 800487a:	f005 fd9f 	bl	800a3bc <USB_ReadInterrupts>
 800487e:	4603      	mov	r3, r0
 8004880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004888:	d102      	bne.n	8004890 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f001 f968 	bl	8005b60 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4618      	mov	r0, r3
 8004896:	f005 fd91 	bl	800a3bc <USB_ReadInterrupts>
 800489a:	4603      	mov	r3, r0
 800489c:	f003 0308 	and.w	r3, r3, #8
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d106      	bne.n	80048b2 <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f00e fa67 	bl	8012d78 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2208      	movs	r2, #8
 80048b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4618      	mov	r0, r3
 80048b8:	f005 fd80 	bl	800a3bc <USB_ReadInterrupts>
 80048bc:	4603      	mov	r3, r0
 80048be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80048c6:	d138      	bne.n	800493a <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f006 f995 	bl	800abfc <USB_HC_ReadInterrupt>
 80048d2:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e025      	b.n	8004926 <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f003 030f 	and.w	r3, r3, #15
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	fa22 f303 	lsr.w	r3, r2, r3
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d018      	beq.n	8004920 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004904:	d106      	bne.n	8004914 <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	4619      	mov	r1, r3
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8cf 	bl	8004ab0 <HCD_HC_IN_IRQHandler>
 8004912:	e005      	b.n	8004920 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	4619      	mov	r1, r3
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fcfd 	bl	800531a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	3301      	adds	r3, #1
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	429a      	cmp	r2, r3
 800492e:	d3d4      	bcc.n	80048da <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4618      	mov	r0, r3
 8004940:	f005 fd3c 	bl	800a3bc <USB_ReadInterrupts>
 8004944:	4603      	mov	r3, r0
 8004946:	f003 0310 	and.w	r3, r3, #16
 800494a:	2b10      	cmp	r3, #16
 800494c:	d101      	bne.n	8004952 <HAL_HCD_IRQHandler+0x1d2>
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <HAL_HCD_IRQHandler+0x1d4>
 8004952:	2300      	movs	r3, #0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d014      	beq.n	8004982 <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0210 	bic.w	r2, r2, #16
 8004966:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f001 f84b 	bl	8005a04 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	699a      	ldr	r2, [r3, #24]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f042 0210 	orr.w	r2, r2, #16
 800497c:	619a      	str	r2, [r3, #24]
 800497e:	e000      	b.n	8004982 <HAL_HCD_IRQHandler+0x202>
      return;
 8004980:	bf00      	nop
    }
  }
}
 8004982:	3718      	adds	r7, #24
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b082      	sub	sp, #8
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8004996:	2b01      	cmp	r3, #1
 8004998:	d101      	bne.n	800499e <HAL_HCD_Start+0x16>
 800499a:	2302      	movs	r3, #2
 800499c:	e013      	b.n	80049c6 <HAL_HCD_Start+0x3e>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f005 fc13 	bl	800a1d6 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2101      	movs	r1, #1
 80049b6:	4618      	mov	r0, r3
 80049b8:	f005 fe70 	bl	800a69c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3708      	adds	r7, #8
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}

080049ce <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80049ce:	b580      	push	{r7, lr}
 80049d0:	b082      	sub	sp, #8
 80049d2:	af00      	add	r7, sp, #0
 80049d4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_HCD_Stop+0x16>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e00d      	b.n	8004a00 <HAL_HCD_Stop+0x32>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f006 fa4f 	bl	800ae94 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4618      	mov	r0, r3
 8004a16:	f005 fe17 	bl	800a648 <USB_ResetPort>
 8004a1a:	4603      	mov	r3, r0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3708      	adds	r7, #8
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	460b      	mov	r3, r1
 8004a2e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004a30:	78fa      	ldrb	r2, [r7, #3]
 8004a32:	6879      	ldr	r1, [r7, #4]
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	440b      	add	r3, r1
 8004a3e:	335c      	adds	r3, #92	; 0x5c
 8004a40:	781b      	ldrb	r3, [r3, #0]
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b083      	sub	sp, #12
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	460b      	mov	r3, r1
 8004a58:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004a5a:	78fa      	ldrb	r2, [r7, #3]
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	4613      	mov	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4413      	add	r3, r2
 8004a64:	00db      	lsls	r3, r3, #3
 8004a66:	440b      	add	r3, r1
 8004a68:	334c      	adds	r3, #76	; 0x4c
 8004a6a:	681b      	ldr	r3, [r3, #0]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f005 fe59 	bl	800a73c <USB_GetCurrentFrame>
 8004a8a:	4603      	mov	r3, r0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f005 fe34 	bl	800a70e <USB_GetHostSpeed>
 8004aa6:	4603      	mov	r3, r0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3708      	adds	r7, #8
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}

08004ab0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b086      	sub	sp, #24
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
 8004ab8:	460b      	mov	r3, r1
 8004aba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004ac6:	78fb      	ldrb	r3, [r7, #3]
 8004ac8:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	015a      	lsls	r2, r3, #5
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b04      	cmp	r3, #4
 8004ade:	d119      	bne.n	8004b14 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aec:	461a      	mov	r2, r3
 8004aee:	2304      	movs	r3, #4
 8004af0:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b0c:	f043 0302 	orr.w	r3, r3, #2
 8004b10:	60d3      	str	r3, [r2, #12]
 8004b12:	e0ce      	b.n	8004cb2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2a:	d12c      	bne.n	8004b86 <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b38:	461a      	mov	r2, r3
 8004b3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	00db      	lsls	r3, r3, #3
 8004b4c:	440b      	add	r3, r1
 8004b4e:	335d      	adds	r3, #93	; 0x5d
 8004b50:	2207      	movs	r2, #7
 8004b52:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b60:	68db      	ldr	r3, [r3, #12]
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b6e:	f043 0302 	orr.w	r3, r3, #2
 8004b72:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f006 f84d 	bl	800ac1e <USB_HC_Halt>
 8004b84:	e095      	b.n	8004cb2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f003 0320 	and.w	r3, r3, #32
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	d109      	bne.n	8004bb0 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	015a      	lsls	r2, r3, #5
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	4413      	add	r3, r2
 8004ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2320      	movs	r3, #32
 8004bac:	6093      	str	r3, [r2, #8]
 8004bae:	e080      	b.n	8004cb2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	015a      	lsls	r2, r3, #5
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b08      	cmp	r3, #8
 8004bc4:	d134      	bne.n	8004c30 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68fa      	ldr	r2, [r7, #12]
 8004bd6:	0151      	lsls	r1, r2, #5
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	440a      	add	r2, r1
 8004bdc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	00db      	lsls	r3, r3, #3
 8004bf2:	440b      	add	r3, r1
 8004bf4:	335d      	adds	r3, #93	; 0x5d
 8004bf6:	2205      	movs	r2, #5
 8004bf8:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	015a      	lsls	r2, r3, #5
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	4413      	add	r3, r2
 8004c02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c06:	461a      	mov	r2, r3
 8004c08:	2310      	movs	r3, #16
 8004c0a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2308      	movs	r3, #8
 8004c1c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	b2d2      	uxtb	r2, r2
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f005 fff8 	bl	800ac1e <USB_HC_Halt>
 8004c2e:	e040      	b.n	8004cb2 <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	015a      	lsls	r2, r3, #5
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	4413      	add	r3, r2
 8004c38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c46:	d134      	bne.n	8004cb2 <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004c62:	f043 0302 	orr.w	r3, r3, #2
 8004c66:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68fa      	ldr	r2, [r7, #12]
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	4611      	mov	r1, r2
 8004c72:	4618      	mov	r0, r3
 8004c74:	f005 ffd3 	bl	800ac1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c84:	461a      	mov	r2, r3
 8004c86:	2310      	movs	r3, #16
 8004c88:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4413      	add	r3, r2
 8004c94:	00db      	lsls	r3, r3, #3
 8004c96:	440b      	add	r3, r1
 8004c98:	335d      	adds	r3, #93	; 0x5d
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	015a      	lsls	r2, r3, #5
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004caa:	461a      	mov	r2, r3
 8004cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb0:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc8:	d122      	bne.n	8004d10 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	0151      	lsls	r1, r2, #5
 8004cdc:	693a      	ldr	r2, [r7, #16]
 8004cde:	440a      	add	r2, r1
 8004ce0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004ce4:	f043 0302 	orr.w	r3, r3, #2
 8004ce8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	b2d2      	uxtb	r2, r2
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f005 ff92 	bl	800ac1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	015a      	lsls	r2, r3, #5
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	4413      	add	r3, r2
 8004d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d06:	461a      	mov	r2, r3
 8004d08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d0c:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004d0e:	e300      	b.n	8005312 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	f040 80fd 	bne.w	8004f22 <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01b      	beq.n	8004d68 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	00db      	lsls	r3, r3, #3
 8004d3c:	440b      	add	r3, r1
 8004d3e:	3348      	adds	r3, #72	; 0x48
 8004d40:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	0159      	lsls	r1, r3, #5
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	440b      	add	r3, r1
 8004d4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8004d54:	1ad1      	subs	r1, r2, r3
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	68fa      	ldr	r2, [r7, #12]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4403      	add	r3, r0
 8004d64:	334c      	adds	r3, #76	; 0x4c
 8004d66:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d68:	6879      	ldr	r1, [r7, #4]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	440b      	add	r3, r1
 8004d76:	335d      	adds	r3, #93	; 0x5d
 8004d78:	2201      	movs	r2, #1
 8004d7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	00db      	lsls	r3, r3, #3
 8004d88:	440b      	add	r3, r1
 8004d8a:	3358      	adds	r3, #88	; 0x58
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	2301      	movs	r3, #1
 8004da0:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	68fa      	ldr	r2, [r7, #12]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	00db      	lsls	r3, r3, #3
 8004dae:	440b      	add	r3, r1
 8004db0:	333f      	adds	r3, #63	; 0x3f
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004db8:	6879      	ldr	r1, [r7, #4]
 8004dba:	68fa      	ldr	r2, [r7, #12]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	00db      	lsls	r3, r3, #3
 8004dc4:	440b      	add	r3, r1
 8004dc6:	333f      	adds	r3, #63	; 0x3f
 8004dc8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d121      	bne.n	8004e12 <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004de8:	f043 0302 	orr.w	r3, r3, #2
 8004dec:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	4611      	mov	r1, r2
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f005 ff10 	bl	800ac1e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	6093      	str	r3, [r2, #8]
 8004e10:	e070      	b.n	8004ef4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004e12:	6879      	ldr	r1, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	00db      	lsls	r3, r3, #3
 8004e1e:	440b      	add	r3, r1
 8004e20:	333f      	adds	r3, #63	; 0x3f
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	2b03      	cmp	r3, #3
 8004e26:	d12a      	bne.n	8004e7e <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	015a      	lsls	r2, r3, #5
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	4413      	add	r3, r2
 8004e30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	0151      	lsls	r1, r2, #5
 8004e3a:	693a      	ldr	r2, [r7, #16]
 8004e3c:	440a      	add	r2, r1
 8004e3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004e42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e46:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e48:	6879      	ldr	r1, [r7, #4]
 8004e4a:	68fa      	ldr	r2, [r7, #12]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	440b      	add	r3, r1
 8004e56:	335c      	adds	r3, #92	; 0x5c
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	b2d8      	uxtb	r0, r3
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	440b      	add	r3, r1
 8004e6e:	335c      	adds	r3, #92	; 0x5c
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	4601      	mov	r1, r0
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f00d ffa8 	bl	8012dcc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004e7c:	e03a      	b.n	8004ef4 <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8004e7e:	6879      	ldr	r1, [r7, #4]
 8004e80:	68fa      	ldr	r2, [r7, #12]
 8004e82:	4613      	mov	r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4413      	add	r3, r2
 8004e88:	00db      	lsls	r3, r3, #3
 8004e8a:	440b      	add	r3, r1
 8004e8c:	333f      	adds	r3, #63	; 0x3f
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d12f      	bne.n	8004ef4 <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	440b      	add	r3, r1
 8004ea2:	335c      	adds	r3, #92	; 0x5c
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3350      	adds	r3, #80	; 0x50
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	f083 0301 	eor.w	r3, r3, #1
 8004ebe:	b2d8      	uxtb	r0, r3
 8004ec0:	6879      	ldr	r1, [r7, #4]
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	00db      	lsls	r3, r3, #3
 8004ecc:	440b      	add	r3, r1
 8004ece:	3350      	adds	r3, #80	; 0x50
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	b2d8      	uxtb	r0, r3
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	00db      	lsls	r3, r3, #3
 8004ee4:	440b      	add	r3, r1
 8004ee6:	335c      	adds	r3, #92	; 0x5c
 8004ee8:	781b      	ldrb	r3, [r3, #0]
 8004eea:	461a      	mov	r2, r3
 8004eec:	4601      	mov	r1, r0
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f00d ff6c 	bl	8012dcc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	440b      	add	r3, r1
 8004f02:	3350      	adds	r3, #80	; 0x50
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	f083 0301 	eor.w	r3, r3, #1
 8004f0a:	b2d8      	uxtb	r0, r3
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4613      	mov	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	4413      	add	r3, r2
 8004f16:	00db      	lsls	r3, r3, #3
 8004f18:	440b      	add	r3, r1
 8004f1a:	3350      	adds	r3, #80	; 0x50
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	701a      	strb	r2, [r3, #0]
}
 8004f20:	e1f7      	b.n	8005312 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	015a      	lsls	r2, r3, #5
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	4413      	add	r3, r2
 8004f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	f040 811a 	bne.w	800516e <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	0151      	lsls	r1, r2, #5
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	440a      	add	r2, r1
 8004f50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004f54:	f023 0302 	bic.w	r3, r3, #2
 8004f58:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004f5a:	6879      	ldr	r1, [r7, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	4413      	add	r3, r2
 8004f64:	00db      	lsls	r3, r3, #3
 8004f66:	440b      	add	r3, r1
 8004f68:	335d      	adds	r3, #93	; 0x5d
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10a      	bne.n	8004f86 <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	68fa      	ldr	r2, [r7, #12]
 8004f74:	4613      	mov	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	4413      	add	r3, r2
 8004f7a:	00db      	lsls	r3, r3, #3
 8004f7c:	440b      	add	r3, r1
 8004f7e:	335c      	adds	r3, #92	; 0x5c
 8004f80:	2201      	movs	r2, #1
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	e0d9      	b.n	800513a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	4413      	add	r3, r2
 8004f90:	00db      	lsls	r3, r3, #3
 8004f92:	440b      	add	r3, r1
 8004f94:	335d      	adds	r3, #93	; 0x5d
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b05      	cmp	r3, #5
 8004f9a:	d10a      	bne.n	8004fb2 <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	4413      	add	r3, r2
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	440b      	add	r3, r1
 8004faa:	335c      	adds	r3, #92	; 0x5c
 8004fac:	2205      	movs	r2, #5
 8004fae:	701a      	strb	r2, [r3, #0]
 8004fb0:	e0c3      	b.n	800513a <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	009b      	lsls	r3, r3, #2
 8004fba:	4413      	add	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	440b      	add	r3, r1
 8004fc0:	335d      	adds	r3, #93	; 0x5d
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b06      	cmp	r3, #6
 8004fc6:	d00a      	beq.n	8004fde <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	440b      	add	r3, r1
 8004fd6:	335d      	adds	r3, #93	; 0x5d
 8004fd8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004fda:	2b08      	cmp	r3, #8
 8004fdc:	d156      	bne.n	800508c <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4613      	mov	r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	4413      	add	r3, r2
 8004fe8:	00db      	lsls	r3, r3, #3
 8004fea:	440b      	add	r3, r1
 8004fec:	3358      	adds	r3, #88	; 0x58
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	1c59      	adds	r1, r3, #1
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	009b      	lsls	r3, r3, #2
 8004ffa:	4413      	add	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	4403      	add	r3, r0
 8005000:	3358      	adds	r3, #88	; 0x58
 8005002:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005004:	6879      	ldr	r1, [r7, #4]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4613      	mov	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	4413      	add	r3, r2
 800500e:	00db      	lsls	r3, r3, #3
 8005010:	440b      	add	r3, r1
 8005012:	3358      	adds	r3, #88	; 0x58
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b03      	cmp	r3, #3
 8005018:	d914      	bls.n	8005044 <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800501a:	6879      	ldr	r1, [r7, #4]
 800501c:	68fa      	ldr	r2, [r7, #12]
 800501e:	4613      	mov	r3, r2
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	440b      	add	r3, r1
 8005028:	3358      	adds	r3, #88	; 0x58
 800502a:	2200      	movs	r2, #0
 800502c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800502e:	6879      	ldr	r1, [r7, #4]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4613      	mov	r3, r2
 8005034:	009b      	lsls	r3, r3, #2
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	440b      	add	r3, r1
 800503c:	335c      	adds	r3, #92	; 0x5c
 800503e:	2204      	movs	r2, #4
 8005040:	701a      	strb	r2, [r3, #0]
 8005042:	e009      	b.n	8005058 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	00db      	lsls	r3, r3, #3
 8005050:	440b      	add	r3, r1
 8005052:	335c      	adds	r3, #92	; 0x5c
 8005054:	2202      	movs	r2, #2
 8005056:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800506e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005076:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005084:	461a      	mov	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	6013      	str	r3, [r2, #0]
 800508a:	e056      	b.n	800513a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800508c:	6879      	ldr	r1, [r7, #4]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	4613      	mov	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	4413      	add	r3, r2
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	440b      	add	r3, r1
 800509a:	335d      	adds	r3, #93	; 0x5d
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d123      	bne.n	80050ea <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	440b      	add	r3, r1
 80050b0:	335c      	adds	r3, #92	; 0x5c
 80050b2:	2202      	movs	r2, #2
 80050b4:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80050cc:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80050d4:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050e2:	461a      	mov	r2, r3
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	6013      	str	r3, [r2, #0]
 80050e8:	e027      	b.n	800513a <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	440b      	add	r3, r1
 80050f8:	335d      	adds	r3, #93	; 0x5d
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b07      	cmp	r3, #7
 80050fe:	d11c      	bne.n	800513a <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8005100:	6879      	ldr	r1, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4613      	mov	r3, r2
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	4413      	add	r3, r2
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	440b      	add	r3, r1
 800510e:	3358      	adds	r3, #88	; 0x58
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	1c59      	adds	r1, r3, #1
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	4403      	add	r3, r0
 8005122:	3358      	adds	r3, #88	; 0x58
 8005124:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	4613      	mov	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4413      	add	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	440b      	add	r3, r1
 8005134:	335c      	adds	r3, #92	; 0x5c
 8005136:	2204      	movs	r2, #4
 8005138:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	4413      	add	r3, r2
 8005142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005146:	461a      	mov	r2, r3
 8005148:	2302      	movs	r3, #2
 800514a:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	b2d8      	uxtb	r0, r3
 8005150:	6879      	ldr	r1, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	4613      	mov	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	4413      	add	r3, r2
 800515a:	00db      	lsls	r3, r3, #3
 800515c:	440b      	add	r3, r1
 800515e:	335c      	adds	r3, #92	; 0x5c
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	461a      	mov	r2, r3
 8005164:	4601      	mov	r1, r0
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f00d fe30 	bl	8012dcc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800516c:	e0d1      	b.n	8005312 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4413      	add	r3, r2
 8005176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005180:	2b80      	cmp	r3, #128	; 0x80
 8005182:	d13e      	bne.n	8005202 <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	4413      	add	r3, r2
 800518c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	0151      	lsls	r1, r2, #5
 8005196:	693a      	ldr	r2, [r7, #16]
 8005198:	440a      	add	r2, r1
 800519a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800519e:	f043 0302 	orr.w	r3, r3, #2
 80051a2:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80051a4:	6879      	ldr	r1, [r7, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4613      	mov	r3, r2
 80051aa:	009b      	lsls	r3, r3, #2
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	3358      	adds	r3, #88	; 0x58
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	1c59      	adds	r1, r3, #1
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4403      	add	r3, r0
 80051c6:	3358      	adds	r3, #88	; 0x58
 80051c8:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	00db      	lsls	r3, r3, #3
 80051d6:	440b      	add	r3, r1
 80051d8:	335d      	adds	r3, #93	; 0x5d
 80051da:	2206      	movs	r2, #6
 80051dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	b2d2      	uxtb	r2, r2
 80051e6:	4611      	mov	r1, r2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f005 fd18 	bl	800ac1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	461a      	mov	r2, r3
 80051fc:	2380      	movs	r3, #128	; 0x80
 80051fe:	6093      	str	r3, [r2, #8]
}
 8005200:	e087      	b.n	8005312 <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	693b      	ldr	r3, [r7, #16]
 8005208:	4413      	add	r3, r2
 800520a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f003 0310 	and.w	r3, r3, #16
 8005214:	2b10      	cmp	r3, #16
 8005216:	d17c      	bne.n	8005312 <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	333f      	adds	r3, #63	; 0x3f
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b03      	cmp	r3, #3
 800522c:	d122      	bne.n	8005274 <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800522e:	6879      	ldr	r1, [r7, #4]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	440b      	add	r3, r1
 800523c:	3358      	adds	r3, #88	; 0x58
 800523e:	2200      	movs	r2, #0
 8005240:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	4413      	add	r3, r2
 800524a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	440a      	add	r2, r1
 8005258:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800525c:	f043 0302 	orr.w	r3, r3, #2
 8005260:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68fa      	ldr	r2, [r7, #12]
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	4611      	mov	r1, r2
 800526c:	4618      	mov	r0, r3
 800526e:	f005 fcd6 	bl	800ac1e <USB_HC_Halt>
 8005272:	e045      	b.n	8005300 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4613      	mov	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	4413      	add	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	440b      	add	r3, r1
 8005282:	333f      	adds	r3, #63	; 0x3f
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00a      	beq.n	80052a0 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	4613      	mov	r3, r2
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	4413      	add	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	440b      	add	r3, r1
 8005298:	333f      	adds	r3, #63	; 0x3f
 800529a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800529c:	2b02      	cmp	r3, #2
 800529e:	d12f      	bne.n	8005300 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80052a0:	6879      	ldr	r1, [r7, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	440b      	add	r3, r1
 80052ae:	3358      	adds	r3, #88	; 0x58
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	691b      	ldr	r3, [r3, #16]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d121      	bne.n	8005300 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 80052bc:	6879      	ldr	r1, [r7, #4]
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	4613      	mov	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	4413      	add	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	440b      	add	r3, r1
 80052ca:	335d      	adds	r3, #93	; 0x5d
 80052cc:	2203      	movs	r2, #3
 80052ce:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	015a      	lsls	r2, r3, #5
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	0151      	lsls	r1, r2, #5
 80052e2:	693a      	ldr	r2, [r7, #16]
 80052e4:	440a      	add	r2, r1
 80052e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ea:	f043 0302 	orr.w	r3, r3, #2
 80052ee:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	b2d2      	uxtb	r2, r2
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f005 fc8f 	bl	800ac1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800530c:	461a      	mov	r2, r3
 800530e:	2310      	movs	r3, #16
 8005310:	6093      	str	r3, [r2, #8]
}
 8005312:	bf00      	nop
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b086      	sub	sp, #24
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
 8005322:	460b      	mov	r3, r1
 8005324:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	015a      	lsls	r2, r3, #5
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	4413      	add	r3, r2
 800533c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0304 	and.w	r3, r3, #4
 8005346:	2b04      	cmp	r3, #4
 8005348:	d119      	bne.n	800537e <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	015a      	lsls	r2, r3, #5
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4413      	add	r3, r2
 8005352:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005356:	461a      	mov	r2, r3
 8005358:	2304      	movs	r3, #4
 800535a:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	015a      	lsls	r2, r3, #5
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4413      	add	r3, r2
 8005364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005368:	68db      	ldr	r3, [r3, #12]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	0151      	lsls	r1, r2, #5
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	440a      	add	r2, r1
 8005372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005376:	f043 0302 	orr.w	r3, r3, #2
 800537a:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 800537c:	e33e      	b.n	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	015a      	lsls	r2, r3, #5
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	4413      	add	r3, r2
 8005386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f003 0320 	and.w	r3, r3, #32
 8005390:	2b20      	cmp	r3, #32
 8005392:	d141      	bne.n	8005418 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	4413      	add	r3, r2
 800539c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053a0:	461a      	mov	r2, r3
 80053a2:	2320      	movs	r3, #32
 80053a4:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	440b      	add	r3, r1
 80053b4:	333d      	adds	r3, #61	; 0x3d
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	f040 831f 	bne.w	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 80053be:	6879      	ldr	r1, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4613      	mov	r3, r2
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	4413      	add	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	440b      	add	r3, r1
 80053cc:	333d      	adds	r3, #61	; 0x3d
 80053ce:	2200      	movs	r2, #0
 80053d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4613      	mov	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	440b      	add	r3, r1
 80053e0:	335c      	adds	r3, #92	; 0x5c
 80053e2:	2202      	movs	r2, #2
 80053e4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	015a      	lsls	r2, r3, #5
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	4413      	add	r3, r2
 80053ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	68fa      	ldr	r2, [r7, #12]
 80053f6:	0151      	lsls	r1, r2, #5
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	440a      	add	r2, r1
 80053fc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005400:	f043 0302 	orr.w	r3, r3, #2
 8005404:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f005 fc04 	bl	800ac1e <USB_HC_Halt>
}
 8005416:	e2f1      	b.n	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	015a      	lsls	r2, r3, #5
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	4413      	add	r3, r2
 8005420:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d13f      	bne.n	80054ae <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4613      	mov	r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	4413      	add	r3, r2
 8005438:	00db      	lsls	r3, r3, #3
 800543a:	440b      	add	r3, r1
 800543c:	335d      	adds	r3, #93	; 0x5d
 800543e:	2204      	movs	r2, #4
 8005440:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005442:	6879      	ldr	r1, [r7, #4]
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	4613      	mov	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	440b      	add	r3, r1
 8005450:	333d      	adds	r3, #61	; 0x3d
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005456:	6879      	ldr	r1, [r7, #4]
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	00db      	lsls	r3, r3, #3
 8005462:	440b      	add	r3, r1
 8005464:	3358      	adds	r3, #88	; 0x58
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	015a      	lsls	r2, r3, #5
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	4413      	add	r3, r2
 8005472:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	68fa      	ldr	r2, [r7, #12]
 800547a:	0151      	lsls	r1, r2, #5
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	440a      	add	r2, r1
 8005480:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005484:	f043 0302 	orr.w	r3, r3, #2
 8005488:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	b2d2      	uxtb	r2, r2
 8005492:	4611      	mov	r1, r2
 8005494:	4618      	mov	r0, r3
 8005496:	f005 fbc2 	bl	800ac1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	015a      	lsls	r2, r3, #5
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	4413      	add	r3, r2
 80054a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054a6:	461a      	mov	r2, r3
 80054a8:	2340      	movs	r3, #64	; 0x40
 80054aa:	6093      	str	r3, [r2, #8]
}
 80054ac:	e2a6      	b.n	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054c4:	d122      	bne.n	800550c <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	015a      	lsls	r2, r3, #5
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4413      	add	r3, r2
 80054ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	0151      	lsls	r1, r2, #5
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	440a      	add	r2, r1
 80054dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054e0:	f043 0302 	orr.w	r3, r3, #2
 80054e4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	b2d2      	uxtb	r2, r2
 80054ee:	4611      	mov	r1, r2
 80054f0:	4618      	mov	r0, r3
 80054f2:	f005 fb94 	bl	800ac1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	461a      	mov	r2, r3
 8005504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005508:	6093      	str	r3, [r2, #8]
}
 800550a:	e277      	b.n	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d135      	bne.n	800558e <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	00db      	lsls	r3, r3, #3
 800552e:	440b      	add	r3, r1
 8005530:	3358      	adds	r3, #88	; 0x58
 8005532:	2200      	movs	r2, #0
 8005534:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	4413      	add	r3, r2
 800553e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	440a      	add	r2, r1
 800554c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005550:	f043 0302 	orr.w	r3, r3, #2
 8005554:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68fa      	ldr	r2, [r7, #12]
 800555c:	b2d2      	uxtb	r2, r2
 800555e:	4611      	mov	r1, r2
 8005560:	4618      	mov	r0, r3
 8005562:	f005 fb5c 	bl	800ac1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	015a      	lsls	r2, r3, #5
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	4413      	add	r3, r2
 800556e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005572:	461a      	mov	r2, r3
 8005574:	2301      	movs	r3, #1
 8005576:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4613      	mov	r3, r2
 800557e:	009b      	lsls	r3, r3, #2
 8005580:	4413      	add	r3, r2
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	440b      	add	r3, r1
 8005586:	335d      	adds	r3, #93	; 0x5d
 8005588:	2201      	movs	r2, #1
 800558a:	701a      	strb	r2, [r3, #0]
}
 800558c:	e236      	b.n	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	015a      	lsls	r2, r3, #5
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	4413      	add	r3, r2
 8005596:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d12b      	bne.n	80055fc <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	015a      	lsls	r2, r3, #5
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	4413      	add	r3, r2
 80055ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b0:	461a      	mov	r2, r3
 80055b2:	2308      	movs	r3, #8
 80055b4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055d0:	f043 0302 	orr.w	r3, r3, #2
 80055d4:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	4611      	mov	r1, r2
 80055e0:	4618      	mov	r0, r3
 80055e2:	f005 fb1c 	bl	800ac1e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 80055e6:	6879      	ldr	r1, [r7, #4]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	00db      	lsls	r3, r3, #3
 80055f2:	440b      	add	r3, r1
 80055f4:	335d      	adds	r3, #93	; 0x5d
 80055f6:	2205      	movs	r2, #5
 80055f8:	701a      	strb	r2, [r3, #0]
}
 80055fa:	e1ff      	b.n	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	4413      	add	r3, r2
 8005604:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f003 0310 	and.w	r3, r3, #16
 800560e:	2b10      	cmp	r3, #16
 8005610:	d155      	bne.n	80056be <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005612:	6879      	ldr	r1, [r7, #4]
 8005614:	68fa      	ldr	r2, [r7, #12]
 8005616:	4613      	mov	r3, r2
 8005618:	009b      	lsls	r3, r3, #2
 800561a:	4413      	add	r3, r2
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	440b      	add	r3, r1
 8005620:	3358      	adds	r3, #88	; 0x58
 8005622:	2200      	movs	r2, #0
 8005624:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005626:	6879      	ldr	r1, [r7, #4]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4613      	mov	r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4413      	add	r3, r2
 8005630:	00db      	lsls	r3, r3, #3
 8005632:	440b      	add	r3, r1
 8005634:	335d      	adds	r3, #93	; 0x5d
 8005636:	2203      	movs	r2, #3
 8005638:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4613      	mov	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4413      	add	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	440b      	add	r3, r1
 8005648:	333d      	adds	r3, #61	; 0x3d
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d114      	bne.n	800567a <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8005650:	6879      	ldr	r1, [r7, #4]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4613      	mov	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	4413      	add	r3, r2
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	440b      	add	r3, r1
 800565e:	333c      	adds	r3, #60	; 0x3c
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d109      	bne.n	800567a <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8005666:	6879      	ldr	r1, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4613      	mov	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	4413      	add	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	440b      	add	r3, r1
 8005674:	333d      	adds	r3, #61	; 0x3d
 8005676:	2201      	movs	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	4413      	add	r3, r2
 8005682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	0151      	lsls	r1, r2, #5
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	440a      	add	r2, r1
 8005690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005694:	f043 0302 	orr.w	r3, r3, #2
 8005698:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	b2d2      	uxtb	r2, r2
 80056a2:	4611      	mov	r1, r2
 80056a4:	4618      	mov	r0, r3
 80056a6:	f005 faba 	bl	800ac1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	015a      	lsls	r2, r3, #5
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	4413      	add	r3, r2
 80056b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056b6:	461a      	mov	r2, r3
 80056b8:	2310      	movs	r3, #16
 80056ba:	6093      	str	r3, [r2, #8]
}
 80056bc:	e19e      	b.n	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	015a      	lsls	r2, r3, #5
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	4413      	add	r3, r2
 80056c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ca:	689b      	ldr	r3, [r3, #8]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d12b      	bne.n	800572c <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ee:	f043 0302 	orr.w	r3, r3, #2
 80056f2:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	b2d2      	uxtb	r2, r2
 80056fc:	4611      	mov	r1, r2
 80056fe:	4618      	mov	r0, r3
 8005700:	f005 fa8d 	bl	800ac1e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005704:	6879      	ldr	r1, [r7, #4]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4613      	mov	r3, r2
 800570a:	009b      	lsls	r3, r3, #2
 800570c:	4413      	add	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	440b      	add	r3, r1
 8005712:	335d      	adds	r3, #93	; 0x5d
 8005714:	2206      	movs	r2, #6
 8005716:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	015a      	lsls	r2, r3, #5
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	4413      	add	r3, r2
 8005720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005724:	461a      	mov	r2, r3
 8005726:	2380      	movs	r3, #128	; 0x80
 8005728:	6093      	str	r3, [r2, #8]
}
 800572a:	e167      	b.n	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	4413      	add	r3, r2
 8005734:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800573e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005742:	d135      	bne.n	80057b0 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	440a      	add	r2, r1
 800575a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575e:	f043 0302 	orr.w	r3, r3, #2
 8005762:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	b2d2      	uxtb	r2, r2
 800576c:	4611      	mov	r1, r2
 800576e:	4618      	mov	r0, r3
 8005770:	f005 fa55 	bl	800ac1e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	4413      	add	r3, r2
 800577c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005780:	461a      	mov	r2, r3
 8005782:	2310      	movs	r3, #16
 8005784:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	4413      	add	r3, r2
 800578e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005792:	461a      	mov	r2, r3
 8005794:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005798:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	440b      	add	r3, r1
 80057a8:	335d      	adds	r3, #93	; 0x5d
 80057aa:	2208      	movs	r2, #8
 80057ac:	701a      	strb	r2, [r3, #0]
}
 80057ae:	e125      	b.n	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f003 0302 	and.w	r3, r3, #2
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	f040 811a 	bne.w	80059fc <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e2:	f023 0302 	bic.w	r3, r3, #2
 80057e6:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	440b      	add	r3, r1
 80057f6:	335d      	adds	r3, #93	; 0x5d
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d137      	bne.n	800586e <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	440b      	add	r3, r1
 800580c:	335c      	adds	r3, #92	; 0x5c
 800580e:	2201      	movs	r2, #1
 8005810:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005812:	6879      	ldr	r1, [r7, #4]
 8005814:	68fa      	ldr	r2, [r7, #12]
 8005816:	4613      	mov	r3, r2
 8005818:	009b      	lsls	r3, r3, #2
 800581a:	4413      	add	r3, r2
 800581c:	00db      	lsls	r3, r3, #3
 800581e:	440b      	add	r3, r1
 8005820:	333f      	adds	r3, #63	; 0x3f
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b02      	cmp	r3, #2
 8005826:	d00b      	beq.n	8005840 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8005828:	6879      	ldr	r1, [r7, #4]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	440b      	add	r3, r1
 8005836:	333f      	adds	r3, #63	; 0x3f
 8005838:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800583a:	2b03      	cmp	r3, #3
 800583c:	f040 80c5 	bne.w	80059ca <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4613      	mov	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	4413      	add	r3, r2
 800584a:	00db      	lsls	r3, r3, #3
 800584c:	440b      	add	r3, r1
 800584e:	3351      	adds	r3, #81	; 0x51
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f083 0301 	eor.w	r3, r3, #1
 8005856:	b2d8      	uxtb	r0, r3
 8005858:	6879      	ldr	r1, [r7, #4]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4613      	mov	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	4413      	add	r3, r2
 8005862:	00db      	lsls	r3, r3, #3
 8005864:	440b      	add	r3, r1
 8005866:	3351      	adds	r3, #81	; 0x51
 8005868:	4602      	mov	r2, r0
 800586a:	701a      	strb	r2, [r3, #0]
 800586c:	e0ad      	b.n	80059ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800586e:	6879      	ldr	r1, [r7, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	440b      	add	r3, r1
 800587c:	335d      	adds	r3, #93	; 0x5d
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b03      	cmp	r3, #3
 8005882:	d10a      	bne.n	800589a <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005884:	6879      	ldr	r1, [r7, #4]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4613      	mov	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	4413      	add	r3, r2
 800588e:	00db      	lsls	r3, r3, #3
 8005890:	440b      	add	r3, r1
 8005892:	335c      	adds	r3, #92	; 0x5c
 8005894:	2202      	movs	r2, #2
 8005896:	701a      	strb	r2, [r3, #0]
 8005898:	e097      	b.n	80059ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800589a:	6879      	ldr	r1, [r7, #4]
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	4613      	mov	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	4413      	add	r3, r2
 80058a4:	00db      	lsls	r3, r3, #3
 80058a6:	440b      	add	r3, r1
 80058a8:	335d      	adds	r3, #93	; 0x5d
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d10a      	bne.n	80058c6 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80058b0:	6879      	ldr	r1, [r7, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4613      	mov	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	4413      	add	r3, r2
 80058ba:	00db      	lsls	r3, r3, #3
 80058bc:	440b      	add	r3, r1
 80058be:	335c      	adds	r3, #92	; 0x5c
 80058c0:	2202      	movs	r2, #2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	e081      	b.n	80059ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80058c6:	6879      	ldr	r1, [r7, #4]
 80058c8:	68fa      	ldr	r2, [r7, #12]
 80058ca:	4613      	mov	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	4413      	add	r3, r2
 80058d0:	00db      	lsls	r3, r3, #3
 80058d2:	440b      	add	r3, r1
 80058d4:	335d      	adds	r3, #93	; 0x5d
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b05      	cmp	r3, #5
 80058da:	d10a      	bne.n	80058f2 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80058dc:	6879      	ldr	r1, [r7, #4]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	00db      	lsls	r3, r3, #3
 80058e8:	440b      	add	r3, r1
 80058ea:	335c      	adds	r3, #92	; 0x5c
 80058ec:	2205      	movs	r2, #5
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	e06b      	b.n	80059ca <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058f2:	6879      	ldr	r1, [r7, #4]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	440b      	add	r3, r1
 8005900:	335d      	adds	r3, #93	; 0x5d
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b06      	cmp	r3, #6
 8005906:	d00a      	beq.n	800591e <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4613      	mov	r3, r2
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	4413      	add	r3, r2
 8005912:	00db      	lsls	r3, r3, #3
 8005914:	440b      	add	r3, r1
 8005916:	335d      	adds	r3, #93	; 0x5d
 8005918:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800591a:	2b08      	cmp	r3, #8
 800591c:	d155      	bne.n	80059ca <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	440b      	add	r3, r1
 800592c:	3358      	adds	r3, #88	; 0x58
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	1c59      	adds	r1, r3, #1
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4403      	add	r3, r0
 8005940:	3358      	adds	r3, #88	; 0x58
 8005942:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4613      	mov	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4413      	add	r3, r2
 800594e:	00db      	lsls	r3, r3, #3
 8005950:	440b      	add	r3, r1
 8005952:	3358      	adds	r3, #88	; 0x58
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b03      	cmp	r3, #3
 8005958:	d914      	bls.n	8005984 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800595a:	6879      	ldr	r1, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	4613      	mov	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	4413      	add	r3, r2
 8005964:	00db      	lsls	r3, r3, #3
 8005966:	440b      	add	r3, r1
 8005968:	3358      	adds	r3, #88	; 0x58
 800596a:	2200      	movs	r2, #0
 800596c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4613      	mov	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	4413      	add	r3, r2
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	440b      	add	r3, r1
 800597c:	335c      	adds	r3, #92	; 0x5c
 800597e:	2204      	movs	r2, #4
 8005980:	701a      	strb	r2, [r3, #0]
 8005982:	e009      	b.n	8005998 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005984:	6879      	ldr	r1, [r7, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	440b      	add	r3, r1
 8005992:	335c      	adds	r3, #92	; 0x5c
 8005994:	2202      	movs	r2, #2
 8005996:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	015a      	lsls	r2, r3, #5
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059ae:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059b6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059c4:	461a      	mov	r2, r3
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d6:	461a      	mov	r2, r3
 80059d8:	2302      	movs	r3, #2
 80059da:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	b2d8      	uxtb	r0, r3
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4613      	mov	r3, r2
 80059e6:	009b      	lsls	r3, r3, #2
 80059e8:	4413      	add	r3, r2
 80059ea:	00db      	lsls	r3, r3, #3
 80059ec:	440b      	add	r3, r1
 80059ee:	335c      	adds	r3, #92	; 0x5c
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	461a      	mov	r2, r3
 80059f4:	4601      	mov	r1, r0
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f00d f9e8 	bl	8012dcc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80059fc:	bf00      	nop
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08a      	sub	sp, #40	; 0x28
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	6a1b      	ldr	r3, [r3, #32]
 8005a1c:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f003 030f 	and.w	r3, r3, #15
 8005a24:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	0c5b      	lsrs	r3, r3, #17
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	091b      	lsrs	r3, r3, #4
 8005a34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a38:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d004      	beq.n	8005a4a <HCD_RXQLVL_IRQHandler+0x46>
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2b05      	cmp	r3, #5
 8005a44:	f000 8082 	beq.w	8005b4c <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005a48:	e083      	b.n	8005b52 <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d07f      	beq.n	8005b50 <HCD_RXQLVL_IRQHandler+0x14c>
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	4613      	mov	r3, r2
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	4413      	add	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	3344      	adds	r3, #68	; 0x44
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d074      	beq.n	8005b50 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	6879      	ldr	r1, [r7, #4]
 8005a6c:	69ba      	ldr	r2, [r7, #24]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	4413      	add	r3, r2
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	440b      	add	r3, r1
 8005a78:	3344      	adds	r3, #68	; 0x44
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	b292      	uxth	r2, r2
 8005a80:	4619      	mov	r1, r3
 8005a82:	f004 fc72 	bl	800a36a <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	3344      	adds	r3, #68	; 0x44
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	18d1      	adds	r1, r2, r3
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	69ba      	ldr	r2, [r7, #24]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	4413      	add	r3, r2
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	4403      	add	r3, r0
 8005aaa:	3344      	adds	r3, #68	; 0x44
 8005aac:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8005aae:	6879      	ldr	r1, [r7, #4]
 8005ab0:	69ba      	ldr	r2, [r7, #24]
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	440b      	add	r3, r1
 8005abc:	334c      	adds	r3, #76	; 0x4c
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	18d1      	adds	r1, r2, r3
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	4613      	mov	r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	4413      	add	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4403      	add	r3, r0
 8005ad2:	334c      	adds	r3, #76	; 0x4c
 8005ad4:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8005ad6:	69bb      	ldr	r3, [r7, #24]
 8005ad8:	015a      	lsls	r2, r3, #5
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	4413      	add	r3, r2
 8005ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ae2:	691a      	ldr	r2, [r3, #16]
 8005ae4:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <HCD_RXQLVL_IRQHandler+0x158>)
 8005ae6:	4013      	ands	r3, r2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d031      	beq.n	8005b50 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	015a      	lsls	r2, r3, #5
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	4413      	add	r3, r2
 8005af4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b02:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b0a:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	015a      	lsls	r2, r3, #5
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	4413      	add	r3, r2
 8005b14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b18:	461a      	mov	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b1e:	6879      	ldr	r1, [r7, #4]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	4613      	mov	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	00db      	lsls	r3, r3, #3
 8005b2a:	440b      	add	r3, r1
 8005b2c:	3350      	adds	r3, #80	; 0x50
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	f083 0301 	eor.w	r3, r3, #1
 8005b34:	b2d8      	uxtb	r0, r3
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	00db      	lsls	r3, r3, #3
 8005b42:	440b      	add	r3, r1
 8005b44:	3350      	adds	r3, #80	; 0x50
 8005b46:	4602      	mov	r2, r0
 8005b48:	701a      	strb	r2, [r3, #0]
      break;
 8005b4a:	e001      	b.n	8005b50 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8005b4c:	bf00      	nop
 8005b4e:	e000      	b.n	8005b52 <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 8005b50:	bf00      	nop
  }
}
 8005b52:	bf00      	nop
 8005b54:	3728      	adds	r7, #40	; 0x28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	1ff80000 	.word	0x1ff80000

08005b60 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005b8c:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f003 0302 	and.w	r3, r3, #2
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d10b      	bne.n	8005bb0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f003 0301 	and.w	r3, r3, #1
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d102      	bne.n	8005ba8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f00d f8f6 	bl	8012d94 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	f043 0302 	orr.w	r3, r3, #2
 8005bae:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f003 0308 	and.w	r3, r3, #8
 8005bb6:	2b08      	cmp	r3, #8
 8005bb8:	d132      	bne.n	8005c20 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f043 0308 	orr.w	r3, r3, #8
 8005bc0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b04      	cmp	r3, #4
 8005bca:	d126      	bne.n	8005c1a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	699b      	ldr	r3, [r3, #24]
 8005bd0:	2b02      	cmp	r3, #2
 8005bd2:	d113      	bne.n	8005bfc <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005bda:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bde:	d106      	bne.n	8005bee <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2102      	movs	r1, #2
 8005be6:	4618      	mov	r0, r3
 8005be8:	f004 fcf4 	bl	800a5d4 <USB_InitFSLSPClkSel>
 8005bec:	e011      	b.n	8005c12 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2101      	movs	r1, #1
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f004 fced 	bl	800a5d4 <USB_InitFSLSPClkSel>
 8005bfa:	e00a      	b.n	8005c12 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d106      	bne.n	8005c12 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005c10:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f00d f8ec 	bl	8012df0 <HAL_HCD_PortEnabled_Callback>
 8005c18:	e002      	b.n	8005c20 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f00d f8f6 	bl	8012e0c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	d103      	bne.n	8005c32 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	f043 0320 	orr.w	r3, r3, #32
 8005c30:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c38:	461a      	mov	r2, r3
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	6013      	str	r3, [r2, #0]
}
 8005c3e:	bf00      	nop
 8005c40:	3718      	adds	r7, #24
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}
	...

08005c48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d101      	bne.n	8005c5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e12b      	b.n	8005eb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7fb fcf4 	bl	800165c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2224      	movs	r2, #36	; 0x24
 8005c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005caa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005cac:	f001 f82e 	bl	8006d0c <HAL_RCC_GetPCLK1Freq>
 8005cb0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	4a81      	ldr	r2, [pc, #516]	; (8005ebc <HAL_I2C_Init+0x274>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d807      	bhi.n	8005ccc <HAL_I2C_Init+0x84>
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4a80      	ldr	r2, [pc, #512]	; (8005ec0 <HAL_I2C_Init+0x278>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	bf94      	ite	ls
 8005cc4:	2301      	movls	r3, #1
 8005cc6:	2300      	movhi	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	e006      	b.n	8005cda <HAL_I2C_Init+0x92>
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	4a7d      	ldr	r2, [pc, #500]	; (8005ec4 <HAL_I2C_Init+0x27c>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	bf94      	ite	ls
 8005cd4:	2301      	movls	r3, #1
 8005cd6:	2300      	movhi	r3, #0
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e0e7      	b.n	8005eb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a78      	ldr	r2, [pc, #480]	; (8005ec8 <HAL_I2C_Init+0x280>)
 8005ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8005cea:	0c9b      	lsrs	r3, r3, #18
 8005cec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68ba      	ldr	r2, [r7, #8]
 8005cfe:	430a      	orrs	r2, r1
 8005d00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	4a6a      	ldr	r2, [pc, #424]	; (8005ebc <HAL_I2C_Init+0x274>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d802      	bhi.n	8005d1c <HAL_I2C_Init+0xd4>
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	3301      	adds	r3, #1
 8005d1a:	e009      	b.n	8005d30 <HAL_I2C_Init+0xe8>
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005d22:	fb02 f303 	mul.w	r3, r2, r3
 8005d26:	4a69      	ldr	r2, [pc, #420]	; (8005ecc <HAL_I2C_Init+0x284>)
 8005d28:	fba2 2303 	umull	r2, r3, r2, r3
 8005d2c:	099b      	lsrs	r3, r3, #6
 8005d2e:	3301      	adds	r3, #1
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6812      	ldr	r2, [r2, #0]
 8005d34:	430b      	orrs	r3, r1
 8005d36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005d42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	495c      	ldr	r1, [pc, #368]	; (8005ebc <HAL_I2C_Init+0x274>)
 8005d4c:	428b      	cmp	r3, r1
 8005d4e:	d819      	bhi.n	8005d84 <HAL_I2C_Init+0x13c>
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	1e59      	subs	r1, r3, #1
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	005b      	lsls	r3, r3, #1
 8005d5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005d64:	400b      	ands	r3, r1
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00a      	beq.n	8005d80 <HAL_I2C_Init+0x138>
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	1e59      	subs	r1, r3, #1
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	005b      	lsls	r3, r3, #1
 8005d74:	fbb1 f3f3 	udiv	r3, r1, r3
 8005d78:	3301      	adds	r3, #1
 8005d7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005d7e:	e051      	b.n	8005e24 <HAL_I2C_Init+0x1dc>
 8005d80:	2304      	movs	r3, #4
 8005d82:	e04f      	b.n	8005e24 <HAL_I2C_Init+0x1dc>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	689b      	ldr	r3, [r3, #8]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d111      	bne.n	8005db0 <HAL_I2C_Init+0x168>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	1e58      	subs	r0, r3, #1
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6859      	ldr	r1, [r3, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	440b      	add	r3, r1
 8005d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005d9e:	3301      	adds	r3, #1
 8005da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	bf0c      	ite	eq
 8005da8:	2301      	moveq	r3, #1
 8005daa:	2300      	movne	r3, #0
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	e012      	b.n	8005dd6 <HAL_I2C_Init+0x18e>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	1e58      	subs	r0, r3, #1
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6859      	ldr	r1, [r3, #4]
 8005db8:	460b      	mov	r3, r1
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	440b      	add	r3, r1
 8005dbe:	0099      	lsls	r1, r3, #2
 8005dc0:	440b      	add	r3, r1
 8005dc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	bf0c      	ite	eq
 8005dd0:	2301      	moveq	r3, #1
 8005dd2:	2300      	movne	r3, #0
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d001      	beq.n	8005dde <HAL_I2C_Init+0x196>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e022      	b.n	8005e24 <HAL_I2C_Init+0x1dc>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d10e      	bne.n	8005e04 <HAL_I2C_Init+0x1bc>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1e58      	subs	r0, r3, #1
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6859      	ldr	r1, [r3, #4]
 8005dee:	460b      	mov	r3, r1
 8005df0:	005b      	lsls	r3, r3, #1
 8005df2:	440b      	add	r3, r1
 8005df4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005df8:	3301      	adds	r3, #1
 8005dfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e02:	e00f      	b.n	8005e24 <HAL_I2C_Init+0x1dc>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	1e58      	subs	r0, r3, #1
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6859      	ldr	r1, [r3, #4]
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	0099      	lsls	r1, r3, #2
 8005e14:	440b      	add	r3, r1
 8005e16:	fbb0 f3f3 	udiv	r3, r0, r3
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e24:	6879      	ldr	r1, [r7, #4]
 8005e26:	6809      	ldr	r1, [r1, #0]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	69da      	ldr	r2, [r3, #28]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	431a      	orrs	r2, r3
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	430a      	orrs	r2, r1
 8005e46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8005e52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	6911      	ldr	r1, [r2, #16]
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	68d2      	ldr	r2, [r2, #12]
 8005e5e:	4311      	orrs	r1, r2
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	6812      	ldr	r2, [r2, #0]
 8005e64:	430b      	orrs	r3, r1
 8005e66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695a      	ldr	r2, [r3, #20]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	431a      	orrs	r2, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	681a      	ldr	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0201 	orr.w	r2, r2, #1
 8005e92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2220      	movs	r2, #32
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3710      	adds	r7, #16
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	000186a0 	.word	0x000186a0
 8005ec0:	001e847f 	.word	0x001e847f
 8005ec4:	003d08ff 	.word	0x003d08ff
 8005ec8:	431bde83 	.word	0x431bde83
 8005ecc:	10624dd3 	.word	0x10624dd3

08005ed0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e154      	b.n	800618c <HAL_I2S_Init+0x2bc>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d109      	bne.n	8005f02 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a98      	ldr	r2, [pc, #608]	; (800615c <HAL_I2S_Init+0x28c>)
 8005efa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f7fb fbf5 	bl	80016ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2202      	movs	r2, #2
 8005f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69db      	ldr	r3, [r3, #28]
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	6812      	ldr	r2, [r2, #0]
 8005f14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005f18:	f023 030f 	bic.w	r3, r3, #15
 8005f1c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2202      	movs	r2, #2
 8005f24:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d06f      	beq.n	800600e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d102      	bne.n	8005f3c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005f36:	2310      	movs	r3, #16
 8005f38:	617b      	str	r3, [r7, #20]
 8005f3a:	e001      	b.n	8005f40 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005f3c:	2320      	movs	r3, #32
 8005f3e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b20      	cmp	r3, #32
 8005f46:	d802      	bhi.n	8005f4e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value **********************************************/
#if defined(I2S_APB1_APB2_FEATURE)
    if (IS_I2S_APB1_INSTANCE(hi2s->Instance))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a83      	ldr	r2, [pc, #524]	; (8006160 <HAL_I2S_Init+0x290>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d004      	beq.n	8005f62 <HAL_I2S_Init+0x92>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a81      	ldr	r2, [pc, #516]	; (8006164 <HAL_I2S_Init+0x294>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d104      	bne.n	8005f6c <HAL_I2S_Init+0x9c>
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB1);
 8005f62:	2001      	movs	r0, #1
 8005f64:	f001 f9b8 	bl	80072d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	e003      	b.n	8005f74 <HAL_I2S_Init+0xa4>
    }
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
 8005f6c:	2002      	movs	r0, #2
 8005f6e:	f001 f9b3 	bl	80072d8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005f72:	60f8      	str	r0, [r7, #12]
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	691b      	ldr	r3, [r3, #16]
 8005f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7c:	d125      	bne.n	8005fca <HAL_I2S_Init+0xfa>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d010      	beq.n	8005fa8 <HAL_I2S_Init+0xd8>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005f90:	4613      	mov	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4413      	add	r3, r2
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	461a      	mov	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fa2:	3305      	adds	r3, #5
 8005fa4:	613b      	str	r3, [r7, #16]
 8005fa6:	e01f      	b.n	8005fe8 <HAL_I2S_Init+0x118>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	00db      	lsls	r3, r3, #3
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	4413      	add	r3, r2
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	461a      	mov	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc4:	3305      	adds	r3, #5
 8005fc6:	613b      	str	r3, [r7, #16]
 8005fc8:	e00e      	b.n	8005fe8 <HAL_I2S_Init+0x118>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	fbb2 f2f3 	udiv	r2, r2, r3
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	009b      	lsls	r3, r3, #2
 8005fd6:	4413      	add	r3, r2
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	461a      	mov	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe4:	3305      	adds	r3, #5
 8005fe6:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	4a5f      	ldr	r2, [pc, #380]	; (8006168 <HAL_I2S_Init+0x298>)
 8005fec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff0:	08db      	lsrs	r3, r3, #3
 8005ff2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	f003 0301 	and.w	r3, r3, #1
 8005ffa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	085b      	lsrs	r3, r3, #1
 8006004:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	021b      	lsls	r3, r3, #8
 800600a:	61bb      	str	r3, [r7, #24]
 800600c:	e003      	b.n	8006016 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800600e:	2302      	movs	r3, #2
 8006010:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006012:	2300      	movs	r3, #0
 8006014:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d902      	bls.n	8006022 <HAL_I2S_Init+0x152>
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2bff      	cmp	r3, #255	; 0xff
 8006020:	d907      	bls.n	8006032 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006026:	f043 0210 	orr.w	r2, r3, #16
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e0ac      	b.n	800618c <HAL_I2S_Init+0x2bc>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	691a      	ldr	r2, [r3, #16]
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	ea42 0103 	orr.w	r1, r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	430a      	orrs	r2, r1
 8006044:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69db      	ldr	r3, [r3, #28]
 800604c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8006050:	f023 030f 	bic.w	r3, r3, #15
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	6851      	ldr	r1, [r2, #4]
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6892      	ldr	r2, [r2, #8]
 800605c:	4311      	orrs	r1, r2
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	68d2      	ldr	r2, [r2, #12]
 8006062:	4311      	orrs	r1, r2
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6992      	ldr	r2, [r2, #24]
 8006068:	430a      	orrs	r2, r1
 800606a:	431a      	orrs	r2, r3
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006074:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	2b30      	cmp	r3, #48	; 0x30
 800607c:	d003      	beq.n	8006086 <HAL_I2S_Init+0x1b6>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	2bb0      	cmp	r3, #176	; 0xb0
 8006084:	d107      	bne.n	8006096 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006094:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d16e      	bne.n	800617c <HAL_I2S_Init+0x2ac>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a32      	ldr	r2, [pc, #200]	; (800616c <HAL_I2S_Init+0x29c>)
 80060a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a2d      	ldr	r2, [pc, #180]	; (8006160 <HAL_I2S_Init+0x290>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d101      	bne.n	80060b2 <HAL_I2S_Init+0x1e2>
 80060ae:	4b30      	ldr	r3, [pc, #192]	; (8006170 <HAL_I2S_Init+0x2a0>)
 80060b0:	e001      	b.n	80060b6 <HAL_I2S_Init+0x1e6>
 80060b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6812      	ldr	r2, [r2, #0]
 80060bc:	4928      	ldr	r1, [pc, #160]	; (8006160 <HAL_I2S_Init+0x290>)
 80060be:	428a      	cmp	r2, r1
 80060c0:	d101      	bne.n	80060c6 <HAL_I2S_Init+0x1f6>
 80060c2:	4a2b      	ldr	r2, [pc, #172]	; (8006170 <HAL_I2S_Init+0x2a0>)
 80060c4:	e001      	b.n	80060ca <HAL_I2S_Init+0x1fa>
 80060c6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80060ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80060ce:	f023 030f 	bic.w	r3, r3, #15
 80060d2:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a21      	ldr	r2, [pc, #132]	; (8006160 <HAL_I2S_Init+0x290>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d101      	bne.n	80060e2 <HAL_I2S_Init+0x212>
 80060de:	4b24      	ldr	r3, [pc, #144]	; (8006170 <HAL_I2S_Init+0x2a0>)
 80060e0:	e001      	b.n	80060e6 <HAL_I2S_Init+0x216>
 80060e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060e6:	2202      	movs	r2, #2
 80060e8:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <HAL_I2S_Init+0x290>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d101      	bne.n	80060f8 <HAL_I2S_Init+0x228>
 80060f4:	4b1e      	ldr	r3, [pc, #120]	; (8006170 <HAL_I2S_Init+0x2a0>)
 80060f6:	e001      	b.n	80060fc <HAL_I2S_Init+0x22c>
 80060f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80060fc:	69db      	ldr	r3, [r3, #28]
 80060fe:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006108:	d003      	beq.n	8006112 <HAL_I2S_Init+0x242>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d103      	bne.n	800611a <HAL_I2S_Init+0x24a>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8006112:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006116:	613b      	str	r3, [r7, #16]
 8006118:	e001      	b.n	800611e <HAL_I2S_Init+0x24e>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800611a:	2300      	movs	r3, #0
 800611c:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	b299      	uxth	r1, r3
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8006134:	4303      	orrs	r3, r0
 8006136:	b29b      	uxth	r3, r3
 8006138:	430b      	orrs	r3, r1
 800613a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800613c:	4313      	orrs	r3, r2
 800613e:	b29a      	uxth	r2, r3
 8006140:	897b      	ldrh	r3, [r7, #10]
 8006142:	4313      	orrs	r3, r2
 8006144:	b29b      	uxth	r3, r3
 8006146:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800614a:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a03      	ldr	r2, [pc, #12]	; (8006160 <HAL_I2S_Init+0x290>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d10e      	bne.n	8006174 <HAL_I2S_Init+0x2a4>
 8006156:	4b06      	ldr	r3, [pc, #24]	; (8006170 <HAL_I2S_Init+0x2a0>)
 8006158:	e00e      	b.n	8006178 <HAL_I2S_Init+0x2a8>
 800615a:	bf00      	nop
 800615c:	0800624f 	.word	0x0800624f
 8006160:	40003800 	.word	0x40003800
 8006164:	40003c00 	.word	0x40003c00
 8006168:	cccccccd 	.word	0xcccccccd
 800616c:	08006365 	.word	0x08006365
 8006170:	40003400 	.word	0x40003400
 8006174:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006178:	897a      	ldrh	r2, [r7, #10]
 800617a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2201      	movs	r2, #1
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3720      	adds	r7, #32
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061a0:	881a      	ldrh	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ac:	1c9a      	adds	r2, r3, #2
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b29a      	uxth	r2, r3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10e      	bne.n	80061e8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80061d8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fc fc34 	bl	8002a50 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006202:	b292      	uxth	r2, r2
 8006204:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620a:	1c9a      	adds	r2, r3, #2
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006214:	b29b      	uxth	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d10e      	bne.n	8006246 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006236:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fc fc27 	bl	8002a94 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006246:	bf00      	nop
 8006248:	3708      	adds	r7, #8
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b086      	sub	sp, #24
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b04      	cmp	r3, #4
 8006268:	d13a      	bne.n	80062e0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b01      	cmp	r3, #1
 8006272:	d109      	bne.n	8006288 <I2S_IRQHandler+0x3a>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627e:	2b40      	cmp	r3, #64	; 0x40
 8006280:	d102      	bne.n	8006288 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f7ff ffb4 	bl	80061f0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d126      	bne.n	80062e0 <I2S_IRQHandler+0x92>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b20      	cmp	r3, #32
 800629e:	d11f      	bne.n	80062e0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685a      	ldr	r2, [r3, #4]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80062ae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80062b0:	2300      	movs	r3, #0
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68db      	ldr	r3, [r3, #12]
 80062ba:	613b      	str	r3, [r7, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	613b      	str	r3, [r7, #16]
 80062c4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d2:	f043 0202 	orr.w	r2, r3, #2
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fc fbc2 	bl	8002a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d136      	bne.n	800635a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d109      	bne.n	800630a <I2S_IRQHandler+0xbc>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006300:	2b80      	cmp	r3, #128	; 0x80
 8006302:	d102      	bne.n	800630a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f7ff ff45 	bl	8006194 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b08      	cmp	r3, #8
 8006312:	d122      	bne.n	800635a <I2S_IRQHandler+0x10c>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f003 0320 	and.w	r3, r3, #32
 800631e:	2b20      	cmp	r3, #32
 8006320:	d11b      	bne.n	800635a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006330:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634c:	f043 0204 	orr.w	r2, r3, #4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7fc fb85 	bl	8002a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800635a:	bf00      	nop
 800635c:	3718      	adds	r7, #24
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a92      	ldr	r2, [pc, #584]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d101      	bne.n	8006382 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800637e:	4b92      	ldr	r3, [pc, #584]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006380:	e001      	b.n	8006386 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006382:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a8b      	ldr	r2, [pc, #556]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d101      	bne.n	80063a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800639c:	4b8a      	ldr	r3, [pc, #552]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800639e:	e001      	b.n	80063a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80063a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063b0:	d004      	beq.n	80063bc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f040 8099 	bne.w	80064ee <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f003 0302 	and.w	r3, r3, #2
 80063c2:	2b02      	cmp	r3, #2
 80063c4:	d107      	bne.n	80063d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f925 	bl	8006620 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	f003 0301 	and.w	r3, r3, #1
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d107      	bne.n	80063f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d002      	beq.n	80063f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f9c8 	bl	8006780 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b40      	cmp	r3, #64	; 0x40
 80063f8:	d13a      	bne.n	8006470 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	f003 0320 	and.w	r3, r3, #32
 8006400:	2b00      	cmp	r3, #0
 8006402:	d035      	beq.n	8006470 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a6e      	ldr	r2, [pc, #440]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d101      	bne.n	8006412 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800640e:	4b6e      	ldr	r3, [pc, #440]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006410:	e001      	b.n	8006416 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006412:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006416:	685a      	ldr	r2, [r3, #4]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4969      	ldr	r1, [pc, #420]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800641e:	428b      	cmp	r3, r1
 8006420:	d101      	bne.n	8006426 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006422:	4b69      	ldr	r3, [pc, #420]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006424:	e001      	b.n	800642a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800642a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800642e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	685a      	ldr	r2, [r3, #4]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800643e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006440:	2300      	movs	r3, #0
 8006442:	60fb      	str	r3, [r7, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	60fb      	str	r3, [r7, #12]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2201      	movs	r2, #1
 800645a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006462:	f043 0202 	orr.w	r2, r3, #2
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f7fc fafa 	bl	8002a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	f003 0308 	and.w	r3, r3, #8
 8006476:	2b08      	cmp	r3, #8
 8006478:	f040 80c3 	bne.w	8006602 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f003 0320 	and.w	r3, r3, #32
 8006482:	2b00      	cmp	r3, #0
 8006484:	f000 80bd 	beq.w	8006602 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006496:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a49      	ldr	r2, [pc, #292]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d101      	bne.n	80064a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80064a2:	4b49      	ldr	r3, [pc, #292]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064a4:	e001      	b.n	80064aa <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80064a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	4944      	ldr	r1, [pc, #272]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80064b2:	428b      	cmp	r3, r1
 80064b4:	d101      	bne.n	80064ba <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80064b6:	4b44      	ldr	r3, [pc, #272]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80064b8:	e001      	b.n	80064be <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80064ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80064be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80064c2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80064c4:	2300      	movs	r3, #0
 80064c6:	60bb      	str	r3, [r7, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064de:	f043 0204 	orr.w	r2, r3, #4
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fc fabc 	bl	8002a64 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80064ec:	e089      	b.n	8006602 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d107      	bne.n	8006508 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d002      	beq.n	8006508 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f000 f8be 	bl	8006684 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b01      	cmp	r3, #1
 8006510:	d107      	bne.n	8006522 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f8fd 	bl	800671c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006528:	2b40      	cmp	r3, #64	; 0x40
 800652a:	d12f      	bne.n	800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d02a      	beq.n	800658c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8006544:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1e      	ldr	r2, [pc, #120]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d101      	bne.n	8006554 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006550:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006552:	e001      	b.n	8006558 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006554:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006558:	685a      	ldr	r2, [r3, #4]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4919      	ldr	r1, [pc, #100]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006560:	428b      	cmp	r3, r1
 8006562:	d101      	bne.n	8006568 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006564:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006566:	e001      	b.n	800656c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006568:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800656c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006570:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657e:	f043 0202 	orr.w	r2, r3, #2
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fc fa6c 	bl	8002a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f003 0308 	and.w	r3, r3, #8
 8006592:	2b08      	cmp	r3, #8
 8006594:	d136      	bne.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f003 0320 	and.w	r3, r3, #32
 800659c:	2b00      	cmp	r3, #0
 800659e:	d031      	beq.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a07      	ldr	r2, [pc, #28]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d101      	bne.n	80065ae <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80065aa:	4b07      	ldr	r3, [pc, #28]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065ac:	e001      	b.n	80065b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80065ae:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065b2:	685a      	ldr	r2, [r3, #4]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4902      	ldr	r1, [pc, #8]	; (80065c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80065ba:	428b      	cmp	r3, r1
 80065bc:	d106      	bne.n	80065cc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80065be:	4b02      	ldr	r3, [pc, #8]	; (80065c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80065c0:	e006      	b.n	80065d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80065c2:	bf00      	nop
 80065c4:	40003800 	.word	0x40003800
 80065c8:	40003400 	.word	0x40003400
 80065cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80065d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80065d4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80065e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	f043 0204 	orr.w	r2, r3, #4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f7fc fa32 	bl	8002a64 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006600:	e000      	b.n	8006604 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006602:	bf00      	nop
}
 8006604:	bf00      	nop
 8006606:	3720      	adds	r7, #32
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006614:	bf00      	nop
 8006616:	370c      	adds	r7, #12
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	1c99      	adds	r1, r3, #2
 800662e:	687a      	ldr	r2, [r7, #4]
 8006630:	6251      	str	r1, [r2, #36]	; 0x24
 8006632:	881a      	ldrh	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800663e:	b29b      	uxth	r3, r3
 8006640:	3b01      	subs	r3, #1
 8006642:	b29a      	uxth	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800664c:	b29b      	uxth	r3, r3
 800664e:	2b00      	cmp	r3, #0
 8006650:	d113      	bne.n	800667a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006660:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006666:	b29b      	uxth	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2201      	movs	r2, #1
 8006670:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f7ff ffc9 	bl	800660c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006690:	1c99      	adds	r1, r3, #2
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	6251      	str	r1, [r2, #36]	; 0x24
 8006696:	8819      	ldrh	r1, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	4a1d      	ldr	r2, [pc, #116]	; (8006714 <I2SEx_TxISR_I2SExt+0x90>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d101      	bne.n	80066a6 <I2SEx_TxISR_I2SExt+0x22>
 80066a2:	4b1d      	ldr	r3, [pc, #116]	; (8006718 <I2SEx_TxISR_I2SExt+0x94>)
 80066a4:	e001      	b.n	80066aa <I2SEx_TxISR_I2SExt+0x26>
 80066a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066aa:	460a      	mov	r2, r1
 80066ac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29b      	uxth	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d121      	bne.n	800670a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a12      	ldr	r2, [pc, #72]	; (8006714 <I2SEx_TxISR_I2SExt+0x90>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d101      	bne.n	80066d4 <I2SEx_TxISR_I2SExt+0x50>
 80066d0:	4b11      	ldr	r3, [pc, #68]	; (8006718 <I2SEx_TxISR_I2SExt+0x94>)
 80066d2:	e001      	b.n	80066d8 <I2SEx_TxISR_I2SExt+0x54>
 80066d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	490d      	ldr	r1, [pc, #52]	; (8006714 <I2SEx_TxISR_I2SExt+0x90>)
 80066e0:	428b      	cmp	r3, r1
 80066e2:	d101      	bne.n	80066e8 <I2SEx_TxISR_I2SExt+0x64>
 80066e4:	4b0c      	ldr	r3, [pc, #48]	; (8006718 <I2SEx_TxISR_I2SExt+0x94>)
 80066e6:	e001      	b.n	80066ec <I2SEx_TxISR_I2SExt+0x68>
 80066e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80066ec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80066f0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff ff81 	bl	800660c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800670a:	bf00      	nop
 800670c:	3708      	adds	r7, #8
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}
 8006712:	bf00      	nop
 8006714:	40003800 	.word	0x40003800
 8006718:	40003400 	.word	0x40003400

0800671c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68d8      	ldr	r0, [r3, #12]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800672e:	1c99      	adds	r1, r3, #2
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006734:	b282      	uxth	r2, r0
 8006736:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800673c:	b29b      	uxth	r3, r3
 800673e:	3b01      	subs	r3, #1
 8006740:	b29a      	uxth	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d113      	bne.n	8006778 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800675e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006764:	b29b      	uxth	r3, r3
 8006766:	2b00      	cmp	r3, #0
 8006768:	d106      	bne.n	8006778 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff ff4a 	bl	800660c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006778:	bf00      	nop
 800677a:	3708      	adds	r7, #8
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}

08006780 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b082      	sub	sp, #8
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a20      	ldr	r2, [pc, #128]	; (8006810 <I2SEx_RxISR_I2SExt+0x90>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d101      	bne.n	8006796 <I2SEx_RxISR_I2SExt+0x16>
 8006792:	4b20      	ldr	r3, [pc, #128]	; (8006814 <I2SEx_RxISR_I2SExt+0x94>)
 8006794:	e001      	b.n	800679a <I2SEx_RxISR_I2SExt+0x1a>
 8006796:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800679a:	68d8      	ldr	r0, [r3, #12]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a0:	1c99      	adds	r1, r3, #2
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80067a6:	b282      	uxth	r2, r0
 80067a8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	3b01      	subs	r3, #1
 80067b2:	b29a      	uxth	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d121      	bne.n	8006806 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a12      	ldr	r2, [pc, #72]	; (8006810 <I2SEx_RxISR_I2SExt+0x90>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d101      	bne.n	80067d0 <I2SEx_RxISR_I2SExt+0x50>
 80067cc:	4b11      	ldr	r3, [pc, #68]	; (8006814 <I2SEx_RxISR_I2SExt+0x94>)
 80067ce:	e001      	b.n	80067d4 <I2SEx_RxISR_I2SExt+0x54>
 80067d0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	490d      	ldr	r1, [pc, #52]	; (8006810 <I2SEx_RxISR_I2SExt+0x90>)
 80067dc:	428b      	cmp	r3, r1
 80067de:	d101      	bne.n	80067e4 <I2SEx_RxISR_I2SExt+0x64>
 80067e0:	4b0c      	ldr	r3, [pc, #48]	; (8006814 <I2SEx_RxISR_I2SExt+0x94>)
 80067e2:	e001      	b.n	80067e8 <I2SEx_RxISR_I2SExt+0x68>
 80067e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80067e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067ec:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d106      	bne.n	8006806 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f7ff ff03 	bl	800660c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006806:	bf00      	nop
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	40003800 	.word	0x40003800
 8006814:	40003400 	.word	0x40003400

08006818 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b086      	sub	sp, #24
 800681c:	af02      	add	r7, sp, #8
 800681e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006820:	f7fc fcb4 	bl	800318c <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e069      	b.n	8006904 <HAL_QSPI_Init+0xec>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b00      	cmp	r3, #0
 800683a:	d10b      	bne.n	8006854 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006844:	6878      	ldr	r0, [r7, #4]
 8006846:	f7fb f80b 	bl	8001860 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800684a:	f241 3188 	movw	r1, #5000	; 0x1388
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f000 f85e 	bl	8006910 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	3b01      	subs	r3, #1
 8006864:	021a      	lsls	r2, r3, #8
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	2120      	movs	r1, #32
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 f856 	bl	800692c <QSPI_WaitFlagStateUntilTimeout>
 8006880:	4603      	mov	r3, r0
 8006882:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006884:	7afb      	ldrb	r3, [r7, #11]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d137      	bne.n	80068fa <HAL_QSPI_Init+0xe2>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006894:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	6852      	ldr	r2, [r2, #4]
 800689c:	0611      	lsls	r1, r2, #24
 800689e:	687a      	ldr	r2, [r7, #4]
 80068a0:	68d2      	ldr	r2, [r2, #12]
 80068a2:	4311      	orrs	r1, r2
 80068a4:	687a      	ldr	r2, [r7, #4]
 80068a6:	69d2      	ldr	r2, [r2, #28]
 80068a8:	4311      	orrs	r1, r2
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	6a12      	ldr	r2, [r2, #32]
 80068ae:	4311      	orrs	r1, r2
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	6812      	ldr	r2, [r2, #0]
 80068b4:	430b      	orrs	r3, r1
 80068b6:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	4b13      	ldr	r3, [pc, #76]	; (800690c <HAL_QSPI_Init+0xf4>)
 80068c0:	4013      	ands	r3, r2
 80068c2:	687a      	ldr	r2, [r7, #4]
 80068c4:	6912      	ldr	r2, [r2, #16]
 80068c6:	0411      	lsls	r1, r2, #16
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6952      	ldr	r2, [r2, #20]
 80068cc:	4311      	orrs	r1, r2
 80068ce:	687a      	ldr	r2, [r7, #4]
 80068d0:	6992      	ldr	r2, [r2, #24]
 80068d2:	4311      	orrs	r1, r2
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	6812      	ldr	r2, [r2, #0]
 80068d8:	430b      	orrs	r3, r1
 80068da:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f042 0201 	orr.w	r2, r2, #1
 80068ea:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8006902:	7afb      	ldrb	r3, [r7, #11]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	ffe0f8fe 	.word	0xffe0f8fe

08006910 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	683a      	ldr	r2, [r7, #0]
 800691e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8006920:	bf00      	nop
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b084      	sub	sp, #16
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	603b      	str	r3, [r7, #0]
 8006938:	4613      	mov	r3, r2
 800693a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800693c:	e01a      	b.n	8006974 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006944:	d016      	beq.n	8006974 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006946:	f7fc fc21 	bl	800318c <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	69ba      	ldr	r2, [r7, #24]
 8006952:	429a      	cmp	r2, r3
 8006954:	d302      	bcc.n	800695c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2204      	movs	r2, #4
 8006960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006968:	f043 0201 	orr.w	r2, r3, #1
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	e00e      	b.n	8006992 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	689a      	ldr	r2, [r3, #8]
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	4013      	ands	r3, r2
 800697e:	2b00      	cmp	r3, #0
 8006980:	bf14      	ite	ne
 8006982:	2301      	movne	r3, #1
 8006984:	2300      	moveq	r3, #0
 8006986:	b2db      	uxtb	r3, r3
 8006988:	461a      	mov	r2, r3
 800698a:	79fb      	ldrb	r3, [r7, #7]
 800698c:	429a      	cmp	r2, r3
 800698e:	d1d6      	bne.n	800693e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
	...

0800699c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d101      	bne.n	80069b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e0cc      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80069b0:	4b68      	ldr	r3, [pc, #416]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 030f 	and.w	r3, r3, #15
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	429a      	cmp	r2, r3
 80069bc:	d90c      	bls.n	80069d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069be:	4b65      	ldr	r3, [pc, #404]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	b2d2      	uxtb	r2, r2
 80069c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80069c6:	4b63      	ldr	r3, [pc, #396]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f003 030f 	and.w	r3, r3, #15
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d001      	beq.n	80069d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e0b8      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d020      	beq.n	8006a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d005      	beq.n	80069fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80069f0:	4b59      	ldr	r3, [pc, #356]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 80069f2:	689b      	ldr	r3, [r3, #8]
 80069f4:	4a58      	ldr	r2, [pc, #352]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 80069f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80069fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006a08:	4b53      	ldr	r3, [pc, #332]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	4a52      	ldr	r2, [pc, #328]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006a14:	4b50      	ldr	r3, [pc, #320]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a16:	689b      	ldr	r3, [r3, #8]
 8006a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	494d      	ldr	r1, [pc, #308]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0301 	and.w	r3, r3, #1
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d044      	beq.n	8006abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d107      	bne.n	8006a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a3a:	4b47      	ldr	r3, [pc, #284]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d119      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	e07f      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	2b02      	cmp	r3, #2
 8006a50:	d003      	beq.n	8006a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006a56:	2b03      	cmp	r3, #3
 8006a58:	d107      	bne.n	8006a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a5a:	4b3f      	ldr	r3, [pc, #252]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d109      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	e06f      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a6a:	4b3b      	ldr	r3, [pc, #236]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e067      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006a7a:	4b37      	ldr	r3, [pc, #220]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a7c:	689b      	ldr	r3, [r3, #8]
 8006a7e:	f023 0203 	bic.w	r2, r3, #3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	4934      	ldr	r1, [pc, #208]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006a8c:	f7fc fb7e 	bl	800318c <HAL_GetTick>
 8006a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006a92:	e00a      	b.n	8006aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006a94:	f7fc fb7a 	bl	800318c <HAL_GetTick>
 8006a98:	4602      	mov	r2, r0
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d901      	bls.n	8006aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e04f      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006aaa:	4b2b      	ldr	r3, [pc, #172]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 020c 	and.w	r2, r3, #12
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d1eb      	bne.n	8006a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006abc:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 030f 	and.w	r3, r3, #15
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d20c      	bcs.n	8006ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006aca:	4b22      	ldr	r3, [pc, #136]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006acc:	683a      	ldr	r2, [r7, #0]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ad2:	4b20      	ldr	r3, [pc, #128]	; (8006b54 <HAL_RCC_ClockConfig+0x1b8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f003 030f 	and.w	r3, r3, #15
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d001      	beq.n	8006ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e032      	b.n	8006b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 0304 	and.w	r3, r3, #4
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d008      	beq.n	8006b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006af0:	4b19      	ldr	r3, [pc, #100]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	4916      	ldr	r1, [pc, #88]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006afe:	4313      	orrs	r3, r2
 8006b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0308 	and.w	r3, r3, #8
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d009      	beq.n	8006b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006b0e:	4b12      	ldr	r3, [pc, #72]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	691b      	ldr	r3, [r3, #16]
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	490e      	ldr	r1, [pc, #56]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006b22:	f000 f821 	bl	8006b68 <HAL_RCC_GetSysClockFreq>
 8006b26:	4602      	mov	r2, r0
 8006b28:	4b0b      	ldr	r3, [pc, #44]	; (8006b58 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	091b      	lsrs	r3, r3, #4
 8006b2e:	f003 030f 	and.w	r3, r3, #15
 8006b32:	490a      	ldr	r1, [pc, #40]	; (8006b5c <HAL_RCC_ClockConfig+0x1c0>)
 8006b34:	5ccb      	ldrb	r3, [r1, r3]
 8006b36:	fa22 f303 	lsr.w	r3, r2, r3
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <HAL_RCC_ClockConfig+0x1c4>)
 8006b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006b3e:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <HAL_RCC_ClockConfig+0x1c8>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4618      	mov	r0, r3
 8006b44:	f7fb f8be 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	40023c00 	.word	0x40023c00
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	08013738 	.word	0x08013738
 8006b60:	20000000 	.word	0x20000000
 8006b64:	2000005c 	.word	0x2000005c

08006b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b6c:	b090      	sub	sp, #64	; 0x40
 8006b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	637b      	str	r3, [r7, #52]	; 0x34
 8006b74:	2300      	movs	r3, #0
 8006b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b78:	2300      	movs	r3, #0
 8006b7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006b80:	4b59      	ldr	r3, [pc, #356]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f003 030c 	and.w	r3, r3, #12
 8006b88:	2b08      	cmp	r3, #8
 8006b8a:	d00d      	beq.n	8006ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8006b8c:	2b08      	cmp	r3, #8
 8006b8e:	f200 80a1 	bhi.w	8006cd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d002      	beq.n	8006b9c <HAL_RCC_GetSysClockFreq+0x34>
 8006b96:	2b04      	cmp	r3, #4
 8006b98:	d003      	beq.n	8006ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006b9a:	e09b      	b.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006b9c:	4b53      	ldr	r3, [pc, #332]	; (8006cec <HAL_RCC_GetSysClockFreq+0x184>)
 8006b9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006ba0:	e09b      	b.n	8006cda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ba2:	4b53      	ldr	r3, [pc, #332]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ba4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ba6:	e098      	b.n	8006cda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ba8:	4b4f      	ldr	r3, [pc, #316]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006bb2:	4b4d      	ldr	r3, [pc, #308]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d028      	beq.n	8006c10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006bbe:	4b4a      	ldr	r3, [pc, #296]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006bc0:	685b      	ldr	r3, [r3, #4]
 8006bc2:	099b      	lsrs	r3, r3, #6
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	623b      	str	r3, [r7, #32]
 8006bc8:	627a      	str	r2, [r7, #36]	; 0x24
 8006bca:	6a3b      	ldr	r3, [r7, #32]
 8006bcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	4b47      	ldr	r3, [pc, #284]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006bd4:	fb03 f201 	mul.w	r2, r3, r1
 8006bd8:	2300      	movs	r3, #0
 8006bda:	fb00 f303 	mul.w	r3, r0, r3
 8006bde:	4413      	add	r3, r2
 8006be0:	4a43      	ldr	r2, [pc, #268]	; (8006cf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006be2:	fba0 1202 	umull	r1, r2, r0, r2
 8006be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006be8:	460a      	mov	r2, r1
 8006bea:	62ba      	str	r2, [r7, #40]	; 0x28
 8006bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bee:	4413      	add	r3, r2
 8006bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	61bb      	str	r3, [r7, #24]
 8006bf8:	61fa      	str	r2, [r7, #28]
 8006bfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006c02:	f7f9 fb0d 	bl	8000220 <__aeabi_uldivmod>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c0e:	e053      	b.n	8006cb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c10:	4b35      	ldr	r3, [pc, #212]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	099b      	lsrs	r3, r3, #6
 8006c16:	2200      	movs	r2, #0
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	617a      	str	r2, [r7, #20]
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006c22:	f04f 0b00 	mov.w	fp, #0
 8006c26:	4652      	mov	r2, sl
 8006c28:	465b      	mov	r3, fp
 8006c2a:	f04f 0000 	mov.w	r0, #0
 8006c2e:	f04f 0100 	mov.w	r1, #0
 8006c32:	0159      	lsls	r1, r3, #5
 8006c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c38:	0150      	lsls	r0, r2, #5
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	ebb2 080a 	subs.w	r8, r2, sl
 8006c42:	eb63 090b 	sbc.w	r9, r3, fp
 8006c46:	f04f 0200 	mov.w	r2, #0
 8006c4a:	f04f 0300 	mov.w	r3, #0
 8006c4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006c52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006c56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006c5a:	ebb2 0408 	subs.w	r4, r2, r8
 8006c5e:	eb63 0509 	sbc.w	r5, r3, r9
 8006c62:	f04f 0200 	mov.w	r2, #0
 8006c66:	f04f 0300 	mov.w	r3, #0
 8006c6a:	00eb      	lsls	r3, r5, #3
 8006c6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c70:	00e2      	lsls	r2, r4, #3
 8006c72:	4614      	mov	r4, r2
 8006c74:	461d      	mov	r5, r3
 8006c76:	eb14 030a 	adds.w	r3, r4, sl
 8006c7a:	603b      	str	r3, [r7, #0]
 8006c7c:	eb45 030b 	adc.w	r3, r5, fp
 8006c80:	607b      	str	r3, [r7, #4]
 8006c82:	f04f 0200 	mov.w	r2, #0
 8006c86:	f04f 0300 	mov.w	r3, #0
 8006c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006c8e:	4629      	mov	r1, r5
 8006c90:	028b      	lsls	r3, r1, #10
 8006c92:	4621      	mov	r1, r4
 8006c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006c98:	4621      	mov	r1, r4
 8006c9a:	028a      	lsls	r2, r1, #10
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	4619      	mov	r1, r3
 8006ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	60fa      	str	r2, [r7, #12]
 8006ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cac:	f7f9 fab8 	bl	8000220 <__aeabi_uldivmod>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	460b      	mov	r3, r1
 8006cb4:	4613      	mov	r3, r2
 8006cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006cb8:	4b0b      	ldr	r3, [pc, #44]	; (8006ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	0c1b      	lsrs	r3, r3, #16
 8006cbe:	f003 0303 	and.w	r3, r3, #3
 8006cc2:	3301      	adds	r3, #1
 8006cc4:	005b      	lsls	r3, r3, #1
 8006cc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006cc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cd2:	e002      	b.n	8006cda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <HAL_RCC_GetSysClockFreq+0x184>)
 8006cd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3740      	adds	r7, #64	; 0x40
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ce6:	bf00      	nop
 8006ce8:	40023800 	.word	0x40023800
 8006cec:	00f42400 	.word	0x00f42400
 8006cf0:	017d7840 	.word	0x017d7840

08006cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006cf8:	4b03      	ldr	r3, [pc, #12]	; (8006d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	20000000 	.word	0x20000000

08006d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006d10:	f7ff fff0 	bl	8006cf4 <HAL_RCC_GetHCLKFreq>
 8006d14:	4602      	mov	r2, r0
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d18:	689b      	ldr	r3, [r3, #8]
 8006d1a:	0a9b      	lsrs	r3, r3, #10
 8006d1c:	f003 0307 	and.w	r3, r3, #7
 8006d20:	4903      	ldr	r1, [pc, #12]	; (8006d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006d22:	5ccb      	ldrb	r3, [r1, r3]
 8006d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	bd80      	pop	{r7, pc}
 8006d2c:	40023800 	.word	0x40023800
 8006d30:	08013748 	.word	0x08013748

08006d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006d38:	f7ff ffdc 	bl	8006cf4 <HAL_RCC_GetHCLKFreq>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006d40:	689b      	ldr	r3, [r3, #8]
 8006d42:	0b5b      	lsrs	r3, r3, #13
 8006d44:	f003 0307 	and.w	r3, r3, #7
 8006d48:	4903      	ldr	r1, [pc, #12]	; (8006d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006d4a:	5ccb      	ldrb	r3, [r1, r3]
 8006d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	40023800 	.word	0x40023800
 8006d58:	08013748 	.word	0x08013748

08006d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b083      	sub	sp, #12
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	220f      	movs	r2, #15
 8006d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006d6c:	4b12      	ldr	r3, [pc, #72]	; (8006db8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f003 0203 	and.w	r2, r3, #3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006d78:	4b0f      	ldr	r3, [pc, #60]	; (8006db8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006d84:	4b0c      	ldr	r3, [pc, #48]	; (8006db8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d86:	689b      	ldr	r3, [r3, #8]
 8006d88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006d90:	4b09      	ldr	r3, [pc, #36]	; (8006db8 <HAL_RCC_GetClockConfig+0x5c>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	08db      	lsrs	r3, r3, #3
 8006d96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006d9e:	4b07      	ldr	r3, [pc, #28]	; (8006dbc <HAL_RCC_GetClockConfig+0x60>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f003 020f 	and.w	r2, r3, #15
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	601a      	str	r2, [r3, #0]
}
 8006daa:	bf00      	nop
 8006dac:	370c      	adds	r7, #12
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	40023800 	.word	0x40023800
 8006dbc:	40023c00 	.word	0x40023c00

08006dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg1 = 0U;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	617b      	str	r3, [r7, #20]
#if defined(STM32F413xx) || defined(STM32F423xx)
  uint32_t plli2sq = 0U;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	613b      	str	r3, [r7, #16]
#endif /* STM32F413xx || STM32F423xx */
  uint32_t plli2sused = 0U;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	61fb      	str	r3, [r7, #28]

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S APB1 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f003 0301 	and.w	r3, r3, #1
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d010      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x46>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8006de4:	4b7a      	ldr	r3, [pc, #488]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006de6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dea:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	4977      	ldr	r1, [pc, #476]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	69db      	ldr	r3, [r3, #28]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x46>
    {
      plli2sused = 1U;
 8006e02:	2301      	movs	r3, #1
 8006e04:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------------- I2S APB2 configuration ---------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0302 	and.w	r3, r3, #2
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d010      	beq.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8006e12:	4b6f      	ldr	r3, [pc, #444]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e18:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6a1b      	ldr	r3, [r3, #32]
 8006e20:	496b      	ldr	r1, [pc, #428]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6a1b      	ldr	r3, [r3, #32]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      plli2sused = 1U;
 8006e30:	2301      	movs	r3, #1
 8006e32:	61fb      	str	r3, [r7, #28]
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*----------------------- SAI1 Block A configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == (RCC_PERIPHCLK_SAIA))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d022      	beq.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIACLKSOURCE(PeriphClkInit->SaiAClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKACLKSOURCE_CONFIG(PeriphClkInit->SaiAClockSelection);
 8006e40:	4b63      	ldr	r3, [pc, #396]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4e:	4960      	ldr	r1, [pc, #384]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e50:	4313      	orrs	r3, r2
 8006e52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d101      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      plli2sused = 1U;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLR)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e6a:	d10c      	bne.n	8006e86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006e6c:	4b58      	ldr	r3, [pc, #352]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e72:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
 8006e7a:	3b01      	subs	r3, #1
 8006e7c:	021b      	lsls	r3, r3, #8
 8006e7e:	4954      	ldr	r1, [pc, #336]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e80:	4313      	orrs	r3, r2
 8006e82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------- SAI1 Block B configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == (RCC_PERIPHCLK_SAIB))
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d022      	beq.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAIBCLKSOURCE(PeriphClkInit->SaiBClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI_BLOCKBCLKSOURCE_CONFIG(PeriphClkInit->SaiBClockSelection);
 8006e92:	4b4f      	ldr	r3, [pc, #316]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ea0:	494b      	ldr	r1, [pc, #300]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d101      	bne.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLR)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ebc:	d10c      	bne.n	8006ed8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      /* Check for PLL/DIVR parameters */
      assert_param(IS_RCC_PLL_DIVR_VALUE(PeriphClkInit->PLLDivR));

      /* SAI_CLK_x = SAI_CLK(first level)/PLLDIVR */
      __HAL_RCC_PLL_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLDivR);
 8006ebe:	4b44      	ldr	r3, [pc, #272]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ec4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	695b      	ldr	r3, [r3, #20]
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	021b      	lsls	r3, r3, #8
 8006ed0:	493f      	ldr	r1, [pc, #252]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  /*------------------------------------ RTC configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	f000 808a 	beq.w	8006ffa <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	4b39      	ldr	r3, [pc, #228]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eee:	4a38      	ldr	r2, [pc, #224]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ef0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ef6:	4b36      	ldr	r3, [pc, #216]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006f02:	4b34      	ldr	r3, [pc, #208]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a33      	ldr	r2, [pc, #204]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006f08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006f0e:	f7fc f93d 	bl	800318c <HAL_GetTick>
 8006f12:	61b8      	str	r0, [r7, #24]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f14:	e008      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006f16:	f7fc f939 	bl	800318c <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	69bb      	ldr	r3, [r7, #24]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d901      	bls.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        return HAL_TIMEOUT;
 8006f24:	2303      	movs	r3, #3
 8006f26:	e1d1      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006f28:	4b2a      	ldr	r3, [pc, #168]	; (8006fd4 <HAL_RCCEx_PeriphCLKConfig+0x214>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0f0      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x156>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006f34:	4b26      	ldr	r3, [pc, #152]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f3c:	617b      	str	r3, [r7, #20]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006f3e:	697b      	ldr	r3, [r7, #20]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d02f      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d028      	beq.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f52:	4b1f      	ldr	r3, [pc, #124]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f5c:	4b1e      	ldr	r3, [pc, #120]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006f5e:	2201      	movs	r2, #1
 8006f60:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f62:	4b1d      	ldr	r3, [pc, #116]	; (8006fd8 <HAL_RCCEx_PeriphCLKConfig+0x218>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006f68:	4a19      	ldr	r2, [pc, #100]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006f6e:	4b18      	ldr	r3, [pc, #96]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d114      	bne.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006f7a:	f7fc f907 	bl	800318c <HAL_GetTick>
 8006f7e:	61b8      	str	r0, [r7, #24]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f80:	e00a      	b.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f82:	f7fc f903 	bl	800318c <HAL_GetTick>
 8006f86:	4602      	mov	r2, r0
 8006f88:	69bb      	ldr	r3, [r7, #24]
 8006f8a:	1ad3      	subs	r3, r2, r3
 8006f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d901      	bls.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
          {
            return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e199      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f98:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0ee      	beq.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fb0:	d114      	bne.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x21c>
 8006fb2:	4b07      	ldr	r3, [pc, #28]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fc6:	4902      	ldr	r1, [pc, #8]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	608b      	str	r3, [r1, #8]
 8006fcc:	e00c      	b.n	8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x228>
 8006fce:	bf00      	nop
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	40007000 	.word	0x40007000
 8006fd8:	42470e40 	.word	0x42470e40
 8006fdc:	4b89      	ldr	r3, [pc, #548]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	4a88      	ldr	r2, [pc, #544]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006fe2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006fe6:	6093      	str	r3, [r2, #8]
 8006fe8:	4b86      	ldr	r3, [pc, #536]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006fea:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ff4:	4983      	ldr	r1, [pc, #524]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------ TIM configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0304 	and.w	r3, r3, #4
 8007002:	2b00      	cmp	r3, #0
 8007004:	d004      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x250>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 800700c:	4b7e      	ldr	r3, [pc, #504]	; (8007208 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800700e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- FMPI2C1 Configuration --------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	2b00      	cmp	r3, #0
 800701a:	d00a      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 800701c:	4b79      	ldr	r3, [pc, #484]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800701e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007022:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800702a:	4976      	ldr	r1, [pc, #472]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800702c:	4313      	orrs	r3, r2
 800702e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- CLK48 Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f003 0320 	and.w	r3, r3, #32
 800703a:	2b00      	cmp	r3, #0
 800703c:	d011      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800703e:	4b71      	ldr	r3, [pc, #452]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007044:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704c:	496d      	ldr	r1, [pc, #436]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800704e:	4313      	orrs	r3, r2
 8007050:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLI2S when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800705c:	d101      	bne.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
    {
      plli2sused = 1U;
 800705e:	2301      	movs	r3, #1
 8007060:	61fb      	str	r3, [r7, #28]
    }
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------------- SDIO Configuration -----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800706e:	4b65      	ldr	r3, [pc, #404]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007070:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007074:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707c:	4961      	ldr	r1, [pc, #388]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  /*--------------------------------------------------------------------------*/

  /*-------------------------------------- PLLI2S Configuration --------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : I2S on APB1 or
     I2S on APB2*/
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d004      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b80      	cmp	r3, #128	; 0x80
 8007090:	f040 80c6 	bne.w	8007220 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007094:	4b5d      	ldr	r3, [pc, #372]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800709a:	f7fc f877 	bl	800318c <HAL_GetTick>
 800709e:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070a0:	e008      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80070a2:	f7fc f873 	bl	800318c <HAL_GetTick>
 80070a6:	4602      	mov	r2, r0
 80070a8:	69bb      	ldr	r3, [r7, #24]
 80070aa:	1ad3      	subs	r3, r2, r3
 80070ac:	2b02      	cmp	r3, #2
 80070ae:	d901      	bls.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070b0:	2303      	movs	r3, #3
 80070b2:	e10b      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070b4:	4b53      	ldr	r3, [pc, #332]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d1f0      	bne.n	80070a2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SCLKSOURCE(PeriphClkInit->PLLI2SSelection));
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
    /*-------------------- Set the PLL I2S clock -----------------------------*/
    __HAL_RCC_PLL_I2S_CONFIG(PeriphClkInit->PLLI2SSelection);
 80070c0:	4a53      	ldr	r2, [pc, #332]	; (8007210 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c6:	6013      	str	r3, [r2, #0]

    /*------- In Case of PLLI2S is selected as source clock for I2S ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0301 	and.w	r3, r3, #1
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x31c>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d023      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d003      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x330>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a1b      	ldr	r3, [r3, #32]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d019      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0320 	and.w	r3, r3, #32
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)) ||
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d004      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x346>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007100:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007104:	d00e      	beq.n	8007124 <HAL_RCCEx_PeriphCLKConfig+0x364>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f003 0340 	and.w	r3, r3, #64	; 0x40
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)) ||
 800710e:	2b00      	cmp	r3, #0
 8007110:	d019      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x386>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO) && (PeriphClkInit->SdioClockSelection == RCC_SDIOCLKSOURCE_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLI2SQ)))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007116:	2b00      	cmp	r3, #0
 8007118:	d115      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x386>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800711e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007122:	d110      	bne.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x386>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685a      	ldr	r2, [r3, #4]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	019b      	lsls	r3, r3, #6
 800712e:	431a      	orrs	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	061b      	lsls	r3, r3, #24
 8007136:	431a      	orrs	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	071b      	lsls	r3, r3, #28
 800713e:	4931      	ldr	r1, [pc, #196]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007140:	4313      	orrs	r3, r2
 8007142:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

#if defined(STM32F413xx) || defined(STM32F423xx)
    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d003      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x39a>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007156:	2b00      	cmp	r3, #0
 8007158:	d009      	beq.n	800716e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIA) == RCC_PERIPHCLK_SAIA) && (PeriphClkInit->SaiAClockSelection == RCC_SAIACLKSOURCE_PLLI2SR)) ||
 8007162:	2b00      	cmp	r3, #0
 8007164:	d026      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAIB) == RCC_PERIPHCLK_SAIB) && (PeriphClkInit->SaiBClockSelection == RCC_SAIBCLKSOURCE_PLLI2SR)))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800716a:	2b00      	cmp	r3, #0
 800716c:	d122      	bne.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Check for PLLI2S/DIVR parameters */
      assert_param(IS_RCC_PLLI2S_DIVR_VALUE(PeriphClkInit->PLLI2SDivR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800716e:	4b25      	ldr	r3, [pc, #148]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007174:	0e1b      	lsrs	r3, r3, #24
 8007176:	f003 030f 	and.w	r3, r3, #15
 800717a:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	019b      	lsls	r3, r3, #6
 8007186:	431a      	orrs	r2, r3
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	061b      	lsls	r3, r3, #24
 800718c:	431a      	orrs	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	071b      	lsls	r3, r3, #28
 8007194:	491b      	ldr	r1, [pc, #108]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 8007196:	4313      	orrs	r3, r2
 8007198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVR */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLI2SDivR);
 800719c:	4b19      	ldr	r3, [pc, #100]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 800719e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a2:	f023 021f 	bic.w	r2, r3, #31
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	3b01      	subs	r3, #1
 80071ac:	4915      	ldr	r1, [pc, #84]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071ae:	4313      	orrs	r3, r2
 80071b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F413xx || STM32F423xx */

    /*----------------- In Case of PLLI2S is just selected  ------------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d010      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	689b      	ldr	r3, [r3, #8]
 80071c8:	019b      	lsls	r3, r3, #6
 80071ca:	431a      	orrs	r2, r3
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	061b      	lsls	r3, r3, #24
 80071d2:	431a      	orrs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	071b      	lsls	r3, r3, #28
 80071da:	490a      	ldr	r1, [pc, #40]	; (8007204 <HAL_RCCEx_PeriphCLKConfig+0x444>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071e2:	4b0a      	ldr	r3, [pc, #40]	; (800720c <HAL_RCCEx_PeriphCLKConfig+0x44c>)
 80071e4:	2201      	movs	r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071e8:	f7fb ffd0 	bl	800318c <HAL_GetTick>
 80071ec:	61b8      	str	r0, [r7, #24]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071ee:	e011      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80071f0:	f7fb ffcc 	bl	800318c <HAL_GetTick>
 80071f4:	4602      	mov	r2, r0
 80071f6:	69bb      	ldr	r3, [r7, #24]
 80071f8:	1ad3      	subs	r3, r2, r3
 80071fa:	2b02      	cmp	r3, #2
 80071fc:	d90a      	bls.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x454>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e064      	b.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8007202:	bf00      	nop
 8007204:	40023800 	.word	0x40023800
 8007208:	424711e0 	.word	0x424711e0
 800720c:	42470068 	.word	0x42470068
 8007210:	424710d8 	.word	0x424710d8
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007214:	4b2f      	ldr	r3, [pc, #188]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800721c:	2b00      	cmp	r3, #0
 800721e:	d0e7      	beq.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x430>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x482>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800722c:	4b29      	ldr	r3, [pc, #164]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800722e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007232:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723a:	4926      	ldr	r1, [pc, #152]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800723c:	4313      	orrs	r3, r2
 800723e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM1 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800724e:	4b21      	ldr	r3, [pc, #132]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007254:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	491d      	ldr	r1, [pc, #116]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

#if defined(STM32F413xx) || defined(STM32F423xx)
  /*-------------------- DFSDM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2) == RCC_PERIPHCLK_DFSDM2)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2CLKSOURCE(PeriphClkInit->Dfsdm2ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
 8007270:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007272:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007276:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727e:	4915      	ldr	r1, [pc, #84]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007280:	4313      	orrs	r3, r2
 8007282:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------- DFSDM2 Audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM2_AUDIO) == RCC_PERIPHCLK_DFSDM2_AUDIO)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM2AUDIOCLKSOURCE(PeriphClkInit->Dfsdm2AudioClockSelection));

    /* Configure the DFSDM1 Audio interface clock source */
    __HAL_RCC_DFSDM2AUDIO_CONFIG(PeriphClkInit->Dfsdm2AudioClockSelection);
 8007292:	4b10      	ldr	r3, [pc, #64]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 8007294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007298:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a0:	490c      	ldr	r1, [pc, #48]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- LPTIM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x50a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072b4:	4b07      	ldr	r3, [pc, #28]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072ba:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	4904      	ldr	r1, [pc, #16]	; (80072d4 <HAL_RCCEx_PeriphCLKConfig+0x514>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/
#endif /* STM32F413xx || STM32F423xx */

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3720      	adds	r7, #32
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bd80      	pop	{r7, pc}
 80072d4:	40023800 	.word	0x40023800

080072d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80072e8:	2300      	movs	r3, #0
 80072ea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80072ec:	2300      	movs	r3, #0
 80072ee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d004      	beq.n	8007300 <HAL_RCCEx_GetPeriphCLKFreq+0x28>
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2b02      	cmp	r3, #2
 80072fa:	f000 80a1 	beq.w	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
 80072fe:	e13f      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8007300:	4ba3      	ldr	r3, [pc, #652]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007306:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8007312:	f000 8084 	beq.w	800741e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800731c:	f200 808c 	bhi.w	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007326:	d04f      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800732e:	f200 8083 	bhi.w	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d006      	beq.n	8007346 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800733e:	d17b      	bne.n	8007438 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007340:	4b94      	ldr	r3, [pc, #592]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007342:	617b      	str	r3, [r7, #20]
          break;
 8007344:	e07b      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007346:	4b92      	ldr	r3, [pc, #584]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007348:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800734c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007354:	d109      	bne.n	800736a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007356:	4b8e      	ldr	r3, [pc, #568]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800735c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007360:	4a8c      	ldr	r2, [pc, #560]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007362:	fbb2 f3f3 	udiv	r3, r2, r3
 8007366:	613b      	str	r3, [r7, #16]
 8007368:	e019      	b.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800736a:	4b89      	ldr	r3, [pc, #548]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007372:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007376:	d109      	bne.n	800738c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007378:	4b85      	ldr	r3, [pc, #532]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800737a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007382:	4a85      	ldr	r2, [pc, #532]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007384:	fbb2 f3f3 	udiv	r3, r2, r3
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	e008      	b.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800738c:	4b80      	ldr	r3, [pc, #512]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800738e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007392:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007396:	4a81      	ldr	r2, [pc, #516]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007398:	fbb2 f3f3 	udiv	r3, r2, r3
 800739c:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800739e:	4b7c      	ldr	r3, [pc, #496]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80073a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073a4:	099b      	lsrs	r3, r3, #6
 80073a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	fb02 f303 	mul.w	r3, r2, r3
 80073b0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80073b2:	4b77      	ldr	r3, [pc, #476]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80073b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073b8:	0f1b      	lsrs	r3, r3, #28
 80073ba:	f003 0307 	and.w	r3, r3, #7
 80073be:	68ba      	ldr	r2, [r7, #8]
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	617b      	str	r3, [r7, #20]
          break;
 80073c6:	e03a      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80073c8:	4b71      	ldr	r3, [pc, #452]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073d4:	d108      	bne.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073d6:	4b6e      	ldr	r3, [pc, #440]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073de:	4a6e      	ldr	r2, [pc, #440]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80073e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073e4:	613b      	str	r3, [r7, #16]
 80073e6:	e007      	b.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80073e8:	4b69      	ldr	r3, [pc, #420]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073f0:	4a6a      	ldr	r2, [pc, #424]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80073f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80073f6:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 80073f8:	4b65      	ldr	r3, [pc, #404]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	099b      	lsrs	r3, r3, #6
 80073fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	fb02 f303 	mul.w	r3, r2, r3
 8007408:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800740a:	4b61      	ldr	r3, [pc, #388]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	0f1b      	lsrs	r3, r3, #28
 8007410:	f003 0307 	and.w	r3, r3, #7
 8007414:	68ba      	ldr	r2, [r7, #8]
 8007416:	fbb2 f3f3 	udiv	r3, r2, r3
 800741a:	617b      	str	r3, [r7, #20]
          break;
 800741c:	e00f      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800741e:	4b5c      	ldr	r3, [pc, #368]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007420:	685b      	ldr	r3, [r3, #4]
 8007422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800742a:	d102      	bne.n	8007432 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
          {
            frequency = HSE_VALUE;
 800742c:	4b5a      	ldr	r3, [pc, #360]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800742e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007430:	e005      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
            frequency = HSI_VALUE;
 8007432:	4b5a      	ldr	r3, [pc, #360]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007434:	617b      	str	r3, [r7, #20]
          break;
 8007436:	e002      	b.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	617b      	str	r3, [r7, #20]
          break;
 800743c:	bf00      	nop
        }
      }
      break;
 800743e:	e09f      	b.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 8007440:	4b53      	ldr	r3, [pc, #332]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007446:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007452:	f000 8084 	beq.w	800755e <HAL_RCCEx_GetPeriphCLKFreq+0x286>
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800745c:	f200 808c 	bhi.w	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007466:	d04f      	beq.n	8007508 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800746e:	f200 8083 	bhi.w	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d006      	beq.n	8007486 <HAL_RCCEx_GetPeriphCLKFreq+0x1ae>
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800747e:	d17b      	bne.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007480:	4b44      	ldr	r3, [pc, #272]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007482:	617b      	str	r3, [r7, #20]
          break;
 8007484:	e07b      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          if((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SSRC) == RCC_PLLI2SCFGR_PLLI2SSRC)
 8007486:	4b42      	ldr	r3, [pc, #264]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007488:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800748c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007494:	d109      	bne.n	80074aa <HAL_RCCEx_GetPeriphCLKFreq+0x1d2>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(EXTERNAL_CLOCK_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007496:	4b3e      	ldr	r3, [pc, #248]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800749c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074a0:	4a3c      	ldr	r2, [pc, #240]	; (8007594 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80074a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	e019      	b.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
          }
          else
          {
            /* Configure the PLLI2S division factor */
            /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
            if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80074aa:	4b39      	ldr	r3, [pc, #228]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80074ac:	685b      	ldr	r3, [r3, #4]
 80074ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80074b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80074b6:	d109      	bne.n	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80074b8:	4b35      	ldr	r3, [pc, #212]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80074ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074c2:	4a35      	ldr	r2, [pc, #212]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80074c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c8:	613b      	str	r3, [r7, #16]
 80074ca:	e008      	b.n	80074de <HAL_RCCEx_GetPeriphCLKFreq+0x206>
            }
            else
            {
              /* Get the I2S source clock value */
              vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80074cc:	4b30      	ldr	r3, [pc, #192]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80074ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80074d6:	4a31      	ldr	r2, [pc, #196]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 80074d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80074dc:	613b      	str	r3, [r7, #16]
            }
          }
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80074de:	4b2c      	ldr	r3, [pc, #176]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80074e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074e4:	099b      	lsrs	r3, r3, #6
 80074e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	fb02 f303 	mul.w	r3, r2, r3
 80074f0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80074f2:	4b27      	ldr	r3, [pc, #156]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 80074f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074f8:	0f1b      	lsrs	r3, r3, #28
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	fbb2 f3f3 	udiv	r3, r2, r3
 8007504:	617b      	str	r3, [r7, #20]
          break;
 8007506:	e03a      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007508:	4b21      	ldr	r3, [pc, #132]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007514:	d108      	bne.n	8007528 <HAL_RCCEx_GetPeriphCLKFreq+0x250>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007516:	4b1e      	ldr	r3, [pc, #120]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800751e:	4a1e      	ldr	r2, [pc, #120]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007520:	fbb2 f3f3 	udiv	r3, r2, r3
 8007524:	613b      	str	r3, [r7, #16]
 8007526:	e007      	b.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007528:	4b19      	ldr	r3, [pc, #100]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800752a:	685b      	ldr	r3, [r3, #4]
 800752c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007530:	4a1a      	ldr	r2, [pc, #104]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007532:	fbb2 f3f3 	udiv	r3, r2, r3
 8007536:	613b      	str	r3, [r7, #16]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8007538:	4b15      	ldr	r3, [pc, #84]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	099b      	lsrs	r3, r3, #6
 800753e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	fb02 f303 	mul.w	r3, r2, r3
 8007548:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800754a:	4b11      	ldr	r3, [pc, #68]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	0f1b      	lsrs	r3, r3, #28
 8007550:	f003 0307 	and.w	r3, r3, #7
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	fbb2 f3f3 	udiv	r3, r2, r3
 800755a:	617b      	str	r3, [r7, #20]
          break;
 800755c:	e00f      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800755e:	4b0c      	ldr	r3, [pc, #48]	; (8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800756a:	d102      	bne.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x29a>
          {
            frequency = HSE_VALUE;
 800756c:	4b0a      	ldr	r3, [pc, #40]	; (8007598 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800756e:	617b      	str	r3, [r7, #20]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8007570:	e005      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
            frequency = HSI_VALUE;
 8007572:	4b0a      	ldr	r3, [pc, #40]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>)
 8007574:	617b      	str	r3, [r7, #20]
          break;
 8007576:	e002      	b.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        }
      /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007578:	2300      	movs	r3, #0
 800757a:	617b      	str	r3, [r7, #20]
          break;
 800757c:	bf00      	nop
        }
      }
      break;
 800757e:	bf00      	nop
    }
  }
  return frequency;
 8007580:	697b      	ldr	r3, [r7, #20]
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	40023800 	.word	0x40023800
 8007594:	00bb8000 	.word	0x00bb8000
 8007598:	017d7840 	.word	0x017d7840
 800759c:	00f42400 	.word	0x00f42400

080075a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80075a8:	2300      	movs	r3, #0
 80075aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d075      	beq.n	80076a4 <HAL_RCC_OscConfig+0x104>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80075b8:	4b88      	ldr	r3, [pc, #544]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f003 030c 	and.w	r3, r3, #12
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d00c      	beq.n	80075de <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075c4:	4b85      	ldr	r3, [pc, #532]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80075cc:	2b08      	cmp	r3, #8
 80075ce:	d112      	bne.n	80075f6 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80075d0:	4b82      	ldr	r3, [pc, #520]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80075d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075dc:	d10b      	bne.n	80075f6 <HAL_RCC_OscConfig+0x56>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80075de:	4b7f      	ldr	r3, [pc, #508]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d05b      	beq.n	80076a2 <HAL_RCC_OscConfig+0x102>
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d157      	bne.n	80076a2 <HAL_RCC_OscConfig+0x102>
      {
        return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e20a      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fe:	d106      	bne.n	800760e <HAL_RCC_OscConfig+0x6e>
 8007600:	4b76      	ldr	r3, [pc, #472]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	4a75      	ldr	r2, [pc, #468]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007606:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800760a:	6013      	str	r3, [r2, #0]
 800760c:	e01d      	b.n	800764a <HAL_RCC_OscConfig+0xaa>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007616:	d10c      	bne.n	8007632 <HAL_RCC_OscConfig+0x92>
 8007618:	4b70      	ldr	r3, [pc, #448]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a6f      	ldr	r2, [pc, #444]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 800761e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007622:	6013      	str	r3, [r2, #0]
 8007624:	4b6d      	ldr	r3, [pc, #436]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a6c      	ldr	r2, [pc, #432]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 800762a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	e00b      	b.n	800764a <HAL_RCC_OscConfig+0xaa>
 8007632:	4b6a      	ldr	r3, [pc, #424]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a69      	ldr	r2, [pc, #420]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	4b67      	ldr	r3, [pc, #412]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	4a66      	ldr	r2, [pc, #408]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007644:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007648:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685b      	ldr	r3, [r3, #4]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d013      	beq.n	800767a <HAL_RCC_OscConfig+0xda>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007652:	f7fb fd9b 	bl	800318c <HAL_GetTick>
 8007656:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007658:	e008      	b.n	800766c <HAL_RCC_OscConfig+0xcc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800765a:	f7fb fd97 	bl	800318c <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	2b64      	cmp	r3, #100	; 0x64
 8007666:	d901      	bls.n	800766c <HAL_RCC_OscConfig+0xcc>
          {
            return HAL_TIMEOUT;
 8007668:	2303      	movs	r3, #3
 800766a:	e1cf      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800766c:	4b5b      	ldr	r3, [pc, #364]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007674:	2b00      	cmp	r3, #0
 8007676:	d0f0      	beq.n	800765a <HAL_RCC_OscConfig+0xba>
 8007678:	e014      	b.n	80076a4 <HAL_RCC_OscConfig+0x104>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767a:	f7fb fd87 	bl	800318c <HAL_GetTick>
 800767e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007680:	e008      	b.n	8007694 <HAL_RCC_OscConfig+0xf4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007682:	f7fb fd83 	bl	800318c <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	2b64      	cmp	r3, #100	; 0x64
 800768e:	d901      	bls.n	8007694 <HAL_RCC_OscConfig+0xf4>
          {
            return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e1bb      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007694:	4b51      	ldr	r3, [pc, #324]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1f0      	bne.n	8007682 <HAL_RCC_OscConfig+0xe2>
 80076a0:	e000      	b.n	80076a4 <HAL_RCC_OscConfig+0x104>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076a2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0302 	and.w	r3, r3, #2
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d063      	beq.n	8007778 <HAL_RCC_OscConfig+0x1d8>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80076b0:	4b4a      	ldr	r3, [pc, #296]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 030c 	and.w	r3, r3, #12
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d00b      	beq.n	80076d4 <HAL_RCC_OscConfig+0x134>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076bc:	4b47      	ldr	r3, [pc, #284]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d11c      	bne.n	8007702 <HAL_RCC_OscConfig+0x162>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80076c8:	4b44      	ldr	r3, [pc, #272]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d116      	bne.n	8007702 <HAL_RCC_OscConfig+0x162>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d4:	4b41      	ldr	r3, [pc, #260]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0302 	and.w	r3, r3, #2
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <HAL_RCC_OscConfig+0x14c>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d001      	beq.n	80076ec <HAL_RCC_OscConfig+0x14c>
      {
        return HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	e18f      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076ec:	4b3b      	ldr	r3, [pc, #236]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	00db      	lsls	r3, r3, #3
 80076fa:	4938      	ldr	r1, [pc, #224]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007700:	e03a      	b.n	8007778 <HAL_RCC_OscConfig+0x1d8>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d020      	beq.n	800774c <HAL_RCC_OscConfig+0x1ac>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800770a:	4b35      	ldr	r3, [pc, #212]	; (80077e0 <HAL_RCC_OscConfig+0x240>)
 800770c:	2201      	movs	r2, #1
 800770e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007710:	f7fb fd3c 	bl	800318c <HAL_GetTick>
 8007714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007716:	e008      	b.n	800772a <HAL_RCC_OscConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007718:	f7fb fd38 	bl	800318c <HAL_GetTick>
 800771c:	4602      	mov	r2, r0
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	1ad3      	subs	r3, r2, r3
 8007722:	2b02      	cmp	r3, #2
 8007724:	d901      	bls.n	800772a <HAL_RCC_OscConfig+0x18a>
          {
            return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e170      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800772a:	4b2c      	ldr	r3, [pc, #176]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0302 	and.w	r3, r3, #2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d0f0      	beq.n	8007718 <HAL_RCC_OscConfig+0x178>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007736:	4b29      	ldr	r3, [pc, #164]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4925      	ldr	r1, [pc, #148]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 8007746:	4313      	orrs	r3, r2
 8007748:	600b      	str	r3, [r1, #0]
 800774a:	e015      	b.n	8007778 <HAL_RCC_OscConfig+0x1d8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800774c:	4b24      	ldr	r3, [pc, #144]	; (80077e0 <HAL_RCC_OscConfig+0x240>)
 800774e:	2200      	movs	r2, #0
 8007750:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007752:	f7fb fd1b 	bl	800318c <HAL_GetTick>
 8007756:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007758:	e008      	b.n	800776c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800775a:	f7fb fd17 	bl	800318c <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	2b02      	cmp	r3, #2
 8007766:	d901      	bls.n	800776c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007768:	2303      	movs	r3, #3
 800776a:	e14f      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800776c:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f003 0302 	and.w	r3, r3, #2
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1f0      	bne.n	800775a <HAL_RCC_OscConfig+0x1ba>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d037      	beq.n	80077f4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d016      	beq.n	80077ba <HAL_RCC_OscConfig+0x21a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800778c:	4b15      	ldr	r3, [pc, #84]	; (80077e4 <HAL_RCC_OscConfig+0x244>)
 800778e:	2201      	movs	r2, #1
 8007790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007792:	f7fb fcfb 	bl	800318c <HAL_GetTick>
 8007796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007798:	e008      	b.n	80077ac <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800779a:	f7fb fcf7 	bl	800318c <HAL_GetTick>
 800779e:	4602      	mov	r2, r0
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2b02      	cmp	r3, #2
 80077a6:	d901      	bls.n	80077ac <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_TIMEOUT;
 80077a8:	2303      	movs	r3, #3
 80077aa:	e12f      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <HAL_RCC_OscConfig+0x23c>)
 80077ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0f0      	beq.n	800779a <HAL_RCC_OscConfig+0x1fa>
 80077b8:	e01c      	b.n	80077f4 <HAL_RCC_OscConfig+0x254>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80077ba:	4b0a      	ldr	r3, [pc, #40]	; (80077e4 <HAL_RCC_OscConfig+0x244>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077c0:	f7fb fce4 	bl	800318c <HAL_GetTick>
 80077c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077c6:	e00f      	b.n	80077e8 <HAL_RCC_OscConfig+0x248>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077c8:	f7fb fce0 	bl	800318c <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	d908      	bls.n	80077e8 <HAL_RCC_OscConfig+0x248>
        {
          return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e118      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
 80077da:	bf00      	nop
 80077dc:	40023800 	.word	0x40023800
 80077e0:	42470000 	.word	0x42470000
 80077e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077e8:	4b8a      	ldr	r3, [pc, #552]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80077ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ec:	f003 0302 	and.w	r3, r3, #2
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d1e9      	bne.n	80077c8 <HAL_RCC_OscConfig+0x228>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 0304 	and.w	r3, r3, #4
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 8097 	beq.w	8007930 <HAL_RCC_OscConfig+0x390>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007802:	2300      	movs	r3, #0
 8007804:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007806:	4b83      	ldr	r3, [pc, #524]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 8007808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800780a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d10f      	bne.n	8007832 <HAL_RCC_OscConfig+0x292>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]
 8007816:	4b7f      	ldr	r3, [pc, #508]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 8007818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800781a:	4a7e      	ldr	r2, [pc, #504]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 800781c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007820:	6413      	str	r3, [r2, #64]	; 0x40
 8007822:	4b7c      	ldr	r3, [pc, #496]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 8007824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800782a:	60fb      	str	r3, [r7, #12]
 800782c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800782e:	2301      	movs	r3, #1
 8007830:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007832:	4b79      	ldr	r3, [pc, #484]	; (8007a18 <HAL_RCC_OscConfig+0x478>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800783a:	2b00      	cmp	r3, #0
 800783c:	d118      	bne.n	8007870 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800783e:	4b76      	ldr	r3, [pc, #472]	; (8007a18 <HAL_RCC_OscConfig+0x478>)
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a75      	ldr	r2, [pc, #468]	; (8007a18 <HAL_RCC_OscConfig+0x478>)
 8007844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007848:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800784a:	f7fb fc9f 	bl	800318c <HAL_GetTick>
 800784e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007850:	e008      	b.n	8007864 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007852:	f7fb fc9b 	bl	800318c <HAL_GetTick>
 8007856:	4602      	mov	r2, r0
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	1ad3      	subs	r3, r2, r3
 800785c:	2b02      	cmp	r3, #2
 800785e:	d901      	bls.n	8007864 <HAL_RCC_OscConfig+0x2c4>
        {
          return HAL_TIMEOUT;
 8007860:	2303      	movs	r3, #3
 8007862:	e0d3      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007864:	4b6c      	ldr	r3, [pc, #432]	; (8007a18 <HAL_RCC_OscConfig+0x478>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786c:	2b00      	cmp	r3, #0
 800786e:	d0f0      	beq.n	8007852 <HAL_RCC_OscConfig+0x2b2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d106      	bne.n	8007886 <HAL_RCC_OscConfig+0x2e6>
 8007878:	4b66      	ldr	r3, [pc, #408]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 800787a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800787c:	4a65      	ldr	r2, [pc, #404]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 800787e:	f043 0301 	orr.w	r3, r3, #1
 8007882:	6713      	str	r3, [r2, #112]	; 0x70
 8007884:	e01c      	b.n	80078c0 <HAL_RCC_OscConfig+0x320>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	2b05      	cmp	r3, #5
 800788c:	d10c      	bne.n	80078a8 <HAL_RCC_OscConfig+0x308>
 800788e:	4b61      	ldr	r3, [pc, #388]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 8007890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007892:	4a60      	ldr	r2, [pc, #384]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 8007894:	f043 0304 	orr.w	r3, r3, #4
 8007898:	6713      	str	r3, [r2, #112]	; 0x70
 800789a:	4b5e      	ldr	r3, [pc, #376]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 800789c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800789e:	4a5d      	ldr	r2, [pc, #372]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80078a0:	f043 0301 	orr.w	r3, r3, #1
 80078a4:	6713      	str	r3, [r2, #112]	; 0x70
 80078a6:	e00b      	b.n	80078c0 <HAL_RCC_OscConfig+0x320>
 80078a8:	4b5a      	ldr	r3, [pc, #360]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80078aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ac:	4a59      	ldr	r2, [pc, #356]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80078ae:	f023 0301 	bic.w	r3, r3, #1
 80078b2:	6713      	str	r3, [r2, #112]	; 0x70
 80078b4:	4b57      	ldr	r3, [pc, #348]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80078b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b8:	4a56      	ldr	r2, [pc, #344]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80078ba:	f023 0304 	bic.w	r3, r3, #4
 80078be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d015      	beq.n	80078f4 <HAL_RCC_OscConfig+0x354>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c8:	f7fb fc60 	bl	800318c <HAL_GetTick>
 80078cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078ce:	e00a      	b.n	80078e6 <HAL_RCC_OscConfig+0x346>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078d0:	f7fb fc5c 	bl	800318c <HAL_GetTick>
 80078d4:	4602      	mov	r2, r0
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	f241 3288 	movw	r2, #5000	; 0x1388
 80078de:	4293      	cmp	r3, r2
 80078e0:	d901      	bls.n	80078e6 <HAL_RCC_OscConfig+0x346>
        {
          return HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	e092      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e6:	4b4b      	ldr	r3, [pc, #300]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80078e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078ea:	f003 0302 	and.w	r3, r3, #2
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d0ee      	beq.n	80078d0 <HAL_RCC_OscConfig+0x330>
 80078f2:	e014      	b.n	800791e <HAL_RCC_OscConfig+0x37e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f4:	f7fb fc4a 	bl	800318c <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078fa:	e00a      	b.n	8007912 <HAL_RCC_OscConfig+0x372>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80078fc:	f7fb fc46 	bl	800318c <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	f241 3288 	movw	r2, #5000	; 0x1388
 800790a:	4293      	cmp	r3, r2
 800790c:	d901      	bls.n	8007912 <HAL_RCC_OscConfig+0x372>
        {
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e07c      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007912:	4b40      	ldr	r3, [pc, #256]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 8007914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d1ee      	bne.n	80078fc <HAL_RCC_OscConfig+0x35c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800791e:	7dfb      	ldrb	r3, [r7, #23]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d105      	bne.n	8007930 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007924:	4b3b      	ldr	r3, [pc, #236]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007928:	4a3a      	ldr	r2, [pc, #232]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 800792a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800792e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d068      	beq.n	8007a0a <HAL_RCC_OscConfig+0x46a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007938:	4b36      	ldr	r3, [pc, #216]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 030c 	and.w	r3, r3, #12
 8007940:	2b08      	cmp	r3, #8
 8007942:	d060      	beq.n	8007a06 <HAL_RCC_OscConfig+0x466>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	2b02      	cmp	r3, #2
 800794a:	d145      	bne.n	80079d8 <HAL_RCC_OscConfig+0x438>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800794c:	4b33      	ldr	r3, [pc, #204]	; (8007a1c <HAL_RCC_OscConfig+0x47c>)
 800794e:	2200      	movs	r2, #0
 8007950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007952:	f7fb fc1b 	bl	800318c <HAL_GetTick>
 8007956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007958:	e008      	b.n	800796c <HAL_RCC_OscConfig+0x3cc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800795a:	f7fb fc17 	bl	800318c <HAL_GetTick>
 800795e:	4602      	mov	r2, r0
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	2b02      	cmp	r3, #2
 8007966:	d901      	bls.n	800796c <HAL_RCC_OscConfig+0x3cc>
          {
            return HAL_TIMEOUT;
 8007968:	2303      	movs	r3, #3
 800796a:	e04f      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800796c:	4b29      	ldr	r3, [pc, #164]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d1f0      	bne.n	800795a <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	69da      	ldr	r2, [r3, #28]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	431a      	orrs	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007986:	019b      	lsls	r3, r3, #6
 8007988:	431a      	orrs	r2, r3
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	085b      	lsrs	r3, r3, #1
 8007990:	3b01      	subs	r3, #1
 8007992:	041b      	lsls	r3, r3, #16
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	061b      	lsls	r3, r3, #24
 800799c:	431a      	orrs	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079a2:	071b      	lsls	r3, r3, #28
 80079a4:	491b      	ldr	r1, [pc, #108]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80079a6:	4313      	orrs	r3, r2
 80079a8:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079aa:	4b1c      	ldr	r3, [pc, #112]	; (8007a1c <HAL_RCC_OscConfig+0x47c>)
 80079ac:	2201      	movs	r2, #1
 80079ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b0:	f7fb fbec 	bl	800318c <HAL_GetTick>
 80079b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079b6:	e008      	b.n	80079ca <HAL_RCC_OscConfig+0x42a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079b8:	f7fb fbe8 	bl	800318c <HAL_GetTick>
 80079bc:	4602      	mov	r2, r0
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	1ad3      	subs	r3, r2, r3
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	d901      	bls.n	80079ca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80079c6:	2303      	movs	r3, #3
 80079c8:	e020      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d0f0      	beq.n	80079b8 <HAL_RCC_OscConfig+0x418>
 80079d6:	e018      	b.n	8007a0a <HAL_RCC_OscConfig+0x46a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d8:	4b10      	ldr	r3, [pc, #64]	; (8007a1c <HAL_RCC_OscConfig+0x47c>)
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079de:	f7fb fbd5 	bl	800318c <HAL_GetTick>
 80079e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079e4:	e008      	b.n	80079f8 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e6:	f7fb fbd1 	bl	800318c <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	2b02      	cmp	r3, #2
 80079f2:	d901      	bls.n	80079f8 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e009      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079f8:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <HAL_RCC_OscConfig+0x474>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1f0      	bne.n	80079e6 <HAL_RCC_OscConfig+0x446>
 8007a04:	e001      	b.n	8007a0a <HAL_RCC_OscConfig+0x46a>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <HAL_RCC_OscConfig+0x46c>
    }
  }
  return HAL_OK;
 8007a0a:	2300      	movs	r3, #0
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3718      	adds	r7, #24
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	40023800 	.word	0x40023800
 8007a18:	40007000 	.word	0x40007000
 8007a1c:	42470060 	.word	0x42470060

08007a20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b082      	sub	sp, #8
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d101      	bne.n	8007a32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e022      	b.n	8007a78 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d105      	bne.n	8007a4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	f7f9 ffd5 	bl	80019f4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2203      	movs	r2, #3
 8007a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007a52:	6878      	ldr	r0, [r7, #4]
 8007a54:	f000 f814 	bl	8007a80 <HAL_SD_InitCard>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e00a      	b.n	8007a78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2200      	movs	r2, #0
 8007a66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007a76:	2300      	movs	r3, #0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a80:	b5b0      	push	{r4, r5, r7, lr}
 8007a82:	b08e      	sub	sp, #56	; 0x38
 8007a84:	af04      	add	r7, sp, #16
 8007a86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007a90:	2300      	movs	r3, #0
 8007a92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007a94:	2300      	movs	r3, #0
 8007a96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007a9c:	2376      	movs	r3, #118	; 0x76
 8007a9e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681d      	ldr	r5, [r3, #0]
 8007aa4:	466c      	mov	r4, sp
 8007aa6:	f107 0314 	add.w	r3, r7, #20
 8007aaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007aae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ab2:	f107 0308 	add.w	r3, r7, #8
 8007ab6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ab8:	4628      	mov	r0, r5
 8007aba:	f001 fedf 	bl	800987c <SDIO_Init>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007ac4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e031      	b.n	8007b34 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007ad0:	4b1a      	ldr	r3, [pc, #104]	; (8007b3c <HAL_SD_InitCard+0xbc>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f001 ff17 	bl	800990e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007ae0:	4b16      	ldr	r3, [pc, #88]	; (8007b3c <HAL_SD_InitCard+0xbc>)
 8007ae2:	2201      	movs	r2, #1
 8007ae4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fcaa 	bl	8008440 <SD_PowerON>
 8007aec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d00b      	beq.n	8007b0c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	e013      	b.n	8007b34 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	f000 fbc9 	bl	80082a4 <SD_InitCard>
 8007b12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b14:	6a3b      	ldr	r3, [r7, #32]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00b      	beq.n	8007b32 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e000      	b.n	8007b34 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3728      	adds	r7, #40	; 0x28
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	bdb0      	pop	{r4, r5, r7, pc}
 8007b3c:	422580a0 	.word	0x422580a0

08007b40 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b4c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d008      	beq.n	8007b6e <HAL_SD_IRQHandler+0x2e>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f003 0308 	and.w	r3, r3, #8
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d003      	beq.n	8007b6e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8007b66:	6878      	ldr	r0, [r7, #4]
 8007b68:	f000 fd20 	bl	80085ac <SD_Read_IT>
 8007b6c:	e155      	b.n	8007e1a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 808f 	beq.w	8007c9c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b86:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b8e:	687a      	ldr	r2, [r7, #4]
 8007b90:	6812      	ldr	r2, [r2, #0]
 8007b92:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8007b96:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007b9a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0201 	bic.w	r2, r2, #1
 8007baa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f003 0308 	and.w	r3, r3, #8
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d039      	beq.n	8007c2a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d104      	bne.n	8007bca <HAL_SD_IRQHandler+0x8a>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f003 0320 	and.w	r3, r3, #32
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d011      	beq.n	8007bee <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f001 ff04 	bl	80099dc <SDMMC_CmdStopTransfer>
 8007bd4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007bd6:	68bb      	ldr	r3, [r7, #8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d008      	beq.n	8007bee <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f91f 	bl	8007e2c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f240 523a 	movw	r2, #1338	; 0x53a
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f003 0301 	and.w	r3, r3, #1
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d104      	bne.n	8007c1a <HAL_SD_IRQHandler+0xda>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f003 0302 	and.w	r3, r3, #2
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f7fb fa60 	bl	80030e0 <HAL_SD_RxCpltCallback>
 8007c20:	e0fb      	b.n	8007e1a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f7fb fa52 	bl	80030cc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c28:	e0f7      	b.n	8007e1a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f000 80f2 	beq.w	8007e1a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f003 0320 	and.w	r3, r3, #32
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d011      	beq.n	8007c64 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4618      	mov	r0, r3
 8007c46:	f001 fec9 	bl	80099dc <SDMMC_CmdStopTransfer>
 8007c4a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d008      	beq.n	8007c64 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	431a      	orrs	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f000 f8e4 	bl	8007e2c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	f003 0301 	and.w	r3, r3, #1
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	f040 80d5 	bne.w	8007e1a <HAL_SD_IRQHandler+0x2da>
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f003 0302 	and.w	r3, r3, #2
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	f040 80cf 	bne.w	8007e1a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f022 0208 	bic.w	r2, r2, #8
 8007c8a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7fb fa19 	bl	80030cc <HAL_SD_TxCpltCallback>
}
 8007c9a:	e0be      	b.n	8007e1a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ca2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <HAL_SD_IRQHandler+0x17c>
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d003      	beq.n	8007cbc <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 fcca 	bl	800864e <SD_Write_IT>
 8007cba:	e0ae      	b.n	8007e1a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cc2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 80a7 	beq.w	8007e1a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cd2:	f003 0302 	and.w	r3, r3, #2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cde:	f043 0202 	orr.w	r2, r3, #2
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cec:	f003 0308 	and.w	r3, r3, #8
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d005      	beq.n	8007d00 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf8:	f043 0208 	orr.w	r2, r3, #8
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d06:	f003 0320 	and.w	r3, r3, #32
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d005      	beq.n	8007d1a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	f043 0220 	orr.w	r2, r3, #32
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d20:	f003 0310 	and.w	r3, r3, #16
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d005      	beq.n	8007d34 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d2c:	f043 0210 	orr.w	r2, r3, #16
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007d4c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f001 fe42 	bl	80099dc <SDMMC_CmdStopTransfer>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d5e:	431a      	orrs	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	f003 0308 	and.w	r3, r3, #8
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d00a      	beq.n	8007d84 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2200      	movs	r2, #0
 8007d7a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 f855 	bl	8007e2c <HAL_SD_ErrorCallback>
}
 8007d82:	e04a      	b.n	8007e1a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d045      	beq.n	8007e1a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f003 0310 	and.w	r3, r3, #16
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d104      	bne.n	8007da2 <HAL_SD_IRQHandler+0x262>
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d011      	beq.n	8007dc6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007da6:	4a1f      	ldr	r2, [pc, #124]	; (8007e24 <HAL_SD_IRQHandler+0x2e4>)
 8007da8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dae:	4618      	mov	r0, r3
 8007db0:	f7fb ff92 	bl	8003cd8 <HAL_DMA_Abort_IT>
 8007db4:	4603      	mov	r3, r0
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d02f      	beq.n	8007e1a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fa02 	bl	80081c8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007dc4:	e029      	b.n	8007e1a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f003 0301 	and.w	r3, r3, #1
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <HAL_SD_IRQHandler+0x29a>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f003 0302 	and.w	r3, r3, #2
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d011      	beq.n	8007dfe <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dde:	4a12      	ldr	r2, [pc, #72]	; (8007e28 <HAL_SD_IRQHandler+0x2e8>)
 8007de0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de6:	4618      	mov	r0, r3
 8007de8:	f7fb ff76 	bl	8003cd8 <HAL_DMA_Abort_IT>
 8007dec:	4603      	mov	r3, r0
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d013      	beq.n	8007e1a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	4618      	mov	r0, r3
 8007df8:	f000 fa1d 	bl	8008236 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007dfc:	e00d      	b.n	8007e1a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2200      	movs	r2, #0
 8007e02:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fb f950 	bl	80030b8 <HAL_SD_AbortCallback>
}
 8007e18:	e7ff      	b.n	8007e1a <HAL_SD_IRQHandler+0x2da>
 8007e1a:	bf00      	nop
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	080081c9 	.word	0x080081c9
 8007e28:	08008237 	.word	0x08008237

08007e2c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007e34:	bf00      	nop
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr

08007e40 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e4e:	0f9b      	lsrs	r3, r3, #30
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e5a:	0e9b      	lsrs	r3, r3, #26
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e6c:	0e1b      	lsrs	r3, r3, #24
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	f003 0303 	and.w	r3, r3, #3
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e7e:	0c1b      	lsrs	r3, r3, #16
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e8a:	0a1b      	lsrs	r3, r3, #8
 8007e8c:	b2da      	uxtb	r2, r3
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ea0:	0d1b      	lsrs	r3, r3, #20
 8007ea2:	b29a      	uxth	r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007eac:	0c1b      	lsrs	r3, r3, #16
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	f003 030f 	and.w	r3, r3, #15
 8007eb4:	b2da      	uxtb	r2, r3
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ebe:	0bdb      	lsrs	r3, r3, #15
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed0:	0b9b      	lsrs	r3, r3, #14
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	f003 0301 	and.w	r3, r3, #1
 8007ed8:	b2da      	uxtb	r2, r3
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ee2:	0b5b      	lsrs	r3, r3, #13
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	f003 0301 	and.w	r3, r3, #1
 8007eea:	b2da      	uxtb	r2, r3
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef4:	0b1b      	lsrs	r3, r3, #12
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	b2da      	uxtb	r2, r3
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	2200      	movs	r2, #0
 8007f06:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d163      	bne.n	8007fd8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f14:	009a      	lsls	r2, r3, #2
 8007f16:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007f1a:	4013      	ands	r3, r2
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007f20:	0f92      	lsrs	r2, r2, #30
 8007f22:	431a      	orrs	r2, r3
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f2c:	0edb      	lsrs	r3, r3, #27
 8007f2e:	b2db      	uxtb	r3, r3
 8007f30:	f003 0307 	and.w	r3, r3, #7
 8007f34:	b2da      	uxtb	r2, r3
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f3e:	0e1b      	lsrs	r3, r3, #24
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	b2da      	uxtb	r2, r3
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f50:	0d5b      	lsrs	r3, r3, #21
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	f003 0307 	and.w	r3, r3, #7
 8007f58:	b2da      	uxtb	r2, r3
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f62:	0c9b      	lsrs	r3, r3, #18
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f003 0307 	and.w	r3, r3, #7
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f74:	0bdb      	lsrs	r3, r3, #15
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	f003 0307 	and.w	r3, r3, #7
 8007f7c:	b2da      	uxtb	r2, r3
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	7e1b      	ldrb	r3, [r3, #24]
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	f003 0307 	and.w	r3, r3, #7
 8007f96:	3302      	adds	r3, #2
 8007f98:	2201      	movs	r2, #1
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007fa2:	fb03 f202 	mul.w	r2, r3, r2
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	7a1b      	ldrb	r3, [r3, #8]
 8007fae:	b2db      	uxtb	r3, r3
 8007fb0:	f003 030f 	and.w	r3, r3, #15
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	409a      	lsls	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fc0:	687a      	ldr	r2, [r7, #4]
 8007fc2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007fc4:	0a52      	lsrs	r2, r2, #9
 8007fc6:	fb03 f202 	mul.w	r2, r3, r2
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fd4:	661a      	str	r2, [r3, #96]	; 0x60
 8007fd6:	e031      	b.n	800803c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d11d      	bne.n	800801c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fe4:	041b      	lsls	r3, r3, #16
 8007fe6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fee:	0c1b      	lsrs	r3, r3, #16
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	029a      	lsls	r2, r3, #10
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008010:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	661a      	str	r2, [r3, #96]	; 0x60
 800801a:	e00f      	b.n	800803c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a58      	ldr	r2, [pc, #352]	; (8008184 <HAL_SD_GetCardCSD+0x344>)
 8008022:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008028:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e09d      	b.n	8008178 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008040:	0b9b      	lsrs	r3, r3, #14
 8008042:	b2db      	uxtb	r3, r3
 8008044:	f003 0301 	and.w	r3, r3, #1
 8008048:	b2da      	uxtb	r2, r3
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008052:	09db      	lsrs	r3, r3, #7
 8008054:	b2db      	uxtb	r3, r3
 8008056:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800805a:	b2da      	uxtb	r2, r3
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800806a:	b2da      	uxtb	r2, r3
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008074:	0fdb      	lsrs	r3, r3, #31
 8008076:	b2da      	uxtb	r2, r3
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008080:	0f5b      	lsrs	r3, r3, #29
 8008082:	b2db      	uxtb	r3, r3
 8008084:	f003 0303 	and.w	r3, r3, #3
 8008088:	b2da      	uxtb	r2, r3
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008092:	0e9b      	lsrs	r3, r3, #26
 8008094:	b2db      	uxtb	r3, r3
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	b2da      	uxtb	r2, r3
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080a4:	0d9b      	lsrs	r3, r3, #22
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	f003 030f 	and.w	r3, r3, #15
 80080ac:	b2da      	uxtb	r2, r3
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080b6:	0d5b      	lsrs	r3, r3, #21
 80080b8:	b2db      	uxtb	r3, r3
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	b2da      	uxtb	r2, r3
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d2:	0c1b      	lsrs	r3, r3, #16
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	f003 0301 	and.w	r3, r3, #1
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080e6:	0bdb      	lsrs	r3, r3, #15
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f003 0301 	and.w	r3, r3, #1
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080fa:	0b9b      	lsrs	r3, r3, #14
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	b2da      	uxtb	r2, r3
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800810e:	0b5b      	lsrs	r3, r3, #13
 8008110:	b2db      	uxtb	r3, r3
 8008112:	f003 0301 	and.w	r3, r3, #1
 8008116:	b2da      	uxtb	r2, r3
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008122:	0b1b      	lsrs	r3, r3, #12
 8008124:	b2db      	uxtb	r3, r3
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008136:	0a9b      	lsrs	r3, r3, #10
 8008138:	b2db      	uxtb	r3, r3
 800813a:	f003 0303 	and.w	r3, r3, #3
 800813e:	b2da      	uxtb	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800814a:	0a1b      	lsrs	r3, r3, #8
 800814c:	b2db      	uxtb	r3, r3
 800814e:	f003 0303 	and.w	r3, r3, #3
 8008152:	b2da      	uxtb	r2, r3
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800815e:	085b      	lsrs	r3, r3, #1
 8008160:	b2db      	uxtb	r3, r3
 8008162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008166:	b2da      	uxtb	r2, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr
 8008184:	004005ff 	.word	0x004005ff

08008188 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b086      	sub	sp, #24
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008194:	f107 030c 	add.w	r3, r7, #12
 8008198:	4619      	mov	r1, r3
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f9de 	bl	800855c <SD_SendStatus>
 80081a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	431a      	orrs	r2, r3
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	0a5b      	lsrs	r3, r3, #9
 80081b8:	f003 030f 	and.w	r3, r3, #15
 80081bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80081be:	693b      	ldr	r3, [r7, #16]
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3718      	adds	r7, #24
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b084      	sub	sp, #16
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f240 523a 	movw	r2, #1338	; 0x53a
 80081de:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80081e0:	68f8      	ldr	r0, [r7, #12]
 80081e2:	f7ff ffd1 	bl	8008188 <HAL_SD_GetCardState>
 80081e6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2201      	movs	r2, #1
 80081ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b06      	cmp	r3, #6
 80081fa:	d002      	beq.n	8008202 <SD_DMATxAbort+0x3a>
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	2b05      	cmp	r3, #5
 8008200:	d10a      	bne.n	8008218 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4618      	mov	r0, r3
 8008208:	f001 fbe8 	bl	80099dc <SDMMC_CmdStopTransfer>
 800820c:	4602      	mov	r2, r0
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008212:	431a      	orrs	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800821c:	2b00      	cmp	r3, #0
 800821e:	d103      	bne.n	8008228 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008220:	68f8      	ldr	r0, [r7, #12]
 8008222:	f7fa ff49 	bl	80030b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008226:	e002      	b.n	800822e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f7ff fdff 	bl	8007e2c <HAL_SD_ErrorCallback>
}
 800822e:	bf00      	nop
 8008230:	3710      	adds	r7, #16
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}

08008236 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f240 523a 	movw	r2, #1338	; 0x53a
 800824c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f7ff ff9a 	bl	8008188 <HAL_SD_GetCardState>
 8008254:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	2201      	movs	r2, #1
 800825a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	2200      	movs	r2, #0
 8008262:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b06      	cmp	r3, #6
 8008268:	d002      	beq.n	8008270 <SD_DMARxAbort+0x3a>
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	2b05      	cmp	r3, #5
 800826e:	d10a      	bne.n	8008286 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4618      	mov	r0, r3
 8008276:	f001 fbb1 	bl	80099dc <SDMMC_CmdStopTransfer>
 800827a:	4602      	mov	r2, r0
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	431a      	orrs	r2, r3
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	2b00      	cmp	r3, #0
 800828c:	d103      	bne.n	8008296 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f7fa ff12 	bl	80030b8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008294:	e002      	b.n	800829c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008296:	68f8      	ldr	r0, [r7, #12]
 8008298:	f7ff fdc8 	bl	8007e2c <HAL_SD_ErrorCallback>
}
 800829c:	bf00      	nop
 800829e:	3710      	adds	r7, #16
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}

080082a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082a4:	b5b0      	push	{r4, r5, r7, lr}
 80082a6:	b094      	sub	sp, #80	; 0x50
 80082a8:	af04      	add	r7, sp, #16
 80082aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80082ac:	2301      	movs	r3, #1
 80082ae:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4618      	mov	r0, r3
 80082b6:	f001 fb39 	bl	800992c <SDIO_GetPowerState>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d102      	bne.n	80082c6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80082c0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80082c4:	e0b8      	b.n	8008438 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	2b03      	cmp	r3, #3
 80082cc:	d02f      	beq.n	800832e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4618      	mov	r0, r3
 80082d4:	f001 fc49 	bl	8009b6a <SDMMC_CmdSendCID>
 80082d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80082da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d001      	beq.n	80082e4 <SD_InitCard+0x40>
    {
      return errorstate;
 80082e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082e2:	e0a9      	b.n	8008438 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2100      	movs	r1, #0
 80082ea:	4618      	mov	r0, r3
 80082ec:	f001 fb63 	bl	80099b6 <SDIO_GetResponse>
 80082f0:	4602      	mov	r2, r0
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	2104      	movs	r1, #4
 80082fc:	4618      	mov	r0, r3
 80082fe:	f001 fb5a 	bl	80099b6 <SDIO_GetResponse>
 8008302:	4602      	mov	r2, r0
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2108      	movs	r1, #8
 800830e:	4618      	mov	r0, r3
 8008310:	f001 fb51 	bl	80099b6 <SDIO_GetResponse>
 8008314:	4602      	mov	r2, r0
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	210c      	movs	r1, #12
 8008320:	4618      	mov	r0, r3
 8008322:	f001 fb48 	bl	80099b6 <SDIO_GetResponse>
 8008326:	4602      	mov	r2, r0
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008332:	2b03      	cmp	r3, #3
 8008334:	d00d      	beq.n	8008352 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f107 020e 	add.w	r2, r7, #14
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f001 fc4f 	bl	8009be4 <SDMMC_CmdSetRelAdd>
 8008346:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800834a:	2b00      	cmp	r3, #0
 800834c:	d001      	beq.n	8008352 <SD_InitCard+0xae>
    {
      return errorstate;
 800834e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008350:	e072      	b.n	8008438 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008356:	2b03      	cmp	r3, #3
 8008358:	d036      	beq.n	80083c8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800835a:	89fb      	ldrh	r3, [r7, #14]
 800835c:	461a      	mov	r2, r3
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800836a:	041b      	lsls	r3, r3, #16
 800836c:	4619      	mov	r1, r3
 800836e:	4610      	mov	r0, r2
 8008370:	f001 fc19 	bl	8009ba6 <SDMMC_CmdSendCSD>
 8008374:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008376:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008378:	2b00      	cmp	r3, #0
 800837a:	d001      	beq.n	8008380 <SD_InitCard+0xdc>
    {
      return errorstate;
 800837c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800837e:	e05b      	b.n	8008438 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2100      	movs	r1, #0
 8008386:	4618      	mov	r0, r3
 8008388:	f001 fb15 	bl	80099b6 <SDIO_GetResponse>
 800838c:	4602      	mov	r2, r0
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2104      	movs	r1, #4
 8008398:	4618      	mov	r0, r3
 800839a:	f001 fb0c 	bl	80099b6 <SDIO_GetResponse>
 800839e:	4602      	mov	r2, r0
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2108      	movs	r1, #8
 80083aa:	4618      	mov	r0, r3
 80083ac:	f001 fb03 	bl	80099b6 <SDIO_GetResponse>
 80083b0:	4602      	mov	r2, r0
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	210c      	movs	r1, #12
 80083bc:	4618      	mov	r0, r3
 80083be:	f001 fafa 	bl	80099b6 <SDIO_GetResponse>
 80083c2:	4602      	mov	r2, r0
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2104      	movs	r1, #4
 80083ce:	4618      	mov	r0, r3
 80083d0:	f001 faf1 	bl	80099b6 <SDIO_GetResponse>
 80083d4:	4603      	mov	r3, r0
 80083d6:	0d1a      	lsrs	r2, r3, #20
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80083dc:	f107 0310 	add.w	r3, r7, #16
 80083e0:	4619      	mov	r1, r3
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7ff fd2c 	bl	8007e40 <HAL_SD_GetCardCSD>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d002      	beq.n	80083f4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80083f2:	e021      	b.n	8008438 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6819      	ldr	r1, [r3, #0]
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083fc:	041b      	lsls	r3, r3, #16
 80083fe:	2200      	movs	r2, #0
 8008400:	461c      	mov	r4, r3
 8008402:	4615      	mov	r5, r2
 8008404:	4622      	mov	r2, r4
 8008406:	462b      	mov	r3, r5
 8008408:	4608      	mov	r0, r1
 800840a:	f001 fb09 	bl	8009a20 <SDMMC_CmdSelDesel>
 800840e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008410:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <SD_InitCard+0x176>
  {
    return errorstate;
 8008416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008418:	e00e      	b.n	8008438 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681d      	ldr	r5, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	466c      	mov	r4, sp
 8008422:	f103 0210 	add.w	r2, r3, #16
 8008426:	ca07      	ldmia	r2, {r0, r1, r2}
 8008428:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800842c:	3304      	adds	r3, #4
 800842e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008430:	4628      	mov	r0, r5
 8008432:	f001 fa23 	bl	800987c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3740      	adds	r7, #64	; 0x40
 800843c:	46bd      	mov	sp, r7
 800843e:	bdb0      	pop	{r4, r5, r7, pc}

08008440 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	b086      	sub	sp, #24
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008448:	2300      	movs	r3, #0
 800844a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
 8008450:	2300      	movs	r3, #0
 8008452:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fb04 	bl	8009a66 <SDMMC_CmdGoIdleState>
 800845e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d001      	beq.n	800846a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	e072      	b.n	8008550 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4618      	mov	r0, r3
 8008470:	f001 fb17 	bl	8009aa2 <SDMMC_CmdOperCond>
 8008474:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00d      	beq.n	8008498 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f001 faed 	bl	8009a66 <SDMMC_CmdGoIdleState>
 800848c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d004      	beq.n	800849e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	e05b      	b.n	8008550 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d137      	bne.n	8008516 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2100      	movs	r1, #0
 80084ac:	4618      	mov	r0, r3
 80084ae:	f001 fb17 	bl	8009ae0 <SDMMC_CmdAppCommand>
 80084b2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d02d      	beq.n	8008516 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084be:	e047      	b.n	8008550 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	2100      	movs	r1, #0
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 fb0a 	bl	8009ae0 <SDMMC_CmdAppCommand>
 80084cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d001      	beq.n	80084d8 <SD_PowerON+0x98>
    {
      return errorstate;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	e03b      	b.n	8008550 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	491e      	ldr	r1, [pc, #120]	; (8008558 <SD_PowerON+0x118>)
 80084de:	4618      	mov	r0, r3
 80084e0:	f001 fb20 	bl	8009b24 <SDMMC_CmdAppOperCommand>
 80084e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d002      	beq.n	80084f2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084f0:	e02e      	b.n	8008550 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2100      	movs	r1, #0
 80084f8:	4618      	mov	r0, r3
 80084fa:	f001 fa5c 	bl	80099b6 <SDIO_GetResponse>
 80084fe:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	0fdb      	lsrs	r3, r3, #31
 8008504:	2b01      	cmp	r3, #1
 8008506:	d101      	bne.n	800850c <SD_PowerON+0xcc>
 8008508:	2301      	movs	r3, #1
 800850a:	e000      	b.n	800850e <SD_PowerON+0xce>
 800850c:	2300      	movs	r3, #0
 800850e:	613b      	str	r3, [r7, #16]

    count++;
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	3301      	adds	r3, #1
 8008514:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800851c:	4293      	cmp	r3, r2
 800851e:	d802      	bhi.n	8008526 <SD_PowerON+0xe6>
 8008520:	693b      	ldr	r3, [r7, #16]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d0cc      	beq.n	80084c0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800852c:	4293      	cmp	r3, r2
 800852e:	d902      	bls.n	8008536 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008534:	e00c      	b.n	8008550 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d003      	beq.n	8008548 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	645a      	str	r2, [r3, #68]	; 0x44
 8008546:	e002      	b.n	800854e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	c1100000 	.word	0xc1100000

0800855c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d102      	bne.n	8008572 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800856c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008570:	e018      	b.n	80085a4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681a      	ldr	r2, [r3, #0]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f001 fb51 	bl	8009c26 <SDMMC_CmdSendStatus>
 8008584:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <SD_SendStatus+0x34>
  {
    return errorstate;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	e009      	b.n	80085a4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	2100      	movs	r1, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f001 fa0d 	bl	80099b6 <SDIO_GetResponse>
 800859c:	4602      	mov	r2, r0
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80085a2:	2300      	movs	r3, #0
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b086      	sub	sp, #24
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085be:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80085c0:	693b      	ldr	r3, [r7, #16]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d03f      	beq.n	8008646 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
 80085ca:	e033      	b.n	8008634 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 f97e 	bl	80098d2 <SDIO_ReadFIFO>
 80085d6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	b2da      	uxtb	r2, r3
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	3301      	adds	r3, #1
 80085e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	3b01      	subs	r3, #1
 80085ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	0a1b      	lsrs	r3, r3, #8
 80085f0:	b2da      	uxtb	r2, r3
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	3301      	adds	r3, #1
 80085fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	3b01      	subs	r3, #1
 8008600:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	0c1b      	lsrs	r3, r3, #16
 8008606:	b2da      	uxtb	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3301      	adds	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	3b01      	subs	r3, #1
 8008616:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	0e1b      	lsrs	r3, r3, #24
 800861c:	b2da      	uxtb	r2, r3
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	3301      	adds	r3, #1
 8008626:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	3b01      	subs	r3, #1
 800862c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	3301      	adds	r3, #1
 8008632:	617b      	str	r3, [r7, #20]
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	2b07      	cmp	r3, #7
 8008638:	d9c8      	bls.n	80085cc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	693a      	ldr	r2, [r7, #16]
 8008644:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8008646:	bf00      	nop
 8008648:	3718      	adds	r7, #24
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b086      	sub	sp, #24
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6a1b      	ldr	r3, [r3, #32]
 800865a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d043      	beq.n	80086f0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8008668:	2300      	movs	r3, #0
 800866a:	617b      	str	r3, [r7, #20]
 800866c:	e037      	b.n	80086de <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	781b      	ldrb	r3, [r3, #0]
 8008672:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	3301      	adds	r3, #1
 8008678:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	3b01      	subs	r3, #1
 800867e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	021a      	lsls	r2, r3, #8
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	4313      	orrs	r3, r2
 800868a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	3301      	adds	r3, #1
 8008690:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008692:	693b      	ldr	r3, [r7, #16]
 8008694:	3b01      	subs	r3, #1
 8008696:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	041a      	lsls	r2, r3, #16
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	4313      	orrs	r3, r2
 80086a2:	60bb      	str	r3, [r7, #8]
      tmp++;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	3301      	adds	r3, #1
 80086a8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086aa:	693b      	ldr	r3, [r7, #16]
 80086ac:	3b01      	subs	r3, #1
 80086ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	061a      	lsls	r2, r3, #24
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	4313      	orrs	r3, r2
 80086ba:	60bb      	str	r3, [r7, #8]
      tmp++;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3301      	adds	r3, #1
 80086c0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	3b01      	subs	r3, #1
 80086c6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f107 0208 	add.w	r2, r7, #8
 80086d0:	4611      	mov	r1, r2
 80086d2:	4618      	mov	r0, r3
 80086d4:	f001 f90a 	bl	80098ec <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	3301      	adds	r3, #1
 80086dc:	617b      	str	r3, [r7, #20]
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	2b07      	cmp	r3, #7
 80086e2:	d9c4      	bls.n	800866e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68fa      	ldr	r2, [r7, #12]
 80086e8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80086f0:	bf00      	nop
 80086f2:	3718      	adds	r7, #24
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d101      	bne.n	800870e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	e034      	b.n	8008778 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008714:	b2db      	uxtb	r3, r3
 8008716:	2b00      	cmp	r3, #0
 8008718:	d106      	bne.n	8008728 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	f7f9 fac4 	bl	8001cb0 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681a      	ldr	r2, [r3, #0]
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	3308      	adds	r3, #8
 8008730:	4619      	mov	r1, r3
 8008732:	4610      	mov	r0, r2
 8008734:	f000 ff9e 	bl	8009674 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6818      	ldr	r0, [r3, #0]
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	461a      	mov	r2, r3
 8008742:	68b9      	ldr	r1, [r7, #8]
 8008744:	f001 f806 	bl	8009754 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	6858      	ldr	r0, [r3, #4]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	689a      	ldr	r2, [r3, #8]
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008754:	6879      	ldr	r1, [r7, #4]
 8008756:	f001 f851 	bl	80097fc <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	6892      	ldr	r2, [r2, #8]
 8008762:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68fa      	ldr	r2, [r7, #12]
 800876c:	6892      	ldr	r2, [r2, #8]
 800876e:	f041 0101 	orr.w	r1, r1, #1
 8008772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8008776:	2300      	movs	r3, #0
}
 8008778:	4618      	mov	r0, r3
 800877a:	3710      	adds	r7, #16
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b082      	sub	sp, #8
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d101      	bne.n	8008792 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e01d      	b.n	80087ce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008798:	b2db      	uxtb	r3, r3
 800879a:	2b00      	cmp	r3, #0
 800879c:	d106      	bne.n	80087ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f815 	bl	80087d6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2202      	movs	r2, #2
 80087b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	3304      	adds	r3, #4
 80087bc:	4619      	mov	r1, r3
 80087be:	4610      	mov	r0, r2
 80087c0:	f000 f968 	bl	8008a94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087cc:	2300      	movs	r3, #0
}
 80087ce:	4618      	mov	r0, r3
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80087de:	bf00      	nop
 80087e0:	370c      	adds	r7, #12
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr

080087ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80087ea:	b480      	push	{r7}
 80087ec:	b085      	sub	sp, #20
 80087ee:	af00      	add	r7, sp, #0
 80087f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68da      	ldr	r2, [r3, #12]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f042 0201 	orr.w	r2, r2, #1
 8008800:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	f003 0307 	and.w	r3, r3, #7
 800880c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	2b06      	cmp	r3, #6
 8008812:	d007      	beq.n	8008824 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0201 	orr.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3714      	adds	r7, #20
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b082      	sub	sp, #8
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	f003 0302 	and.w	r3, r3, #2
 8008844:	2b02      	cmp	r3, #2
 8008846:	d122      	bne.n	800888e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b02      	cmp	r3, #2
 8008854:	d11b      	bne.n	800888e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f06f 0202 	mvn.w	r2, #2
 800885e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	f003 0303 	and.w	r3, r3, #3
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f8ee 	bl	8008a56 <HAL_TIM_IC_CaptureCallback>
 800887a:	e005      	b.n	8008888 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f8e0 	bl	8008a42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f8f1 	bl	8008a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f003 0304 	and.w	r3, r3, #4
 8008898:	2b04      	cmp	r3, #4
 800889a:	d122      	bne.n	80088e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	f003 0304 	and.w	r3, r3, #4
 80088a6:	2b04      	cmp	r3, #4
 80088a8:	d11b      	bne.n	80088e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f06f 0204 	mvn.w	r2, #4
 80088b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2202      	movs	r2, #2
 80088b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	699b      	ldr	r3, [r3, #24]
 80088c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d003      	beq.n	80088d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 f8c4 	bl	8008a56 <HAL_TIM_IC_CaptureCallback>
 80088ce:	e005      	b.n	80088dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 f8b6 	bl	8008a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f8c7 	bl	8008a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	f003 0308 	and.w	r3, r3, #8
 80088ec:	2b08      	cmp	r3, #8
 80088ee:	d122      	bne.n	8008936 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b08      	cmp	r3, #8
 80088fc:	d11b      	bne.n	8008936 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f06f 0208 	mvn.w	r2, #8
 8008906:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2204      	movs	r2, #4
 800890c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69db      	ldr	r3, [r3, #28]
 8008914:	f003 0303 	and.w	r3, r3, #3
 8008918:	2b00      	cmp	r3, #0
 800891a:	d003      	beq.n	8008924 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f89a 	bl	8008a56 <HAL_TIM_IC_CaptureCallback>
 8008922:	e005      	b.n	8008930 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f88c 	bl	8008a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f89d 	bl	8008a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	691b      	ldr	r3, [r3, #16]
 800893c:	f003 0310 	and.w	r3, r3, #16
 8008940:	2b10      	cmp	r3, #16
 8008942:	d122      	bne.n	800898a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68db      	ldr	r3, [r3, #12]
 800894a:	f003 0310 	and.w	r3, r3, #16
 800894e:	2b10      	cmp	r3, #16
 8008950:	d11b      	bne.n	800898a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f06f 0210 	mvn.w	r2, #16
 800895a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2208      	movs	r2, #8
 8008960:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69db      	ldr	r3, [r3, #28]
 8008968:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800896c:	2b00      	cmp	r3, #0
 800896e:	d003      	beq.n	8008978 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f870 	bl	8008a56 <HAL_TIM_IC_CaptureCallback>
 8008976:	e005      	b.n	8008984 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f862 	bl	8008a42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f873 	bl	8008a6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	2b01      	cmp	r3, #1
 8008996:	d10e      	bne.n	80089b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f003 0301 	and.w	r3, r3, #1
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d107      	bne.n	80089b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f06f 0201 	mvn.w	r2, #1
 80089ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7f8 fbe9 	bl	8001188 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	691b      	ldr	r3, [r3, #16]
 80089bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089c0:	2b80      	cmp	r3, #128	; 0x80
 80089c2:	d10e      	bne.n	80089e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68db      	ldr	r3, [r3, #12]
 80089ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ce:	2b80      	cmp	r3, #128	; 0x80
 80089d0:	d107      	bne.n	80089e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f903 	bl	8008be8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ec:	2b40      	cmp	r3, #64	; 0x40
 80089ee:	d10e      	bne.n	8008a0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fa:	2b40      	cmp	r3, #64	; 0x40
 80089fc:	d107      	bne.n	8008a0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 f838 	bl	8008a7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	f003 0320 	and.w	r3, r3, #32
 8008a18:	2b20      	cmp	r3, #32
 8008a1a:	d10e      	bne.n	8008a3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	68db      	ldr	r3, [r3, #12]
 8008a22:	f003 0320 	and.w	r3, r3, #32
 8008a26:	2b20      	cmp	r3, #32
 8008a28:	d107      	bne.n	8008a3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f06f 0220 	mvn.w	r2, #32
 8008a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	f000 f8cd 	bl	8008bd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a3a:	bf00      	nop
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b083      	sub	sp, #12
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a4a:	bf00      	nop
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr

08008a56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a56:	b480      	push	{r7}
 8008a58:	b083      	sub	sp, #12
 8008a5a:	af00      	add	r7, sp, #0
 8008a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a5e:	bf00      	nop
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a72:	bf00      	nop
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a86:	bf00      	nop
 8008a88:	370c      	adds	r7, #12
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr
	...

08008a94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	4a40      	ldr	r2, [pc, #256]	; (8008ba8 <TIM_Base_SetConfig+0x114>)
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	d013      	beq.n	8008ad4 <TIM_Base_SetConfig+0x40>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ab2:	d00f      	beq.n	8008ad4 <TIM_Base_SetConfig+0x40>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a3d      	ldr	r2, [pc, #244]	; (8008bac <TIM_Base_SetConfig+0x118>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d00b      	beq.n	8008ad4 <TIM_Base_SetConfig+0x40>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a3c      	ldr	r2, [pc, #240]	; (8008bb0 <TIM_Base_SetConfig+0x11c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d007      	beq.n	8008ad4 <TIM_Base_SetConfig+0x40>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a3b      	ldr	r2, [pc, #236]	; (8008bb4 <TIM_Base_SetConfig+0x120>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d003      	beq.n	8008ad4 <TIM_Base_SetConfig+0x40>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a3a      	ldr	r2, [pc, #232]	; (8008bb8 <TIM_Base_SetConfig+0x124>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d108      	bne.n	8008ae6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ada:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	68fa      	ldr	r2, [r7, #12]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a2f      	ldr	r2, [pc, #188]	; (8008ba8 <TIM_Base_SetConfig+0x114>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d02b      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008af4:	d027      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a2c      	ldr	r2, [pc, #176]	; (8008bac <TIM_Base_SetConfig+0x118>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d023      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a2b      	ldr	r2, [pc, #172]	; (8008bb0 <TIM_Base_SetConfig+0x11c>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d01f      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a2a      	ldr	r2, [pc, #168]	; (8008bb4 <TIM_Base_SetConfig+0x120>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d01b      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a29      	ldr	r2, [pc, #164]	; (8008bb8 <TIM_Base_SetConfig+0x124>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d017      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a28      	ldr	r2, [pc, #160]	; (8008bbc <TIM_Base_SetConfig+0x128>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d013      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a27      	ldr	r2, [pc, #156]	; (8008bc0 <TIM_Base_SetConfig+0x12c>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d00f      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a26      	ldr	r2, [pc, #152]	; (8008bc4 <TIM_Base_SetConfig+0x130>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00b      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a25      	ldr	r2, [pc, #148]	; (8008bc8 <TIM_Base_SetConfig+0x134>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d007      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a24      	ldr	r2, [pc, #144]	; (8008bcc <TIM_Base_SetConfig+0x138>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d003      	beq.n	8008b46 <TIM_Base_SetConfig+0xb2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a23      	ldr	r2, [pc, #140]	; (8008bd0 <TIM_Base_SetConfig+0x13c>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d108      	bne.n	8008b58 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	68db      	ldr	r3, [r3, #12]
 8008b52:	68fa      	ldr	r2, [r7, #12]
 8008b54:	4313      	orrs	r3, r2
 8008b56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	4313      	orrs	r3, r2
 8008b64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	689a      	ldr	r2, [r3, #8]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	681a      	ldr	r2, [r3, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a0a      	ldr	r2, [pc, #40]	; (8008ba8 <TIM_Base_SetConfig+0x114>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d003      	beq.n	8008b8c <TIM_Base_SetConfig+0xf8>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a0c      	ldr	r2, [pc, #48]	; (8008bb8 <TIM_Base_SetConfig+0x124>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d103      	bne.n	8008b94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	691a      	ldr	r2, [r3, #16]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	615a      	str	r2, [r3, #20]
}
 8008b9a:	bf00      	nop
 8008b9c:	3714      	adds	r7, #20
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba4:	4770      	bx	lr
 8008ba6:	bf00      	nop
 8008ba8:	40010000 	.word	0x40010000
 8008bac:	40000400 	.word	0x40000400
 8008bb0:	40000800 	.word	0x40000800
 8008bb4:	40000c00 	.word	0x40000c00
 8008bb8:	40010400 	.word	0x40010400
 8008bbc:	40014000 	.word	0x40014000
 8008bc0:	40014400 	.word	0x40014400
 8008bc4:	40014800 	.word	0x40014800
 8008bc8:	40001800 	.word	0x40001800
 8008bcc:	40001c00 	.word	0x40001c00
 8008bd0:	40002000 	.word	0x40002000

08008bd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d101      	bne.n	8008c0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	e03f      	b.n	8008c8e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008c14:	b2db      	uxtb	r3, r3
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d106      	bne.n	8008c28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7f8 ff56 	bl	8001ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2224      	movs	r2, #36	; 0x24
 8008c2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68da      	ldr	r2, [r3, #12]
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008c3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f829 	bl	8008c98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	691a      	ldr	r2, [r3, #16]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008c54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	695a      	ldr	r2, [r3, #20]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008c64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	68da      	ldr	r2, [r3, #12]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008c74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2200      	movs	r2, #0
 8008c7a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2220      	movs	r2, #32
 8008c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2220      	movs	r2, #32
 8008c88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008c8c:	2300      	movs	r3, #0
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3708      	adds	r7, #8
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
	...

08008c98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c9c:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008ca6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	691b      	ldr	r3, [r3, #16]
 8008cae:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008cb2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008cb6:	68d9      	ldr	r1, [r3, #12]
 8008cb8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008cbc:	681a      	ldr	r2, [r3, #0]
 8008cbe:	ea40 0301 	orr.w	r3, r0, r1
 8008cc2:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008cc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008cce:	691b      	ldr	r3, [r3, #16]
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008cd6:	695b      	ldr	r3, [r3, #20]
 8008cd8:	431a      	orrs	r2, r3
 8008cda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008cde:	69db      	ldr	r3, [r3, #28]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8008ce6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008cf2:	f021 010c 	bic.w	r1, r1, #12
 8008cf6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8008d00:	430b      	orrs	r3, r1
 8008d02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d04:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d14:	6999      	ldr	r1, [r3, #24]
 8008d16:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d1a:	681a      	ldr	r2, [r3, #0]
 8008d1c:	ea40 0301 	orr.w	r3, r0, r1
 8008d20:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d22:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d26:	69db      	ldr	r3, [r3, #28]
 8008d28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d2c:	f040 825a 	bne.w	80091e4 <UART_SetConfig+0x54c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 8008d30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	4b9c      	ldr	r3, [pc, #624]	; (8008fa8 <UART_SetConfig+0x310>)
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d012      	beq.n	8008d62 <UART_SetConfig+0xca>
 8008d3c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d40:	681a      	ldr	r2, [r3, #0]
 8008d42:	4b9a      	ldr	r3, [pc, #616]	; (8008fac <UART_SetConfig+0x314>)
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d00c      	beq.n	8008d62 <UART_SetConfig+0xca>
 8008d48:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d4c:	681a      	ldr	r2, [r3, #0]
 8008d4e:	4b98      	ldr	r3, [pc, #608]	; (8008fb0 <UART_SetConfig+0x318>)
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d006      	beq.n	8008d62 <UART_SetConfig+0xca>
 8008d54:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008d58:	681a      	ldr	r2, [r3, #0]
 8008d5a:	4b96      	ldr	r3, [pc, #600]	; (8008fb4 <UART_SetConfig+0x31c>)
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	f040 812d 	bne.w	8008fbc <UART_SetConfig+0x324>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008d62:	f7fd ffe7 	bl	8006d34 <HAL_RCC_GetPCLK2Freq>
 8008d66:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008d6a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8008d74:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8008d78:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8008d7c:	4622      	mov	r2, r4
 8008d7e:	462b      	mov	r3, r5
 8008d80:	1891      	adds	r1, r2, r2
 8008d82:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8008d86:	415b      	adcs	r3, r3
 8008d88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8008d8c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8008d90:	4621      	mov	r1, r4
 8008d92:	1851      	adds	r1, r2, r1
 8008d94:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8008d98:	4629      	mov	r1, r5
 8008d9a:	414b      	adcs	r3, r1
 8008d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008da0:	f04f 0200 	mov.w	r2, #0
 8008da4:	f04f 0300 	mov.w	r3, #0
 8008da8:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8008dac:	4649      	mov	r1, r9
 8008dae:	00cb      	lsls	r3, r1, #3
 8008db0:	4641      	mov	r1, r8
 8008db2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008db6:	4641      	mov	r1, r8
 8008db8:	00ca      	lsls	r2, r1, #3
 8008dba:	4610      	mov	r0, r2
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	4622      	mov	r2, r4
 8008dc2:	189b      	adds	r3, r3, r2
 8008dc4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8008dc8:	462b      	mov	r3, r5
 8008dca:	460a      	mov	r2, r1
 8008dcc:	eb42 0303 	adc.w	r3, r2, r3
 8008dd0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8008dd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8008de0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8008de4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8008de8:	460b      	mov	r3, r1
 8008dea:	18db      	adds	r3, r3, r3
 8008dec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008df0:	4613      	mov	r3, r2
 8008df2:	eb42 0303 	adc.w	r3, r2, r3
 8008df6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008dfa:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8008dfe:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8008e02:	f7f7 fa0d 	bl	8000220 <__aeabi_uldivmod>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4b6b      	ldr	r3, [pc, #428]	; (8008fb8 <UART_SetConfig+0x320>)
 8008e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8008e10:	095b      	lsrs	r3, r3, #5
 8008e12:	011c      	lsls	r4, r3, #4
 8008e14:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8008e1e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8008e22:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8008e26:	4642      	mov	r2, r8
 8008e28:	464b      	mov	r3, r9
 8008e2a:	1891      	adds	r1, r2, r2
 8008e2c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8008e30:	415b      	adcs	r3, r3
 8008e32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008e36:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8008e3a:	4641      	mov	r1, r8
 8008e3c:	1851      	adds	r1, r2, r1
 8008e3e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8008e42:	4649      	mov	r1, r9
 8008e44:	414b      	adcs	r3, r1
 8008e46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e4a:	f04f 0200 	mov.w	r2, #0
 8008e4e:	f04f 0300 	mov.w	r3, #0
 8008e52:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8008e56:	4659      	mov	r1, fp
 8008e58:	00cb      	lsls	r3, r1, #3
 8008e5a:	4651      	mov	r1, sl
 8008e5c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e60:	4651      	mov	r1, sl
 8008e62:	00ca      	lsls	r2, r1, #3
 8008e64:	4610      	mov	r0, r2
 8008e66:	4619      	mov	r1, r3
 8008e68:	4603      	mov	r3, r0
 8008e6a:	4642      	mov	r2, r8
 8008e6c:	189b      	adds	r3, r3, r2
 8008e6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8008e72:	464b      	mov	r3, r9
 8008e74:	460a      	mov	r2, r1
 8008e76:	eb42 0303 	adc.w	r3, r2, r3
 8008e7a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 8008e7e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8008e8a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 8008e8e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8008e92:	460b      	mov	r3, r1
 8008e94:	18db      	adds	r3, r3, r3
 8008e96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	eb42 0303 	adc.w	r3, r2, r3
 8008ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ea4:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8008ea8:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8008eac:	f7f7 f9b8 	bl	8000220 <__aeabi_uldivmod>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	4611      	mov	r1, r2
 8008eb6:	4b40      	ldr	r3, [pc, #256]	; (8008fb8 <UART_SetConfig+0x320>)
 8008eb8:	fba3 2301 	umull	r2, r3, r3, r1
 8008ebc:	095b      	lsrs	r3, r3, #5
 8008ebe:	2264      	movs	r2, #100	; 0x64
 8008ec0:	fb02 f303 	mul.w	r3, r2, r3
 8008ec4:	1acb      	subs	r3, r1, r3
 8008ec6:	00db      	lsls	r3, r3, #3
 8008ec8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008ecc:	4b3a      	ldr	r3, [pc, #232]	; (8008fb8 <UART_SetConfig+0x320>)
 8008ece:	fba3 2302 	umull	r2, r3, r3, r2
 8008ed2:	095b      	lsrs	r3, r3, #5
 8008ed4:	005b      	lsls	r3, r3, #1
 8008ed6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008eda:	441c      	add	r4, r3
 8008edc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8008ee6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8008eea:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 8008eee:	4642      	mov	r2, r8
 8008ef0:	464b      	mov	r3, r9
 8008ef2:	1891      	adds	r1, r2, r2
 8008ef4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8008ef8:	415b      	adcs	r3, r3
 8008efa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008efe:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8008f02:	4641      	mov	r1, r8
 8008f04:	1851      	adds	r1, r2, r1
 8008f06:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8008f0a:	4649      	mov	r1, r9
 8008f0c:	414b      	adcs	r3, r1
 8008f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008f12:	f04f 0200 	mov.w	r2, #0
 8008f16:	f04f 0300 	mov.w	r3, #0
 8008f1a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 8008f1e:	4659      	mov	r1, fp
 8008f20:	00cb      	lsls	r3, r1, #3
 8008f22:	4651      	mov	r1, sl
 8008f24:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f28:	4651      	mov	r1, sl
 8008f2a:	00ca      	lsls	r2, r1, #3
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4619      	mov	r1, r3
 8008f30:	4603      	mov	r3, r0
 8008f32:	4642      	mov	r2, r8
 8008f34:	189b      	adds	r3, r3, r2
 8008f36:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8008f3a:	464b      	mov	r3, r9
 8008f3c:	460a      	mov	r2, r1
 8008f3e:	eb42 0303 	adc.w	r3, r2, r3
 8008f42:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8008f46:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008f4a:	685b      	ldr	r3, [r3, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8008f52:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8008f56:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	18db      	adds	r3, r3, r3
 8008f5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008f62:	4613      	mov	r3, r2
 8008f64:	eb42 0303 	adc.w	r3, r2, r3
 8008f68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008f6c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8008f70:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8008f74:	f7f7 f954 	bl	8000220 <__aeabi_uldivmod>
 8008f78:	4602      	mov	r2, r0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4b0e      	ldr	r3, [pc, #56]	; (8008fb8 <UART_SetConfig+0x320>)
 8008f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8008f82:	095b      	lsrs	r3, r3, #5
 8008f84:	2164      	movs	r1, #100	; 0x64
 8008f86:	fb01 f303 	mul.w	r3, r1, r3
 8008f8a:	1ad3      	subs	r3, r2, r3
 8008f8c:	00db      	lsls	r3, r3, #3
 8008f8e:	3332      	adds	r3, #50	; 0x32
 8008f90:	4a09      	ldr	r2, [pc, #36]	; (8008fb8 <UART_SetConfig+0x320>)
 8008f92:	fba2 2303 	umull	r2, r3, r2, r3
 8008f96:	095b      	lsrs	r3, r3, #5
 8008f98:	f003 0207 	and.w	r2, r3, #7
 8008f9c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4422      	add	r2, r4
 8008fa4:	609a      	str	r2, [r3, #8]
 8008fa6:	e35d      	b.n	8009664 <UART_SetConfig+0x9cc>
 8008fa8:	40011000 	.word	0x40011000
 8008fac:	40011400 	.word	0x40011400
 8008fb0:	40011800 	.word	0x40011800
 8008fb4:	40011c00 	.word	0x40011c00
 8008fb8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fbc:	f7fd fea6 	bl	8006d0c <HAL_RCC_GetPCLK1Freq>
 8008fc0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8008fce:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8008fd2:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 8008fd6:	4622      	mov	r2, r4
 8008fd8:	462b      	mov	r3, r5
 8008fda:	1891      	adds	r1, r2, r2
 8008fdc:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8008fe0:	415b      	adcs	r3, r3
 8008fe2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fe6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8008fea:	4621      	mov	r1, r4
 8008fec:	eb12 0a01 	adds.w	sl, r2, r1
 8008ff0:	4629      	mov	r1, r5
 8008ff2:	eb43 0b01 	adc.w	fp, r3, r1
 8008ff6:	f04f 0200 	mov.w	r2, #0
 8008ffa:	f04f 0300 	mov.w	r3, #0
 8008ffe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009002:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009006:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800900a:	4692      	mov	sl, r2
 800900c:	469b      	mov	fp, r3
 800900e:	4623      	mov	r3, r4
 8009010:	eb1a 0303 	adds.w	r3, sl, r3
 8009014:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8009018:	462b      	mov	r3, r5
 800901a:	eb4b 0303 	adc.w	r3, fp, r3
 800901e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8009022:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 800902e:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8009032:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 8009036:	460b      	mov	r3, r1
 8009038:	18db      	adds	r3, r3, r3
 800903a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800903e:	4613      	mov	r3, r2
 8009040:	eb42 0303 	adc.w	r3, r2, r3
 8009044:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009048:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800904c:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8009050:	f7f7 f8e6 	bl	8000220 <__aeabi_uldivmod>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4b61      	ldr	r3, [pc, #388]	; (80091e0 <UART_SetConfig+0x548>)
 800905a:	fba3 2302 	umull	r2, r3, r3, r2
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	011c      	lsls	r4, r3, #4
 8009062:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009066:	2200      	movs	r2, #0
 8009068:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 800906c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8009070:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 8009074:	4642      	mov	r2, r8
 8009076:	464b      	mov	r3, r9
 8009078:	1891      	adds	r1, r2, r2
 800907a:	67b9      	str	r1, [r7, #120]	; 0x78
 800907c:	415b      	adcs	r3, r3
 800907e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009080:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8009084:	4641      	mov	r1, r8
 8009086:	1851      	adds	r1, r2, r1
 8009088:	6739      	str	r1, [r7, #112]	; 0x70
 800908a:	4649      	mov	r1, r9
 800908c:	414b      	adcs	r3, r1
 800908e:	677b      	str	r3, [r7, #116]	; 0x74
 8009090:	f04f 0200 	mov.w	r2, #0
 8009094:	f04f 0300 	mov.w	r3, #0
 8009098:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 800909c:	4659      	mov	r1, fp
 800909e:	00cb      	lsls	r3, r1, #3
 80090a0:	4651      	mov	r1, sl
 80090a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090a6:	4651      	mov	r1, sl
 80090a8:	00ca      	lsls	r2, r1, #3
 80090aa:	4610      	mov	r0, r2
 80090ac:	4619      	mov	r1, r3
 80090ae:	4603      	mov	r3, r0
 80090b0:	4642      	mov	r2, r8
 80090b2:	189b      	adds	r3, r3, r2
 80090b4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80090b8:	464b      	mov	r3, r9
 80090ba:	460a      	mov	r2, r1
 80090bc:	eb42 0303 	adc.w	r3, r2, r3
 80090c0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80090c4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80090c8:	685b      	ldr	r3, [r3, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80090d0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80090d4:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80090d8:	460b      	mov	r3, r1
 80090da:	18db      	adds	r3, r3, r3
 80090dc:	66bb      	str	r3, [r7, #104]	; 0x68
 80090de:	4613      	mov	r3, r2
 80090e0:	eb42 0303 	adc.w	r3, r2, r3
 80090e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090e6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80090ea:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80090ee:	f7f7 f897 	bl	8000220 <__aeabi_uldivmod>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	4611      	mov	r1, r2
 80090f8:	4b39      	ldr	r3, [pc, #228]	; (80091e0 <UART_SetConfig+0x548>)
 80090fa:	fba3 2301 	umull	r2, r3, r3, r1
 80090fe:	095b      	lsrs	r3, r3, #5
 8009100:	2264      	movs	r2, #100	; 0x64
 8009102:	fb02 f303 	mul.w	r3, r2, r3
 8009106:	1acb      	subs	r3, r1, r3
 8009108:	00db      	lsls	r3, r3, #3
 800910a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800910e:	4b34      	ldr	r3, [pc, #208]	; (80091e0 <UART_SetConfig+0x548>)
 8009110:	fba3 2302 	umull	r2, r3, r3, r2
 8009114:	095b      	lsrs	r3, r3, #5
 8009116:	005b      	lsls	r3, r3, #1
 8009118:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800911c:	441c      	add	r4, r3
 800911e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009122:	2200      	movs	r2, #0
 8009124:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8009128:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800912c:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8009130:	4642      	mov	r2, r8
 8009132:	464b      	mov	r3, r9
 8009134:	1891      	adds	r1, r2, r2
 8009136:	6639      	str	r1, [r7, #96]	; 0x60
 8009138:	415b      	adcs	r3, r3
 800913a:	667b      	str	r3, [r7, #100]	; 0x64
 800913c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8009140:	4641      	mov	r1, r8
 8009142:	1851      	adds	r1, r2, r1
 8009144:	65b9      	str	r1, [r7, #88]	; 0x58
 8009146:	4649      	mov	r1, r9
 8009148:	414b      	adcs	r3, r1
 800914a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800914c:	f04f 0200 	mov.w	r2, #0
 8009150:	f04f 0300 	mov.w	r3, #0
 8009154:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8009158:	4659      	mov	r1, fp
 800915a:	00cb      	lsls	r3, r1, #3
 800915c:	4651      	mov	r1, sl
 800915e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009162:	4651      	mov	r1, sl
 8009164:	00ca      	lsls	r2, r1, #3
 8009166:	4610      	mov	r0, r2
 8009168:	4619      	mov	r1, r3
 800916a:	4603      	mov	r3, r0
 800916c:	4642      	mov	r2, r8
 800916e:	189b      	adds	r3, r3, r2
 8009170:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8009174:	464b      	mov	r3, r9
 8009176:	460a      	mov	r2, r1
 8009178:	eb42 0303 	adc.w	r3, r2, r3
 800917c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8009180:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009184:	685b      	ldr	r3, [r3, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800918c:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8009190:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 8009194:	460b      	mov	r3, r1
 8009196:	18db      	adds	r3, r3, r3
 8009198:	653b      	str	r3, [r7, #80]	; 0x50
 800919a:	4613      	mov	r3, r2
 800919c:	eb42 0303 	adc.w	r3, r2, r3
 80091a0:	657b      	str	r3, [r7, #84]	; 0x54
 80091a2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80091a6:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80091aa:	f7f7 f839 	bl	8000220 <__aeabi_uldivmod>
 80091ae:	4602      	mov	r2, r0
 80091b0:	460b      	mov	r3, r1
 80091b2:	4b0b      	ldr	r3, [pc, #44]	; (80091e0 <UART_SetConfig+0x548>)
 80091b4:	fba3 1302 	umull	r1, r3, r3, r2
 80091b8:	095b      	lsrs	r3, r3, #5
 80091ba:	2164      	movs	r1, #100	; 0x64
 80091bc:	fb01 f303 	mul.w	r3, r1, r3
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	00db      	lsls	r3, r3, #3
 80091c4:	3332      	adds	r3, #50	; 0x32
 80091c6:	4a06      	ldr	r2, [pc, #24]	; (80091e0 <UART_SetConfig+0x548>)
 80091c8:	fba2 2303 	umull	r2, r3, r2, r3
 80091cc:	095b      	lsrs	r3, r3, #5
 80091ce:	f003 0207 	and.w	r2, r3, #7
 80091d2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4422      	add	r2, r4
 80091da:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80091dc:	e242      	b.n	8009664 <UART_SetConfig+0x9cc>
 80091de:	bf00      	nop
 80091e0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80091e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80091e8:	681a      	ldr	r2, [r3, #0]
 80091ea:	4b93      	ldr	r3, [pc, #588]	; (8009438 <UART_SetConfig+0x7a0>)
 80091ec:	429a      	cmp	r2, r3
 80091ee:	d012      	beq.n	8009216 <UART_SetConfig+0x57e>
 80091f0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	4b91      	ldr	r3, [pc, #580]	; (800943c <UART_SetConfig+0x7a4>)
 80091f8:	429a      	cmp	r2, r3
 80091fa:	d00c      	beq.n	8009216 <UART_SetConfig+0x57e>
 80091fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	4b8f      	ldr	r3, [pc, #572]	; (8009440 <UART_SetConfig+0x7a8>)
 8009204:	429a      	cmp	r2, r3
 8009206:	d006      	beq.n	8009216 <UART_SetConfig+0x57e>
 8009208:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800920c:	681a      	ldr	r2, [r3, #0]
 800920e:	4b8d      	ldr	r3, [pc, #564]	; (8009444 <UART_SetConfig+0x7ac>)
 8009210:	429a      	cmp	r2, r3
 8009212:	f040 811b 	bne.w	800944c <UART_SetConfig+0x7b4>
      pclk = HAL_RCC_GetPCLK2Freq();
 8009216:	f7fd fd8d 	bl	8006d34 <HAL_RCC_GetPCLK2Freq>
 800921a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800921e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009222:	2200      	movs	r2, #0
 8009224:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8009228:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 800922c:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8009230:	4622      	mov	r2, r4
 8009232:	462b      	mov	r3, r5
 8009234:	1891      	adds	r1, r2, r2
 8009236:	64b9      	str	r1, [r7, #72]	; 0x48
 8009238:	415b      	adcs	r3, r3
 800923a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800923c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009240:	4621      	mov	r1, r4
 8009242:	eb12 0801 	adds.w	r8, r2, r1
 8009246:	4629      	mov	r1, r5
 8009248:	eb43 0901 	adc.w	r9, r3, r1
 800924c:	f04f 0200 	mov.w	r2, #0
 8009250:	f04f 0300 	mov.w	r3, #0
 8009254:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009258:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800925c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009260:	4690      	mov	r8, r2
 8009262:	4699      	mov	r9, r3
 8009264:	4623      	mov	r3, r4
 8009266:	eb18 0303 	adds.w	r3, r8, r3
 800926a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800926e:	462b      	mov	r3, r5
 8009270:	eb49 0303 	adc.w	r3, r9, r3
 8009274:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8009278:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8009284:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8009288:	f04f 0200 	mov.w	r2, #0
 800928c:	f04f 0300 	mov.w	r3, #0
 8009290:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8009294:	4629      	mov	r1, r5
 8009296:	008b      	lsls	r3, r1, #2
 8009298:	4621      	mov	r1, r4
 800929a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800929e:	4621      	mov	r1, r4
 80092a0:	008a      	lsls	r2, r1, #2
 80092a2:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80092a6:	f7f6 ffbb 	bl	8000220 <__aeabi_uldivmod>
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4b66      	ldr	r3, [pc, #408]	; (8009448 <UART_SetConfig+0x7b0>)
 80092b0:	fba3 2302 	umull	r2, r3, r3, r2
 80092b4:	095b      	lsrs	r3, r3, #5
 80092b6:	011c      	lsls	r4, r3, #4
 80092b8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80092bc:	2200      	movs	r2, #0
 80092be:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80092c2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80092c6:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 80092ca:	4642      	mov	r2, r8
 80092cc:	464b      	mov	r3, r9
 80092ce:	1891      	adds	r1, r2, r2
 80092d0:	6439      	str	r1, [r7, #64]	; 0x40
 80092d2:	415b      	adcs	r3, r3
 80092d4:	647b      	str	r3, [r7, #68]	; 0x44
 80092d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80092da:	4641      	mov	r1, r8
 80092dc:	1851      	adds	r1, r2, r1
 80092de:	63b9      	str	r1, [r7, #56]	; 0x38
 80092e0:	4649      	mov	r1, r9
 80092e2:	414b      	adcs	r3, r1
 80092e4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092e6:	f04f 0200 	mov.w	r2, #0
 80092ea:	f04f 0300 	mov.w	r3, #0
 80092ee:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80092f2:	4659      	mov	r1, fp
 80092f4:	00cb      	lsls	r3, r1, #3
 80092f6:	4651      	mov	r1, sl
 80092f8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80092fc:	4651      	mov	r1, sl
 80092fe:	00ca      	lsls	r2, r1, #3
 8009300:	4610      	mov	r0, r2
 8009302:	4619      	mov	r1, r3
 8009304:	4603      	mov	r3, r0
 8009306:	4642      	mov	r2, r8
 8009308:	189b      	adds	r3, r3, r2
 800930a:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800930e:	464b      	mov	r3, r9
 8009310:	460a      	mov	r2, r1
 8009312:	eb42 0303 	adc.w	r3, r2, r3
 8009316:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800931a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800931e:	685b      	ldr	r3, [r3, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8009326:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8009336:	4649      	mov	r1, r9
 8009338:	008b      	lsls	r3, r1, #2
 800933a:	4641      	mov	r1, r8
 800933c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009340:	4641      	mov	r1, r8
 8009342:	008a      	lsls	r2, r1, #2
 8009344:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8009348:	f7f6 ff6a 	bl	8000220 <__aeabi_uldivmod>
 800934c:	4602      	mov	r2, r0
 800934e:	460b      	mov	r3, r1
 8009350:	4b3d      	ldr	r3, [pc, #244]	; (8009448 <UART_SetConfig+0x7b0>)
 8009352:	fba3 1302 	umull	r1, r3, r3, r2
 8009356:	095b      	lsrs	r3, r3, #5
 8009358:	2164      	movs	r1, #100	; 0x64
 800935a:	fb01 f303 	mul.w	r3, r1, r3
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	011b      	lsls	r3, r3, #4
 8009362:	3332      	adds	r3, #50	; 0x32
 8009364:	4a38      	ldr	r2, [pc, #224]	; (8009448 <UART_SetConfig+0x7b0>)
 8009366:	fba2 2303 	umull	r2, r3, r2, r3
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009370:	441c      	add	r4, r3
 8009372:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009376:	2200      	movs	r2, #0
 8009378:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800937c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8009380:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8009384:	4642      	mov	r2, r8
 8009386:	464b      	mov	r3, r9
 8009388:	1891      	adds	r1, r2, r2
 800938a:	6339      	str	r1, [r7, #48]	; 0x30
 800938c:	415b      	adcs	r3, r3
 800938e:	637b      	str	r3, [r7, #52]	; 0x34
 8009390:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009394:	4641      	mov	r1, r8
 8009396:	1851      	adds	r1, r2, r1
 8009398:	62b9      	str	r1, [r7, #40]	; 0x28
 800939a:	4649      	mov	r1, r9
 800939c:	414b      	adcs	r3, r1
 800939e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80093ac:	4659      	mov	r1, fp
 80093ae:	00cb      	lsls	r3, r1, #3
 80093b0:	4651      	mov	r1, sl
 80093b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093b6:	4651      	mov	r1, sl
 80093b8:	00ca      	lsls	r2, r1, #3
 80093ba:	4610      	mov	r0, r2
 80093bc:	4619      	mov	r1, r3
 80093be:	4603      	mov	r3, r0
 80093c0:	4642      	mov	r2, r8
 80093c2:	189b      	adds	r3, r3, r2
 80093c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80093c8:	464b      	mov	r3, r9
 80093ca:	460a      	mov	r2, r1
 80093cc:	eb42 0303 	adc.w	r3, r2, r3
 80093d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80093d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80093e0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80093e4:	f04f 0200 	mov.w	r2, #0
 80093e8:	f04f 0300 	mov.w	r3, #0
 80093ec:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80093f0:	4649      	mov	r1, r9
 80093f2:	008b      	lsls	r3, r1, #2
 80093f4:	4641      	mov	r1, r8
 80093f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80093fa:	4641      	mov	r1, r8
 80093fc:	008a      	lsls	r2, r1, #2
 80093fe:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8009402:	f7f6 ff0d 	bl	8000220 <__aeabi_uldivmod>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4b0f      	ldr	r3, [pc, #60]	; (8009448 <UART_SetConfig+0x7b0>)
 800940c:	fba3 1302 	umull	r1, r3, r3, r2
 8009410:	095b      	lsrs	r3, r3, #5
 8009412:	2164      	movs	r1, #100	; 0x64
 8009414:	fb01 f303 	mul.w	r3, r1, r3
 8009418:	1ad3      	subs	r3, r2, r3
 800941a:	011b      	lsls	r3, r3, #4
 800941c:	3332      	adds	r3, #50	; 0x32
 800941e:	4a0a      	ldr	r2, [pc, #40]	; (8009448 <UART_SetConfig+0x7b0>)
 8009420:	fba2 2303 	umull	r2, r3, r2, r3
 8009424:	095b      	lsrs	r3, r3, #5
 8009426:	f003 020f 	and.w	r2, r3, #15
 800942a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4422      	add	r2, r4
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	e116      	b.n	8009664 <UART_SetConfig+0x9cc>
 8009436:	bf00      	nop
 8009438:	40011000 	.word	0x40011000
 800943c:	40011400 	.word	0x40011400
 8009440:	40011800 	.word	0x40011800
 8009444:	40011c00 	.word	0x40011c00
 8009448:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 800944c:	f7fd fc5e 	bl	8006d0c <HAL_RCC_GetPCLK1Freq>
 8009450:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009454:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8009458:	2200      	movs	r2, #0
 800945a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800945e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8009462:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8009466:	4642      	mov	r2, r8
 8009468:	464b      	mov	r3, r9
 800946a:	1891      	adds	r1, r2, r2
 800946c:	6239      	str	r1, [r7, #32]
 800946e:	415b      	adcs	r3, r3
 8009470:	627b      	str	r3, [r7, #36]	; 0x24
 8009472:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009476:	4641      	mov	r1, r8
 8009478:	1854      	adds	r4, r2, r1
 800947a:	4649      	mov	r1, r9
 800947c:	eb43 0501 	adc.w	r5, r3, r1
 8009480:	f04f 0200 	mov.w	r2, #0
 8009484:	f04f 0300 	mov.w	r3, #0
 8009488:	00eb      	lsls	r3, r5, #3
 800948a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800948e:	00e2      	lsls	r2, r4, #3
 8009490:	4614      	mov	r4, r2
 8009492:	461d      	mov	r5, r3
 8009494:	4643      	mov	r3, r8
 8009496:	18e3      	adds	r3, r4, r3
 8009498:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800949c:	464b      	mov	r3, r9
 800949e:	eb45 0303 	adc.w	r3, r5, r3
 80094a2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80094a6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80094b2:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80094b6:	f04f 0200 	mov.w	r2, #0
 80094ba:	f04f 0300 	mov.w	r3, #0
 80094be:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80094c2:	4629      	mov	r1, r5
 80094c4:	008b      	lsls	r3, r1, #2
 80094c6:	4621      	mov	r1, r4
 80094c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094cc:	4621      	mov	r1, r4
 80094ce:	008a      	lsls	r2, r1, #2
 80094d0:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 80094d4:	f7f6 fea4 	bl	8000220 <__aeabi_uldivmod>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4b64      	ldr	r3, [pc, #400]	; (8009670 <UART_SetConfig+0x9d8>)
 80094de:	fba3 2302 	umull	r2, r3, r3, r2
 80094e2:	095b      	lsrs	r3, r3, #5
 80094e4:	011c      	lsls	r4, r3, #4
 80094e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80094ea:	2200      	movs	r2, #0
 80094ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094f0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80094f4:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80094f8:	4642      	mov	r2, r8
 80094fa:	464b      	mov	r3, r9
 80094fc:	1891      	adds	r1, r2, r2
 80094fe:	61b9      	str	r1, [r7, #24]
 8009500:	415b      	adcs	r3, r3
 8009502:	61fb      	str	r3, [r7, #28]
 8009504:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009508:	4641      	mov	r1, r8
 800950a:	1851      	adds	r1, r2, r1
 800950c:	6139      	str	r1, [r7, #16]
 800950e:	4649      	mov	r1, r9
 8009510:	414b      	adcs	r3, r1
 8009512:	617b      	str	r3, [r7, #20]
 8009514:	f04f 0200 	mov.w	r2, #0
 8009518:	f04f 0300 	mov.w	r3, #0
 800951c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009520:	4659      	mov	r1, fp
 8009522:	00cb      	lsls	r3, r1, #3
 8009524:	4651      	mov	r1, sl
 8009526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800952a:	4651      	mov	r1, sl
 800952c:	00ca      	lsls	r2, r1, #3
 800952e:	4610      	mov	r0, r2
 8009530:	4619      	mov	r1, r3
 8009532:	4603      	mov	r3, r0
 8009534:	4642      	mov	r2, r8
 8009536:	189b      	adds	r3, r3, r2
 8009538:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800953c:	464b      	mov	r3, r9
 800953e:	460a      	mov	r2, r1
 8009540:	eb42 0303 	adc.w	r3, r2, r3
 8009544:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009548:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009554:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8009558:	f04f 0200 	mov.w	r2, #0
 800955c:	f04f 0300 	mov.w	r3, #0
 8009560:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8009564:	4649      	mov	r1, r9
 8009566:	008b      	lsls	r3, r1, #2
 8009568:	4641      	mov	r1, r8
 800956a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800956e:	4641      	mov	r1, r8
 8009570:	008a      	lsls	r2, r1, #2
 8009572:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8009576:	f7f6 fe53 	bl	8000220 <__aeabi_uldivmod>
 800957a:	4602      	mov	r2, r0
 800957c:	460b      	mov	r3, r1
 800957e:	4b3c      	ldr	r3, [pc, #240]	; (8009670 <UART_SetConfig+0x9d8>)
 8009580:	fba3 1302 	umull	r1, r3, r3, r2
 8009584:	095b      	lsrs	r3, r3, #5
 8009586:	2164      	movs	r1, #100	; 0x64
 8009588:	fb01 f303 	mul.w	r3, r1, r3
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	3332      	adds	r3, #50	; 0x32
 8009592:	4a37      	ldr	r2, [pc, #220]	; (8009670 <UART_SetConfig+0x9d8>)
 8009594:	fba2 2303 	umull	r2, r3, r2, r3
 8009598:	095b      	lsrs	r3, r3, #5
 800959a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800959e:	441c      	add	r4, r3
 80095a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80095a4:	2200      	movs	r2, #0
 80095a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80095aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80095ae:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80095b2:	4642      	mov	r2, r8
 80095b4:	464b      	mov	r3, r9
 80095b6:	1891      	adds	r1, r2, r2
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	415b      	adcs	r3, r3
 80095bc:	60fb      	str	r3, [r7, #12]
 80095be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80095c2:	4641      	mov	r1, r8
 80095c4:	1851      	adds	r1, r2, r1
 80095c6:	6039      	str	r1, [r7, #0]
 80095c8:	4649      	mov	r1, r9
 80095ca:	414b      	adcs	r3, r1
 80095cc:	607b      	str	r3, [r7, #4]
 80095ce:	f04f 0200 	mov.w	r2, #0
 80095d2:	f04f 0300 	mov.w	r3, #0
 80095d6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80095da:	4659      	mov	r1, fp
 80095dc:	00cb      	lsls	r3, r1, #3
 80095de:	4651      	mov	r1, sl
 80095e0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095e4:	4651      	mov	r1, sl
 80095e6:	00ca      	lsls	r2, r1, #3
 80095e8:	4610      	mov	r0, r2
 80095ea:	4619      	mov	r1, r3
 80095ec:	4603      	mov	r3, r0
 80095ee:	4642      	mov	r2, r8
 80095f0:	189b      	adds	r3, r3, r2
 80095f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80095f6:	464b      	mov	r3, r9
 80095f8:	460a      	mov	r2, r1
 80095fa:	eb42 0303 	adc.w	r3, r2, r3
 80095fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009602:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	2200      	movs	r2, #0
 800960a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800960e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009612:	f04f 0200 	mov.w	r2, #0
 8009616:	f04f 0300 	mov.w	r3, #0
 800961a:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 800961e:	4649      	mov	r1, r9
 8009620:	008b      	lsls	r3, r1, #2
 8009622:	4641      	mov	r1, r8
 8009624:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009628:	4641      	mov	r1, r8
 800962a:	008a      	lsls	r2, r1, #2
 800962c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009630:	f7f6 fdf6 	bl	8000220 <__aeabi_uldivmod>
 8009634:	4602      	mov	r2, r0
 8009636:	460b      	mov	r3, r1
 8009638:	4b0d      	ldr	r3, [pc, #52]	; (8009670 <UART_SetConfig+0x9d8>)
 800963a:	fba3 1302 	umull	r1, r3, r3, r2
 800963e:	095b      	lsrs	r3, r3, #5
 8009640:	2164      	movs	r1, #100	; 0x64
 8009642:	fb01 f303 	mul.w	r3, r1, r3
 8009646:	1ad3      	subs	r3, r2, r3
 8009648:	011b      	lsls	r3, r3, #4
 800964a:	3332      	adds	r3, #50	; 0x32
 800964c:	4a08      	ldr	r2, [pc, #32]	; (8009670 <UART_SetConfig+0x9d8>)
 800964e:	fba2 2303 	umull	r2, r3, r2, r3
 8009652:	095b      	lsrs	r3, r3, #5
 8009654:	f003 020f 	and.w	r2, r3, #15
 8009658:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4422      	add	r2, r4
 8009660:	609a      	str	r2, [r3, #8]
}
 8009662:	e7ff      	b.n	8009664 <UART_SetConfig+0x9cc>
 8009664:	bf00      	nop
 8009666:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800966a:	46bd      	mov	sp, r7
 800966c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009670:	51eb851f 	.word	0x51eb851f

08009674 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8009674:	b480      	push	{r7}
 8009676:	b085      	sub	sp, #20
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800967e:	2300      	movs	r3, #0
 8009680:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8009682:	683b      	ldr	r3, [r7, #0]
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968c:	60fb      	str	r3, [r7, #12]
                     Init->WriteBurst
                     );
#else /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT,CPSIZE,  CBURSTRW, CCLKEN and WFDIS bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP      | \
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	4b2f      	ldr	r3, [pc, #188]	; (8009750 <FSMC_NORSRAM_Init+0xdc>)
 8009692:	4013      	ands	r3, r2
 8009694:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WAITCFG  | FSMC_BCR1_WREN      | \
                       FSMC_BCR1_WAITEN    | FSMC_BCR1_EXTMOD   | FSMC_BCR1_ASYNCWAIT | \
                       FSMC_BCR1_CPSIZE    | FSMC_BCR1_CBURSTRW | FSMC_BCR1_CCLKEN    | \
                       FSMC_BCR1_WFDIS));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800969e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 80096a4:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 80096aa:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 80096ac:	683b      	ldr	r3, [r7, #0]
 80096ae:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 80096b0:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	69db      	ldr	r3, [r3, #28]
                     Init->WaitSignalPolarity   |\
 80096b6:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80096bc:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80096be:	683b      	ldr	r3, [r7, #0]
 80096c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80096c2:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80096c8:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80096ce:	431a      	orrs	r2, r3
                     Init->WriteBurst           |\
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->AsynchronousWait     |\
 80096d4:	431a      	orrs	r2, r3
                     Init->ContinuousClock      |\
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                     Init->WriteBurst           |\
 80096da:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->ContinuousClock      |\
 80096e0:	431a      	orrs	r2, r3
                     Init->WriteFifo);
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                     Init->PageSize             |\
 80096e6:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80096e8:	68fa      	ldr	r2, [r7, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	60fb      	str	r3, [r7, #12]
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	2b08      	cmp	r3, #8
 80096f4:	d103      	bne.n	80096fe <FSMC_NORSRAM_Init+0x8a>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096fc:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80096fe:	683b      	ldr	r3, [r7, #0]
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	68f9      	ldr	r1, [r7, #12]
 8009706:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if((Init->ContinuousClock == FSMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FSMC_NORSRAM_BANK1))
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800970e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009712:	d10a      	bne.n	800972a <FSMC_NORSRAM_Init+0xb6>
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d006      	beq.n	800972a <FSMC_NORSRAM_Init+0xb6>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->ContinuousClock);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009724:	431a      	orrs	r2, r3
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	601a      	str	r2, [r3, #0]
  }

  if(Init->NSBank != FSMC_NORSRAM_BANK1)
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d006      	beq.n	8009740 <FSMC_NORSRAM_Init+0xcc>
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800973a:	431a      	orrs	r2, r3
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8009740:	2300      	movs	r3, #0
}
 8009742:	4618      	mov	r0, r3
 8009744:	3714      	adds	r7, #20
 8009746:	46bd      	mov	sp, r7
 8009748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974c:	4770      	bx	lr
 800974e:	bf00      	nop
 8009750:	ffc00480 	.word	0xffc00480

08009754 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009754:	b480      	push	{r7}
 8009756:	b087      	sub	sp, #28
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8009760:	2300      	movs	r3, #0
 8009762:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	1c5a      	adds	r2, r3, #1
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800976e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8009776:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	685b      	ldr	r3, [r3, #4]
 8009780:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009782:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8009784:	68bb      	ldr	r3, [r7, #8]
 8009786:	689b      	ldr	r3, [r3, #8]
 8009788:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800978a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800978c:	68bb      	ldr	r3, [r7, #8]
 800978e:	68db      	ldr	r3, [r3, #12]
 8009790:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8009792:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	3b01      	subs	r3, #1
 800979a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800979c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	695b      	ldr	r3, [r3, #20]
 80097a2:	3b02      	subs	r3, #2
 80097a4:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 80097a6:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80097ac:	4313      	orrs	r3, r2
 80097ae:	697a      	ldr	r2, [r7, #20]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	1c5a      	adds	r2, r3, #1
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	6979      	ldr	r1, [r7, #20]
 80097bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if(HAL_IS_BIT_SET(Device->BTCR[FSMC_NORSRAM_BANK1], FSMC_BCR1_CCLKEN))
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097cc:	d10e      	bne.n	80097ec <FSMC_NORSRAM_Timing_Init+0x98>
  {
    tmpr = (uint32_t)(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] & ~(0x0FU << 20U)); 
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80097d6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	691b      	ldr	r3, [r3, #16]
 80097dc:	3b01      	subs	r3, #1
 80097de:	051b      	lsls	r3, r3, #20
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	4313      	orrs	r3, r2
 80097e4:	617b      	str	r3, [r7, #20]
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	697a      	ldr	r2, [r7, #20]
 80097ea:	605a      	str	r2, [r3, #4]
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80097ec:	2300      	movs	r3, #0
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
	...

080097fc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	60f8      	str	r0, [r7, #12]
 8009804:	60b9      	str	r1, [r7, #8]
 8009806:	607a      	str	r2, [r7, #4]
 8009808:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800980a:	2300      	movs	r3, #0
 800980c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800980e:	683b      	ldr	r3, [r7, #0]
 8009810:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009814:	d122      	bne.n	800985c <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800981e:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8009820:	697a      	ldr	r2, [r7, #20]
 8009822:	4b15      	ldr	r3, [pc, #84]	; (8009878 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8009824:	4013      	ands	r3, r2
 8009826:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8009832:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	689b      	ldr	r3, [r3, #8]
 8009838:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 800983a:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	68db      	ldr	r3, [r3, #12]
 8009840:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8009842:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8009848:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	4313      	orrs	r3, r2
 800984e:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	6979      	ldr	r1, [r7, #20]
 8009856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800985a:	e005      	b.n	8009868 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	687a      	ldr	r2, [r7, #4]
 8009860:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	371c      	adds	r7, #28
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	cff00000 	.word	0xcff00000

0800987c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800987c:	b084      	sub	sp, #16
 800987e:	b480      	push	{r7}
 8009880:	b085      	sub	sp, #20
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	f107 001c 	add.w	r0, r7, #28
 800988a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800988e:	2300      	movs	r3, #0
 8009890:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009892:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009894:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009896:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800989a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800989c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800989e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80098a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80098a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80098a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	4313      	orrs	r3, r2
 80098ac:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80098b6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80098ba:	68fa      	ldr	r2, [r7, #12]
 80098bc:	431a      	orrs	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3714      	adds	r7, #20
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	b004      	add	sp, #16
 80098d0:	4770      	bx	lr

080098d2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80098d2:	b480      	push	{r7}
 80098d4:	b083      	sub	sp, #12
 80098d6:	af00      	add	r7, sp, #0
 80098d8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009900:	2300      	movs	r3, #0
}
 8009902:	4618      	mov	r0, r3
 8009904:	370c      	adds	r7, #12
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2203      	movs	r2, #3
 800991a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800991c:	2002      	movs	r0, #2
 800991e:	f7f9 fc41 	bl	80031a4 <HAL_Delay>
  
  return HAL_OK;
 8009922:	2300      	movs	r3, #0
}
 8009924:	4618      	mov	r0, r3
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}

0800992c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800992c:	b480      	push	{r7}
 800992e:	b083      	sub	sp, #12
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f003 0303 	and.w	r3, r3, #3
}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr

08009948 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009948:	b480      	push	{r7}
 800994a:	b085      	sub	sp, #20
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009966:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800996c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009972:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	68db      	ldr	r3, [r3, #12]
 800997e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009982:	f023 030f 	bic.w	r3, r3, #15
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	431a      	orrs	r2, r3
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800998e:	2300      	movs	r3, #0
}
 8009990:	4618      	mov	r0, r3
 8009992:	3714      	adds	r7, #20
 8009994:	46bd      	mov	sp, r7
 8009996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800999a:	4770      	bx	lr

0800999c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800999c:	b480      	push	{r7}
 800999e:	b083      	sub	sp, #12
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	b2db      	uxtb	r3, r3
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	370c      	adds	r7, #12
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr

080099b6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80099b6:	b480      	push	{r7}
 80099b8:	b085      	sub	sp, #20
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
 80099be:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3314      	adds	r3, #20
 80099c4:	461a      	mov	r2, r3
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	4413      	add	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	681b      	ldr	r3, [r3, #0]
}  
 80099d0:	4618      	mov	r0, r3
 80099d2:	3714      	adds	r7, #20
 80099d4:	46bd      	mov	sp, r7
 80099d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099da:	4770      	bx	lr

080099dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b088      	sub	sp, #32
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80099e8:	230c      	movs	r3, #12
 80099ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099ec:	2340      	movs	r3, #64	; 0x40
 80099ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099f0:	2300      	movs	r3, #0
 80099f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099fa:	f107 0308 	add.w	r3, r7, #8
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff ffa1 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009a06:	4a05      	ldr	r2, [pc, #20]	; (8009a1c <SDMMC_CmdStopTransfer+0x40>)
 8009a08:	210c      	movs	r1, #12
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f956 	bl	8009cbc <SDMMC_GetCmdResp1>
 8009a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a12:	69fb      	ldr	r3, [r7, #28]
}
 8009a14:	4618      	mov	r0, r3
 8009a16:	3720      	adds	r7, #32
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}
 8009a1c:	05f5e100 	.word	0x05f5e100

08009a20 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b08a      	sub	sp, #40	; 0x28
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009a30:	2307      	movs	r3, #7
 8009a32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009a34:	2340      	movs	r3, #64	; 0x40
 8009a36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a40:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a42:	f107 0310 	add.w	r3, r7, #16
 8009a46:	4619      	mov	r1, r3
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f7ff ff7d 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a52:	2107      	movs	r1, #7
 8009a54:	68f8      	ldr	r0, [r7, #12]
 8009a56:	f000 f931 	bl	8009cbc <SDMMC_GetCmdResp1>
 8009a5a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009a5e:	4618      	mov	r0, r3
 8009a60:	3728      	adds	r7, #40	; 0x28
 8009a62:	46bd      	mov	sp, r7
 8009a64:	bd80      	pop	{r7, pc}

08009a66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009a66:	b580      	push	{r7, lr}
 8009a68:	b088      	sub	sp, #32
 8009a6a:	af00      	add	r7, sp, #0
 8009a6c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009a76:	2300      	movs	r3, #0
 8009a78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a82:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a84:	f107 0308 	add.w	r3, r7, #8
 8009a88:	4619      	mov	r1, r3
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7ff ff5c 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f000 f8eb 	bl	8009c6c <SDMMC_GetCmdError>
 8009a96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a98:	69fb      	ldr	r3, [r7, #28]
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3720      	adds	r7, #32
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b088      	sub	sp, #32
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009aaa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009aae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009ab0:	2308      	movs	r3, #8
 8009ab2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ab4:	2340      	movs	r3, #64	; 0x40
 8009ab6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ac0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ac2:	f107 0308 	add.w	r3, r7, #8
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f7ff ff3d 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fad4 	bl	800a07c <SDMMC_GetCmdResp7>
 8009ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad6:	69fb      	ldr	r3, [r7, #28]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3720      	adds	r7, #32
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009aee:	2337      	movs	r3, #55	; 0x37
 8009af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009af2:	2340      	movs	r3, #64	; 0x40
 8009af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009afe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7ff ff1e 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b10:	2137      	movs	r1, #55	; 0x37
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f8d2 	bl	8009cbc <SDMMC_GetCmdResp1>
 8009b18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3720      	adds	r7, #32
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009b34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009b38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009b3a:	2329      	movs	r3, #41	; 0x29
 8009b3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009b3e:	2340      	movs	r3, #64	; 0x40
 8009b40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b42:	2300      	movs	r3, #0
 8009b44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b4c:	f107 0308 	add.w	r3, r7, #8
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f7ff fef8 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f9e1 	bl	8009f20 <SDMMC_GetCmdResp3>
 8009b5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b60:	69fb      	ldr	r3, [r7, #28]
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3720      	adds	r7, #32
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b088      	sub	sp, #32
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009b76:	2302      	movs	r3, #2
 8009b78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009b7a:	23c0      	movs	r3, #192	; 0xc0
 8009b7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009b82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b88:	f107 0308 	add.w	r3, r7, #8
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7ff feda 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f000 f97d 	bl	8009e94 <SDMMC_GetCmdResp2>
 8009b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b9c:	69fb      	ldr	r3, [r7, #28]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3720      	adds	r7, #32
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b088      	sub	sp, #32
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009bb4:	2309      	movs	r3, #9
 8009bb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009bb8:	23c0      	movs	r3, #192	; 0xc0
 8009bba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009bc4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009bc6:	f107 0308 	add.w	r3, r7, #8
 8009bca:	4619      	mov	r1, r3
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f7ff febb 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f95e 	bl	8009e94 <SDMMC_GetCmdResp2>
 8009bd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bda:	69fb      	ldr	r3, [r7, #28]
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3720      	adds	r7, #32
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b088      	sub	sp, #32
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009bf6:	2340      	movs	r3, #64	; 0x40
 8009bf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009bfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c04:	f107 0308 	add.w	r3, r7, #8
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f7ff fe9c 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009c10:	683a      	ldr	r2, [r7, #0]
 8009c12:	2103      	movs	r1, #3
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 f9bd 	bl	8009f94 <SDMMC_GetCmdResp6>
 8009c1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c1c:	69fb      	ldr	r3, [r7, #28]
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3720      	adds	r7, #32
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b088      	sub	sp, #32
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	6078      	str	r0, [r7, #4]
 8009c2e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009c34:	230d      	movs	r3, #13
 8009c36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c38:	2340      	movs	r3, #64	; 0x40
 8009c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c44:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c46:	f107 0308 	add.w	r3, r7, #8
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f7ff fe7b 	bl	8009948 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c56:	210d      	movs	r1, #13
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f000 f82f 	bl	8009cbc <SDMMC_GetCmdResp1>
 8009c5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c60:	69fb      	ldr	r3, [r7, #28]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3720      	adds	r7, #32
 8009c66:	46bd      	mov	sp, r7
 8009c68:	bd80      	pop	{r7, pc}
	...

08009c6c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009c6c:	b490      	push	{r4, r7}
 8009c6e:	b082      	sub	sp, #8
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009c74:	4b0f      	ldr	r3, [pc, #60]	; (8009cb4 <SDMMC_GetCmdError+0x48>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a0f      	ldr	r2, [pc, #60]	; (8009cb8 <SDMMC_GetCmdError+0x4c>)
 8009c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7e:	0a5b      	lsrs	r3, r3, #9
 8009c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c84:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009c88:	4623      	mov	r3, r4
 8009c8a:	1e5c      	subs	r4, r3, #1
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d102      	bne.n	8009c96 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009c90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009c94:	e009      	b.n	8009caa <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d0f2      	beq.n	8009c88 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	22c5      	movs	r2, #197	; 0xc5
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3708      	adds	r7, #8
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bc90      	pop	{r4, r7}
 8009cb2:	4770      	bx	lr
 8009cb4:	20000000 	.word	0x20000000
 8009cb8:	10624dd3 	.word	0x10624dd3

08009cbc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009cbc:	b590      	push	{r4, r7, lr}
 8009cbe:	b087      	sub	sp, #28
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	460b      	mov	r3, r1
 8009cc6:	607a      	str	r2, [r7, #4]
 8009cc8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009cca:	4b6f      	ldr	r3, [pc, #444]	; (8009e88 <SDMMC_GetCmdResp1+0x1cc>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a6f      	ldr	r2, [pc, #444]	; (8009e8c <SDMMC_GetCmdResp1+0x1d0>)
 8009cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd4:	0a5b      	lsrs	r3, r3, #9
 8009cd6:	687a      	ldr	r2, [r7, #4]
 8009cd8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009cdc:	4623      	mov	r3, r4
 8009cde:	1e5c      	subs	r4, r3, #1
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d102      	bne.n	8009cea <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ce8:	e0c9      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cee:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d0f0      	beq.n	8009cdc <SDMMC_GetCmdResp1+0x20>
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d1eb      	bne.n	8009cdc <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d08:	f003 0304 	and.w	r3, r3, #4
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d004      	beq.n	8009d1a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2204      	movs	r2, #4
 8009d14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d16:	2304      	movs	r3, #4
 8009d18:	e0b1      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d1e:	f003 0301 	and.w	r3, r3, #1
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d004      	beq.n	8009d30 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d2c:	2301      	movs	r3, #1
 8009d2e:	e0a6      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	22c5      	movs	r2, #197	; 0xc5
 8009d34:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009d36:	68f8      	ldr	r0, [r7, #12]
 8009d38:	f7ff fe30 	bl	800999c <SDIO_GetCommandResponse>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	7afb      	ldrb	r3, [r7, #11]
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d001      	beq.n	8009d4a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d46:	2301      	movs	r3, #1
 8009d48:	e099      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	68f8      	ldr	r0, [r7, #12]
 8009d4e:	f7ff fe32 	bl	80099b6 <SDIO_GetResponse>
 8009d52:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009d54:	693a      	ldr	r2, [r7, #16]
 8009d56:	4b4e      	ldr	r3, [pc, #312]	; (8009e90 <SDMMC_GetCmdResp1+0x1d4>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d101      	bne.n	8009d62 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	e08d      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	da02      	bge.n	8009d6e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009d68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d6c:	e087      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d001      	beq.n	8009d7c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009d78:	2340      	movs	r3, #64	; 0x40
 8009d7a:	e080      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009d7c:	693b      	ldr	r3, [r7, #16]
 8009d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d001      	beq.n	8009d8a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009d86:	2380      	movs	r3, #128	; 0x80
 8009d88:	e079      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d98:	e071      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009d9a:	693b      	ldr	r3, [r7, #16]
 8009d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d002      	beq.n	8009daa <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009da8:	e069      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009db8:	e061      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d002      	beq.n	8009dca <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009dc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009dc8:	e059      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d002      	beq.n	8009dda <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009dd8:	e051      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d002      	beq.n	8009dea <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009de8:	e049      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d002      	beq.n	8009dfa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009df8:	e041      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d002      	beq.n	8009e0a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8009e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e08:	e039      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d002      	beq.n	8009e1a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009e18:	e031      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009e1a:	693b      	ldr	r3, [r7, #16]
 8009e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d002      	beq.n	8009e2a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009e24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009e28:	e029      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009e2a:	693b      	ldr	r3, [r7, #16]
 8009e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d002      	beq.n	8009e3a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009e34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009e38:	e021      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009e44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009e48:	e019      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009e4a:	693b      	ldr	r3, [r7, #16]
 8009e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d002      	beq.n	8009e5a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009e54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009e58:	e011      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009e64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009e68:	e009      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	f003 0308 	and.w	r3, r3, #8
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009e74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009e78:	e001      	b.n	8009e7e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd90      	pop	{r4, r7, pc}
 8009e86:	bf00      	nop
 8009e88:	20000000 	.word	0x20000000
 8009e8c:	10624dd3 	.word	0x10624dd3
 8009e90:	fdffe008 	.word	0xfdffe008

08009e94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009e94:	b490      	push	{r4, r7}
 8009e96:	b084      	sub	sp, #16
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e9c:	4b1e      	ldr	r3, [pc, #120]	; (8009f18 <SDMMC_GetCmdResp2+0x84>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a1e      	ldr	r2, [pc, #120]	; (8009f1c <SDMMC_GetCmdResp2+0x88>)
 8009ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea6:	0a5b      	lsrs	r3, r3, #9
 8009ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009eac:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009eb0:	4623      	mov	r3, r4
 8009eb2:	1e5c      	subs	r4, r3, #1
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d102      	bne.n	8009ebe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009eb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ebc:	e026      	b.n	8009f0c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ec2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d0f0      	beq.n	8009eb0 <SDMMC_GetCmdResp2+0x1c>
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1eb      	bne.n	8009eb0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009edc:	f003 0304 	and.w	r3, r3, #4
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d004      	beq.n	8009eee <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2204      	movs	r2, #4
 8009ee8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009eea:	2304      	movs	r3, #4
 8009eec:	e00e      	b.n	8009f0c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d004      	beq.n	8009f04 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2201      	movs	r2, #1
 8009efe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e003      	b.n	8009f0c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	22c5      	movs	r2, #197	; 0xc5
 8009f08:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3710      	adds	r7, #16
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bc90      	pop	{r4, r7}
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	20000000 	.word	0x20000000
 8009f1c:	10624dd3 	.word	0x10624dd3

08009f20 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009f20:	b490      	push	{r4, r7}
 8009f22:	b084      	sub	sp, #16
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f28:	4b18      	ldr	r3, [pc, #96]	; (8009f8c <SDMMC_GetCmdResp3+0x6c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	4a18      	ldr	r2, [pc, #96]	; (8009f90 <SDMMC_GetCmdResp3+0x70>)
 8009f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f32:	0a5b      	lsrs	r3, r3, #9
 8009f34:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009f3c:	4623      	mov	r3, r4
 8009f3e:	1e5c      	subs	r4, r3, #1
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d102      	bne.n	8009f4a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f48:	e01b      	b.n	8009f82 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f4e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d0f0      	beq.n	8009f3c <SDMMC_GetCmdResp3+0x1c>
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d1eb      	bne.n	8009f3c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f68:	f003 0304 	and.w	r3, r3, #4
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d004      	beq.n	8009f7a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2204      	movs	r2, #4
 8009f74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f76:	2304      	movs	r3, #4
 8009f78:	e003      	b.n	8009f82 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	22c5      	movs	r2, #197	; 0xc5
 8009f7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f80:	2300      	movs	r3, #0
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3710      	adds	r7, #16
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bc90      	pop	{r4, r7}
 8009f8a:	4770      	bx	lr
 8009f8c:	20000000 	.word	0x20000000
 8009f90:	10624dd3 	.word	0x10624dd3

08009f94 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009f94:	b590      	push	{r4, r7, lr}
 8009f96:	b087      	sub	sp, #28
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	460b      	mov	r3, r1
 8009f9e:	607a      	str	r2, [r7, #4]
 8009fa0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009fa2:	4b34      	ldr	r3, [pc, #208]	; (800a074 <SDMMC_GetCmdResp6+0xe0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	4a34      	ldr	r2, [pc, #208]	; (800a078 <SDMMC_GetCmdResp6+0xe4>)
 8009fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8009fac:	0a5b      	lsrs	r3, r3, #9
 8009fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8009fb6:	4623      	mov	r3, r4
 8009fb8:	1e5c      	subs	r4, r3, #1
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d102      	bne.n	8009fc4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fc2:	e052      	b.n	800a06a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d0f0      	beq.n	8009fb6 <SDMMC_GetCmdResp6+0x22>
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d1eb      	bne.n	8009fb6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fe2:	f003 0304 	and.w	r3, r3, #4
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d004      	beq.n	8009ff4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2204      	movs	r2, #4
 8009fee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009ff0:	2304      	movs	r3, #4
 8009ff2:	e03a      	b.n	800a06a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ff8:	f003 0301 	and.w	r3, r3, #1
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d004      	beq.n	800a00a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2201      	movs	r2, #1
 800a004:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a006:	2301      	movs	r3, #1
 800a008:	e02f      	b.n	800a06a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a00a:	68f8      	ldr	r0, [r7, #12]
 800a00c:	f7ff fcc6 	bl	800999c <SDIO_GetCommandResponse>
 800a010:	4603      	mov	r3, r0
 800a012:	461a      	mov	r2, r3
 800a014:	7afb      	ldrb	r3, [r7, #11]
 800a016:	4293      	cmp	r3, r2
 800a018:	d001      	beq.n	800a01e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a01a:	2301      	movs	r3, #1
 800a01c:	e025      	b.n	800a06a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	22c5      	movs	r2, #197	; 0xc5
 800a022:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a024:	2100      	movs	r1, #0
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff fcc5 	bl	80099b6 <SDIO_GetResponse>
 800a02c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a034:	2b00      	cmp	r3, #0
 800a036:	d106      	bne.n	800a046 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	0c1b      	lsrs	r3, r3, #16
 800a03c:	b29a      	uxth	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a042:	2300      	movs	r3, #0
 800a044:	e011      	b.n	800a06a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d002      	beq.n	800a056 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a054:	e009      	b.n	800a06a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d002      	beq.n	800a066 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a064:	e001      	b.n	800a06a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	371c      	adds	r7, #28
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd90      	pop	{r4, r7, pc}
 800a072:	bf00      	nop
 800a074:	20000000 	.word	0x20000000
 800a078:	10624dd3 	.word	0x10624dd3

0800a07c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a07c:	b490      	push	{r4, r7}
 800a07e:	b084      	sub	sp, #16
 800a080:	af00      	add	r7, sp, #0
 800a082:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a084:	4b21      	ldr	r3, [pc, #132]	; (800a10c <SDMMC_GetCmdResp7+0x90>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a21      	ldr	r2, [pc, #132]	; (800a110 <SDMMC_GetCmdResp7+0x94>)
 800a08a:	fba2 2303 	umull	r2, r3, r2, r3
 800a08e:	0a5b      	lsrs	r3, r3, #9
 800a090:	f241 3288 	movw	r2, #5000	; 0x1388
 800a094:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800a098:	4623      	mov	r3, r4
 800a09a:	1e5c      	subs	r4, r3, #1
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d102      	bne.n	800a0a6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0a4:	e02c      	b.n	800a100 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0aa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d0f0      	beq.n	800a098 <SDMMC_GetCmdResp7+0x1c>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d1eb      	bne.n	800a098 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0c4:	f003 0304 	and.w	r3, r3, #4
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d004      	beq.n	800a0d6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2204      	movs	r2, #4
 800a0d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a0d2:	2304      	movs	r3, #4
 800a0d4:	e014      	b.n	800a100 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0da:	f003 0301 	and.w	r3, r3, #1
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d004      	beq.n	800a0ec <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2201      	movs	r2, #1
 800a0e6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0e8:	2301      	movs	r3, #1
 800a0ea:	e009      	b.n	800a100 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d002      	beq.n	800a0fe <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2240      	movs	r2, #64	; 0x40
 800a0fc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a0fe:	2300      	movs	r3, #0
  
}
 800a100:	4618      	mov	r0, r3
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bc90      	pop	{r4, r7}
 800a108:	4770      	bx	lr
 800a10a:	bf00      	nop
 800a10c:	20000000 	.word	0x20000000
 800a110:	10624dd3 	.word	0x10624dd3

0800a114 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a114:	b084      	sub	sp, #16
 800a116:	b580      	push	{r7, lr}
 800a118:	b084      	sub	sp, #16
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
 800a11e:	f107 001c 	add.w	r0, r7, #28
 800a122:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d122      	bne.n	800a172 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a130:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	68db      	ldr	r3, [r3, #12]
 800a14c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a156:	2b01      	cmp	r3, #1
 800a158:	d105      	bne.n	800a166 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 f94a 	bl	800a400 <USB_CoreReset>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73fb      	strb	r3, [r7, #15]
 800a170:	e01a      	b.n	800a1a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	68db      	ldr	r3, [r3, #12]
 800a176:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	f000 f93e 	bl	800a400 <USB_CoreReset>
 800a184:	4603      	mov	r3, r0
 800a186:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d106      	bne.n	800a19c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a192:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	639a      	str	r2, [r3, #56]	; 0x38
 800a19a:	e005      	b.n	800a1a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d10b      	bne.n	800a1c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	689b      	ldr	r3, [r3, #8]
 800a1b2:	f043 0206 	orr.w	r2, r3, #6
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f043 0220 	orr.w	r2, r3, #32
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1d2:	b004      	add	sp, #16
 800a1d4:	4770      	bx	lr

0800a1d6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b083      	sub	sp, #12
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	689b      	ldr	r3, [r3, #8]
 800a1e2:	f043 0201 	orr.w	r2, r3, #1
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a1ea:	2300      	movs	r3, #0
}
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	689b      	ldr	r3, [r3, #8]
 800a204:	f023 0201 	bic.w	r2, r3, #1
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	370c      	adds	r7, #12
 800a212:	46bd      	mov	sp, r7
 800a214:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a218:	4770      	bx	lr

0800a21a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a21a:	b580      	push	{r7, lr}
 800a21c:	b082      	sub	sp, #8
 800a21e:	af00      	add	r7, sp, #0
 800a220:	6078      	str	r0, [r7, #4]
 800a222:	460b      	mov	r3, r1
 800a224:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	68db      	ldr	r3, [r3, #12]
 800a22a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a232:	78fb      	ldrb	r3, [r7, #3]
 800a234:	2b01      	cmp	r3, #1
 800a236:	d106      	bne.n	800a246 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68db      	ldr	r3, [r3, #12]
 800a23c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	60da      	str	r2, [r3, #12]
 800a244:	e00b      	b.n	800a25e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800a246:	78fb      	ldrb	r3, [r7, #3]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d106      	bne.n	800a25a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	68db      	ldr	r3, [r3, #12]
 800a250:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	60da      	str	r2, [r3, #12]
 800a258:	e001      	b.n	800a25e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800a25a:	2301      	movs	r3, #1
 800a25c:	e003      	b.n	800a266 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800a25e:	2032      	movs	r0, #50	; 0x32
 800a260:	f7f8 ffa0 	bl	80031a4 <HAL_Delay>

  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
	...

0800a270 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a270:	b480      	push	{r7}
 800a272:	b085      	sub	sp, #20
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
 800a278:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800a27a:	2300      	movs	r3, #0
 800a27c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	019b      	lsls	r3, r3, #6
 800a282:	f043 0220 	orr.w	r2, r3, #32
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	3301      	adds	r3, #1
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	4a09      	ldr	r2, [pc, #36]	; (800a2b8 <USB_FlushTxFifo+0x48>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d901      	bls.n	800a29c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800a298:	2303      	movs	r3, #3
 800a29a:	e006      	b.n	800a2aa <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	691b      	ldr	r3, [r3, #16]
 800a2a0:	f003 0320 	and.w	r3, r3, #32
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	d0f0      	beq.n	800a28a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800a2a8:	2300      	movs	r3, #0
}
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	3714      	adds	r7, #20
 800a2ae:	46bd      	mov	sp, r7
 800a2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b4:	4770      	bx	lr
 800a2b6:	bf00      	nop
 800a2b8:	00030d40 	.word	0x00030d40

0800a2bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b085      	sub	sp, #20
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2210      	movs	r2, #16
 800a2cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	60fb      	str	r3, [r7, #12]
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4a09      	ldr	r2, [pc, #36]	; (800a2fc <USB_FlushRxFifo+0x40>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d901      	bls.n	800a2e0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800a2dc:	2303      	movs	r3, #3
 800a2de:	e006      	b.n	800a2ee <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	f003 0310 	and.w	r3, r3, #16
 800a2e8:	2b10      	cmp	r3, #16
 800a2ea:	d0f0      	beq.n	800a2ce <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800a2ec:	2300      	movs	r3, #0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	00030d40 	.word	0x00030d40

0800a300 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a300:	b480      	push	{r7}
 800a302:	b089      	sub	sp, #36	; 0x24
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	4611      	mov	r1, r2
 800a30c:	461a      	mov	r2, r3
 800a30e:	460b      	mov	r3, r1
 800a310:	71fb      	strb	r3, [r7, #7]
 800a312:	4613      	mov	r3, r2
 800a314:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800a31a:	68bb      	ldr	r3, [r7, #8]
 800a31c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800a31e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a322:	2b00      	cmp	r3, #0
 800a324:	d11a      	bne.n	800a35c <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a326:	88bb      	ldrh	r3, [r7, #4]
 800a328:	3303      	adds	r3, #3
 800a32a:	089b      	lsrs	r3, r3, #2
 800a32c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a32e:	2300      	movs	r3, #0
 800a330:	61bb      	str	r3, [r7, #24]
 800a332:	e00f      	b.n	800a354 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a334:	79fb      	ldrb	r3, [r7, #7]
 800a336:	031a      	lsls	r2, r3, #12
 800a338:	697b      	ldr	r3, [r7, #20]
 800a33a:	4413      	add	r3, r2
 800a33c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a340:	461a      	mov	r2, r3
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	3304      	adds	r3, #4
 800a34c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a34e:	69bb      	ldr	r3, [r7, #24]
 800a350:	3301      	adds	r3, #1
 800a352:	61bb      	str	r3, [r7, #24]
 800a354:	69ba      	ldr	r2, [r7, #24]
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d3eb      	bcc.n	800a334 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a35c:	2300      	movs	r3, #0
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3724      	adds	r7, #36	; 0x24
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b089      	sub	sp, #36	; 0x24
 800a36e:	af00      	add	r7, sp, #0
 800a370:	60f8      	str	r0, [r7, #12]
 800a372:	60b9      	str	r1, [r7, #8]
 800a374:	4613      	mov	r3, r2
 800a376:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800a380:	88fb      	ldrh	r3, [r7, #6]
 800a382:	3303      	adds	r3, #3
 800a384:	089b      	lsrs	r3, r3, #2
 800a386:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800a388:	2300      	movs	r3, #0
 800a38a:	61bb      	str	r3, [r7, #24]
 800a38c:	e00b      	b.n	800a3a6 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	601a      	str	r2, [r3, #0]
    pDest++;
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	3304      	adds	r3, #4
 800a39e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800a3a0:	69bb      	ldr	r3, [r7, #24]
 800a3a2:	3301      	adds	r3, #1
 800a3a4:	61bb      	str	r3, [r7, #24]
 800a3a6:	69ba      	ldr	r2, [r7, #24]
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d3ef      	bcc.n	800a38e <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800a3ae:	69fb      	ldr	r3, [r7, #28]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3724      	adds	r7, #36	; 0x24
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b085      	sub	sp, #20
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	68fa      	ldr	r2, [r7, #12]
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3714      	adds	r7, #20
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr

0800a3e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a3e2:	b480      	push	{r7}
 800a3e4:	b083      	sub	sp, #12
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	695b      	ldr	r3, [r3, #20]
 800a3ee:	f003 0301 	and.w	r3, r3, #1
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	370c      	adds	r7, #12
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
	...

0800a400 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	3301      	adds	r3, #1
 800a410:	60fb      	str	r3, [r7, #12]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	4a13      	ldr	r2, [pc, #76]	; (800a464 <USB_CoreReset+0x64>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d901      	bls.n	800a41e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a41a:	2303      	movs	r3, #3
 800a41c:	e01b      	b.n	800a456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	daf2      	bge.n	800a40c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a426:	2300      	movs	r3, #0
 800a428:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	691b      	ldr	r3, [r3, #16]
 800a42e:	f043 0201 	orr.w	r2, r3, #1
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	3301      	adds	r3, #1
 800a43a:	60fb      	str	r3, [r7, #12]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	4a09      	ldr	r2, [pc, #36]	; (800a464 <USB_CoreReset+0x64>)
 800a440:	4293      	cmp	r3, r2
 800a442:	d901      	bls.n	800a448 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a444:	2303      	movs	r3, #3
 800a446:	e006      	b.n	800a456 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	691b      	ldr	r3, [r3, #16]
 800a44c:	f003 0301 	and.w	r3, r3, #1
 800a450:	2b01      	cmp	r3, #1
 800a452:	d0f0      	beq.n	800a436 <USB_CoreReset+0x36>

  return HAL_OK;
 800a454:	2300      	movs	r3, #0
}
 800a456:	4618      	mov	r0, r3
 800a458:	3714      	adds	r7, #20
 800a45a:	46bd      	mov	sp, r7
 800a45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a460:	4770      	bx	lr
 800a462:	bf00      	nop
 800a464:	00030d40 	.word	0x00030d40

0800a468 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a468:	b084      	sub	sp, #16
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	f107 001c 	add.w	r0, r7, #28
 800a476:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a47e:	68bb      	ldr	r3, [r7, #8]
 800a480:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a484:	461a      	mov	r2, r3
 800a486:	2300      	movs	r3, #0
 800a488:	6013      	str	r3, [r2, #0]

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable HW VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d018      	beq.n	800a4e0 <USB_HostInit+0x78>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800a4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d10a      	bne.n	800a4ca <USB_HostInit+0x62>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	68ba      	ldr	r2, [r7, #8]
 800a4be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a4c2:	f043 0304 	orr.w	r3, r3, #4
 800a4c6:	6013      	str	r3, [r2, #0]
 800a4c8:	e014      	b.n	800a4f4 <USB_HostInit+0x8c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a4d8:	f023 0304 	bic.w	r3, r3, #4
 800a4dc:	6013      	str	r3, [r2, #0]
 800a4de:	e009      	b.n	800a4f4 <USB_HostInit+0x8c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	68ba      	ldr	r2, [r7, #8]
 800a4ea:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a4ee:	f023 0304 	bic.w	r3, r3, #4
 800a4f2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800a4f4:	2110      	movs	r1, #16
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff feba 	bl	800a270 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800a4fc:	6878      	ldr	r0, [r7, #4]
 800a4fe:	f7ff fedd 	bl	800a2bc <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800a502:	2300      	movs	r3, #0
 800a504:	60fb      	str	r3, [r7, #12]
 800a506:	e015      	b.n	800a534 <USB_HostInit+0xcc>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	68bb      	ldr	r3, [r7, #8]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a514:	461a      	mov	r2, r3
 800a516:	f04f 33ff 	mov.w	r3, #4294967295
 800a51a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	015a      	lsls	r2, r3, #5
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	4413      	add	r3, r2
 800a524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a528:	461a      	mov	r2, r3
 800a52a:	2300      	movs	r3, #0
 800a52c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	3301      	adds	r3, #1
 800a532:	60fb      	str	r3, [r7, #12]
 800a534:	6a3b      	ldr	r3, [r7, #32]
 800a536:	68fa      	ldr	r2, [r7, #12]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d3e5      	bcc.n	800a508 <USB_HostInit+0xa0>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800a53c:	2101      	movs	r1, #1
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f000 f8ac 	bl	800a69c <USB_DriveVbus>

  HAL_Delay(200U);
 800a544:	20c8      	movs	r0, #200	; 0xc8
 800a546:	f7f8 fe2d 	bl	80031a4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	2200      	movs	r2, #0
 800a54e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f04f 32ff 	mov.w	r2, #4294967295
 800a556:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a55c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00b      	beq.n	800a57c <USB_HostInit+0x114>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a56a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	4a14      	ldr	r2, [pc, #80]	; (800a5c0 <USB_HostInit+0x158>)
 800a570:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4a13      	ldr	r2, [pc, #76]	; (800a5c4 <USB_HostInit+0x15c>)
 800a576:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800a57a:	e009      	b.n	800a590 <USB_HostInit+0x128>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	2280      	movs	r2, #128	; 0x80
 800a580:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	4a10      	ldr	r2, [pc, #64]	; (800a5c8 <USB_HostInit+0x160>)
 800a586:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	4a10      	ldr	r2, [pc, #64]	; (800a5cc <USB_HostInit+0x164>)
 800a58c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a592:	2b00      	cmp	r3, #0
 800a594:	d105      	bne.n	800a5a2 <USB_HostInit+0x13a>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	699b      	ldr	r3, [r3, #24]
 800a59a:	f043 0210 	orr.w	r2, r3, #16
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	699a      	ldr	r2, [r3, #24]
 800a5a6:	4b0a      	ldr	r3, [pc, #40]	; (800a5d0 <USB_HostInit+0x168>)
 800a5a8:	4313      	orrs	r3, r2
 800a5aa:	687a      	ldr	r2, [r7, #4]
 800a5ac:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800a5ae:	2300      	movs	r3, #0
}
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	3710      	adds	r7, #16
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5ba:	b004      	add	sp, #16
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	01000200 	.word	0x01000200
 800a5c4:	00e00300 	.word	0x00e00300
 800a5c8:	00600080 	.word	0x00600080
 800a5cc:	004000e0 	.word	0x004000e0
 800a5d0:	a3200008 	.word	0xa3200008

0800a5d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a5d4:	b480      	push	{r7}
 800a5d6:	b085      	sub	sp, #20
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
 800a5dc:	460b      	mov	r3, r1
 800a5de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	68fa      	ldr	r2, [r7, #12]
 800a5ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800a5f2:	f023 0303 	bic.w	r3, r3, #3
 800a5f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a5fe:	681a      	ldr	r2, [r3, #0]
 800a600:	78fb      	ldrb	r3, [r7, #3]
 800a602:	f003 0303 	and.w	r3, r3, #3
 800a606:	68f9      	ldr	r1, [r7, #12]
 800a608:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a60c:	4313      	orrs	r3, r2
 800a60e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a610:	78fb      	ldrb	r3, [r7, #3]
 800a612:	2b01      	cmp	r3, #1
 800a614:	d107      	bne.n	800a626 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a61c:	461a      	mov	r2, r3
 800a61e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800a622:	6053      	str	r3, [r2, #4]
 800a624:	e009      	b.n	800a63a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800a626:	78fb      	ldrb	r3, [r7, #3]
 800a628:	2b02      	cmp	r3, #2
 800a62a:	d106      	bne.n	800a63a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a632:	461a      	mov	r2, r3
 800a634:	f241 7370 	movw	r3, #6000	; 0x1770
 800a638:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800a63a:	2300      	movs	r3, #0
}
 800a63c:	4618      	mov	r0, r3
 800a63e:	3714      	adds	r7, #20
 800a640:	46bd      	mov	sp, r7
 800a642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a646:	4770      	bx	lr

0800a648 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800a648:	b580      	push	{r7, lr}
 800a64a:	b084      	sub	sp, #16
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800a654:	2300      	movs	r3, #0
 800a656:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a668:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a676:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800a678:	2064      	movs	r0, #100	; 0x64
 800a67a:	f7f8 fd93 	bl	80031a4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a686:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a68a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800a68c:	200a      	movs	r0, #10
 800a68e:	f7f8 fd89 	bl	80031a4 <HAL_Delay>

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b085      	sub	sp, #20
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800a6c0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d109      	bne.n	800a6e0 <USB_DriveVbus+0x44>
 800a6cc:	78fb      	ldrb	r3, [r7, #3]
 800a6ce:	2b01      	cmp	r3, #1
 800a6d0:	d106      	bne.n	800a6e0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a6da:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a6de:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a6e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6ea:	d109      	bne.n	800a700 <USB_DriveVbus+0x64>
 800a6ec:	78fb      	ldrb	r3, [r7, #3]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d106      	bne.n	800a700 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	68fa      	ldr	r2, [r7, #12]
 800a6f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800a6fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a6fe:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800a700:	2300      	movs	r3, #0
}
 800a702:	4618      	mov	r0, r3
 800a704:	3714      	adds	r7, #20
 800a706:	46bd      	mov	sp, r7
 800a708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70c:	4770      	bx	lr

0800a70e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800a71a:	2300      	movs	r3, #0
 800a71c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	0c5b      	lsrs	r3, r3, #17
 800a72c:	f003 0303 	and.w	r3, r3, #3
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	b29b      	uxth	r3, r3
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr
	...

0800a760 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800a760:	b480      	push	{r7}
 800a762:	b087      	sub	sp, #28
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
 800a768:	4608      	mov	r0, r1
 800a76a:	4611      	mov	r1, r2
 800a76c:	461a      	mov	r2, r3
 800a76e:	4603      	mov	r3, r0
 800a770:	70fb      	strb	r3, [r7, #3]
 800a772:	460b      	mov	r3, r1
 800a774:	70bb      	strb	r3, [r7, #2]
 800a776:	4613      	mov	r3, r2
 800a778:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800a77a:	2300      	movs	r3, #0
 800a77c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800a782:	78fb      	ldrb	r3, [r7, #3]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	68bb      	ldr	r3, [r7, #8]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a78e:	461a      	mov	r2, r3
 800a790:	f04f 33ff 	mov.w	r3, #4294967295
 800a794:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800a796:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d87e      	bhi.n	800a89c <USB_HC_Init+0x13c>
 800a79e:	a201      	add	r2, pc, #4	; (adr r2, 800a7a4 <USB_HC_Init+0x44>)
 800a7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a4:	0800a7b5 	.word	0x0800a7b5
 800a7a8:	0800a85f 	.word	0x0800a85f
 800a7ac:	0800a7b5 	.word	0x0800a7b5
 800a7b0:	0800a821 	.word	0x0800a821
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a7b4:	78fb      	ldrb	r3, [r7, #3]
 800a7b6:	015a      	lsls	r2, r3, #5
 800a7b8:	68bb      	ldr	r3, [r7, #8]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	f240 439d 	movw	r3, #1181	; 0x49d
 800a7c6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800a7c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	da10      	bge.n	800a7f2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a7d0:	78fb      	ldrb	r3, [r7, #3]
 800a7d2:	015a      	lsls	r2, r3, #5
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	4413      	add	r3, r2
 800a7d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	78fa      	ldrb	r2, [r7, #3]
 800a7e0:	0151      	lsls	r1, r2, #5
 800a7e2:	68ba      	ldr	r2, [r7, #8]
 800a7e4:	440a      	add	r2, r1
 800a7e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a7ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a7ee:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800a7f0:	e057      	b.n	800a8a2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d051      	beq.n	800a8a2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a7fe:	78fb      	ldrb	r3, [r7, #3]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	68bb      	ldr	r3, [r7, #8]
 800a804:	4413      	add	r3, r2
 800a806:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	78fa      	ldrb	r2, [r7, #3]
 800a80e:	0151      	lsls	r1, r2, #5
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	440a      	add	r2, r1
 800a814:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a818:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800a81c:	60d3      	str	r3, [r2, #12]
      break;
 800a81e:	e040      	b.n	800a8a2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a820:	78fb      	ldrb	r3, [r7, #3]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	4413      	add	r3, r2
 800a828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a82c:	461a      	mov	r2, r3
 800a82e:	f240 639d 	movw	r3, #1693	; 0x69d
 800a832:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a834:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	da34      	bge.n	800a8a6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800a83c:	78fb      	ldrb	r3, [r7, #3]
 800a83e:	015a      	lsls	r2, r3, #5
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	4413      	add	r3, r2
 800a844:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	78fa      	ldrb	r2, [r7, #3]
 800a84c:	0151      	lsls	r1, r2, #5
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	440a      	add	r2, r1
 800a852:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a85a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800a85c:	e023      	b.n	800a8a6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	4413      	add	r3, r2
 800a866:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a86a:	461a      	mov	r2, r3
 800a86c:	f240 2325 	movw	r3, #549	; 0x225
 800a870:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800a872:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a876:	2b00      	cmp	r3, #0
 800a878:	da17      	bge.n	800a8aa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800a87a:	78fb      	ldrb	r3, [r7, #3]
 800a87c:	015a      	lsls	r2, r3, #5
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	4413      	add	r3, r2
 800a882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a886:	68db      	ldr	r3, [r3, #12]
 800a888:	78fa      	ldrb	r2, [r7, #3]
 800a88a:	0151      	lsls	r1, r2, #5
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	440a      	add	r2, r1
 800a890:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a894:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800a898:	60d3      	str	r3, [r2, #12]
      }
      break;
 800a89a:	e006      	b.n	800a8aa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a0:	e004      	b.n	800a8ac <USB_HC_Init+0x14c>
      break;
 800a8a2:	bf00      	nop
 800a8a4:	e002      	b.n	800a8ac <USB_HC_Init+0x14c>
      break;
 800a8a6:	bf00      	nop
 800a8a8:	e000      	b.n	800a8ac <USB_HC_Init+0x14c>
      break;
 800a8aa:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a8b2:	699a      	ldr	r2, [r3, #24]
 800a8b4:	78fb      	ldrb	r3, [r7, #3]
 800a8b6:	f003 030f 	and.w	r3, r3, #15
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	fa01 f303 	lsl.w	r3, r1, r3
 800a8c0:	68b9      	ldr	r1, [r7, #8]
 800a8c2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800a8d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	da03      	bge.n	800a8e6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800a8de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8e2:	613b      	str	r3, [r7, #16]
 800a8e4:	e001      	b.n	800a8ea <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800a8ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d103      	bne.n	800a8fa <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800a8f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a8f6:	60fb      	str	r3, [r7, #12]
 800a8f8:	e001      	b.n	800a8fe <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a8fe:	787b      	ldrb	r3, [r7, #1]
 800a900:	059b      	lsls	r3, r3, #22
 800a902:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a906:	78bb      	ldrb	r3, [r7, #2]
 800a908:	02db      	lsls	r3, r3, #11
 800a90a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a90e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a910:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a914:	049b      	lsls	r3, r3, #18
 800a916:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800a91a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a91c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a91e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800a922:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a924:	693b      	ldr	r3, [r7, #16]
 800a926:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	0159      	lsls	r1, r3, #5
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	440b      	add	r3, r1
 800a930:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a934:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800a93a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800a93c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a940:	2b03      	cmp	r3, #3
 800a942:	d10f      	bne.n	800a964 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	78fa      	ldrb	r2, [r7, #3]
 800a954:	0151      	lsls	r1, r2, #5
 800a956:	68ba      	ldr	r2, [r7, #8]
 800a958:	440a      	add	r2, r1
 800a95a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a95e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a962:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800a964:	7dfb      	ldrb	r3, [r7, #23]
}
 800a966:	4618      	mov	r0, r3
 800a968:	371c      	adds	r7, #28
 800a96a:	46bd      	mov	sp, r7
 800a96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a970:	4770      	bx	lr
 800a972:	bf00      	nop

0800a974 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b08c      	sub	sp, #48	; 0x30
 800a978:	af02      	add	r7, sp, #8
 800a97a:	60f8      	str	r0, [r7, #12]
 800a97c:	60b9      	str	r1, [r7, #8]
 800a97e:	4613      	mov	r3, r2
 800a980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	785b      	ldrb	r3, [r3, #1]
 800a98a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800a98c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a990:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d028      	beq.n	800a9f0 <USB_HC_StartXfer+0x7c>
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	791b      	ldrb	r3, [r3, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d124      	bne.n	800a9f0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d10b      	bne.n	800a9c4 <USB_HC_StartXfer+0x50>
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	795b      	ldrb	r3, [r3, #5]
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	d107      	bne.n	800a9c4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	785b      	ldrb	r3, [r3, #1]
 800a9b8:	4619      	mov	r1, r3
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 fa2e 	bl	800ae1c <USB_DoPing>
      return HAL_OK;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	e113      	b.n	800abec <USB_HC_StartXfer+0x278>
    }
    else if (dma == 1U)
 800a9c4:	79fb      	ldrb	r3, [r7, #7]
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d112      	bne.n	800a9f0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	015a      	lsls	r2, r3, #5
 800a9ce:	6a3b      	ldr	r3, [r7, #32]
 800a9d0:	4413      	add	r3, r2
 800a9d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	69fa      	ldr	r2, [r7, #28]
 800a9da:	0151      	lsls	r1, r2, #5
 800a9dc:	6a3a      	ldr	r2, [r7, #32]
 800a9de:	440a      	add	r2, r1
 800a9e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800a9e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800a9e8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	691b      	ldr	r3, [r3, #16]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d018      	beq.n	800aa2a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	691b      	ldr	r3, [r3, #16]
 800a9fc:	68ba      	ldr	r2, [r7, #8]
 800a9fe:	8912      	ldrh	r2, [r2, #8]
 800aa00:	4413      	add	r3, r2
 800aa02:	3b01      	subs	r3, #1
 800aa04:	68ba      	ldr	r2, [r7, #8]
 800aa06:	8912      	ldrh	r2, [r2, #8]
 800aa08:	fbb3 f3f2 	udiv	r3, r3, r2
 800aa0c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800aa0e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aa10:	8b7b      	ldrh	r3, [r7, #26]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d90b      	bls.n	800aa2e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800aa16:	8b7b      	ldrh	r3, [r7, #26]
 800aa18:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800aa1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa1c:	68ba      	ldr	r2, [r7, #8]
 800aa1e:	8912      	ldrh	r2, [r2, #8]
 800aa20:	fb03 f202 	mul.w	r2, r3, r2
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	611a      	str	r2, [r3, #16]
 800aa28:	e001      	b.n	800aa2e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	78db      	ldrb	r3, [r3, #3]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d006      	beq.n	800aa44 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800aa36:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa38:	68ba      	ldr	r2, [r7, #8]
 800aa3a:	8912      	ldrh	r2, [r2, #8]
 800aa3c:	fb03 f202 	mul.w	r2, r3, r2
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	691b      	ldr	r3, [r3, #16]
 800aa48:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aa4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aa4e:	04d9      	lsls	r1, r3, #19
 800aa50:	4b68      	ldr	r3, [pc, #416]	; (800abf4 <USB_HC_StartXfer+0x280>)
 800aa52:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa54:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	7a9b      	ldrb	r3, [r3, #10]
 800aa5a:	075b      	lsls	r3, r3, #29
 800aa5c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa60:	69f9      	ldr	r1, [r7, #28]
 800aa62:	0148      	lsls	r0, r1, #5
 800aa64:	6a39      	ldr	r1, [r7, #32]
 800aa66:	4401      	add	r1, r0
 800aa68:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800aa6c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800aa6e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800aa70:	79fb      	ldrb	r3, [r7, #7]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d009      	beq.n	800aa8a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	68d9      	ldr	r1, [r3, #12]
 800aa7a:	69fb      	ldr	r3, [r7, #28]
 800aa7c:	015a      	lsls	r2, r3, #5
 800aa7e:	6a3b      	ldr	r3, [r7, #32]
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aa86:	460a      	mov	r2, r1
 800aa88:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800aa8a:	6a3b      	ldr	r3, [r7, #32]
 800aa8c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	f003 0301 	and.w	r3, r3, #1
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	bf0c      	ite	eq
 800aa9a:	2301      	moveq	r3, #1
 800aa9c:	2300      	movne	r3, #0
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	015a      	lsls	r2, r3, #5
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	4413      	add	r3, r2
 800aaaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	69fa      	ldr	r2, [r7, #28]
 800aab2:	0151      	lsls	r1, r2, #5
 800aab4:	6a3a      	ldr	r2, [r7, #32]
 800aab6:	440a      	add	r2, r1
 800aab8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800aabc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aac0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800aac2:	69fb      	ldr	r3, [r7, #28]
 800aac4:	015a      	lsls	r2, r3, #5
 800aac6:	6a3b      	ldr	r3, [r7, #32]
 800aac8:	4413      	add	r3, r2
 800aaca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	7e7b      	ldrb	r3, [r7, #25]
 800aad2:	075b      	lsls	r3, r3, #29
 800aad4:	69f9      	ldr	r1, [r7, #28]
 800aad6:	0148      	lsls	r0, r1, #5
 800aad8:	6a39      	ldr	r1, [r7, #32]
 800aada:	4401      	add	r1, r0
 800aadc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800aae0:	4313      	orrs	r3, r2
 800aae2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	6a3b      	ldr	r3, [r7, #32]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a41      	ldr	r2, [pc, #260]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800aaf4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aaf6:	4b40      	ldr	r3, [pc, #256]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800aafe:	4a3e      	ldr	r2, [pc, #248]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800ab00:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	78db      	ldrb	r3, [r3, #3]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d006      	beq.n	800ab18 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800ab0a:	4b3b      	ldr	r3, [pc, #236]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab12:	4a39      	ldr	r2, [pc, #228]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800ab14:	6013      	str	r3, [r2, #0]
 800ab16:	e005      	b.n	800ab24 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800ab18:	4b37      	ldr	r3, [pc, #220]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab20:	4a35      	ldr	r2, [pc, #212]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800ab22:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ab24:	4b34      	ldr	r3, [pc, #208]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ab2c:	4a32      	ldr	r2, [pc, #200]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800ab2e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	6a3b      	ldr	r3, [r7, #32]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ab3c:	461a      	mov	r2, r3
 800ab3e:	4b2e      	ldr	r3, [pc, #184]	; (800abf8 <USB_HC_StartXfer+0x284>)
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800ab44:	79fb      	ldrb	r3, [r7, #7]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d001      	beq.n	800ab4e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	e04e      	b.n	800abec <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	78db      	ldrb	r3, [r3, #3]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d149      	bne.n	800abea <USB_HC_StartXfer+0x276>
 800ab56:	68bb      	ldr	r3, [r7, #8]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d045      	beq.n	800abea <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	79db      	ldrb	r3, [r3, #7]
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	d830      	bhi.n	800abc8 <USB_HC_StartXfer+0x254>
 800ab66:	a201      	add	r2, pc, #4	; (adr r2, 800ab6c <USB_HC_StartXfer+0x1f8>)
 800ab68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab6c:	0800ab7d 	.word	0x0800ab7d
 800ab70:	0800aba1 	.word	0x0800aba1
 800ab74:	0800ab7d 	.word	0x0800ab7d
 800ab78:	0800aba1 	.word	0x0800aba1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	691b      	ldr	r3, [r3, #16]
 800ab80:	3303      	adds	r3, #3
 800ab82:	089b      	lsrs	r3, r3, #2
 800ab84:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800ab86:	8afa      	ldrh	r2, [r7, #22]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab8c:	b29b      	uxth	r3, r3
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d91c      	bls.n	800abcc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	f043 0220 	orr.w	r2, r3, #32
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	619a      	str	r2, [r3, #24]
        }
        break;
 800ab9e:	e015      	b.n	800abcc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	3303      	adds	r3, #3
 800aba6:	089b      	lsrs	r3, r3, #2
 800aba8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800abaa:	8afa      	ldrh	r2, [r7, #22]
 800abac:	6a3b      	ldr	r3, [r7, #32]
 800abae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800abb2:	691b      	ldr	r3, [r3, #16]
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d90a      	bls.n	800abd0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	699b      	ldr	r3, [r3, #24]
 800abbe:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	619a      	str	r2, [r3, #24]
        }
        break;
 800abc6:	e003      	b.n	800abd0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800abc8:	bf00      	nop
 800abca:	e002      	b.n	800abd2 <USB_HC_StartXfer+0x25e>
        break;
 800abcc:	bf00      	nop
 800abce:	e000      	b.n	800abd2 <USB_HC_StartXfer+0x25e>
        break;
 800abd0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	68d9      	ldr	r1, [r3, #12]
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	785a      	ldrb	r2, [r3, #1]
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	691b      	ldr	r3, [r3, #16]
 800abde:	b29b      	uxth	r3, r3
 800abe0:	2000      	movs	r0, #0
 800abe2:	9000      	str	r0, [sp, #0]
 800abe4:	68f8      	ldr	r0, [r7, #12]
 800abe6:	f7ff fb8b 	bl	800a300 <USB_WritePacket>
  }

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3728      	adds	r7, #40	; 0x28
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}
 800abf4:	1ff80000 	.word	0x1ff80000
 800abf8:	200005a0 	.word	0x200005a0

0800abfc <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800abfc:	b480      	push	{r7}
 800abfe:	b085      	sub	sp, #20
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac0e:	695b      	ldr	r3, [r3, #20]
 800ac10:	b29b      	uxth	r3, r3
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr

0800ac1e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ac1e:	b480      	push	{r7}
 800ac20:	b087      	sub	sp, #28
 800ac22:	af00      	add	r7, sp, #0
 800ac24:	6078      	str	r0, [r7, #4]
 800ac26:	460b      	mov	r3, r1
 800ac28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800ac2e:	78fb      	ldrb	r3, [r7, #3]
 800ac30:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800ac32:	2300      	movs	r3, #0
 800ac34:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	015a      	lsls	r2, r3, #5
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	4413      	add	r3, r2
 800ac3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	0c9b      	lsrs	r3, r3, #18
 800ac46:	f003 0303 	and.w	r3, r3, #3
 800ac4a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d002      	beq.n	800ac58 <USB_HC_Halt+0x3a>
 800ac52:	68bb      	ldr	r3, [r7, #8]
 800ac54:	2b02      	cmp	r3, #2
 800ac56:	d16c      	bne.n	800ad32 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	0151      	lsls	r1, r2, #5
 800ac6a:	693a      	ldr	r2, [r7, #16]
 800ac6c:	440a      	add	r2, r1
 800ac6e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac76:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d143      	bne.n	800ad0c <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	015a      	lsls	r2, r3, #5
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	4413      	add	r3, r2
 800ac8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	68fa      	ldr	r2, [r7, #12]
 800ac94:	0151      	lsls	r1, r2, #5
 800ac96:	693a      	ldr	r2, [r7, #16]
 800ac98:	440a      	add	r2, r1
 800ac9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ac9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aca2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	015a      	lsls	r2, r3, #5
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	4413      	add	r3, r2
 800acac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	68fa      	ldr	r2, [r7, #12]
 800acb4:	0151      	lsls	r1, r2, #5
 800acb6:	693a      	ldr	r2, [r7, #16]
 800acb8:	440a      	add	r2, r1
 800acba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acbe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800acc2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	693b      	ldr	r3, [r7, #16]
 800acca:	4413      	add	r3, r2
 800accc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	0151      	lsls	r1, r2, #5
 800acd6:	693a      	ldr	r2, [r7, #16]
 800acd8:	440a      	add	r2, r1
 800acda:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800acde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ace2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	3301      	adds	r3, #1
 800ace8:	617b      	str	r3, [r7, #20]
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acf0:	d81d      	bhi.n	800ad2e <USB_HC_Halt+0x110>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad08:	d0ec      	beq.n	800ace4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ad0a:	e080      	b.n	800ae0e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	015a      	lsls	r2, r3, #5
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	4413      	add	r3, r2
 800ad14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	0151      	lsls	r1, r2, #5
 800ad1e:	693a      	ldr	r2, [r7, #16]
 800ad20:	440a      	add	r2, r1
 800ad22:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ad2a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ad2c:	e06f      	b.n	800ae0e <USB_HC_Halt+0x1f0>
          break;
 800ad2e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800ad30:	e06d      	b.n	800ae0e <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	693b      	ldr	r3, [r7, #16]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68fa      	ldr	r2, [r7, #12]
 800ad42:	0151      	lsls	r1, r2, #5
 800ad44:	693a      	ldr	r2, [r7, #16]
 800ad46:	440a      	add	r2, r1
 800ad48:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad50:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ad52:	693b      	ldr	r3, [r7, #16]
 800ad54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d143      	bne.n	800adea <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	68fa      	ldr	r2, [r7, #12]
 800ad72:	0151      	lsls	r1, r2, #5
 800ad74:	693a      	ldr	r2, [r7, #16]
 800ad76:	440a      	add	r2, r1
 800ad78:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ad80:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	015a      	lsls	r2, r3, #5
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	4413      	add	r3, r2
 800ad8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	0151      	lsls	r1, r2, #5
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	440a      	add	r2, r1
 800ad98:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ad9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ada0:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	015a      	lsls	r2, r3, #5
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	4413      	add	r3, r2
 800adaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	68fa      	ldr	r2, [r7, #12]
 800adb2:	0151      	lsls	r1, r2, #5
 800adb4:	693a      	ldr	r2, [r7, #16]
 800adb6:	440a      	add	r2, r1
 800adb8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800adbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800adc0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	3301      	adds	r3, #1
 800adc6:	617b      	str	r3, [r7, #20]
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adce:	d81d      	bhi.n	800ae0c <USB_HC_Halt+0x1ee>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	4413      	add	r3, r2
 800add8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ade2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ade6:	d0ec      	beq.n	800adc2 <USB_HC_Halt+0x1a4>
 800ade8:	e011      	b.n	800ae0e <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	0151      	lsls	r1, r2, #5
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	440a      	add	r2, r1
 800ae00:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae08:	6013      	str	r3, [r2, #0]
 800ae0a:	e000      	b.n	800ae0e <USB_HC_Halt+0x1f0>
          break;
 800ae0c:	bf00      	nop
    }
  }

  return HAL_OK;
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	371c      	adds	r7, #28
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b087      	sub	sp, #28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
 800ae24:	460b      	mov	r3, r1
 800ae26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800ae2c:	78fb      	ldrb	r3, [r7, #3]
 800ae2e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800ae30:	2301      	movs	r3, #1
 800ae32:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	04da      	lsls	r2, r3, #19
 800ae38:	4b15      	ldr	r3, [pc, #84]	; (800ae90 <USB_DoPing+0x74>)
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	0151      	lsls	r1, r2, #5
 800ae40:	697a      	ldr	r2, [r7, #20]
 800ae42:	440a      	add	r2, r1
 800ae44:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800ae48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae4c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	015a      	lsls	r2, r3, #5
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	4413      	add	r3, r2
 800ae56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ae64:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ae6c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	697b      	ldr	r3, [r7, #20]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ae80:	2300      	movs	r3, #0
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	371c      	adds	r7, #28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	1ff80000 	.word	0x1ff80000

0800ae94 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b086      	sub	sp, #24
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f7ff f9a7 	bl	800a1f8 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800aeaa:	2110      	movs	r1, #16
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f7ff f9df 	bl	800a270 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff fa02 	bl	800a2bc <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800aeb8:	2300      	movs	r3, #0
 800aeba:	613b      	str	r3, [r7, #16]
 800aebc:	e01f      	b.n	800aefe <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	015a      	lsls	r2, r3, #5
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	4413      	add	r3, r2
 800aec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aed4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aedc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800aede:	68bb      	ldr	r3, [r7, #8]
 800aee0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aee4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	015a      	lsls	r2, r3, #5
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	4413      	add	r3, r2
 800aeee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800aef2:	461a      	mov	r2, r3
 800aef4:	68bb      	ldr	r3, [r7, #8]
 800aef6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800aef8:	693b      	ldr	r3, [r7, #16]
 800aefa:	3301      	adds	r3, #1
 800aefc:	613b      	str	r3, [r7, #16]
 800aefe:	693b      	ldr	r3, [r7, #16]
 800af00:	2b0f      	cmp	r3, #15
 800af02:	d9dc      	bls.n	800aebe <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800af04:	2300      	movs	r3, #0
 800af06:	613b      	str	r3, [r7, #16]
 800af08:	e034      	b.n	800af74 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800af0a:	693b      	ldr	r3, [r7, #16]
 800af0c:	015a      	lsls	r2, r3, #5
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	4413      	add	r3, r2
 800af12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800af1a:	68bb      	ldr	r3, [r7, #8]
 800af1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af20:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800af28:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800af30:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af3e:	461a      	mov	r2, r3
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800af44:	697b      	ldr	r3, [r7, #20]
 800af46:	3301      	adds	r3, #1
 800af48:	617b      	str	r3, [r7, #20]
 800af4a:	697b      	ldr	r3, [r7, #20]
 800af4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af50:	d80c      	bhi.n	800af6c <USB_StopHost+0xd8>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	015a      	lsls	r2, r3, #5
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	4413      	add	r3, r2
 800af5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af68:	d0ec      	beq.n	800af44 <USB_StopHost+0xb0>
 800af6a:	e000      	b.n	800af6e <USB_StopHost+0xda>
        break;
 800af6c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	3301      	adds	r3, #1
 800af72:	613b      	str	r3, [r7, #16]
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	2b0f      	cmp	r3, #15
 800af78:	d9c7      	bls.n	800af0a <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800af80:	461a      	mov	r2, r3
 800af82:	f04f 33ff 	mov.w	r3, #4294967295
 800af86:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	f04f 32ff 	mov.w	r2, #4294967295
 800af8e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f7ff f920 	bl	800a1d6 <USB_EnableGlobalInt>

  return HAL_OK;
 800af96:	2300      	movs	r3, #0
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3718      	adds	r7, #24
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 800afa4:	4904      	ldr	r1, [pc, #16]	; (800afb8 <MX_FATFS_Init+0x18>)
 800afa6:	4805      	ldr	r0, [pc, #20]	; (800afbc <MX_FATFS_Init+0x1c>)
 800afa8:	f004 f81c 	bl	800efe4 <FATFS_LinkDriver>
 800afac:	4603      	mov	r3, r0
 800afae:	461a      	mov	r2, r3
 800afb0:	4b03      	ldr	r3, [pc, #12]	; (800afc0 <MX_FATFS_Init+0x20>)
 800afb2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800afb4:	bf00      	nop
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	200005a8 	.word	0x200005a8
 800afbc:	0801625c 	.word	0x0801625c
 800afc0:	200005a4 	.word	0x200005a4

0800afc4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4603      	mov	r3, r0
 800afcc:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 800afce:	2300      	movs	r3, #0
}
 800afd0:	4618      	mov	r0, r3
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 800afdc:	b580      	push	{r7, lr}
 800afde:	b084      	sub	sp, #16
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	4603      	mov	r3, r0
 800afe4:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 800afe6:	2301      	movs	r3, #1
 800afe8:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800afea:	79fb      	ldrb	r3, [r7, #7]
 800afec:	4619      	mov	r1, r3
 800afee:	4808      	ldr	r0, [pc, #32]	; (800b010 <USBH_status+0x34>)
 800aff0:	f000 fe5b 	bl	800bcaa <USBH_MSC_UnitIsReady>
 800aff4:	4603      	mov	r3, r0
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <USBH_status+0x24>
  {
    res = RES_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]
 800affe:	e001      	b.n	800b004 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 800b000:	2301      	movs	r3, #1
 800b002:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800b004:	7bfb      	ldrb	r3, [r7, #15]
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
 800b00e:	bf00      	nop
 800b010:	20005240 	.word	0x20005240

0800b014 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b094      	sub	sp, #80	; 0x50
 800b018:	af02      	add	r7, sp, #8
 800b01a:	60b9      	str	r1, [r7, #8]
 800b01c:	607a      	str	r2, [r7, #4]
 800b01e:	603b      	str	r3, [r7, #0]
 800b020:	4603      	mov	r3, r0
 800b022:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800b02a:	7bf9      	ldrb	r1, [r7, #15]
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	9300      	str	r3, [sp, #0]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	687a      	ldr	r2, [r7, #4]
 800b034:	4813      	ldr	r0, [pc, #76]	; (800b084 <USBH_read+0x70>)
 800b036:	f000 fe82 	bl	800bd3e <USBH_MSC_Read>
 800b03a:	4603      	mov	r3, r0
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d103      	bne.n	800b048 <USBH_read+0x34>
  {
    res = RES_OK;
 800b040:	2300      	movs	r3, #0
 800b042:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b046:	e017      	b.n	800b078 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b048:	f107 0210 	add.w	r2, r7, #16
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
 800b04e:	4619      	mov	r1, r3
 800b050:	480c      	ldr	r0, [pc, #48]	; (800b084 <USBH_read+0x70>)
 800b052:	f000 fe50 	bl	800bcf6 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b056:	7f7b      	ldrb	r3, [r7, #29]
 800b058:	2b3a      	cmp	r3, #58	; 0x3a
 800b05a:	d005      	beq.n	800b068 <USBH_read+0x54>
 800b05c:	2b3a      	cmp	r3, #58	; 0x3a
 800b05e:	dc07      	bgt.n	800b070 <USBH_read+0x5c>
 800b060:	2b04      	cmp	r3, #4
 800b062:	d001      	beq.n	800b068 <USBH_read+0x54>
 800b064:	2b28      	cmp	r3, #40	; 0x28
 800b066:	d103      	bne.n	800b070 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b068:	2303      	movs	r3, #3
 800b06a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b06e:	e003      	b.n	800b078 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b076:	bf00      	nop
    }
  }

  return res;
 800b078:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3748      	adds	r7, #72	; 0x48
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	20005240 	.word	0x20005240

0800b088 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b094      	sub	sp, #80	; 0x50
 800b08c:	af02      	add	r7, sp, #8
 800b08e:	60b9      	str	r1, [r7, #8]
 800b090:	607a      	str	r2, [r7, #4]
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 800b09e:	7bf9      	ldrb	r1, [r7, #15]
 800b0a0:	683b      	ldr	r3, [r7, #0]
 800b0a2:	9300      	str	r3, [sp, #0]
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	687a      	ldr	r2, [r7, #4]
 800b0a8:	4817      	ldr	r0, [pc, #92]	; (800b108 <USBH_write+0x80>)
 800b0aa:	f000 feb1 	bl	800be10 <USBH_MSC_Write>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d103      	bne.n	800b0bc <USBH_write+0x34>
  {
    res = RES_OK;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b0ba:	e01f      	b.n	800b0fc <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 800b0bc:	f107 0210 	add.w	r2, r7, #16
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	4810      	ldr	r0, [pc, #64]	; (800b108 <USBH_write+0x80>)
 800b0c6:	f000 fe16 	bl	800bcf6 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 800b0ca:	7f7b      	ldrb	r3, [r7, #29]
 800b0cc:	2b3a      	cmp	r3, #58	; 0x3a
 800b0ce:	d00d      	beq.n	800b0ec <USBH_write+0x64>
 800b0d0:	2b3a      	cmp	r3, #58	; 0x3a
 800b0d2:	dc0f      	bgt.n	800b0f4 <USBH_write+0x6c>
 800b0d4:	2b28      	cmp	r3, #40	; 0x28
 800b0d6:	d009      	beq.n	800b0ec <USBH_write+0x64>
 800b0d8:	2b28      	cmp	r3, #40	; 0x28
 800b0da:	dc0b      	bgt.n	800b0f4 <USBH_write+0x6c>
 800b0dc:	2b04      	cmp	r3, #4
 800b0de:	d005      	beq.n	800b0ec <USBH_write+0x64>
 800b0e0:	2b27      	cmp	r3, #39	; 0x27
 800b0e2:	d107      	bne.n	800b0f4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b0ea:	e007      	b.n	800b0fc <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800b0ec:	2303      	movs	r3, #3
 800b0ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b0f2:	e003      	b.n	800b0fc <USBH_write+0x74>

    default:
      res = RES_ERROR;
 800b0f4:	2301      	movs	r3, #1
 800b0f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 800b0fa:	bf00      	nop
    }
  }

  return res;
 800b0fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b100:	4618      	mov	r0, r3
 800b102:	3748      	adds	r7, #72	; 0x48
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}
 800b108:	20005240 	.word	0x20005240

0800b10c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b090      	sub	sp, #64	; 0x40
 800b110:	af00      	add	r7, sp, #0
 800b112:	4603      	mov	r3, r0
 800b114:	603a      	str	r2, [r7, #0]
 800b116:	71fb      	strb	r3, [r7, #7]
 800b118:	460b      	mov	r3, r1
 800b11a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 800b122:	79bb      	ldrb	r3, [r7, #6]
 800b124:	2b03      	cmp	r3, #3
 800b126:	d852      	bhi.n	800b1ce <USBH_ioctl+0xc2>
 800b128:	a201      	add	r2, pc, #4	; (adr r2, 800b130 <USBH_ioctl+0x24>)
 800b12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b12e:	bf00      	nop
 800b130:	0800b141 	.word	0x0800b141
 800b134:	0800b149 	.word	0x0800b149
 800b138:	0800b173 	.word	0x0800b173
 800b13c:	0800b19f 	.word	0x0800b19f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 800b140:	2300      	movs	r3, #0
 800b142:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b146:	e045      	b.n	800b1d4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b148:	f107 0208 	add.w	r2, r7, #8
 800b14c:	79fb      	ldrb	r3, [r7, #7]
 800b14e:	4619      	mov	r1, r3
 800b150:	4823      	ldr	r0, [pc, #140]	; (800b1e0 <USBH_ioctl+0xd4>)
 800b152:	f000 fdd0 	bl	800bcf6 <USBH_MSC_GetLUNInfo>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d106      	bne.n	800b16a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800b15c:	68fa      	ldr	r2, [r7, #12]
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b162:	2300      	movs	r3, #0
 800b164:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b168:	e034      	b.n	800b1d4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b170:	e030      	b.n	800b1d4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b172:	f107 0208 	add.w	r2, r7, #8
 800b176:	79fb      	ldrb	r3, [r7, #7]
 800b178:	4619      	mov	r1, r3
 800b17a:	4819      	ldr	r0, [pc, #100]	; (800b1e0 <USBH_ioctl+0xd4>)
 800b17c:	f000 fdbb 	bl	800bcf6 <USBH_MSC_GetLUNInfo>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d107      	bne.n	800b196 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 800b186:	8a3b      	ldrh	r3, [r7, #16]
 800b188:	461a      	mov	r2, r3
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b18e:	2300      	movs	r3, #0
 800b190:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b194:	e01e      	b.n	800b1d4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b19c:	e01a      	b.n	800b1d4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 800b19e:	f107 0208 	add.w	r2, r7, #8
 800b1a2:	79fb      	ldrb	r3, [r7, #7]
 800b1a4:	4619      	mov	r1, r3
 800b1a6:	480e      	ldr	r0, [pc, #56]	; (800b1e0 <USBH_ioctl+0xd4>)
 800b1a8:	f000 fda5 	bl	800bcf6 <USBH_MSC_GetLUNInfo>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d109      	bne.n	800b1c6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 800b1b2:	8a3b      	ldrh	r3, [r7, #16]
 800b1b4:	0a5b      	lsrs	r3, r3, #9
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	683b      	ldr	r3, [r7, #0]
 800b1bc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 800b1c4:	e006      	b.n	800b1d4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800b1c6:	2301      	movs	r3, #1
 800b1c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 800b1cc:	e002      	b.n	800b1d4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 800b1ce:	2304      	movs	r3, #4
 800b1d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 800b1d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3740      	adds	r7, #64	; 0x40
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	20005240 	.word	0x20005240

0800b1e4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800b1e4:	b590      	push	{r4, r7, lr}
 800b1e6:	b089      	sub	sp, #36	; 0x24
 800b1e8:	af04      	add	r7, sp, #16
 800b1ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b1f2:	7919      	ldrb	r1, [r3, #4]
 800b1f4:	2350      	movs	r3, #80	; 0x50
 800b1f6:	2206      	movs	r2, #6
 800b1f8:	6878      	ldr	r0, [r7, #4]
 800b1fa:	f001 fd41 	bl	800cc80 <USBH_FindInterface>
 800b1fe:	4603      	mov	r3, r0
 800b200:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800b202:	7bfb      	ldrb	r3, [r7, #15]
 800b204:	2bff      	cmp	r3, #255	; 0xff
 800b206:	d002      	beq.n	800b20e <USBH_MSC_InterfaceInit+0x2a>
 800b208:	7bfb      	ldrb	r3, [r7, #15]
 800b20a:	2b01      	cmp	r3, #1
 800b20c:	d901      	bls.n	800b212 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800b20e:	2302      	movs	r3, #2
 800b210:	e0ef      	b.n	800b3f2 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	4619      	mov	r1, r3
 800b216:	6878      	ldr	r0, [r7, #4]
 800b218:	f001 fd16 	bl	800cc48 <USBH_SelectInterface>
 800b21c:	4603      	mov	r3, r0
 800b21e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800b220:	7bbb      	ldrb	r3, [r7, #14]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 800b226:	2302      	movs	r3, #2
 800b228:	e0e3      	b.n	800b3f2 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800b230:	f44f 7080 	mov.w	r0, #256	; 0x100
 800b234:	f008 f84e 	bl	80132d4 <malloc>
 800b238:	4603      	mov	r3, r0
 800b23a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b242:	69db      	ldr	r3, [r3, #28]
 800b244:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 800b246:	68bb      	ldr	r3, [r7, #8]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d101      	bne.n	800b250 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800b24c:	2302      	movs	r3, #2
 800b24e:	e0d0      	b.n	800b3f2 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 800b250:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b254:	2100      	movs	r1, #0
 800b256:	68b8      	ldr	r0, [r7, #8]
 800b258:	f008 f85a 	bl	8013310 <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800b25c:	7bfb      	ldrb	r3, [r7, #15]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	211a      	movs	r1, #26
 800b262:	fb01 f303 	mul.w	r3, r1, r3
 800b266:	4413      	add	r3, r2
 800b268:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	b25b      	sxtb	r3, r3
 800b270:	2b00      	cmp	r3, #0
 800b272:	da16      	bge.n	800b2a2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b274:	7bfb      	ldrb	r3, [r7, #15]
 800b276:	687a      	ldr	r2, [r7, #4]
 800b278:	211a      	movs	r1, #26
 800b27a:	fb01 f303 	mul.w	r3, r1, r3
 800b27e:	4413      	add	r3, r2
 800b280:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b284:	781a      	ldrb	r2, [r3, #0]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b28a:	7bfb      	ldrb	r3, [r7, #15]
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	211a      	movs	r1, #26
 800b290:	fb01 f303 	mul.w	r3, r1, r3
 800b294:	4413      	add	r3, r2
 800b296:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b29a:	881a      	ldrh	r2, [r3, #0]
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	815a      	strh	r2, [r3, #10]
 800b2a0:	e015      	b.n	800b2ce <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800b2a2:	7bfb      	ldrb	r3, [r7, #15]
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	211a      	movs	r1, #26
 800b2a8:	fb01 f303 	mul.w	r3, r1, r3
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800b2b2:	781a      	ldrb	r2, [r3, #0]
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800b2b8:	7bfb      	ldrb	r3, [r7, #15]
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	211a      	movs	r1, #26
 800b2be:	fb01 f303 	mul.w	r3, r1, r3
 800b2c2:	4413      	add	r3, r2
 800b2c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800b2c8:	881a      	ldrh	r2, [r3, #0]
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800b2ce:	7bfb      	ldrb	r3, [r7, #15]
 800b2d0:	687a      	ldr	r2, [r7, #4]
 800b2d2:	211a      	movs	r1, #26
 800b2d4:	fb01 f303 	mul.w	r3, r1, r3
 800b2d8:	4413      	add	r3, r2
 800b2da:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b2de:	781b      	ldrb	r3, [r3, #0]
 800b2e0:	b25b      	sxtb	r3, r3
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	da16      	bge.n	800b314 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b2e6:	7bfb      	ldrb	r3, [r7, #15]
 800b2e8:	687a      	ldr	r2, [r7, #4]
 800b2ea:	211a      	movs	r1, #26
 800b2ec:	fb01 f303 	mul.w	r3, r1, r3
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b2f6:	781a      	ldrb	r2, [r3, #0]
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b2fc:	7bfb      	ldrb	r3, [r7, #15]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	211a      	movs	r1, #26
 800b302:	fb01 f303 	mul.w	r3, r1, r3
 800b306:	4413      	add	r3, r2
 800b308:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b30c:	881a      	ldrh	r2, [r3, #0]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	815a      	strh	r2, [r3, #10]
 800b312:	e015      	b.n	800b340 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 800b314:	7bfb      	ldrb	r3, [r7, #15]
 800b316:	687a      	ldr	r2, [r7, #4]
 800b318:	211a      	movs	r1, #26
 800b31a:	fb01 f303 	mul.w	r3, r1, r3
 800b31e:	4413      	add	r3, r2
 800b320:	f203 3356 	addw	r3, r3, #854	; 0x356
 800b324:	781a      	ldrb	r2, [r3, #0]
 800b326:	68bb      	ldr	r3, [r7, #8]
 800b328:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800b32a:	7bfb      	ldrb	r3, [r7, #15]
 800b32c:	687a      	ldr	r2, [r7, #4]
 800b32e:	211a      	movs	r1, #26
 800b330:	fb01 f303 	mul.w	r3, r1, r3
 800b334:	4413      	add	r3, r2
 800b336:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800b33a:	881a      	ldrh	r2, [r3, #0]
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	2200      	movs	r2, #0
 800b344:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	2200      	movs	r2, #0
 800b34a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	2200      	movs	r2, #0
 800b350:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	799b      	ldrb	r3, [r3, #6]
 800b356:	4619      	mov	r1, r3
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f003 f8c0 	bl	800e4de <USBH_AllocPipe>
 800b35e:	4603      	mov	r3, r0
 800b360:	461a      	mov	r2, r3
 800b362:	68bb      	ldr	r3, [r7, #8]
 800b364:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	79db      	ldrb	r3, [r3, #7]
 800b36a:	4619      	mov	r1, r3
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f003 f8b6 	bl	800e4de <USBH_AllocPipe>
 800b372:	4603      	mov	r3, r0
 800b374:	461a      	mov	r2, r3
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f000 fdec 	bl	800bf58 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	7959      	ldrb	r1, [r3, #5]
 800b384:	68bb      	ldr	r3, [r7, #8]
 800b386:	7998      	ldrb	r0, [r3, #6]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b394:	68ba      	ldr	r2, [r7, #8]
 800b396:	8912      	ldrh	r2, [r2, #8]
 800b398:	9202      	str	r2, [sp, #8]
 800b39a:	2202      	movs	r2, #2
 800b39c:	9201      	str	r2, [sp, #4]
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	4623      	mov	r3, r4
 800b3a2:	4602      	mov	r2, r0
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f003 f86b 	bl	800e480 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	7919      	ldrb	r1, [r3, #4]
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	79d8      	ldrb	r0, [r3, #7]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	8952      	ldrh	r2, [r2, #10]
 800b3c2:	9202      	str	r2, [sp, #8]
 800b3c4:	2202      	movs	r2, #2
 800b3c6:	9201      	str	r2, [sp, #4]
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	4623      	mov	r3, r4
 800b3cc:	4602      	mov	r2, r0
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f003 f856 	bl	800e480 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	791b      	ldrb	r3, [r3, #4]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f007 fe93 	bl	8013108 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	795b      	ldrb	r3, [r3, #5]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f007 fe8c 	bl	8013108 <USBH_LL_SetToggle>

  return USBH_OK;
 800b3f0:	2300      	movs	r3, #0
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd90      	pop	{r4, r7, pc}

0800b3fa <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b084      	sub	sp, #16
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b408:	69db      	ldr	r3, [r3, #28]
 800b40a:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	795b      	ldrb	r3, [r3, #5]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d00e      	beq.n	800b432 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	795b      	ldrb	r3, [r3, #5]
 800b418:	4619      	mov	r1, r3
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f003 f84f 	bl	800e4be <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	795b      	ldrb	r3, [r3, #5]
 800b424:	4619      	mov	r1, r3
 800b426:	6878      	ldr	r0, [r7, #4]
 800b428:	f003 f87a 	bl	800e520 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	2200      	movs	r2, #0
 800b430:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	791b      	ldrb	r3, [r3, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d00e      	beq.n	800b458 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	791b      	ldrb	r3, [r3, #4]
 800b43e:	4619      	mov	r1, r3
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f003 f83c 	bl	800e4be <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	791b      	ldrb	r3, [r3, #4]
 800b44a:	4619      	mov	r1, r3
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f003 f867 	bl	800e520 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2200      	movs	r2, #0
 800b456:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b45e:	69db      	ldr	r3, [r3, #28]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d00b      	beq.n	800b47c <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b46a:	69db      	ldr	r3, [r3, #28]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f007 ff39 	bl	80132e4 <free>
    phost->pActiveClass->pData = 0U;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b478:	2200      	movs	r2, #0
 800b47a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b084      	sub	sp, #16
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b494:	69db      	ldr	r3, [r3, #28]
 800b496:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b498:	2301      	movs	r3, #1
 800b49a:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	7b9b      	ldrb	r3, [r3, #14]
 800b4a0:	2b03      	cmp	r3, #3
 800b4a2:	d041      	beq.n	800b528 <USBH_MSC_ClassRequest+0xa2>
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	dc4b      	bgt.n	800b540 <USBH_MSC_ClassRequest+0xba>
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d001      	beq.n	800b4b0 <USBH_MSC_ClassRequest+0x2a>
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d147      	bne.n	800b540 <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 fd31 	bl	800bf1c <USBH_MSC_BOT_REQ_GetMaxLUN>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considred as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	2b03      	cmp	r3, #3
 800b4c2:	d104      	bne.n	800b4ce <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800b4ce:	7bfb      	ldrb	r3, [r7, #15]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d137      	bne.n	800b544 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	781b      	ldrb	r3, [r3, #0]
 800b4d8:	2b02      	cmp	r3, #2
 800b4da:	d804      	bhi.n	800b4e6 <USBH_MSC_ClassRequest+0x60>
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	b2da      	uxtb	r2, r3
 800b4e4:	e000      	b.n	800b4e8 <USBH_MSC_ClassRequest+0x62>
 800b4e6:	2202      	movs	r2, #2
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b4ec:	2300      	movs	r3, #0
 800b4ee:	73bb      	strb	r3, [r7, #14]
 800b4f0:	e014      	b.n	800b51c <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 800b4f2:	7bbb      	ldrb	r3, [r7, #14]
 800b4f4:	68ba      	ldr	r2, [r7, #8]
 800b4f6:	2134      	movs	r1, #52	; 0x34
 800b4f8:	fb01 f303 	mul.w	r3, r1, r3
 800b4fc:	4413      	add	r3, r2
 800b4fe:	3392      	adds	r3, #146	; 0x92
 800b500:	2202      	movs	r2, #2
 800b502:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 800b504:	7bbb      	ldrb	r3, [r7, #14]
 800b506:	68ba      	ldr	r2, [r7, #8]
 800b508:	2134      	movs	r1, #52	; 0x34
 800b50a:	fb01 f303 	mul.w	r3, r1, r3
 800b50e:	4413      	add	r3, r2
 800b510:	33c1      	adds	r3, #193	; 0xc1
 800b512:	2200      	movs	r2, #0
 800b514:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800b516:	7bbb      	ldrb	r3, [r7, #14]
 800b518:	3301      	adds	r3, #1
 800b51a:	73bb      	strb	r3, [r7, #14]
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	7bba      	ldrb	r2, [r7, #14]
 800b522:	429a      	cmp	r2, r3
 800b524:	d3e5      	bcc.n	800b4f2 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 800b526:	e00d      	b.n	800b544 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 800b528:	2100      	movs	r1, #0
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f002 fa87 	bl	800da3e <USBH_ClrFeature>
 800b530:	4603      	mov	r3, r0
 800b532:	2b00      	cmp	r3, #0
 800b534:	d108      	bne.n	800b548 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	7bda      	ldrb	r2, [r3, #15]
 800b53a:	68bb      	ldr	r3, [r7, #8]
 800b53c:	739a      	strb	r2, [r3, #14]
      }
      break;
 800b53e:	e003      	b.n	800b548 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800b540:	bf00      	nop
 800b542:	e002      	b.n	800b54a <USBH_MSC_ClassRequest+0xc4>
      break;
 800b544:	bf00      	nop
 800b546:	e000      	b.n	800b54a <USBH_MSC_ClassRequest+0xc4>
      break;
 800b548:	bf00      	nop
  }

  return status;
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 800b554:	b580      	push	{r7, lr}
 800b556:	b086      	sub	sp, #24
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800b562:	69db      	ldr	r3, [r3, #28]
 800b564:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 800b566:	2301      	movs	r3, #1
 800b568:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800b56a:	2301      	movs	r3, #1
 800b56c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800b56e:	2301      	movs	r3, #1
 800b570:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	7b1b      	ldrb	r3, [r3, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d003      	beq.n	800b582 <USBH_MSC_Process+0x2e>
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	f000 828d 	beq.w	800ba9a <USBH_MSC_Process+0x546>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 800b580:	e28e      	b.n	800baa0 <USBH_MSC_Process+0x54c>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 800b582:	693b      	ldr	r3, [r7, #16]
 800b584:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 800b588:	693b      	ldr	r3, [r7, #16]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	429a      	cmp	r2, r3
 800b590:	f080 8267 	bcs.w	800ba62 <USBH_MSC_Process+0x50e>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b594:	693b      	ldr	r3, [r7, #16]
 800b596:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b59a:	4619      	mov	r1, r3
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	2334      	movs	r3, #52	; 0x34
 800b5a0:	fb01 f303 	mul.w	r3, r1, r3
 800b5a4:	4413      	add	r3, r2
 800b5a6:	3391      	adds	r3, #145	; 0x91
 800b5a8:	2201      	movs	r2, #1
 800b5aa:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	693a      	ldr	r2, [r7, #16]
 800b5b6:	2334      	movs	r3, #52	; 0x34
 800b5b8:	fb01 f303 	mul.w	r3, r1, r3
 800b5bc:	4413      	add	r3, r2
 800b5be:	3390      	adds	r3, #144	; 0x90
 800b5c0:	781b      	ldrb	r3, [r3, #0]
 800b5c2:	2b08      	cmp	r3, #8
 800b5c4:	f200 8235 	bhi.w	800ba32 <USBH_MSC_Process+0x4de>
 800b5c8:	a201      	add	r2, pc, #4	; (adr r2, 800b5d0 <USBH_MSC_Process+0x7c>)
 800b5ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5ce:	bf00      	nop
 800b5d0:	0800b5f5 	.word	0x0800b5f5
 800b5d4:	0800ba33 	.word	0x0800ba33
 800b5d8:	0800b6bd 	.word	0x0800b6bd
 800b5dc:	0800b841 	.word	0x0800b841
 800b5e0:	0800b61b 	.word	0x0800b61b
 800b5e4:	0800b90d 	.word	0x0800b90d
 800b5e8:	0800ba33 	.word	0x0800ba33
 800b5ec:	0800ba33 	.word	0x0800ba33
 800b5f0:	0800ba21 	.word	0x0800ba21
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	693a      	ldr	r2, [r7, #16]
 800b5fe:	2334      	movs	r3, #52	; 0x34
 800b600:	fb01 f303 	mul.w	r3, r1, r3
 800b604:	4413      	add	r3, r2
 800b606:	3390      	adds	r3, #144	; 0x90
 800b608:	2204      	movs	r2, #4
 800b60a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 800b618:	e214      	b.n	800ba44 <USBH_MSC_Process+0x4f0>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b620:	b2d9      	uxtb	r1, r3
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b628:	461a      	mov	r2, r3
 800b62a:	2334      	movs	r3, #52	; 0x34
 800b62c:	fb02 f303 	mul.w	r3, r2, r3
 800b630:	3398      	adds	r3, #152	; 0x98
 800b632:	693a      	ldr	r2, [r7, #16]
 800b634:	4413      	add	r3, r2
 800b636:	3307      	adds	r3, #7
 800b638:	461a      	mov	r2, r3
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f001 f836 	bl	800c6ac <USBH_MSC_SCSI_Inquiry>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b644:	7bfb      	ldrb	r3, [r7, #15]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d10b      	bne.n	800b662 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b650:	4619      	mov	r1, r3
 800b652:	693a      	ldr	r2, [r7, #16]
 800b654:	2334      	movs	r3, #52	; 0x34
 800b656:	fb01 f303 	mul.w	r3, r1, r3
 800b65a:	4413      	add	r3, r2
 800b65c:	3390      	adds	r3, #144	; 0x90
 800b65e:	2202      	movs	r2, #2
 800b660:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 800b662:	7bfb      	ldrb	r3, [r7, #15]
 800b664:	2b02      	cmp	r3, #2
 800b666:	d10c      	bne.n	800b682 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b66e:	4619      	mov	r1, r3
 800b670:	693a      	ldr	r2, [r7, #16]
 800b672:	2334      	movs	r3, #52	; 0x34
 800b674:	fb01 f303 	mul.w	r3, r1, r3
 800b678:	4413      	add	r3, r2
 800b67a:	3390      	adds	r3, #144	; 0x90
 800b67c:	2205      	movs	r2, #5
 800b67e:	701a      	strb	r2, [r3, #0]
            break;
 800b680:	e1d9      	b.n	800ba36 <USBH_MSC_Process+0x4e2>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b682:	7bfb      	ldrb	r3, [r7, #15]
 800b684:	2b04      	cmp	r3, #4
 800b686:	f040 81d6 	bne.w	800ba36 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b68a:	693b      	ldr	r3, [r7, #16]
 800b68c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b690:	4619      	mov	r1, r3
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	2334      	movs	r3, #52	; 0x34
 800b696:	fb01 f303 	mul.w	r3, r1, r3
 800b69a:	4413      	add	r3, r2
 800b69c:	3390      	adds	r3, #144	; 0x90
 800b69e:	2201      	movs	r2, #1
 800b6a0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6a8:	4619      	mov	r1, r3
 800b6aa:	693a      	ldr	r2, [r7, #16]
 800b6ac:	2334      	movs	r3, #52	; 0x34
 800b6ae:	fb01 f303 	mul.w	r3, r1, r3
 800b6b2:	4413      	add	r3, r2
 800b6b4:	3391      	adds	r3, #145	; 0x91
 800b6b6:	2202      	movs	r2, #2
 800b6b8:	701a      	strb	r2, [r3, #0]
            break;
 800b6ba:	e1bc      	b.n	800ba36 <USBH_MSC_Process+0x4e2>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800b6bc:	693b      	ldr	r3, [r7, #16]
 800b6be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6c2:	b2db      	uxtb	r3, r3
 800b6c4:	4619      	mov	r1, r3
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 ff32 	bl	800c530 <USBH_MSC_SCSI_TestUnitReady>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800b6d0:	7bbb      	ldrb	r3, [r7, #14]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d149      	bne.n	800b76a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6dc:	4619      	mov	r1, r3
 800b6de:	693a      	ldr	r2, [r7, #16]
 800b6e0:	2334      	movs	r3, #52	; 0x34
 800b6e2:	fb01 f303 	mul.w	r3, r1, r3
 800b6e6:	4413      	add	r3, r2
 800b6e8:	3392      	adds	r3, #146	; 0x92
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00c      	beq.n	800b70a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	2334      	movs	r3, #52	; 0x34
 800b6fc:	fb01 f303 	mul.w	r3, r1, r3
 800b700:	4413      	add	r3, r2
 800b702:	33c1      	adds	r3, #193	; 0xc1
 800b704:	2201      	movs	r2, #1
 800b706:	701a      	strb	r2, [r3, #0]
 800b708:	e00b      	b.n	800b722 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b70a:	693b      	ldr	r3, [r7, #16]
 800b70c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b710:	4619      	mov	r1, r3
 800b712:	693a      	ldr	r2, [r7, #16]
 800b714:	2334      	movs	r3, #52	; 0x34
 800b716:	fb01 f303 	mul.w	r3, r1, r3
 800b71a:	4413      	add	r3, r2
 800b71c:	33c1      	adds	r3, #193	; 0xc1
 800b71e:	2200      	movs	r2, #0
 800b720:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b728:	4619      	mov	r1, r3
 800b72a:	693a      	ldr	r2, [r7, #16]
 800b72c:	2334      	movs	r3, #52	; 0x34
 800b72e:	fb01 f303 	mul.w	r3, r1, r3
 800b732:	4413      	add	r3, r2
 800b734:	3390      	adds	r3, #144	; 0x90
 800b736:	2203      	movs	r2, #3
 800b738:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b740:	4619      	mov	r1, r3
 800b742:	693a      	ldr	r2, [r7, #16]
 800b744:	2334      	movs	r3, #52	; 0x34
 800b746:	fb01 f303 	mul.w	r3, r1, r3
 800b74a:	4413      	add	r3, r2
 800b74c:	3391      	adds	r3, #145	; 0x91
 800b74e:	2200      	movs	r2, #0
 800b750:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b758:	4619      	mov	r1, r3
 800b75a:	693a      	ldr	r2, [r7, #16]
 800b75c:	2334      	movs	r3, #52	; 0x34
 800b75e:	fb01 f303 	mul.w	r3, r1, r3
 800b762:	4413      	add	r3, r2
 800b764:	3392      	adds	r3, #146	; 0x92
 800b766:	2200      	movs	r2, #0
 800b768:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800b76a:	7bbb      	ldrb	r3, [r7, #14]
 800b76c:	2b02      	cmp	r3, #2
 800b76e:	d14a      	bne.n	800b806 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b776:	4619      	mov	r1, r3
 800b778:	693a      	ldr	r2, [r7, #16]
 800b77a:	2334      	movs	r3, #52	; 0x34
 800b77c:	fb01 f303 	mul.w	r3, r1, r3
 800b780:	4413      	add	r3, r2
 800b782:	3392      	adds	r3, #146	; 0x92
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b02      	cmp	r3, #2
 800b788:	d00c      	beq.n	800b7a4 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800b78a:	693b      	ldr	r3, [r7, #16]
 800b78c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b790:	4619      	mov	r1, r3
 800b792:	693a      	ldr	r2, [r7, #16]
 800b794:	2334      	movs	r3, #52	; 0x34
 800b796:	fb01 f303 	mul.w	r3, r1, r3
 800b79a:	4413      	add	r3, r2
 800b79c:	33c1      	adds	r3, #193	; 0xc1
 800b79e:	2201      	movs	r2, #1
 800b7a0:	701a      	strb	r2, [r3, #0]
 800b7a2:	e00b      	b.n	800b7bc <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7aa:	4619      	mov	r1, r3
 800b7ac:	693a      	ldr	r2, [r7, #16]
 800b7ae:	2334      	movs	r3, #52	; 0x34
 800b7b0:	fb01 f303 	mul.w	r3, r1, r3
 800b7b4:	4413      	add	r3, r2
 800b7b6:	33c1      	adds	r3, #193	; 0xc1
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	693a      	ldr	r2, [r7, #16]
 800b7c6:	2334      	movs	r3, #52	; 0x34
 800b7c8:	fb01 f303 	mul.w	r3, r1, r3
 800b7cc:	4413      	add	r3, r2
 800b7ce:	3390      	adds	r3, #144	; 0x90
 800b7d0:	2205      	movs	r2, #5
 800b7d2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7da:	4619      	mov	r1, r3
 800b7dc:	693a      	ldr	r2, [r7, #16]
 800b7de:	2334      	movs	r3, #52	; 0x34
 800b7e0:	fb01 f303 	mul.w	r3, r1, r3
 800b7e4:	4413      	add	r3, r2
 800b7e6:	3391      	adds	r3, #145	; 0x91
 800b7e8:	2201      	movs	r2, #1
 800b7ea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	693a      	ldr	r2, [r7, #16]
 800b7f6:	2334      	movs	r3, #52	; 0x34
 800b7f8:	fb01 f303 	mul.w	r3, r1, r3
 800b7fc:	4413      	add	r3, r2
 800b7fe:	3392      	adds	r3, #146	; 0x92
 800b800:	2202      	movs	r2, #2
 800b802:	701a      	strb	r2, [r3, #0]
            break;
 800b804:	e119      	b.n	800ba3a <USBH_MSC_Process+0x4e6>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 800b806:	7bbb      	ldrb	r3, [r7, #14]
 800b808:	2b04      	cmp	r3, #4
 800b80a:	f040 8116 	bne.w	800ba3a <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b814:	4619      	mov	r1, r3
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	2334      	movs	r3, #52	; 0x34
 800b81a:	fb01 f303 	mul.w	r3, r1, r3
 800b81e:	4413      	add	r3, r2
 800b820:	3390      	adds	r3, #144	; 0x90
 800b822:	2201      	movs	r2, #1
 800b824:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b826:	693b      	ldr	r3, [r7, #16]
 800b828:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b82c:	4619      	mov	r1, r3
 800b82e:	693a      	ldr	r2, [r7, #16]
 800b830:	2334      	movs	r3, #52	; 0x34
 800b832:	fb01 f303 	mul.w	r3, r1, r3
 800b836:	4413      	add	r3, r2
 800b838:	3391      	adds	r3, #145	; 0x91
 800b83a:	2202      	movs	r2, #2
 800b83c:	701a      	strb	r2, [r3, #0]
            break;
 800b83e:	e0fc      	b.n	800ba3a <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 800b840:	693b      	ldr	r3, [r7, #16]
 800b842:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b846:	b2d9      	uxtb	r1, r3
 800b848:	693b      	ldr	r3, [r7, #16]
 800b84a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b84e:	461a      	mov	r2, r3
 800b850:	2334      	movs	r3, #52	; 0x34
 800b852:	fb02 f303 	mul.w	r3, r2, r3
 800b856:	3390      	adds	r3, #144	; 0x90
 800b858:	693a      	ldr	r2, [r7, #16]
 800b85a:	4413      	add	r3, r2
 800b85c:	3304      	adds	r3, #4
 800b85e:	461a      	mov	r2, r3
 800b860:	6878      	ldr	r0, [r7, #4]
 800b862:	f000 fea8 	bl	800c5b6 <USBH_MSC_SCSI_ReadCapacity>
 800b866:	4603      	mov	r3, r0
 800b868:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b86a:	7bfb      	ldrb	r3, [r7, #15]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d120      	bne.n	800b8b2 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b876:	4619      	mov	r1, r3
 800b878:	693a      	ldr	r2, [r7, #16]
 800b87a:	2334      	movs	r3, #52	; 0x34
 800b87c:	fb01 f303 	mul.w	r3, r1, r3
 800b880:	4413      	add	r3, r2
 800b882:	3390      	adds	r3, #144	; 0x90
 800b884:	2201      	movs	r2, #1
 800b886:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b88e:	4619      	mov	r1, r3
 800b890:	693a      	ldr	r2, [r7, #16]
 800b892:	2334      	movs	r3, #52	; 0x34
 800b894:	fb01 f303 	mul.w	r3, r1, r3
 800b898:	4413      	add	r3, r2
 800b89a:	3391      	adds	r3, #145	; 0x91
 800b89c:	2200      	movs	r2, #0
 800b89e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b8a0:	693b      	ldr	r3, [r7, #16]
 800b8a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	b29a      	uxth	r2, r3
 800b8aa:	693b      	ldr	r3, [r7, #16]
 800b8ac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800b8b0:	e0c5      	b.n	800ba3e <USBH_MSC_Process+0x4ea>
            else if (scsi_status == USBH_FAIL)
 800b8b2:	7bfb      	ldrb	r3, [r7, #15]
 800b8b4:	2b02      	cmp	r3, #2
 800b8b6:	d10c      	bne.n	800b8d2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8be:	4619      	mov	r1, r3
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	2334      	movs	r3, #52	; 0x34
 800b8c4:	fb01 f303 	mul.w	r3, r1, r3
 800b8c8:	4413      	add	r3, r2
 800b8ca:	3390      	adds	r3, #144	; 0x90
 800b8cc:	2205      	movs	r2, #5
 800b8ce:	701a      	strb	r2, [r3, #0]
            break;
 800b8d0:	e0b5      	b.n	800ba3e <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
 800b8d4:	2b04      	cmp	r3, #4
 800b8d6:	f040 80b2 	bne.w	800ba3e <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b8da:	693b      	ldr	r3, [r7, #16]
 800b8dc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	693a      	ldr	r2, [r7, #16]
 800b8e4:	2334      	movs	r3, #52	; 0x34
 800b8e6:	fb01 f303 	mul.w	r3, r1, r3
 800b8ea:	4413      	add	r3, r2
 800b8ec:	3390      	adds	r3, #144	; 0x90
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	2334      	movs	r3, #52	; 0x34
 800b8fe:	fb01 f303 	mul.w	r3, r1, r3
 800b902:	4413      	add	r3, r2
 800b904:	3391      	adds	r3, #145	; 0x91
 800b906:	2202      	movs	r2, #2
 800b908:	701a      	strb	r2, [r3, #0]
            break;
 800b90a:	e098      	b.n	800ba3e <USBH_MSC_Process+0x4ea>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b912:	b2d9      	uxtb	r1, r3
 800b914:	693b      	ldr	r3, [r7, #16]
 800b916:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b91a:	461a      	mov	r2, r3
 800b91c:	2334      	movs	r3, #52	; 0x34
 800b91e:	fb02 f303 	mul.w	r3, r2, r3
 800b922:	3398      	adds	r3, #152	; 0x98
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	4413      	add	r3, r2
 800b928:	3304      	adds	r3, #4
 800b92a:	461a      	mov	r2, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 ff62 	bl	800c7f6 <USBH_MSC_SCSI_RequestSense>
 800b932:	4603      	mov	r3, r0
 800b934:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800b936:	7bfb      	ldrb	r3, [r7, #15]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d145      	bne.n	800b9c8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b942:	4619      	mov	r1, r3
 800b944:	693a      	ldr	r2, [r7, #16]
 800b946:	2334      	movs	r3, #52	; 0x34
 800b948:	fb01 f303 	mul.w	r3, r1, r3
 800b94c:	4413      	add	r3, r2
 800b94e:	339c      	adds	r3, #156	; 0x9c
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	2b06      	cmp	r3, #6
 800b954:	d00c      	beq.n	800b970 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 800b956:	693b      	ldr	r3, [r7, #16]
 800b958:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b95c:	4619      	mov	r1, r3
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	2334      	movs	r3, #52	; 0x34
 800b962:	fb01 f303 	mul.w	r3, r1, r3
 800b966:	4413      	add	r3, r2
 800b968:	339c      	adds	r3, #156	; 0x9c
 800b96a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800b96c:	2b02      	cmp	r3, #2
 800b96e:	d117      	bne.n	800b9a0 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800b97c:	1ad3      	subs	r3, r2, r3
 800b97e:	f242 720f 	movw	r2, #9999	; 0x270f
 800b982:	4293      	cmp	r3, r2
 800b984:	d80c      	bhi.n	800b9a0 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b98c:	4619      	mov	r1, r3
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	2334      	movs	r3, #52	; 0x34
 800b992:	fb01 f303 	mul.w	r3, r1, r3
 800b996:	4413      	add	r3, r2
 800b998:	3390      	adds	r3, #144	; 0x90
 800b99a:	2202      	movs	r2, #2
 800b99c:	701a      	strb	r2, [r3, #0]
                  break;
 800b99e:	e051      	b.n	800ba44 <USBH_MSC_Process+0x4f0>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b9a0:	693b      	ldr	r3, [r7, #16]
 800b9a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9a6:	4619      	mov	r1, r3
 800b9a8:	693a      	ldr	r2, [r7, #16]
 800b9aa:	2334      	movs	r3, #52	; 0x34
 800b9ac:	fb01 f303 	mul.w	r3, r1, r3
 800b9b0:	4413      	add	r3, r2
 800b9b2:	3390      	adds	r3, #144	; 0x90
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 800b9b8:	693b      	ldr	r3, [r7, #16]
 800b9ba:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9be:	3301      	adds	r3, #1
 800b9c0:	b29a      	uxth	r2, r3
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 800b9c8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	d10c      	bne.n	800b9e8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800b9ce:	693b      	ldr	r3, [r7, #16]
 800b9d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	693a      	ldr	r2, [r7, #16]
 800b9d8:	2334      	movs	r3, #52	; 0x34
 800b9da:	fb01 f303 	mul.w	r3, r1, r3
 800b9de:	4413      	add	r3, r2
 800b9e0:	3390      	adds	r3, #144	; 0x90
 800b9e2:	2208      	movs	r2, #8
 800b9e4:	701a      	strb	r2, [r3, #0]
            break;
 800b9e6:	e02c      	b.n	800ba42 <USBH_MSC_Process+0x4ee>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 800b9e8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ea:	2b04      	cmp	r3, #4
 800b9ec:	d129      	bne.n	800ba42 <USBH_MSC_Process+0x4ee>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800b9f4:	4619      	mov	r1, r3
 800b9f6:	693a      	ldr	r2, [r7, #16]
 800b9f8:	2334      	movs	r3, #52	; 0x34
 800b9fa:	fb01 f303 	mul.w	r3, r1, r3
 800b9fe:	4413      	add	r3, r2
 800ba00:	3390      	adds	r3, #144	; 0x90
 800ba02:	2201      	movs	r2, #1
 800ba04:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba0c:	4619      	mov	r1, r3
 800ba0e:	693a      	ldr	r2, [r7, #16]
 800ba10:	2334      	movs	r3, #52	; 0x34
 800ba12:	fb01 f303 	mul.w	r3, r1, r3
 800ba16:	4413      	add	r3, r2
 800ba18:	3391      	adds	r3, #145	; 0x91
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	701a      	strb	r2, [r3, #0]
            break;
 800ba1e:	e010      	b.n	800ba42 <USBH_MSC_Process+0x4ee>
            MSC_Handle->current_lun++;
 800ba20:	693b      	ldr	r3, [r7, #16]
 800ba22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800ba26:	3301      	adds	r3, #1
 800ba28:	b29a      	uxth	r2, r3
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 800ba30:	e008      	b.n	800ba44 <USBH_MSC_Process+0x4f0>
            break;
 800ba32:	bf00      	nop
 800ba34:	e006      	b.n	800ba44 <USBH_MSC_Process+0x4f0>
            break;
 800ba36:	bf00      	nop
 800ba38:	e004      	b.n	800ba44 <USBH_MSC_Process+0x4f0>
            break;
 800ba3a:	bf00      	nop
 800ba3c:	e002      	b.n	800ba44 <USBH_MSC_Process+0x4f0>
            break;
 800ba3e:	bf00      	nop
 800ba40:	e000      	b.n	800ba44 <USBH_MSC_Process+0x4f0>
            break;
 800ba42:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2204      	movs	r2, #4
 800ba48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba58:	2300      	movs	r3, #0
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	f003 ff0e 	bl	800f87c <osMessageQueuePut>
      break;
 800ba60:	e01e      	b.n	800baa0 <USBH_MSC_Process+0x54c>
        MSC_Handle->current_lun = 0U;
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2200      	movs	r2, #0
 800ba66:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800ba6a:	693b      	ldr	r3, [r7, #16]
 800ba6c:	2201      	movs	r2, #1
 800ba6e:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2204      	movs	r2, #4
 800ba74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ba84:	2300      	movs	r3, #0
 800ba86:	2200      	movs	r2, #0
 800ba88:	f003 fef8 	bl	800f87c <osMessageQueuePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ba92:	2102      	movs	r1, #2
 800ba94:	6878      	ldr	r0, [r7, #4]
 800ba96:	4798      	blx	r3
      break;
 800ba98:	e002      	b.n	800baa0 <USBH_MSC_Process+0x54c>
      error = USBH_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	75fb      	strb	r3, [r7, #23]
      break;
 800ba9e:	bf00      	nop
  }
  return error;
 800baa0:	7dfb      	ldrb	r3, [r7, #23]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3718      	adds	r7, #24
 800baa6:	46bd      	mov	sp, r7
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop

0800baac <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800bab4:	2300      	movs	r3, #0
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	370c      	adds	r7, #12
 800baba:	46bd      	mov	sp, r7
 800babc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac0:	4770      	bx	lr

0800bac2 <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bac2:	b580      	push	{r7, lr}
 800bac4:	b088      	sub	sp, #32
 800bac6:	af02      	add	r7, sp, #8
 800bac8:	6078      	str	r0, [r7, #4]
 800baca:	460b      	mov	r3, r1
 800bacc:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bad4:	69db      	ldr	r3, [r3, #28]
 800bad6:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 800bad8:	2301      	movs	r3, #1
 800bada:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 800badc:	2301      	movs	r3, #1
 800bade:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 800bae0:	78fb      	ldrb	r3, [r7, #3]
 800bae2:	693a      	ldr	r2, [r7, #16]
 800bae4:	2134      	movs	r1, #52	; 0x34
 800bae6:	fb01 f303 	mul.w	r3, r1, r3
 800baea:	4413      	add	r3, r2
 800baec:	3390      	adds	r3, #144	; 0x90
 800baee:	781b      	ldrb	r3, [r3, #0]
 800baf0:	2b07      	cmp	r3, #7
 800baf2:	d04b      	beq.n	800bb8c <USBH_MSC_RdWrProcess+0xca>
 800baf4:	2b07      	cmp	r3, #7
 800baf6:	f300 80d2 	bgt.w	800bc9e <USBH_MSC_RdWrProcess+0x1dc>
 800bafa:	2b05      	cmp	r3, #5
 800bafc:	f000 8089 	beq.w	800bc12 <USBH_MSC_RdWrProcess+0x150>
 800bb00:	2b06      	cmp	r3, #6
 800bb02:	f040 80cc 	bne.w	800bc9e <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 800bb06:	78f9      	ldrb	r1, [r7, #3]
 800bb08:	2300      	movs	r3, #0
 800bb0a:	9300      	str	r3, [sp, #0]
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	2200      	movs	r2, #0
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 ff54 	bl	800c9be <USBH_MSC_SCSI_Read>
 800bb16:	4603      	mov	r3, r0
 800bb18:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bb1a:	7bfb      	ldrb	r3, [r7, #15]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d10b      	bne.n	800bb38 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	2134      	movs	r1, #52	; 0x34
 800bb26:	fb01 f303 	mul.w	r3, r1, r3
 800bb2a:	4413      	add	r3, r2
 800bb2c:	3390      	adds	r3, #144	; 0x90
 800bb2e:	2201      	movs	r2, #1
 800bb30:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bb32:	2300      	movs	r3, #0
 800bb34:	75fb      	strb	r3, [r7, #23]
 800bb36:	e01a      	b.n	800bb6e <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 800bb38:	7bfb      	ldrb	r3, [r7, #15]
 800bb3a:	2b02      	cmp	r3, #2
 800bb3c:	d109      	bne.n	800bb52 <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bb3e:	78fb      	ldrb	r3, [r7, #3]
 800bb40:	693a      	ldr	r2, [r7, #16]
 800bb42:	2134      	movs	r1, #52	; 0x34
 800bb44:	fb01 f303 	mul.w	r3, r1, r3
 800bb48:	4413      	add	r3, r2
 800bb4a:	3390      	adds	r3, #144	; 0x90
 800bb4c:	2205      	movs	r2, #5
 800bb4e:	701a      	strb	r2, [r3, #0]
 800bb50:	e00d      	b.n	800bb6e <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bb52:	7bfb      	ldrb	r3, [r7, #15]
 800bb54:	2b04      	cmp	r3, #4
 800bb56:	d10a      	bne.n	800bb6e <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bb58:	78fb      	ldrb	r3, [r7, #3]
 800bb5a:	693a      	ldr	r2, [r7, #16]
 800bb5c:	2134      	movs	r1, #52	; 0x34
 800bb5e:	fb01 f303 	mul.w	r3, r1, r3
 800bb62:	4413      	add	r3, r2
 800bb64:	3390      	adds	r3, #144	; 0x90
 800bb66:	2208      	movs	r2, #8
 800bb68:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bb6a:	2302      	movs	r3, #2
 800bb6c:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2204      	movs	r2, #4
 800bb72:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bb82:	2300      	movs	r3, #0
 800bb84:	2200      	movs	r2, #0
 800bb86:	f003 fe79 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800bb8a:	e089      	b.n	800bca0 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 800bb8c:	78f9      	ldrb	r1, [r7, #3]
 800bb8e:	2300      	movs	r3, #0
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	2300      	movs	r3, #0
 800bb94:	2200      	movs	r2, #0
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fea6 	bl	800c8e8 <USBH_MSC_SCSI_Write>
 800bb9c:	4603      	mov	r3, r0
 800bb9e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d10b      	bne.n	800bbbe <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bba6:	78fb      	ldrb	r3, [r7, #3]
 800bba8:	693a      	ldr	r2, [r7, #16]
 800bbaa:	2134      	movs	r1, #52	; 0x34
 800bbac:	fb01 f303 	mul.w	r3, r1, r3
 800bbb0:	4413      	add	r3, r2
 800bbb2:	3390      	adds	r3, #144	; 0x90
 800bbb4:	2201      	movs	r2, #1
 800bbb6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	75fb      	strb	r3, [r7, #23]
 800bbbc:	e01a      	b.n	800bbf4 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
 800bbc0:	2b02      	cmp	r3, #2
 800bbc2:	d109      	bne.n	800bbd8 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800bbc4:	78fb      	ldrb	r3, [r7, #3]
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	2134      	movs	r1, #52	; 0x34
 800bbca:	fb01 f303 	mul.w	r3, r1, r3
 800bbce:	4413      	add	r3, r2
 800bbd0:	3390      	adds	r3, #144	; 0x90
 800bbd2:	2205      	movs	r2, #5
 800bbd4:	701a      	strb	r2, [r3, #0]
 800bbd6:	e00d      	b.n	800bbf4 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bbd8:	7bfb      	ldrb	r3, [r7, #15]
 800bbda:	2b04      	cmp	r3, #4
 800bbdc:	d10a      	bne.n	800bbf4 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bbde:	78fb      	ldrb	r3, [r7, #3]
 800bbe0:	693a      	ldr	r2, [r7, #16]
 800bbe2:	2134      	movs	r1, #52	; 0x34
 800bbe4:	fb01 f303 	mul.w	r3, r1, r3
 800bbe8:	4413      	add	r3, r2
 800bbea:	3390      	adds	r3, #144	; 0x90
 800bbec:	2208      	movs	r2, #8
 800bbee:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bbf0:	2302      	movs	r3, #2
 800bbf2:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2204      	movs	r2, #4
 800bbf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc08:	2300      	movs	r3, #0
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	f003 fe36 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800bc10:	e046      	b.n	800bca0 <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800bc12:	78fb      	ldrb	r3, [r7, #3]
 800bc14:	2234      	movs	r2, #52	; 0x34
 800bc16:	fb02 f303 	mul.w	r3, r2, r3
 800bc1a:	3398      	adds	r3, #152	; 0x98
 800bc1c:	693a      	ldr	r2, [r7, #16]
 800bc1e:	4413      	add	r3, r2
 800bc20:	1d1a      	adds	r2, r3, #4
 800bc22:	78fb      	ldrb	r3, [r7, #3]
 800bc24:	4619      	mov	r1, r3
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f000 fde5 	bl	800c7f6 <USBH_MSC_SCSI_RequestSense>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d113      	bne.n	800bc5e <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800bc36:	78fb      	ldrb	r3, [r7, #3]
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	2134      	movs	r1, #52	; 0x34
 800bc3c:	fb01 f303 	mul.w	r3, r1, r3
 800bc40:	4413      	add	r3, r2
 800bc42:	3390      	adds	r3, #144	; 0x90
 800bc44:	2201      	movs	r2, #1
 800bc46:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 800bc48:	78fb      	ldrb	r3, [r7, #3]
 800bc4a:	693a      	ldr	r2, [r7, #16]
 800bc4c:	2134      	movs	r1, #52	; 0x34
 800bc4e:	fb01 f303 	mul.w	r3, r1, r3
 800bc52:	4413      	add	r3, r2
 800bc54:	3391      	adds	r3, #145	; 0x91
 800bc56:	2202      	movs	r2, #2
 800bc58:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 800bc5a:	2302      	movs	r3, #2
 800bc5c:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 800bc5e:	7bfb      	ldrb	r3, [r7, #15]
 800bc60:	2b02      	cmp	r3, #2
 800bc62:	d00d      	beq.n	800bc80 <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800bc64:	7bfb      	ldrb	r3, [r7, #15]
 800bc66:	2b04      	cmp	r3, #4
 800bc68:	d10a      	bne.n	800bc80 <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 800bc6a:	78fb      	ldrb	r3, [r7, #3]
 800bc6c:	693a      	ldr	r2, [r7, #16]
 800bc6e:	2134      	movs	r1, #52	; 0x34
 800bc70:	fb01 f303 	mul.w	r3, r1, r3
 800bc74:	4413      	add	r3, r2
 800bc76:	3390      	adds	r3, #144	; 0x90
 800bc78:	2208      	movs	r2, #8
 800bc7a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800bc7c:	2302      	movs	r3, #2
 800bc7e:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	2204      	movs	r2, #4
 800bc84:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800bc94:	2300      	movs	r3, #0
 800bc96:	2200      	movs	r2, #0
 800bc98:	f003 fdf0 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800bc9c:	e000      	b.n	800bca0 <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 800bc9e:	bf00      	nop

  }
  return error;
 800bca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bca2:	4618      	mov	r0, r3
 800bca4:	3718      	adds	r7, #24
 800bca6:	46bd      	mov	sp, r7
 800bca8:	bd80      	pop	{r7, pc}

0800bcaa <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bcaa:	b480      	push	{r7}
 800bcac:	b085      	sub	sp, #20
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	6078      	str	r0, [r7, #4]
 800bcb2:	460b      	mov	r3, r1
 800bcb4:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bcbc:	69db      	ldr	r3, [r3, #28]
 800bcbe:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	b2db      	uxtb	r3, r3
 800bcc6:	2b0b      	cmp	r3, #11
 800bcc8:	d10c      	bne.n	800bce4 <USBH_MSC_UnitIsReady+0x3a>
 800bcca:	78fb      	ldrb	r3, [r7, #3]
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	2134      	movs	r1, #52	; 0x34
 800bcd0:	fb01 f303 	mul.w	r3, r1, r3
 800bcd4:	4413      	add	r3, r2
 800bcd6:	3391      	adds	r3, #145	; 0x91
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d102      	bne.n	800bce4 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800bcde:	2301      	movs	r3, #1
 800bce0:	73fb      	strb	r3, [r7, #15]
 800bce2:	e001      	b.n	800bce8 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 800bce4:	2300      	movs	r3, #0
 800bce6:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 800bce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 800bcf6:	b580      	push	{r7, lr}
 800bcf8:	b086      	sub	sp, #24
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	60f8      	str	r0, [r7, #12]
 800bcfe:	460b      	mov	r3, r1
 800bd00:	607a      	str	r2, [r7, #4]
 800bd02:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd0a:	69db      	ldr	r3, [r3, #28]
 800bd0c:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	b2db      	uxtb	r3, r3
 800bd14:	2b0b      	cmp	r3, #11
 800bd16:	d10d      	bne.n	800bd34 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800bd18:	7afb      	ldrb	r3, [r7, #11]
 800bd1a:	2234      	movs	r2, #52	; 0x34
 800bd1c:	fb02 f303 	mul.w	r3, r2, r3
 800bd20:	3390      	adds	r3, #144	; 0x90
 800bd22:	697a      	ldr	r2, [r7, #20]
 800bd24:	4413      	add	r3, r2
 800bd26:	2234      	movs	r2, #52	; 0x34
 800bd28:	4619      	mov	r1, r3
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f007 fae2 	bl	80132f4 <memcpy>
    return USBH_OK;
 800bd30:	2300      	movs	r3, #0
 800bd32:	e000      	b.n	800bd36 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 800bd34:	2302      	movs	r3, #2
  }
}
 800bd36:	4618      	mov	r0, r3
 800bd38:	3718      	adds	r7, #24
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b088      	sub	sp, #32
 800bd42:	af02      	add	r7, sp, #8
 800bd44:	60f8      	str	r0, [r7, #12]
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	603b      	str	r3, [r7, #0]
 800bd4a:	460b      	mov	r3, r1
 800bd4c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bd54:	69db      	ldr	r3, [r3, #28]
 800bd56:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bd5e:	b2db      	uxtb	r3, r3
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d00e      	beq.n	800bd82 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800bd6a:	2b0b      	cmp	r3, #11
 800bd6c:	d109      	bne.n	800bd82 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800bd6e:	7afb      	ldrb	r3, [r7, #11]
 800bd70:	697a      	ldr	r2, [r7, #20]
 800bd72:	2134      	movs	r1, #52	; 0x34
 800bd74:	fb01 f303 	mul.w	r3, r1, r3
 800bd78:	4413      	add	r3, r2
 800bd7a:	3390      	adds	r3, #144	; 0x90
 800bd7c:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	d001      	beq.n	800bd86 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 800bd82:	2302      	movs	r3, #2
 800bd84:	e040      	b.n	800be08 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	2206      	movs	r2, #6
 800bd8a:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 800bd8c:	7afb      	ldrb	r3, [r7, #11]
 800bd8e:	697a      	ldr	r2, [r7, #20]
 800bd90:	2134      	movs	r1, #52	; 0x34
 800bd92:	fb01 f303 	mul.w	r3, r1, r3
 800bd96:	4413      	add	r3, r2
 800bd98:	3390      	adds	r3, #144	; 0x90
 800bd9a:	2206      	movs	r2, #6
 800bd9c:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800bd9e:	7afb      	ldrb	r3, [r7, #11]
 800bda0:	b29a      	uxth	r2, r3
 800bda2:	697b      	ldr	r3, [r7, #20]
 800bda4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800bda8:	7af9      	ldrb	r1, [r7, #11]
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	9300      	str	r3, [sp, #0]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	687a      	ldr	r2, [r7, #4]
 800bdb2:	68f8      	ldr	r0, [r7, #12]
 800bdb4:	f000 fe03 	bl	800c9be <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bdbe:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bdc0:	e016      	b.n	800bdf0 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800bdc8:	693b      	ldr	r3, [r7, #16]
 800bdca:	1ad2      	subs	r2, r2, r3
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	f242 7110 	movw	r1, #10000	; 0x2710
 800bdd2:	fb01 f303 	mul.w	r3, r1, r3
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d805      	bhi.n	800bde6 <USBH_MSC_Read+0xa8>
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800bde0:	b2db      	uxtb	r3, r3
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d104      	bne.n	800bdf0 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	2201      	movs	r2, #1
 800bdea:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bdec:	2302      	movs	r3, #2
 800bdee:	e00b      	b.n	800be08 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bdf0:	7afb      	ldrb	r3, [r7, #11]
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	68f8      	ldr	r0, [r7, #12]
 800bdf6:	f7ff fe64 	bl	800bac2 <USBH_MSC_RdWrProcess>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d0e0      	beq.n	800bdc2 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	2201      	movs	r2, #1
 800be04:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3718      	adds	r7, #24
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}

0800be10 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b088      	sub	sp, #32
 800be14:	af02      	add	r7, sp, #8
 800be16:	60f8      	str	r0, [r7, #12]
 800be18:	607a      	str	r2, [r7, #4]
 800be1a:	603b      	str	r3, [r7, #0]
 800be1c:	460b      	mov	r3, r1
 800be1e:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800be26:	69db      	ldr	r3, [r3, #28]
 800be28:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800be30:	b2db      	uxtb	r3, r3
 800be32:	2b00      	cmp	r3, #0
 800be34:	d00e      	beq.n	800be54 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800be3c:	2b0b      	cmp	r3, #11
 800be3e:	d109      	bne.n	800be54 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800be40:	7afb      	ldrb	r3, [r7, #11]
 800be42:	697a      	ldr	r2, [r7, #20]
 800be44:	2134      	movs	r1, #52	; 0x34
 800be46:	fb01 f303 	mul.w	r3, r1, r3
 800be4a:	4413      	add	r3, r2
 800be4c:	3390      	adds	r3, #144	; 0x90
 800be4e:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800be50:	2b01      	cmp	r3, #1
 800be52:	d001      	beq.n	800be58 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 800be54:	2302      	movs	r3, #2
 800be56:	e040      	b.n	800beda <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	2207      	movs	r2, #7
 800be5c:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 800be5e:	7afb      	ldrb	r3, [r7, #11]
 800be60:	697a      	ldr	r2, [r7, #20]
 800be62:	2134      	movs	r1, #52	; 0x34
 800be64:	fb01 f303 	mul.w	r3, r1, r3
 800be68:	4413      	add	r3, r2
 800be6a:	3390      	adds	r3, #144	; 0x90
 800be6c:	2207      	movs	r2, #7
 800be6e:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 800be70:	7afb      	ldrb	r3, [r7, #11]
 800be72:	b29a      	uxth	r2, r3
 800be74:	697b      	ldr	r3, [r7, #20]
 800be76:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800be7a:	7af9      	ldrb	r1, [r7, #11]
 800be7c:	6a3b      	ldr	r3, [r7, #32]
 800be7e:	9300      	str	r3, [sp, #0]
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	687a      	ldr	r2, [r7, #4]
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f000 fd2f 	bl	800c8e8 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800be90:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800be92:	e016      	b.n	800bec2 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800be9a:	693b      	ldr	r3, [r7, #16]
 800be9c:	1ad2      	subs	r2, r2, r3
 800be9e:	6a3b      	ldr	r3, [r7, #32]
 800bea0:	f242 7110 	movw	r1, #10000	; 0x2710
 800bea4:	fb01 f303 	mul.w	r3, r1, r3
 800bea8:	429a      	cmp	r2, r3
 800beaa:	d805      	bhi.n	800beb8 <USBH_MSC_Write+0xa8>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800beb2:	b2db      	uxtb	r3, r3
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d104      	bne.n	800bec2 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	2201      	movs	r2, #1
 800bebc:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800bebe:	2302      	movs	r3, #2
 800bec0:	e00b      	b.n	800beda <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800bec2:	7afb      	ldrb	r3, [r7, #11]
 800bec4:	4619      	mov	r1, r3
 800bec6:	68f8      	ldr	r0, [r7, #12]
 800bec8:	f7ff fdfb 	bl	800bac2 <USBH_MSC_RdWrProcess>
 800becc:	4603      	mov	r3, r0
 800bece:	2b01      	cmp	r3, #1
 800bed0:	d0e0      	beq.n	800be94 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800bed2:	697b      	ldr	r3, [r7, #20]
 800bed4:	2201      	movs	r2, #1
 800bed6:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 800bed8:	2300      	movs	r3, #0
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3718      	adds	r7, #24
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}

0800bee2 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800bee2:	b580      	push	{r7, lr}
 800bee4:	b082      	sub	sp, #8
 800bee6:	af00      	add	r7, sp, #0
 800bee8:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2221      	movs	r2, #33	; 0x21
 800beee:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	22ff      	movs	r2, #255	; 0xff
 800bef4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2200      	movs	r2, #0
 800befa:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 800bf08:	2200      	movs	r2, #0
 800bf0a:	2100      	movs	r1, #0
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f001 ff76 	bl	800ddfe <USBH_CtlReq>
 800bf12:	4603      	mov	r3, r0
}
 800bf14:	4618      	mov	r0, r3
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	22a1      	movs	r2, #161	; 0xa1
 800bf2a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	22fe      	movs	r2, #254	; 0xfe
 800bf30:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2200      	movs	r2, #0
 800bf36:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2201      	movs	r2, #1
 800bf42:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800bf44:	2201      	movs	r2, #1
 800bf46:	6839      	ldr	r1, [r7, #0]
 800bf48:	6878      	ldr	r0, [r7, #4]
 800bf4a:	f001 ff58 	bl	800ddfe <USBH_CtlReq>
 800bf4e:	4603      	mov	r3, r0
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	3708      	adds	r7, #8
 800bf54:	46bd      	mov	sp, r7
 800bf56:	bd80      	pop	{r7, pc}

0800bf58 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bf66:	69db      	ldr	r3, [r3, #28]
 800bf68:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	4a09      	ldr	r2, [pc, #36]	; (800bf94 <USBH_MSC_BOT_Init+0x3c>)
 800bf6e:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	4a09      	ldr	r2, [pc, #36]	; (800bf98 <USBH_MSC_BOT_Init+0x40>)
 800bf74:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	2201      	movs	r2, #1
 800bf7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	2201      	movs	r2, #1
 800bf82:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800bf86:	2300      	movs	r3, #0
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3714      	adds	r7, #20
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf92:	4770      	bx	lr
 800bf94:	43425355 	.word	0x43425355
 800bf98:	20304050 	.word	0x20304050

0800bf9c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800bf9c:	b580      	push	{r7, lr}
 800bf9e:	b088      	sub	sp, #32
 800bfa0:	af02      	add	r7, sp, #8
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	460b      	mov	r3, r1
 800bfa6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800bfac:	2301      	movs	r3, #1
 800bfae:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800bfb4:	2300      	movs	r3, #0
 800bfb6:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800bfbe:	69db      	ldr	r3, [r3, #28]
 800bfc0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bfcc:	3b01      	subs	r3, #1
 800bfce:	2b0a      	cmp	r3, #10
 800bfd0:	f200 822a 	bhi.w	800c428 <USBH_MSC_BOT_Process+0x48c>
 800bfd4:	a201      	add	r2, pc, #4	; (adr r2, 800bfdc <USBH_MSC_BOT_Process+0x40>)
 800bfd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfda:	bf00      	nop
 800bfdc:	0800c009 	.word	0x0800c009
 800bfe0:	0800c031 	.word	0x0800c031
 800bfe4:	0800c0ef 	.word	0x0800c0ef
 800bfe8:	0800c10d 	.word	0x0800c10d
 800bfec:	0800c1c9 	.word	0x0800c1c9
 800bff0:	0800c1eb 	.word	0x0800c1eb
 800bff4:	0800c2d7 	.word	0x0800c2d7
 800bff8:	0800c2f3 	.word	0x0800c2f3
 800bffc:	0800c37d 	.word	0x0800c37d
 800c000:	0800c3ad 	.word	0x0800c3ad
 800c004:	0800c40f 	.word	0x0800c40f
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	78fa      	ldrb	r2, [r7, #3]
 800c00c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	2202      	movs	r2, #2
 800c014:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	795b      	ldrb	r3, [r3, #5]
 800c022:	2201      	movs	r2, #1
 800c024:	9200      	str	r2, [sp, #0]
 800c026:	221f      	movs	r2, #31
 800c028:	6878      	ldr	r0, [r7, #4]
 800c02a:	f002 f9e6 	bl	800e3fa <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800c02e:	e20a      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	795b      	ldrb	r3, [r3, #5]
 800c034:	4619      	mov	r1, r3
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f007 f83c 	bl	80130b4 <USBH_LL_GetURBState>
 800c03c:	4603      	mov	r3, r0
 800c03e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c040:	7d3b      	ldrb	r3, [r7, #20]
 800c042:	2b01      	cmp	r3, #1
 800c044:	d126      	bne.n	800c094 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00f      	beq.n	800c06e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800c054:	b25b      	sxtb	r3, r3
 800c056:	2b00      	cmp	r3, #0
 800c058:	da04      	bge.n	800c064 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	2203      	movs	r2, #3
 800c05e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c062:	e008      	b.n	800c076 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800c064:	693b      	ldr	r3, [r7, #16]
 800c066:	2205      	movs	r2, #5
 800c068:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800c06c:	e003      	b.n	800c076 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	2207      	movs	r2, #7
 800c072:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2202      	movs	r2, #2
 800c07a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c08a:	2300      	movs	r3, #0
 800c08c:	2200      	movs	r2, #0
 800c08e:	f003 fbf5 	bl	800f87c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800c092:	e1cb      	b.n	800c42c <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c094:	7d3b      	ldrb	r3, [r7, #20]
 800c096:	2b02      	cmp	r3, #2
 800c098:	d112      	bne.n	800c0c0 <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	2201      	movs	r2, #1
 800c09e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2202      	movs	r2, #2
 800c0a6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f003 fbdf 	bl	800f87c <osMessageQueuePut>
      break;
 800c0be:	e1b5      	b.n	800c42c <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800c0c0:	7d3b      	ldrb	r3, [r7, #20]
 800c0c2:	2b05      	cmp	r3, #5
 800c0c4:	f040 81b2 	bne.w	800c42c <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	220a      	movs	r2, #10
 800c0cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	2202      	movs	r2, #2
 800c0d4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f003 fbc8 	bl	800f87c <osMessageQueuePut>
      break;
 800c0ec:	e19e      	b.n	800c42c <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	895a      	ldrh	r2, [r3, #10]
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	791b      	ldrb	r3, [r3, #4]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f002 f9a1 	bl	800e444 <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	2204      	movs	r2, #4
 800c106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 800c10a:	e19c      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c10c:	693b      	ldr	r3, [r7, #16]
 800c10e:	791b      	ldrb	r3, [r3, #4]
 800c110:	4619      	mov	r1, r3
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f006 ffce 	bl	80130b4 <USBH_LL_GetURBState>
 800c118:	4603      	mov	r3, r0
 800c11a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c11c:	7d3b      	ldrb	r3, [r7, #20]
 800c11e:	2b01      	cmp	r3, #1
 800c120:	d13b      	bne.n	800c19a <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	8952      	ldrh	r2, [r2, #10]
 800c12a:	4293      	cmp	r3, r2
 800c12c:	d910      	bls.n	800c150 <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	8952      	ldrh	r2, [r2, #10]
 800c138:	441a      	add	r2, r3
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800c140:	693b      	ldr	r3, [r7, #16]
 800c142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c144:	693a      	ldr	r2, [r7, #16]
 800c146:	8952      	ldrh	r2, [r2, #10]
 800c148:	1a9a      	subs	r2, r3, r2
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	65da      	str	r2, [r3, #92]	; 0x5c
 800c14e:	e002      	b.n	800c156 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	2200      	movs	r2, #0
 800c154:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d00a      	beq.n	800c174 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800c15e:	693b      	ldr	r3, [r7, #16]
 800c160:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c164:	693b      	ldr	r3, [r7, #16]
 800c166:	895a      	ldrh	r2, [r3, #10]
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	791b      	ldrb	r3, [r3, #4]
 800c16c:	6878      	ldr	r0, [r7, #4]
 800c16e:	f002 f969 	bl	800e444 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800c172:	e15d      	b.n	800c430 <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	2207      	movs	r2, #7
 800c178:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2202      	movs	r2, #2
 800c180:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c190:	2300      	movs	r3, #0
 800c192:	2200      	movs	r2, #0
 800c194:	f003 fb72 	bl	800f87c <osMessageQueuePut>
      break;
 800c198:	e14a      	b.n	800c430 <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 800c19a:	7d3b      	ldrb	r3, [r7, #20]
 800c19c:	2b05      	cmp	r3, #5
 800c19e:	f040 8147 	bne.w	800c430 <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	2209      	movs	r2, #9
 800c1a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c1be:	2300      	movs	r3, #0
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f003 fb5b 	bl	800f87c <osMessageQueuePut>
      break;
 800c1c6:	e133      	b.n	800c430 <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	891a      	ldrh	r2, [r3, #8]
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	795b      	ldrb	r3, [r3, #5]
 800c1d6:	2001      	movs	r0, #1
 800c1d8:	9000      	str	r0, [sp, #0]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	f002 f90d 	bl	800e3fa <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	2206      	movs	r2, #6
 800c1e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c1e8:	e12d      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800c1ea:	693b      	ldr	r3, [r7, #16]
 800c1ec:	795b      	ldrb	r3, [r3, #5]
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f006 ff5f 	bl	80130b4 <USBH_LL_GetURBState>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800c1fa:	7d3b      	ldrb	r3, [r7, #20]
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	d13d      	bne.n	800c27c <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800c200:	693b      	ldr	r3, [r7, #16]
 800c202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c204:	693a      	ldr	r2, [r7, #16]
 800c206:	8912      	ldrh	r2, [r2, #8]
 800c208:	4293      	cmp	r3, r2
 800c20a:	d910      	bls.n	800c22e <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800c20c:	693b      	ldr	r3, [r7, #16]
 800c20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	8912      	ldrh	r2, [r2, #8]
 800c216:	441a      	add	r2, r3
 800c218:	693b      	ldr	r3, [r7, #16]
 800c21a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	8912      	ldrh	r2, [r2, #8]
 800c226:	1a9a      	subs	r2, r3, r2
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	65da      	str	r2, [r3, #92]	; 0x5c
 800c22c:	e002      	b.n	800c234 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800c22e:	693b      	ldr	r3, [r7, #16]
 800c230:	2200      	movs	r2, #0
 800c232:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d00c      	beq.n	800c256 <USBH_MSC_BOT_Process+0x2ba>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 800c242:	693b      	ldr	r3, [r7, #16]
 800c244:	891a      	ldrh	r2, [r3, #8]
 800c246:	693b      	ldr	r3, [r7, #16]
 800c248:	795b      	ldrb	r3, [r3, #5]
 800c24a:	2001      	movs	r0, #1
 800c24c:	9000      	str	r0, [sp, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f002 f8d3 	bl	800e3fa <USBH_BulkSendData>
 800c254:	e003      	b.n	800c25e <USBH_MSC_BOT_Process+0x2c2>
                            MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	2207      	movs	r2, #7
 800c25a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	2202      	movs	r2, #2
 800c262:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c272:	2300      	movs	r3, #0
 800c274:	2200      	movs	r2, #0
 800c276:	f003 fb01 	bl	800f87c <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 800c27a:	e0db      	b.n	800c434 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c27c:	7d3b      	ldrb	r3, [r7, #20]
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d112      	bne.n	800c2a8 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 800c282:	693b      	ldr	r3, [r7, #16]
 800c284:	2205      	movs	r2, #5
 800c286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	2202      	movs	r2, #2
 800c28e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c29e:	2300      	movs	r3, #0
 800c2a0:	2200      	movs	r2, #0
 800c2a2:	f003 faeb 	bl	800f87c <osMessageQueuePut>
      break;
 800c2a6:	e0c5      	b.n	800c434 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 800c2a8:	7d3b      	ldrb	r3, [r7, #20]
 800c2aa:	2b05      	cmp	r3, #5
 800c2ac:	f040 80c2 	bne.w	800c434 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	220a      	movs	r2, #10
 800c2b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f003 fad4 	bl	800f87c <osMessageQueuePut>
      break;
 800c2d4:	e0ae      	b.n	800c434 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	f103 0178 	add.w	r1, r3, #120	; 0x78
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	791b      	ldrb	r3, [r3, #4]
 800c2e0:	220d      	movs	r2, #13
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f002 f8ae 	bl	800e444 <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	2208      	movs	r2, #8
 800c2ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c2f0:	e0a9      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	791b      	ldrb	r3, [r3, #4]
 800c2f6:	4619      	mov	r1, r3
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f006 fedb 	bl	80130b4 <USBH_LL_GetURBState>
 800c2fe:	4603      	mov	r3, r0
 800c300:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800c302:	7d3b      	ldrb	r3, [r7, #20]
 800c304:	2b01      	cmp	r3, #1
 800c306:	d123      	bne.n	800c350 <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	2201      	movs	r2, #1
 800c30c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f000 f8c5 	bl	800c4a8 <USBH_MSC_DecodeCSW>
 800c31e:	4603      	mov	r3, r0
 800c320:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800c322:	7d7b      	ldrb	r3, [r7, #21]
 800c324:	2b00      	cmp	r3, #0
 800c326:	d102      	bne.n	800c32e <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	75fb      	strb	r3, [r7, #23]
 800c32c:	e001      	b.n	800c332 <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800c32e:	2302      	movs	r3, #2
 800c330:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2202      	movs	r2, #2
 800c336:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c346:	2300      	movs	r3, #0
 800c348:	2200      	movs	r2, #0
 800c34a:	f003 fa97 	bl	800f87c <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 800c34e:	e073      	b.n	800c438 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800c350:	7d3b      	ldrb	r3, [r7, #20]
 800c352:	2b05      	cmp	r3, #5
 800c354:	d170      	bne.n	800c438 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	2209      	movs	r2, #9
 800c35a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2202      	movs	r2, #2
 800c362:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800c372:	2300      	movs	r3, #0
 800c374:	2200      	movs	r2, #0
 800c376:	f003 fa81 	bl	800f87c <osMessageQueuePut>
      break;
 800c37a:	e05d      	b.n	800c438 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800c37c:	78fb      	ldrb	r3, [r7, #3]
 800c37e:	2200      	movs	r2, #0
 800c380:	4619      	mov	r1, r3
 800c382:	6878      	ldr	r0, [r7, #4]
 800c384:	f000 f864 	bl	800c450 <USBH_MSC_BOT_Abort>
 800c388:	4603      	mov	r3, r0
 800c38a:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c38c:	7dbb      	ldrb	r3, [r7, #22]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d104      	bne.n	800c39c <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800c392:	693b      	ldr	r3, [r7, #16]
 800c394:	2207      	movs	r2, #7
 800c396:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800c39a:	e04f      	b.n	800c43c <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 800c39c:	7dbb      	ldrb	r3, [r7, #22]
 800c39e:	2b04      	cmp	r3, #4
 800c3a0:	d14c      	bne.n	800c43c <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c3a2:	693b      	ldr	r3, [r7, #16]
 800c3a4:	220b      	movs	r2, #11
 800c3a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c3aa:	e047      	b.n	800c43c <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800c3ac:	78fb      	ldrb	r3, [r7, #3]
 800c3ae:	2201      	movs	r2, #1
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f000 f84c 	bl	800c450 <USBH_MSC_BOT_Abort>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800c3bc:	7dbb      	ldrb	r3, [r7, #22]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d11d      	bne.n	800c3fe <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	795b      	ldrb	r3, [r3, #5]
 800c3c6:	4619      	mov	r1, r3
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f006 fed0 	bl	801316e <USBH_LL_GetToggle>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800c3d2:	693b      	ldr	r3, [r7, #16]
 800c3d4:	7959      	ldrb	r1, [r3, #5]
 800c3d6:	7bfb      	ldrb	r3, [r7, #15]
 800c3d8:	f1c3 0301 	rsb	r3, r3, #1
 800c3dc:	b2db      	uxtb	r3, r3
 800c3de:	461a      	mov	r2, r3
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f006 fe91 	bl	8013108 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800c3e6:	693b      	ldr	r3, [r7, #16]
 800c3e8:	791b      	ldrb	r3, [r3, #4]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f006 fe8a 	bl	8013108 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800c3f4:	693b      	ldr	r3, [r7, #16]
 800c3f6:	2209      	movs	r2, #9
 800c3f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800c3fc:	e020      	b.n	800c440 <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800c3fe:	7dbb      	ldrb	r3, [r7, #22]
 800c400:	2b04      	cmp	r3, #4
 800c402:	d11d      	bne.n	800c440 <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	220b      	movs	r2, #11
 800c408:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 800c40c:	e018      	b.n	800c440 <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f7ff fd67 	bl	800bee2 <USBH_MSC_BOT_REQ_Reset>
 800c414:	4603      	mov	r3, r0
 800c416:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800c418:	7dfb      	ldrb	r3, [r7, #23]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d112      	bne.n	800c444 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	2201      	movs	r2, #1
 800c422:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 800c426:	e00d      	b.n	800c444 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 800c428:	bf00      	nop
 800c42a:	e00c      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800c42c:	bf00      	nop
 800c42e:	e00a      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800c430:	bf00      	nop
 800c432:	e008      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800c434:	bf00      	nop
 800c436:	e006      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800c438:	bf00      	nop
 800c43a:	e004      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800c43c:	bf00      	nop
 800c43e:	e002      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800c440:	bf00      	nop
 800c442:	e000      	b.n	800c446 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800c444:	bf00      	nop
  }
  return status;
 800c446:	7dfb      	ldrb	r3, [r7, #23]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
 800c458:	460b      	mov	r3, r1
 800c45a:	70fb      	strb	r3, [r7, #3]
 800c45c:	4613      	mov	r3, r2
 800c45e:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800c460:	2302      	movs	r3, #2
 800c462:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c46a:	69db      	ldr	r3, [r3, #28]
 800c46c:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800c46e:	78bb      	ldrb	r3, [r7, #2]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d002      	beq.n	800c47a <USBH_MSC_BOT_Abort+0x2a>
 800c474:	2b01      	cmp	r3, #1
 800c476:	d009      	beq.n	800c48c <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800c478:	e011      	b.n	800c49e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	79db      	ldrb	r3, [r3, #7]
 800c47e:	4619      	mov	r1, r3
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f001 fadc 	bl	800da3e <USBH_ClrFeature>
 800c486:	4603      	mov	r3, r0
 800c488:	73fb      	strb	r3, [r7, #15]
      break;
 800c48a:	e008      	b.n	800c49e <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800c48c:	68bb      	ldr	r3, [r7, #8]
 800c48e:	799b      	ldrb	r3, [r3, #6]
 800c490:	4619      	mov	r1, r3
 800c492:	6878      	ldr	r0, [r7, #4]
 800c494:	f001 fad3 	bl	800da3e <USBH_ClrFeature>
 800c498:	4603      	mov	r3, r0
 800c49a:	73fb      	strb	r3, [r7, #15]
      break;
 800c49c:	bf00      	nop
  }
  return status;
 800c49e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3710      	adds	r7, #16
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c4b6:	69db      	ldr	r3, [r3, #28]
 800c4b8:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	791b      	ldrb	r3, [r3, #4]
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f006 fd63 	bl	8012f90 <USBH_LL_GetLastXferSize>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b0d      	cmp	r3, #13
 800c4ce:	d002      	beq.n	800c4d6 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800c4d0:	2302      	movs	r3, #2
 800c4d2:	73fb      	strb	r3, [r7, #15]
 800c4d4:	e024      	b.n	800c520 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c4da:	4a14      	ldr	r2, [pc, #80]	; (800c52c <USBH_MSC_DecodeCSW+0x84>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d11d      	bne.n	800c51c <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d119      	bne.n	800c520 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d102      	bne.n	800c4fc <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	73fb      	strb	r3, [r7, #15]
 800c4fa:	e011      	b.n	800c520 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c502:	2b01      	cmp	r3, #1
 800c504:	d102      	bne.n	800c50c <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800c506:	2301      	movs	r3, #1
 800c508:	73fb      	strb	r3, [r7, #15]
 800c50a:	e009      	b.n	800c520 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c512:	2b02      	cmp	r3, #2
 800c514:	d104      	bne.n	800c520 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800c516:	2302      	movs	r3, #2
 800c518:	73fb      	strb	r3, [r7, #15]
 800c51a:	e001      	b.n	800c520 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800c51c:	2302      	movs	r3, #2
 800c51e:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800c520:	7bfb      	ldrb	r3, [r7, #15]
}
 800c522:	4618      	mov	r0, r3
 800c524:	3710      	adds	r7, #16
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	53425355 	.word	0x53425355

0800c530 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	460b      	mov	r3, r1
 800c53a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c53c:	2302      	movs	r3, #2
 800c53e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c546:	69db      	ldr	r3, [r3, #28]
 800c548:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c550:	2b01      	cmp	r3, #1
 800c552:	d002      	beq.n	800c55a <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800c554:	2b02      	cmp	r3, #2
 800c556:	d021      	beq.n	800c59c <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c558:	e028      	b.n	800c5ac <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	2200      	movs	r2, #0
 800c55e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	2200      	movs	r2, #0
 800c564:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	220a      	movs	r2, #10
 800c56c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	3363      	adds	r3, #99	; 0x63
 800c574:	2210      	movs	r2, #16
 800c576:	2100      	movs	r1, #0
 800c578:	4618      	mov	r0, r3
 800c57a:	f006 fec9 	bl	8013310 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	2200      	movs	r2, #0
 800c582:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2201      	movs	r2, #1
 800c58a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	2202      	movs	r2, #2
 800c592:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 800c596:	2301      	movs	r3, #1
 800c598:	73fb      	strb	r3, [r7, #15]
      break;
 800c59a:	e007      	b.n	800c5ac <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c59c:	78fb      	ldrb	r3, [r7, #3]
 800c59e:	4619      	mov	r1, r3
 800c5a0:	6878      	ldr	r0, [r7, #4]
 800c5a2:	f7ff fcfb 	bl	800bf9c <USBH_MSC_BOT_Process>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c5aa:	bf00      	nop
  }

  return error;
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3710      	adds	r7, #16
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	bd80      	pop	{r7, pc}

0800c5b6 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800c5b6:	b580      	push	{r7, lr}
 800c5b8:	b086      	sub	sp, #24
 800c5ba:	af00      	add	r7, sp, #0
 800c5bc:	60f8      	str	r0, [r7, #12]
 800c5be:	460b      	mov	r3, r1
 800c5c0:	607a      	str	r2, [r7, #4]
 800c5c2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 800c5c4:	2301      	movs	r3, #1
 800c5c6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c5ce:	69db      	ldr	r3, [r3, #28]
 800c5d0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c5d8:	2b01      	cmp	r3, #1
 800c5da:	d002      	beq.n	800c5e2 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d027      	beq.n	800c630 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800c5e0:	e05f      	b.n	800c6a2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2208      	movs	r2, #8
 800c5e6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c5e8:	693b      	ldr	r3, [r7, #16]
 800c5ea:	2280      	movs	r2, #128	; 0x80
 800c5ec:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c5f0:	693b      	ldr	r3, [r7, #16]
 800c5f2:	220a      	movs	r2, #10
 800c5f4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	3363      	adds	r3, #99	; 0x63
 800c5fc:	2210      	movs	r2, #16
 800c5fe:	2100      	movs	r1, #0
 800c600:	4618      	mov	r0, r3
 800c602:	f006 fe85 	bl	8013310 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800c606:	693b      	ldr	r3, [r7, #16]
 800c608:	2225      	movs	r2, #37	; 0x25
 800c60a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	2202      	movs	r2, #2
 800c61a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c61e:	693b      	ldr	r3, [r7, #16]
 800c620:	f103 0210 	add.w	r2, r3, #16
 800c624:	693b      	ldr	r3, [r7, #16]
 800c626:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c62a:	2301      	movs	r3, #1
 800c62c:	75fb      	strb	r3, [r7, #23]
      break;
 800c62e:	e038      	b.n	800c6a2 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c630:	7afb      	ldrb	r3, [r7, #11]
 800c632:	4619      	mov	r1, r3
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	f7ff fcb1 	bl	800bf9c <USBH_MSC_BOT_Process>
 800c63a:	4603      	mov	r3, r0
 800c63c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c63e:	7dfb      	ldrb	r3, [r7, #23]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d12d      	bne.n	800c6a0 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c64a:	3303      	adds	r3, #3
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	461a      	mov	r2, r3
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c656:	3302      	adds	r3, #2
 800c658:	781b      	ldrb	r3, [r3, #0]
 800c65a:	021b      	lsls	r3, r3, #8
 800c65c:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c664:	3301      	adds	r3, #1
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c66a:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	061b      	lsls	r3, r3, #24
 800c676:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c682:	3307      	adds	r3, #7
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	b29a      	uxth	r2, r3
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c68e:	3306      	adds	r3, #6
 800c690:	781b      	ldrb	r3, [r3, #0]
 800c692:	b29b      	uxth	r3, r3
 800c694:	021b      	lsls	r3, r3, #8
 800c696:	b29b      	uxth	r3, r3
 800c698:	4313      	orrs	r3, r2
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	809a      	strh	r2, [r3, #4]
      break;
 800c6a0:	bf00      	nop
  }

  return error;
 800c6a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3718      	adds	r7, #24
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	bd80      	pop	{r7, pc}

0800c6ac <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b086      	sub	sp, #24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	460b      	mov	r3, r1
 800c6b6:	607a      	str	r2, [r7, #4]
 800c6b8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800c6ba:	2302      	movs	r3, #2
 800c6bc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c6c4:	69db      	ldr	r3, [r3, #28]
 800c6c6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d002      	beq.n	800c6d8 <USBH_MSC_SCSI_Inquiry+0x2c>
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	d03d      	beq.n	800c752 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800c6d6:	e089      	b.n	800c7ec <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	2224      	movs	r2, #36	; 0x24
 800c6dc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c6de:	693b      	ldr	r3, [r7, #16]
 800c6e0:	2280      	movs	r2, #128	; 0x80
 800c6e2:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c6e6:	693b      	ldr	r3, [r7, #16]
 800c6e8:	220a      	movs	r2, #10
 800c6ea:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	3363      	adds	r3, #99	; 0x63
 800c6f2:	220a      	movs	r2, #10
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f006 fe0a 	bl	8013310 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	2212      	movs	r2, #18
 800c700:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c704:	7afb      	ldrb	r3, [r7, #11]
 800c706:	015b      	lsls	r3, r3, #5
 800c708:	b2da      	uxtb	r2, r3
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c710:	693b      	ldr	r3, [r7, #16]
 800c712:	2200      	movs	r2, #0
 800c714:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c718:	693b      	ldr	r3, [r7, #16]
 800c71a:	2200      	movs	r2, #0
 800c71c:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	2224      	movs	r2, #36	; 0x24
 800c724:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	2200      	movs	r2, #0
 800c72c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	2201      	movs	r2, #1
 800c734:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	2202      	movs	r2, #2
 800c73c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	f103 0210 	add.w	r2, r3, #16
 800c746:	693b      	ldr	r3, [r7, #16]
 800c748:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c74c:	2301      	movs	r3, #1
 800c74e:	75fb      	strb	r3, [r7, #23]
      break;
 800c750:	e04c      	b.n	800c7ec <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c752:	7afb      	ldrb	r3, [r7, #11]
 800c754:	4619      	mov	r1, r3
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f7ff fc20 	bl	800bf9c <USBH_MSC_BOT_Process>
 800c75c:	4603      	mov	r3, r0
 800c75e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c760:	7dfb      	ldrb	r3, [r7, #23]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d141      	bne.n	800c7ea <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800c766:	2222      	movs	r2, #34	; 0x22
 800c768:	2100      	movs	r1, #0
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f006 fdd0 	bl	8013310 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c776:	781b      	ldrb	r3, [r3, #0]
 800c778:	f003 031f 	and.w	r3, r3, #31
 800c77c:	b2da      	uxtb	r2, r3
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c788:	781b      	ldrb	r3, [r3, #0]
 800c78a:	095b      	lsrs	r3, r3, #5
 800c78c:	b2da      	uxtb	r2, r3
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800c792:	693b      	ldr	r3, [r7, #16]
 800c794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c798:	3301      	adds	r3, #1
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	b25b      	sxtb	r3, r3
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	da03      	bge.n	800c7aa <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	709a      	strb	r2, [r3, #2]
 800c7a8:	e002      	b.n	800c7b0 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	1cd8      	adds	r0, r3, #3
 800c7b4:	693b      	ldr	r3, [r7, #16]
 800c7b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7ba:	3308      	adds	r3, #8
 800c7bc:	2208      	movs	r2, #8
 800c7be:	4619      	mov	r1, r3
 800c7c0:	f006 fd98 	bl	80132f4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f103 000c 	add.w	r0, r3, #12
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7d0:	3310      	adds	r3, #16
 800c7d2:	2210      	movs	r2, #16
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	f006 fd8d 	bl	80132f4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	331d      	adds	r3, #29
 800c7de:	693a      	ldr	r2, [r7, #16]
 800c7e0:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800c7e4:	3220      	adds	r2, #32
 800c7e6:	6812      	ldr	r2, [r2, #0]
 800c7e8:	601a      	str	r2, [r3, #0]
      break;
 800c7ea:	bf00      	nop
  }

  return error;
 800c7ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	3718      	adds	r7, #24
 800c7f2:	46bd      	mov	sp, r7
 800c7f4:	bd80      	pop	{r7, pc}

0800c7f6 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800c7f6:	b580      	push	{r7, lr}
 800c7f8:	b086      	sub	sp, #24
 800c7fa:	af00      	add	r7, sp, #0
 800c7fc:	60f8      	str	r0, [r7, #12]
 800c7fe:	460b      	mov	r3, r1
 800c800:	607a      	str	r2, [r7, #4]
 800c802:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c804:	2302      	movs	r3, #2
 800c806:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c80e:	69db      	ldr	r3, [r3, #28]
 800c810:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d002      	beq.n	800c822 <USBH_MSC_SCSI_RequestSense+0x2c>
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d03d      	beq.n	800c89c <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 800c820:	e05d      	b.n	800c8de <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800c822:	693b      	ldr	r3, [r7, #16]
 800c824:	220e      	movs	r2, #14
 800c826:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c828:	693b      	ldr	r3, [r7, #16]
 800c82a:	2280      	movs	r2, #128	; 0x80
 800c82c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c830:	693b      	ldr	r3, [r7, #16]
 800c832:	220a      	movs	r2, #10
 800c834:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c838:	693b      	ldr	r3, [r7, #16]
 800c83a:	3363      	adds	r3, #99	; 0x63
 800c83c:	2210      	movs	r2, #16
 800c83e:	2100      	movs	r1, #0
 800c840:	4618      	mov	r0, r3
 800c842:	f006 fd65 	bl	8013310 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800c846:	693b      	ldr	r3, [r7, #16]
 800c848:	2203      	movs	r2, #3
 800c84a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800c84e:	7afb      	ldrb	r3, [r7, #11]
 800c850:	015b      	lsls	r3, r3, #5
 800c852:	b2da      	uxtb	r2, r3
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800c85a:	693b      	ldr	r3, [r7, #16]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 800c862:	693b      	ldr	r3, [r7, #16]
 800c864:	2200      	movs	r2, #0
 800c866:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	220e      	movs	r2, #14
 800c86e:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	2200      	movs	r2, #0
 800c876:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	2201      	movs	r2, #1
 800c87e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	2202      	movs	r2, #2
 800c886:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	f103 0210 	add.w	r2, r3, #16
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c896:	2301      	movs	r3, #1
 800c898:	75fb      	strb	r3, [r7, #23]
      break;
 800c89a:	e020      	b.n	800c8de <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c89c:	7afb      	ldrb	r3, [r7, #11]
 800c89e:	4619      	mov	r1, r3
 800c8a0:	68f8      	ldr	r0, [r7, #12]
 800c8a2:	f7ff fb7b 	bl	800bf9c <USBH_MSC_BOT_Process>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800c8aa:	7dfb      	ldrb	r3, [r7, #23]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d115      	bne.n	800c8dc <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8b6:	3302      	adds	r3, #2
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	f003 030f 	and.w	r3, r3, #15
 800c8be:	b2da      	uxtb	r2, r3
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8ca:	7b1a      	ldrb	r2, [r3, #12]
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800c8d0:	693b      	ldr	r3, [r7, #16]
 800c8d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8d6:	7b5a      	ldrb	r2, [r3, #13]
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	709a      	strb	r2, [r3, #2]
      break;
 800c8dc:	bf00      	nop
  }

  return error;
 800c8de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3718      	adds	r7, #24
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}

0800c8e8 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 800c8e8:	b580      	push	{r7, lr}
 800c8ea:	b086      	sub	sp, #24
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	607a      	str	r2, [r7, #4]
 800c8f2:	603b      	str	r3, [r7, #0]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c8f8:	2302      	movs	r3, #2
 800c8fa:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c902:	69db      	ldr	r3, [r3, #28]
 800c904:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d002      	beq.n	800c916 <USBH_MSC_SCSI_Write+0x2e>
 800c910:	2b02      	cmp	r3, #2
 800c912:	d047      	beq.n	800c9a4 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c914:	e04e      	b.n	800c9b4 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c91c:	461a      	mov	r2, r3
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	fb03 f202 	mul.w	r2, r3, r2
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	2200      	movs	r2, #0
 800c92c:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	220a      	movs	r2, #10
 800c934:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	3363      	adds	r3, #99	; 0x63
 800c93c:	2210      	movs	r2, #16
 800c93e:	2100      	movs	r1, #0
 800c940:	4618      	mov	r0, r3
 800c942:	f006 fce5 	bl	8013310 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800c946:	693b      	ldr	r3, [r7, #16]
 800c948:	222a      	movs	r2, #42	; 0x2a
 800c94a:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800c94e:	79fa      	ldrb	r2, [r7, #7]
 800c950:	693b      	ldr	r3, [r7, #16]
 800c952:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800c956:	79ba      	ldrb	r2, [r7, #6]
 800c958:	693b      	ldr	r3, [r7, #16]
 800c95a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800c95e:	797a      	ldrb	r2, [r7, #5]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800c966:	1d3b      	adds	r3, r7, #4
 800c968:	781a      	ldrb	r2, [r3, #0]
 800c96a:	693b      	ldr	r3, [r7, #16]
 800c96c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800c970:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800c974:	693b      	ldr	r3, [r7, #16]
 800c976:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800c97a:	f107 0320 	add.w	r3, r7, #32
 800c97e:	781a      	ldrb	r2, [r3, #0]
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	2201      	movs	r2, #1
 800c98a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	2202      	movs	r2, #2
 800c992:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	683a      	ldr	r2, [r7, #0]
 800c99a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	75fb      	strb	r3, [r7, #23]
      break;
 800c9a2:	e007      	b.n	800c9b4 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800c9a4:	7afb      	ldrb	r3, [r7, #11]
 800c9a6:	4619      	mov	r1, r3
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f7ff faf7 	bl	800bf9c <USBH_MSC_BOT_Process>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	75fb      	strb	r3, [r7, #23]
      break;
 800c9b2:	bf00      	nop
  }

  return error;
 800c9b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3718      	adds	r7, #24
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b086      	sub	sp, #24
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	60f8      	str	r0, [r7, #12]
 800c9c6:	607a      	str	r2, [r7, #4]
 800c9c8:	603b      	str	r3, [r7, #0]
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800c9ce:	2302      	movs	r3, #2
 800c9d0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800c9d8:	69db      	ldr	r3, [r3, #28]
 800c9da:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800c9e2:	2b01      	cmp	r3, #1
 800c9e4:	d002      	beq.n	800c9ec <USBH_MSC_SCSI_Read+0x2e>
 800c9e6:	2b02      	cmp	r3, #2
 800c9e8:	d047      	beq.n	800ca7a <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800c9ea:	e04e      	b.n	800ca8a <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800c9f2:	461a      	mov	r2, r3
 800c9f4:	6a3b      	ldr	r3, [r7, #32]
 800c9f6:	fb03 f202 	mul.w	r2, r3, r2
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	2280      	movs	r2, #128	; 0x80
 800ca02:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	220a      	movs	r2, #10
 800ca0a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	3363      	adds	r3, #99	; 0x63
 800ca12:	2210      	movs	r2, #16
 800ca14:	2100      	movs	r1, #0
 800ca16:	4618      	mov	r0, r3
 800ca18:	f006 fc7a 	bl	8013310 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	2228      	movs	r2, #40	; 0x28
 800ca20:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800ca24:	79fa      	ldrb	r2, [r7, #7]
 800ca26:	693b      	ldr	r3, [r7, #16]
 800ca28:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800ca2c:	79ba      	ldrb	r2, [r7, #6]
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800ca34:	797a      	ldrb	r2, [r7, #5]
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800ca3c:	1d3b      	adds	r3, r7, #4
 800ca3e:	781a      	ldrb	r2, [r3, #0]
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800ca46:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ca4a:	693b      	ldr	r3, [r7, #16]
 800ca4c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800ca50:	f107 0320 	add.w	r3, r7, #32
 800ca54:	781a      	ldrb	r2, [r3, #0]
 800ca56:	693b      	ldr	r3, [r7, #16]
 800ca58:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	2201      	movs	r2, #1
 800ca60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	2202      	movs	r2, #2
 800ca68:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	683a      	ldr	r2, [r7, #0]
 800ca70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800ca74:	2301      	movs	r3, #1
 800ca76:	75fb      	strb	r3, [r7, #23]
      break;
 800ca78:	e007      	b.n	800ca8a <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800ca7a:	7afb      	ldrb	r3, [r7, #11]
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	68f8      	ldr	r0, [r7, #12]
 800ca80:	f7ff fa8c 	bl	800bf9c <USBH_MSC_BOT_Process>
 800ca84:	4603      	mov	r3, r0
 800ca86:	75fb      	strb	r3, [r7, #23]
      break;
 800ca88:	bf00      	nop
  }

  return error;
 800ca8a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	3718      	adds	r7, #24
 800ca90:	46bd      	mov	sp, r7
 800ca92:	bd80      	pop	{r7, pc}

0800ca94 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	60f8      	str	r0, [r7, #12]
 800ca9c:	60b9      	str	r1, [r7, #8]
 800ca9e:	4613      	mov	r3, r2
 800caa0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d101      	bne.n	800caac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800caa8:	2302      	movs	r3, #2
 800caaa:	e044      	b.n	800cb36 <USBH_Init+0xa2>
  }

  /* Set DRiver ID */
  phost->id = id;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	79fa      	ldrb	r2, [r7, #7]
 800cab0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	2200      	movs	r2, #0
 800cab8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2200      	movs	r2, #0
 800cac0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cac4:	68f8      	ldr	r0, [r7, #12]
 800cac6:	f000 f841 	bl	800cb4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	2200      	movs	r2, #0
 800cace:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2200      	movs	r2, #0
 800cade:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	2200      	movs	r2, #0
 800cae6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800caea:	68bb      	ldr	r3, [r7, #8]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d003      	beq.n	800caf8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	68ba      	ldr	r2, [r7, #8]
 800caf4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 800caf8:	2200      	movs	r2, #0
 800cafa:	2104      	movs	r1, #4
 800cafc:	2010      	movs	r0, #16
 800cafe:	f002 fe37 	bl	800f770 <osMessageQueueNew>
 800cb02:	4602      	mov	r2, r0
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 800cb0a:	4b0d      	ldr	r3, [pc, #52]	; (800cb40 <USBH_Init+0xac>)
 800cb0c:	4a0d      	ldr	r2, [pc, #52]	; (800cb44 <USBH_Init+0xb0>)
 800cb0e:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 800cb10:	4b0b      	ldr	r3, [pc, #44]	; (800cb40 <USBH_Init+0xac>)
 800cb12:	2280      	movs	r2, #128	; 0x80
 800cb14:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 800cb16:	4b0a      	ldr	r3, [pc, #40]	; (800cb40 <USBH_Init+0xac>)
 800cb18:	2218      	movs	r2, #24
 800cb1a:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 800cb1c:	4a08      	ldr	r2, [pc, #32]	; (800cb40 <USBH_Init+0xac>)
 800cb1e:	68f9      	ldr	r1, [r7, #12]
 800cb20:	4809      	ldr	r0, [pc, #36]	; (800cb48 <USBH_Init+0xb4>)
 800cb22:	f002 fb27 	bl	800f174 <osThreadNew>
 800cb26:	4602      	mov	r2, r0
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800cb2e:	68f8      	ldr	r0, [r7, #12]
 800cb30:	f006 f97a 	bl	8012e28 <USBH_LL_Init>

  return USBH_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	200007e0 	.word	0x200007e0
 800cb44:	08013678 	.word	0x08013678
 800cb48:	0800d7b5 	.word	0x0800d7b5

0800cb4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b085      	sub	sp, #20
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cb54:	2300      	movs	r3, #0
 800cb56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb58:	2300      	movs	r3, #0
 800cb5a:	60fb      	str	r3, [r7, #12]
 800cb5c:	e009      	b.n	800cb72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	33e0      	adds	r3, #224	; 0xe0
 800cb64:	009b      	lsls	r3, r3, #2
 800cb66:	4413      	add	r3, r2
 800cb68:	2200      	movs	r2, #0
 800cb6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	3301      	adds	r3, #1
 800cb70:	60fb      	str	r3, [r7, #12]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	2b0e      	cmp	r3, #14
 800cb76:	d9f2      	bls.n	800cb5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	e009      	b.n	800cb92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800cb7e:	687a      	ldr	r2, [r7, #4]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4413      	add	r3, r2
 800cb84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cb88:	2200      	movs	r2, #0
 800cb8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	3301      	adds	r3, #1
 800cb90:	60fb      	str	r3, [r7, #12]
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb98:	d3f1      	bcc.n	800cb7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	2200      	movs	r2, #0
 800cba4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2201      	movs	r2, #1
 800cbaa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2201      	movs	r2, #1
 800cbb8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2240      	movs	r2, #64	; 0x40
 800cbbe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2200      	movs	r2, #0
 800cbca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800cbe6:	2300      	movs	r3, #0
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d016      	beq.n	800cc36 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d10e      	bne.n	800cc30 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800cc18:	1c59      	adds	r1, r3, #1
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	33de      	adds	r3, #222	; 0xde
 800cc24:	6839      	ldr	r1, [r7, #0]
 800cc26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	73fb      	strb	r3, [r7, #15]
 800cc2e:	e004      	b.n	800cc3a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cc30:	2302      	movs	r3, #2
 800cc32:	73fb      	strb	r3, [r7, #15]
 800cc34:	e001      	b.n	800cc3a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cc36:	2302      	movs	r3, #2
 800cc38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800cc54:	2300      	movs	r3, #0
 800cc56:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800cc5e:	78fa      	ldrb	r2, [r7, #3]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d204      	bcs.n	800cc6e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	78fa      	ldrb	r2, [r7, #3]
 800cc68:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800cc6c:	e001      	b.n	800cc72 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800cc6e:	2302      	movs	r3, #2
 800cc70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3714      	adds	r7, #20
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7e:	4770      	bx	lr

0800cc80 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cc80:	b480      	push	{r7}
 800cc82:	b087      	sub	sp, #28
 800cc84:	af00      	add	r7, sp, #0
 800cc86:	6078      	str	r0, [r7, #4]
 800cc88:	4608      	mov	r0, r1
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	461a      	mov	r2, r3
 800cc8e:	4603      	mov	r3, r0
 800cc90:	70fb      	strb	r3, [r7, #3]
 800cc92:	460b      	mov	r3, r1
 800cc94:	70bb      	strb	r3, [r7, #2]
 800cc96:	4613      	mov	r3, r2
 800cc98:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800cca8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ccaa:	e025      	b.n	800ccf8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ccac:	7dfb      	ldrb	r3, [r7, #23]
 800ccae:	221a      	movs	r2, #26
 800ccb0:	fb02 f303 	mul.w	r3, r2, r3
 800ccb4:	3308      	adds	r3, #8
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	4413      	add	r3, r2
 800ccba:	3302      	adds	r3, #2
 800ccbc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ccbe:	693b      	ldr	r3, [r7, #16]
 800ccc0:	795b      	ldrb	r3, [r3, #5]
 800ccc2:	78fa      	ldrb	r2, [r7, #3]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d002      	beq.n	800ccce <USBH_FindInterface+0x4e>
 800ccc8:	78fb      	ldrb	r3, [r7, #3]
 800ccca:	2bff      	cmp	r3, #255	; 0xff
 800cccc:	d111      	bne.n	800ccf2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800ccd2:	78ba      	ldrb	r2, [r7, #2]
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d002      	beq.n	800ccde <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800ccd8:	78bb      	ldrb	r3, [r7, #2]
 800ccda:	2bff      	cmp	r3, #255	; 0xff
 800ccdc:	d109      	bne.n	800ccf2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800ccde:	693b      	ldr	r3, [r7, #16]
 800cce0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800cce2:	787a      	ldrb	r2, [r7, #1]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d002      	beq.n	800ccee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cce8:	787b      	ldrb	r3, [r7, #1]
 800ccea:	2bff      	cmp	r3, #255	; 0xff
 800ccec:	d101      	bne.n	800ccf2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800ccee:	7dfb      	ldrb	r3, [r7, #23]
 800ccf0:	e006      	b.n	800cd00 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800ccf2:	7dfb      	ldrb	r3, [r7, #23]
 800ccf4:	3301      	adds	r3, #1
 800ccf6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ccf8:	7dfb      	ldrb	r3, [r7, #23]
 800ccfa:	2b01      	cmp	r3, #1
 800ccfc:	d9d6      	bls.n	800ccac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800ccfe:	23ff      	movs	r3, #255	; 0xff
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	371c      	adds	r7, #28
 800cd04:	46bd      	mov	sp, r7
 800cd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0a:	4770      	bx	lr

0800cd0c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b082      	sub	sp, #8
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f006 f8c3 	bl	8012ea0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 800cd1a:	2101      	movs	r1, #1
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f006 f9dc 	bl	80130da <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cd22:	2300      	movs	r3, #0
}
 800cd24:	4618      	mov	r0, r3
 800cd26:	3708      	adds	r7, #8
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd80      	pop	{r7, pc}

0800cd2c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b088      	sub	sp, #32
 800cd30:	af04      	add	r7, sp, #16
 800cd32:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cd34:	2302      	movs	r3, #2
 800cd36:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cd38:	2300      	movs	r3, #0
 800cd3a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800cd42:	b2db      	uxtb	r3, r3
 800cd44:	2b01      	cmp	r3, #1
 800cd46:	d102      	bne.n	800cd4e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2203      	movs	r2, #3
 800cd4c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	b2db      	uxtb	r3, r3
 800cd54:	2b0b      	cmp	r3, #11
 800cd56:	f200 823c 	bhi.w	800d1d2 <USBH_Process+0x4a6>
 800cd5a:	a201      	add	r2, pc, #4	; (adr r2, 800cd60 <USBH_Process+0x34>)
 800cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd60:	0800cd91 	.word	0x0800cd91
 800cd64:	0800cddf 	.word	0x0800cddf
 800cd68:	0800ce63 	.word	0x0800ce63
 800cd6c:	0800d151 	.word	0x0800d151
 800cd70:	0800d1d3 	.word	0x0800d1d3
 800cd74:	0800cf23 	.word	0x0800cf23
 800cd78:	0800d0db 	.word	0x0800d0db
 800cd7c:	0800cf75 	.word	0x0800cf75
 800cd80:	0800cfb1 	.word	0x0800cfb1
 800cd84:	0800cfeb 	.word	0x0800cfeb
 800cd88:	0800d033 	.word	0x0800d033
 800cd8c:	0800d139 	.word	0x0800d139
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f000 821c 	beq.w	800d1d6 <USBH_Process+0x4aa>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2201      	movs	r2, #1
 800cda2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800cda4:	20c8      	movs	r0, #200	; 0xc8
 800cda6:	f006 fa15 	bl	80131d4 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f006 f8d5 	bl	8012f5a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	2200      	movs	r2, #0
 800cdbc:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2201      	movs	r2, #1
 800cdc4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cdd4:	2300      	movs	r3, #0
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	f002 fd50 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cddc:	e1fb      	b.n	800d1d6 <USBH_Process+0x4aa>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d107      	bne.n	800cdf8 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	2200      	movs	r2, #0
 800cdec:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	2202      	movs	r2, #2
 800cdf4:	701a      	strb	r2, [r3, #0]
 800cdf6:	e025      	b.n	800ce44 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cdfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ce02:	d914      	bls.n	800ce2e <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ce0a:	3301      	adds	r3, #1
 800ce0c:	b2da      	uxtb	r2, r3
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ce1a:	2b03      	cmp	r3, #3
 800ce1c:	d903      	bls.n	800ce26 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	220d      	movs	r2, #13
 800ce22:	701a      	strb	r2, [r3, #0]
 800ce24:	e00e      	b.n	800ce44 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	701a      	strb	r2, [r3, #0]
 800ce2c:	e00a      	b.n	800ce44 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800ce34:	f103 020a 	add.w	r2, r3, #10
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800ce3e:	200a      	movs	r0, #10
 800ce40:	f006 f9c8 	bl	80131d4 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2201      	movs	r2, #1
 800ce48:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800ce58:	2300      	movs	r3, #0
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f002 fd0e 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800ce60:	e1c0      	b.n	800d1e4 <USBH_Process+0x4b8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d005      	beq.n	800ce78 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce72:	2104      	movs	r1, #4
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ce78:	2064      	movs	r0, #100	; 0x64
 800ce7a:	f006 f9ab 	bl	80131d4 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f006 f844 	bl	8012f0c <USBH_LL_GetSpeed>
 800ce84:	4603      	mov	r3, r0
 800ce86:	461a      	mov	r2, r3
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	2205      	movs	r2, #5
 800ce92:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800ce94:	2100      	movs	r1, #0
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	f001 fb21 	bl	800e4de <USBH_AllocPipe>
 800ce9c:	4603      	mov	r3, r0
 800ce9e:	461a      	mov	r2, r3
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cea4:	2180      	movs	r1, #128	; 0x80
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f001 fb19 	bl	800e4de <USBH_AllocPipe>
 800ceac:	4603      	mov	r3, r0
 800ceae:	461a      	mov	r2, r3
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	7919      	ldrb	r1, [r3, #4]
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cec4:	687a      	ldr	r2, [r7, #4]
 800cec6:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cec8:	b292      	uxth	r2, r2
 800ceca:	9202      	str	r2, [sp, #8]
 800cecc:	2200      	movs	r2, #0
 800cece:	9201      	str	r2, [sp, #4]
 800ced0:	9300      	str	r3, [sp, #0]
 800ced2:	4603      	mov	r3, r0
 800ced4:	2280      	movs	r2, #128	; 0x80
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f001 fad2 	bl	800e480 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	7959      	ldrb	r1, [r3, #5]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800ceec:	687a      	ldr	r2, [r7, #4]
 800ceee:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cef0:	b292      	uxth	r2, r2
 800cef2:	9202      	str	r2, [sp, #8]
 800cef4:	2200      	movs	r2, #0
 800cef6:	9201      	str	r2, [sp, #4]
 800cef8:	9300      	str	r3, [sp, #0]
 800cefa:	4603      	mov	r3, r0
 800cefc:	2200      	movs	r2, #0
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f001 fabe 	bl	800e480 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	2201      	movs	r2, #1
 800cf08:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf18:	2300      	movs	r3, #0
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f002 fcae 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800cf20:	e160      	b.n	800d1e4 <USBH_Process+0x4b8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cf22:	6878      	ldr	r0, [r7, #4]
 800cf24:	f000 f964 	bl	800d1f0 <USBH_HandleEnum>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cf2c:	7bbb      	ldrb	r3, [r7, #14]
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f040 8152 	bne.w	800d1da <USBH_Process+0x4ae>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d103      	bne.n	800cf50 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2208      	movs	r2, #8
 800cf4c:	701a      	strb	r2, [r3, #0]
 800cf4e:	e002      	b.n	800cf56 <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2207      	movs	r2, #7
 800cf54:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2205      	movs	r2, #5
 800cf5a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	f002 fc85 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      }
      break;
 800cf72:	e132      	b.n	800d1da <USBH_Process+0x4ae>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	f000 812f 	beq.w	800d1de <USBH_Process+0x4b2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf86:	2101      	movs	r1, #1
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2208      	movs	r2, #8
 800cf90:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	2205      	movs	r2, #5
 800cf96:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	f002 fc67 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 800cfae:	e116      	b.n	800d1de <USBH_Process+0x4b2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800cfb6:	b29b      	uxth	r3, r3
 800cfb8:	4619      	mov	r1, r3
 800cfba:	6878      	ldr	r0, [r7, #4]
 800cfbc:	f000 fcf8 	bl	800d9b0 <USBH_SetCfg>
 800cfc0:	4603      	mov	r3, r0
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d102      	bne.n	800cfcc <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2209      	movs	r2, #9
 800cfca:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2201      	movs	r2, #1
 800cfd0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f002 fc4a 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800cfe8:	e0fc      	b.n	800d1e4 <USBH_Process+0x4b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800cff0:	f003 0320 	and.w	r3, r3, #32
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d00a      	beq.n	800d00e <USBH_Process+0x2e2>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cff8:	2101      	movs	r1, #1
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fcfb 	bl	800d9f6 <USBH_SetFeature>
 800d000:	4603      	mov	r3, r0
 800d002:	2b00      	cmp	r3, #0
 800d004:	d106      	bne.n	800d014 <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	220a      	movs	r2, #10
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	e002      	b.n	800d014 <USBH_Process+0x2e8>
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	220a      	movs	r2, #10
 800d012:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2201      	movs	r2, #1
 800d018:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d028:	2300      	movs	r3, #0
 800d02a:	2200      	movs	r2, #0
 800d02c:	f002 fc26 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800d030:	e0d8      	b.n	800d1e4 <USBH_Process+0x4b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d03f      	beq.n	800d0bc <USBH_Process+0x390>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	2200      	movs	r2, #0
 800d040:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d044:	2300      	movs	r3, #0
 800d046:	73fb      	strb	r3, [r7, #15]
 800d048:	e016      	b.n	800d078 <USBH_Process+0x34c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d04a:	7bfa      	ldrb	r2, [r7, #15]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	32de      	adds	r2, #222	; 0xde
 800d050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d054:	791a      	ldrb	r2, [r3, #4]
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800d05c:	429a      	cmp	r2, r3
 800d05e:	d108      	bne.n	800d072 <USBH_Process+0x346>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d060:	7bfa      	ldrb	r2, [r7, #15]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	32de      	adds	r2, #222	; 0xde
 800d066:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800d070:	e005      	b.n	800d07e <USBH_Process+0x352>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d072:	7bfb      	ldrb	r3, [r7, #15]
 800d074:	3301      	adds	r3, #1
 800d076:	73fb      	strb	r3, [r7, #15]
 800d078:	7bfb      	ldrb	r3, [r7, #15]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d0e5      	beq.n	800d04a <USBH_Process+0x31e>
          }
        }

        if (phost->pActiveClass != NULL)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d084:	2b00      	cmp	r3, #0
 800d086:	d016      	beq.n	800d0b6 <USBH_Process+0x38a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	4798      	blx	r3
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d109      	bne.n	800d0ae <USBH_Process+0x382>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	2206      	movs	r2, #6
 800d09e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0a6:	2103      	movs	r1, #3
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	4798      	blx	r3
 800d0ac:	e006      	b.n	800d0bc <USBH_Process+0x390>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	220d      	movs	r2, #13
 800d0b2:	701a      	strb	r2, [r3, #0]
 800d0b4:	e002      	b.n	800d0bc <USBH_Process+0x390>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	220d      	movs	r2, #13
 800d0ba:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2205      	movs	r2, #5
 800d0c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d0d0:	2300      	movs	r3, #0
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	f002 fbd2 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800d0d8:	e084      	b.n	800d1e4 <USBH_Process+0x4b8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d017      	beq.n	800d114 <USBH_Process+0x3e8>
      {
        status = phost->pActiveClass->Requests(phost);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d0ea:	691b      	ldr	r3, [r3, #16]
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	4798      	blx	r3
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d0f4:	7bbb      	ldrb	r3, [r7, #14]
 800d0f6:	b2db      	uxtb	r3, r3
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d103      	bne.n	800d104 <USBH_Process+0x3d8>
        {
          phost->gState = HOST_CLASS;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	220b      	movs	r2, #11
 800d100:	701a      	strb	r2, [r3, #0]
 800d102:	e00a      	b.n	800d11a <USBH_Process+0x3ee>
        }
        else if (status == USBH_FAIL)
 800d104:	7bbb      	ldrb	r3, [r7, #14]
 800d106:	b2db      	uxtb	r3, r3
 800d108:	2b02      	cmp	r3, #2
 800d10a:	d106      	bne.n	800d11a <USBH_Process+0x3ee>
        {
          phost->gState = HOST_ABORT_STATE;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	220d      	movs	r2, #13
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	e002      	b.n	800d11a <USBH_Process+0x3ee>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	220d      	movs	r2, #13
 800d118:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2205      	movs	r2, #5
 800d11e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d12e:	2300      	movs	r3, #0
 800d130:	2200      	movs	r2, #0
 800d132:	f002 fba3 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800d136:	e055      	b.n	800d1e4 <USBH_Process+0x4b8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d04f      	beq.n	800d1e2 <USBH_Process+0x4b6>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d148:	695b      	ldr	r3, [r3, #20]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	4798      	blx	r3
      }
      break;
 800d14e:	e048      	b.n	800d1e2 <USBH_Process+0x4b6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f7ff fcf7 	bl	800cb4c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d164:	2b00      	cmp	r3, #0
 800d166:	d009      	beq.n	800d17c <USBH_Process+0x450>
      {
        phost->pActiveClass->DeInit(phost);
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d16e:	68db      	ldr	r3, [r3, #12]
 800d170:	6878      	ldr	r0, [r7, #4]
 800d172:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	2200      	movs	r2, #0
 800d178:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d182:	2b00      	cmp	r3, #0
 800d184:	d005      	beq.n	800d192 <USBH_Process+0x466>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d18c:	2105      	movs	r1, #5
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800d198:	b2db      	uxtb	r3, r3
 800d19a:	2b01      	cmp	r3, #1
 800d19c:	d107      	bne.n	800d1ae <USBH_Process+0x482>
      {
        phost->device.is_ReEnumerated = 0U;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f7ff fdb0 	bl	800cd0c <USBH_Start>
 800d1ac:	e002      	b.n	800d1b4 <USBH_Process+0x488>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        USBH_LL_Start(phost);
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f005 fe76 	bl	8012ea0 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2201      	movs	r2, #1
 800d1b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	f002 fb56 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      break;
 800d1d0:	e008      	b.n	800d1e4 <USBH_Process+0x4b8>

    case HOST_ABORT_STATE:
    default :
      break;
 800d1d2:	bf00      	nop
 800d1d4:	e006      	b.n	800d1e4 <USBH_Process+0x4b8>
      break;
 800d1d6:	bf00      	nop
 800d1d8:	e004      	b.n	800d1e4 <USBH_Process+0x4b8>
      break;
 800d1da:	bf00      	nop
 800d1dc:	e002      	b.n	800d1e4 <USBH_Process+0x4b8>
    break;
 800d1de:	bf00      	nop
 800d1e0:	e000      	b.n	800d1e4 <USBH_Process+0x4b8>
      break;
 800d1e2:	bf00      	nop
  }
  return USBH_OK;
 800d1e4:	2300      	movs	r3, #0
}
 800d1e6:	4618      	mov	r0, r3
 800d1e8:	3710      	adds	r7, #16
 800d1ea:	46bd      	mov	sp, r7
 800d1ec:	bd80      	pop	{r7, pc}
 800d1ee:	bf00      	nop

0800d1f0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b088      	sub	sp, #32
 800d1f4:	af04      	add	r7, sp, #16
 800d1f6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	785b      	ldrb	r3, [r3, #1]
 800d204:	2b07      	cmp	r3, #7
 800d206:	f200 8208 	bhi.w	800d61a <USBH_HandleEnum+0x42a>
 800d20a:	a201      	add	r2, pc, #4	; (adr r2, 800d210 <USBH_HandleEnum+0x20>)
 800d20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d210:	0800d231 	.word	0x0800d231
 800d214:	0800d2ef 	.word	0x0800d2ef
 800d218:	0800d359 	.word	0x0800d359
 800d21c:	0800d3e7 	.word	0x0800d3e7
 800d220:	0800d451 	.word	0x0800d451
 800d224:	0800d4c1 	.word	0x0800d4c1
 800d228:	0800d55d 	.word	0x0800d55d
 800d22c:	0800d5db 	.word	0x0800d5db
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800d230:	2108      	movs	r1, #8
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f000 faec 	bl	800d810 <USBH_Get_DevDesc>
 800d238:	4603      	mov	r3, r0
 800d23a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d23c:	7bbb      	ldrb	r3, [r7, #14]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d130      	bne.n	800d2a4 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	2201      	movs	r2, #1
 800d250:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	7919      	ldrb	r1, [r3, #4]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d262:	687a      	ldr	r2, [r7, #4]
 800d264:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800d266:	b292      	uxth	r2, r2
 800d268:	9202      	str	r2, [sp, #8]
 800d26a:	2200      	movs	r2, #0
 800d26c:	9201      	str	r2, [sp, #4]
 800d26e:	9300      	str	r3, [sp, #0]
 800d270:	4603      	mov	r3, r0
 800d272:	2280      	movs	r2, #128	; 0x80
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f001 f903 	bl	800e480 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	7959      	ldrb	r1, [r3, #5]
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d28a:	687a      	ldr	r2, [r7, #4]
 800d28c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d28e:	b292      	uxth	r2, r2
 800d290:	9202      	str	r2, [sp, #8]
 800d292:	2200      	movs	r2, #0
 800d294:	9201      	str	r2, [sp, #4]
 800d296:	9300      	str	r3, [sp, #0]
 800d298:	4603      	mov	r3, r0
 800d29a:	2200      	movs	r2, #0
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f001 f8ef 	bl	800e480 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d2a2:	e1bc      	b.n	800d61e <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d2a4:	7bbb      	ldrb	r3, [r7, #14]
 800d2a6:	2b03      	cmp	r3, #3
 800d2a8:	f040 81b9 	bne.w	800d61e <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d2b2:	3301      	adds	r3, #1
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d2c2:	2b03      	cmp	r3, #3
 800d2c4:	d903      	bls.n	800d2ce <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	220d      	movs	r2, #13
 800d2ca:	701a      	strb	r2, [r3, #0]
      break;
 800d2cc:	e1a7      	b.n	800d61e <USBH_HandleEnum+0x42e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	795b      	ldrb	r3, [r3, #5]
 800d2d2:	4619      	mov	r1, r3
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f001 f923 	bl	800e520 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	791b      	ldrb	r3, [r3, #4]
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f001 f91d 	bl	800e520 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	701a      	strb	r2, [r3, #0]
      break;
 800d2ec:	e197      	b.n	800d61e <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800d2ee:	2112      	movs	r1, #18
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fa8d 	bl	800d810 <USBH_Get_DevDesc>
 800d2f6:	4603      	mov	r3, r0
 800d2f8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d2fa:	7bbb      	ldrb	r3, [r7, #14]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d103      	bne.n	800d308 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	2202      	movs	r2, #2
 800d304:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d306:	e18c      	b.n	800d622 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d308:	7bbb      	ldrb	r3, [r7, #14]
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	f040 8189 	bne.w	800d622 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d316:	3301      	adds	r3, #1
 800d318:	b2da      	uxtb	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d326:	2b03      	cmp	r3, #3
 800d328:	d903      	bls.n	800d332 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	220d      	movs	r2, #13
 800d32e:	701a      	strb	r2, [r3, #0]
      break;
 800d330:	e177      	b.n	800d622 <USBH_HandleEnum+0x432>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	795b      	ldrb	r3, [r3, #5]
 800d336:	4619      	mov	r1, r3
 800d338:	6878      	ldr	r0, [r7, #4]
 800d33a:	f001 f8f1 	bl	800e520 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	791b      	ldrb	r3, [r3, #4]
 800d342:	4619      	mov	r1, r3
 800d344:	6878      	ldr	r0, [r7, #4]
 800d346:	f001 f8eb 	bl	800e520 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	2200      	movs	r2, #0
 800d34e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	701a      	strb	r2, [r3, #0]
      break;
 800d356:	e164      	b.n	800d622 <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800d358:	2101      	movs	r1, #1
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 fb04 	bl	800d968 <USBH_SetAddress>
 800d360:	4603      	mov	r3, r0
 800d362:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d364:	7bbb      	ldrb	r3, [r7, #14]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d132      	bne.n	800d3d0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800d36a:	2002      	movs	r0, #2
 800d36c:	f005 ff32 	bl	80131d4 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	2201      	movs	r2, #1
 800d374:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	2203      	movs	r2, #3
 800d37c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	7919      	ldrb	r1, [r3, #4]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800d392:	b292      	uxth	r2, r2
 800d394:	9202      	str	r2, [sp, #8]
 800d396:	2200      	movs	r2, #0
 800d398:	9201      	str	r2, [sp, #4]
 800d39a:	9300      	str	r3, [sp, #0]
 800d39c:	4603      	mov	r3, r0
 800d39e:	2280      	movs	r2, #128	; 0x80
 800d3a0:	6878      	ldr	r0, [r7, #4]
 800d3a2:	f001 f86d 	bl	800e480 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	7959      	ldrb	r1, [r3, #5]
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800d3ba:	b292      	uxth	r2, r2
 800d3bc:	9202      	str	r2, [sp, #8]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	9201      	str	r2, [sp, #4]
 800d3c2:	9300      	str	r3, [sp, #0]
 800d3c4:	4603      	mov	r3, r0
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	6878      	ldr	r0, [r7, #4]
 800d3ca:	f001 f859 	bl	800e480 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800d3ce:	e12a      	b.n	800d626 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d3d0:	7bbb      	ldrb	r3, [r7, #14]
 800d3d2:	2b03      	cmp	r3, #3
 800d3d4:	f040 8127 	bne.w	800d626 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	220d      	movs	r2, #13
 800d3dc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	705a      	strb	r2, [r3, #1]
      break;
 800d3e4:	e11f      	b.n	800d626 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800d3e6:	2109      	movs	r1, #9
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 fa39 	bl	800d860 <USBH_Get_CfgDesc>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d3f2:	7bbb      	ldrb	r3, [r7, #14]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d103      	bne.n	800d400 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2204      	movs	r2, #4
 800d3fc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d3fe:	e114      	b.n	800d62a <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d400:	7bbb      	ldrb	r3, [r7, #14]
 800d402:	2b03      	cmp	r3, #3
 800d404:	f040 8111 	bne.w	800d62a <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d40e:	3301      	adds	r3, #1
 800d410:	b2da      	uxtb	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d41e:	2b03      	cmp	r3, #3
 800d420:	d903      	bls.n	800d42a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	220d      	movs	r2, #13
 800d426:	701a      	strb	r2, [r3, #0]
      break;
 800d428:	e0ff      	b.n	800d62a <USBH_HandleEnum+0x43a>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	795b      	ldrb	r3, [r3, #5]
 800d42e:	4619      	mov	r1, r3
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f001 f875 	bl	800e520 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	791b      	ldrb	r3, [r3, #4]
 800d43a:	4619      	mov	r1, r3
 800d43c:	6878      	ldr	r0, [r7, #4]
 800d43e:	f001 f86f 	bl	800e520 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2200      	movs	r2, #0
 800d446:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	701a      	strb	r2, [r3, #0]
      break;
 800d44e:	e0ec      	b.n	800d62a <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800d456:	4619      	mov	r1, r3
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 fa01 	bl	800d860 <USBH_Get_CfgDesc>
 800d45e:	4603      	mov	r3, r0
 800d460:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800d462:	7bbb      	ldrb	r3, [r7, #14]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d103      	bne.n	800d470 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2205      	movs	r2, #5
 800d46c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800d46e:	e0de      	b.n	800d62e <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d470:	7bbb      	ldrb	r3, [r7, #14]
 800d472:	2b03      	cmp	r3, #3
 800d474:	f040 80db 	bne.w	800d62e <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d47e:	3301      	adds	r3, #1
 800d480:	b2da      	uxtb	r2, r3
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800d48e:	2b03      	cmp	r3, #3
 800d490:	d903      	bls.n	800d49a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	220d      	movs	r2, #13
 800d496:	701a      	strb	r2, [r3, #0]
      break;
 800d498:	e0c9      	b.n	800d62e <USBH_HandleEnum+0x43e>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	795b      	ldrb	r3, [r3, #5]
 800d49e:	4619      	mov	r1, r3
 800d4a0:	6878      	ldr	r0, [r7, #4]
 800d4a2:	f001 f83d 	bl	800e520 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	791b      	ldrb	r3, [r3, #4]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f001 f837 	bl	800e520 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	701a      	strb	r2, [r3, #0]
      break;
 800d4be:	e0b6      	b.n	800d62e <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d036      	beq.n	800d538 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d4d6:	23ff      	movs	r3, #255	; 0xff
 800d4d8:	6878      	ldr	r0, [r7, #4]
 800d4da:	f000 f9e5 	bl	800d8a8 <USBH_Get_StringDesc>
 800d4de:	4603      	mov	r3, r0
 800d4e0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d4e2:	7bbb      	ldrb	r3, [r7, #14]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d111      	bne.n	800d50c <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2206      	movs	r2, #6
 800d4ec:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	2205      	movs	r2, #5
 800d4f2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d502:	2300      	movs	r3, #0
 800d504:	2200      	movs	r2, #0
 800d506:	f002 f9b9 	bl	800f87c <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d50a:	e092      	b.n	800d632 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d50c:	7bbb      	ldrb	r3, [r7, #14]
 800d50e:	2b03      	cmp	r3, #3
 800d510:	f040 808f 	bne.w	800d632 <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	2206      	movs	r2, #6
 800d518:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	2205      	movs	r2, #5
 800d51e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d52e:	2300      	movs	r3, #0
 800d530:	2200      	movs	r2, #0
 800d532:	f002 f9a3 	bl	800f87c <osMessageQueuePut>
      break;
 800d536:	e07c      	b.n	800d632 <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	2206      	movs	r2, #6
 800d53c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2205      	movs	r2, #5
 800d542:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d552:	2300      	movs	r3, #0
 800d554:	2200      	movs	r2, #0
 800d556:	f002 f991 	bl	800f87c <osMessageQueuePut>
      break;
 800d55a:	e06a      	b.n	800d632 <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800d562:	2b00      	cmp	r3, #0
 800d564:	d027      	beq.n	800d5b6 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d572:	23ff      	movs	r3, #255	; 0xff
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f997 	bl	800d8a8 <USBH_Get_StringDesc>
 800d57a:	4603      	mov	r3, r0
 800d57c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d57e:	7bbb      	ldrb	r3, [r7, #14]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d103      	bne.n	800d58c <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	2207      	movs	r2, #7
 800d588:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800d58a:	e054      	b.n	800d636 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d58c:	7bbb      	ldrb	r3, [r7, #14]
 800d58e:	2b03      	cmp	r3, #3
 800d590:	d151      	bne.n	800d636 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2207      	movs	r2, #7
 800d596:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2205      	movs	r2, #5
 800d59c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	f002 f964 	bl	800f87c <osMessageQueuePut>
      break;
 800d5b4:	e03f      	b.n	800d636 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2207      	movs	r2, #7
 800d5ba:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2205      	movs	r2, #5
 800d5c0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	f002 f952 	bl	800f87c <osMessageQueuePut>
      break;
 800d5d8:	e02d      	b.n	800d636 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d017      	beq.n	800d614 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d5f0:	23ff      	movs	r3, #255	; 0xff
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 f958 	bl	800d8a8 <USBH_Get_StringDesc>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d5fc:	7bbb      	ldrb	r3, [r7, #14]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d102      	bne.n	800d608 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d602:	2300      	movs	r3, #0
 800d604:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d606:	e018      	b.n	800d63a <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d608:	7bbb      	ldrb	r3, [r7, #14]
 800d60a:	2b03      	cmp	r3, #3
 800d60c:	d115      	bne.n	800d63a <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800d60e:	2300      	movs	r3, #0
 800d610:	73fb      	strb	r3, [r7, #15]
      break;
 800d612:	e012      	b.n	800d63a <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800d614:	2300      	movs	r3, #0
 800d616:	73fb      	strb	r3, [r7, #15]
      break;
 800d618:	e00f      	b.n	800d63a <USBH_HandleEnum+0x44a>

    default:
      break;
 800d61a:	bf00      	nop
 800d61c:	e00e      	b.n	800d63c <USBH_HandleEnum+0x44c>
      break;
 800d61e:	bf00      	nop
 800d620:	e00c      	b.n	800d63c <USBH_HandleEnum+0x44c>
      break;
 800d622:	bf00      	nop
 800d624:	e00a      	b.n	800d63c <USBH_HandleEnum+0x44c>
      break;
 800d626:	bf00      	nop
 800d628:	e008      	b.n	800d63c <USBH_HandleEnum+0x44c>
      break;
 800d62a:	bf00      	nop
 800d62c:	e006      	b.n	800d63c <USBH_HandleEnum+0x44c>
      break;
 800d62e:	bf00      	nop
 800d630:	e004      	b.n	800d63c <USBH_HandleEnum+0x44c>
      break;
 800d632:	bf00      	nop
 800d634:	e002      	b.n	800d63c <USBH_HandleEnum+0x44c>
      break;
 800d636:	bf00      	nop
 800d638:	e000      	b.n	800d63c <USBH_HandleEnum+0x44c>
      break;
 800d63a:	bf00      	nop
  }
  return Status;
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop

0800d648 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d648:	b480      	push	{r7}
 800d64a:	b083      	sub	sp, #12
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	6078      	str	r0, [r7, #4]
 800d650:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	683a      	ldr	r2, [r7, #0]
 800d656:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800d65a:	bf00      	nop
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800d674:	1c5a      	adds	r2, r3, #1
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800d67c:	6878      	ldr	r0, [r7, #4]
 800d67e:	f000 f804 	bl	800d68a <USBH_HandleSof>
}
 800d682:	bf00      	nop
 800d684:	3708      	adds	r7, #8
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}

0800d68a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b082      	sub	sp, #8
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	781b      	ldrb	r3, [r3, #0]
 800d696:	b2db      	uxtb	r3, r3
 800d698:	2b0b      	cmp	r3, #11
 800d69a:	d10a      	bne.n	800d6b2 <USBH_HandleSof+0x28>
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d005      	beq.n	800d6b2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d6ac:	699b      	ldr	r3, [r3, #24]
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	4798      	blx	r3
  }
}
 800d6b2:	bf00      	nop
 800d6b4:	3708      	adds	r7, #8
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}

0800d6ba <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d6ba:	b580      	push	{r7, lr}
 800d6bc:	b082      	sub	sp, #8
 800d6be:	af00      	add	r7, sp, #0
 800d6c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	2201      	movs	r2, #1
 800d6c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2201      	movs	r2, #1
 800d6ce:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d6de:	2300      	movs	r3, #0
 800d6e0:	2200      	movs	r2, #0
 800d6e2:	f002 f8cb 	bl	800f87c <osMessageQueuePut>
#endif
#endif

  return;
 800d6e6:	bf00      	nop
}
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d6ee:	b480      	push	{r7}
 800d6f0:	b083      	sub	sp, #12
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2200      	movs	r2, #0
 800d6fa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800d6fe:	bf00      	nop
}
 800d700:	370c      	adds	r7, #12
 800d702:	46bd      	mov	sp, r7
 800d704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d708:	4770      	bx	lr

0800d70a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b082      	sub	sp, #8
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	2201      	movs	r2, #1
 800d716:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2200      	movs	r2, #0
 800d71e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	2200      	movs	r2, #0
 800d726:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d73e:	2300      	movs	r3, #0
 800d740:	2200      	movs	r2, #0
 800d742:	f002 f89b 	bl	800f87c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d746:	2300      	movs	r3, #0
}
 800d748:	4618      	mov	r0, r3
 800d74a:	3708      	adds	r7, #8
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b082      	sub	sp, #8
 800d754:	af00      	add	r7, sp, #0
 800d756:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	2201      	movs	r2, #1
 800d75c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	2200      	movs	r2, #0
 800d764:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f005 fbb0 	bl	8012ed6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	791b      	ldrb	r3, [r3, #4]
 800d77a:	4619      	mov	r1, r3
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f000 fecf 	bl	800e520 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	795b      	ldrb	r3, [r3, #5]
 800d786:	4619      	mov	r1, r3
 800d788:	6878      	ldr	r0, [r7, #4]
 800d78a:	f000 fec9 	bl	800e520 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2201      	movs	r2, #1
 800d792:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f002 f869 	bl	800f87c <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	f002 f8c9 	bl	800f964 <osMessageQueueGet>
 800d7d2:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1f0      	bne.n	800d7bc <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f7ff faa6 	bl	800cd2c <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 800d7e0:	e7ec      	b.n	800d7bc <USBH_Process_OS+0x8>

0800d7e2 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b082      	sub	sp, #8
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800d7fe:	2300      	movs	r3, #0
 800d800:	2200      	movs	r2, #0
 800d802:	f002 f83b 	bl	800f87c <osMessageQueuePut>
#endif

  return USBH_OK;
 800d806:	2300      	movs	r3, #0
}
 800d808:	4618      	mov	r0, r3
 800d80a:	3708      	adds	r7, #8
 800d80c:	46bd      	mov	sp, r7
 800d80e:	bd80      	pop	{r7, pc}

0800d810 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d810:	b580      	push	{r7, lr}
 800d812:	b086      	sub	sp, #24
 800d814:	af02      	add	r7, sp, #8
 800d816:	6078      	str	r0, [r7, #4]
 800d818:	460b      	mov	r3, r1
 800d81a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d822:	78fb      	ldrb	r3, [r7, #3]
 800d824:	b29b      	uxth	r3, r3
 800d826:	9300      	str	r3, [sp, #0]
 800d828:	4613      	mov	r3, r2
 800d82a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d82e:	2100      	movs	r1, #0
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 f864 	bl	800d8fe <USBH_GetDescriptor>
 800d836:	4603      	mov	r3, r0
 800d838:	73fb      	strb	r3, [r7, #15]
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d10a      	bne.n	800d856 <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f203 3026 	addw	r0, r3, #806	; 0x326
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d84c:	78fa      	ldrb	r2, [r7, #3]
 800d84e:	b292      	uxth	r2, r2
 800d850:	4619      	mov	r1, r3
 800d852:	f000 f918 	bl	800da86 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800d856:	7bfb      	ldrb	r3, [r7, #15]
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3710      	adds	r7, #16
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af02      	add	r7, sp, #8
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	460b      	mov	r3, r1
 800d86a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	331c      	adds	r3, #28
 800d870:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d872:	887b      	ldrh	r3, [r7, #2]
 800d874:	9300      	str	r3, [sp, #0]
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d87c:	2100      	movs	r1, #0
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 f83d 	bl	800d8fe <USBH_GetDescriptor>
 800d884:	4603      	mov	r3, r0
 800d886:	72fb      	strb	r3, [r7, #11]
 800d888:	7afb      	ldrb	r3, [r7, #11]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d107      	bne.n	800d89e <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800d894:	887a      	ldrh	r2, [r7, #2]
 800d896:	68f9      	ldr	r1, [r7, #12]
 800d898:	4618      	mov	r0, r3
 800d89a:	f000 f964 	bl	800db66 <USBH_ParseCfgDesc>
  }

  return status;
 800d89e:	7afb      	ldrb	r3, [r7, #11]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b088      	sub	sp, #32
 800d8ac:	af02      	add	r7, sp, #8
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	607a      	str	r2, [r7, #4]
 800d8b2:	461a      	mov	r2, r3
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	72fb      	strb	r3, [r7, #11]
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 800d8bc:	7afb      	ldrb	r3, [r7, #11]
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d8c4:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 800d8cc:	893b      	ldrh	r3, [r7, #8]
 800d8ce:	9300      	str	r3, [sp, #0]
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	68f8      	ldr	r0, [r7, #12]
 800d8d6:	f000 f812 	bl	800d8fe <USBH_GetDescriptor>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	75fb      	strb	r3, [r7, #23]
 800d8de:	7dfb      	ldrb	r3, [r7, #23]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d107      	bne.n	800d8f4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d8ea:	893a      	ldrh	r2, [r7, #8]
 800d8ec:	6879      	ldr	r1, [r7, #4]
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	f000 fa37 	bl	800dd62 <USBH_ParseStringDesc>
  }

  return status;
 800d8f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8f6:	4618      	mov	r0, r3
 800d8f8:	3718      	adds	r7, #24
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	bd80      	pop	{r7, pc}

0800d8fe <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800d8fe:	b580      	push	{r7, lr}
 800d900:	b084      	sub	sp, #16
 800d902:	af00      	add	r7, sp, #0
 800d904:	60f8      	str	r0, [r7, #12]
 800d906:	607b      	str	r3, [r7, #4]
 800d908:	460b      	mov	r3, r1
 800d90a:	72fb      	strb	r3, [r7, #11]
 800d90c:	4613      	mov	r3, r2
 800d90e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	789b      	ldrb	r3, [r3, #2]
 800d914:	2b01      	cmp	r3, #1
 800d916:	d11c      	bne.n	800d952 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d918:	7afb      	ldrb	r3, [r7, #11]
 800d91a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d91e:	b2da      	uxtb	r2, r3
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2206      	movs	r2, #6
 800d928:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d92a:	68fb      	ldr	r3, [r7, #12]
 800d92c:	893a      	ldrh	r2, [r7, #8]
 800d92e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d930:	893b      	ldrh	r3, [r7, #8]
 800d932:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d936:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d93a:	d104      	bne.n	800d946 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f240 4209 	movw	r2, #1033	; 0x409
 800d942:	829a      	strh	r2, [r3, #20]
 800d944:	e002      	b.n	800d94c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	2200      	movs	r2, #0
 800d94a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	8b3a      	ldrh	r2, [r7, #24]
 800d950:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d952:	8b3b      	ldrh	r3, [r7, #24]
 800d954:	461a      	mov	r2, r3
 800d956:	6879      	ldr	r1, [r7, #4]
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f000 fa50 	bl	800ddfe <USBH_CtlReq>
 800d95e:	4603      	mov	r3, r0
}
 800d960:	4618      	mov	r0, r3
 800d962:	3710      	adds	r7, #16
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b082      	sub	sp, #8
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	460b      	mov	r3, r1
 800d972:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	789b      	ldrb	r3, [r3, #2]
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d10f      	bne.n	800d99c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2205      	movs	r2, #5
 800d986:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d988:	78fb      	ldrb	r3, [r7, #3]
 800d98a:	b29a      	uxth	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2200      	movs	r2, #0
 800d994:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2200      	movs	r2, #0
 800d99a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d99c:	2200      	movs	r2, #0
 800d99e:	2100      	movs	r1, #0
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f000 fa2c 	bl	800ddfe <USBH_CtlReq>
 800d9a6:	4603      	mov	r3, r0
}
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	3708      	adds	r7, #8
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	bd80      	pop	{r7, pc}

0800d9b0 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	460b      	mov	r3, r1
 800d9ba:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	789b      	ldrb	r3, [r3, #2]
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d10e      	bne.n	800d9e2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	2209      	movs	r2, #9
 800d9ce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	887a      	ldrh	r2, [r7, #2]
 800d9d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2200      	movs	r2, #0
 800d9da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2200      	movs	r2, #0
 800d9e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	2100      	movs	r1, #0
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa09 	bl	800ddfe <USBH_CtlReq>
 800d9ec:	4603      	mov	r3, r0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3708      	adds	r7, #8
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b082      	sub	sp, #8
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
 800d9fe:	460b      	mov	r3, r1
 800da00:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	789b      	ldrb	r3, [r3, #2]
 800da06:	2b01      	cmp	r3, #1
 800da08:	d10f      	bne.n	800da2a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	2200      	movs	r2, #0
 800da0e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	2203      	movs	r2, #3
 800da14:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800da16:	78fb      	ldrb	r3, [r7, #3]
 800da18:	b29a      	uxth	r2, r3
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	2200      	movs	r2, #0
 800da22:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2200      	movs	r2, #0
 800da28:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800da2a:	2200      	movs	r2, #0
 800da2c:	2100      	movs	r1, #0
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	f000 f9e5 	bl	800ddfe <USBH_CtlReq>
 800da34:	4603      	mov	r3, r0
}
 800da36:	4618      	mov	r0, r3
 800da38:	3708      	adds	r7, #8
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b082      	sub	sp, #8
 800da42:	af00      	add	r7, sp, #0
 800da44:	6078      	str	r0, [r7, #4]
 800da46:	460b      	mov	r3, r1
 800da48:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	789b      	ldrb	r3, [r3, #2]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d10f      	bne.n	800da72 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2202      	movs	r2, #2
 800da56:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	2200      	movs	r2, #0
 800da62:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800da64:	78fb      	ldrb	r3, [r7, #3]
 800da66:	b29a      	uxth	r2, r3
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2200      	movs	r2, #0
 800da70:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800da72:	2200      	movs	r2, #0
 800da74:	2100      	movs	r1, #0
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f000 f9c1 	bl	800ddfe <USBH_CtlReq>
 800da7c:	4603      	mov	r3, r0
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3708      	adds	r7, #8
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800da86:	b480      	push	{r7}
 800da88:	b085      	sub	sp, #20
 800da8a:	af00      	add	r7, sp, #0
 800da8c:	60f8      	str	r0, [r7, #12]
 800da8e:	60b9      	str	r1, [r7, #8]
 800da90:	4613      	mov	r3, r2
 800da92:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	781a      	ldrb	r2, [r3, #0]
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800da9c:	68bb      	ldr	r3, [r7, #8]
 800da9e:	785a      	ldrb	r2, [r3, #1]
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	3302      	adds	r3, #2
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	b29a      	uxth	r2, r3
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	3303      	adds	r3, #3
 800dab0:	781b      	ldrb	r3, [r3, #0]
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	021b      	lsls	r3, r3, #8
 800dab6:	b29b      	uxth	r3, r3
 800dab8:	4313      	orrs	r3, r2
 800daba:	b29a      	uxth	r2, r3
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	791a      	ldrb	r2, [r3, #4]
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800dac8:	68bb      	ldr	r3, [r7, #8]
 800daca:	795a      	ldrb	r2, [r3, #5]
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800dad0:	68bb      	ldr	r3, [r7, #8]
 800dad2:	799a      	ldrb	r2, [r3, #6]
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800dad8:	68bb      	ldr	r3, [r7, #8]
 800dada:	79da      	ldrb	r2, [r3, #7]
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800dae0:	88fb      	ldrh	r3, [r7, #6]
 800dae2:	2b08      	cmp	r3, #8
 800dae4:	d939      	bls.n	800db5a <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	3308      	adds	r3, #8
 800daea:	781b      	ldrb	r3, [r3, #0]
 800daec:	b29a      	uxth	r2, r3
 800daee:	68bb      	ldr	r3, [r7, #8]
 800daf0:	3309      	adds	r3, #9
 800daf2:	781b      	ldrb	r3, [r3, #0]
 800daf4:	b29b      	uxth	r3, r3
 800daf6:	021b      	lsls	r3, r3, #8
 800daf8:	b29b      	uxth	r3, r3
 800dafa:	4313      	orrs	r3, r2
 800dafc:	b29a      	uxth	r2, r3
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800db02:	68bb      	ldr	r3, [r7, #8]
 800db04:	330a      	adds	r3, #10
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	b29a      	uxth	r2, r3
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	330b      	adds	r3, #11
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	b29b      	uxth	r3, r3
 800db12:	021b      	lsls	r3, r3, #8
 800db14:	b29b      	uxth	r3, r3
 800db16:	4313      	orrs	r3, r2
 800db18:	b29a      	uxth	r2, r3
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800db1e:	68bb      	ldr	r3, [r7, #8]
 800db20:	330c      	adds	r3, #12
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	b29a      	uxth	r2, r3
 800db26:	68bb      	ldr	r3, [r7, #8]
 800db28:	330d      	adds	r3, #13
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	b29b      	uxth	r3, r3
 800db2e:	021b      	lsls	r3, r3, #8
 800db30:	b29b      	uxth	r3, r3
 800db32:	4313      	orrs	r3, r2
 800db34:	b29a      	uxth	r2, r3
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	7b9a      	ldrb	r2, [r3, #14]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800db42:	68bb      	ldr	r3, [r7, #8]
 800db44:	7bda      	ldrb	r2, [r3, #15]
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800db4a:	68bb      	ldr	r3, [r7, #8]
 800db4c:	7c1a      	ldrb	r2, [r3, #16]
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800db52:	68bb      	ldr	r3, [r7, #8]
 800db54:	7c5a      	ldrb	r2, [r3, #17]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	745a      	strb	r2, [r3, #17]
  }
}
 800db5a:	bf00      	nop
 800db5c:	3714      	adds	r7, #20
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr

0800db66 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 800db66:	b580      	push	{r7, lr}
 800db68:	b08a      	sub	sp, #40	; 0x28
 800db6a:	af00      	add	r7, sp, #0
 800db6c:	60f8      	str	r0, [r7, #12]
 800db6e:	60b9      	str	r1, [r7, #8]
 800db70:	4613      	mov	r3, r2
 800db72:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800db78:	2300      	movs	r3, #0
 800db7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800db7e:	2300      	movs	r3, #0
 800db80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	781a      	ldrb	r2, [r3, #0]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800db90:	68bb      	ldr	r3, [r7, #8]
 800db92:	785a      	ldrb	r2, [r3, #1]
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 800db98:	68bb      	ldr	r3, [r7, #8]
 800db9a:	3302      	adds	r3, #2
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	b29a      	uxth	r2, r3
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	3303      	adds	r3, #3
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	b29b      	uxth	r3, r3
 800dba8:	021b      	lsls	r3, r3, #8
 800dbaa:	b29b      	uxth	r3, r3
 800dbac:	4313      	orrs	r3, r2
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800dbb4:	68bb      	ldr	r3, [r7, #8]
 800dbb6:	791a      	ldrb	r2, [r3, #4]
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	795a      	ldrb	r2, [r3, #5]
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	799a      	ldrb	r2, [r3, #6]
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800dbcc:	68bb      	ldr	r3, [r7, #8]
 800dbce:	79da      	ldrb	r2, [r3, #7]
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	7a1a      	ldrb	r2, [r3, #8]
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800dbdc:	88fb      	ldrh	r3, [r7, #6]
 800dbde:	2b09      	cmp	r3, #9
 800dbe0:	d95f      	bls.n	800dca2 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800dbe2:	2309      	movs	r3, #9
 800dbe4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800dbe6:	2300      	movs	r3, #0
 800dbe8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dbea:	e051      	b.n	800dc90 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dbec:	f107 0316 	add.w	r3, r7, #22
 800dbf0:	4619      	mov	r1, r3
 800dbf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dbf4:	f000 f8e8 	bl	800ddc8 <USBH_GetNextDesc>
 800dbf8:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800dbfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbfc:	785b      	ldrb	r3, [r3, #1]
 800dbfe:	2b04      	cmp	r3, #4
 800dc00:	d146      	bne.n	800dc90 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800dc02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc06:	221a      	movs	r2, #26
 800dc08:	fb02 f303 	mul.w	r3, r2, r3
 800dc0c:	3308      	adds	r3, #8
 800dc0e:	68fa      	ldr	r2, [r7, #12]
 800dc10:	4413      	add	r3, r2
 800dc12:	3302      	adds	r3, #2
 800dc14:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800dc16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc18:	69f8      	ldr	r0, [r7, #28]
 800dc1a:	f000 f846 	bl	800dcaa <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800dc1e:	2300      	movs	r3, #0
 800dc20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800dc24:	2300      	movs	r3, #0
 800dc26:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dc28:	e022      	b.n	800dc70 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800dc2a:	f107 0316 	add.w	r3, r7, #22
 800dc2e:	4619      	mov	r1, r3
 800dc30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc32:	f000 f8c9 	bl	800ddc8 <USBH_GetNextDesc>
 800dc36:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800dc38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc3a:	785b      	ldrb	r3, [r3, #1]
 800dc3c:	2b05      	cmp	r3, #5
 800dc3e:	d117      	bne.n	800dc70 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800dc40:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc44:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800dc48:	3201      	adds	r2, #1
 800dc4a:	00d2      	lsls	r2, r2, #3
 800dc4c:	211a      	movs	r1, #26
 800dc4e:	fb01 f303 	mul.w	r3, r1, r3
 800dc52:	4413      	add	r3, r2
 800dc54:	3308      	adds	r3, #8
 800dc56:	68fa      	ldr	r2, [r7, #12]
 800dc58:	4413      	add	r3, r2
 800dc5a:	3304      	adds	r3, #4
 800dc5c:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 800dc5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc60:	69b8      	ldr	r0, [r7, #24]
 800dc62:	f000 f851 	bl	800dd08 <USBH_ParseEPDesc>
            ep_ix++;
 800dc66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	791b      	ldrb	r3, [r3, #4]
 800dc74:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800dc78:	429a      	cmp	r2, r3
 800dc7a:	d204      	bcs.n	800dc86 <USBH_ParseCfgDesc+0x120>
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	885a      	ldrh	r2, [r3, #2]
 800dc80:	8afb      	ldrh	r3, [r7, #22]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	d8d1      	bhi.n	800dc2a <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800dc86:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc8a:	3301      	adds	r3, #1
 800dc8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800dc90:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d804      	bhi.n	800dca2 <USBH_ParseCfgDesc+0x13c>
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	885a      	ldrh	r2, [r3, #2]
 800dc9c:	8afb      	ldrh	r3, [r7, #22]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d8a4      	bhi.n	800dbec <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800dca2:	bf00      	nop
 800dca4:	3728      	adds	r7, #40	; 0x28
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}

0800dcaa <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800dcaa:	b480      	push	{r7}
 800dcac:	b083      	sub	sp, #12
 800dcae:	af00      	add	r7, sp, #0
 800dcb0:	6078      	str	r0, [r7, #4]
 800dcb2:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800dcb4:	683b      	ldr	r3, [r7, #0]
 800dcb6:	781a      	ldrb	r2, [r3, #0]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	785a      	ldrb	r2, [r3, #1]
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800dcc4:	683b      	ldr	r3, [r7, #0]
 800dcc6:	789a      	ldrb	r2, [r3, #2]
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	78da      	ldrb	r2, [r3, #3]
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800dcd4:	683b      	ldr	r3, [r7, #0]
 800dcd6:	791a      	ldrb	r2, [r3, #4]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800dcdc:	683b      	ldr	r3, [r7, #0]
 800dcde:	795a      	ldrb	r2, [r3, #5]
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	799a      	ldrb	r2, [r3, #6]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800dcec:	683b      	ldr	r3, [r7, #0]
 800dcee:	79da      	ldrb	r2, [r3, #7]
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	7a1a      	ldrb	r2, [r3, #8]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	721a      	strb	r2, [r3, #8]
}
 800dcfc:	bf00      	nop
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	781a      	ldrb	r2, [r3, #0]
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800dd1a:	683b      	ldr	r3, [r7, #0]
 800dd1c:	785a      	ldrb	r2, [r3, #1]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800dd22:	683b      	ldr	r3, [r7, #0]
 800dd24:	789a      	ldrb	r2, [r3, #2]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	78da      	ldrb	r2, [r3, #3]
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	3304      	adds	r3, #4
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	b29a      	uxth	r2, r3
 800dd3a:	683b      	ldr	r3, [r7, #0]
 800dd3c:	3305      	adds	r3, #5
 800dd3e:	781b      	ldrb	r3, [r3, #0]
 800dd40:	b29b      	uxth	r3, r3
 800dd42:	021b      	lsls	r3, r3, #8
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	4313      	orrs	r3, r2
 800dd48:	b29a      	uxth	r2, r3
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	799a      	ldrb	r2, [r3, #6]
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	719a      	strb	r2, [r3, #6]
}
 800dd56:	bf00      	nop
 800dd58:	370c      	adds	r7, #12
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd60:	4770      	bx	lr

0800dd62 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800dd62:	b480      	push	{r7}
 800dd64:	b087      	sub	sp, #28
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	60f8      	str	r0, [r7, #12]
 800dd6a:	60b9      	str	r1, [r7, #8]
 800dd6c:	4613      	mov	r3, r2
 800dd6e:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	3301      	adds	r3, #1
 800dd74:	781b      	ldrb	r3, [r3, #0]
 800dd76:	2b03      	cmp	r3, #3
 800dd78:	d120      	bne.n	800ddbc <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	1e9a      	subs	r2, r3, #2
 800dd80:	88fb      	ldrh	r3, [r7, #6]
 800dd82:	4293      	cmp	r3, r2
 800dd84:	bf28      	it	cs
 800dd86:	4613      	movcs	r3, r2
 800dd88:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	3302      	adds	r3, #2
 800dd8e:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dd90:	2300      	movs	r3, #0
 800dd92:	82fb      	strh	r3, [r7, #22]
 800dd94:	e00b      	b.n	800ddae <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dd96:	8afb      	ldrh	r3, [r7, #22]
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	781a      	ldrb	r2, [r3, #0]
 800dd9e:	68bb      	ldr	r3, [r7, #8]
 800dda0:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	3301      	adds	r3, #1
 800dda6:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dda8:	8afb      	ldrh	r3, [r7, #22]
 800ddaa:	3302      	adds	r3, #2
 800ddac:	82fb      	strh	r3, [r7, #22]
 800ddae:	8afa      	ldrh	r2, [r7, #22]
 800ddb0:	8abb      	ldrh	r3, [r7, #20]
 800ddb2:	429a      	cmp	r2, r3
 800ddb4:	d3ef      	bcc.n	800dd96 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	701a      	strb	r2, [r3, #0]
  }
}
 800ddbc:	bf00      	nop
 800ddbe:	371c      	adds	r7, #28
 800ddc0:	46bd      	mov	sp, r7
 800ddc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc6:	4770      	bx	lr

0800ddc8 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b085      	sub	sp, #20
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	881a      	ldrh	r2, [r3, #0]
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	781b      	ldrb	r3, [r3, #0]
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	4413      	add	r3, r2
 800ddde:	b29a      	uxth	r2, r3
 800dde0:	683b      	ldr	r3, [r7, #0]
 800dde2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	781b      	ldrb	r3, [r3, #0]
 800dde8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	4413      	add	r3, r2
 800ddee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ddf0:	68fb      	ldr	r3, [r7, #12]
}
 800ddf2:	4618      	mov	r0, r3
 800ddf4:	3714      	adds	r7, #20
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfc:	4770      	bx	lr

0800ddfe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800ddfe:	b580      	push	{r7, lr}
 800de00:	b086      	sub	sp, #24
 800de02:	af00      	add	r7, sp, #0
 800de04:	60f8      	str	r0, [r7, #12]
 800de06:	60b9      	str	r1, [r7, #8]
 800de08:	4613      	mov	r3, r2
 800de0a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800de0c:	2301      	movs	r3, #1
 800de0e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	789b      	ldrb	r3, [r3, #2]
 800de14:	2b01      	cmp	r3, #1
 800de16:	d002      	beq.n	800de1e <USBH_CtlReq+0x20>
 800de18:	2b02      	cmp	r3, #2
 800de1a:	d01d      	beq.n	800de58 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800de1c:	e043      	b.n	800dea6 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	68ba      	ldr	r2, [r7, #8]
 800de22:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	88fa      	ldrh	r2, [r7, #6]
 800de28:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	2201      	movs	r2, #1
 800de2e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	2202      	movs	r2, #2
 800de34:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800de36:	2301      	movs	r3, #1
 800de38:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	2203      	movs	r2, #3
 800de3e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de4e:	2300      	movs	r3, #0
 800de50:	2200      	movs	r2, #0
 800de52:	f001 fd13 	bl	800f87c <osMessageQueuePut>
      break;
 800de56:	e026      	b.n	800dea6 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800de58:	68f8      	ldr	r0, [r7, #12]
 800de5a:	f000 f829 	bl	800deb0 <USBH_HandleControl>
 800de5e:	4603      	mov	r3, r0
 800de60:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800de62:	7dfb      	ldrb	r3, [r7, #23]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d002      	beq.n	800de6e <USBH_CtlReq+0x70>
 800de68:	7dfb      	ldrb	r3, [r7, #23]
 800de6a:	2b03      	cmp	r3, #3
 800de6c:	d106      	bne.n	800de7c <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	2201      	movs	r2, #1
 800de72:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2200      	movs	r2, #0
 800de78:	761a      	strb	r2, [r3, #24]
 800de7a:	e005      	b.n	800de88 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800de7c:	7dfb      	ldrb	r3, [r7, #23]
 800de7e:	2b02      	cmp	r3, #2
 800de80:	d102      	bne.n	800de88 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2201      	movs	r2, #1
 800de86:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2203      	movs	r2, #3
 800de8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800de9c:	2300      	movs	r3, #0
 800de9e:	2200      	movs	r2, #0
 800dea0:	f001 fcec 	bl	800f87c <osMessageQueuePut>
      break;
 800dea4:	bf00      	nop
  }
  return status;
 800dea6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3718      	adds	r7, #24
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}

0800deb0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af02      	add	r7, sp, #8
 800deb6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800deb8:	2301      	movs	r3, #1
 800deba:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800debc:	2300      	movs	r3, #0
 800debe:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	7e1b      	ldrb	r3, [r3, #24]
 800dec4:	3b01      	subs	r3, #1
 800dec6:	2b0a      	cmp	r3, #10
 800dec8:	f200 8229 	bhi.w	800e31e <USBH_HandleControl+0x46e>
 800decc:	a201      	add	r2, pc, #4	; (adr r2, 800ded4 <USBH_HandleControl+0x24>)
 800dece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ded2:	bf00      	nop
 800ded4:	0800df01 	.word	0x0800df01
 800ded8:	0800df1b 	.word	0x0800df1b
 800dedc:	0800dfbd 	.word	0x0800dfbd
 800dee0:	0800dfe3 	.word	0x0800dfe3
 800dee4:	0800e06f 	.word	0x0800e06f
 800dee8:	0800e099 	.word	0x0800e099
 800deec:	0800e15b 	.word	0x0800e15b
 800def0:	0800e17d 	.word	0x0800e17d
 800def4:	0800e20f 	.word	0x0800e20f
 800def8:	0800e235 	.word	0x0800e235
 800defc:	0800e2c7 	.word	0x0800e2c7
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f103 0110 	add.w	r1, r3, #16
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	795b      	ldrb	r3, [r3, #5]
 800df0a:	461a      	mov	r2, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f000 fa17 	bl	800e340 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	2202      	movs	r2, #2
 800df16:	761a      	strb	r2, [r3, #24]
      break;
 800df18:	e20c      	b.n	800e334 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	795b      	ldrb	r3, [r3, #5]
 800df1e:	4619      	mov	r1, r3
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f005 f8c7 	bl	80130b4 <USBH_LL_GetURBState>
 800df26:	4603      	mov	r3, r0
 800df28:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800df2a:	7bbb      	ldrb	r3, [r7, #14]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d12c      	bne.n	800df8a <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	7c1b      	ldrb	r3, [r3, #16]
 800df34:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800df38:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	8adb      	ldrh	r3, [r3, #22]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d00a      	beq.n	800df58 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800df42:	7b7b      	ldrb	r3, [r7, #13]
 800df44:	2b80      	cmp	r3, #128	; 0x80
 800df46:	d103      	bne.n	800df50 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	2203      	movs	r2, #3
 800df4c:	761a      	strb	r2, [r3, #24]
 800df4e:	e00d      	b.n	800df6c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2205      	movs	r2, #5
 800df54:	761a      	strb	r2, [r3, #24]
 800df56:	e009      	b.n	800df6c <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800df58:	7b7b      	ldrb	r3, [r7, #13]
 800df5a:	2b80      	cmp	r3, #128	; 0x80
 800df5c:	d103      	bne.n	800df66 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	2209      	movs	r2, #9
 800df62:	761a      	strb	r2, [r3, #24]
 800df64:	e002      	b.n	800df6c <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	2207      	movs	r2, #7
 800df6a:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2203      	movs	r2, #3
 800df70:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800df80:	2300      	movs	r3, #0
 800df82:	2200      	movs	r2, #0
 800df84:	f001 fc7a 	bl	800f87c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800df88:	e1cb      	b.n	800e322 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800df8a:	7bbb      	ldrb	r3, [r7, #14]
 800df8c:	2b04      	cmp	r3, #4
 800df8e:	d003      	beq.n	800df98 <USBH_HandleControl+0xe8>
 800df90:	7bbb      	ldrb	r3, [r7, #14]
 800df92:	2b02      	cmp	r3, #2
 800df94:	f040 81c5 	bne.w	800e322 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	220b      	movs	r2, #11
 800df9c:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2203      	movs	r2, #3
 800dfa2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f001 fc61 	bl	800f87c <osMessageQueuePut>
      break;
 800dfba:	e1b2      	b.n	800e322 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800dfc2:	b29a      	uxth	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6899      	ldr	r1, [r3, #8]
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	899a      	ldrh	r2, [r3, #12]
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	791b      	ldrb	r3, [r3, #4]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 f9f2 	bl	800e3be <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	2204      	movs	r2, #4
 800dfde:	761a      	strb	r2, [r3, #24]
      break;
 800dfe0:	e1a8      	b.n	800e334 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	791b      	ldrb	r3, [r3, #4]
 800dfe6:	4619      	mov	r1, r3
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f005 f863 	bl	80130b4 <USBH_LL_GetURBState>
 800dfee:	4603      	mov	r3, r0
 800dff0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dff2:	7bbb      	ldrb	r3, [r7, #14]
 800dff4:	2b01      	cmp	r3, #1
 800dff6:	d110      	bne.n	800e01a <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2209      	movs	r2, #9
 800dffc:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2203      	movs	r2, #3
 800e002:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e012:	2300      	movs	r3, #0
 800e014:	2200      	movs	r2, #0
 800e016:	f001 fc31 	bl	800f87c <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e01a:	7bbb      	ldrb	r3, [r7, #14]
 800e01c:	2b05      	cmp	r3, #5
 800e01e:	d110      	bne.n	800e042 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e020:	2303      	movs	r3, #3
 800e022:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2203      	movs	r2, #3
 800e028:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e038:	2300      	movs	r3, #0
 800e03a:	2200      	movs	r2, #0
 800e03c:	f001 fc1e 	bl	800f87c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e040:	e171      	b.n	800e326 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800e042:	7bbb      	ldrb	r3, [r7, #14]
 800e044:	2b04      	cmp	r3, #4
 800e046:	f040 816e 	bne.w	800e326 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	220b      	movs	r2, #11
 800e04e:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2203      	movs	r2, #3
 800e054:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e064:	2300      	movs	r3, #0
 800e066:	2200      	movs	r2, #0
 800e068:	f001 fc08 	bl	800f87c <osMessageQueuePut>
      break;
 800e06c:	e15b      	b.n	800e326 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6899      	ldr	r1, [r3, #8]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	899a      	ldrh	r2, [r3, #12]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	795b      	ldrb	r3, [r3, #5]
 800e07a:	2001      	movs	r0, #1
 800e07c:	9000      	str	r0, [sp, #0]
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 f978 	bl	800e374 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e08a:	b29a      	uxth	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2206      	movs	r2, #6
 800e094:	761a      	strb	r2, [r3, #24]
      break;
 800e096:	e14d      	b.n	800e334 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	795b      	ldrb	r3, [r3, #5]
 800e09c:	4619      	mov	r1, r3
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f005 f808 	bl	80130b4 <USBH_LL_GetURBState>
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e0a8:	7bbb      	ldrb	r3, [r7, #14]
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d111      	bne.n	800e0d2 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	2207      	movs	r2, #7
 800e0b2:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2203      	movs	r2, #3
 800e0b8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	f001 fbd6 	bl	800f87c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e0d0:	e12b      	b.n	800e32a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800e0d2:	7bbb      	ldrb	r3, [r7, #14]
 800e0d4:	2b05      	cmp	r3, #5
 800e0d6:	d113      	bne.n	800e100 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	220c      	movs	r2, #12
 800e0dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e0de:	2303      	movs	r3, #3
 800e0e0:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2203      	movs	r2, #3
 800e0e6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e0f6:	2300      	movs	r3, #0
 800e0f8:	2200      	movs	r2, #0
 800e0fa:	f001 fbbf 	bl	800f87c <osMessageQueuePut>
      break;
 800e0fe:	e114      	b.n	800e32a <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e100:	7bbb      	ldrb	r3, [r7, #14]
 800e102:	2b02      	cmp	r3, #2
 800e104:	d111      	bne.n	800e12a <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2205      	movs	r2, #5
 800e10a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2203      	movs	r2, #3
 800e110:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e120:	2300      	movs	r3, #0
 800e122:	2200      	movs	r2, #0
 800e124:	f001 fbaa 	bl	800f87c <osMessageQueuePut>
      break;
 800e128:	e0ff      	b.n	800e32a <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800e12a:	7bbb      	ldrb	r3, [r7, #14]
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	f040 80fc 	bne.w	800e32a <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	220b      	movs	r2, #11
 800e136:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e138:	2302      	movs	r3, #2
 800e13a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2203      	movs	r2, #3
 800e140:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e150:	2300      	movs	r3, #0
 800e152:	2200      	movs	r2, #0
 800e154:	f001 fb92 	bl	800f87c <osMessageQueuePut>
      break;
 800e158:	e0e7      	b.n	800e32a <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	791b      	ldrb	r3, [r3, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	2100      	movs	r1, #0
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f000 f92b 	bl	800e3be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e16e:	b29a      	uxth	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2208      	movs	r2, #8
 800e178:	761a      	strb	r2, [r3, #24]

      break;
 800e17a:	e0db      	b.n	800e334 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	791b      	ldrb	r3, [r3, #4]
 800e180:	4619      	mov	r1, r3
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f004 ff96 	bl	80130b4 <USBH_LL_GetURBState>
 800e188:	4603      	mov	r3, r0
 800e18a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e18c:	7bbb      	ldrb	r3, [r7, #14]
 800e18e:	2b01      	cmp	r3, #1
 800e190:	d113      	bne.n	800e1ba <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	220d      	movs	r2, #13
 800e196:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800e198:	2300      	movs	r3, #0
 800e19a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2203      	movs	r2, #3
 800e1a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f001 fb62 	bl	800f87c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e1b8:	e0b9      	b.n	800e32e <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800e1ba:	7bbb      	ldrb	r3, [r7, #14]
 800e1bc:	2b04      	cmp	r3, #4
 800e1be:	d111      	bne.n	800e1e4 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	220b      	movs	r2, #11
 800e1c4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	2203      	movs	r2, #3
 800e1ca:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e1da:	2300      	movs	r3, #0
 800e1dc:	2200      	movs	r2, #0
 800e1de:	f001 fb4d 	bl	800f87c <osMessageQueuePut>
      break;
 800e1e2:	e0a4      	b.n	800e32e <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800e1e4:	7bbb      	ldrb	r3, [r7, #14]
 800e1e6:	2b05      	cmp	r3, #5
 800e1e8:	f040 80a1 	bne.w	800e32e <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800e1ec:	2303      	movs	r3, #3
 800e1ee:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2203      	movs	r2, #3
 800e1f4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e204:	2300      	movs	r3, #0
 800e206:	2200      	movs	r2, #0
 800e208:	f001 fb38 	bl	800f87c <osMessageQueuePut>
      break;
 800e20c:	e08f      	b.n	800e32e <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	795b      	ldrb	r3, [r3, #5]
 800e212:	2201      	movs	r2, #1
 800e214:	9200      	str	r2, [sp, #0]
 800e216:	2200      	movs	r2, #0
 800e218:	2100      	movs	r1, #0
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f000 f8aa 	bl	800e374 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800e226:	b29a      	uxth	r2, r3
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	220a      	movs	r2, #10
 800e230:	761a      	strb	r2, [r3, #24]
      break;
 800e232:	e07f      	b.n	800e334 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	795b      	ldrb	r3, [r3, #5]
 800e238:	4619      	mov	r1, r3
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f004 ff3a 	bl	80130b4 <USBH_LL_GetURBState>
 800e240:	4603      	mov	r3, r0
 800e242:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800e244:	7bbb      	ldrb	r3, [r7, #14]
 800e246:	2b01      	cmp	r3, #1
 800e248:	d113      	bne.n	800e272 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800e24a:	2300      	movs	r3, #0
 800e24c:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	220d      	movs	r2, #13
 800e252:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2203      	movs	r2, #3
 800e258:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e268:	2300      	movs	r3, #0
 800e26a:	2200      	movs	r2, #0
 800e26c:	f001 fb06 	bl	800f87c <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800e270:	e05f      	b.n	800e332 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e272:	7bbb      	ldrb	r3, [r7, #14]
 800e274:	2b02      	cmp	r3, #2
 800e276:	d111      	bne.n	800e29c <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	2209      	movs	r2, #9
 800e27c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2203      	movs	r2, #3
 800e282:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e292:	2300      	movs	r3, #0
 800e294:	2200      	movs	r2, #0
 800e296:	f001 faf1 	bl	800f87c <osMessageQueuePut>
      break;
 800e29a:	e04a      	b.n	800e332 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800e29c:	7bbb      	ldrb	r3, [r7, #14]
 800e29e:	2b04      	cmp	r3, #4
 800e2a0:	d147      	bne.n	800e332 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	220b      	movs	r2, #11
 800e2a6:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2203      	movs	r2, #3
 800e2ac:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	f503 7178 	add.w	r1, r3, #992	; 0x3e0
 800e2bc:	2300      	movs	r3, #0
 800e2be:	2200      	movs	r2, #0
 800e2c0:	f001 fadc 	bl	800f87c <osMessageQueuePut>
      break;
 800e2c4:	e035      	b.n	800e332 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	7e5b      	ldrb	r3, [r3, #25]
 800e2ca:	3301      	adds	r3, #1
 800e2cc:	b2da      	uxtb	r2, r3
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	765a      	strb	r2, [r3, #25]
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	7e5b      	ldrb	r3, [r3, #25]
 800e2d6:	2b02      	cmp	r3, #2
 800e2d8:	d806      	bhi.n	800e2e8 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2201      	movs	r2, #1
 800e2e4:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800e2e6:	e025      	b.n	800e334 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e2ee:	2106      	movs	r1, #6
 800e2f0:	6878      	ldr	r0, [r7, #4]
 800e2f2:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2200      	movs	r2, #0
 800e2f8:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	795b      	ldrb	r3, [r3, #5]
 800e2fe:	4619      	mov	r1, r3
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 f90d 	bl	800e520 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	791b      	ldrb	r3, [r3, #4]
 800e30a:	4619      	mov	r1, r3
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f000 f907 	bl	800e520 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2200      	movs	r2, #0
 800e316:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800e318:	2302      	movs	r3, #2
 800e31a:	73fb      	strb	r3, [r7, #15]
      break;
 800e31c:	e00a      	b.n	800e334 <USBH_HandleControl+0x484>

    default:
      break;
 800e31e:	bf00      	nop
 800e320:	e008      	b.n	800e334 <USBH_HandleControl+0x484>
      break;
 800e322:	bf00      	nop
 800e324:	e006      	b.n	800e334 <USBH_HandleControl+0x484>
      break;
 800e326:	bf00      	nop
 800e328:	e004      	b.n	800e334 <USBH_HandleControl+0x484>
      break;
 800e32a:	bf00      	nop
 800e32c:	e002      	b.n	800e334 <USBH_HandleControl+0x484>
      break;
 800e32e:	bf00      	nop
 800e330:	e000      	b.n	800e334 <USBH_HandleControl+0x484>
      break;
 800e332:	bf00      	nop
  }

  return status;
 800e334:	7bfb      	ldrb	r3, [r7, #15]
}
 800e336:	4618      	mov	r0, r3
 800e338:	3710      	adds	r7, #16
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop

0800e340 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b088      	sub	sp, #32
 800e344:	af04      	add	r7, sp, #16
 800e346:	60f8      	str	r0, [r7, #12]
 800e348:	60b9      	str	r1, [r7, #8]
 800e34a:	4613      	mov	r3, r2
 800e34c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e34e:	79f9      	ldrb	r1, [r7, #7]
 800e350:	2300      	movs	r3, #0
 800e352:	9303      	str	r3, [sp, #12]
 800e354:	2308      	movs	r3, #8
 800e356:	9302      	str	r3, [sp, #8]
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	9301      	str	r3, [sp, #4]
 800e35c:	2300      	movs	r3, #0
 800e35e:	9300      	str	r3, [sp, #0]
 800e360:	2300      	movs	r3, #0
 800e362:	2200      	movs	r2, #0
 800e364:	68f8      	ldr	r0, [r7, #12]
 800e366:	f004 fe74 	bl	8013052 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800e36a:	2300      	movs	r3, #0
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3710      	adds	r7, #16
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b088      	sub	sp, #32
 800e378:	af04      	add	r7, sp, #16
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	60b9      	str	r1, [r7, #8]
 800e37e:	4611      	mov	r1, r2
 800e380:	461a      	mov	r2, r3
 800e382:	460b      	mov	r3, r1
 800e384:	80fb      	strh	r3, [r7, #6]
 800e386:	4613      	mov	r3, r2
 800e388:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e390:	2b00      	cmp	r3, #0
 800e392:	d001      	beq.n	800e398 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e394:	2300      	movs	r3, #0
 800e396:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e398:	7979      	ldrb	r1, [r7, #5]
 800e39a:	7e3b      	ldrb	r3, [r7, #24]
 800e39c:	9303      	str	r3, [sp, #12]
 800e39e:	88fb      	ldrh	r3, [r7, #6]
 800e3a0:	9302      	str	r3, [sp, #8]
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	9301      	str	r3, [sp, #4]
 800e3a6:	2301      	movs	r3, #1
 800e3a8:	9300      	str	r3, [sp, #0]
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	2200      	movs	r2, #0
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	f004 fe4f 	bl	8013052 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e3b4:	2300      	movs	r3, #0
}
 800e3b6:	4618      	mov	r0, r3
 800e3b8:	3710      	adds	r7, #16
 800e3ba:	46bd      	mov	sp, r7
 800e3bc:	bd80      	pop	{r7, pc}

0800e3be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800e3be:	b580      	push	{r7, lr}
 800e3c0:	b088      	sub	sp, #32
 800e3c2:	af04      	add	r7, sp, #16
 800e3c4:	60f8      	str	r0, [r7, #12]
 800e3c6:	60b9      	str	r1, [r7, #8]
 800e3c8:	4611      	mov	r1, r2
 800e3ca:	461a      	mov	r2, r3
 800e3cc:	460b      	mov	r3, r1
 800e3ce:	80fb      	strh	r3, [r7, #6]
 800e3d0:	4613      	mov	r3, r2
 800e3d2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e3d4:	7979      	ldrb	r1, [r7, #5]
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	9303      	str	r3, [sp, #12]
 800e3da:	88fb      	ldrh	r3, [r7, #6]
 800e3dc:	9302      	str	r3, [sp, #8]
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	9301      	str	r3, [sp, #4]
 800e3e2:	2301      	movs	r3, #1
 800e3e4:	9300      	str	r3, [sp, #0]
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	2201      	movs	r2, #1
 800e3ea:	68f8      	ldr	r0, [r7, #12]
 800e3ec:	f004 fe31 	bl	8013052 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e3f0:	2300      	movs	r3, #0

}
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	3710      	adds	r7, #16
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b088      	sub	sp, #32
 800e3fe:	af04      	add	r7, sp, #16
 800e400:	60f8      	str	r0, [r7, #12]
 800e402:	60b9      	str	r1, [r7, #8]
 800e404:	4611      	mov	r1, r2
 800e406:	461a      	mov	r2, r3
 800e408:	460b      	mov	r3, r1
 800e40a:	80fb      	strh	r3, [r7, #6]
 800e40c:	4613      	mov	r3, r2
 800e40e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e416:	2b00      	cmp	r3, #0
 800e418:	d001      	beq.n	800e41e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e41a:	2300      	movs	r3, #0
 800e41c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e41e:	7979      	ldrb	r1, [r7, #5]
 800e420:	7e3b      	ldrb	r3, [r7, #24]
 800e422:	9303      	str	r3, [sp, #12]
 800e424:	88fb      	ldrh	r3, [r7, #6]
 800e426:	9302      	str	r3, [sp, #8]
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	9301      	str	r3, [sp, #4]
 800e42c:	2301      	movs	r3, #1
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	2302      	movs	r3, #2
 800e432:	2200      	movs	r2, #0
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f004 fe0c 	bl	8013052 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e43a:	2300      	movs	r3, #0
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3710      	adds	r7, #16
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}

0800e444 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b088      	sub	sp, #32
 800e448:	af04      	add	r7, sp, #16
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	4611      	mov	r1, r2
 800e450:	461a      	mov	r2, r3
 800e452:	460b      	mov	r3, r1
 800e454:	80fb      	strh	r3, [r7, #6]
 800e456:	4613      	mov	r3, r2
 800e458:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800e45a:	7979      	ldrb	r1, [r7, #5]
 800e45c:	2300      	movs	r3, #0
 800e45e:	9303      	str	r3, [sp, #12]
 800e460:	88fb      	ldrh	r3, [r7, #6]
 800e462:	9302      	str	r3, [sp, #8]
 800e464:	68bb      	ldr	r3, [r7, #8]
 800e466:	9301      	str	r3, [sp, #4]
 800e468:	2301      	movs	r3, #1
 800e46a:	9300      	str	r3, [sp, #0]
 800e46c:	2302      	movs	r3, #2
 800e46e:	2201      	movs	r2, #1
 800e470:	68f8      	ldr	r0, [r7, #12]
 800e472:	f004 fdee 	bl	8013052 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 800e476:	2300      	movs	r3, #0
}
 800e478:	4618      	mov	r0, r3
 800e47a:	3710      	adds	r7, #16
 800e47c:	46bd      	mov	sp, r7
 800e47e:	bd80      	pop	{r7, pc}

0800e480 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e480:	b580      	push	{r7, lr}
 800e482:	b086      	sub	sp, #24
 800e484:	af04      	add	r7, sp, #16
 800e486:	6078      	str	r0, [r7, #4]
 800e488:	4608      	mov	r0, r1
 800e48a:	4611      	mov	r1, r2
 800e48c:	461a      	mov	r2, r3
 800e48e:	4603      	mov	r3, r0
 800e490:	70fb      	strb	r3, [r7, #3]
 800e492:	460b      	mov	r3, r1
 800e494:	70bb      	strb	r3, [r7, #2]
 800e496:	4613      	mov	r3, r2
 800e498:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e49a:	7878      	ldrb	r0, [r7, #1]
 800e49c:	78ba      	ldrb	r2, [r7, #2]
 800e49e:	78f9      	ldrb	r1, [r7, #3]
 800e4a0:	8b3b      	ldrh	r3, [r7, #24]
 800e4a2:	9302      	str	r3, [sp, #8]
 800e4a4:	7d3b      	ldrb	r3, [r7, #20]
 800e4a6:	9301      	str	r3, [sp, #4]
 800e4a8:	7c3b      	ldrb	r3, [r7, #16]
 800e4aa:	9300      	str	r3, [sp, #0]
 800e4ac:	4603      	mov	r3, r0
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f004 fd81 	bl	8012fb6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800e4b4:	2300      	movs	r3, #0
}
 800e4b6:	4618      	mov	r0, r3
 800e4b8:	3708      	adds	r7, #8
 800e4ba:	46bd      	mov	sp, r7
 800e4bc:	bd80      	pop	{r7, pc}

0800e4be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e4be:	b580      	push	{r7, lr}
 800e4c0:	b082      	sub	sp, #8
 800e4c2:	af00      	add	r7, sp, #0
 800e4c4:	6078      	str	r0, [r7, #4]
 800e4c6:	460b      	mov	r3, r1
 800e4c8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 800e4ca:	78fb      	ldrb	r3, [r7, #3]
 800e4cc:	4619      	mov	r1, r3
 800e4ce:	6878      	ldr	r0, [r7, #4]
 800e4d0:	f004 fda0 	bl	8013014 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e4d4:	2300      	movs	r3, #0
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	3708      	adds	r7, #8
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	bd80      	pop	{r7, pc}

0800e4de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e4de:	b580      	push	{r7, lr}
 800e4e0:	b084      	sub	sp, #16
 800e4e2:	af00      	add	r7, sp, #0
 800e4e4:	6078      	str	r0, [r7, #4]
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e4ea:	6878      	ldr	r0, [r7, #4]
 800e4ec:	f000 f836 	bl	800e55c <USBH_GetFreePipe>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e4f4:	89fb      	ldrh	r3, [r7, #14]
 800e4f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e4fa:	4293      	cmp	r3, r2
 800e4fc:	d00a      	beq.n	800e514 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800e4fe:	78fa      	ldrb	r2, [r7, #3]
 800e500:	89fb      	ldrh	r3, [r7, #14]
 800e502:	f003 030f 	and.w	r3, r3, #15
 800e506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e50a:	6879      	ldr	r1, [r7, #4]
 800e50c:	33e0      	adds	r3, #224	; 0xe0
 800e50e:	009b      	lsls	r3, r3, #2
 800e510:	440b      	add	r3, r1
 800e512:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e514:	89fb      	ldrh	r3, [r7, #14]
 800e516:	b2db      	uxtb	r3, r3
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3710      	adds	r7, #16
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd80      	pop	{r7, pc}

0800e520 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e520:	b480      	push	{r7}
 800e522:	b083      	sub	sp, #12
 800e524:	af00      	add	r7, sp, #0
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	460b      	mov	r3, r1
 800e52a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800e52c:	78fb      	ldrb	r3, [r7, #3]
 800e52e:	2b0a      	cmp	r3, #10
 800e530:	d80d      	bhi.n	800e54e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e532:	78fb      	ldrb	r3, [r7, #3]
 800e534:	687a      	ldr	r2, [r7, #4]
 800e536:	33e0      	adds	r3, #224	; 0xe0
 800e538:	009b      	lsls	r3, r3, #2
 800e53a:	4413      	add	r3, r2
 800e53c:	685a      	ldr	r2, [r3, #4]
 800e53e:	78fb      	ldrb	r3, [r7, #3]
 800e540:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e544:	6879      	ldr	r1, [r7, #4]
 800e546:	33e0      	adds	r3, #224	; 0xe0
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	440b      	add	r3, r1
 800e54c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e54e:	2300      	movs	r3, #0
}
 800e550:	4618      	mov	r0, r3
 800e552:	370c      	adds	r7, #12
 800e554:	46bd      	mov	sp, r7
 800e556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e55a:	4770      	bx	lr

0800e55c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e55c:	b480      	push	{r7}
 800e55e:	b085      	sub	sp, #20
 800e560:	af00      	add	r7, sp, #0
 800e562:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e564:	2300      	movs	r3, #0
 800e566:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e568:	2300      	movs	r3, #0
 800e56a:	73fb      	strb	r3, [r7, #15]
 800e56c:	e00f      	b.n	800e58e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e56e:	7bfb      	ldrb	r3, [r7, #15]
 800e570:	687a      	ldr	r2, [r7, #4]
 800e572:	33e0      	adds	r3, #224	; 0xe0
 800e574:	009b      	lsls	r3, r3, #2
 800e576:	4413      	add	r3, r2
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d102      	bne.n	800e588 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800e582:	7bfb      	ldrb	r3, [r7, #15]
 800e584:	b29b      	uxth	r3, r3
 800e586:	e007      	b.n	800e598 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 800e588:	7bfb      	ldrb	r3, [r7, #15]
 800e58a:	3301      	adds	r3, #1
 800e58c:	73fb      	strb	r3, [r7, #15]
 800e58e:	7bfb      	ldrb	r3, [r7, #15]
 800e590:	2b0a      	cmp	r3, #10
 800e592:	d9ec      	bls.n	800e56e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e594:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3714      	adds	r7, #20
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b084      	sub	sp, #16
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	4603      	mov	r3, r0
 800e5ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e5ae:	79fb      	ldrb	r3, [r7, #7]
 800e5b0:	4a08      	ldr	r2, [pc, #32]	; (800e5d4 <disk_status+0x30>)
 800e5b2:	009b      	lsls	r3, r3, #2
 800e5b4:	4413      	add	r3, r2
 800e5b6:	685b      	ldr	r3, [r3, #4]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	79fa      	ldrb	r2, [r7, #7]
 800e5bc:	4905      	ldr	r1, [pc, #20]	; (800e5d4 <disk_status+0x30>)
 800e5be:	440a      	add	r2, r1
 800e5c0:	7a12      	ldrb	r2, [r2, #8]
 800e5c2:	4610      	mov	r0, r2
 800e5c4:	4798      	blx	r3
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5cc:	4618      	mov	r0, r3
 800e5ce:	3710      	adds	r7, #16
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	bd80      	pop	{r7, pc}
 800e5d4:	2000082c 	.word	0x2000082c

0800e5d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b084      	sub	sp, #16
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	4603      	mov	r3, r0
 800e5e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e5e2:	2300      	movs	r3, #0
 800e5e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e5e6:	79fb      	ldrb	r3, [r7, #7]
 800e5e8:	4a0d      	ldr	r2, [pc, #52]	; (800e620 <disk_initialize+0x48>)
 800e5ea:	5cd3      	ldrb	r3, [r2, r3]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d111      	bne.n	800e614 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e5f0:	79fb      	ldrb	r3, [r7, #7]
 800e5f2:	4a0b      	ldr	r2, [pc, #44]	; (800e620 <disk_initialize+0x48>)
 800e5f4:	2101      	movs	r1, #1
 800e5f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e5f8:	79fb      	ldrb	r3, [r7, #7]
 800e5fa:	4a09      	ldr	r2, [pc, #36]	; (800e620 <disk_initialize+0x48>)
 800e5fc:	009b      	lsls	r3, r3, #2
 800e5fe:	4413      	add	r3, r2
 800e600:	685b      	ldr	r3, [r3, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	79fa      	ldrb	r2, [r7, #7]
 800e606:	4906      	ldr	r1, [pc, #24]	; (800e620 <disk_initialize+0x48>)
 800e608:	440a      	add	r2, r1
 800e60a:	7a12      	ldrb	r2, [r2, #8]
 800e60c:	4610      	mov	r0, r2
 800e60e:	4798      	blx	r3
 800e610:	4603      	mov	r3, r0
 800e612:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e614:	7bfb      	ldrb	r3, [r7, #15]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3710      	adds	r7, #16
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bd80      	pop	{r7, pc}
 800e61e:	bf00      	nop
 800e620:	2000082c 	.word	0x2000082c

0800e624 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e624:	b590      	push	{r4, r7, lr}
 800e626:	b087      	sub	sp, #28
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60b9      	str	r1, [r7, #8]
 800e62c:	607a      	str	r2, [r7, #4]
 800e62e:	603b      	str	r3, [r7, #0]
 800e630:	4603      	mov	r3, r0
 800e632:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e634:	7bfb      	ldrb	r3, [r7, #15]
 800e636:	4a0a      	ldr	r2, [pc, #40]	; (800e660 <disk_read+0x3c>)
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	4413      	add	r3, r2
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	689c      	ldr	r4, [r3, #8]
 800e640:	7bfb      	ldrb	r3, [r7, #15]
 800e642:	4a07      	ldr	r2, [pc, #28]	; (800e660 <disk_read+0x3c>)
 800e644:	4413      	add	r3, r2
 800e646:	7a18      	ldrb	r0, [r3, #8]
 800e648:	683b      	ldr	r3, [r7, #0]
 800e64a:	687a      	ldr	r2, [r7, #4]
 800e64c:	68b9      	ldr	r1, [r7, #8]
 800e64e:	47a0      	blx	r4
 800e650:	4603      	mov	r3, r0
 800e652:	75fb      	strb	r3, [r7, #23]
  return res;
 800e654:	7dfb      	ldrb	r3, [r7, #23]
}
 800e656:	4618      	mov	r0, r3
 800e658:	371c      	adds	r7, #28
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd90      	pop	{r4, r7, pc}
 800e65e:	bf00      	nop
 800e660:	2000082c 	.word	0x2000082c

0800e664 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e664:	b590      	push	{r4, r7, lr}
 800e666:	b087      	sub	sp, #28
 800e668:	af00      	add	r7, sp, #0
 800e66a:	60b9      	str	r1, [r7, #8]
 800e66c:	607a      	str	r2, [r7, #4]
 800e66e:	603b      	str	r3, [r7, #0]
 800e670:	4603      	mov	r3, r0
 800e672:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e674:	7bfb      	ldrb	r3, [r7, #15]
 800e676:	4a0a      	ldr	r2, [pc, #40]	; (800e6a0 <disk_write+0x3c>)
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	4413      	add	r3, r2
 800e67c:	685b      	ldr	r3, [r3, #4]
 800e67e:	68dc      	ldr	r4, [r3, #12]
 800e680:	7bfb      	ldrb	r3, [r7, #15]
 800e682:	4a07      	ldr	r2, [pc, #28]	; (800e6a0 <disk_write+0x3c>)
 800e684:	4413      	add	r3, r2
 800e686:	7a18      	ldrb	r0, [r3, #8]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	68b9      	ldr	r1, [r7, #8]
 800e68e:	47a0      	blx	r4
 800e690:	4603      	mov	r3, r0
 800e692:	75fb      	strb	r3, [r7, #23]
  return res;
 800e694:	7dfb      	ldrb	r3, [r7, #23]
}
 800e696:	4618      	mov	r0, r3
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd90      	pop	{r4, r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	2000082c 	.word	0x2000082c

0800e6a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e6a4:	b480      	push	{r7}
 800e6a6:	b085      	sub	sp, #20
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e6b4:	89fb      	ldrh	r3, [r7, #14]
 800e6b6:	021b      	lsls	r3, r3, #8
 800e6b8:	b21a      	sxth	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	b21b      	sxth	r3, r3
 800e6c0:	4313      	orrs	r3, r2
 800e6c2:	b21b      	sxth	r3, r3
 800e6c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e6c6:	89fb      	ldrh	r3, [r7, #14]
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3714      	adds	r7, #20
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d2:	4770      	bx	lr

0800e6d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	3303      	adds	r3, #3
 800e6e0:	781b      	ldrb	r3, [r3, #0]
 800e6e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	021b      	lsls	r3, r3, #8
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	3202      	adds	r2, #2
 800e6ec:	7812      	ldrb	r2, [r2, #0]
 800e6ee:	4313      	orrs	r3, r2
 800e6f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	021b      	lsls	r3, r3, #8
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	3201      	adds	r2, #1
 800e6fa:	7812      	ldrb	r2, [r2, #0]
 800e6fc:	4313      	orrs	r3, r2
 800e6fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	021b      	lsls	r3, r3, #8
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	7812      	ldrb	r2, [r2, #0]
 800e708:	4313      	orrs	r3, r2
 800e70a:	60fb      	str	r3, [r7, #12]
	return rv;
 800e70c:	68fb      	ldr	r3, [r7, #12]
}
 800e70e:	4618      	mov	r0, r3
 800e710:	3714      	adds	r7, #20
 800e712:	46bd      	mov	sp, r7
 800e714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e718:	4770      	bx	lr

0800e71a <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e71a:	b580      	push	{r7, lr}
 800e71c:	b082      	sub	sp, #8
 800e71e:	af00      	add	r7, sp, #0
 800e720:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d009      	beq.n	800e73c <lock_fs+0x22>
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	68db      	ldr	r3, [r3, #12]
 800e72c:	4618      	mov	r0, r3
 800e72e:	f000 fc8f 	bl	800f050 <ff_req_grant>
 800e732:	4603      	mov	r3, r0
 800e734:	2b00      	cmp	r3, #0
 800e736:	d001      	beq.n	800e73c <lock_fs+0x22>
 800e738:	2301      	movs	r3, #1
 800e73a:	e000      	b.n	800e73e <lock_fs+0x24>
 800e73c:	2300      	movs	r3, #0
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3708      	adds	r7, #8
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}

0800e746 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e746:	b580      	push	{r7, lr}
 800e748:	b082      	sub	sp, #8
 800e74a:	af00      	add	r7, sp, #0
 800e74c:	6078      	str	r0, [r7, #4]
 800e74e:	460b      	mov	r3, r1
 800e750:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00d      	beq.n	800e774 <unlock_fs+0x2e>
 800e758:	78fb      	ldrb	r3, [r7, #3]
 800e75a:	2b0c      	cmp	r3, #12
 800e75c:	d00a      	beq.n	800e774 <unlock_fs+0x2e>
 800e75e:	78fb      	ldrb	r3, [r7, #3]
 800e760:	2b0b      	cmp	r3, #11
 800e762:	d007      	beq.n	800e774 <unlock_fs+0x2e>
 800e764:	78fb      	ldrb	r3, [r7, #3]
 800e766:	2b0f      	cmp	r3, #15
 800e768:	d004      	beq.n	800e774 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	68db      	ldr	r3, [r3, #12]
 800e76e:	4618      	mov	r0, r3
 800e770:	f000 fc83 	bl	800f07a <ff_rel_grant>
	}
}
 800e774:	bf00      	nop
 800e776:	3708      	adds	r7, #8
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}

0800e77c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e77c:	b480      	push	{r7}
 800e77e:	b085      	sub	sp, #20
 800e780:	af00      	add	r7, sp, #0
 800e782:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e784:	2300      	movs	r3, #0
 800e786:	60fb      	str	r3, [r7, #12]
 800e788:	e010      	b.n	800e7ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e78a:	4a0d      	ldr	r2, [pc, #52]	; (800e7c0 <clear_lock+0x44>)
 800e78c:	68fb      	ldr	r3, [r7, #12]
 800e78e:	011b      	lsls	r3, r3, #4
 800e790:	4413      	add	r3, r2
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	687a      	ldr	r2, [r7, #4]
 800e796:	429a      	cmp	r2, r3
 800e798:	d105      	bne.n	800e7a6 <clear_lock+0x2a>
 800e79a:	4a09      	ldr	r2, [pc, #36]	; (800e7c0 <clear_lock+0x44>)
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	011b      	lsls	r3, r3, #4
 800e7a0:	4413      	add	r3, r2
 800e7a2:	2200      	movs	r2, #0
 800e7a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	3301      	adds	r3, #1
 800e7aa:	60fb      	str	r3, [r7, #12]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d9eb      	bls.n	800e78a <clear_lock+0xe>
	}
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	3714      	adds	r7, #20
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7be:	4770      	bx	lr
 800e7c0:	2000080c 	.word	0x2000080c

0800e7c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b086      	sub	sp, #24
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e7cc:	2300      	movs	r3, #0
 800e7ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	78db      	ldrb	r3, [r3, #3]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d034      	beq.n	800e842 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	7858      	ldrb	r0, [r3, #1]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	697a      	ldr	r2, [r7, #20]
 800e7ec:	f7ff ff3a 	bl	800e664 <disk_write>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d002      	beq.n	800e7fc <sync_window+0x38>
			res = FR_DISK_ERR;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	73fb      	strb	r3, [r7, #15]
 800e7fa:	e022      	b.n	800e842 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	2200      	movs	r2, #0
 800e800:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e806:	697a      	ldr	r2, [r7, #20]
 800e808:	1ad2      	subs	r2, r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	69db      	ldr	r3, [r3, #28]
 800e80e:	429a      	cmp	r2, r3
 800e810:	d217      	bcs.n	800e842 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	789b      	ldrb	r3, [r3, #2]
 800e816:	613b      	str	r3, [r7, #16]
 800e818:	e010      	b.n	800e83c <sync_window+0x78>
					wsect += fs->fsize;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	69db      	ldr	r3, [r3, #28]
 800e81e:	697a      	ldr	r2, [r7, #20]
 800e820:	4413      	add	r3, r2
 800e822:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	7858      	ldrb	r0, [r3, #1]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e82e:	2301      	movs	r3, #1
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	f7ff ff17 	bl	800e664 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e836:	693b      	ldr	r3, [r7, #16]
 800e838:	3b01      	subs	r3, #1
 800e83a:	613b      	str	r3, [r7, #16]
 800e83c:	693b      	ldr	r3, [r7, #16]
 800e83e:	2b01      	cmp	r3, #1
 800e840:	d8eb      	bhi.n	800e81a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e842:	7bfb      	ldrb	r3, [r7, #15]
}
 800e844:	4618      	mov	r0, r3
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b084      	sub	sp, #16
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
 800e854:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e856:	2300      	movs	r3, #0
 800e858:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e85e:	683a      	ldr	r2, [r7, #0]
 800e860:	429a      	cmp	r2, r3
 800e862:	d01b      	beq.n	800e89c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f7ff ffad 	bl	800e7c4 <sync_window>
 800e86a:	4603      	mov	r3, r0
 800e86c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e86e:	7bfb      	ldrb	r3, [r7, #15]
 800e870:	2b00      	cmp	r3, #0
 800e872:	d113      	bne.n	800e89c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	7858      	ldrb	r0, [r3, #1]
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e87e:	2301      	movs	r3, #1
 800e880:	683a      	ldr	r2, [r7, #0]
 800e882:	f7ff fecf 	bl	800e624 <disk_read>
 800e886:	4603      	mov	r3, r0
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d004      	beq.n	800e896 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e88c:	f04f 33ff 	mov.w	r3, #4294967295
 800e890:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e892:	2301      	movs	r3, #1
 800e894:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	683a      	ldr	r2, [r7, #0]
 800e89a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e89e:	4618      	mov	r0, r3
 800e8a0:	3710      	adds	r7, #16
 800e8a2:	46bd      	mov	sp, r7
 800e8a4:	bd80      	pop	{r7, pc}

0800e8a6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800e8a6:	b480      	push	{r7}
 800e8a8:	b087      	sub	sp, #28
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800e8ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e8b2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d031      	beq.n	800e920 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	617b      	str	r3, [r7, #20]
 800e8c2:	e002      	b.n	800e8ca <get_ldnumber+0x24>
 800e8c4:	697b      	ldr	r3, [r7, #20]
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	617b      	str	r3, [r7, #20]
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	781b      	ldrb	r3, [r3, #0]
 800e8ce:	2b20      	cmp	r3, #32
 800e8d0:	d903      	bls.n	800e8da <get_ldnumber+0x34>
 800e8d2:	697b      	ldr	r3, [r7, #20]
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b3a      	cmp	r3, #58	; 0x3a
 800e8d8:	d1f4      	bne.n	800e8c4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800e8da:	697b      	ldr	r3, [r7, #20]
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	2b3a      	cmp	r3, #58	; 0x3a
 800e8e0:	d11c      	bne.n	800e91c <get_ldnumber+0x76>
			tp = *path;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	1c5a      	adds	r2, r3, #1
 800e8ec:	60fa      	str	r2, [r7, #12]
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	3b30      	subs	r3, #48	; 0x30
 800e8f2:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800e8f4:	68bb      	ldr	r3, [r7, #8]
 800e8f6:	2b09      	cmp	r3, #9
 800e8f8:	d80e      	bhi.n	800e918 <get_ldnumber+0x72>
 800e8fa:	68fa      	ldr	r2, [r7, #12]
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d10a      	bne.n	800e918 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d107      	bne.n	800e918 <get_ldnumber+0x72>
					vol = (int)i;
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	3301      	adds	r3, #1
 800e910:	617b      	str	r3, [r7, #20]
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	697a      	ldr	r2, [r7, #20]
 800e916:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	e002      	b.n	800e922 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800e91c:	2300      	movs	r3, #0
 800e91e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800e920:	693b      	ldr	r3, [r7, #16]
}
 800e922:	4618      	mov	r0, r3
 800e924:	371c      	adds	r7, #28
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr
	...

0800e930 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b082      	sub	sp, #8
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2200      	movs	r2, #0
 800e93e:	70da      	strb	r2, [r3, #3]
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	f04f 32ff 	mov.w	r2, #4294967295
 800e946:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800e948:	6839      	ldr	r1, [r7, #0]
 800e94a:	6878      	ldr	r0, [r7, #4]
 800e94c:	f7ff ff7e 	bl	800e84c <move_window>
 800e950:	4603      	mov	r3, r0
 800e952:	2b00      	cmp	r3, #0
 800e954:	d001      	beq.n	800e95a <check_fs+0x2a>
 800e956:	2304      	movs	r3, #4
 800e958:	e038      	b.n	800e9cc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	3334      	adds	r3, #52	; 0x34
 800e95e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e962:	4618      	mov	r0, r3
 800e964:	f7ff fe9e 	bl	800e6a4 <ld_word>
 800e968:	4603      	mov	r3, r0
 800e96a:	461a      	mov	r2, r3
 800e96c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800e970:	429a      	cmp	r2, r3
 800e972:	d001      	beq.n	800e978 <check_fs+0x48>
 800e974:	2303      	movs	r3, #3
 800e976:	e029      	b.n	800e9cc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e97e:	2be9      	cmp	r3, #233	; 0xe9
 800e980:	d009      	beq.n	800e996 <check_fs+0x66>
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e988:	2beb      	cmp	r3, #235	; 0xeb
 800e98a:	d11e      	bne.n	800e9ca <check_fs+0x9a>
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800e992:	2b90      	cmp	r3, #144	; 0x90
 800e994:	d119      	bne.n	800e9ca <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	3334      	adds	r3, #52	; 0x34
 800e99a:	3336      	adds	r3, #54	; 0x36
 800e99c:	4618      	mov	r0, r3
 800e99e:	f7ff fe99 	bl	800e6d4 <ld_dword>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800e9a8:	4a0a      	ldr	r2, [pc, #40]	; (800e9d4 <check_fs+0xa4>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d101      	bne.n	800e9b2 <check_fs+0x82>
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	e00c      	b.n	800e9cc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3334      	adds	r3, #52	; 0x34
 800e9b6:	3352      	adds	r3, #82	; 0x52
 800e9b8:	4618      	mov	r0, r3
 800e9ba:	f7ff fe8b 	bl	800e6d4 <ld_dword>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	4a05      	ldr	r2, [pc, #20]	; (800e9d8 <check_fs+0xa8>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d101      	bne.n	800e9ca <check_fs+0x9a>
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	e000      	b.n	800e9cc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800e9ca:	2302      	movs	r3, #2
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}
 800e9d4:	00544146 	.word	0x00544146
 800e9d8:	33544146 	.word	0x33544146

0800e9dc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800e9dc:	b580      	push	{r7, lr}
 800e9de:	b096      	sub	sp, #88	; 0x58
 800e9e0:	af00      	add	r7, sp, #0
 800e9e2:	60f8      	str	r0, [r7, #12]
 800e9e4:	60b9      	str	r1, [r7, #8]
 800e9e6:	4613      	mov	r3, r2
 800e9e8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800e9ea:	68bb      	ldr	r3, [r7, #8]
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800e9f0:	68f8      	ldr	r0, [r7, #12]
 800e9f2:	f7ff ff58 	bl	800e8a6 <get_ldnumber>
 800e9f6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800e9f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	da01      	bge.n	800ea02 <find_volume+0x26>
 800e9fe:	230b      	movs	r3, #11
 800ea00:	e235      	b.n	800ee6e <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ea02:	4aa5      	ldr	r2, [pc, #660]	; (800ec98 <find_volume+0x2bc>)
 800ea04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ea0a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ea0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d101      	bne.n	800ea16 <find_volume+0x3a>
 800ea12:	230c      	movs	r3, #12
 800ea14:	e22b      	b.n	800ee6e <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800ea16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ea18:	f7ff fe7f 	bl	800e71a <lock_fs>
 800ea1c:	4603      	mov	r3, r0
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d101      	bne.n	800ea26 <find_volume+0x4a>
 800ea22:	230f      	movs	r3, #15
 800ea24:	e223      	b.n	800ee6e <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ea2c:	79fb      	ldrb	r3, [r7, #7]
 800ea2e:	f023 0301 	bic.w	r3, r3, #1
 800ea32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ea34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea36:	781b      	ldrb	r3, [r3, #0]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d01a      	beq.n	800ea72 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ea3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea3e:	785b      	ldrb	r3, [r3, #1]
 800ea40:	4618      	mov	r0, r3
 800ea42:	f7ff fdaf 	bl	800e5a4 <disk_status>
 800ea46:	4603      	mov	r3, r0
 800ea48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ea4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea50:	f003 0301 	and.w	r3, r3, #1
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d10c      	bne.n	800ea72 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ea58:	79fb      	ldrb	r3, [r7, #7]
 800ea5a:	2b00      	cmp	r3, #0
 800ea5c:	d007      	beq.n	800ea6e <find_volume+0x92>
 800ea5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea62:	f003 0304 	and.w	r3, r3, #4
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d001      	beq.n	800ea6e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ea6a:	230a      	movs	r3, #10
 800ea6c:	e1ff      	b.n	800ee6e <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800ea6e:	2300      	movs	r3, #0
 800ea70:	e1fd      	b.n	800ee6e <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ea72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea74:	2200      	movs	r2, #0
 800ea76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ea78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea7a:	b2da      	uxtb	r2, r3
 800ea7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ea80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea82:	785b      	ldrb	r3, [r3, #1]
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7ff fda7 	bl	800e5d8 <disk_initialize>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ea90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ea94:	f003 0301 	and.w	r3, r3, #1
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d001      	beq.n	800eaa0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ea9c:	2303      	movs	r3, #3
 800ea9e:	e1e6      	b.n	800ee6e <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800eaa0:	79fb      	ldrb	r3, [r7, #7]
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d007      	beq.n	800eab6 <find_volume+0xda>
 800eaa6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eaaa:	f003 0304 	and.w	r3, r3, #4
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d001      	beq.n	800eab6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800eab2:	230a      	movs	r3, #10
 800eab4:	e1db      	b.n	800ee6e <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800eab6:	2300      	movs	r3, #0
 800eab8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800eaba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eabc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eabe:	f7ff ff37 	bl	800e930 <check_fs>
 800eac2:	4603      	mov	r3, r0
 800eac4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800eac8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eacc:	2b02      	cmp	r3, #2
 800eace:	d149      	bne.n	800eb64 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ead0:	2300      	movs	r3, #0
 800ead2:	643b      	str	r3, [r7, #64]	; 0x40
 800ead4:	e01e      	b.n	800eb14 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ead6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ead8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eadc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eade:	011b      	lsls	r3, r3, #4
 800eae0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800eae4:	4413      	add	r3, r2
 800eae6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800eae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaea:	3304      	adds	r3, #4
 800eaec:	781b      	ldrb	r3, [r3, #0]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d006      	beq.n	800eb00 <find_volume+0x124>
 800eaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eaf4:	3308      	adds	r3, #8
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7ff fdec 	bl	800e6d4 <ld_dword>
 800eafc:	4602      	mov	r2, r0
 800eafe:	e000      	b.n	800eb02 <find_volume+0x126>
 800eb00:	2200      	movs	r2, #0
 800eb02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb04:	009b      	lsls	r3, r3, #2
 800eb06:	3358      	adds	r3, #88	; 0x58
 800eb08:	443b      	add	r3, r7
 800eb0a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eb0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb10:	3301      	adds	r3, #1
 800eb12:	643b      	str	r3, [r7, #64]	; 0x40
 800eb14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb16:	2b03      	cmp	r3, #3
 800eb18:	d9dd      	bls.n	800ead6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800eb1a:	2300      	movs	r3, #0
 800eb1c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800eb1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d002      	beq.n	800eb2a <find_volume+0x14e>
 800eb24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb26:	3b01      	subs	r3, #1
 800eb28:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800eb2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb2c:	009b      	lsls	r3, r3, #2
 800eb2e:	3358      	adds	r3, #88	; 0x58
 800eb30:	443b      	add	r3, r7
 800eb32:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800eb36:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800eb38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d005      	beq.n	800eb4a <find_volume+0x16e>
 800eb3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eb40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eb42:	f7ff fef5 	bl	800e930 <check_fs>
 800eb46:	4603      	mov	r3, r0
 800eb48:	e000      	b.n	800eb4c <find_volume+0x170>
 800eb4a:	2303      	movs	r3, #3
 800eb4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800eb50:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb54:	2b01      	cmp	r3, #1
 800eb56:	d905      	bls.n	800eb64 <find_volume+0x188>
 800eb58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb5a:	3301      	adds	r3, #1
 800eb5c:	643b      	str	r3, [r7, #64]	; 0x40
 800eb5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eb60:	2b03      	cmp	r3, #3
 800eb62:	d9e2      	bls.n	800eb2a <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800eb64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb68:	2b04      	cmp	r3, #4
 800eb6a:	d101      	bne.n	800eb70 <find_volume+0x194>
 800eb6c:	2301      	movs	r3, #1
 800eb6e:	e17e      	b.n	800ee6e <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800eb70:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d901      	bls.n	800eb7c <find_volume+0x1a0>
 800eb78:	230d      	movs	r3, #13
 800eb7a:	e178      	b.n	800ee6e <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800eb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb7e:	3334      	adds	r3, #52	; 0x34
 800eb80:	330b      	adds	r3, #11
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7ff fd8e 	bl	800e6a4 <ld_word>
 800eb88:	4603      	mov	r3, r0
 800eb8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb8e:	d001      	beq.n	800eb94 <find_volume+0x1b8>
 800eb90:	230d      	movs	r3, #13
 800eb92:	e16c      	b.n	800ee6e <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800eb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb96:	3334      	adds	r3, #52	; 0x34
 800eb98:	3316      	adds	r3, #22
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	f7ff fd82 	bl	800e6a4 <ld_word>
 800eba0:	4603      	mov	r3, r0
 800eba2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800eba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d106      	bne.n	800ebb8 <find_volume+0x1dc>
 800ebaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebac:	3334      	adds	r3, #52	; 0x34
 800ebae:	3324      	adds	r3, #36	; 0x24
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	f7ff fd8f 	bl	800e6d4 <ld_dword>
 800ebb6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ebb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ebbc:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ebbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ebc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebc6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebca:	789b      	ldrb	r3, [r3, #2]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	d005      	beq.n	800ebdc <find_volume+0x200>
 800ebd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd2:	789b      	ldrb	r3, [r3, #2]
 800ebd4:	2b02      	cmp	r3, #2
 800ebd6:	d001      	beq.n	800ebdc <find_volume+0x200>
 800ebd8:	230d      	movs	r3, #13
 800ebda:	e148      	b.n	800ee6e <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ebdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebde:	789b      	ldrb	r3, [r3, #2]
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ebe4:	fb02 f303 	mul.w	r3, r2, r3
 800ebe8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ebea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ebf0:	b29a      	uxth	r2, r3
 800ebf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ebf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf8:	895b      	ldrh	r3, [r3, #10]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d008      	beq.n	800ec10 <find_volume+0x234>
 800ebfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec00:	895b      	ldrh	r3, [r3, #10]
 800ec02:	461a      	mov	r2, r3
 800ec04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec06:	895b      	ldrh	r3, [r3, #10]
 800ec08:	3b01      	subs	r3, #1
 800ec0a:	4013      	ands	r3, r2
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d001      	beq.n	800ec14 <find_volume+0x238>
 800ec10:	230d      	movs	r3, #13
 800ec12:	e12c      	b.n	800ee6e <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ec14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec16:	3334      	adds	r3, #52	; 0x34
 800ec18:	3311      	adds	r3, #17
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f7ff fd42 	bl	800e6a4 <ld_word>
 800ec20:	4603      	mov	r3, r0
 800ec22:	461a      	mov	r2, r3
 800ec24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec26:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ec28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec2a:	891b      	ldrh	r3, [r3, #8]
 800ec2c:	f003 030f 	and.w	r3, r3, #15
 800ec30:	b29b      	uxth	r3, r3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d001      	beq.n	800ec3a <find_volume+0x25e>
 800ec36:	230d      	movs	r3, #13
 800ec38:	e119      	b.n	800ee6e <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ec3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec3c:	3334      	adds	r3, #52	; 0x34
 800ec3e:	3313      	adds	r3, #19
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7ff fd2f 	bl	800e6a4 <ld_word>
 800ec46:	4603      	mov	r3, r0
 800ec48:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ec4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d106      	bne.n	800ec5e <find_volume+0x282>
 800ec50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec52:	3334      	adds	r3, #52	; 0x34
 800ec54:	3320      	adds	r3, #32
 800ec56:	4618      	mov	r0, r3
 800ec58:	f7ff fd3c 	bl	800e6d4 <ld_dword>
 800ec5c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ec5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec60:	3334      	adds	r3, #52	; 0x34
 800ec62:	330e      	adds	r3, #14
 800ec64:	4618      	mov	r0, r3
 800ec66:	f7ff fd1d 	bl	800e6a4 <ld_word>
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ec6e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d101      	bne.n	800ec78 <find_volume+0x29c>
 800ec74:	230d      	movs	r3, #13
 800ec76:	e0fa      	b.n	800ee6e <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ec78:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ec7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec7c:	4413      	add	r3, r2
 800ec7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ec80:	8912      	ldrh	r2, [r2, #8]
 800ec82:	0912      	lsrs	r2, r2, #4
 800ec84:	b292      	uxth	r2, r2
 800ec86:	4413      	add	r3, r2
 800ec88:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ec8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec8e:	429a      	cmp	r2, r3
 800ec90:	d204      	bcs.n	800ec9c <find_volume+0x2c0>
 800ec92:	230d      	movs	r3, #13
 800ec94:	e0eb      	b.n	800ee6e <find_volume+0x492>
 800ec96:	bf00      	nop
 800ec98:	20000804 	.word	0x20000804
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ec9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ec9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eca0:	1ad3      	subs	r3, r2, r3
 800eca2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800eca4:	8952      	ldrh	r2, [r2, #10]
 800eca6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ecaa:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ecac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d101      	bne.n	800ecb6 <find_volume+0x2da>
 800ecb2:	230d      	movs	r3, #13
 800ecb4:	e0db      	b.n	800ee6e <find_volume+0x492>
		fmt = FS_FAT32;
 800ecb6:	2303      	movs	r3, #3
 800ecb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ecbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecbe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d802      	bhi.n	800eccc <find_volume+0x2f0>
 800ecc6:	2302      	movs	r3, #2
 800ecc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800eccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecce:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ecd2:	4293      	cmp	r3, r2
 800ecd4:	d802      	bhi.n	800ecdc <find_volume+0x300>
 800ecd6:	2301      	movs	r3, #1
 800ecd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ecdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecde:	1c9a      	adds	r2, r3, #2
 800ece0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ece4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ece6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ece8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800ecea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ecec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ecee:	441a      	add	r2, r3
 800ecf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecf2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800ecf4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ecf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf8:	441a      	add	r2, r3
 800ecfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecfc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800ecfe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed02:	2b03      	cmp	r3, #3
 800ed04:	d11e      	bne.n	800ed44 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800ed06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed08:	3334      	adds	r3, #52	; 0x34
 800ed0a:	332a      	adds	r3, #42	; 0x2a
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f7ff fcc9 	bl	800e6a4 <ld_word>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <find_volume+0x340>
 800ed18:	230d      	movs	r3, #13
 800ed1a:	e0a8      	b.n	800ee6e <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1e:	891b      	ldrh	r3, [r3, #8]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d001      	beq.n	800ed28 <find_volume+0x34c>
 800ed24:	230d      	movs	r3, #13
 800ed26:	e0a2      	b.n	800ee6e <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ed28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed2a:	3334      	adds	r3, #52	; 0x34
 800ed2c:	332c      	adds	r3, #44	; 0x2c
 800ed2e:	4618      	mov	r0, r3
 800ed30:	f7ff fcd0 	bl	800e6d4 <ld_dword>
 800ed34:	4602      	mov	r2, r0
 800ed36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed38:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ed3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed3c:	699b      	ldr	r3, [r3, #24]
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	647b      	str	r3, [r7, #68]	; 0x44
 800ed42:	e01f      	b.n	800ed84 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ed44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed46:	891b      	ldrh	r3, [r3, #8]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d101      	bne.n	800ed50 <find_volume+0x374>
 800ed4c:	230d      	movs	r3, #13
 800ed4e:	e08e      	b.n	800ee6e <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ed50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ed56:	441a      	add	r2, r3
 800ed58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed5a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800ed5c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ed60:	2b02      	cmp	r3, #2
 800ed62:	d103      	bne.n	800ed6c <find_volume+0x390>
 800ed64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed66:	699b      	ldr	r3, [r3, #24]
 800ed68:	005b      	lsls	r3, r3, #1
 800ed6a:	e00a      	b.n	800ed82 <find_volume+0x3a6>
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed6e:	699a      	ldr	r2, [r3, #24]
 800ed70:	4613      	mov	r3, r2
 800ed72:	005b      	lsls	r3, r3, #1
 800ed74:	4413      	add	r3, r2
 800ed76:	085a      	lsrs	r2, r3, #1
 800ed78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed7a:	699b      	ldr	r3, [r3, #24]
 800ed7c:	f003 0301 	and.w	r3, r3, #1
 800ed80:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800ed82:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800ed84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed86:	69da      	ldr	r2, [r3, #28]
 800ed88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed8a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ed8e:	0a5b      	lsrs	r3, r3, #9
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d201      	bcs.n	800ed98 <find_volume+0x3bc>
 800ed94:	230d      	movs	r3, #13
 800ed96:	e06a      	b.n	800ee6e <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ed98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed9a:	f04f 32ff 	mov.w	r2, #4294967295
 800ed9e:	615a      	str	r2, [r3, #20]
 800eda0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda2:	695a      	ldr	r2, [r3, #20]
 800eda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eda6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800eda8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edaa:	2280      	movs	r2, #128	; 0x80
 800edac:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800edae:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800edb2:	2b03      	cmp	r3, #3
 800edb4:	d149      	bne.n	800ee4a <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800edb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edb8:	3334      	adds	r3, #52	; 0x34
 800edba:	3330      	adds	r3, #48	; 0x30
 800edbc:	4618      	mov	r0, r3
 800edbe:	f7ff fc71 	bl	800e6a4 <ld_word>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b01      	cmp	r3, #1
 800edc6:	d140      	bne.n	800ee4a <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800edc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800edca:	3301      	adds	r3, #1
 800edcc:	4619      	mov	r1, r3
 800edce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edd0:	f7ff fd3c 	bl	800e84c <move_window>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d137      	bne.n	800ee4a <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800edda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eddc:	2200      	movs	r2, #0
 800edde:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ede0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ede2:	3334      	adds	r3, #52	; 0x34
 800ede4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ede8:	4618      	mov	r0, r3
 800edea:	f7ff fc5b 	bl	800e6a4 <ld_word>
 800edee:	4603      	mov	r3, r0
 800edf0:	461a      	mov	r2, r3
 800edf2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d127      	bne.n	800ee4a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800edfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edfc:	3334      	adds	r3, #52	; 0x34
 800edfe:	4618      	mov	r0, r3
 800ee00:	f7ff fc68 	bl	800e6d4 <ld_dword>
 800ee04:	4603      	mov	r3, r0
 800ee06:	4a1c      	ldr	r2, [pc, #112]	; (800ee78 <find_volume+0x49c>)
 800ee08:	4293      	cmp	r3, r2
 800ee0a:	d11e      	bne.n	800ee4a <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ee0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee0e:	3334      	adds	r3, #52	; 0x34
 800ee10:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ee14:	4618      	mov	r0, r3
 800ee16:	f7ff fc5d 	bl	800e6d4 <ld_dword>
 800ee1a:	4603      	mov	r3, r0
 800ee1c:	4a17      	ldr	r2, [pc, #92]	; (800ee7c <find_volume+0x4a0>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d113      	bne.n	800ee4a <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ee22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee24:	3334      	adds	r3, #52	; 0x34
 800ee26:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7ff fc52 	bl	800e6d4 <ld_dword>
 800ee30:	4602      	mov	r2, r0
 800ee32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee34:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ee36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee38:	3334      	adds	r3, #52	; 0x34
 800ee3a:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7ff fc48 	bl	800e6d4 <ld_dword>
 800ee44:	4602      	mov	r2, r0
 800ee46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee48:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ee4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ee50:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ee52:	4b0b      	ldr	r3, [pc, #44]	; (800ee80 <find_volume+0x4a4>)
 800ee54:	881b      	ldrh	r3, [r3, #0]
 800ee56:	3301      	adds	r3, #1
 800ee58:	b29a      	uxth	r2, r3
 800ee5a:	4b09      	ldr	r3, [pc, #36]	; (800ee80 <find_volume+0x4a4>)
 800ee5c:	801a      	strh	r2, [r3, #0]
 800ee5e:	4b08      	ldr	r3, [pc, #32]	; (800ee80 <find_volume+0x4a4>)
 800ee60:	881a      	ldrh	r2, [r3, #0]
 800ee62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee64:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ee66:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee68:	f7ff fc88 	bl	800e77c <clear_lock>
#endif
	return FR_OK;
 800ee6c:	2300      	movs	r3, #0
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3758      	adds	r7, #88	; 0x58
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	41615252 	.word	0x41615252
 800ee7c:	61417272 	.word	0x61417272
 800ee80:	20000808 	.word	0x20000808

0800ee84 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b088      	sub	sp, #32
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	60f8      	str	r0, [r7, #12]
 800ee8c:	60b9      	str	r1, [r7, #8]
 800ee8e:	4613      	mov	r3, r2
 800ee90:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ee92:	68bb      	ldr	r3, [r7, #8]
 800ee94:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ee96:	f107 0310 	add.w	r3, r7, #16
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	f7ff fd03 	bl	800e8a6 <get_ldnumber>
 800eea0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800eea2:	69fb      	ldr	r3, [r7, #28]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	da01      	bge.n	800eeac <f_mount+0x28>
 800eea8:	230b      	movs	r3, #11
 800eeaa:	e048      	b.n	800ef3e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800eeac:	4a26      	ldr	r2, [pc, #152]	; (800ef48 <f_mount+0xc4>)
 800eeae:	69fb      	ldr	r3, [r7, #28]
 800eeb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800eeb4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800eeb6:	69bb      	ldr	r3, [r7, #24]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d00f      	beq.n	800eedc <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800eebc:	69b8      	ldr	r0, [r7, #24]
 800eebe:	f7ff fc5d 	bl	800e77c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800eec2:	69bb      	ldr	r3, [r7, #24]
 800eec4:	68db      	ldr	r3, [r3, #12]
 800eec6:	4618      	mov	r0, r3
 800eec8:	f000 f8b6 	bl	800f038 <ff_del_syncobj>
 800eecc:	4603      	mov	r3, r0
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d101      	bne.n	800eed6 <f_mount+0x52>
 800eed2:	2302      	movs	r3, #2
 800eed4:	e033      	b.n	800ef3e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800eed6:	69bb      	ldr	r3, [r7, #24]
 800eed8:	2200      	movs	r2, #0
 800eeda:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d00f      	beq.n	800ef02 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2200      	movs	r2, #0
 800eee6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800eee8:	69fb      	ldr	r3, [r7, #28]
 800eeea:	b2da      	uxtb	r2, r3
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	330c      	adds	r3, #12
 800eef0:	4619      	mov	r1, r3
 800eef2:	4610      	mov	r0, r2
 800eef4:	f000 f885 	bl	800f002 <ff_cre_syncobj>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d101      	bne.n	800ef02 <f_mount+0x7e>
 800eefe:	2302      	movs	r3, #2
 800ef00:	e01d      	b.n	800ef3e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ef02:	68fa      	ldr	r2, [r7, #12]
 800ef04:	4910      	ldr	r1, [pc, #64]	; (800ef48 <f_mount+0xc4>)
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d002      	beq.n	800ef18 <f_mount+0x94>
 800ef12:	79fb      	ldrb	r3, [r7, #7]
 800ef14:	2b01      	cmp	r3, #1
 800ef16:	d001      	beq.n	800ef1c <f_mount+0x98>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	e010      	b.n	800ef3e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800ef1c:	f107 010c 	add.w	r1, r7, #12
 800ef20:	f107 0308 	add.w	r3, r7, #8
 800ef24:	2200      	movs	r2, #0
 800ef26:	4618      	mov	r0, r3
 800ef28:	f7ff fd58 	bl	800e9dc <find_volume>
 800ef2c:	4603      	mov	r3, r0
 800ef2e:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800ef30:	68fb      	ldr	r3, [r7, #12]
 800ef32:	7dfa      	ldrb	r2, [r7, #23]
 800ef34:	4611      	mov	r1, r2
 800ef36:	4618      	mov	r0, r3
 800ef38:	f7ff fc05 	bl	800e746 <unlock_fs>
 800ef3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef3e:	4618      	mov	r0, r3
 800ef40:	3720      	adds	r7, #32
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}
 800ef46:	bf00      	nop
 800ef48:	20000804 	.word	0x20000804

0800ef4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ef4c:	b480      	push	{r7}
 800ef4e:	b087      	sub	sp, #28
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	4613      	mov	r3, r2
 800ef58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ef62:	4b1f      	ldr	r3, [pc, #124]	; (800efe0 <FATFS_LinkDriverEx+0x94>)
 800ef64:	7a5b      	ldrb	r3, [r3, #9]
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d131      	bne.n	800efd0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ef6c:	4b1c      	ldr	r3, [pc, #112]	; (800efe0 <FATFS_LinkDriverEx+0x94>)
 800ef6e:	7a5b      	ldrb	r3, [r3, #9]
 800ef70:	b2db      	uxtb	r3, r3
 800ef72:	461a      	mov	r2, r3
 800ef74:	4b1a      	ldr	r3, [pc, #104]	; (800efe0 <FATFS_LinkDriverEx+0x94>)
 800ef76:	2100      	movs	r1, #0
 800ef78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ef7a:	4b19      	ldr	r3, [pc, #100]	; (800efe0 <FATFS_LinkDriverEx+0x94>)
 800ef7c:	7a5b      	ldrb	r3, [r3, #9]
 800ef7e:	b2db      	uxtb	r3, r3
 800ef80:	4a17      	ldr	r2, [pc, #92]	; (800efe0 <FATFS_LinkDriverEx+0x94>)
 800ef82:	009b      	lsls	r3, r3, #2
 800ef84:	4413      	add	r3, r2
 800ef86:	68fa      	ldr	r2, [r7, #12]
 800ef88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ef8a:	4b15      	ldr	r3, [pc, #84]	; (800efe0 <FATFS_LinkDriverEx+0x94>)
 800ef8c:	7a5b      	ldrb	r3, [r3, #9]
 800ef8e:	b2db      	uxtb	r3, r3
 800ef90:	461a      	mov	r2, r3
 800ef92:	4b13      	ldr	r3, [pc, #76]	; (800efe0 <FATFS_LinkDriverEx+0x94>)
 800ef94:	4413      	add	r3, r2
 800ef96:	79fa      	ldrb	r2, [r7, #7]
 800ef98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ef9a:	4b11      	ldr	r3, [pc, #68]	; (800efe0 <FATFS_LinkDriverEx+0x94>)
 800ef9c:	7a5b      	ldrb	r3, [r3, #9]
 800ef9e:	b2db      	uxtb	r3, r3
 800efa0:	1c5a      	adds	r2, r3, #1
 800efa2:	b2d1      	uxtb	r1, r2
 800efa4:	4a0e      	ldr	r2, [pc, #56]	; (800efe0 <FATFS_LinkDriverEx+0x94>)
 800efa6:	7251      	strb	r1, [r2, #9]
 800efa8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800efaa:	7dbb      	ldrb	r3, [r7, #22]
 800efac:	3330      	adds	r3, #48	; 0x30
 800efae:	b2da      	uxtb	r2, r3
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800efb4:	68bb      	ldr	r3, [r7, #8]
 800efb6:	3301      	adds	r3, #1
 800efb8:	223a      	movs	r2, #58	; 0x3a
 800efba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	3302      	adds	r3, #2
 800efc0:	222f      	movs	r2, #47	; 0x2f
 800efc2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	3303      	adds	r3, #3
 800efc8:	2200      	movs	r2, #0
 800efca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800efcc:	2300      	movs	r3, #0
 800efce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800efd0:	7dfb      	ldrb	r3, [r7, #23]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	371c      	adds	r7, #28
 800efd6:	46bd      	mov	sp, r7
 800efd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efdc:	4770      	bx	lr
 800efde:	bf00      	nop
 800efe0:	2000082c 	.word	0x2000082c

0800efe4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b082      	sub	sp, #8
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800efee:	2200      	movs	r2, #0
 800eff0:	6839      	ldr	r1, [r7, #0]
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7ff ffaa 	bl	800ef4c <FATFS_LinkDriverEx>
 800eff8:	4603      	mov	r3, r0
}
 800effa:	4618      	mov	r0, r3
 800effc:	3708      	adds	r7, #8
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	4603      	mov	r3, r0
 800f00a:	6039      	str	r1, [r7, #0]
 800f00c:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800f00e:	2200      	movs	r2, #0
 800f010:	2101      	movs	r1, #1
 800f012:	2001      	movs	r0, #1
 800f014:	f000 fa1c 	bl	800f450 <osSemaphoreNew>
 800f018:	4602      	mov	r2, r0
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	2b00      	cmp	r3, #0
 800f024:	bf14      	ite	ne
 800f026:	2301      	movne	r3, #1
 800f028:	2300      	moveq	r3, #0
 800f02a:	b2db      	uxtb	r3, r3
 800f02c:	60fb      	str	r3, [r7, #12]

    return ret;
 800f02e:	68fb      	ldr	r3, [r7, #12]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3710      	adds	r7, #16
 800f034:	46bd      	mov	sp, r7
 800f036:	bd80      	pop	{r7, pc}

0800f038 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f040:	6878      	ldr	r0, [r7, #4]
 800f042:	f000 fb5f 	bl	800f704 <osSemaphoreDelete>
#endif
    return 1;
 800f046:	2301      	movs	r3, #1
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3708      	adds	r7, #8
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}

0800f050 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b084      	sub	sp, #16
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f058:	2300      	movs	r3, #0
 800f05a:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f05c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f000 fa91 	bl	800f588 <osSemaphoreAcquire>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d101      	bne.n	800f070 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800f06c:	2301      	movs	r3, #1
 800f06e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f070:	68fb      	ldr	r3, [r7, #12]
}
 800f072:	4618      	mov	r0, r3
 800f074:	3710      	adds	r7, #16
 800f076:	46bd      	mov	sp, r7
 800f078:	bd80      	pop	{r7, pc}

0800f07a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f07a:	b580      	push	{r7, lr}
 800f07c:	b082      	sub	sp, #8
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fae6 	bl	800f654 <osSemaphoreRelease>
#endif
}
 800f088:	bf00      	nop
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f090:	b480      	push	{r7}
 800f092:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800f094:	bf00      	nop
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
	...

0800f0a0 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f0a0:	b480      	push	{r7}
 800f0a2:	b085      	sub	sp, #20
 800f0a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f0a6:	f3ef 8305 	mrs	r3, IPSR
 800f0aa:	60bb      	str	r3, [r7, #8]
  return(result);
 800f0ac:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d10f      	bne.n	800f0d2 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f0b2:	f3ef 8310 	mrs	r3, PRIMASK
 800f0b6:	607b      	str	r3, [r7, #4]
  return(result);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	d105      	bne.n	800f0ca <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f0be:	f3ef 8311 	mrs	r3, BASEPRI
 800f0c2:	603b      	str	r3, [r7, #0]
  return(result);
 800f0c4:	683b      	ldr	r3, [r7, #0]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d007      	beq.n	800f0da <osKernelInitialize+0x3a>
 800f0ca:	4b0e      	ldr	r3, [pc, #56]	; (800f104 <osKernelInitialize+0x64>)
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	2b02      	cmp	r3, #2
 800f0d0:	d103      	bne.n	800f0da <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800f0d2:	f06f 0305 	mvn.w	r3, #5
 800f0d6:	60fb      	str	r3, [r7, #12]
 800f0d8:	e00c      	b.n	800f0f4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f0da:	4b0a      	ldr	r3, [pc, #40]	; (800f104 <osKernelInitialize+0x64>)
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d105      	bne.n	800f0ee <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f0e2:	4b08      	ldr	r3, [pc, #32]	; (800f104 <osKernelInitialize+0x64>)
 800f0e4:	2201      	movs	r2, #1
 800f0e6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f0e8:	2300      	movs	r3, #0
 800f0ea:	60fb      	str	r3, [r7, #12]
 800f0ec:	e002      	b.n	800f0f4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800f0ee:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f0f4:	68fb      	ldr	r3, [r7, #12]
}
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	3714      	adds	r7, #20
 800f0fa:	46bd      	mov	sp, r7
 800f0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f100:	4770      	bx	lr
 800f102:	bf00      	nop
 800f104:	20000838 	.word	0x20000838

0800f108 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f10e:	f3ef 8305 	mrs	r3, IPSR
 800f112:	60bb      	str	r3, [r7, #8]
  return(result);
 800f114:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f116:	2b00      	cmp	r3, #0
 800f118:	d10f      	bne.n	800f13a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f11a:	f3ef 8310 	mrs	r3, PRIMASK
 800f11e:	607b      	str	r3, [r7, #4]
  return(result);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	2b00      	cmp	r3, #0
 800f124:	d105      	bne.n	800f132 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f126:	f3ef 8311 	mrs	r3, BASEPRI
 800f12a:	603b      	str	r3, [r7, #0]
  return(result);
 800f12c:	683b      	ldr	r3, [r7, #0]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d007      	beq.n	800f142 <osKernelStart+0x3a>
 800f132:	4b0f      	ldr	r3, [pc, #60]	; (800f170 <osKernelStart+0x68>)
 800f134:	681b      	ldr	r3, [r3, #0]
 800f136:	2b02      	cmp	r3, #2
 800f138:	d103      	bne.n	800f142 <osKernelStart+0x3a>
    stat = osErrorISR;
 800f13a:	f06f 0305 	mvn.w	r3, #5
 800f13e:	60fb      	str	r3, [r7, #12]
 800f140:	e010      	b.n	800f164 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f142:	4b0b      	ldr	r3, [pc, #44]	; (800f170 <osKernelStart+0x68>)
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d109      	bne.n	800f15e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f14a:	f7ff ffa1 	bl	800f090 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f14e:	4b08      	ldr	r3, [pc, #32]	; (800f170 <osKernelStart+0x68>)
 800f150:	2202      	movs	r2, #2
 800f152:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f154:	f001 ffaa 	bl	80110ac <vTaskStartScheduler>
      stat = osOK;
 800f158:	2300      	movs	r3, #0
 800f15a:	60fb      	str	r3, [r7, #12]
 800f15c:	e002      	b.n	800f164 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800f15e:	f04f 33ff 	mov.w	r3, #4294967295
 800f162:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800f164:	68fb      	ldr	r3, [r7, #12]
}
 800f166:	4618      	mov	r0, r3
 800f168:	3710      	adds	r7, #16
 800f16a:	46bd      	mov	sp, r7
 800f16c:	bd80      	pop	{r7, pc}
 800f16e:	bf00      	nop
 800f170:	20000838 	.word	0x20000838

0800f174 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f174:	b580      	push	{r7, lr}
 800f176:	b090      	sub	sp, #64	; 0x40
 800f178:	af04      	add	r7, sp, #16
 800f17a:	60f8      	str	r0, [r7, #12]
 800f17c:	60b9      	str	r1, [r7, #8]
 800f17e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f180:	2300      	movs	r3, #0
 800f182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f184:	f3ef 8305 	mrs	r3, IPSR
 800f188:	61fb      	str	r3, [r7, #28]
  return(result);
 800f18a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f040 808f 	bne.w	800f2b0 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f192:	f3ef 8310 	mrs	r3, PRIMASK
 800f196:	61bb      	str	r3, [r7, #24]
  return(result);
 800f198:	69bb      	ldr	r3, [r7, #24]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d105      	bne.n	800f1aa <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f19e:	f3ef 8311 	mrs	r3, BASEPRI
 800f1a2:	617b      	str	r3, [r7, #20]
  return(result);
 800f1a4:	697b      	ldr	r3, [r7, #20]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d003      	beq.n	800f1b2 <osThreadNew+0x3e>
 800f1aa:	4b44      	ldr	r3, [pc, #272]	; (800f2bc <osThreadNew+0x148>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	2b02      	cmp	r3, #2
 800f1b0:	d07e      	beq.n	800f2b0 <osThreadNew+0x13c>
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d07b      	beq.n	800f2b0 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800f1b8:	2380      	movs	r3, #128	; 0x80
 800f1ba:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800f1bc:	2318      	movs	r3, #24
 800f1be:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800f1c0:	2300      	movs	r3, #0
 800f1c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800f1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800f1c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d045      	beq.n	800f25c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d002      	beq.n	800f1de <osThreadNew+0x6a>
        name = attr->name;
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	699b      	ldr	r3, [r3, #24]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	699b      	ldr	r3, [r3, #24]
 800f1ea:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f1ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d008      	beq.n	800f204 <osThreadNew+0x90>
 800f1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f4:	2b38      	cmp	r3, #56	; 0x38
 800f1f6:	d805      	bhi.n	800f204 <osThreadNew+0x90>
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	f003 0301 	and.w	r3, r3, #1
 800f200:	2b00      	cmp	r3, #0
 800f202:	d001      	beq.n	800f208 <osThreadNew+0x94>
        return (NULL);
 800f204:	2300      	movs	r3, #0
 800f206:	e054      	b.n	800f2b2 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	695b      	ldr	r3, [r3, #20]
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d003      	beq.n	800f218 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	695b      	ldr	r3, [r3, #20]
 800f214:	089b      	lsrs	r3, r3, #2
 800f216:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00e      	beq.n	800f23e <osThreadNew+0xca>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	68db      	ldr	r3, [r3, #12]
 800f224:	2bbb      	cmp	r3, #187	; 0xbb
 800f226:	d90a      	bls.n	800f23e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d006      	beq.n	800f23e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	695b      	ldr	r3, [r3, #20]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d002      	beq.n	800f23e <osThreadNew+0xca>
        mem = 1;
 800f238:	2301      	movs	r3, #1
 800f23a:	623b      	str	r3, [r7, #32]
 800f23c:	e010      	b.n	800f260 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	689b      	ldr	r3, [r3, #8]
 800f242:	2b00      	cmp	r3, #0
 800f244:	d10c      	bne.n	800f260 <osThreadNew+0xec>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	68db      	ldr	r3, [r3, #12]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d108      	bne.n	800f260 <osThreadNew+0xec>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	691b      	ldr	r3, [r3, #16]
 800f252:	2b00      	cmp	r3, #0
 800f254:	d104      	bne.n	800f260 <osThreadNew+0xec>
          mem = 0;
 800f256:	2300      	movs	r3, #0
 800f258:	623b      	str	r3, [r7, #32]
 800f25a:	e001      	b.n	800f260 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800f25c:	2300      	movs	r3, #0
 800f25e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f260:	6a3b      	ldr	r3, [r7, #32]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d110      	bne.n	800f288 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800f26a:	687a      	ldr	r2, [r7, #4]
 800f26c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f26e:	9202      	str	r2, [sp, #8]
 800f270:	9301      	str	r3, [sp, #4]
 800f272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f274:	9300      	str	r3, [sp, #0]
 800f276:	68bb      	ldr	r3, [r7, #8]
 800f278:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f27a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f27c:	68f8      	ldr	r0, [r7, #12]
 800f27e:	f001 fd29 	bl	8010cd4 <xTaskCreateStatic>
 800f282:	4603      	mov	r3, r0
 800f284:	613b      	str	r3, [r7, #16]
 800f286:	e013      	b.n	800f2b0 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800f288:	6a3b      	ldr	r3, [r7, #32]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d110      	bne.n	800f2b0 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f290:	b29a      	uxth	r2, r3
 800f292:	f107 0310 	add.w	r3, r7, #16
 800f296:	9301      	str	r3, [sp, #4]
 800f298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f29a:	9300      	str	r3, [sp, #0]
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f2a0:	68f8      	ldr	r0, [r7, #12]
 800f2a2:	f001 fd74 	bl	8010d8e <xTaskCreate>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b01      	cmp	r3, #1
 800f2aa:	d001      	beq.n	800f2b0 <osThreadNew+0x13c>
          hTask = NULL;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f2b0:	693b      	ldr	r3, [r7, #16]
}
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	3730      	adds	r7, #48	; 0x30
 800f2b6:	46bd      	mov	sp, r7
 800f2b8:	bd80      	pop	{r7, pc}
 800f2ba:	bf00      	nop
 800f2bc:	20000838 	.word	0x20000838

0800f2c0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b086      	sub	sp, #24
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f2c8:	f3ef 8305 	mrs	r3, IPSR
 800f2cc:	613b      	str	r3, [r7, #16]
  return(result);
 800f2ce:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d10f      	bne.n	800f2f4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f2d4:	f3ef 8310 	mrs	r3, PRIMASK
 800f2d8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d105      	bne.n	800f2ec <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f2e0:	f3ef 8311 	mrs	r3, BASEPRI
 800f2e4:	60bb      	str	r3, [r7, #8]
  return(result);
 800f2e6:	68bb      	ldr	r3, [r7, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d007      	beq.n	800f2fc <osDelay+0x3c>
 800f2ec:	4b0a      	ldr	r3, [pc, #40]	; (800f318 <osDelay+0x58>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	2b02      	cmp	r3, #2
 800f2f2:	d103      	bne.n	800f2fc <osDelay+0x3c>
    stat = osErrorISR;
 800f2f4:	f06f 0305 	mvn.w	r3, #5
 800f2f8:	617b      	str	r3, [r7, #20]
 800f2fa:	e007      	b.n	800f30c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d002      	beq.n	800f30c <osDelay+0x4c>
      vTaskDelay(ticks);
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f001 fe9c 	bl	8011044 <vTaskDelay>
    }
  }

  return (stat);
 800f30c:	697b      	ldr	r3, [r7, #20]
}
 800f30e:	4618      	mov	r0, r3
 800f310:	3718      	adds	r7, #24
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	bf00      	nop
 800f318:	20000838 	.word	0x20000838

0800f31c <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b08a      	sub	sp, #40	; 0x28
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800f324:	2300      	movs	r3, #0
 800f326:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f328:	f3ef 8305 	mrs	r3, IPSR
 800f32c:	613b      	str	r3, [r7, #16]
  return(result);
 800f32e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 800f330:	2b00      	cmp	r3, #0
 800f332:	f040 8085 	bne.w	800f440 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f336:	f3ef 8310 	mrs	r3, PRIMASK
 800f33a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d105      	bne.n	800f34e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f342:	f3ef 8311 	mrs	r3, BASEPRI
 800f346:	60bb      	str	r3, [r7, #8]
  return(result);
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d003      	beq.n	800f356 <osMutexNew+0x3a>
 800f34e:	4b3f      	ldr	r3, [pc, #252]	; (800f44c <osMutexNew+0x130>)
 800f350:	681b      	ldr	r3, [r3, #0]
 800f352:	2b02      	cmp	r3, #2
 800f354:	d074      	beq.n	800f440 <osMutexNew+0x124>
    if (attr != NULL) {
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d003      	beq.n	800f364 <osMutexNew+0x48>
      type = attr->attr_bits;
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	685b      	ldr	r3, [r3, #4]
 800f360:	623b      	str	r3, [r7, #32]
 800f362:	e001      	b.n	800f368 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800f364:	2300      	movs	r3, #0
 800f366:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800f368:	6a3b      	ldr	r3, [r7, #32]
 800f36a:	f003 0301 	and.w	r3, r3, #1
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d002      	beq.n	800f378 <osMutexNew+0x5c>
      rmtx = 1U;
 800f372:	2301      	movs	r3, #1
 800f374:	61fb      	str	r3, [r7, #28]
 800f376:	e001      	b.n	800f37c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 800f378:	2300      	movs	r3, #0
 800f37a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800f37c:	6a3b      	ldr	r3, [r7, #32]
 800f37e:	f003 0308 	and.w	r3, r3, #8
 800f382:	2b00      	cmp	r3, #0
 800f384:	d15c      	bne.n	800f440 <osMutexNew+0x124>
      mem = -1;
 800f386:	f04f 33ff 	mov.w	r3, #4294967295
 800f38a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	2b00      	cmp	r3, #0
 800f390:	d015      	beq.n	800f3be <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	689b      	ldr	r3, [r3, #8]
 800f396:	2b00      	cmp	r3, #0
 800f398:	d006      	beq.n	800f3a8 <osMutexNew+0x8c>
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	68db      	ldr	r3, [r3, #12]
 800f39e:	2b4f      	cmp	r3, #79	; 0x4f
 800f3a0:	d902      	bls.n	800f3a8 <osMutexNew+0x8c>
          mem = 1;
 800f3a2:	2301      	movs	r3, #1
 800f3a4:	61bb      	str	r3, [r7, #24]
 800f3a6:	e00c      	b.n	800f3c2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	689b      	ldr	r3, [r3, #8]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d108      	bne.n	800f3c2 <osMutexNew+0xa6>
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	68db      	ldr	r3, [r3, #12]
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d104      	bne.n	800f3c2 <osMutexNew+0xa6>
            mem = 0;
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	61bb      	str	r3, [r7, #24]
 800f3bc:	e001      	b.n	800f3c2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800f3c2:	69bb      	ldr	r3, [r7, #24]
 800f3c4:	2b01      	cmp	r3, #1
 800f3c6:	d112      	bne.n	800f3ee <osMutexNew+0xd2>
        if (rmtx != 0U) {
 800f3c8:	69fb      	ldr	r3, [r7, #28]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	d007      	beq.n	800f3de <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	689b      	ldr	r3, [r3, #8]
 800f3d2:	4619      	mov	r1, r3
 800f3d4:	2004      	movs	r0, #4
 800f3d6:	f000 fd94 	bl	800ff02 <xQueueCreateMutexStatic>
 800f3da:	6278      	str	r0, [r7, #36]	; 0x24
 800f3dc:	e016      	b.n	800f40c <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	2001      	movs	r0, #1
 800f3e6:	f000 fd8c 	bl	800ff02 <xQueueCreateMutexStatic>
 800f3ea:	6278      	str	r0, [r7, #36]	; 0x24
 800f3ec:	e00e      	b.n	800f40c <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 800f3ee:	69bb      	ldr	r3, [r7, #24]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d10b      	bne.n	800f40c <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800f3f4:	69fb      	ldr	r3, [r7, #28]
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d004      	beq.n	800f404 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 800f3fa:	2004      	movs	r0, #4
 800f3fc:	f000 fd69 	bl	800fed2 <xQueueCreateMutex>
 800f400:	6278      	str	r0, [r7, #36]	; 0x24
 800f402:	e003      	b.n	800f40c <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800f404:	2001      	movs	r0, #1
 800f406:	f000 fd64 	bl	800fed2 <xQueueCreateMutex>
 800f40a:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800f40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d00c      	beq.n	800f42c <osMutexNew+0x110>
        if (attr != NULL) {
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	2b00      	cmp	r3, #0
 800f416:	d003      	beq.n	800f420 <osMutexNew+0x104>
          name = attr->name;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	617b      	str	r3, [r7, #20]
 800f41e:	e001      	b.n	800f424 <osMutexNew+0x108>
        } else {
          name = NULL;
 800f420:	2300      	movs	r3, #0
 800f422:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800f424:	6979      	ldr	r1, [r7, #20]
 800f426:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f428:	f001 fbcc 	bl	8010bc4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800f42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d006      	beq.n	800f440 <osMutexNew+0x124>
 800f432:	69fb      	ldr	r3, [r7, #28]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d003      	beq.n	800f440 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800f438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f43a:	f043 0301 	orr.w	r3, r3, #1
 800f43e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800f440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f442:	4618      	mov	r0, r3
 800f444:	3728      	adds	r7, #40	; 0x28
 800f446:	46bd      	mov	sp, r7
 800f448:	bd80      	pop	{r7, pc}
 800f44a:	bf00      	nop
 800f44c:	20000838 	.word	0x20000838

0800f450 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f450:	b580      	push	{r7, lr}
 800f452:	b08c      	sub	sp, #48	; 0x30
 800f454:	af02      	add	r7, sp, #8
 800f456:	60f8      	str	r0, [r7, #12]
 800f458:	60b9      	str	r1, [r7, #8]
 800f45a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f45c:	2300      	movs	r3, #0
 800f45e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f460:	f3ef 8305 	mrs	r3, IPSR
 800f464:	61bb      	str	r3, [r7, #24]
  return(result);
 800f466:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f468:	2b00      	cmp	r3, #0
 800f46a:	f040 8086 	bne.w	800f57a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f46e:	f3ef 8310 	mrs	r3, PRIMASK
 800f472:	617b      	str	r3, [r7, #20]
  return(result);
 800f474:	697b      	ldr	r3, [r7, #20]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d105      	bne.n	800f486 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f47a:	f3ef 8311 	mrs	r3, BASEPRI
 800f47e:	613b      	str	r3, [r7, #16]
  return(result);
 800f480:	693b      	ldr	r3, [r7, #16]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d003      	beq.n	800f48e <osSemaphoreNew+0x3e>
 800f486:	4b3f      	ldr	r3, [pc, #252]	; (800f584 <osSemaphoreNew+0x134>)
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	2b02      	cmp	r3, #2
 800f48c:	d075      	beq.n	800f57a <osSemaphoreNew+0x12a>
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	2b00      	cmp	r3, #0
 800f492:	d072      	beq.n	800f57a <osSemaphoreNew+0x12a>
 800f494:	68ba      	ldr	r2, [r7, #8]
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	429a      	cmp	r2, r3
 800f49a:	d86e      	bhi.n	800f57a <osSemaphoreNew+0x12a>
    mem = -1;
 800f49c:	f04f 33ff 	mov.w	r3, #4294967295
 800f4a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d015      	beq.n	800f4d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d006      	beq.n	800f4be <osSemaphoreNew+0x6e>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	68db      	ldr	r3, [r3, #12]
 800f4b4:	2b4f      	cmp	r3, #79	; 0x4f
 800f4b6:	d902      	bls.n	800f4be <osSemaphoreNew+0x6e>
        mem = 1;
 800f4b8:	2301      	movs	r3, #1
 800f4ba:	623b      	str	r3, [r7, #32]
 800f4bc:	e00c      	b.n	800f4d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	689b      	ldr	r3, [r3, #8]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d108      	bne.n	800f4d8 <osSemaphoreNew+0x88>
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d104      	bne.n	800f4d8 <osSemaphoreNew+0x88>
          mem = 0;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	623b      	str	r3, [r7, #32]
 800f4d2:	e001      	b.n	800f4d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800f4d8:	6a3b      	ldr	r3, [r7, #32]
 800f4da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4de:	d04c      	beq.n	800f57a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	2b01      	cmp	r3, #1
 800f4e4:	d128      	bne.n	800f538 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800f4e6:	6a3b      	ldr	r3, [r7, #32]
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d10a      	bne.n	800f502 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	689b      	ldr	r3, [r3, #8]
 800f4f0:	2203      	movs	r2, #3
 800f4f2:	9200      	str	r2, [sp, #0]
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	2001      	movs	r0, #1
 800f4fa:	f000 fbf5 	bl	800fce8 <xQueueGenericCreateStatic>
 800f4fe:	6278      	str	r0, [r7, #36]	; 0x24
 800f500:	e005      	b.n	800f50e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800f502:	2203      	movs	r2, #3
 800f504:	2100      	movs	r1, #0
 800f506:	2001      	movs	r0, #1
 800f508:	f000 fc66 	bl	800fdd8 <xQueueGenericCreate>
 800f50c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f510:	2b00      	cmp	r3, #0
 800f512:	d022      	beq.n	800f55a <osSemaphoreNew+0x10a>
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d01f      	beq.n	800f55a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f51a:	2300      	movs	r3, #0
 800f51c:	2200      	movs	r2, #0
 800f51e:	2100      	movs	r1, #0
 800f520:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f522:	f000 fd73 	bl	801000c <xQueueGenericSend>
 800f526:	4603      	mov	r3, r0
 800f528:	2b01      	cmp	r3, #1
 800f52a:	d016      	beq.n	800f55a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800f52c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f52e:	f001 f9fd 	bl	801092c <vQueueDelete>
            hSemaphore = NULL;
 800f532:	2300      	movs	r3, #0
 800f534:	627b      	str	r3, [r7, #36]	; 0x24
 800f536:	e010      	b.n	800f55a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800f538:	6a3b      	ldr	r3, [r7, #32]
 800f53a:	2b01      	cmp	r3, #1
 800f53c:	d108      	bne.n	800f550 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	689b      	ldr	r3, [r3, #8]
 800f542:	461a      	mov	r2, r3
 800f544:	68b9      	ldr	r1, [r7, #8]
 800f546:	68f8      	ldr	r0, [r7, #12]
 800f548:	f000 fcf6 	bl	800ff38 <xQueueCreateCountingSemaphoreStatic>
 800f54c:	6278      	str	r0, [r7, #36]	; 0x24
 800f54e:	e004      	b.n	800f55a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f550:	68b9      	ldr	r1, [r7, #8]
 800f552:	68f8      	ldr	r0, [r7, #12]
 800f554:	f000 fd27 	bl	800ffa6 <xQueueCreateCountingSemaphore>
 800f558:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f55a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d00c      	beq.n	800f57a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d003      	beq.n	800f56e <osSemaphoreNew+0x11e>
          name = attr->name;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	61fb      	str	r3, [r7, #28]
 800f56c:	e001      	b.n	800f572 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800f56e:	2300      	movs	r3, #0
 800f570:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f572:	69f9      	ldr	r1, [r7, #28]
 800f574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f576:	f001 fb25 	bl	8010bc4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3728      	adds	r7, #40	; 0x28
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}
 800f584:	20000838 	.word	0x20000838

0800f588 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f588:	b580      	push	{r7, lr}
 800f58a:	b088      	sub	sp, #32
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	6078      	str	r0, [r7, #4]
 800f590:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f596:	2300      	movs	r3, #0
 800f598:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f59a:	69bb      	ldr	r3, [r7, #24]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d103      	bne.n	800f5a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f5a0:	f06f 0303 	mvn.w	r3, #3
 800f5a4:	61fb      	str	r3, [r7, #28]
 800f5a6:	e04b      	b.n	800f640 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5a8:	f3ef 8305 	mrs	r3, IPSR
 800f5ac:	617b      	str	r3, [r7, #20]
  return(result);
 800f5ae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d10f      	bne.n	800f5d4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f5b4:	f3ef 8310 	mrs	r3, PRIMASK
 800f5b8:	613b      	str	r3, [r7, #16]
  return(result);
 800f5ba:	693b      	ldr	r3, [r7, #16]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d105      	bne.n	800f5cc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f5c0:	f3ef 8311 	mrs	r3, BASEPRI
 800f5c4:	60fb      	str	r3, [r7, #12]
  return(result);
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d026      	beq.n	800f61a <osSemaphoreAcquire+0x92>
 800f5cc:	4b1f      	ldr	r3, [pc, #124]	; (800f64c <osSemaphoreAcquire+0xc4>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	2b02      	cmp	r3, #2
 800f5d2:	d122      	bne.n	800f61a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d003      	beq.n	800f5e2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800f5da:	f06f 0303 	mvn.w	r3, #3
 800f5de:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f5e0:	e02d      	b.n	800f63e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f5e6:	f107 0308 	add.w	r3, r7, #8
 800f5ea:	461a      	mov	r2, r3
 800f5ec:	2100      	movs	r1, #0
 800f5ee:	69b8      	ldr	r0, [r7, #24]
 800f5f0:	f001 f91c 	bl	801082c <xQueueReceiveFromISR>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b01      	cmp	r3, #1
 800f5f8:	d003      	beq.n	800f602 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800f5fa:	f06f 0302 	mvn.w	r3, #2
 800f5fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800f600:	e01d      	b.n	800f63e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800f602:	68bb      	ldr	r3, [r7, #8]
 800f604:	2b00      	cmp	r3, #0
 800f606:	d01a      	beq.n	800f63e <osSemaphoreAcquire+0xb6>
 800f608:	4b11      	ldr	r3, [pc, #68]	; (800f650 <osSemaphoreAcquire+0xc8>)
 800f60a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f60e:	601a      	str	r2, [r3, #0]
 800f610:	f3bf 8f4f 	dsb	sy
 800f614:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800f618:	e011      	b.n	800f63e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f61a:	6839      	ldr	r1, [r7, #0]
 800f61c:	69b8      	ldr	r0, [r7, #24]
 800f61e:	f000 fff9 	bl	8010614 <xQueueSemaphoreTake>
 800f622:	4603      	mov	r3, r0
 800f624:	2b01      	cmp	r3, #1
 800f626:	d00b      	beq.n	800f640 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800f628:	683b      	ldr	r3, [r7, #0]
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	d003      	beq.n	800f636 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800f62e:	f06f 0301 	mvn.w	r3, #1
 800f632:	61fb      	str	r3, [r7, #28]
 800f634:	e004      	b.n	800f640 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800f636:	f06f 0302 	mvn.w	r3, #2
 800f63a:	61fb      	str	r3, [r7, #28]
 800f63c:	e000      	b.n	800f640 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800f63e:	bf00      	nop
      }
    }
  }

  return (stat);
 800f640:	69fb      	ldr	r3, [r7, #28]
}
 800f642:	4618      	mov	r0, r3
 800f644:	3720      	adds	r7, #32
 800f646:	46bd      	mov	sp, r7
 800f648:	bd80      	pop	{r7, pc}
 800f64a:	bf00      	nop
 800f64c:	20000838 	.word	0x20000838
 800f650:	e000ed04 	.word	0xe000ed04

0800f654 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f654:	b580      	push	{r7, lr}
 800f656:	b088      	sub	sp, #32
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f660:	2300      	movs	r3, #0
 800f662:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d103      	bne.n	800f672 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f66a:	f06f 0303 	mvn.w	r3, #3
 800f66e:	61fb      	str	r3, [r7, #28]
 800f670:	e03e      	b.n	800f6f0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f672:	f3ef 8305 	mrs	r3, IPSR
 800f676:	617b      	str	r3, [r7, #20]
  return(result);
 800f678:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d10f      	bne.n	800f69e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f67e:	f3ef 8310 	mrs	r3, PRIMASK
 800f682:	613b      	str	r3, [r7, #16]
  return(result);
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d105      	bne.n	800f696 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f68a:	f3ef 8311 	mrs	r3, BASEPRI
 800f68e:	60fb      	str	r3, [r7, #12]
  return(result);
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d01e      	beq.n	800f6d4 <osSemaphoreRelease+0x80>
 800f696:	4b19      	ldr	r3, [pc, #100]	; (800f6fc <osSemaphoreRelease+0xa8>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	2b02      	cmp	r3, #2
 800f69c:	d11a      	bne.n	800f6d4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6a2:	f107 0308 	add.w	r3, r7, #8
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	69b8      	ldr	r0, [r7, #24]
 800f6aa:	f000 fe45 	bl	8010338 <xQueueGiveFromISR>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b01      	cmp	r3, #1
 800f6b2:	d003      	beq.n	800f6bc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800f6b4:	f06f 0302 	mvn.w	r3, #2
 800f6b8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6ba:	e018      	b.n	800f6ee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800f6bc:	68bb      	ldr	r3, [r7, #8]
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d015      	beq.n	800f6ee <osSemaphoreRelease+0x9a>
 800f6c2:	4b0f      	ldr	r3, [pc, #60]	; (800f700 <osSemaphoreRelease+0xac>)
 800f6c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f6c8:	601a      	str	r2, [r3, #0]
 800f6ca:	f3bf 8f4f 	dsb	sy
 800f6ce:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6d2:	e00c      	b.n	800f6ee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f6d4:	2300      	movs	r3, #0
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	2100      	movs	r1, #0
 800f6da:	69b8      	ldr	r0, [r7, #24]
 800f6dc:	f000 fc96 	bl	801000c <xQueueGenericSend>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	2b01      	cmp	r3, #1
 800f6e4:	d004      	beq.n	800f6f0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800f6e6:	f06f 0302 	mvn.w	r3, #2
 800f6ea:	61fb      	str	r3, [r7, #28]
 800f6ec:	e000      	b.n	800f6f0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f6ee:	bf00      	nop
    }
  }

  return (stat);
 800f6f0:	69fb      	ldr	r3, [r7, #28]
}
 800f6f2:	4618      	mov	r0, r3
 800f6f4:	3720      	adds	r7, #32
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	bf00      	nop
 800f6fc:	20000838 	.word	0x20000838
 800f700:	e000ed04 	.word	0xe000ed04

0800f704 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f704:	b580      	push	{r7, lr}
 800f706:	b088      	sub	sp, #32
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f710:	f3ef 8305 	mrs	r3, IPSR
 800f714:	617b      	str	r3, [r7, #20]
  return(result);
 800f716:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d10f      	bne.n	800f73c <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f71c:	f3ef 8310 	mrs	r3, PRIMASK
 800f720:	613b      	str	r3, [r7, #16]
  return(result);
 800f722:	693b      	ldr	r3, [r7, #16]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d105      	bne.n	800f734 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f728:	f3ef 8311 	mrs	r3, BASEPRI
 800f72c:	60fb      	str	r3, [r7, #12]
  return(result);
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d007      	beq.n	800f744 <osSemaphoreDelete+0x40>
 800f734:	4b0d      	ldr	r3, [pc, #52]	; (800f76c <osSemaphoreDelete+0x68>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2b02      	cmp	r3, #2
 800f73a:	d103      	bne.n	800f744 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 800f73c:	f06f 0305 	mvn.w	r3, #5
 800f740:	61fb      	str	r3, [r7, #28]
 800f742:	e00e      	b.n	800f762 <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 800f744:	69bb      	ldr	r3, [r7, #24]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d103      	bne.n	800f752 <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 800f74a:	f06f 0303 	mvn.w	r3, #3
 800f74e:	61fb      	str	r3, [r7, #28]
 800f750:	e007      	b.n	800f762 <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f752:	69b8      	ldr	r0, [r7, #24]
 800f754:	f001 fa60 	bl	8010c18 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f758:	2300      	movs	r3, #0
 800f75a:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 800f75c:	69b8      	ldr	r0, [r7, #24]
 800f75e:	f001 f8e5 	bl	801092c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f762:	69fb      	ldr	r3, [r7, #28]
}
 800f764:	4618      	mov	r0, r3
 800f766:	3720      	adds	r7, #32
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}
 800f76c:	20000838 	.word	0x20000838

0800f770 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f770:	b580      	push	{r7, lr}
 800f772:	b08c      	sub	sp, #48	; 0x30
 800f774:	af02      	add	r7, sp, #8
 800f776:	60f8      	str	r0, [r7, #12]
 800f778:	60b9      	str	r1, [r7, #8]
 800f77a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f77c:	2300      	movs	r3, #0
 800f77e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f780:	f3ef 8305 	mrs	r3, IPSR
 800f784:	61bb      	str	r3, [r7, #24]
  return(result);
 800f786:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d16f      	bne.n	800f86c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f78c:	f3ef 8310 	mrs	r3, PRIMASK
 800f790:	617b      	str	r3, [r7, #20]
  return(result);
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d105      	bne.n	800f7a4 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f798:	f3ef 8311 	mrs	r3, BASEPRI
 800f79c:	613b      	str	r3, [r7, #16]
  return(result);
 800f79e:	693b      	ldr	r3, [r7, #16]
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d003      	beq.n	800f7ac <osMessageQueueNew+0x3c>
 800f7a4:	4b34      	ldr	r3, [pc, #208]	; (800f878 <osMessageQueueNew+0x108>)
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	2b02      	cmp	r3, #2
 800f7aa:	d05f      	beq.n	800f86c <osMessageQueueNew+0xfc>
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d05c      	beq.n	800f86c <osMessageQueueNew+0xfc>
 800f7b2:	68bb      	ldr	r3, [r7, #8]
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d059      	beq.n	800f86c <osMessageQueueNew+0xfc>
    mem = -1;
 800f7b8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7bc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d029      	beq.n	800f818 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d012      	beq.n	800f7f2 <osMessageQueueNew+0x82>
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	2b4f      	cmp	r3, #79	; 0x4f
 800f7d2:	d90e      	bls.n	800f7f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d00a      	beq.n	800f7f2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	695a      	ldr	r2, [r3, #20]
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	68b9      	ldr	r1, [r7, #8]
 800f7e4:	fb01 f303 	mul.w	r3, r1, r3
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d302      	bcc.n	800f7f2 <osMessageQueueNew+0x82>
        mem = 1;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	623b      	str	r3, [r7, #32]
 800f7f0:	e014      	b.n	800f81c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	689b      	ldr	r3, [r3, #8]
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d110      	bne.n	800f81c <osMessageQueueNew+0xac>
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	68db      	ldr	r3, [r3, #12]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d10c      	bne.n	800f81c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f806:	2b00      	cmp	r3, #0
 800f808:	d108      	bne.n	800f81c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	695b      	ldr	r3, [r3, #20]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d104      	bne.n	800f81c <osMessageQueueNew+0xac>
          mem = 0;
 800f812:	2300      	movs	r3, #0
 800f814:	623b      	str	r3, [r7, #32]
 800f816:	e001      	b.n	800f81c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800f818:	2300      	movs	r3, #0
 800f81a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800f81c:	6a3b      	ldr	r3, [r7, #32]
 800f81e:	2b01      	cmp	r3, #1
 800f820:	d10b      	bne.n	800f83a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	691a      	ldr	r2, [r3, #16]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	689b      	ldr	r3, [r3, #8]
 800f82a:	2100      	movs	r1, #0
 800f82c:	9100      	str	r1, [sp, #0]
 800f82e:	68b9      	ldr	r1, [r7, #8]
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f000 fa59 	bl	800fce8 <xQueueGenericCreateStatic>
 800f836:	6278      	str	r0, [r7, #36]	; 0x24
 800f838:	e008      	b.n	800f84c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800f83a:	6a3b      	ldr	r3, [r7, #32]
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d105      	bne.n	800f84c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800f840:	2200      	movs	r2, #0
 800f842:	68b9      	ldr	r1, [r7, #8]
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f000 fac7 	bl	800fdd8 <xQueueGenericCreate>
 800f84a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d00c      	beq.n	800f86c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d003      	beq.n	800f860 <osMessageQueueNew+0xf0>
        name = attr->name;
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	61fb      	str	r3, [r7, #28]
 800f85e:	e001      	b.n	800f864 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800f860:	2300      	movs	r3, #0
 800f862:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800f864:	69f9      	ldr	r1, [r7, #28]
 800f866:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f868:	f001 f9ac 	bl	8010bc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f86e:	4618      	mov	r0, r3
 800f870:	3728      	adds	r7, #40	; 0x28
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}
 800f876:	bf00      	nop
 800f878:	20000838 	.word	0x20000838

0800f87c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f87c:	b580      	push	{r7, lr}
 800f87e:	b08a      	sub	sp, #40	; 0x28
 800f880:	af00      	add	r7, sp, #0
 800f882:	60f8      	str	r0, [r7, #12]
 800f884:	60b9      	str	r1, [r7, #8]
 800f886:	603b      	str	r3, [r7, #0]
 800f888:	4613      	mov	r3, r2
 800f88a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f890:	2300      	movs	r3, #0
 800f892:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f894:	f3ef 8305 	mrs	r3, IPSR
 800f898:	61fb      	str	r3, [r7, #28]
  return(result);
 800f89a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d10f      	bne.n	800f8c0 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f8a0:	f3ef 8310 	mrs	r3, PRIMASK
 800f8a4:	61bb      	str	r3, [r7, #24]
  return(result);
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d105      	bne.n	800f8b8 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f8ac:	f3ef 8311 	mrs	r3, BASEPRI
 800f8b0:	617b      	str	r3, [r7, #20]
  return(result);
 800f8b2:	697b      	ldr	r3, [r7, #20]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d02c      	beq.n	800f912 <osMessageQueuePut+0x96>
 800f8b8:	4b28      	ldr	r3, [pc, #160]	; (800f95c <osMessageQueuePut+0xe0>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	2b02      	cmp	r3, #2
 800f8be:	d128      	bne.n	800f912 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8c0:	6a3b      	ldr	r3, [r7, #32]
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d005      	beq.n	800f8d2 <osMessageQueuePut+0x56>
 800f8c6:	68bb      	ldr	r3, [r7, #8]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d002      	beq.n	800f8d2 <osMessageQueuePut+0x56>
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d003      	beq.n	800f8da <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800f8d2:	f06f 0303 	mvn.w	r3, #3
 800f8d6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8d8:	e039      	b.n	800f94e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800f8da:	2300      	movs	r3, #0
 800f8dc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f8de:	f107 0210 	add.w	r2, r7, #16
 800f8e2:	2300      	movs	r3, #0
 800f8e4:	68b9      	ldr	r1, [r7, #8]
 800f8e6:	6a38      	ldr	r0, [r7, #32]
 800f8e8:	f000 fc8e 	bl	8010208 <xQueueGenericSendFromISR>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	2b01      	cmp	r3, #1
 800f8f0:	d003      	beq.n	800f8fa <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800f8f2:	f06f 0302 	mvn.w	r3, #2
 800f8f6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f8f8:	e029      	b.n	800f94e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800f8fa:	693b      	ldr	r3, [r7, #16]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d026      	beq.n	800f94e <osMessageQueuePut+0xd2>
 800f900:	4b17      	ldr	r3, [pc, #92]	; (800f960 <osMessageQueuePut+0xe4>)
 800f902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f906:	601a      	str	r2, [r3, #0]
 800f908:	f3bf 8f4f 	dsb	sy
 800f90c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f910:	e01d      	b.n	800f94e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f912:	6a3b      	ldr	r3, [r7, #32]
 800f914:	2b00      	cmp	r3, #0
 800f916:	d002      	beq.n	800f91e <osMessageQueuePut+0xa2>
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d103      	bne.n	800f926 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800f91e:	f06f 0303 	mvn.w	r3, #3
 800f922:	627b      	str	r3, [r7, #36]	; 0x24
 800f924:	e014      	b.n	800f950 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f926:	2300      	movs	r3, #0
 800f928:	683a      	ldr	r2, [r7, #0]
 800f92a:	68b9      	ldr	r1, [r7, #8]
 800f92c:	6a38      	ldr	r0, [r7, #32]
 800f92e:	f000 fb6d 	bl	801000c <xQueueGenericSend>
 800f932:	4603      	mov	r3, r0
 800f934:	2b01      	cmp	r3, #1
 800f936:	d00b      	beq.n	800f950 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	2b00      	cmp	r3, #0
 800f93c:	d003      	beq.n	800f946 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800f93e:	f06f 0301 	mvn.w	r3, #1
 800f942:	627b      	str	r3, [r7, #36]	; 0x24
 800f944:	e004      	b.n	800f950 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800f946:	f06f 0302 	mvn.w	r3, #2
 800f94a:	627b      	str	r3, [r7, #36]	; 0x24
 800f94c:	e000      	b.n	800f950 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f94e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f952:	4618      	mov	r0, r3
 800f954:	3728      	adds	r7, #40	; 0x28
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	bf00      	nop
 800f95c:	20000838 	.word	0x20000838
 800f960:	e000ed04 	.word	0xe000ed04

0800f964 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f964:	b580      	push	{r7, lr}
 800f966:	b08a      	sub	sp, #40	; 0x28
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	607a      	str	r2, [r7, #4]
 800f970:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f976:	2300      	movs	r3, #0
 800f978:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f97a:	f3ef 8305 	mrs	r3, IPSR
 800f97e:	61fb      	str	r3, [r7, #28]
  return(result);
 800f980:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800f982:	2b00      	cmp	r3, #0
 800f984:	d10f      	bne.n	800f9a6 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f986:	f3ef 8310 	mrs	r3, PRIMASK
 800f98a:	61bb      	str	r3, [r7, #24]
  return(result);
 800f98c:	69bb      	ldr	r3, [r7, #24]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	d105      	bne.n	800f99e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800f992:	f3ef 8311 	mrs	r3, BASEPRI
 800f996:	617b      	str	r3, [r7, #20]
  return(result);
 800f998:	697b      	ldr	r3, [r7, #20]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d02c      	beq.n	800f9f8 <osMessageQueueGet+0x94>
 800f99e:	4b28      	ldr	r3, [pc, #160]	; (800fa40 <osMessageQueueGet+0xdc>)
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	2b02      	cmp	r3, #2
 800f9a4:	d128      	bne.n	800f9f8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9a6:	6a3b      	ldr	r3, [r7, #32]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d005      	beq.n	800f9b8 <osMessageQueueGet+0x54>
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d002      	beq.n	800f9b8 <osMessageQueueGet+0x54>
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d003      	beq.n	800f9c0 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800f9b8:	f06f 0303 	mvn.w	r3, #3
 800f9bc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9be:	e038      	b.n	800fa32 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800f9c4:	f107 0310 	add.w	r3, r7, #16
 800f9c8:	461a      	mov	r2, r3
 800f9ca:	68b9      	ldr	r1, [r7, #8]
 800f9cc:	6a38      	ldr	r0, [r7, #32]
 800f9ce:	f000 ff2d 	bl	801082c <xQueueReceiveFromISR>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	2b01      	cmp	r3, #1
 800f9d6:	d003      	beq.n	800f9e0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800f9d8:	f06f 0302 	mvn.w	r3, #2
 800f9dc:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9de:	e028      	b.n	800fa32 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	2b00      	cmp	r3, #0
 800f9e4:	d025      	beq.n	800fa32 <osMessageQueueGet+0xce>
 800f9e6:	4b17      	ldr	r3, [pc, #92]	; (800fa44 <osMessageQueueGet+0xe0>)
 800f9e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9ec:	601a      	str	r2, [r3, #0]
 800f9ee:	f3bf 8f4f 	dsb	sy
 800f9f2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f9f6:	e01c      	b.n	800fa32 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f9f8:	6a3b      	ldr	r3, [r7, #32]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d002      	beq.n	800fa04 <osMessageQueueGet+0xa0>
 800f9fe:	68bb      	ldr	r3, [r7, #8]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d103      	bne.n	800fa0c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800fa04:	f06f 0303 	mvn.w	r3, #3
 800fa08:	627b      	str	r3, [r7, #36]	; 0x24
 800fa0a:	e013      	b.n	800fa34 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fa0c:	683a      	ldr	r2, [r7, #0]
 800fa0e:	68b9      	ldr	r1, [r7, #8]
 800fa10:	6a38      	ldr	r0, [r7, #32]
 800fa12:	f000 fd1f 	bl	8010454 <xQueueReceive>
 800fa16:	4603      	mov	r3, r0
 800fa18:	2b01      	cmp	r3, #1
 800fa1a:	d00b      	beq.n	800fa34 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d003      	beq.n	800fa2a <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800fa22:	f06f 0301 	mvn.w	r3, #1
 800fa26:	627b      	str	r3, [r7, #36]	; 0x24
 800fa28:	e004      	b.n	800fa34 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800fa2a:	f06f 0302 	mvn.w	r3, #2
 800fa2e:	627b      	str	r3, [r7, #36]	; 0x24
 800fa30:	e000      	b.n	800fa34 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fa32:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800fa34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3728      	adds	r7, #40	; 0x28
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}
 800fa3e:	bf00      	nop
 800fa40:	20000838 	.word	0x20000838
 800fa44:	e000ed04 	.word	0xe000ed04

0800fa48 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800fa48:	b480      	push	{r7}
 800fa4a:	b085      	sub	sp, #20
 800fa4c:	af00      	add	r7, sp, #0
 800fa4e:	60f8      	str	r0, [r7, #12]
 800fa50:	60b9      	str	r1, [r7, #8]
 800fa52:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	4a07      	ldr	r2, [pc, #28]	; (800fa74 <vApplicationGetIdleTaskMemory+0x2c>)
 800fa58:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	4a06      	ldr	r2, [pc, #24]	; (800fa78 <vApplicationGetIdleTaskMemory+0x30>)
 800fa5e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2280      	movs	r2, #128	; 0x80
 800fa64:	601a      	str	r2, [r3, #0]
}
 800fa66:	bf00      	nop
 800fa68:	3714      	adds	r7, #20
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa70:	4770      	bx	lr
 800fa72:	bf00      	nop
 800fa74:	2000083c 	.word	0x2000083c
 800fa78:	200008f8 	.word	0x200008f8

0800fa7c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fa7c:	b480      	push	{r7}
 800fa7e:	b085      	sub	sp, #20
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	60f8      	str	r0, [r7, #12]
 800fa84:	60b9      	str	r1, [r7, #8]
 800fa86:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	4a07      	ldr	r2, [pc, #28]	; (800faa8 <vApplicationGetTimerTaskMemory+0x2c>)
 800fa8c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	4a06      	ldr	r2, [pc, #24]	; (800faac <vApplicationGetTimerTaskMemory+0x30>)
 800fa92:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fa9a:	601a      	str	r2, [r3, #0]
}
 800fa9c:	bf00      	nop
 800fa9e:	3714      	adds	r7, #20
 800faa0:	46bd      	mov	sp, r7
 800faa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa6:	4770      	bx	lr
 800faa8:	20000af8 	.word	0x20000af8
 800faac:	20000bb4 	.word	0x20000bb4

0800fab0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fab0:	b480      	push	{r7}
 800fab2:	b083      	sub	sp, #12
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f103 0208 	add.w	r2, r3, #8
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	f04f 32ff 	mov.w	r2, #4294967295
 800fac8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	f103 0208 	add.w	r2, r3, #8
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	f103 0208 	add.w	r2, r3, #8
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2200      	movs	r2, #0
 800fae2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fae4:	bf00      	nop
 800fae6:	370c      	adds	r7, #12
 800fae8:	46bd      	mov	sp, r7
 800faea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faee:	4770      	bx	lr

0800faf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800faf0:	b480      	push	{r7}
 800faf2:	b083      	sub	sp, #12
 800faf4:	af00      	add	r7, sp, #0
 800faf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	2200      	movs	r2, #0
 800fafc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fafe:	bf00      	nop
 800fb00:	370c      	adds	r7, #12
 800fb02:	46bd      	mov	sp, r7
 800fb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb08:	4770      	bx	lr

0800fb0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb0a:	b480      	push	{r7}
 800fb0c:	b085      	sub	sp, #20
 800fb0e:	af00      	add	r7, sp, #0
 800fb10:	6078      	str	r0, [r7, #4]
 800fb12:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	685b      	ldr	r3, [r3, #4]
 800fb18:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	68fa      	ldr	r2, [r7, #12]
 800fb1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	689a      	ldr	r2, [r3, #8]
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fb28:	68fb      	ldr	r3, [r7, #12]
 800fb2a:	689b      	ldr	r3, [r3, #8]
 800fb2c:	683a      	ldr	r2, [r7, #0]
 800fb2e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	683a      	ldr	r2, [r7, #0]
 800fb34:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	687a      	ldr	r2, [r7, #4]
 800fb3a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	1c5a      	adds	r2, r3, #1
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	601a      	str	r2, [r3, #0]
}
 800fb46:	bf00      	nop
 800fb48:	3714      	adds	r7, #20
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb50:	4770      	bx	lr

0800fb52 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb52:	b480      	push	{r7}
 800fb54:	b085      	sub	sp, #20
 800fb56:	af00      	add	r7, sp, #0
 800fb58:	6078      	str	r0, [r7, #4]
 800fb5a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb68:	d103      	bne.n	800fb72 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	691b      	ldr	r3, [r3, #16]
 800fb6e:	60fb      	str	r3, [r7, #12]
 800fb70:	e00c      	b.n	800fb8c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	3308      	adds	r3, #8
 800fb76:	60fb      	str	r3, [r7, #12]
 800fb78:	e002      	b.n	800fb80 <vListInsert+0x2e>
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	60fb      	str	r3, [r7, #12]
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	68ba      	ldr	r2, [r7, #8]
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d2f6      	bcs.n	800fb7a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	685a      	ldr	r2, [r3, #4]
 800fb90:	683b      	ldr	r3, [r7, #0]
 800fb92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fb94:	683b      	ldr	r3, [r7, #0]
 800fb96:	685b      	ldr	r3, [r3, #4]
 800fb98:	683a      	ldr	r2, [r7, #0]
 800fb9a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fb9c:	683b      	ldr	r3, [r7, #0]
 800fb9e:	68fa      	ldr	r2, [r7, #12]
 800fba0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	683a      	ldr	r2, [r7, #0]
 800fba6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	687a      	ldr	r2, [r7, #4]
 800fbac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	1c5a      	adds	r2, r3, #1
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	601a      	str	r2, [r3, #0]
}
 800fbb8:	bf00      	nop
 800fbba:	3714      	adds	r7, #20
 800fbbc:	46bd      	mov	sp, r7
 800fbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc2:	4770      	bx	lr

0800fbc4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fbc4:	b480      	push	{r7}
 800fbc6:	b085      	sub	sp, #20
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	691b      	ldr	r3, [r3, #16]
 800fbd0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	685b      	ldr	r3, [r3, #4]
 800fbd6:	687a      	ldr	r2, [r7, #4]
 800fbd8:	6892      	ldr	r2, [r2, #8]
 800fbda:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	689b      	ldr	r3, [r3, #8]
 800fbe0:	687a      	ldr	r2, [r7, #4]
 800fbe2:	6852      	ldr	r2, [r2, #4]
 800fbe4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	685b      	ldr	r3, [r3, #4]
 800fbea:	687a      	ldr	r2, [r7, #4]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d103      	bne.n	800fbf8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	689a      	ldr	r2, [r3, #8]
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	1e5a      	subs	r2, r3, #1
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	681b      	ldr	r3, [r3, #0]
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3714      	adds	r7, #20
 800fc10:	46bd      	mov	sp, r7
 800fc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc16:	4770      	bx	lr

0800fc18 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fc18:	b580      	push	{r7, lr}
 800fc1a:	b084      	sub	sp, #16
 800fc1c:	af00      	add	r7, sp, #0
 800fc1e:	6078      	str	r0, [r7, #4]
 800fc20:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d10a      	bne.n	800fc42 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fc2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc30:	f383 8811 	msr	BASEPRI, r3
 800fc34:	f3bf 8f6f 	isb	sy
 800fc38:	f3bf 8f4f 	dsb	sy
 800fc3c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fc3e:	bf00      	nop
 800fc40:	e7fe      	b.n	800fc40 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fc42:	f002 fce7 	bl	8012614 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	681a      	ldr	r2, [r3, #0]
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc4e:	68f9      	ldr	r1, [r7, #12]
 800fc50:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc52:	fb01 f303 	mul.w	r3, r1, r3
 800fc56:	441a      	add	r2, r3
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681a      	ldr	r2, [r3, #0]
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fc6a:	68fb      	ldr	r3, [r7, #12]
 800fc6c:	681a      	ldr	r2, [r3, #0]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc72:	3b01      	subs	r3, #1
 800fc74:	68f9      	ldr	r1, [r7, #12]
 800fc76:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800fc78:	fb01 f303 	mul.w	r3, r1, r3
 800fc7c:	441a      	add	r2, r3
 800fc7e:	68fb      	ldr	r3, [r7, #12]
 800fc80:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	22ff      	movs	r2, #255	; 0xff
 800fc86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	22ff      	movs	r2, #255	; 0xff
 800fc8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800fc92:	683b      	ldr	r3, [r7, #0]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d114      	bne.n	800fcc2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	691b      	ldr	r3, [r3, #16]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d01a      	beq.n	800fcd6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	3310      	adds	r3, #16
 800fca4:	4618      	mov	r0, r3
 800fca6:	f001 fc9b 	bl	80115e0 <xTaskRemoveFromEventList>
 800fcaa:	4603      	mov	r3, r0
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d012      	beq.n	800fcd6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fcb0:	4b0c      	ldr	r3, [pc, #48]	; (800fce4 <xQueueGenericReset+0xcc>)
 800fcb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcb6:	601a      	str	r2, [r3, #0]
 800fcb8:	f3bf 8f4f 	dsb	sy
 800fcbc:	f3bf 8f6f 	isb	sy
 800fcc0:	e009      	b.n	800fcd6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	3310      	adds	r3, #16
 800fcc6:	4618      	mov	r0, r3
 800fcc8:	f7ff fef2 	bl	800fab0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	3324      	adds	r3, #36	; 0x24
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	f7ff feed 	bl	800fab0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fcd6:	f002 fccd 	bl	8012674 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fcda:	2301      	movs	r3, #1
}
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3710      	adds	r7, #16
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}
 800fce4:	e000ed04 	.word	0xe000ed04

0800fce8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fce8:	b580      	push	{r7, lr}
 800fcea:	b08e      	sub	sp, #56	; 0x38
 800fcec:	af02      	add	r7, sp, #8
 800fcee:	60f8      	str	r0, [r7, #12]
 800fcf0:	60b9      	str	r1, [r7, #8]
 800fcf2:	607a      	str	r2, [r7, #4]
 800fcf4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d10a      	bne.n	800fd12 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800fcfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd00:	f383 8811 	msr	BASEPRI, r3
 800fd04:	f3bf 8f6f 	isb	sy
 800fd08:	f3bf 8f4f 	dsb	sy
 800fd0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fd0e:	bf00      	nop
 800fd10:	e7fe      	b.n	800fd10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fd12:	683b      	ldr	r3, [r7, #0]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d10a      	bne.n	800fd2e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800fd18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1c:	f383 8811 	msr	BASEPRI, r3
 800fd20:	f3bf 8f6f 	isb	sy
 800fd24:	f3bf 8f4f 	dsb	sy
 800fd28:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fd2a:	bf00      	nop
 800fd2c:	e7fe      	b.n	800fd2c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d002      	beq.n	800fd3a <xQueueGenericCreateStatic+0x52>
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d001      	beq.n	800fd3e <xQueueGenericCreateStatic+0x56>
 800fd3a:	2301      	movs	r3, #1
 800fd3c:	e000      	b.n	800fd40 <xQueueGenericCreateStatic+0x58>
 800fd3e:	2300      	movs	r3, #0
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d10a      	bne.n	800fd5a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800fd44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd48:	f383 8811 	msr	BASEPRI, r3
 800fd4c:	f3bf 8f6f 	isb	sy
 800fd50:	f3bf 8f4f 	dsb	sy
 800fd54:	623b      	str	r3, [r7, #32]
}
 800fd56:	bf00      	nop
 800fd58:	e7fe      	b.n	800fd58 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d102      	bne.n	800fd66 <xQueueGenericCreateStatic+0x7e>
 800fd60:	68bb      	ldr	r3, [r7, #8]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d101      	bne.n	800fd6a <xQueueGenericCreateStatic+0x82>
 800fd66:	2301      	movs	r3, #1
 800fd68:	e000      	b.n	800fd6c <xQueueGenericCreateStatic+0x84>
 800fd6a:	2300      	movs	r3, #0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d10a      	bne.n	800fd86 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800fd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd74:	f383 8811 	msr	BASEPRI, r3
 800fd78:	f3bf 8f6f 	isb	sy
 800fd7c:	f3bf 8f4f 	dsb	sy
 800fd80:	61fb      	str	r3, [r7, #28]
}
 800fd82:	bf00      	nop
 800fd84:	e7fe      	b.n	800fd84 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fd86:	2350      	movs	r3, #80	; 0x50
 800fd88:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fd8a:	697b      	ldr	r3, [r7, #20]
 800fd8c:	2b50      	cmp	r3, #80	; 0x50
 800fd8e:	d00a      	beq.n	800fda6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800fd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd94:	f383 8811 	msr	BASEPRI, r3
 800fd98:	f3bf 8f6f 	isb	sy
 800fd9c:	f3bf 8f4f 	dsb	sy
 800fda0:	61bb      	str	r3, [r7, #24]
}
 800fda2:	bf00      	nop
 800fda4:	e7fe      	b.n	800fda4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fda6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fdac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d00d      	beq.n	800fdce <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fdb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdb4:	2201      	movs	r2, #1
 800fdb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fdba:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fdbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fdc0:	9300      	str	r3, [sp, #0]
 800fdc2:	4613      	mov	r3, r2
 800fdc4:	687a      	ldr	r2, [r7, #4]
 800fdc6:	68b9      	ldr	r1, [r7, #8]
 800fdc8:	68f8      	ldr	r0, [r7, #12]
 800fdca:	f000 f845 	bl	800fe58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3730      	adds	r7, #48	; 0x30
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}

0800fdd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08a      	sub	sp, #40	; 0x28
 800fddc:	af02      	add	r7, sp, #8
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	4613      	mov	r3, r2
 800fde4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fde6:	68fb      	ldr	r3, [r7, #12]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d10a      	bne.n	800fe02 <xQueueGenericCreate+0x2a>
	__asm volatile
 800fdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdf0:	f383 8811 	msr	BASEPRI, r3
 800fdf4:	f3bf 8f6f 	isb	sy
 800fdf8:	f3bf 8f4f 	dsb	sy
 800fdfc:	613b      	str	r3, [r7, #16]
}
 800fdfe:	bf00      	nop
 800fe00:	e7fe      	b.n	800fe00 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d102      	bne.n	800fe0e <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	61fb      	str	r3, [r7, #28]
 800fe0c:	e004      	b.n	800fe18 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	68ba      	ldr	r2, [r7, #8]
 800fe12:	fb02 f303 	mul.w	r3, r2, r3
 800fe16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	3350      	adds	r3, #80	; 0x50
 800fe1c:	4618      	mov	r0, r3
 800fe1e:	f002 fd1b 	bl	8012858 <pvPortMalloc>
 800fe22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fe24:	69bb      	ldr	r3, [r7, #24]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d011      	beq.n	800fe4e <xQueueGenericCreate+0x76>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fe2a:	69bb      	ldr	r3, [r7, #24]
 800fe2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe2e:	697b      	ldr	r3, [r7, #20]
 800fe30:	3350      	adds	r3, #80	; 0x50
 800fe32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	2200      	movs	r2, #0
 800fe38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe3c:	79fa      	ldrb	r2, [r7, #7]
 800fe3e:	69bb      	ldr	r3, [r7, #24]
 800fe40:	9300      	str	r3, [sp, #0]
 800fe42:	4613      	mov	r3, r2
 800fe44:	697a      	ldr	r2, [r7, #20]
 800fe46:	68b9      	ldr	r1, [r7, #8]
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f000 f805 	bl	800fe58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe4e:	69bb      	ldr	r3, [r7, #24]
	}
 800fe50:	4618      	mov	r0, r3
 800fe52:	3720      	adds	r7, #32
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}

0800fe58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fe58:	b580      	push	{r7, lr}
 800fe5a:	b084      	sub	sp, #16
 800fe5c:	af00      	add	r7, sp, #0
 800fe5e:	60f8      	str	r0, [r7, #12]
 800fe60:	60b9      	str	r1, [r7, #8]
 800fe62:	607a      	str	r2, [r7, #4]
 800fe64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d103      	bne.n	800fe74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	69ba      	ldr	r2, [r7, #24]
 800fe70:	601a      	str	r2, [r3, #0]
 800fe72:	e002      	b.n	800fe7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fe74:	69bb      	ldr	r3, [r7, #24]
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fe7a:	69bb      	ldr	r3, [r7, #24]
 800fe7c:	68fa      	ldr	r2, [r7, #12]
 800fe7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fe80:	69bb      	ldr	r3, [r7, #24]
 800fe82:	68ba      	ldr	r2, [r7, #8]
 800fe84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fe86:	2101      	movs	r1, #1
 800fe88:	69b8      	ldr	r0, [r7, #24]
 800fe8a:	f7ff fec5 	bl	800fc18 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fe8e:	69bb      	ldr	r3, [r7, #24]
 800fe90:	78fa      	ldrb	r2, [r7, #3]
 800fe92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fe96:	bf00      	nop
 800fe98:	3710      	adds	r7, #16
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	bd80      	pop	{r7, pc}

0800fe9e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800fe9e:	b580      	push	{r7, lr}
 800fea0:	b082      	sub	sp, #8
 800fea2:	af00      	add	r7, sp, #0
 800fea4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d00e      	beq.n	800feca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	2200      	movs	r2, #0
 800feb0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	2200      	movs	r2, #0
 800feb6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2200      	movs	r2, #0
 800febc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800febe:	2300      	movs	r3, #0
 800fec0:	2200      	movs	r2, #0
 800fec2:	2100      	movs	r1, #0
 800fec4:	6878      	ldr	r0, [r7, #4]
 800fec6:	f000 f8a1 	bl	801000c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fed2:	b580      	push	{r7, lr}
 800fed4:	b086      	sub	sp, #24
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	4603      	mov	r3, r0
 800feda:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fedc:	2301      	movs	r3, #1
 800fede:	617b      	str	r3, [r7, #20]
 800fee0:	2300      	movs	r3, #0
 800fee2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fee4:	79fb      	ldrb	r3, [r7, #7]
 800fee6:	461a      	mov	r2, r3
 800fee8:	6939      	ldr	r1, [r7, #16]
 800feea:	6978      	ldr	r0, [r7, #20]
 800feec:	f7ff ff74 	bl	800fdd8 <xQueueGenericCreate>
 800fef0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fef2:	68f8      	ldr	r0, [r7, #12]
 800fef4:	f7ff ffd3 	bl	800fe9e <prvInitialiseMutex>

		return xNewQueue;
 800fef8:	68fb      	ldr	r3, [r7, #12]
	}
 800fefa:	4618      	mov	r0, r3
 800fefc:	3718      	adds	r7, #24
 800fefe:	46bd      	mov	sp, r7
 800ff00:	bd80      	pop	{r7, pc}

0800ff02 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800ff02:	b580      	push	{r7, lr}
 800ff04:	b088      	sub	sp, #32
 800ff06:	af02      	add	r7, sp, #8
 800ff08:	4603      	mov	r3, r0
 800ff0a:	6039      	str	r1, [r7, #0]
 800ff0c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	617b      	str	r3, [r7, #20]
 800ff12:	2300      	movs	r3, #0
 800ff14:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800ff16:	79fb      	ldrb	r3, [r7, #7]
 800ff18:	9300      	str	r3, [sp, #0]
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	6939      	ldr	r1, [r7, #16]
 800ff20:	6978      	ldr	r0, [r7, #20]
 800ff22:	f7ff fee1 	bl	800fce8 <xQueueGenericCreateStatic>
 800ff26:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ff28:	68f8      	ldr	r0, [r7, #12]
 800ff2a:	f7ff ffb8 	bl	800fe9e <prvInitialiseMutex>

		return xNewQueue;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
	}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3718      	adds	r7, #24
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b08a      	sub	sp, #40	; 0x28
 800ff3c:	af02      	add	r7, sp, #8
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d10a      	bne.n	800ff60 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800ff4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff4e:	f383 8811 	msr	BASEPRI, r3
 800ff52:	f3bf 8f6f 	isb	sy
 800ff56:	f3bf 8f4f 	dsb	sy
 800ff5a:	61bb      	str	r3, [r7, #24]
}
 800ff5c:	bf00      	nop
 800ff5e:	e7fe      	b.n	800ff5e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ff60:	68ba      	ldr	r2, [r7, #8]
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	429a      	cmp	r2, r3
 800ff66:	d90a      	bls.n	800ff7e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800ff68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6c:	f383 8811 	msr	BASEPRI, r3
 800ff70:	f3bf 8f6f 	isb	sy
 800ff74:	f3bf 8f4f 	dsb	sy
 800ff78:	617b      	str	r3, [r7, #20]
}
 800ff7a:	bf00      	nop
 800ff7c:	e7fe      	b.n	800ff7c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ff7e:	2302      	movs	r3, #2
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2200      	movs	r2, #0
 800ff86:	2100      	movs	r1, #0
 800ff88:	68f8      	ldr	r0, [r7, #12]
 800ff8a:	f7ff fead 	bl	800fce8 <xQueueGenericCreateStatic>
 800ff8e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ff90:	69fb      	ldr	r3, [r7, #28]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d002      	beq.n	800ff9c <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	68ba      	ldr	r2, [r7, #8]
 800ff9a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ff9c:	69fb      	ldr	r3, [r7, #28]
	}
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	3720      	adds	r7, #32
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}

0800ffa6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ffa6:	b580      	push	{r7, lr}
 800ffa8:	b086      	sub	sp, #24
 800ffaa:	af00      	add	r7, sp, #0
 800ffac:	6078      	str	r0, [r7, #4]
 800ffae:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d10a      	bne.n	800ffcc <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800ffb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffba:	f383 8811 	msr	BASEPRI, r3
 800ffbe:	f3bf 8f6f 	isb	sy
 800ffc2:	f3bf 8f4f 	dsb	sy
 800ffc6:	613b      	str	r3, [r7, #16]
}
 800ffc8:	bf00      	nop
 800ffca:	e7fe      	b.n	800ffca <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ffcc:	683a      	ldr	r2, [r7, #0]
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	429a      	cmp	r2, r3
 800ffd2:	d90a      	bls.n	800ffea <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800ffd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ffd8:	f383 8811 	msr	BASEPRI, r3
 800ffdc:	f3bf 8f6f 	isb	sy
 800ffe0:	f3bf 8f4f 	dsb	sy
 800ffe4:	60fb      	str	r3, [r7, #12]
}
 800ffe6:	bf00      	nop
 800ffe8:	e7fe      	b.n	800ffe8 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ffea:	2202      	movs	r2, #2
 800ffec:	2100      	movs	r1, #0
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f7ff fef2 	bl	800fdd8 <xQueueGenericCreate>
 800fff4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d002      	beq.n	8010002 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800fffc:	697b      	ldr	r3, [r7, #20]
 800fffe:	683a      	ldr	r2, [r7, #0]
 8010000:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8010002:	697b      	ldr	r3, [r7, #20]
	}
 8010004:	4618      	mov	r0, r3
 8010006:	3718      	adds	r7, #24
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b08e      	sub	sp, #56	; 0x38
 8010010:	af00      	add	r7, sp, #0
 8010012:	60f8      	str	r0, [r7, #12]
 8010014:	60b9      	str	r1, [r7, #8]
 8010016:	607a      	str	r2, [r7, #4]
 8010018:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801001a:	2300      	movs	r3, #0
 801001c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010024:	2b00      	cmp	r3, #0
 8010026:	d10a      	bne.n	801003e <xQueueGenericSend+0x32>
	__asm volatile
 8010028:	f04f 0350 	mov.w	r3, #80	; 0x50
 801002c:	f383 8811 	msr	BASEPRI, r3
 8010030:	f3bf 8f6f 	isb	sy
 8010034:	f3bf 8f4f 	dsb	sy
 8010038:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801003a:	bf00      	nop
 801003c:	e7fe      	b.n	801003c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d103      	bne.n	801004c <xQueueGenericSend+0x40>
 8010044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010048:	2b00      	cmp	r3, #0
 801004a:	d101      	bne.n	8010050 <xQueueGenericSend+0x44>
 801004c:	2301      	movs	r3, #1
 801004e:	e000      	b.n	8010052 <xQueueGenericSend+0x46>
 8010050:	2300      	movs	r3, #0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d10a      	bne.n	801006c <xQueueGenericSend+0x60>
	__asm volatile
 8010056:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005a:	f383 8811 	msr	BASEPRI, r3
 801005e:	f3bf 8f6f 	isb	sy
 8010062:	f3bf 8f4f 	dsb	sy
 8010066:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010068:	bf00      	nop
 801006a:	e7fe      	b.n	801006a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	2b02      	cmp	r3, #2
 8010070:	d103      	bne.n	801007a <xQueueGenericSend+0x6e>
 8010072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010076:	2b01      	cmp	r3, #1
 8010078:	d101      	bne.n	801007e <xQueueGenericSend+0x72>
 801007a:	2301      	movs	r3, #1
 801007c:	e000      	b.n	8010080 <xQueueGenericSend+0x74>
 801007e:	2300      	movs	r3, #0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d10a      	bne.n	801009a <xQueueGenericSend+0x8e>
	__asm volatile
 8010084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010088:	f383 8811 	msr	BASEPRI, r3
 801008c:	f3bf 8f6f 	isb	sy
 8010090:	f3bf 8f4f 	dsb	sy
 8010094:	623b      	str	r3, [r7, #32]
}
 8010096:	bf00      	nop
 8010098:	e7fe      	b.n	8010098 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801009a:	f001 fc63 	bl	8011964 <xTaskGetSchedulerState>
 801009e:	4603      	mov	r3, r0
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d102      	bne.n	80100aa <xQueueGenericSend+0x9e>
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d101      	bne.n	80100ae <xQueueGenericSend+0xa2>
 80100aa:	2301      	movs	r3, #1
 80100ac:	e000      	b.n	80100b0 <xQueueGenericSend+0xa4>
 80100ae:	2300      	movs	r3, #0
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d10a      	bne.n	80100ca <xQueueGenericSend+0xbe>
	__asm volatile
 80100b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100b8:	f383 8811 	msr	BASEPRI, r3
 80100bc:	f3bf 8f6f 	isb	sy
 80100c0:	f3bf 8f4f 	dsb	sy
 80100c4:	61fb      	str	r3, [r7, #28]
}
 80100c6:	bf00      	nop
 80100c8:	e7fe      	b.n	80100c8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100ca:	f002 faa3 	bl	8012614 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80100ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d302      	bcc.n	80100e0 <xQueueGenericSend+0xd4>
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	2b02      	cmp	r3, #2
 80100de:	d129      	bne.n	8010134 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80100e0:	683a      	ldr	r2, [r7, #0]
 80100e2:	68b9      	ldr	r1, [r7, #8]
 80100e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100e6:	f000 fc5c 	bl	80109a2 <prvCopyDataToQueue>
 80100ea:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d010      	beq.n	8010116 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100f6:	3324      	adds	r3, #36	; 0x24
 80100f8:	4618      	mov	r0, r3
 80100fa:	f001 fa71 	bl	80115e0 <xTaskRemoveFromEventList>
 80100fe:	4603      	mov	r3, r0
 8010100:	2b00      	cmp	r3, #0
 8010102:	d013      	beq.n	801012c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010104:	4b3f      	ldr	r3, [pc, #252]	; (8010204 <xQueueGenericSend+0x1f8>)
 8010106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801010a:	601a      	str	r2, [r3, #0]
 801010c:	f3bf 8f4f 	dsb	sy
 8010110:	f3bf 8f6f 	isb	sy
 8010114:	e00a      	b.n	801012c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010118:	2b00      	cmp	r3, #0
 801011a:	d007      	beq.n	801012c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801011c:	4b39      	ldr	r3, [pc, #228]	; (8010204 <xQueueGenericSend+0x1f8>)
 801011e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010122:	601a      	str	r2, [r3, #0]
 8010124:	f3bf 8f4f 	dsb	sy
 8010128:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801012c:	f002 faa2 	bl	8012674 <vPortExitCritical>
				return pdPASS;
 8010130:	2301      	movs	r3, #1
 8010132:	e063      	b.n	80101fc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d103      	bne.n	8010142 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801013a:	f002 fa9b 	bl	8012674 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801013e:	2300      	movs	r3, #0
 8010140:	e05c      	b.n	80101fc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010144:	2b00      	cmp	r3, #0
 8010146:	d106      	bne.n	8010156 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010148:	f107 0314 	add.w	r3, r7, #20
 801014c:	4618      	mov	r0, r3
 801014e:	f001 faab 	bl	80116a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010152:	2301      	movs	r3, #1
 8010154:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010156:	f002 fa8d 	bl	8012674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801015a:	f001 f817 	bl	801118c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801015e:	f002 fa59 	bl	8012614 <vPortEnterCritical>
 8010162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010164:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010168:	b25b      	sxtb	r3, r3
 801016a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801016e:	d103      	bne.n	8010178 <xQueueGenericSend+0x16c>
 8010170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010172:	2200      	movs	r2, #0
 8010174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801017e:	b25b      	sxtb	r3, r3
 8010180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010184:	d103      	bne.n	801018e <xQueueGenericSend+0x182>
 8010186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010188:	2200      	movs	r2, #0
 801018a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801018e:	f002 fa71 	bl	8012674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010192:	1d3a      	adds	r2, r7, #4
 8010194:	f107 0314 	add.w	r3, r7, #20
 8010198:	4611      	mov	r1, r2
 801019a:	4618      	mov	r0, r3
 801019c:	f001 fa9a 	bl	80116d4 <xTaskCheckForTimeOut>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d124      	bne.n	80101f0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80101a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101a8:	f000 fcf3 	bl	8010b92 <prvIsQueueFull>
 80101ac:	4603      	mov	r3, r0
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d018      	beq.n	80101e4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80101b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b4:	3310      	adds	r3, #16
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	4611      	mov	r1, r2
 80101ba:	4618      	mov	r0, r3
 80101bc:	f001 f9c0 	bl	8011540 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80101c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101c2:	f000 fc7e 	bl	8010ac2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80101c6:	f000 ffef 	bl	80111a8 <xTaskResumeAll>
 80101ca:	4603      	mov	r3, r0
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	f47f af7c 	bne.w	80100ca <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80101d2:	4b0c      	ldr	r3, [pc, #48]	; (8010204 <xQueueGenericSend+0x1f8>)
 80101d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80101d8:	601a      	str	r2, [r3, #0]
 80101da:	f3bf 8f4f 	dsb	sy
 80101de:	f3bf 8f6f 	isb	sy
 80101e2:	e772      	b.n	80100ca <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80101e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101e6:	f000 fc6c 	bl	8010ac2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101ea:	f000 ffdd 	bl	80111a8 <xTaskResumeAll>
 80101ee:	e76c      	b.n	80100ca <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80101f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101f2:	f000 fc66 	bl	8010ac2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101f6:	f000 ffd7 	bl	80111a8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80101fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3738      	adds	r7, #56	; 0x38
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	e000ed04 	.word	0xe000ed04

08010208 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b08e      	sub	sp, #56	; 0x38
 801020c:	af00      	add	r7, sp, #0
 801020e:	60f8      	str	r0, [r7, #12]
 8010210:	60b9      	str	r1, [r7, #8]
 8010212:	607a      	str	r2, [r7, #4]
 8010214:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801021a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801021c:	2b00      	cmp	r3, #0
 801021e:	d10a      	bne.n	8010236 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8010220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010224:	f383 8811 	msr	BASEPRI, r3
 8010228:	f3bf 8f6f 	isb	sy
 801022c:	f3bf 8f4f 	dsb	sy
 8010230:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010232:	bf00      	nop
 8010234:	e7fe      	b.n	8010234 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d103      	bne.n	8010244 <xQueueGenericSendFromISR+0x3c>
 801023c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801023e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010240:	2b00      	cmp	r3, #0
 8010242:	d101      	bne.n	8010248 <xQueueGenericSendFromISR+0x40>
 8010244:	2301      	movs	r3, #1
 8010246:	e000      	b.n	801024a <xQueueGenericSendFromISR+0x42>
 8010248:	2300      	movs	r3, #0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d10a      	bne.n	8010264 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801024e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010252:	f383 8811 	msr	BASEPRI, r3
 8010256:	f3bf 8f6f 	isb	sy
 801025a:	f3bf 8f4f 	dsb	sy
 801025e:	623b      	str	r3, [r7, #32]
}
 8010260:	bf00      	nop
 8010262:	e7fe      	b.n	8010262 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010264:	683b      	ldr	r3, [r7, #0]
 8010266:	2b02      	cmp	r3, #2
 8010268:	d103      	bne.n	8010272 <xQueueGenericSendFromISR+0x6a>
 801026a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801026e:	2b01      	cmp	r3, #1
 8010270:	d101      	bne.n	8010276 <xQueueGenericSendFromISR+0x6e>
 8010272:	2301      	movs	r3, #1
 8010274:	e000      	b.n	8010278 <xQueueGenericSendFromISR+0x70>
 8010276:	2300      	movs	r3, #0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d10a      	bne.n	8010292 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801027c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010280:	f383 8811 	msr	BASEPRI, r3
 8010284:	f3bf 8f6f 	isb	sy
 8010288:	f3bf 8f4f 	dsb	sy
 801028c:	61fb      	str	r3, [r7, #28]
}
 801028e:	bf00      	nop
 8010290:	e7fe      	b.n	8010290 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010292:	f002 faa1 	bl	80127d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8010296:	f3ef 8211 	mrs	r2, BASEPRI
 801029a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801029e:	f383 8811 	msr	BASEPRI, r3
 80102a2:	f3bf 8f6f 	isb	sy
 80102a6:	f3bf 8f4f 	dsb	sy
 80102aa:	61ba      	str	r2, [r7, #24]
 80102ac:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80102ae:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80102b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80102b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80102b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d302      	bcc.n	80102c4 <xQueueGenericSendFromISR+0xbc>
 80102be:	683b      	ldr	r3, [r7, #0]
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d12c      	bne.n	801031e <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80102c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80102ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80102ce:	683a      	ldr	r2, [r7, #0]
 80102d0:	68b9      	ldr	r1, [r7, #8]
 80102d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102d4:	f000 fb65 	bl	80109a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80102d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80102dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102e0:	d112      	bne.n	8010308 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d016      	beq.n	8010318 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102ec:	3324      	adds	r3, #36	; 0x24
 80102ee:	4618      	mov	r0, r3
 80102f0:	f001 f976 	bl	80115e0 <xTaskRemoveFromEventList>
 80102f4:	4603      	mov	r3, r0
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d00e      	beq.n	8010318 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d00b      	beq.n	8010318 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	2201      	movs	r2, #1
 8010304:	601a      	str	r2, [r3, #0]
 8010306:	e007      	b.n	8010318 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010308:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801030c:	3301      	adds	r3, #1
 801030e:	b2db      	uxtb	r3, r3
 8010310:	b25a      	sxtb	r2, r3
 8010312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010318:	2301      	movs	r3, #1
 801031a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801031c:	e001      	b.n	8010322 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801031e:	2300      	movs	r3, #0
 8010320:	637b      	str	r3, [r7, #52]	; 0x34
 8010322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010324:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010326:	693b      	ldr	r3, [r7, #16]
 8010328:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801032c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801032e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010330:	4618      	mov	r0, r3
 8010332:	3738      	adds	r7, #56	; 0x38
 8010334:	46bd      	mov	sp, r7
 8010336:	bd80      	pop	{r7, pc}

08010338 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010338:	b580      	push	{r7, lr}
 801033a:	b08e      	sub	sp, #56	; 0x38
 801033c:	af00      	add	r7, sp, #0
 801033e:	6078      	str	r0, [r7, #4]
 8010340:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010348:	2b00      	cmp	r3, #0
 801034a:	d10a      	bne.n	8010362 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801034c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010350:	f383 8811 	msr	BASEPRI, r3
 8010354:	f3bf 8f6f 	isb	sy
 8010358:	f3bf 8f4f 	dsb	sy
 801035c:	623b      	str	r3, [r7, #32]
}
 801035e:	bf00      	nop
 8010360:	e7fe      	b.n	8010360 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010366:	2b00      	cmp	r3, #0
 8010368:	d00a      	beq.n	8010380 <xQueueGiveFromISR+0x48>
	__asm volatile
 801036a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801036e:	f383 8811 	msr	BASEPRI, r3
 8010372:	f3bf 8f6f 	isb	sy
 8010376:	f3bf 8f4f 	dsb	sy
 801037a:	61fb      	str	r3, [r7, #28]
}
 801037c:	bf00      	nop
 801037e:	e7fe      	b.n	801037e <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d103      	bne.n	8010390 <xQueueGiveFromISR+0x58>
 8010388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801038a:	689b      	ldr	r3, [r3, #8]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <xQueueGiveFromISR+0x5c>
 8010390:	2301      	movs	r3, #1
 8010392:	e000      	b.n	8010396 <xQueueGiveFromISR+0x5e>
 8010394:	2300      	movs	r3, #0
 8010396:	2b00      	cmp	r3, #0
 8010398:	d10a      	bne.n	80103b0 <xQueueGiveFromISR+0x78>
	__asm volatile
 801039a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801039e:	f383 8811 	msr	BASEPRI, r3
 80103a2:	f3bf 8f6f 	isb	sy
 80103a6:	f3bf 8f4f 	dsb	sy
 80103aa:	61bb      	str	r3, [r7, #24]
}
 80103ac:	bf00      	nop
 80103ae:	e7fe      	b.n	80103ae <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80103b0:	f002 fa12 	bl	80127d8 <vPortValidateInterruptPriority>
	__asm volatile
 80103b4:	f3ef 8211 	mrs	r2, BASEPRI
 80103b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103bc:	f383 8811 	msr	BASEPRI, r3
 80103c0:	f3bf 8f6f 	isb	sy
 80103c4:	f3bf 8f4f 	dsb	sy
 80103c8:	617a      	str	r2, [r7, #20]
 80103ca:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80103cc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80103ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103d4:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80103d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80103dc:	429a      	cmp	r2, r3
 80103de:	d22b      	bcs.n	8010438 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80103e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80103e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80103ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103ec:	1c5a      	adds	r2, r3, #1
 80103ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103f0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80103f2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80103f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103fa:	d112      	bne.n	8010422 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010400:	2b00      	cmp	r3, #0
 8010402:	d016      	beq.n	8010432 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010406:	3324      	adds	r3, #36	; 0x24
 8010408:	4618      	mov	r0, r3
 801040a:	f001 f8e9 	bl	80115e0 <xTaskRemoveFromEventList>
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d00e      	beq.n	8010432 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010414:	683b      	ldr	r3, [r7, #0]
 8010416:	2b00      	cmp	r3, #0
 8010418:	d00b      	beq.n	8010432 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	2201      	movs	r2, #1
 801041e:	601a      	str	r2, [r3, #0]
 8010420:	e007      	b.n	8010432 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010422:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010426:	3301      	adds	r3, #1
 8010428:	b2db      	uxtb	r3, r3
 801042a:	b25a      	sxtb	r2, r3
 801042c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801042e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8010432:	2301      	movs	r3, #1
 8010434:	637b      	str	r3, [r7, #52]	; 0x34
 8010436:	e001      	b.n	801043c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8010438:	2300      	movs	r3, #0
 801043a:	637b      	str	r3, [r7, #52]	; 0x34
 801043c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801043e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	f383 8811 	msr	BASEPRI, r3
}
 8010446:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801044a:	4618      	mov	r0, r3
 801044c:	3738      	adds	r7, #56	; 0x38
 801044e:	46bd      	mov	sp, r7
 8010450:	bd80      	pop	{r7, pc}
	...

08010454 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010454:	b580      	push	{r7, lr}
 8010456:	b08c      	sub	sp, #48	; 0x30
 8010458:	af00      	add	r7, sp, #0
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010460:	2300      	movs	r3, #0
 8010462:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801046a:	2b00      	cmp	r3, #0
 801046c:	d10a      	bne.n	8010484 <xQueueReceive+0x30>
	__asm volatile
 801046e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010472:	f383 8811 	msr	BASEPRI, r3
 8010476:	f3bf 8f6f 	isb	sy
 801047a:	f3bf 8f4f 	dsb	sy
 801047e:	623b      	str	r3, [r7, #32]
}
 8010480:	bf00      	nop
 8010482:	e7fe      	b.n	8010482 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d103      	bne.n	8010492 <xQueueReceive+0x3e>
 801048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801048e:	2b00      	cmp	r3, #0
 8010490:	d101      	bne.n	8010496 <xQueueReceive+0x42>
 8010492:	2301      	movs	r3, #1
 8010494:	e000      	b.n	8010498 <xQueueReceive+0x44>
 8010496:	2300      	movs	r3, #0
 8010498:	2b00      	cmp	r3, #0
 801049a:	d10a      	bne.n	80104b2 <xQueueReceive+0x5e>
	__asm volatile
 801049c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104a0:	f383 8811 	msr	BASEPRI, r3
 80104a4:	f3bf 8f6f 	isb	sy
 80104a8:	f3bf 8f4f 	dsb	sy
 80104ac:	61fb      	str	r3, [r7, #28]
}
 80104ae:	bf00      	nop
 80104b0:	e7fe      	b.n	80104b0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80104b2:	f001 fa57 	bl	8011964 <xTaskGetSchedulerState>
 80104b6:	4603      	mov	r3, r0
 80104b8:	2b00      	cmp	r3, #0
 80104ba:	d102      	bne.n	80104c2 <xQueueReceive+0x6e>
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d101      	bne.n	80104c6 <xQueueReceive+0x72>
 80104c2:	2301      	movs	r3, #1
 80104c4:	e000      	b.n	80104c8 <xQueueReceive+0x74>
 80104c6:	2300      	movs	r3, #0
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d10a      	bne.n	80104e2 <xQueueReceive+0x8e>
	__asm volatile
 80104cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104d0:	f383 8811 	msr	BASEPRI, r3
 80104d4:	f3bf 8f6f 	isb	sy
 80104d8:	f3bf 8f4f 	dsb	sy
 80104dc:	61bb      	str	r3, [r7, #24]
}
 80104de:	bf00      	nop
 80104e0:	e7fe      	b.n	80104e0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80104e2:	f002 f897 	bl	8012614 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d01f      	beq.n	8010532 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80104f2:	68b9      	ldr	r1, [r7, #8]
 80104f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104f6:	f000 fabe 	bl	8010a76 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80104fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104fc:	1e5a      	subs	r2, r3, #1
 80104fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010500:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010504:	691b      	ldr	r3, [r3, #16]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d00f      	beq.n	801052a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801050a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050c:	3310      	adds	r3, #16
 801050e:	4618      	mov	r0, r3
 8010510:	f001 f866 	bl	80115e0 <xTaskRemoveFromEventList>
 8010514:	4603      	mov	r3, r0
 8010516:	2b00      	cmp	r3, #0
 8010518:	d007      	beq.n	801052a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801051a:	4b3d      	ldr	r3, [pc, #244]	; (8010610 <xQueueReceive+0x1bc>)
 801051c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010520:	601a      	str	r2, [r3, #0]
 8010522:	f3bf 8f4f 	dsb	sy
 8010526:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801052a:	f002 f8a3 	bl	8012674 <vPortExitCritical>
				return pdPASS;
 801052e:	2301      	movs	r3, #1
 8010530:	e069      	b.n	8010606 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	2b00      	cmp	r3, #0
 8010536:	d103      	bne.n	8010540 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010538:	f002 f89c 	bl	8012674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801053c:	2300      	movs	r3, #0
 801053e:	e062      	b.n	8010606 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010542:	2b00      	cmp	r3, #0
 8010544:	d106      	bne.n	8010554 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010546:	f107 0310 	add.w	r3, r7, #16
 801054a:	4618      	mov	r0, r3
 801054c:	f001 f8ac 	bl	80116a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010550:	2301      	movs	r3, #1
 8010552:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010554:	f002 f88e 	bl	8012674 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010558:	f000 fe18 	bl	801118c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801055c:	f002 f85a 	bl	8012614 <vPortEnterCritical>
 8010560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010562:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010566:	b25b      	sxtb	r3, r3
 8010568:	f1b3 3fff 	cmp.w	r3, #4294967295
 801056c:	d103      	bne.n	8010576 <xQueueReceive+0x122>
 801056e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010570:	2200      	movs	r2, #0
 8010572:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010578:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801057c:	b25b      	sxtb	r3, r3
 801057e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010582:	d103      	bne.n	801058c <xQueueReceive+0x138>
 8010584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010586:	2200      	movs	r2, #0
 8010588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801058c:	f002 f872 	bl	8012674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010590:	1d3a      	adds	r2, r7, #4
 8010592:	f107 0310 	add.w	r3, r7, #16
 8010596:	4611      	mov	r1, r2
 8010598:	4618      	mov	r0, r3
 801059a:	f001 f89b 	bl	80116d4 <xTaskCheckForTimeOut>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d123      	bne.n	80105ec <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105a6:	f000 fade 	bl	8010b66 <prvIsQueueEmpty>
 80105aa:	4603      	mov	r3, r0
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d017      	beq.n	80105e0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80105b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b2:	3324      	adds	r3, #36	; 0x24
 80105b4:	687a      	ldr	r2, [r7, #4]
 80105b6:	4611      	mov	r1, r2
 80105b8:	4618      	mov	r0, r3
 80105ba:	f000 ffc1 	bl	8011540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80105be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105c0:	f000 fa7f 	bl	8010ac2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80105c4:	f000 fdf0 	bl	80111a8 <xTaskResumeAll>
 80105c8:	4603      	mov	r3, r0
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d189      	bne.n	80104e2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80105ce:	4b10      	ldr	r3, [pc, #64]	; (8010610 <xQueueReceive+0x1bc>)
 80105d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80105d4:	601a      	str	r2, [r3, #0]
 80105d6:	f3bf 8f4f 	dsb	sy
 80105da:	f3bf 8f6f 	isb	sy
 80105de:	e780      	b.n	80104e2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80105e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105e2:	f000 fa6e 	bl	8010ac2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80105e6:	f000 fddf 	bl	80111a8 <xTaskResumeAll>
 80105ea:	e77a      	b.n	80104e2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80105ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105ee:	f000 fa68 	bl	8010ac2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105f2:	f000 fdd9 	bl	80111a8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105f8:	f000 fab5 	bl	8010b66 <prvIsQueueEmpty>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f43f af6f 	beq.w	80104e2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010604:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8010606:	4618      	mov	r0, r3
 8010608:	3730      	adds	r7, #48	; 0x30
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
 801060e:	bf00      	nop
 8010610:	e000ed04 	.word	0xe000ed04

08010614 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b08e      	sub	sp, #56	; 0x38
 8010618:	af00      	add	r7, sp, #0
 801061a:	6078      	str	r0, [r7, #4]
 801061c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801061e:	2300      	movs	r3, #0
 8010620:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8010626:	2300      	movs	r3, #0
 8010628:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062c:	2b00      	cmp	r3, #0
 801062e:	d10a      	bne.n	8010646 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8010630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010634:	f383 8811 	msr	BASEPRI, r3
 8010638:	f3bf 8f6f 	isb	sy
 801063c:	f3bf 8f4f 	dsb	sy
 8010640:	623b      	str	r3, [r7, #32]
}
 8010642:	bf00      	nop
 8010644:	e7fe      	b.n	8010644 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801064a:	2b00      	cmp	r3, #0
 801064c:	d00a      	beq.n	8010664 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801064e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010652:	f383 8811 	msr	BASEPRI, r3
 8010656:	f3bf 8f6f 	isb	sy
 801065a:	f3bf 8f4f 	dsb	sy
 801065e:	61fb      	str	r3, [r7, #28]
}
 8010660:	bf00      	nop
 8010662:	e7fe      	b.n	8010662 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010664:	f001 f97e 	bl	8011964 <xTaskGetSchedulerState>
 8010668:	4603      	mov	r3, r0
 801066a:	2b00      	cmp	r3, #0
 801066c:	d102      	bne.n	8010674 <xQueueSemaphoreTake+0x60>
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d101      	bne.n	8010678 <xQueueSemaphoreTake+0x64>
 8010674:	2301      	movs	r3, #1
 8010676:	e000      	b.n	801067a <xQueueSemaphoreTake+0x66>
 8010678:	2300      	movs	r3, #0
 801067a:	2b00      	cmp	r3, #0
 801067c:	d10a      	bne.n	8010694 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801067e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010682:	f383 8811 	msr	BASEPRI, r3
 8010686:	f3bf 8f6f 	isb	sy
 801068a:	f3bf 8f4f 	dsb	sy
 801068e:	61bb      	str	r3, [r7, #24]
}
 8010690:	bf00      	nop
 8010692:	e7fe      	b.n	8010692 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010694:	f001 ffbe 	bl	8012614 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801069a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801069c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d024      	beq.n	80106ee <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80106a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a6:	1e5a      	subs	r2, r3, #1
 80106a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106aa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ae:	681b      	ldr	r3, [r3, #0]
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d104      	bne.n	80106be <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80106b4:	f001 facc 	bl	8011c50 <pvTaskIncrementMutexHeldCount>
 80106b8:	4602      	mov	r2, r0
 80106ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106bc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c0:	691b      	ldr	r3, [r3, #16]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	d00f      	beq.n	80106e6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106c8:	3310      	adds	r3, #16
 80106ca:	4618      	mov	r0, r3
 80106cc:	f000 ff88 	bl	80115e0 <xTaskRemoveFromEventList>
 80106d0:	4603      	mov	r3, r0
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d007      	beq.n	80106e6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80106d6:	4b54      	ldr	r3, [pc, #336]	; (8010828 <xQueueSemaphoreTake+0x214>)
 80106d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80106dc:	601a      	str	r2, [r3, #0]
 80106de:	f3bf 8f4f 	dsb	sy
 80106e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80106e6:	f001 ffc5 	bl	8012674 <vPortExitCritical>
				return pdPASS;
 80106ea:	2301      	movs	r3, #1
 80106ec:	e097      	b.n	801081e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80106ee:	683b      	ldr	r3, [r7, #0]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d111      	bne.n	8010718 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80106f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d00a      	beq.n	8010710 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80106fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	617b      	str	r3, [r7, #20]
}
 801070c:	bf00      	nop
 801070e:	e7fe      	b.n	801070e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8010710:	f001 ffb0 	bl	8012674 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010714:	2300      	movs	r3, #0
 8010716:	e082      	b.n	801081e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801071a:	2b00      	cmp	r3, #0
 801071c:	d106      	bne.n	801072c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801071e:	f107 030c 	add.w	r3, r7, #12
 8010722:	4618      	mov	r0, r3
 8010724:	f000 ffc0 	bl	80116a8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010728:	2301      	movs	r3, #1
 801072a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801072c:	f001 ffa2 	bl	8012674 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010730:	f000 fd2c 	bl	801118c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010734:	f001 ff6e 	bl	8012614 <vPortEnterCritical>
 8010738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801073a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801073e:	b25b      	sxtb	r3, r3
 8010740:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010744:	d103      	bne.n	801074e <xQueueSemaphoreTake+0x13a>
 8010746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010748:	2200      	movs	r2, #0
 801074a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801074e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010750:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010754:	b25b      	sxtb	r3, r3
 8010756:	f1b3 3fff 	cmp.w	r3, #4294967295
 801075a:	d103      	bne.n	8010764 <xQueueSemaphoreTake+0x150>
 801075c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801075e:	2200      	movs	r2, #0
 8010760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010764:	f001 ff86 	bl	8012674 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010768:	463a      	mov	r2, r7
 801076a:	f107 030c 	add.w	r3, r7, #12
 801076e:	4611      	mov	r1, r2
 8010770:	4618      	mov	r0, r3
 8010772:	f000 ffaf 	bl	80116d4 <xTaskCheckForTimeOut>
 8010776:	4603      	mov	r3, r0
 8010778:	2b00      	cmp	r3, #0
 801077a:	d132      	bne.n	80107e2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801077c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801077e:	f000 f9f2 	bl	8010b66 <prvIsQueueEmpty>
 8010782:	4603      	mov	r3, r0
 8010784:	2b00      	cmp	r3, #0
 8010786:	d026      	beq.n	80107d6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801078a:	681b      	ldr	r3, [r3, #0]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d109      	bne.n	80107a4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8010790:	f001 ff40 	bl	8012614 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010796:	689b      	ldr	r3, [r3, #8]
 8010798:	4618      	mov	r0, r3
 801079a:	f001 f901 	bl	80119a0 <xTaskPriorityInherit>
 801079e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80107a0:	f001 ff68 	bl	8012674 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80107a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a6:	3324      	adds	r3, #36	; 0x24
 80107a8:	683a      	ldr	r2, [r7, #0]
 80107aa:	4611      	mov	r1, r2
 80107ac:	4618      	mov	r0, r3
 80107ae:	f000 fec7 	bl	8011540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80107b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107b4:	f000 f985 	bl	8010ac2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80107b8:	f000 fcf6 	bl	80111a8 <xTaskResumeAll>
 80107bc:	4603      	mov	r3, r0
 80107be:	2b00      	cmp	r3, #0
 80107c0:	f47f af68 	bne.w	8010694 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80107c4:	4b18      	ldr	r3, [pc, #96]	; (8010828 <xQueueSemaphoreTake+0x214>)
 80107c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ca:	601a      	str	r2, [r3, #0]
 80107cc:	f3bf 8f4f 	dsb	sy
 80107d0:	f3bf 8f6f 	isb	sy
 80107d4:	e75e      	b.n	8010694 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80107d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107d8:	f000 f973 	bl	8010ac2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107dc:	f000 fce4 	bl	80111a8 <xTaskResumeAll>
 80107e0:	e758      	b.n	8010694 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80107e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107e4:	f000 f96d 	bl	8010ac2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80107e8:	f000 fcde 	bl	80111a8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80107ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107ee:	f000 f9ba 	bl	8010b66 <prvIsQueueEmpty>
 80107f2:	4603      	mov	r3, r0
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	f43f af4d 	beq.w	8010694 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80107fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d00d      	beq.n	801081c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8010800:	f001 ff08 	bl	8012614 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010804:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010806:	f000 f8b4 	bl	8010972 <prvGetDisinheritPriorityAfterTimeout>
 801080a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801080c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801080e:	689b      	ldr	r3, [r3, #8]
 8010810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010812:	4618      	mov	r0, r3
 8010814:	f001 f99a 	bl	8011b4c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010818:	f001 ff2c 	bl	8012674 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801081c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801081e:	4618      	mov	r0, r3
 8010820:	3738      	adds	r7, #56	; 0x38
 8010822:	46bd      	mov	sp, r7
 8010824:	bd80      	pop	{r7, pc}
 8010826:	bf00      	nop
 8010828:	e000ed04 	.word	0xe000ed04

0801082c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b08e      	sub	sp, #56	; 0x38
 8010830:	af00      	add	r7, sp, #0
 8010832:	60f8      	str	r0, [r7, #12]
 8010834:	60b9      	str	r1, [r7, #8]
 8010836:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801083c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801083e:	2b00      	cmp	r3, #0
 8010840:	d10a      	bne.n	8010858 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8010842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010846:	f383 8811 	msr	BASEPRI, r3
 801084a:	f3bf 8f6f 	isb	sy
 801084e:	f3bf 8f4f 	dsb	sy
 8010852:	623b      	str	r3, [r7, #32]
}
 8010854:	bf00      	nop
 8010856:	e7fe      	b.n	8010856 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010858:	68bb      	ldr	r3, [r7, #8]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d103      	bne.n	8010866 <xQueueReceiveFromISR+0x3a>
 801085e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010862:	2b00      	cmp	r3, #0
 8010864:	d101      	bne.n	801086a <xQueueReceiveFromISR+0x3e>
 8010866:	2301      	movs	r3, #1
 8010868:	e000      	b.n	801086c <xQueueReceiveFromISR+0x40>
 801086a:	2300      	movs	r3, #0
 801086c:	2b00      	cmp	r3, #0
 801086e:	d10a      	bne.n	8010886 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8010870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010874:	f383 8811 	msr	BASEPRI, r3
 8010878:	f3bf 8f6f 	isb	sy
 801087c:	f3bf 8f4f 	dsb	sy
 8010880:	61fb      	str	r3, [r7, #28]
}
 8010882:	bf00      	nop
 8010884:	e7fe      	b.n	8010884 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010886:	f001 ffa7 	bl	80127d8 <vPortValidateInterruptPriority>
	__asm volatile
 801088a:	f3ef 8211 	mrs	r2, BASEPRI
 801088e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010892:	f383 8811 	msr	BASEPRI, r3
 8010896:	f3bf 8f6f 	isb	sy
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	61ba      	str	r2, [r7, #24]
 80108a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80108a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80108a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80108ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d02f      	beq.n	8010912 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80108b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80108b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80108bc:	68b9      	ldr	r1, [r7, #8]
 80108be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108c0:	f000 f8d9 	bl	8010a76 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80108c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108c6:	1e5a      	subs	r2, r3, #1
 80108c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108ca:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80108cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80108d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108d4:	d112      	bne.n	80108fc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d8:	691b      	ldr	r3, [r3, #16]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d016      	beq.n	801090c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e0:	3310      	adds	r3, #16
 80108e2:	4618      	mov	r0, r3
 80108e4:	f000 fe7c 	bl	80115e0 <xTaskRemoveFromEventList>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00e      	beq.n	801090c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00b      	beq.n	801090c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2201      	movs	r2, #1
 80108f8:	601a      	str	r2, [r3, #0]
 80108fa:	e007      	b.n	801090c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80108fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010900:	3301      	adds	r3, #1
 8010902:	b2db      	uxtb	r3, r3
 8010904:	b25a      	sxtb	r2, r3
 8010906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801090c:	2301      	movs	r3, #1
 801090e:	637b      	str	r3, [r7, #52]	; 0x34
 8010910:	e001      	b.n	8010916 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8010912:	2300      	movs	r3, #0
 8010914:	637b      	str	r3, [r7, #52]	; 0x34
 8010916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010918:	613b      	str	r3, [r7, #16]
	__asm volatile
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	f383 8811 	msr	BASEPRI, r3
}
 8010920:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8010924:	4618      	mov	r0, r3
 8010926:	3738      	adds	r7, #56	; 0x38
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d10a      	bne.n	8010954 <vQueueDelete+0x28>
	__asm volatile
 801093e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	60bb      	str	r3, [r7, #8]
}
 8010950:	bf00      	nop
 8010952:	e7fe      	b.n	8010952 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010954:	68f8      	ldr	r0, [r7, #12]
 8010956:	f000 f95f 	bl	8010c18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8010960:	2b00      	cmp	r3, #0
 8010962:	d102      	bne.n	801096a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8010964:	68f8      	ldr	r0, [r7, #12]
 8010966:	f002 f83b 	bl	80129e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801096a:	bf00      	nop
 801096c:	3710      	adds	r7, #16
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}

08010972 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010972:	b480      	push	{r7}
 8010974:	b085      	sub	sp, #20
 8010976:	af00      	add	r7, sp, #0
 8010978:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801097e:	2b00      	cmp	r3, #0
 8010980:	d006      	beq.n	8010990 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801098c:	60fb      	str	r3, [r7, #12]
 801098e:	e001      	b.n	8010994 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010990:	2300      	movs	r3, #0
 8010992:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010994:	68fb      	ldr	r3, [r7, #12]
	}
 8010996:	4618      	mov	r0, r3
 8010998:	3714      	adds	r7, #20
 801099a:	46bd      	mov	sp, r7
 801099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a0:	4770      	bx	lr

080109a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80109a2:	b580      	push	{r7, lr}
 80109a4:	b086      	sub	sp, #24
 80109a6:	af00      	add	r7, sp, #0
 80109a8:	60f8      	str	r0, [r7, #12]
 80109aa:	60b9      	str	r1, [r7, #8]
 80109ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80109ae:	2300      	movs	r3, #0
 80109b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d10d      	bne.n	80109dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80109c0:	68fb      	ldr	r3, [r7, #12]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d14d      	bne.n	8010a64 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	689b      	ldr	r3, [r3, #8]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f001 f84f 	bl	8011a70 <xTaskPriorityDisinherit>
 80109d2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	2200      	movs	r2, #0
 80109d8:	609a      	str	r2, [r3, #8]
 80109da:	e043      	b.n	8010a64 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d119      	bne.n	8010a16 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80109e2:	68fb      	ldr	r3, [r7, #12]
 80109e4:	6858      	ldr	r0, [r3, #4]
 80109e6:	68fb      	ldr	r3, [r7, #12]
 80109e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109ea:	461a      	mov	r2, r3
 80109ec:	68b9      	ldr	r1, [r7, #8]
 80109ee:	f002 fc81 	bl	80132f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	685a      	ldr	r2, [r3, #4]
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80109fa:	441a      	add	r2, r3
 80109fc:	68fb      	ldr	r3, [r7, #12]
 80109fe:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	685a      	ldr	r2, [r3, #4]
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	689b      	ldr	r3, [r3, #8]
 8010a08:	429a      	cmp	r2, r3
 8010a0a:	d32b      	bcc.n	8010a64 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	681a      	ldr	r2, [r3, #0]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	605a      	str	r2, [r3, #4]
 8010a14:	e026      	b.n	8010a64 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	68d8      	ldr	r0, [r3, #12]
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a1e:	461a      	mov	r2, r3
 8010a20:	68b9      	ldr	r1, [r7, #8]
 8010a22:	f002 fc67 	bl	80132f4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	68da      	ldr	r2, [r3, #12]
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a2e:	425b      	negs	r3, r3
 8010a30:	441a      	add	r2, r3
 8010a32:	68fb      	ldr	r3, [r7, #12]
 8010a34:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a36:	68fb      	ldr	r3, [r7, #12]
 8010a38:	68da      	ldr	r2, [r3, #12]
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d207      	bcs.n	8010a52 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	689a      	ldr	r2, [r3, #8]
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a4a:	425b      	negs	r3, r3
 8010a4c:	441a      	add	r2, r3
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	2b02      	cmp	r3, #2
 8010a56:	d105      	bne.n	8010a64 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a58:	693b      	ldr	r3, [r7, #16]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d002      	beq.n	8010a64 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010a5e:	693b      	ldr	r3, [r7, #16]
 8010a60:	3b01      	subs	r3, #1
 8010a62:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a64:	693b      	ldr	r3, [r7, #16]
 8010a66:	1c5a      	adds	r2, r3, #1
 8010a68:	68fb      	ldr	r3, [r7, #12]
 8010a6a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8010a6c:	697b      	ldr	r3, [r7, #20]
}
 8010a6e:	4618      	mov	r0, r3
 8010a70:	3718      	adds	r7, #24
 8010a72:	46bd      	mov	sp, r7
 8010a74:	bd80      	pop	{r7, pc}

08010a76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010a76:	b580      	push	{r7, lr}
 8010a78:	b082      	sub	sp, #8
 8010a7a:	af00      	add	r7, sp, #0
 8010a7c:	6078      	str	r0, [r7, #4]
 8010a7e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d018      	beq.n	8010aba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	68da      	ldr	r2, [r3, #12]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010a90:	441a      	add	r2, r3
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	68da      	ldr	r2, [r3, #12]
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	689b      	ldr	r3, [r3, #8]
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d303      	bcc.n	8010aaa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010aa2:	687b      	ldr	r3, [r7, #4]
 8010aa4:	681a      	ldr	r2, [r3, #0]
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	68d9      	ldr	r1, [r3, #12]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010ab2:	461a      	mov	r2, r3
 8010ab4:	6838      	ldr	r0, [r7, #0]
 8010ab6:	f002 fc1d 	bl	80132f4 <memcpy>
	}
}
 8010aba:	bf00      	nop
 8010abc:	3708      	adds	r7, #8
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}

08010ac2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010ac2:	b580      	push	{r7, lr}
 8010ac4:	b084      	sub	sp, #16
 8010ac6:	af00      	add	r7, sp, #0
 8010ac8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010aca:	f001 fda3 	bl	8012614 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010ad4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ad6:	e011      	b.n	8010afc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ad8:	687b      	ldr	r3, [r7, #4]
 8010ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d012      	beq.n	8010b06 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	3324      	adds	r3, #36	; 0x24
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f000 fd7b 	bl	80115e0 <xTaskRemoveFromEventList>
 8010aea:	4603      	mov	r3, r0
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d001      	beq.n	8010af4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010af0:	f000 fe52 	bl	8011798 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010af4:	7bfb      	ldrb	r3, [r7, #15]
 8010af6:	3b01      	subs	r3, #1
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010afc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	dce9      	bgt.n	8010ad8 <prvUnlockQueue+0x16>
 8010b04:	e000      	b.n	8010b08 <prvUnlockQueue+0x46>
					break;
 8010b06:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	22ff      	movs	r2, #255	; 0xff
 8010b0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8010b10:	f001 fdb0 	bl	8012674 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010b14:	f001 fd7e 	bl	8012614 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010b1e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b20:	e011      	b.n	8010b46 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	691b      	ldr	r3, [r3, #16]
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	d012      	beq.n	8010b50 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	3310      	adds	r3, #16
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f000 fd56 	bl	80115e0 <xTaskRemoveFromEventList>
 8010b34:	4603      	mov	r3, r0
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010b3a:	f000 fe2d 	bl	8011798 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010b3e:	7bbb      	ldrb	r3, [r7, #14]
 8010b40:	3b01      	subs	r3, #1
 8010b42:	b2db      	uxtb	r3, r3
 8010b44:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	dce9      	bgt.n	8010b22 <prvUnlockQueue+0x60>
 8010b4e:	e000      	b.n	8010b52 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010b50:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	22ff      	movs	r2, #255	; 0xff
 8010b56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8010b5a:	f001 fd8b 	bl	8012674 <vPortExitCritical>
}
 8010b5e:	bf00      	nop
 8010b60:	3710      	adds	r7, #16
 8010b62:	46bd      	mov	sp, r7
 8010b64:	bd80      	pop	{r7, pc}

08010b66 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010b66:	b580      	push	{r7, lr}
 8010b68:	b084      	sub	sp, #16
 8010b6a:	af00      	add	r7, sp, #0
 8010b6c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b6e:	f001 fd51 	bl	8012614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d102      	bne.n	8010b80 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	60fb      	str	r3, [r7, #12]
 8010b7e:	e001      	b.n	8010b84 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010b80:	2300      	movs	r3, #0
 8010b82:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b84:	f001 fd76 	bl	8012674 <vPortExitCritical>

	return xReturn;
 8010b88:	68fb      	ldr	r3, [r7, #12]
}
 8010b8a:	4618      	mov	r0, r3
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}

08010b92 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010b92:	b580      	push	{r7, lr}
 8010b94:	b084      	sub	sp, #16
 8010b96:	af00      	add	r7, sp, #0
 8010b98:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b9a:	f001 fd3b 	bl	8012614 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d102      	bne.n	8010bb0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010baa:	2301      	movs	r3, #1
 8010bac:	60fb      	str	r3, [r7, #12]
 8010bae:	e001      	b.n	8010bb4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010bb4:	f001 fd5e 	bl	8012674 <vPortExitCritical>

	return xReturn;
 8010bb8:	68fb      	ldr	r3, [r7, #12]
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	3710      	adds	r7, #16
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bd80      	pop	{r7, pc}
	...

08010bc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b085      	sub	sp, #20
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bce:	2300      	movs	r3, #0
 8010bd0:	60fb      	str	r3, [r7, #12]
 8010bd2:	e014      	b.n	8010bfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010bd4:	4a0f      	ldr	r2, [pc, #60]	; (8010c14 <vQueueAddToRegistry+0x50>)
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d10b      	bne.n	8010bf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010be0:	490c      	ldr	r1, [pc, #48]	; (8010c14 <vQueueAddToRegistry+0x50>)
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	683a      	ldr	r2, [r7, #0]
 8010be6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010bea:	4a0a      	ldr	r2, [pc, #40]	; (8010c14 <vQueueAddToRegistry+0x50>)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	00db      	lsls	r3, r3, #3
 8010bf0:	4413      	add	r3, r2
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010bf6:	e006      	b.n	8010c06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	60fb      	str	r3, [r7, #12]
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2b07      	cmp	r3, #7
 8010c02:	d9e7      	bls.n	8010bd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010c04:	bf00      	nop
 8010c06:	bf00      	nop
 8010c08:	3714      	adds	r7, #20
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop
 8010c14:	20000fb4 	.word	0x20000fb4

08010c18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c20:	2300      	movs	r3, #0
 8010c22:	60fb      	str	r3, [r7, #12]
 8010c24:	e016      	b.n	8010c54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010c26:	4a10      	ldr	r2, [pc, #64]	; (8010c68 <vQueueUnregisterQueue+0x50>)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	00db      	lsls	r3, r3, #3
 8010c2c:	4413      	add	r3, r2
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d10b      	bne.n	8010c4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010c36:	4a0c      	ldr	r2, [pc, #48]	; (8010c68 <vQueueUnregisterQueue+0x50>)
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010c40:	4a09      	ldr	r2, [pc, #36]	; (8010c68 <vQueueUnregisterQueue+0x50>)
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	00db      	lsls	r3, r3, #3
 8010c46:	4413      	add	r3, r2
 8010c48:	2200      	movs	r2, #0
 8010c4a:	605a      	str	r2, [r3, #4]
				break;
 8010c4c:	e006      	b.n	8010c5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	3301      	adds	r3, #1
 8010c52:	60fb      	str	r3, [r7, #12]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2b07      	cmp	r3, #7
 8010c58:	d9e5      	bls.n	8010c26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010c5a:	bf00      	nop
 8010c5c:	bf00      	nop
 8010c5e:	3714      	adds	r7, #20
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr
 8010c68:	20000fb4 	.word	0x20000fb4

08010c6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b086      	sub	sp, #24
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010c7c:	f001 fcca 	bl	8012614 <vPortEnterCritical>
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010c86:	b25b      	sxtb	r3, r3
 8010c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c8c:	d103      	bne.n	8010c96 <vQueueWaitForMessageRestricted+0x2a>
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	2200      	movs	r2, #0
 8010c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010c9c:	b25b      	sxtb	r3, r3
 8010c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ca2:	d103      	bne.n	8010cac <vQueueWaitForMessageRestricted+0x40>
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010cac:	f001 fce2 	bl	8012674 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d106      	bne.n	8010cc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	3324      	adds	r3, #36	; 0x24
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	68b9      	ldr	r1, [r7, #8]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f000 fc61 	bl	8011588 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010cc6:	6978      	ldr	r0, [r7, #20]
 8010cc8:	f7ff fefb 	bl	8010ac2 <prvUnlockQueue>
	}
 8010ccc:	bf00      	nop
 8010cce:	3718      	adds	r7, #24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b08e      	sub	sp, #56	; 0x38
 8010cd8:	af04      	add	r7, sp, #16
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	607a      	str	r2, [r7, #4]
 8010ce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d10a      	bne.n	8010cfe <xTaskCreateStatic+0x2a>
	__asm volatile
 8010ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cec:	f383 8811 	msr	BASEPRI, r3
 8010cf0:	f3bf 8f6f 	isb	sy
 8010cf4:	f3bf 8f4f 	dsb	sy
 8010cf8:	623b      	str	r3, [r7, #32]
}
 8010cfa:	bf00      	nop
 8010cfc:	e7fe      	b.n	8010cfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d10a      	bne.n	8010d1a <xTaskCreateStatic+0x46>
	__asm volatile
 8010d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d08:	f383 8811 	msr	BASEPRI, r3
 8010d0c:	f3bf 8f6f 	isb	sy
 8010d10:	f3bf 8f4f 	dsb	sy
 8010d14:	61fb      	str	r3, [r7, #28]
}
 8010d16:	bf00      	nop
 8010d18:	e7fe      	b.n	8010d18 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010d1a:	23bc      	movs	r3, #188	; 0xbc
 8010d1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	2bbc      	cmp	r3, #188	; 0xbc
 8010d22:	d00a      	beq.n	8010d3a <xTaskCreateStatic+0x66>
	__asm volatile
 8010d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d28:	f383 8811 	msr	BASEPRI, r3
 8010d2c:	f3bf 8f6f 	isb	sy
 8010d30:	f3bf 8f4f 	dsb	sy
 8010d34:	61bb      	str	r3, [r7, #24]
}
 8010d36:	bf00      	nop
 8010d38:	e7fe      	b.n	8010d38 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010d3a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d01e      	beq.n	8010d80 <xTaskCreateStatic+0xac>
 8010d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d01b      	beq.n	8010d80 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d4a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010d50:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d54:	2202      	movs	r2, #2
 8010d56:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010d5a:	2300      	movs	r3, #0
 8010d5c:	9303      	str	r3, [sp, #12]
 8010d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d60:	9302      	str	r3, [sp, #8]
 8010d62:	f107 0314 	add.w	r3, r7, #20
 8010d66:	9301      	str	r3, [sp, #4]
 8010d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d6a:	9300      	str	r3, [sp, #0]
 8010d6c:	683b      	ldr	r3, [r7, #0]
 8010d6e:	687a      	ldr	r2, [r7, #4]
 8010d70:	68b9      	ldr	r1, [r7, #8]
 8010d72:	68f8      	ldr	r0, [r7, #12]
 8010d74:	f000 f850 	bl	8010e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d7a:	f000 f8f3 	bl	8010f64 <prvAddNewTaskToReadyList>
 8010d7e:	e001      	b.n	8010d84 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8010d80:	2300      	movs	r3, #0
 8010d82:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010d84:	697b      	ldr	r3, [r7, #20]
	}
 8010d86:	4618      	mov	r0, r3
 8010d88:	3728      	adds	r7, #40	; 0x28
 8010d8a:	46bd      	mov	sp, r7
 8010d8c:	bd80      	pop	{r7, pc}

08010d8e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d8e:	b580      	push	{r7, lr}
 8010d90:	b08c      	sub	sp, #48	; 0x30
 8010d92:	af04      	add	r7, sp, #16
 8010d94:	60f8      	str	r0, [r7, #12]
 8010d96:	60b9      	str	r1, [r7, #8]
 8010d98:	603b      	str	r3, [r7, #0]
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010d9e:	88fb      	ldrh	r3, [r7, #6]
 8010da0:	009b      	lsls	r3, r3, #2
 8010da2:	4618      	mov	r0, r3
 8010da4:	f001 fd58 	bl	8012858 <pvPortMalloc>
 8010da8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d00e      	beq.n	8010dce <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010db0:	20bc      	movs	r0, #188	; 0xbc
 8010db2:	f001 fd51 	bl	8012858 <pvPortMalloc>
 8010db6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010db8:	69fb      	ldr	r3, [r7, #28]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d003      	beq.n	8010dc6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	697a      	ldr	r2, [r7, #20]
 8010dc2:	631a      	str	r2, [r3, #48]	; 0x30
 8010dc4:	e005      	b.n	8010dd2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010dc6:	6978      	ldr	r0, [r7, #20]
 8010dc8:	f001 fe0a 	bl	80129e0 <vPortFree>
 8010dcc:	e001      	b.n	8010dd2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d017      	beq.n	8010e08 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	2200      	movs	r2, #0
 8010ddc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010de0:	88fa      	ldrh	r2, [r7, #6]
 8010de2:	2300      	movs	r3, #0
 8010de4:	9303      	str	r3, [sp, #12]
 8010de6:	69fb      	ldr	r3, [r7, #28]
 8010de8:	9302      	str	r3, [sp, #8]
 8010dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dec:	9301      	str	r3, [sp, #4]
 8010dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df0:	9300      	str	r3, [sp, #0]
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	68b9      	ldr	r1, [r7, #8]
 8010df6:	68f8      	ldr	r0, [r7, #12]
 8010df8:	f000 f80e 	bl	8010e18 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010dfc:	69f8      	ldr	r0, [r7, #28]
 8010dfe:	f000 f8b1 	bl	8010f64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e02:	2301      	movs	r3, #1
 8010e04:	61bb      	str	r3, [r7, #24]
 8010e06:	e002      	b.n	8010e0e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e08:	f04f 33ff 	mov.w	r3, #4294967295
 8010e0c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e0e:	69bb      	ldr	r3, [r7, #24]
	}
 8010e10:	4618      	mov	r0, r3
 8010e12:	3720      	adds	r7, #32
 8010e14:	46bd      	mov	sp, r7
 8010e16:	bd80      	pop	{r7, pc}

08010e18 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010e18:	b580      	push	{r7, lr}
 8010e1a:	b088      	sub	sp, #32
 8010e1c:	af00      	add	r7, sp, #0
 8010e1e:	60f8      	str	r0, [r7, #12]
 8010e20:	60b9      	str	r1, [r7, #8]
 8010e22:	607a      	str	r2, [r7, #4]
 8010e24:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e28:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	009b      	lsls	r3, r3, #2
 8010e2e:	461a      	mov	r2, r3
 8010e30:	21a5      	movs	r1, #165	; 0xa5
 8010e32:	f002 fa6d 	bl	8013310 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8010e40:	3b01      	subs	r3, #1
 8010e42:	009b      	lsls	r3, r3, #2
 8010e44:	4413      	add	r3, r2
 8010e46:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010e48:	69bb      	ldr	r3, [r7, #24]
 8010e4a:	f023 0307 	bic.w	r3, r3, #7
 8010e4e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010e50:	69bb      	ldr	r3, [r7, #24]
 8010e52:	f003 0307 	and.w	r3, r3, #7
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d00a      	beq.n	8010e70 <prvInitialiseNewTask+0x58>
	__asm volatile
 8010e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e5e:	f383 8811 	msr	BASEPRI, r3
 8010e62:	f3bf 8f6f 	isb	sy
 8010e66:	f3bf 8f4f 	dsb	sy
 8010e6a:	617b      	str	r3, [r7, #20]
}
 8010e6c:	bf00      	nop
 8010e6e:	e7fe      	b.n	8010e6e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010e70:	68bb      	ldr	r3, [r7, #8]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d01f      	beq.n	8010eb6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e76:	2300      	movs	r3, #0
 8010e78:	61fb      	str	r3, [r7, #28]
 8010e7a:	e012      	b.n	8010ea2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010e7c:	68ba      	ldr	r2, [r7, #8]
 8010e7e:	69fb      	ldr	r3, [r7, #28]
 8010e80:	4413      	add	r3, r2
 8010e82:	7819      	ldrb	r1, [r3, #0]
 8010e84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	4413      	add	r3, r2
 8010e8a:	3334      	adds	r3, #52	; 0x34
 8010e8c:	460a      	mov	r2, r1
 8010e8e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010e90:	68ba      	ldr	r2, [r7, #8]
 8010e92:	69fb      	ldr	r3, [r7, #28]
 8010e94:	4413      	add	r3, r2
 8010e96:	781b      	ldrb	r3, [r3, #0]
 8010e98:	2b00      	cmp	r3, #0
 8010e9a:	d006      	beq.n	8010eaa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e9c:	69fb      	ldr	r3, [r7, #28]
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	61fb      	str	r3, [r7, #28]
 8010ea2:	69fb      	ldr	r3, [r7, #28]
 8010ea4:	2b0f      	cmp	r3, #15
 8010ea6:	d9e9      	bls.n	8010e7c <prvInitialiseNewTask+0x64>
 8010ea8:	e000      	b.n	8010eac <prvInitialiseNewTask+0x94>
			{
				break;
 8010eaa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eae:	2200      	movs	r2, #0
 8010eb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010eb4:	e003      	b.n	8010ebe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eb8:	2200      	movs	r2, #0
 8010eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ec0:	2b37      	cmp	r3, #55	; 0x37
 8010ec2:	d901      	bls.n	8010ec8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ec4:	2337      	movs	r3, #55	; 0x37
 8010ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ecc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ed2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010edc:	3304      	adds	r3, #4
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7fe fe06 	bl	800faf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee6:	3318      	adds	r3, #24
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f7fe fe01 	bl	800faf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010ef2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010efc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010efe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f02:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f06:	2200      	movs	r2, #0
 8010f08:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0e:	2200      	movs	r2, #0
 8010f10:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f16:	3354      	adds	r3, #84	; 0x54
 8010f18:	2260      	movs	r2, #96	; 0x60
 8010f1a:	2100      	movs	r1, #0
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f002 f9f7 	bl	8013310 <memset>
 8010f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f24:	4a0c      	ldr	r2, [pc, #48]	; (8010f58 <prvInitialiseNewTask+0x140>)
 8010f26:	659a      	str	r2, [r3, #88]	; 0x58
 8010f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f2a:	4a0c      	ldr	r2, [pc, #48]	; (8010f5c <prvInitialiseNewTask+0x144>)
 8010f2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8010f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f30:	4a0b      	ldr	r2, [pc, #44]	; (8010f60 <prvInitialiseNewTask+0x148>)
 8010f32:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f34:	683a      	ldr	r2, [r7, #0]
 8010f36:	68f9      	ldr	r1, [r7, #12]
 8010f38:	69b8      	ldr	r0, [r7, #24]
 8010f3a:	f001 fa3f 	bl	80123bc <pxPortInitialiseStack>
 8010f3e:	4602      	mov	r2, r0
 8010f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f42:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d002      	beq.n	8010f50 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010f4e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f50:	bf00      	nop
 8010f52:	3720      	adds	r7, #32
 8010f54:	46bd      	mov	sp, r7
 8010f56:	bd80      	pop	{r7, pc}
 8010f58:	08016290 	.word	0x08016290
 8010f5c:	080162b0 	.word	0x080162b0
 8010f60:	08016270 	.word	0x08016270

08010f64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b082      	sub	sp, #8
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010f6c:	f001 fb52 	bl	8012614 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010f70:	4b2d      	ldr	r3, [pc, #180]	; (8011028 <prvAddNewTaskToReadyList+0xc4>)
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	3301      	adds	r3, #1
 8010f76:	4a2c      	ldr	r2, [pc, #176]	; (8011028 <prvAddNewTaskToReadyList+0xc4>)
 8010f78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010f7a:	4b2c      	ldr	r3, [pc, #176]	; (801102c <prvAddNewTaskToReadyList+0xc8>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d109      	bne.n	8010f96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010f82:	4a2a      	ldr	r2, [pc, #168]	; (801102c <prvAddNewTaskToReadyList+0xc8>)
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010f88:	4b27      	ldr	r3, [pc, #156]	; (8011028 <prvAddNewTaskToReadyList+0xc4>)
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	2b01      	cmp	r3, #1
 8010f8e:	d110      	bne.n	8010fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010f90:	f000 fc26 	bl	80117e0 <prvInitialiseTaskLists>
 8010f94:	e00d      	b.n	8010fb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010f96:	4b26      	ldr	r3, [pc, #152]	; (8011030 <prvAddNewTaskToReadyList+0xcc>)
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d109      	bne.n	8010fb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f9e:	4b23      	ldr	r3, [pc, #140]	; (801102c <prvAddNewTaskToReadyList+0xc8>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d802      	bhi.n	8010fb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010fac:	4a1f      	ldr	r2, [pc, #124]	; (801102c <prvAddNewTaskToReadyList+0xc8>)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010fb2:	4b20      	ldr	r3, [pc, #128]	; (8011034 <prvAddNewTaskToReadyList+0xd0>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	3301      	adds	r3, #1
 8010fb8:	4a1e      	ldr	r2, [pc, #120]	; (8011034 <prvAddNewTaskToReadyList+0xd0>)
 8010fba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010fbc:	4b1d      	ldr	r3, [pc, #116]	; (8011034 <prvAddNewTaskToReadyList+0xd0>)
 8010fbe:	681a      	ldr	r2, [r3, #0]
 8010fc0:	687b      	ldr	r3, [r7, #4]
 8010fc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fc8:	4b1b      	ldr	r3, [pc, #108]	; (8011038 <prvAddNewTaskToReadyList+0xd4>)
 8010fca:	681b      	ldr	r3, [r3, #0]
 8010fcc:	429a      	cmp	r2, r3
 8010fce:	d903      	bls.n	8010fd8 <prvAddNewTaskToReadyList+0x74>
 8010fd0:	687b      	ldr	r3, [r7, #4]
 8010fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fd4:	4a18      	ldr	r2, [pc, #96]	; (8011038 <prvAddNewTaskToReadyList+0xd4>)
 8010fd6:	6013      	str	r3, [r2, #0]
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fdc:	4613      	mov	r3, r2
 8010fde:	009b      	lsls	r3, r3, #2
 8010fe0:	4413      	add	r3, r2
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	4a15      	ldr	r2, [pc, #84]	; (801103c <prvAddNewTaskToReadyList+0xd8>)
 8010fe6:	441a      	add	r2, r3
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	3304      	adds	r3, #4
 8010fec:	4619      	mov	r1, r3
 8010fee:	4610      	mov	r0, r2
 8010ff0:	f7fe fd8b 	bl	800fb0a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010ff4:	f001 fb3e 	bl	8012674 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010ff8:	4b0d      	ldr	r3, [pc, #52]	; (8011030 <prvAddNewTaskToReadyList+0xcc>)
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2b00      	cmp	r3, #0
 8010ffe:	d00e      	beq.n	801101e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011000:	4b0a      	ldr	r3, [pc, #40]	; (801102c <prvAddNewTaskToReadyList+0xc8>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011006:	687b      	ldr	r3, [r7, #4]
 8011008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100a:	429a      	cmp	r2, r3
 801100c:	d207      	bcs.n	801101e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801100e:	4b0c      	ldr	r3, [pc, #48]	; (8011040 <prvAddNewTaskToReadyList+0xdc>)
 8011010:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011014:	601a      	str	r2, [r3, #0]
 8011016:	f3bf 8f4f 	dsb	sy
 801101a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801101e:	bf00      	nop
 8011020:	3708      	adds	r7, #8
 8011022:	46bd      	mov	sp, r7
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	200014c8 	.word	0x200014c8
 801102c:	20000ff4 	.word	0x20000ff4
 8011030:	200014d4 	.word	0x200014d4
 8011034:	200014e4 	.word	0x200014e4
 8011038:	200014d0 	.word	0x200014d0
 801103c:	20000ff8 	.word	0x20000ff8
 8011040:	e000ed04 	.word	0xe000ed04

08011044 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011044:	b580      	push	{r7, lr}
 8011046:	b084      	sub	sp, #16
 8011048:	af00      	add	r7, sp, #0
 801104a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801104c:	2300      	movs	r3, #0
 801104e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d017      	beq.n	8011086 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011056:	4b13      	ldr	r3, [pc, #76]	; (80110a4 <vTaskDelay+0x60>)
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	2b00      	cmp	r3, #0
 801105c:	d00a      	beq.n	8011074 <vTaskDelay+0x30>
	__asm volatile
 801105e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011062:	f383 8811 	msr	BASEPRI, r3
 8011066:	f3bf 8f6f 	isb	sy
 801106a:	f3bf 8f4f 	dsb	sy
 801106e:	60bb      	str	r3, [r7, #8]
}
 8011070:	bf00      	nop
 8011072:	e7fe      	b.n	8011072 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8011074:	f000 f88a 	bl	801118c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011078:	2100      	movs	r1, #0
 801107a:	6878      	ldr	r0, [r7, #4]
 801107c:	f000 fdfc 	bl	8011c78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011080:	f000 f892 	bl	80111a8 <xTaskResumeAll>
 8011084:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	2b00      	cmp	r3, #0
 801108a:	d107      	bne.n	801109c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801108c:	4b06      	ldr	r3, [pc, #24]	; (80110a8 <vTaskDelay+0x64>)
 801108e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011092:	601a      	str	r2, [r3, #0]
 8011094:	f3bf 8f4f 	dsb	sy
 8011098:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801109c:	bf00      	nop
 801109e:	3710      	adds	r7, #16
 80110a0:	46bd      	mov	sp, r7
 80110a2:	bd80      	pop	{r7, pc}
 80110a4:	200014f0 	.word	0x200014f0
 80110a8:	e000ed04 	.word	0xe000ed04

080110ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b08a      	sub	sp, #40	; 0x28
 80110b0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80110b2:	2300      	movs	r3, #0
 80110b4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80110b6:	2300      	movs	r3, #0
 80110b8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80110ba:	463a      	mov	r2, r7
 80110bc:	1d39      	adds	r1, r7, #4
 80110be:	f107 0308 	add.w	r3, r7, #8
 80110c2:	4618      	mov	r0, r3
 80110c4:	f7fe fcc0 	bl	800fa48 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80110c8:	6839      	ldr	r1, [r7, #0]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	68ba      	ldr	r2, [r7, #8]
 80110ce:	9202      	str	r2, [sp, #8]
 80110d0:	9301      	str	r3, [sp, #4]
 80110d2:	2300      	movs	r3, #0
 80110d4:	9300      	str	r3, [sp, #0]
 80110d6:	2300      	movs	r3, #0
 80110d8:	460a      	mov	r2, r1
 80110da:	4924      	ldr	r1, [pc, #144]	; (801116c <vTaskStartScheduler+0xc0>)
 80110dc:	4824      	ldr	r0, [pc, #144]	; (8011170 <vTaskStartScheduler+0xc4>)
 80110de:	f7ff fdf9 	bl	8010cd4 <xTaskCreateStatic>
 80110e2:	4603      	mov	r3, r0
 80110e4:	4a23      	ldr	r2, [pc, #140]	; (8011174 <vTaskStartScheduler+0xc8>)
 80110e6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80110e8:	4b22      	ldr	r3, [pc, #136]	; (8011174 <vTaskStartScheduler+0xc8>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d002      	beq.n	80110f6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80110f0:	2301      	movs	r3, #1
 80110f2:	617b      	str	r3, [r7, #20]
 80110f4:	e001      	b.n	80110fa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80110f6:	2300      	movs	r3, #0
 80110f8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80110fa:	697b      	ldr	r3, [r7, #20]
 80110fc:	2b01      	cmp	r3, #1
 80110fe:	d102      	bne.n	8011106 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011100:	f000 fe0e 	bl	8011d20 <xTimerCreateTimerTask>
 8011104:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011106:	697b      	ldr	r3, [r7, #20]
 8011108:	2b01      	cmp	r3, #1
 801110a:	d11b      	bne.n	8011144 <vTaskStartScheduler+0x98>
	__asm volatile
 801110c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011110:	f383 8811 	msr	BASEPRI, r3
 8011114:	f3bf 8f6f 	isb	sy
 8011118:	f3bf 8f4f 	dsb	sy
 801111c:	613b      	str	r3, [r7, #16]
}
 801111e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011120:	4b15      	ldr	r3, [pc, #84]	; (8011178 <vTaskStartScheduler+0xcc>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	3354      	adds	r3, #84	; 0x54
 8011126:	4a15      	ldr	r2, [pc, #84]	; (801117c <vTaskStartScheduler+0xd0>)
 8011128:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801112a:	4b15      	ldr	r3, [pc, #84]	; (8011180 <vTaskStartScheduler+0xd4>)
 801112c:	f04f 32ff 	mov.w	r2, #4294967295
 8011130:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011132:	4b14      	ldr	r3, [pc, #80]	; (8011184 <vTaskStartScheduler+0xd8>)
 8011134:	2201      	movs	r2, #1
 8011136:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011138:	4b13      	ldr	r3, [pc, #76]	; (8011188 <vTaskStartScheduler+0xdc>)
 801113a:	2200      	movs	r2, #0
 801113c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801113e:	f001 f9c7 	bl	80124d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011142:	e00e      	b.n	8011162 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011144:	697b      	ldr	r3, [r7, #20]
 8011146:	f1b3 3fff 	cmp.w	r3, #4294967295
 801114a:	d10a      	bne.n	8011162 <vTaskStartScheduler+0xb6>
	__asm volatile
 801114c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011150:	f383 8811 	msr	BASEPRI, r3
 8011154:	f3bf 8f6f 	isb	sy
 8011158:	f3bf 8f4f 	dsb	sy
 801115c:	60fb      	str	r3, [r7, #12]
}
 801115e:	bf00      	nop
 8011160:	e7fe      	b.n	8011160 <vTaskStartScheduler+0xb4>
}
 8011162:	bf00      	nop
 8011164:	3718      	adds	r7, #24
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	08013684 	.word	0x08013684
 8011170:	080117b1 	.word	0x080117b1
 8011174:	200014ec 	.word	0x200014ec
 8011178:	20000ff4 	.word	0x20000ff4
 801117c:	20000088 	.word	0x20000088
 8011180:	200014e8 	.word	0x200014e8
 8011184:	200014d4 	.word	0x200014d4
 8011188:	200014cc 	.word	0x200014cc

0801118c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801118c:	b480      	push	{r7}
 801118e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011190:	4b04      	ldr	r3, [pc, #16]	; (80111a4 <vTaskSuspendAll+0x18>)
 8011192:	681b      	ldr	r3, [r3, #0]
 8011194:	3301      	adds	r3, #1
 8011196:	4a03      	ldr	r2, [pc, #12]	; (80111a4 <vTaskSuspendAll+0x18>)
 8011198:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 801119a:	bf00      	nop
 801119c:	46bd      	mov	sp, r7
 801119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a2:	4770      	bx	lr
 80111a4:	200014f0 	.word	0x200014f0

080111a8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b084      	sub	sp, #16
 80111ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80111ae:	2300      	movs	r3, #0
 80111b0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80111b2:	2300      	movs	r3, #0
 80111b4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80111b6:	4b42      	ldr	r3, [pc, #264]	; (80112c0 <xTaskResumeAll+0x118>)
 80111b8:	681b      	ldr	r3, [r3, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d10a      	bne.n	80111d4 <xTaskResumeAll+0x2c>
	__asm volatile
 80111be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111c2:	f383 8811 	msr	BASEPRI, r3
 80111c6:	f3bf 8f6f 	isb	sy
 80111ca:	f3bf 8f4f 	dsb	sy
 80111ce:	603b      	str	r3, [r7, #0]
}
 80111d0:	bf00      	nop
 80111d2:	e7fe      	b.n	80111d2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80111d4:	f001 fa1e 	bl	8012614 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80111d8:	4b39      	ldr	r3, [pc, #228]	; (80112c0 <xTaskResumeAll+0x118>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	3b01      	subs	r3, #1
 80111de:	4a38      	ldr	r2, [pc, #224]	; (80112c0 <xTaskResumeAll+0x118>)
 80111e0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80111e2:	4b37      	ldr	r3, [pc, #220]	; (80112c0 <xTaskResumeAll+0x118>)
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d162      	bne.n	80112b0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80111ea:	4b36      	ldr	r3, [pc, #216]	; (80112c4 <xTaskResumeAll+0x11c>)
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d05e      	beq.n	80112b0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111f2:	e02f      	b.n	8011254 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80111f4:	4b34      	ldr	r3, [pc, #208]	; (80112c8 <xTaskResumeAll+0x120>)
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	68db      	ldr	r3, [r3, #12]
 80111fa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	3318      	adds	r3, #24
 8011200:	4618      	mov	r0, r3
 8011202:	f7fe fcdf 	bl	800fbc4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011206:	68fb      	ldr	r3, [r7, #12]
 8011208:	3304      	adds	r3, #4
 801120a:	4618      	mov	r0, r3
 801120c:	f7fe fcda 	bl	800fbc4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011214:	4b2d      	ldr	r3, [pc, #180]	; (80112cc <xTaskResumeAll+0x124>)
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	429a      	cmp	r2, r3
 801121a:	d903      	bls.n	8011224 <xTaskResumeAll+0x7c>
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011220:	4a2a      	ldr	r2, [pc, #168]	; (80112cc <xTaskResumeAll+0x124>)
 8011222:	6013      	str	r3, [r2, #0]
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011228:	4613      	mov	r3, r2
 801122a:	009b      	lsls	r3, r3, #2
 801122c:	4413      	add	r3, r2
 801122e:	009b      	lsls	r3, r3, #2
 8011230:	4a27      	ldr	r2, [pc, #156]	; (80112d0 <xTaskResumeAll+0x128>)
 8011232:	441a      	add	r2, r3
 8011234:	68fb      	ldr	r3, [r7, #12]
 8011236:	3304      	adds	r3, #4
 8011238:	4619      	mov	r1, r3
 801123a:	4610      	mov	r0, r2
 801123c:	f7fe fc65 	bl	800fb0a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011244:	4b23      	ldr	r3, [pc, #140]	; (80112d4 <xTaskResumeAll+0x12c>)
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801124a:	429a      	cmp	r2, r3
 801124c:	d302      	bcc.n	8011254 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801124e:	4b22      	ldr	r3, [pc, #136]	; (80112d8 <xTaskResumeAll+0x130>)
 8011250:	2201      	movs	r2, #1
 8011252:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011254:	4b1c      	ldr	r3, [pc, #112]	; (80112c8 <xTaskResumeAll+0x120>)
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	2b00      	cmp	r3, #0
 801125a:	d1cb      	bne.n	80111f4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801125c:	68fb      	ldr	r3, [r7, #12]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d001      	beq.n	8011266 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8011262:	f000 fb5f 	bl	8011924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8011266:	4b1d      	ldr	r3, [pc, #116]	; (80112dc <xTaskResumeAll+0x134>)
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	2b00      	cmp	r3, #0
 8011270:	d010      	beq.n	8011294 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8011272:	f000 f847 	bl	8011304 <xTaskIncrementTick>
 8011276:	4603      	mov	r3, r0
 8011278:	2b00      	cmp	r3, #0
 801127a:	d002      	beq.n	8011282 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801127c:	4b16      	ldr	r3, [pc, #88]	; (80112d8 <xTaskResumeAll+0x130>)
 801127e:	2201      	movs	r2, #1
 8011280:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	3b01      	subs	r3, #1
 8011286:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	2b00      	cmp	r3, #0
 801128c:	d1f1      	bne.n	8011272 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 801128e:	4b13      	ldr	r3, [pc, #76]	; (80112dc <xTaskResumeAll+0x134>)
 8011290:	2200      	movs	r2, #0
 8011292:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8011294:	4b10      	ldr	r3, [pc, #64]	; (80112d8 <xTaskResumeAll+0x130>)
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d009      	beq.n	80112b0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801129c:	2301      	movs	r3, #1
 801129e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80112a0:	4b0f      	ldr	r3, [pc, #60]	; (80112e0 <xTaskResumeAll+0x138>)
 80112a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80112a6:	601a      	str	r2, [r3, #0]
 80112a8:	f3bf 8f4f 	dsb	sy
 80112ac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80112b0:	f001 f9e0 	bl	8012674 <vPortExitCritical>

	return xAlreadyYielded;
 80112b4:	68bb      	ldr	r3, [r7, #8]
}
 80112b6:	4618      	mov	r0, r3
 80112b8:	3710      	adds	r7, #16
 80112ba:	46bd      	mov	sp, r7
 80112bc:	bd80      	pop	{r7, pc}
 80112be:	bf00      	nop
 80112c0:	200014f0 	.word	0x200014f0
 80112c4:	200014c8 	.word	0x200014c8
 80112c8:	20001488 	.word	0x20001488
 80112cc:	200014d0 	.word	0x200014d0
 80112d0:	20000ff8 	.word	0x20000ff8
 80112d4:	20000ff4 	.word	0x20000ff4
 80112d8:	200014dc 	.word	0x200014dc
 80112dc:	200014d8 	.word	0x200014d8
 80112e0:	e000ed04 	.word	0xe000ed04

080112e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80112e4:	b480      	push	{r7}
 80112e6:	b083      	sub	sp, #12
 80112e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80112ea:	4b05      	ldr	r3, [pc, #20]	; (8011300 <xTaskGetTickCount+0x1c>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80112f0:	687b      	ldr	r3, [r7, #4]
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	370c      	adds	r7, #12
 80112f6:	46bd      	mov	sp, r7
 80112f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fc:	4770      	bx	lr
 80112fe:	bf00      	nop
 8011300:	200014cc 	.word	0x200014cc

08011304 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b086      	sub	sp, #24
 8011308:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801130a:	2300      	movs	r3, #0
 801130c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801130e:	4b4f      	ldr	r3, [pc, #316]	; (801144c <xTaskIncrementTick+0x148>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	f040 8089 	bne.w	801142a <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8011318:	4b4d      	ldr	r3, [pc, #308]	; (8011450 <xTaskIncrementTick+0x14c>)
 801131a:	681b      	ldr	r3, [r3, #0]
 801131c:	3301      	adds	r3, #1
 801131e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011320:	4a4b      	ldr	r2, [pc, #300]	; (8011450 <xTaskIncrementTick+0x14c>)
 8011322:	693b      	ldr	r3, [r7, #16]
 8011324:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d120      	bne.n	801136e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801132c:	4b49      	ldr	r3, [pc, #292]	; (8011454 <xTaskIncrementTick+0x150>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d00a      	beq.n	801134c <xTaskIncrementTick+0x48>
	__asm volatile
 8011336:	f04f 0350 	mov.w	r3, #80	; 0x50
 801133a:	f383 8811 	msr	BASEPRI, r3
 801133e:	f3bf 8f6f 	isb	sy
 8011342:	f3bf 8f4f 	dsb	sy
 8011346:	603b      	str	r3, [r7, #0]
}
 8011348:	bf00      	nop
 801134a:	e7fe      	b.n	801134a <xTaskIncrementTick+0x46>
 801134c:	4b41      	ldr	r3, [pc, #260]	; (8011454 <xTaskIncrementTick+0x150>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	60fb      	str	r3, [r7, #12]
 8011352:	4b41      	ldr	r3, [pc, #260]	; (8011458 <xTaskIncrementTick+0x154>)
 8011354:	681b      	ldr	r3, [r3, #0]
 8011356:	4a3f      	ldr	r2, [pc, #252]	; (8011454 <xTaskIncrementTick+0x150>)
 8011358:	6013      	str	r3, [r2, #0]
 801135a:	4a3f      	ldr	r2, [pc, #252]	; (8011458 <xTaskIncrementTick+0x154>)
 801135c:	68fb      	ldr	r3, [r7, #12]
 801135e:	6013      	str	r3, [r2, #0]
 8011360:	4b3e      	ldr	r3, [pc, #248]	; (801145c <xTaskIncrementTick+0x158>)
 8011362:	681b      	ldr	r3, [r3, #0]
 8011364:	3301      	adds	r3, #1
 8011366:	4a3d      	ldr	r2, [pc, #244]	; (801145c <xTaskIncrementTick+0x158>)
 8011368:	6013      	str	r3, [r2, #0]
 801136a:	f000 fadb 	bl	8011924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801136e:	4b3c      	ldr	r3, [pc, #240]	; (8011460 <xTaskIncrementTick+0x15c>)
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	693a      	ldr	r2, [r7, #16]
 8011374:	429a      	cmp	r2, r3
 8011376:	d349      	bcc.n	801140c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011378:	4b36      	ldr	r3, [pc, #216]	; (8011454 <xTaskIncrementTick+0x150>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d104      	bne.n	801138c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011382:	4b37      	ldr	r3, [pc, #220]	; (8011460 <xTaskIncrementTick+0x15c>)
 8011384:	f04f 32ff 	mov.w	r2, #4294967295
 8011388:	601a      	str	r2, [r3, #0]
					break;
 801138a:	e03f      	b.n	801140c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801138c:	4b31      	ldr	r3, [pc, #196]	; (8011454 <xTaskIncrementTick+0x150>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	68db      	ldr	r3, [r3, #12]
 8011394:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8011396:	68bb      	ldr	r3, [r7, #8]
 8011398:	685b      	ldr	r3, [r3, #4]
 801139a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801139c:	693a      	ldr	r2, [r7, #16]
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d203      	bcs.n	80113ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80113a4:	4a2e      	ldr	r2, [pc, #184]	; (8011460 <xTaskIncrementTick+0x15c>)
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80113aa:	e02f      	b.n	801140c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	3304      	adds	r3, #4
 80113b0:	4618      	mov	r0, r3
 80113b2:	f7fe fc07 	bl	800fbc4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d004      	beq.n	80113c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80113be:	68bb      	ldr	r3, [r7, #8]
 80113c0:	3318      	adds	r3, #24
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7fe fbfe 	bl	800fbc4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80113c8:	68bb      	ldr	r3, [r7, #8]
 80113ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113cc:	4b25      	ldr	r3, [pc, #148]	; (8011464 <xTaskIncrementTick+0x160>)
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	429a      	cmp	r2, r3
 80113d2:	d903      	bls.n	80113dc <xTaskIncrementTick+0xd8>
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113d8:	4a22      	ldr	r2, [pc, #136]	; (8011464 <xTaskIncrementTick+0x160>)
 80113da:	6013      	str	r3, [r2, #0]
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113e0:	4613      	mov	r3, r2
 80113e2:	009b      	lsls	r3, r3, #2
 80113e4:	4413      	add	r3, r2
 80113e6:	009b      	lsls	r3, r3, #2
 80113e8:	4a1f      	ldr	r2, [pc, #124]	; (8011468 <xTaskIncrementTick+0x164>)
 80113ea:	441a      	add	r2, r3
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	3304      	adds	r3, #4
 80113f0:	4619      	mov	r1, r3
 80113f2:	4610      	mov	r0, r2
 80113f4:	f7fe fb89 	bl	800fb0a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80113fc:	4b1b      	ldr	r3, [pc, #108]	; (801146c <xTaskIncrementTick+0x168>)
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011402:	429a      	cmp	r2, r3
 8011404:	d3b8      	bcc.n	8011378 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8011406:	2301      	movs	r3, #1
 8011408:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801140a:	e7b5      	b.n	8011378 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801140c:	4b17      	ldr	r3, [pc, #92]	; (801146c <xTaskIncrementTick+0x168>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011412:	4915      	ldr	r1, [pc, #84]	; (8011468 <xTaskIncrementTick+0x164>)
 8011414:	4613      	mov	r3, r2
 8011416:	009b      	lsls	r3, r3, #2
 8011418:	4413      	add	r3, r2
 801141a:	009b      	lsls	r3, r3, #2
 801141c:	440b      	add	r3, r1
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	2b01      	cmp	r3, #1
 8011422:	d907      	bls.n	8011434 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8011424:	2301      	movs	r3, #1
 8011426:	617b      	str	r3, [r7, #20]
 8011428:	e004      	b.n	8011434 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 801142a:	4b11      	ldr	r3, [pc, #68]	; (8011470 <xTaskIncrementTick+0x16c>)
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	3301      	adds	r3, #1
 8011430:	4a0f      	ldr	r2, [pc, #60]	; (8011470 <xTaskIncrementTick+0x16c>)
 8011432:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8011434:	4b0f      	ldr	r3, [pc, #60]	; (8011474 <xTaskIncrementTick+0x170>)
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d001      	beq.n	8011440 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 801143c:	2301      	movs	r3, #1
 801143e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8011440:	697b      	ldr	r3, [r7, #20]
}
 8011442:	4618      	mov	r0, r3
 8011444:	3718      	adds	r7, #24
 8011446:	46bd      	mov	sp, r7
 8011448:	bd80      	pop	{r7, pc}
 801144a:	bf00      	nop
 801144c:	200014f0 	.word	0x200014f0
 8011450:	200014cc 	.word	0x200014cc
 8011454:	20001480 	.word	0x20001480
 8011458:	20001484 	.word	0x20001484
 801145c:	200014e0 	.word	0x200014e0
 8011460:	200014e8 	.word	0x200014e8
 8011464:	200014d0 	.word	0x200014d0
 8011468:	20000ff8 	.word	0x20000ff8
 801146c:	20000ff4 	.word	0x20000ff4
 8011470:	200014d8 	.word	0x200014d8
 8011474:	200014dc 	.word	0x200014dc

08011478 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011478:	b480      	push	{r7}
 801147a:	b085      	sub	sp, #20
 801147c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801147e:	4b2a      	ldr	r3, [pc, #168]	; (8011528 <vTaskSwitchContext+0xb0>)
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d003      	beq.n	801148e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011486:	4b29      	ldr	r3, [pc, #164]	; (801152c <vTaskSwitchContext+0xb4>)
 8011488:	2201      	movs	r2, #1
 801148a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801148c:	e046      	b.n	801151c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801148e:	4b27      	ldr	r3, [pc, #156]	; (801152c <vTaskSwitchContext+0xb4>)
 8011490:	2200      	movs	r2, #0
 8011492:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011494:	4b26      	ldr	r3, [pc, #152]	; (8011530 <vTaskSwitchContext+0xb8>)
 8011496:	681b      	ldr	r3, [r3, #0]
 8011498:	60fb      	str	r3, [r7, #12]
 801149a:	e010      	b.n	80114be <vTaskSwitchContext+0x46>
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d10a      	bne.n	80114b8 <vTaskSwitchContext+0x40>
	__asm volatile
 80114a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114a6:	f383 8811 	msr	BASEPRI, r3
 80114aa:	f3bf 8f6f 	isb	sy
 80114ae:	f3bf 8f4f 	dsb	sy
 80114b2:	607b      	str	r3, [r7, #4]
}
 80114b4:	bf00      	nop
 80114b6:	e7fe      	b.n	80114b6 <vTaskSwitchContext+0x3e>
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	3b01      	subs	r3, #1
 80114bc:	60fb      	str	r3, [r7, #12]
 80114be:	491d      	ldr	r1, [pc, #116]	; (8011534 <vTaskSwitchContext+0xbc>)
 80114c0:	68fa      	ldr	r2, [r7, #12]
 80114c2:	4613      	mov	r3, r2
 80114c4:	009b      	lsls	r3, r3, #2
 80114c6:	4413      	add	r3, r2
 80114c8:	009b      	lsls	r3, r3, #2
 80114ca:	440b      	add	r3, r1
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d0e4      	beq.n	801149c <vTaskSwitchContext+0x24>
 80114d2:	68fa      	ldr	r2, [r7, #12]
 80114d4:	4613      	mov	r3, r2
 80114d6:	009b      	lsls	r3, r3, #2
 80114d8:	4413      	add	r3, r2
 80114da:	009b      	lsls	r3, r3, #2
 80114dc:	4a15      	ldr	r2, [pc, #84]	; (8011534 <vTaskSwitchContext+0xbc>)
 80114de:	4413      	add	r3, r2
 80114e0:	60bb      	str	r3, [r7, #8]
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	685b      	ldr	r3, [r3, #4]
 80114e6:	685a      	ldr	r2, [r3, #4]
 80114e8:	68bb      	ldr	r3, [r7, #8]
 80114ea:	605a      	str	r2, [r3, #4]
 80114ec:	68bb      	ldr	r3, [r7, #8]
 80114ee:	685a      	ldr	r2, [r3, #4]
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	3308      	adds	r3, #8
 80114f4:	429a      	cmp	r2, r3
 80114f6:	d104      	bne.n	8011502 <vTaskSwitchContext+0x8a>
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	685b      	ldr	r3, [r3, #4]
 80114fc:	685a      	ldr	r2, [r3, #4]
 80114fe:	68bb      	ldr	r3, [r7, #8]
 8011500:	605a      	str	r2, [r3, #4]
 8011502:	68bb      	ldr	r3, [r7, #8]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	68db      	ldr	r3, [r3, #12]
 8011508:	4a0b      	ldr	r2, [pc, #44]	; (8011538 <vTaskSwitchContext+0xc0>)
 801150a:	6013      	str	r3, [r2, #0]
 801150c:	4a08      	ldr	r2, [pc, #32]	; (8011530 <vTaskSwitchContext+0xb8>)
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8011512:	4b09      	ldr	r3, [pc, #36]	; (8011538 <vTaskSwitchContext+0xc0>)
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	3354      	adds	r3, #84	; 0x54
 8011518:	4a08      	ldr	r2, [pc, #32]	; (801153c <vTaskSwitchContext+0xc4>)
 801151a:	6013      	str	r3, [r2, #0]
}
 801151c:	bf00      	nop
 801151e:	3714      	adds	r7, #20
 8011520:	46bd      	mov	sp, r7
 8011522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011526:	4770      	bx	lr
 8011528:	200014f0 	.word	0x200014f0
 801152c:	200014dc 	.word	0x200014dc
 8011530:	200014d0 	.word	0x200014d0
 8011534:	20000ff8 	.word	0x20000ff8
 8011538:	20000ff4 	.word	0x20000ff4
 801153c:	20000088 	.word	0x20000088

08011540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011540:	b580      	push	{r7, lr}
 8011542:	b084      	sub	sp, #16
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
 8011548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d10a      	bne.n	8011566 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8011550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011554:	f383 8811 	msr	BASEPRI, r3
 8011558:	f3bf 8f6f 	isb	sy
 801155c:	f3bf 8f4f 	dsb	sy
 8011560:	60fb      	str	r3, [r7, #12]
}
 8011562:	bf00      	nop
 8011564:	e7fe      	b.n	8011564 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011566:	4b07      	ldr	r3, [pc, #28]	; (8011584 <vTaskPlaceOnEventList+0x44>)
 8011568:	681b      	ldr	r3, [r3, #0]
 801156a:	3318      	adds	r3, #24
 801156c:	4619      	mov	r1, r3
 801156e:	6878      	ldr	r0, [r7, #4]
 8011570:	f7fe faef 	bl	800fb52 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011574:	2101      	movs	r1, #1
 8011576:	6838      	ldr	r0, [r7, #0]
 8011578:	f000 fb7e 	bl	8011c78 <prvAddCurrentTaskToDelayedList>
}
 801157c:	bf00      	nop
 801157e:	3710      	adds	r7, #16
 8011580:	46bd      	mov	sp, r7
 8011582:	bd80      	pop	{r7, pc}
 8011584:	20000ff4 	.word	0x20000ff4

08011588 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8011588:	b580      	push	{r7, lr}
 801158a:	b086      	sub	sp, #24
 801158c:	af00      	add	r7, sp, #0
 801158e:	60f8      	str	r0, [r7, #12]
 8011590:	60b9      	str	r1, [r7, #8]
 8011592:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8011594:	68fb      	ldr	r3, [r7, #12]
 8011596:	2b00      	cmp	r3, #0
 8011598:	d10a      	bne.n	80115b0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801159a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801159e:	f383 8811 	msr	BASEPRI, r3
 80115a2:	f3bf 8f6f 	isb	sy
 80115a6:	f3bf 8f4f 	dsb	sy
 80115aa:	617b      	str	r3, [r7, #20]
}
 80115ac:	bf00      	nop
 80115ae:	e7fe      	b.n	80115ae <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80115b0:	4b0a      	ldr	r3, [pc, #40]	; (80115dc <vTaskPlaceOnEventListRestricted+0x54>)
 80115b2:	681b      	ldr	r3, [r3, #0]
 80115b4:	3318      	adds	r3, #24
 80115b6:	4619      	mov	r1, r3
 80115b8:	68f8      	ldr	r0, [r7, #12]
 80115ba:	f7fe faa6 	bl	800fb0a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	2b00      	cmp	r3, #0
 80115c2:	d002      	beq.n	80115ca <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80115c4:	f04f 33ff 	mov.w	r3, #4294967295
 80115c8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80115ca:	6879      	ldr	r1, [r7, #4]
 80115cc:	68b8      	ldr	r0, [r7, #8]
 80115ce:	f000 fb53 	bl	8011c78 <prvAddCurrentTaskToDelayedList>
	}
 80115d2:	bf00      	nop
 80115d4:	3718      	adds	r7, #24
 80115d6:	46bd      	mov	sp, r7
 80115d8:	bd80      	pop	{r7, pc}
 80115da:	bf00      	nop
 80115dc:	20000ff4 	.word	0x20000ff4

080115e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b086      	sub	sp, #24
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	68db      	ldr	r3, [r3, #12]
 80115ec:	68db      	ldr	r3, [r3, #12]
 80115ee:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80115f0:	693b      	ldr	r3, [r7, #16]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d10a      	bne.n	801160c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80115f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80115fa:	f383 8811 	msr	BASEPRI, r3
 80115fe:	f3bf 8f6f 	isb	sy
 8011602:	f3bf 8f4f 	dsb	sy
 8011606:	60fb      	str	r3, [r7, #12]
}
 8011608:	bf00      	nop
 801160a:	e7fe      	b.n	801160a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	3318      	adds	r3, #24
 8011610:	4618      	mov	r0, r3
 8011612:	f7fe fad7 	bl	800fbc4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011616:	4b1e      	ldr	r3, [pc, #120]	; (8011690 <xTaskRemoveFromEventList+0xb0>)
 8011618:	681b      	ldr	r3, [r3, #0]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d11d      	bne.n	801165a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	3304      	adds	r3, #4
 8011622:	4618      	mov	r0, r3
 8011624:	f7fe face 	bl	800fbc4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011628:	693b      	ldr	r3, [r7, #16]
 801162a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801162c:	4b19      	ldr	r3, [pc, #100]	; (8011694 <xTaskRemoveFromEventList+0xb4>)
 801162e:	681b      	ldr	r3, [r3, #0]
 8011630:	429a      	cmp	r2, r3
 8011632:	d903      	bls.n	801163c <xTaskRemoveFromEventList+0x5c>
 8011634:	693b      	ldr	r3, [r7, #16]
 8011636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011638:	4a16      	ldr	r2, [pc, #88]	; (8011694 <xTaskRemoveFromEventList+0xb4>)
 801163a:	6013      	str	r3, [r2, #0]
 801163c:	693b      	ldr	r3, [r7, #16]
 801163e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011640:	4613      	mov	r3, r2
 8011642:	009b      	lsls	r3, r3, #2
 8011644:	4413      	add	r3, r2
 8011646:	009b      	lsls	r3, r3, #2
 8011648:	4a13      	ldr	r2, [pc, #76]	; (8011698 <xTaskRemoveFromEventList+0xb8>)
 801164a:	441a      	add	r2, r3
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	3304      	adds	r3, #4
 8011650:	4619      	mov	r1, r3
 8011652:	4610      	mov	r0, r2
 8011654:	f7fe fa59 	bl	800fb0a <vListInsertEnd>
 8011658:	e005      	b.n	8011666 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801165a:	693b      	ldr	r3, [r7, #16]
 801165c:	3318      	adds	r3, #24
 801165e:	4619      	mov	r1, r3
 8011660:	480e      	ldr	r0, [pc, #56]	; (801169c <xTaskRemoveFromEventList+0xbc>)
 8011662:	f7fe fa52 	bl	800fb0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8011666:	693b      	ldr	r3, [r7, #16]
 8011668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801166a:	4b0d      	ldr	r3, [pc, #52]	; (80116a0 <xTaskRemoveFromEventList+0xc0>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011670:	429a      	cmp	r2, r3
 8011672:	d905      	bls.n	8011680 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8011674:	2301      	movs	r3, #1
 8011676:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8011678:	4b0a      	ldr	r3, [pc, #40]	; (80116a4 <xTaskRemoveFromEventList+0xc4>)
 801167a:	2201      	movs	r2, #1
 801167c:	601a      	str	r2, [r3, #0]
 801167e:	e001      	b.n	8011684 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8011680:	2300      	movs	r3, #0
 8011682:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8011684:	697b      	ldr	r3, [r7, #20]
}
 8011686:	4618      	mov	r0, r3
 8011688:	3718      	adds	r7, #24
 801168a:	46bd      	mov	sp, r7
 801168c:	bd80      	pop	{r7, pc}
 801168e:	bf00      	nop
 8011690:	200014f0 	.word	0x200014f0
 8011694:	200014d0 	.word	0x200014d0
 8011698:	20000ff8 	.word	0x20000ff8
 801169c:	20001488 	.word	0x20001488
 80116a0:	20000ff4 	.word	0x20000ff4
 80116a4:	200014dc 	.word	0x200014dc

080116a8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80116a8:	b480      	push	{r7}
 80116aa:	b083      	sub	sp, #12
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80116b0:	4b06      	ldr	r3, [pc, #24]	; (80116cc <vTaskInternalSetTimeOutState+0x24>)
 80116b2:	681a      	ldr	r2, [r3, #0]
 80116b4:	687b      	ldr	r3, [r7, #4]
 80116b6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80116b8:	4b05      	ldr	r3, [pc, #20]	; (80116d0 <vTaskInternalSetTimeOutState+0x28>)
 80116ba:	681a      	ldr	r2, [r3, #0]
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	605a      	str	r2, [r3, #4]
}
 80116c0:	bf00      	nop
 80116c2:	370c      	adds	r7, #12
 80116c4:	46bd      	mov	sp, r7
 80116c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ca:	4770      	bx	lr
 80116cc:	200014e0 	.word	0x200014e0
 80116d0:	200014cc 	.word	0x200014cc

080116d4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b088      	sub	sp, #32
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
 80116dc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d10a      	bne.n	80116fa <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80116e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116e8:	f383 8811 	msr	BASEPRI, r3
 80116ec:	f3bf 8f6f 	isb	sy
 80116f0:	f3bf 8f4f 	dsb	sy
 80116f4:	613b      	str	r3, [r7, #16]
}
 80116f6:	bf00      	nop
 80116f8:	e7fe      	b.n	80116f8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d10a      	bne.n	8011716 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8011700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011704:	f383 8811 	msr	BASEPRI, r3
 8011708:	f3bf 8f6f 	isb	sy
 801170c:	f3bf 8f4f 	dsb	sy
 8011710:	60fb      	str	r3, [r7, #12]
}
 8011712:	bf00      	nop
 8011714:	e7fe      	b.n	8011714 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8011716:	f000 ff7d 	bl	8012614 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801171a:	4b1d      	ldr	r3, [pc, #116]	; (8011790 <xTaskCheckForTimeOut+0xbc>)
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	685b      	ldr	r3, [r3, #4]
 8011724:	69ba      	ldr	r2, [r7, #24]
 8011726:	1ad3      	subs	r3, r2, r3
 8011728:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	681b      	ldr	r3, [r3, #0]
 801172e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011732:	d102      	bne.n	801173a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011734:	2300      	movs	r3, #0
 8011736:	61fb      	str	r3, [r7, #28]
 8011738:	e023      	b.n	8011782 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	681a      	ldr	r2, [r3, #0]
 801173e:	4b15      	ldr	r3, [pc, #84]	; (8011794 <xTaskCheckForTimeOut+0xc0>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	429a      	cmp	r2, r3
 8011744:	d007      	beq.n	8011756 <xTaskCheckForTimeOut+0x82>
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	69ba      	ldr	r2, [r7, #24]
 801174c:	429a      	cmp	r2, r3
 801174e:	d302      	bcc.n	8011756 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8011750:	2301      	movs	r3, #1
 8011752:	61fb      	str	r3, [r7, #28]
 8011754:	e015      	b.n	8011782 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8011756:	683b      	ldr	r3, [r7, #0]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	697a      	ldr	r2, [r7, #20]
 801175c:	429a      	cmp	r2, r3
 801175e:	d20b      	bcs.n	8011778 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8011760:	683b      	ldr	r3, [r7, #0]
 8011762:	681a      	ldr	r2, [r3, #0]
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	1ad2      	subs	r2, r2, r3
 8011768:	683b      	ldr	r3, [r7, #0]
 801176a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f7ff ff9b 	bl	80116a8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8011772:	2300      	movs	r3, #0
 8011774:	61fb      	str	r3, [r7, #28]
 8011776:	e004      	b.n	8011782 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8011778:	683b      	ldr	r3, [r7, #0]
 801177a:	2200      	movs	r2, #0
 801177c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801177e:	2301      	movs	r3, #1
 8011780:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8011782:	f000 ff77 	bl	8012674 <vPortExitCritical>

	return xReturn;
 8011786:	69fb      	ldr	r3, [r7, #28]
}
 8011788:	4618      	mov	r0, r3
 801178a:	3720      	adds	r7, #32
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	200014cc 	.word	0x200014cc
 8011794:	200014e0 	.word	0x200014e0

08011798 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011798:	b480      	push	{r7}
 801179a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801179c:	4b03      	ldr	r3, [pc, #12]	; (80117ac <vTaskMissedYield+0x14>)
 801179e:	2201      	movs	r2, #1
 80117a0:	601a      	str	r2, [r3, #0]
}
 80117a2:	bf00      	nop
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr
 80117ac:	200014dc 	.word	0x200014dc

080117b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80117b8:	f000 f852 	bl	8011860 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80117bc:	4b06      	ldr	r3, [pc, #24]	; (80117d8 <prvIdleTask+0x28>)
 80117be:	681b      	ldr	r3, [r3, #0]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d9f9      	bls.n	80117b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80117c4:	4b05      	ldr	r3, [pc, #20]	; (80117dc <prvIdleTask+0x2c>)
 80117c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117ca:	601a      	str	r2, [r3, #0]
 80117cc:	f3bf 8f4f 	dsb	sy
 80117d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80117d4:	e7f0      	b.n	80117b8 <prvIdleTask+0x8>
 80117d6:	bf00      	nop
 80117d8:	20000ff8 	.word	0x20000ff8
 80117dc:	e000ed04 	.word	0xe000ed04

080117e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80117e0:	b580      	push	{r7, lr}
 80117e2:	b082      	sub	sp, #8
 80117e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80117e6:	2300      	movs	r3, #0
 80117e8:	607b      	str	r3, [r7, #4]
 80117ea:	e00c      	b.n	8011806 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80117ec:	687a      	ldr	r2, [r7, #4]
 80117ee:	4613      	mov	r3, r2
 80117f0:	009b      	lsls	r3, r3, #2
 80117f2:	4413      	add	r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	4a12      	ldr	r2, [pc, #72]	; (8011840 <prvInitialiseTaskLists+0x60>)
 80117f8:	4413      	add	r3, r2
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7fe f958 	bl	800fab0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	3301      	adds	r3, #1
 8011804:	607b      	str	r3, [r7, #4]
 8011806:	687b      	ldr	r3, [r7, #4]
 8011808:	2b37      	cmp	r3, #55	; 0x37
 801180a:	d9ef      	bls.n	80117ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801180c:	480d      	ldr	r0, [pc, #52]	; (8011844 <prvInitialiseTaskLists+0x64>)
 801180e:	f7fe f94f 	bl	800fab0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011812:	480d      	ldr	r0, [pc, #52]	; (8011848 <prvInitialiseTaskLists+0x68>)
 8011814:	f7fe f94c 	bl	800fab0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011818:	480c      	ldr	r0, [pc, #48]	; (801184c <prvInitialiseTaskLists+0x6c>)
 801181a:	f7fe f949 	bl	800fab0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801181e:	480c      	ldr	r0, [pc, #48]	; (8011850 <prvInitialiseTaskLists+0x70>)
 8011820:	f7fe f946 	bl	800fab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011824:	480b      	ldr	r0, [pc, #44]	; (8011854 <prvInitialiseTaskLists+0x74>)
 8011826:	f7fe f943 	bl	800fab0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801182a:	4b0b      	ldr	r3, [pc, #44]	; (8011858 <prvInitialiseTaskLists+0x78>)
 801182c:	4a05      	ldr	r2, [pc, #20]	; (8011844 <prvInitialiseTaskLists+0x64>)
 801182e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011830:	4b0a      	ldr	r3, [pc, #40]	; (801185c <prvInitialiseTaskLists+0x7c>)
 8011832:	4a05      	ldr	r2, [pc, #20]	; (8011848 <prvInitialiseTaskLists+0x68>)
 8011834:	601a      	str	r2, [r3, #0]
}
 8011836:	bf00      	nop
 8011838:	3708      	adds	r7, #8
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}
 801183e:	bf00      	nop
 8011840:	20000ff8 	.word	0x20000ff8
 8011844:	20001458 	.word	0x20001458
 8011848:	2000146c 	.word	0x2000146c
 801184c:	20001488 	.word	0x20001488
 8011850:	2000149c 	.word	0x2000149c
 8011854:	200014b4 	.word	0x200014b4
 8011858:	20001480 	.word	0x20001480
 801185c:	20001484 	.word	0x20001484

08011860 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8011860:	b580      	push	{r7, lr}
 8011862:	b082      	sub	sp, #8
 8011864:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8011866:	e019      	b.n	801189c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8011868:	f000 fed4 	bl	8012614 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801186c:	4b10      	ldr	r3, [pc, #64]	; (80118b0 <prvCheckTasksWaitingTermination+0x50>)
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	68db      	ldr	r3, [r3, #12]
 8011872:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	3304      	adds	r3, #4
 8011878:	4618      	mov	r0, r3
 801187a:	f7fe f9a3 	bl	800fbc4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801187e:	4b0d      	ldr	r3, [pc, #52]	; (80118b4 <prvCheckTasksWaitingTermination+0x54>)
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	3b01      	subs	r3, #1
 8011884:	4a0b      	ldr	r2, [pc, #44]	; (80118b4 <prvCheckTasksWaitingTermination+0x54>)
 8011886:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8011888:	4b0b      	ldr	r3, [pc, #44]	; (80118b8 <prvCheckTasksWaitingTermination+0x58>)
 801188a:	681b      	ldr	r3, [r3, #0]
 801188c:	3b01      	subs	r3, #1
 801188e:	4a0a      	ldr	r2, [pc, #40]	; (80118b8 <prvCheckTasksWaitingTermination+0x58>)
 8011890:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011892:	f000 feef 	bl	8012674 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f000 f810 	bl	80118bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801189c:	4b06      	ldr	r3, [pc, #24]	; (80118b8 <prvCheckTasksWaitingTermination+0x58>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d1e1      	bne.n	8011868 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80118a4:	bf00      	nop
 80118a6:	bf00      	nop
 80118a8:	3708      	adds	r7, #8
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	2000149c 	.word	0x2000149c
 80118b4:	200014c8 	.word	0x200014c8
 80118b8:	200014b0 	.word	0x200014b0

080118bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b084      	sub	sp, #16
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	3354      	adds	r3, #84	; 0x54
 80118c8:	4618      	mov	r0, r3
 80118ca:	f001 fe17 	bl	80134fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d108      	bne.n	80118ea <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118dc:	4618      	mov	r0, r3
 80118de:	f001 f87f 	bl	80129e0 <vPortFree>
				vPortFree( pxTCB );
 80118e2:	6878      	ldr	r0, [r7, #4]
 80118e4:	f001 f87c 	bl	80129e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80118e8:	e018      	b.n	801191c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80118f0:	2b01      	cmp	r3, #1
 80118f2:	d103      	bne.n	80118fc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80118f4:	6878      	ldr	r0, [r7, #4]
 80118f6:	f001 f873 	bl	80129e0 <vPortFree>
	}
 80118fa:	e00f      	b.n	801191c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8011902:	2b02      	cmp	r3, #2
 8011904:	d00a      	beq.n	801191c <prvDeleteTCB+0x60>
	__asm volatile
 8011906:	f04f 0350 	mov.w	r3, #80	; 0x50
 801190a:	f383 8811 	msr	BASEPRI, r3
 801190e:	f3bf 8f6f 	isb	sy
 8011912:	f3bf 8f4f 	dsb	sy
 8011916:	60fb      	str	r3, [r7, #12]
}
 8011918:	bf00      	nop
 801191a:	e7fe      	b.n	801191a <prvDeleteTCB+0x5e>
	}
 801191c:	bf00      	nop
 801191e:	3710      	adds	r7, #16
 8011920:	46bd      	mov	sp, r7
 8011922:	bd80      	pop	{r7, pc}

08011924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011924:	b480      	push	{r7}
 8011926:	b083      	sub	sp, #12
 8011928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801192a:	4b0c      	ldr	r3, [pc, #48]	; (801195c <prvResetNextTaskUnblockTime+0x38>)
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	2b00      	cmp	r3, #0
 8011932:	d104      	bne.n	801193e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8011934:	4b0a      	ldr	r3, [pc, #40]	; (8011960 <prvResetNextTaskUnblockTime+0x3c>)
 8011936:	f04f 32ff 	mov.w	r2, #4294967295
 801193a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801193c:	e008      	b.n	8011950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801193e:	4b07      	ldr	r3, [pc, #28]	; (801195c <prvResetNextTaskUnblockTime+0x38>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	68db      	ldr	r3, [r3, #12]
 8011944:	68db      	ldr	r3, [r3, #12]
 8011946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	685b      	ldr	r3, [r3, #4]
 801194c:	4a04      	ldr	r2, [pc, #16]	; (8011960 <prvResetNextTaskUnblockTime+0x3c>)
 801194e:	6013      	str	r3, [r2, #0]
}
 8011950:	bf00      	nop
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr
 801195c:	20001480 	.word	0x20001480
 8011960:	200014e8 	.word	0x200014e8

08011964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8011964:	b480      	push	{r7}
 8011966:	b083      	sub	sp, #12
 8011968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801196a:	4b0b      	ldr	r3, [pc, #44]	; (8011998 <xTaskGetSchedulerState+0x34>)
 801196c:	681b      	ldr	r3, [r3, #0]
 801196e:	2b00      	cmp	r3, #0
 8011970:	d102      	bne.n	8011978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8011972:	2301      	movs	r3, #1
 8011974:	607b      	str	r3, [r7, #4]
 8011976:	e008      	b.n	801198a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011978:	4b08      	ldr	r3, [pc, #32]	; (801199c <xTaskGetSchedulerState+0x38>)
 801197a:	681b      	ldr	r3, [r3, #0]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d102      	bne.n	8011986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8011980:	2302      	movs	r3, #2
 8011982:	607b      	str	r3, [r7, #4]
 8011984:	e001      	b.n	801198a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8011986:	2300      	movs	r3, #0
 8011988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801198a:	687b      	ldr	r3, [r7, #4]
	}
 801198c:	4618      	mov	r0, r3
 801198e:	370c      	adds	r7, #12
 8011990:	46bd      	mov	sp, r7
 8011992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011996:	4770      	bx	lr
 8011998:	200014d4 	.word	0x200014d4
 801199c:	200014f0 	.word	0x200014f0

080119a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80119ac:	2300      	movs	r3, #0
 80119ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d051      	beq.n	8011a5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119ba:	4b2a      	ldr	r3, [pc, #168]	; (8011a64 <xTaskPriorityInherit+0xc4>)
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119c0:	429a      	cmp	r2, r3
 80119c2:	d241      	bcs.n	8011a48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80119c4:	68bb      	ldr	r3, [r7, #8]
 80119c6:	699b      	ldr	r3, [r3, #24]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	db06      	blt.n	80119da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80119cc:	4b25      	ldr	r3, [pc, #148]	; (8011a64 <xTaskPriorityInherit+0xc4>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80119d6:	68bb      	ldr	r3, [r7, #8]
 80119d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	6959      	ldr	r1, [r3, #20]
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80119e2:	4613      	mov	r3, r2
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	4413      	add	r3, r2
 80119e8:	009b      	lsls	r3, r3, #2
 80119ea:	4a1f      	ldr	r2, [pc, #124]	; (8011a68 <xTaskPriorityInherit+0xc8>)
 80119ec:	4413      	add	r3, r2
 80119ee:	4299      	cmp	r1, r3
 80119f0:	d122      	bne.n	8011a38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80119f2:	68bb      	ldr	r3, [r7, #8]
 80119f4:	3304      	adds	r3, #4
 80119f6:	4618      	mov	r0, r3
 80119f8:	f7fe f8e4 	bl	800fbc4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80119fc:	4b19      	ldr	r3, [pc, #100]	; (8011a64 <xTaskPriorityInherit+0xc4>)
 80119fe:	681b      	ldr	r3, [r3, #0]
 8011a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8011a06:	68bb      	ldr	r3, [r7, #8]
 8011a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a0a:	4b18      	ldr	r3, [pc, #96]	; (8011a6c <xTaskPriorityInherit+0xcc>)
 8011a0c:	681b      	ldr	r3, [r3, #0]
 8011a0e:	429a      	cmp	r2, r3
 8011a10:	d903      	bls.n	8011a1a <xTaskPriorityInherit+0x7a>
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a16:	4a15      	ldr	r2, [pc, #84]	; (8011a6c <xTaskPriorityInherit+0xcc>)
 8011a18:	6013      	str	r3, [r2, #0]
 8011a1a:	68bb      	ldr	r3, [r7, #8]
 8011a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a1e:	4613      	mov	r3, r2
 8011a20:	009b      	lsls	r3, r3, #2
 8011a22:	4413      	add	r3, r2
 8011a24:	009b      	lsls	r3, r3, #2
 8011a26:	4a10      	ldr	r2, [pc, #64]	; (8011a68 <xTaskPriorityInherit+0xc8>)
 8011a28:	441a      	add	r2, r3
 8011a2a:	68bb      	ldr	r3, [r7, #8]
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	4619      	mov	r1, r3
 8011a30:	4610      	mov	r0, r2
 8011a32:	f7fe f86a 	bl	800fb0a <vListInsertEnd>
 8011a36:	e004      	b.n	8011a42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011a38:	4b0a      	ldr	r3, [pc, #40]	; (8011a64 <xTaskPriorityInherit+0xc4>)
 8011a3a:	681b      	ldr	r3, [r3, #0]
 8011a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011a3e:	68bb      	ldr	r3, [r7, #8]
 8011a40:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8011a42:	2301      	movs	r3, #1
 8011a44:	60fb      	str	r3, [r7, #12]
 8011a46:	e008      	b.n	8011a5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8011a48:	68bb      	ldr	r3, [r7, #8]
 8011a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011a4c:	4b05      	ldr	r3, [pc, #20]	; (8011a64 <xTaskPriorityInherit+0xc4>)
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a52:	429a      	cmp	r2, r3
 8011a54:	d201      	bcs.n	8011a5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8011a56:	2301      	movs	r3, #1
 8011a58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
	}
 8011a5c:	4618      	mov	r0, r3
 8011a5e:	3710      	adds	r7, #16
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}
 8011a64:	20000ff4 	.word	0x20000ff4
 8011a68:	20000ff8 	.word	0x20000ff8
 8011a6c:	200014d0 	.word	0x200014d0

08011a70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b086      	sub	sp, #24
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011a7c:	2300      	movs	r3, #0
 8011a7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011a80:	687b      	ldr	r3, [r7, #4]
 8011a82:	2b00      	cmp	r3, #0
 8011a84:	d056      	beq.n	8011b34 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8011a86:	4b2e      	ldr	r3, [pc, #184]	; (8011b40 <xTaskPriorityDisinherit+0xd0>)
 8011a88:	681b      	ldr	r3, [r3, #0]
 8011a8a:	693a      	ldr	r2, [r7, #16]
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	d00a      	beq.n	8011aa6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8011a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a94:	f383 8811 	msr	BASEPRI, r3
 8011a98:	f3bf 8f6f 	isb	sy
 8011a9c:	f3bf 8f4f 	dsb	sy
 8011aa0:	60fb      	str	r3, [r7, #12]
}
 8011aa2:	bf00      	nop
 8011aa4:	e7fe      	b.n	8011aa4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011aa6:	693b      	ldr	r3, [r7, #16]
 8011aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d10a      	bne.n	8011ac4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8011aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ab2:	f383 8811 	msr	BASEPRI, r3
 8011ab6:	f3bf 8f6f 	isb	sy
 8011aba:	f3bf 8f4f 	dsb	sy
 8011abe:	60bb      	str	r3, [r7, #8]
}
 8011ac0:	bf00      	nop
 8011ac2:	e7fe      	b.n	8011ac2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8011ac4:	693b      	ldr	r3, [r7, #16]
 8011ac6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ac8:	1e5a      	subs	r2, r3, #1
 8011aca:	693b      	ldr	r3, [r7, #16]
 8011acc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ad2:	693b      	ldr	r3, [r7, #16]
 8011ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011ad6:	429a      	cmp	r2, r3
 8011ad8:	d02c      	beq.n	8011b34 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011ada:	693b      	ldr	r3, [r7, #16]
 8011adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d128      	bne.n	8011b34 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011ae2:	693b      	ldr	r3, [r7, #16]
 8011ae4:	3304      	adds	r3, #4
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fe f86c 	bl	800fbc4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011af4:	693b      	ldr	r3, [r7, #16]
 8011af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011af8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011b00:	693b      	ldr	r3, [r7, #16]
 8011b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b04:	4b0f      	ldr	r3, [pc, #60]	; (8011b44 <xTaskPriorityDisinherit+0xd4>)
 8011b06:	681b      	ldr	r3, [r3, #0]
 8011b08:	429a      	cmp	r2, r3
 8011b0a:	d903      	bls.n	8011b14 <xTaskPriorityDisinherit+0xa4>
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b10:	4a0c      	ldr	r2, [pc, #48]	; (8011b44 <xTaskPriorityDisinherit+0xd4>)
 8011b12:	6013      	str	r3, [r2, #0]
 8011b14:	693b      	ldr	r3, [r7, #16]
 8011b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b18:	4613      	mov	r3, r2
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	4413      	add	r3, r2
 8011b1e:	009b      	lsls	r3, r3, #2
 8011b20:	4a09      	ldr	r2, [pc, #36]	; (8011b48 <xTaskPriorityDisinherit+0xd8>)
 8011b22:	441a      	add	r2, r3
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	3304      	adds	r3, #4
 8011b28:	4619      	mov	r1, r3
 8011b2a:	4610      	mov	r0, r2
 8011b2c:	f7fd ffed 	bl	800fb0a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011b30:	2301      	movs	r3, #1
 8011b32:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011b34:	697b      	ldr	r3, [r7, #20]
	}
 8011b36:	4618      	mov	r0, r3
 8011b38:	3718      	adds	r7, #24
 8011b3a:	46bd      	mov	sp, r7
 8011b3c:	bd80      	pop	{r7, pc}
 8011b3e:	bf00      	nop
 8011b40:	20000ff4 	.word	0x20000ff4
 8011b44:	200014d0 	.word	0x200014d0
 8011b48:	20000ff8 	.word	0x20000ff8

08011b4c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b088      	sub	sp, #32
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d06a      	beq.n	8011c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d10a      	bne.n	8011b82 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8011b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b70:	f383 8811 	msr	BASEPRI, r3
 8011b74:	f3bf 8f6f 	isb	sy
 8011b78:	f3bf 8f4f 	dsb	sy
 8011b7c:	60fb      	str	r3, [r7, #12]
}
 8011b7e:	bf00      	nop
 8011b80:	e7fe      	b.n	8011b80 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011b82:	69bb      	ldr	r3, [r7, #24]
 8011b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b86:	683a      	ldr	r2, [r7, #0]
 8011b88:	429a      	cmp	r2, r3
 8011b8a:	d902      	bls.n	8011b92 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	61fb      	str	r3, [r7, #28]
 8011b90:	e002      	b.n	8011b98 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011b92:	69bb      	ldr	r3, [r7, #24]
 8011b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b96:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b9c:	69fa      	ldr	r2, [r7, #28]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d04b      	beq.n	8011c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011ba2:	69bb      	ldr	r3, [r7, #24]
 8011ba4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ba6:	697a      	ldr	r2, [r7, #20]
 8011ba8:	429a      	cmp	r2, r3
 8011baa:	d146      	bne.n	8011c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011bac:	4b25      	ldr	r3, [pc, #148]	; (8011c44 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	69ba      	ldr	r2, [r7, #24]
 8011bb2:	429a      	cmp	r2, r3
 8011bb4:	d10a      	bne.n	8011bcc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8011bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bba:	f383 8811 	msr	BASEPRI, r3
 8011bbe:	f3bf 8f6f 	isb	sy
 8011bc2:	f3bf 8f4f 	dsb	sy
 8011bc6:	60bb      	str	r3, [r7, #8]
}
 8011bc8:	bf00      	nop
 8011bca:	e7fe      	b.n	8011bca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011bcc:	69bb      	ldr	r3, [r7, #24]
 8011bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bd0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011bd2:	69bb      	ldr	r3, [r7, #24]
 8011bd4:	69fa      	ldr	r2, [r7, #28]
 8011bd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011bd8:	69bb      	ldr	r3, [r7, #24]
 8011bda:	699b      	ldr	r3, [r3, #24]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	db04      	blt.n	8011bea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011be0:	69fb      	ldr	r3, [r7, #28]
 8011be2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8011be6:	69bb      	ldr	r3, [r7, #24]
 8011be8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	6959      	ldr	r1, [r3, #20]
 8011bee:	693a      	ldr	r2, [r7, #16]
 8011bf0:	4613      	mov	r3, r2
 8011bf2:	009b      	lsls	r3, r3, #2
 8011bf4:	4413      	add	r3, r2
 8011bf6:	009b      	lsls	r3, r3, #2
 8011bf8:	4a13      	ldr	r2, [pc, #76]	; (8011c48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011bfa:	4413      	add	r3, r2
 8011bfc:	4299      	cmp	r1, r3
 8011bfe:	d11c      	bne.n	8011c3a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c00:	69bb      	ldr	r3, [r7, #24]
 8011c02:	3304      	adds	r3, #4
 8011c04:	4618      	mov	r0, r3
 8011c06:	f7fd ffdd 	bl	800fbc4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011c0a:	69bb      	ldr	r3, [r7, #24]
 8011c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c0e:	4b0f      	ldr	r3, [pc, #60]	; (8011c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d903      	bls.n	8011c1e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8011c16:	69bb      	ldr	r3, [r7, #24]
 8011c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c1a:	4a0c      	ldr	r2, [pc, #48]	; (8011c4c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011c1c:	6013      	str	r3, [r2, #0]
 8011c1e:	69bb      	ldr	r3, [r7, #24]
 8011c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011c22:	4613      	mov	r3, r2
 8011c24:	009b      	lsls	r3, r3, #2
 8011c26:	4413      	add	r3, r2
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	4a07      	ldr	r2, [pc, #28]	; (8011c48 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011c2c:	441a      	add	r2, r3
 8011c2e:	69bb      	ldr	r3, [r7, #24]
 8011c30:	3304      	adds	r3, #4
 8011c32:	4619      	mov	r1, r3
 8011c34:	4610      	mov	r0, r2
 8011c36:	f7fd ff68 	bl	800fb0a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011c3a:	bf00      	nop
 8011c3c:	3720      	adds	r7, #32
 8011c3e:	46bd      	mov	sp, r7
 8011c40:	bd80      	pop	{r7, pc}
 8011c42:	bf00      	nop
 8011c44:	20000ff4 	.word	0x20000ff4
 8011c48:	20000ff8 	.word	0x20000ff8
 8011c4c:	200014d0 	.word	0x200014d0

08011c50 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011c50:	b480      	push	{r7}
 8011c52:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011c54:	4b07      	ldr	r3, [pc, #28]	; (8011c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d004      	beq.n	8011c66 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011c5c:	4b05      	ldr	r3, [pc, #20]	; (8011c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011c62:	3201      	adds	r2, #1
 8011c64:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8011c66:	4b03      	ldr	r3, [pc, #12]	; (8011c74 <pvTaskIncrementMutexHeldCount+0x24>)
 8011c68:	681b      	ldr	r3, [r3, #0]
	}
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c72:	4770      	bx	lr
 8011c74:	20000ff4 	.word	0x20000ff4

08011c78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011c78:	b580      	push	{r7, lr}
 8011c7a:	b084      	sub	sp, #16
 8011c7c:	af00      	add	r7, sp, #0
 8011c7e:	6078      	str	r0, [r7, #4]
 8011c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011c82:	4b21      	ldr	r3, [pc, #132]	; (8011d08 <prvAddCurrentTaskToDelayedList+0x90>)
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011c88:	4b20      	ldr	r3, [pc, #128]	; (8011d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8011c8a:	681b      	ldr	r3, [r3, #0]
 8011c8c:	3304      	adds	r3, #4
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f7fd ff98 	bl	800fbc4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c9a:	d10a      	bne.n	8011cb2 <prvAddCurrentTaskToDelayedList+0x3a>
 8011c9c:	683b      	ldr	r3, [r7, #0]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d007      	beq.n	8011cb2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011ca2:	4b1a      	ldr	r3, [pc, #104]	; (8011d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	3304      	adds	r3, #4
 8011ca8:	4619      	mov	r1, r3
 8011caa:	4819      	ldr	r0, [pc, #100]	; (8011d10 <prvAddCurrentTaskToDelayedList+0x98>)
 8011cac:	f7fd ff2d 	bl	800fb0a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011cb0:	e026      	b.n	8011d00 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	4413      	add	r3, r2
 8011cb8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011cba:	4b14      	ldr	r3, [pc, #80]	; (8011d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8011cbc:	681b      	ldr	r3, [r3, #0]
 8011cbe:	68ba      	ldr	r2, [r7, #8]
 8011cc0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011cc2:	68ba      	ldr	r2, [r7, #8]
 8011cc4:	68fb      	ldr	r3, [r7, #12]
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d209      	bcs.n	8011cde <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cca:	4b12      	ldr	r3, [pc, #72]	; (8011d14 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	4b0f      	ldr	r3, [pc, #60]	; (8011d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	3304      	adds	r3, #4
 8011cd4:	4619      	mov	r1, r3
 8011cd6:	4610      	mov	r0, r2
 8011cd8:	f7fd ff3b 	bl	800fb52 <vListInsert>
}
 8011cdc:	e010      	b.n	8011d00 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011cde:	4b0e      	ldr	r3, [pc, #56]	; (8011d18 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011ce0:	681a      	ldr	r2, [r3, #0]
 8011ce2:	4b0a      	ldr	r3, [pc, #40]	; (8011d0c <prvAddCurrentTaskToDelayedList+0x94>)
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	3304      	adds	r3, #4
 8011ce8:	4619      	mov	r1, r3
 8011cea:	4610      	mov	r0, r2
 8011cec:	f7fd ff31 	bl	800fb52 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011cf0:	4b0a      	ldr	r3, [pc, #40]	; (8011d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	68ba      	ldr	r2, [r7, #8]
 8011cf6:	429a      	cmp	r2, r3
 8011cf8:	d202      	bcs.n	8011d00 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011cfa:	4a08      	ldr	r2, [pc, #32]	; (8011d1c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	6013      	str	r3, [r2, #0]
}
 8011d00:	bf00      	nop
 8011d02:	3710      	adds	r7, #16
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}
 8011d08:	200014cc 	.word	0x200014cc
 8011d0c:	20000ff4 	.word	0x20000ff4
 8011d10:	200014b4 	.word	0x200014b4
 8011d14:	20001484 	.word	0x20001484
 8011d18:	20001480 	.word	0x20001480
 8011d1c:	200014e8 	.word	0x200014e8

08011d20 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b08a      	sub	sp, #40	; 0x28
 8011d24:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011d26:	2300      	movs	r3, #0
 8011d28:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011d2a:	f000 fb07 	bl	801233c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011d2e:	4b1c      	ldr	r3, [pc, #112]	; (8011da0 <xTimerCreateTimerTask+0x80>)
 8011d30:	681b      	ldr	r3, [r3, #0]
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d021      	beq.n	8011d7a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011d36:	2300      	movs	r3, #0
 8011d38:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011d3e:	1d3a      	adds	r2, r7, #4
 8011d40:	f107 0108 	add.w	r1, r7, #8
 8011d44:	f107 030c 	add.w	r3, r7, #12
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7fd fe97 	bl	800fa7c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011d4e:	6879      	ldr	r1, [r7, #4]
 8011d50:	68bb      	ldr	r3, [r7, #8]
 8011d52:	68fa      	ldr	r2, [r7, #12]
 8011d54:	9202      	str	r2, [sp, #8]
 8011d56:	9301      	str	r3, [sp, #4]
 8011d58:	2302      	movs	r3, #2
 8011d5a:	9300      	str	r3, [sp, #0]
 8011d5c:	2300      	movs	r3, #0
 8011d5e:	460a      	mov	r2, r1
 8011d60:	4910      	ldr	r1, [pc, #64]	; (8011da4 <xTimerCreateTimerTask+0x84>)
 8011d62:	4811      	ldr	r0, [pc, #68]	; (8011da8 <xTimerCreateTimerTask+0x88>)
 8011d64:	f7fe ffb6 	bl	8010cd4 <xTaskCreateStatic>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	4a10      	ldr	r2, [pc, #64]	; (8011dac <xTimerCreateTimerTask+0x8c>)
 8011d6c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011d6e:	4b0f      	ldr	r3, [pc, #60]	; (8011dac <xTimerCreateTimerTask+0x8c>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d001      	beq.n	8011d7a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011d76:	2301      	movs	r3, #1
 8011d78:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011d7a:	697b      	ldr	r3, [r7, #20]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d10a      	bne.n	8011d96 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8011d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d84:	f383 8811 	msr	BASEPRI, r3
 8011d88:	f3bf 8f6f 	isb	sy
 8011d8c:	f3bf 8f4f 	dsb	sy
 8011d90:	613b      	str	r3, [r7, #16]
}
 8011d92:	bf00      	nop
 8011d94:	e7fe      	b.n	8011d94 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011d96:	697b      	ldr	r3, [r7, #20]
}
 8011d98:	4618      	mov	r0, r3
 8011d9a:	3718      	adds	r7, #24
 8011d9c:	46bd      	mov	sp, r7
 8011d9e:	bd80      	pop	{r7, pc}
 8011da0:	20001524 	.word	0x20001524
 8011da4:	0801368c 	.word	0x0801368c
 8011da8:	08011ee5 	.word	0x08011ee5
 8011dac:	20001528 	.word	0x20001528

08011db0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b08a      	sub	sp, #40	; 0x28
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	60f8      	str	r0, [r7, #12]
 8011db8:	60b9      	str	r1, [r7, #8]
 8011dba:	607a      	str	r2, [r7, #4]
 8011dbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d10a      	bne.n	8011dde <xTimerGenericCommand+0x2e>
	__asm volatile
 8011dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dcc:	f383 8811 	msr	BASEPRI, r3
 8011dd0:	f3bf 8f6f 	isb	sy
 8011dd4:	f3bf 8f4f 	dsb	sy
 8011dd8:	623b      	str	r3, [r7, #32]
}
 8011dda:	bf00      	nop
 8011ddc:	e7fe      	b.n	8011ddc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011dde:	4b1a      	ldr	r3, [pc, #104]	; (8011e48 <xTimerGenericCommand+0x98>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d02a      	beq.n	8011e3c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011dee:	68fb      	ldr	r3, [r7, #12]
 8011df0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011df2:	68bb      	ldr	r3, [r7, #8]
 8011df4:	2b05      	cmp	r3, #5
 8011df6:	dc18      	bgt.n	8011e2a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011df8:	f7ff fdb4 	bl	8011964 <xTaskGetSchedulerState>
 8011dfc:	4603      	mov	r3, r0
 8011dfe:	2b02      	cmp	r3, #2
 8011e00:	d109      	bne.n	8011e16 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011e02:	4b11      	ldr	r3, [pc, #68]	; (8011e48 <xTimerGenericCommand+0x98>)
 8011e04:	6818      	ldr	r0, [r3, #0]
 8011e06:	f107 0110 	add.w	r1, r7, #16
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e0e:	f7fe f8fd 	bl	801000c <xQueueGenericSend>
 8011e12:	6278      	str	r0, [r7, #36]	; 0x24
 8011e14:	e012      	b.n	8011e3c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011e16:	4b0c      	ldr	r3, [pc, #48]	; (8011e48 <xTimerGenericCommand+0x98>)
 8011e18:	6818      	ldr	r0, [r3, #0]
 8011e1a:	f107 0110 	add.w	r1, r7, #16
 8011e1e:	2300      	movs	r3, #0
 8011e20:	2200      	movs	r2, #0
 8011e22:	f7fe f8f3 	bl	801000c <xQueueGenericSend>
 8011e26:	6278      	str	r0, [r7, #36]	; 0x24
 8011e28:	e008      	b.n	8011e3c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011e2a:	4b07      	ldr	r3, [pc, #28]	; (8011e48 <xTimerGenericCommand+0x98>)
 8011e2c:	6818      	ldr	r0, [r3, #0]
 8011e2e:	f107 0110 	add.w	r1, r7, #16
 8011e32:	2300      	movs	r3, #0
 8011e34:	683a      	ldr	r2, [r7, #0]
 8011e36:	f7fe f9e7 	bl	8010208 <xQueueGenericSendFromISR>
 8011e3a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	3728      	adds	r7, #40	; 0x28
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	20001524 	.word	0x20001524

08011e4c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b088      	sub	sp, #32
 8011e50:	af02      	add	r7, sp, #8
 8011e52:	6078      	str	r0, [r7, #4]
 8011e54:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011e56:	4b22      	ldr	r3, [pc, #136]	; (8011ee0 <prvProcessExpiredTimer+0x94>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	68db      	ldr	r3, [r3, #12]
 8011e5c:	68db      	ldr	r3, [r3, #12]
 8011e5e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011e60:	697b      	ldr	r3, [r7, #20]
 8011e62:	3304      	adds	r3, #4
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fd fead 	bl	800fbc4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011e6a:	697b      	ldr	r3, [r7, #20]
 8011e6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011e70:	f003 0304 	and.w	r3, r3, #4
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d022      	beq.n	8011ebe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011e78:	697b      	ldr	r3, [r7, #20]
 8011e7a:	699a      	ldr	r2, [r3, #24]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	18d1      	adds	r1, r2, r3
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	683a      	ldr	r2, [r7, #0]
 8011e84:	6978      	ldr	r0, [r7, #20]
 8011e86:	f000 f8d1 	bl	801202c <prvInsertTimerInActiveList>
 8011e8a:	4603      	mov	r3, r0
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d01f      	beq.n	8011ed0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011e90:	2300      	movs	r3, #0
 8011e92:	9300      	str	r3, [sp, #0]
 8011e94:	2300      	movs	r3, #0
 8011e96:	687a      	ldr	r2, [r7, #4]
 8011e98:	2100      	movs	r1, #0
 8011e9a:	6978      	ldr	r0, [r7, #20]
 8011e9c:	f7ff ff88 	bl	8011db0 <xTimerGenericCommand>
 8011ea0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011ea2:	693b      	ldr	r3, [r7, #16]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d113      	bne.n	8011ed0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8011ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eac:	f383 8811 	msr	BASEPRI, r3
 8011eb0:	f3bf 8f6f 	isb	sy
 8011eb4:	f3bf 8f4f 	dsb	sy
 8011eb8:	60fb      	str	r3, [r7, #12]
}
 8011eba:	bf00      	nop
 8011ebc:	e7fe      	b.n	8011ebc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011ebe:	697b      	ldr	r3, [r7, #20]
 8011ec0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8011ec4:	f023 0301 	bic.w	r3, r3, #1
 8011ec8:	b2da      	uxtb	r2, r3
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	6a1b      	ldr	r3, [r3, #32]
 8011ed4:	6978      	ldr	r0, [r7, #20]
 8011ed6:	4798      	blx	r3
}
 8011ed8:	bf00      	nop
 8011eda:	3718      	adds	r7, #24
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	2000151c 	.word	0x2000151c

08011ee4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011eec:	f107 0308 	add.w	r3, r7, #8
 8011ef0:	4618      	mov	r0, r3
 8011ef2:	f000 f857 	bl	8011fa4 <prvGetNextExpireTime>
 8011ef6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011ef8:	68bb      	ldr	r3, [r7, #8]
 8011efa:	4619      	mov	r1, r3
 8011efc:	68f8      	ldr	r0, [r7, #12]
 8011efe:	f000 f803 	bl	8011f08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011f02:	f000 f8d5 	bl	80120b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011f06:	e7f1      	b.n	8011eec <prvTimerTask+0x8>

08011f08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b084      	sub	sp, #16
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]
 8011f10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011f12:	f7ff f93b 	bl	801118c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011f16:	f107 0308 	add.w	r3, r7, #8
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f000 f866 	bl	8011fec <prvSampleTimeNow>
 8011f20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011f22:	68bb      	ldr	r3, [r7, #8]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d130      	bne.n	8011f8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d10a      	bne.n	8011f44 <prvProcessTimerOrBlockTask+0x3c>
 8011f2e:	687a      	ldr	r2, [r7, #4]
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	429a      	cmp	r2, r3
 8011f34:	d806      	bhi.n	8011f44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011f36:	f7ff f937 	bl	80111a8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011f3a:	68f9      	ldr	r1, [r7, #12]
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f7ff ff85 	bl	8011e4c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011f42:	e024      	b.n	8011f8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011f44:	683b      	ldr	r3, [r7, #0]
 8011f46:	2b00      	cmp	r3, #0
 8011f48:	d008      	beq.n	8011f5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011f4a:	4b13      	ldr	r3, [pc, #76]	; (8011f98 <prvProcessTimerOrBlockTask+0x90>)
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d101      	bne.n	8011f58 <prvProcessTimerOrBlockTask+0x50>
 8011f54:	2301      	movs	r3, #1
 8011f56:	e000      	b.n	8011f5a <prvProcessTimerOrBlockTask+0x52>
 8011f58:	2300      	movs	r3, #0
 8011f5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011f5c:	4b0f      	ldr	r3, [pc, #60]	; (8011f9c <prvProcessTimerOrBlockTask+0x94>)
 8011f5e:	6818      	ldr	r0, [r3, #0]
 8011f60:	687a      	ldr	r2, [r7, #4]
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	1ad3      	subs	r3, r2, r3
 8011f66:	683a      	ldr	r2, [r7, #0]
 8011f68:	4619      	mov	r1, r3
 8011f6a:	f7fe fe7f 	bl	8010c6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011f6e:	f7ff f91b 	bl	80111a8 <xTaskResumeAll>
 8011f72:	4603      	mov	r3, r0
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d10a      	bne.n	8011f8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011f78:	4b09      	ldr	r3, [pc, #36]	; (8011fa0 <prvProcessTimerOrBlockTask+0x98>)
 8011f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f7e:	601a      	str	r2, [r3, #0]
 8011f80:	f3bf 8f4f 	dsb	sy
 8011f84:	f3bf 8f6f 	isb	sy
}
 8011f88:	e001      	b.n	8011f8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011f8a:	f7ff f90d 	bl	80111a8 <xTaskResumeAll>
}
 8011f8e:	bf00      	nop
 8011f90:	3710      	adds	r7, #16
 8011f92:	46bd      	mov	sp, r7
 8011f94:	bd80      	pop	{r7, pc}
 8011f96:	bf00      	nop
 8011f98:	20001520 	.word	0x20001520
 8011f9c:	20001524 	.word	0x20001524
 8011fa0:	e000ed04 	.word	0xe000ed04

08011fa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011fa4:	b480      	push	{r7}
 8011fa6:	b085      	sub	sp, #20
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011fac:	4b0e      	ldr	r3, [pc, #56]	; (8011fe8 <prvGetNextExpireTime+0x44>)
 8011fae:	681b      	ldr	r3, [r3, #0]
 8011fb0:	681b      	ldr	r3, [r3, #0]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d101      	bne.n	8011fba <prvGetNextExpireTime+0x16>
 8011fb6:	2201      	movs	r2, #1
 8011fb8:	e000      	b.n	8011fbc <prvGetNextExpireTime+0x18>
 8011fba:	2200      	movs	r2, #0
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d105      	bne.n	8011fd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011fc8:	4b07      	ldr	r3, [pc, #28]	; (8011fe8 <prvGetNextExpireTime+0x44>)
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	68db      	ldr	r3, [r3, #12]
 8011fce:	681b      	ldr	r3, [r3, #0]
 8011fd0:	60fb      	str	r3, [r7, #12]
 8011fd2:	e001      	b.n	8011fd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011fd8:	68fb      	ldr	r3, [r7, #12]
}
 8011fda:	4618      	mov	r0, r3
 8011fdc:	3714      	adds	r7, #20
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe4:	4770      	bx	lr
 8011fe6:	bf00      	nop
 8011fe8:	2000151c 	.word	0x2000151c

08011fec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011ff4:	f7ff f976 	bl	80112e4 <xTaskGetTickCount>
 8011ff8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011ffa:	4b0b      	ldr	r3, [pc, #44]	; (8012028 <prvSampleTimeNow+0x3c>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	68fa      	ldr	r2, [r7, #12]
 8012000:	429a      	cmp	r2, r3
 8012002:	d205      	bcs.n	8012010 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8012004:	f000 f936 	bl	8012274 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	2201      	movs	r2, #1
 801200c:	601a      	str	r2, [r3, #0]
 801200e:	e002      	b.n	8012016 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	2200      	movs	r2, #0
 8012014:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8012016:	4a04      	ldr	r2, [pc, #16]	; (8012028 <prvSampleTimeNow+0x3c>)
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801201c:	68fb      	ldr	r3, [r7, #12]
}
 801201e:	4618      	mov	r0, r3
 8012020:	3710      	adds	r7, #16
 8012022:	46bd      	mov	sp, r7
 8012024:	bd80      	pop	{r7, pc}
 8012026:	bf00      	nop
 8012028:	2000152c 	.word	0x2000152c

0801202c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b086      	sub	sp, #24
 8012030:	af00      	add	r7, sp, #0
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
 8012038:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801203a:	2300      	movs	r3, #0
 801203c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	68ba      	ldr	r2, [r7, #8]
 8012042:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	68fa      	ldr	r2, [r7, #12]
 8012048:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801204a:	68ba      	ldr	r2, [r7, #8]
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	429a      	cmp	r2, r3
 8012050:	d812      	bhi.n	8012078 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	683b      	ldr	r3, [r7, #0]
 8012056:	1ad2      	subs	r2, r2, r3
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	699b      	ldr	r3, [r3, #24]
 801205c:	429a      	cmp	r2, r3
 801205e:	d302      	bcc.n	8012066 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8012060:	2301      	movs	r3, #1
 8012062:	617b      	str	r3, [r7, #20]
 8012064:	e01b      	b.n	801209e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8012066:	4b10      	ldr	r3, [pc, #64]	; (80120a8 <prvInsertTimerInActiveList+0x7c>)
 8012068:	681a      	ldr	r2, [r3, #0]
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	3304      	adds	r3, #4
 801206e:	4619      	mov	r1, r3
 8012070:	4610      	mov	r0, r2
 8012072:	f7fd fd6e 	bl	800fb52 <vListInsert>
 8012076:	e012      	b.n	801209e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8012078:	687a      	ldr	r2, [r7, #4]
 801207a:	683b      	ldr	r3, [r7, #0]
 801207c:	429a      	cmp	r2, r3
 801207e:	d206      	bcs.n	801208e <prvInsertTimerInActiveList+0x62>
 8012080:	68ba      	ldr	r2, [r7, #8]
 8012082:	683b      	ldr	r3, [r7, #0]
 8012084:	429a      	cmp	r2, r3
 8012086:	d302      	bcc.n	801208e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8012088:	2301      	movs	r3, #1
 801208a:	617b      	str	r3, [r7, #20]
 801208c:	e007      	b.n	801209e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801208e:	4b07      	ldr	r3, [pc, #28]	; (80120ac <prvInsertTimerInActiveList+0x80>)
 8012090:	681a      	ldr	r2, [r3, #0]
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	3304      	adds	r3, #4
 8012096:	4619      	mov	r1, r3
 8012098:	4610      	mov	r0, r2
 801209a:	f7fd fd5a 	bl	800fb52 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801209e:	697b      	ldr	r3, [r7, #20]
}
 80120a0:	4618      	mov	r0, r3
 80120a2:	3718      	adds	r7, #24
 80120a4:	46bd      	mov	sp, r7
 80120a6:	bd80      	pop	{r7, pc}
 80120a8:	20001520 	.word	0x20001520
 80120ac:	2000151c 	.word	0x2000151c

080120b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80120b0:	b580      	push	{r7, lr}
 80120b2:	b08e      	sub	sp, #56	; 0x38
 80120b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80120b6:	e0ca      	b.n	801224e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	da18      	bge.n	80120f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80120be:	1d3b      	adds	r3, r7, #4
 80120c0:	3304      	adds	r3, #4
 80120c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80120c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d10a      	bne.n	80120e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80120ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120ce:	f383 8811 	msr	BASEPRI, r3
 80120d2:	f3bf 8f6f 	isb	sy
 80120d6:	f3bf 8f4f 	dsb	sy
 80120da:	61fb      	str	r3, [r7, #28]
}
 80120dc:	bf00      	nop
 80120de:	e7fe      	b.n	80120de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80120e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120e6:	6850      	ldr	r0, [r2, #4]
 80120e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80120ea:	6892      	ldr	r2, [r2, #8]
 80120ec:	4611      	mov	r1, r2
 80120ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	2b00      	cmp	r3, #0
 80120f4:	f2c0 80aa 	blt.w	801224c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80120fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80120fe:	695b      	ldr	r3, [r3, #20]
 8012100:	2b00      	cmp	r3, #0
 8012102:	d004      	beq.n	801210e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012106:	3304      	adds	r3, #4
 8012108:	4618      	mov	r0, r3
 801210a:	f7fd fd5b 	bl	800fbc4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801210e:	463b      	mov	r3, r7
 8012110:	4618      	mov	r0, r3
 8012112:	f7ff ff6b 	bl	8011fec <prvSampleTimeNow>
 8012116:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2b09      	cmp	r3, #9
 801211c:	f200 8097 	bhi.w	801224e <prvProcessReceivedCommands+0x19e>
 8012120:	a201      	add	r2, pc, #4	; (adr r2, 8012128 <prvProcessReceivedCommands+0x78>)
 8012122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012126:	bf00      	nop
 8012128:	08012151 	.word	0x08012151
 801212c:	08012151 	.word	0x08012151
 8012130:	08012151 	.word	0x08012151
 8012134:	080121c5 	.word	0x080121c5
 8012138:	080121d9 	.word	0x080121d9
 801213c:	08012223 	.word	0x08012223
 8012140:	08012151 	.word	0x08012151
 8012144:	08012151 	.word	0x08012151
 8012148:	080121c5 	.word	0x080121c5
 801214c:	080121d9 	.word	0x080121d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012152:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012156:	f043 0301 	orr.w	r3, r3, #1
 801215a:	b2da      	uxtb	r2, r3
 801215c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801215e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8012162:	68ba      	ldr	r2, [r7, #8]
 8012164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012166:	699b      	ldr	r3, [r3, #24]
 8012168:	18d1      	adds	r1, r2, r3
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801216e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012170:	f7ff ff5c 	bl	801202c <prvInsertTimerInActiveList>
 8012174:	4603      	mov	r3, r0
 8012176:	2b00      	cmp	r3, #0
 8012178:	d069      	beq.n	801224e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801217a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801217c:	6a1b      	ldr	r3, [r3, #32]
 801217e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012180:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012188:	f003 0304 	and.w	r3, r3, #4
 801218c:	2b00      	cmp	r3, #0
 801218e:	d05e      	beq.n	801224e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8012190:	68ba      	ldr	r2, [r7, #8]
 8012192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012194:	699b      	ldr	r3, [r3, #24]
 8012196:	441a      	add	r2, r3
 8012198:	2300      	movs	r3, #0
 801219a:	9300      	str	r3, [sp, #0]
 801219c:	2300      	movs	r3, #0
 801219e:	2100      	movs	r1, #0
 80121a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80121a2:	f7ff fe05 	bl	8011db0 <xTimerGenericCommand>
 80121a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80121a8:	6a3b      	ldr	r3, [r7, #32]
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d14f      	bne.n	801224e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80121ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b2:	f383 8811 	msr	BASEPRI, r3
 80121b6:	f3bf 8f6f 	isb	sy
 80121ba:	f3bf 8f4f 	dsb	sy
 80121be:	61bb      	str	r3, [r7, #24]
}
 80121c0:	bf00      	nop
 80121c2:	e7fe      	b.n	80121c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121ca:	f023 0301 	bic.w	r3, r3, #1
 80121ce:	b2da      	uxtb	r2, r3
 80121d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80121d6:	e03a      	b.n	801224e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80121d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80121de:	f043 0301 	orr.w	r3, r3, #1
 80121e2:	b2da      	uxtb	r2, r3
 80121e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80121ea:	68ba      	ldr	r2, [r7, #8]
 80121ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80121f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f2:	699b      	ldr	r3, [r3, #24]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d10a      	bne.n	801220e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80121f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121fc:	f383 8811 	msr	BASEPRI, r3
 8012200:	f3bf 8f6f 	isb	sy
 8012204:	f3bf 8f4f 	dsb	sy
 8012208:	617b      	str	r3, [r7, #20]
}
 801220a:	bf00      	nop
 801220c:	e7fe      	b.n	801220c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801220e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012210:	699a      	ldr	r2, [r3, #24]
 8012212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012214:	18d1      	adds	r1, r2, r3
 8012216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801221a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801221c:	f7ff ff06 	bl	801202c <prvInsertTimerInActiveList>
					break;
 8012220:	e015      	b.n	801224e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8012228:	f003 0302 	and.w	r3, r3, #2
 801222c:	2b00      	cmp	r3, #0
 801222e:	d103      	bne.n	8012238 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8012230:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012232:	f000 fbd5 	bl	80129e0 <vPortFree>
 8012236:	e00a      	b.n	801224e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801223e:	f023 0301 	bic.w	r3, r3, #1
 8012242:	b2da      	uxtb	r2, r3
 8012244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012246:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801224a:	e000      	b.n	801224e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801224c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801224e:	4b08      	ldr	r3, [pc, #32]	; (8012270 <prvProcessReceivedCommands+0x1c0>)
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	1d39      	adds	r1, r7, #4
 8012254:	2200      	movs	r2, #0
 8012256:	4618      	mov	r0, r3
 8012258:	f7fe f8fc 	bl	8010454 <xQueueReceive>
 801225c:	4603      	mov	r3, r0
 801225e:	2b00      	cmp	r3, #0
 8012260:	f47f af2a 	bne.w	80120b8 <prvProcessReceivedCommands+0x8>
	}
}
 8012264:	bf00      	nop
 8012266:	bf00      	nop
 8012268:	3730      	adds	r7, #48	; 0x30
 801226a:	46bd      	mov	sp, r7
 801226c:	bd80      	pop	{r7, pc}
 801226e:	bf00      	nop
 8012270:	20001524 	.word	0x20001524

08012274 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b088      	sub	sp, #32
 8012278:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801227a:	e048      	b.n	801230e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801227c:	4b2d      	ldr	r3, [pc, #180]	; (8012334 <prvSwitchTimerLists+0xc0>)
 801227e:	681b      	ldr	r3, [r3, #0]
 8012280:	68db      	ldr	r3, [r3, #12]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012286:	4b2b      	ldr	r3, [pc, #172]	; (8012334 <prvSwitchTimerLists+0xc0>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	68db      	ldr	r3, [r3, #12]
 801228c:	68db      	ldr	r3, [r3, #12]
 801228e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012290:	68fb      	ldr	r3, [r7, #12]
 8012292:	3304      	adds	r3, #4
 8012294:	4618      	mov	r0, r3
 8012296:	f7fd fc95 	bl	800fbc4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	6a1b      	ldr	r3, [r3, #32]
 801229e:	68f8      	ldr	r0, [r7, #12]
 80122a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80122a8:	f003 0304 	and.w	r3, r3, #4
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d02e      	beq.n	801230e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	699b      	ldr	r3, [r3, #24]
 80122b4:	693a      	ldr	r2, [r7, #16]
 80122b6:	4413      	add	r3, r2
 80122b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80122ba:	68ba      	ldr	r2, [r7, #8]
 80122bc:	693b      	ldr	r3, [r7, #16]
 80122be:	429a      	cmp	r2, r3
 80122c0:	d90e      	bls.n	80122e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	68ba      	ldr	r2, [r7, #8]
 80122c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	68fa      	ldr	r2, [r7, #12]
 80122cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80122ce:	4b19      	ldr	r3, [pc, #100]	; (8012334 <prvSwitchTimerLists+0xc0>)
 80122d0:	681a      	ldr	r2, [r3, #0]
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	3304      	adds	r3, #4
 80122d6:	4619      	mov	r1, r3
 80122d8:	4610      	mov	r0, r2
 80122da:	f7fd fc3a 	bl	800fb52 <vListInsert>
 80122de:	e016      	b.n	801230e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80122e0:	2300      	movs	r3, #0
 80122e2:	9300      	str	r3, [sp, #0]
 80122e4:	2300      	movs	r3, #0
 80122e6:	693a      	ldr	r2, [r7, #16]
 80122e8:	2100      	movs	r1, #0
 80122ea:	68f8      	ldr	r0, [r7, #12]
 80122ec:	f7ff fd60 	bl	8011db0 <xTimerGenericCommand>
 80122f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d10a      	bne.n	801230e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80122f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122fc:	f383 8811 	msr	BASEPRI, r3
 8012300:	f3bf 8f6f 	isb	sy
 8012304:	f3bf 8f4f 	dsb	sy
 8012308:	603b      	str	r3, [r7, #0]
}
 801230a:	bf00      	nop
 801230c:	e7fe      	b.n	801230c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801230e:	4b09      	ldr	r3, [pc, #36]	; (8012334 <prvSwitchTimerLists+0xc0>)
 8012310:	681b      	ldr	r3, [r3, #0]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	2b00      	cmp	r3, #0
 8012316:	d1b1      	bne.n	801227c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8012318:	4b06      	ldr	r3, [pc, #24]	; (8012334 <prvSwitchTimerLists+0xc0>)
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801231e:	4b06      	ldr	r3, [pc, #24]	; (8012338 <prvSwitchTimerLists+0xc4>)
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	4a04      	ldr	r2, [pc, #16]	; (8012334 <prvSwitchTimerLists+0xc0>)
 8012324:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8012326:	4a04      	ldr	r2, [pc, #16]	; (8012338 <prvSwitchTimerLists+0xc4>)
 8012328:	697b      	ldr	r3, [r7, #20]
 801232a:	6013      	str	r3, [r2, #0]
}
 801232c:	bf00      	nop
 801232e:	3718      	adds	r7, #24
 8012330:	46bd      	mov	sp, r7
 8012332:	bd80      	pop	{r7, pc}
 8012334:	2000151c 	.word	0x2000151c
 8012338:	20001520 	.word	0x20001520

0801233c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801233c:	b580      	push	{r7, lr}
 801233e:	b082      	sub	sp, #8
 8012340:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8012342:	f000 f967 	bl	8012614 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8012346:	4b15      	ldr	r3, [pc, #84]	; (801239c <prvCheckForValidListAndQueue+0x60>)
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d120      	bne.n	8012390 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801234e:	4814      	ldr	r0, [pc, #80]	; (80123a0 <prvCheckForValidListAndQueue+0x64>)
 8012350:	f7fd fbae 	bl	800fab0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8012354:	4813      	ldr	r0, [pc, #76]	; (80123a4 <prvCheckForValidListAndQueue+0x68>)
 8012356:	f7fd fbab 	bl	800fab0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801235a:	4b13      	ldr	r3, [pc, #76]	; (80123a8 <prvCheckForValidListAndQueue+0x6c>)
 801235c:	4a10      	ldr	r2, [pc, #64]	; (80123a0 <prvCheckForValidListAndQueue+0x64>)
 801235e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8012360:	4b12      	ldr	r3, [pc, #72]	; (80123ac <prvCheckForValidListAndQueue+0x70>)
 8012362:	4a10      	ldr	r2, [pc, #64]	; (80123a4 <prvCheckForValidListAndQueue+0x68>)
 8012364:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8012366:	2300      	movs	r3, #0
 8012368:	9300      	str	r3, [sp, #0]
 801236a:	4b11      	ldr	r3, [pc, #68]	; (80123b0 <prvCheckForValidListAndQueue+0x74>)
 801236c:	4a11      	ldr	r2, [pc, #68]	; (80123b4 <prvCheckForValidListAndQueue+0x78>)
 801236e:	2110      	movs	r1, #16
 8012370:	200a      	movs	r0, #10
 8012372:	f7fd fcb9 	bl	800fce8 <xQueueGenericCreateStatic>
 8012376:	4603      	mov	r3, r0
 8012378:	4a08      	ldr	r2, [pc, #32]	; (801239c <prvCheckForValidListAndQueue+0x60>)
 801237a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801237c:	4b07      	ldr	r3, [pc, #28]	; (801239c <prvCheckForValidListAndQueue+0x60>)
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d005      	beq.n	8012390 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8012384:	4b05      	ldr	r3, [pc, #20]	; (801239c <prvCheckForValidListAndQueue+0x60>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	490b      	ldr	r1, [pc, #44]	; (80123b8 <prvCheckForValidListAndQueue+0x7c>)
 801238a:	4618      	mov	r0, r3
 801238c:	f7fe fc1a 	bl	8010bc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012390:	f000 f970 	bl	8012674 <vPortExitCritical>
}
 8012394:	bf00      	nop
 8012396:	46bd      	mov	sp, r7
 8012398:	bd80      	pop	{r7, pc}
 801239a:	bf00      	nop
 801239c:	20001524 	.word	0x20001524
 80123a0:	200014f4 	.word	0x200014f4
 80123a4:	20001508 	.word	0x20001508
 80123a8:	2000151c 	.word	0x2000151c
 80123ac:	20001520 	.word	0x20001520
 80123b0:	200015d0 	.word	0x200015d0
 80123b4:	20001530 	.word	0x20001530
 80123b8:	08013694 	.word	0x08013694

080123bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80123bc:	b480      	push	{r7}
 80123be:	b085      	sub	sp, #20
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	3b04      	subs	r3, #4
 80123cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80123d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	3b04      	subs	r3, #4
 80123da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	f023 0201 	bic.w	r2, r3, #1
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80123e6:	68fb      	ldr	r3, [r7, #12]
 80123e8:	3b04      	subs	r3, #4
 80123ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80123ec:	4a0c      	ldr	r2, [pc, #48]	; (8012420 <pxPortInitialiseStack+0x64>)
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	3b14      	subs	r3, #20
 80123f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80123f8:	687a      	ldr	r2, [r7, #4]
 80123fa:	68fb      	ldr	r3, [r7, #12]
 80123fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	3b04      	subs	r3, #4
 8012402:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f06f 0202 	mvn.w	r2, #2
 801240a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	3b20      	subs	r3, #32
 8012410:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012412:	68fb      	ldr	r3, [r7, #12]
}
 8012414:	4618      	mov	r0, r3
 8012416:	3714      	adds	r7, #20
 8012418:	46bd      	mov	sp, r7
 801241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801241e:	4770      	bx	lr
 8012420:	08012425 	.word	0x08012425

08012424 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801242a:	2300      	movs	r3, #0
 801242c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801242e:	4b12      	ldr	r3, [pc, #72]	; (8012478 <prvTaskExitError+0x54>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012436:	d00a      	beq.n	801244e <prvTaskExitError+0x2a>
	__asm volatile
 8012438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801243c:	f383 8811 	msr	BASEPRI, r3
 8012440:	f3bf 8f6f 	isb	sy
 8012444:	f3bf 8f4f 	dsb	sy
 8012448:	60fb      	str	r3, [r7, #12]
}
 801244a:	bf00      	nop
 801244c:	e7fe      	b.n	801244c <prvTaskExitError+0x28>
	__asm volatile
 801244e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012452:	f383 8811 	msr	BASEPRI, r3
 8012456:	f3bf 8f6f 	isb	sy
 801245a:	f3bf 8f4f 	dsb	sy
 801245e:	60bb      	str	r3, [r7, #8]
}
 8012460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012462:	bf00      	nop
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	2b00      	cmp	r3, #0
 8012468:	d0fc      	beq.n	8012464 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801246a:	bf00      	nop
 801246c:	bf00      	nop
 801246e:	3714      	adds	r7, #20
 8012470:	46bd      	mov	sp, r7
 8012472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012476:	4770      	bx	lr
 8012478:	20000084 	.word	0x20000084
 801247c:	00000000 	.word	0x00000000

08012480 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012480:	4b07      	ldr	r3, [pc, #28]	; (80124a0 <pxCurrentTCBConst2>)
 8012482:	6819      	ldr	r1, [r3, #0]
 8012484:	6808      	ldr	r0, [r1, #0]
 8012486:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801248a:	f380 8809 	msr	PSP, r0
 801248e:	f3bf 8f6f 	isb	sy
 8012492:	f04f 0000 	mov.w	r0, #0
 8012496:	f380 8811 	msr	BASEPRI, r0
 801249a:	4770      	bx	lr
 801249c:	f3af 8000 	nop.w

080124a0 <pxCurrentTCBConst2>:
 80124a0:	20000ff4 	.word	0x20000ff4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80124a4:	bf00      	nop
 80124a6:	bf00      	nop

080124a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80124a8:	4808      	ldr	r0, [pc, #32]	; (80124cc <prvPortStartFirstTask+0x24>)
 80124aa:	6800      	ldr	r0, [r0, #0]
 80124ac:	6800      	ldr	r0, [r0, #0]
 80124ae:	f380 8808 	msr	MSP, r0
 80124b2:	f04f 0000 	mov.w	r0, #0
 80124b6:	f380 8814 	msr	CONTROL, r0
 80124ba:	b662      	cpsie	i
 80124bc:	b661      	cpsie	f
 80124be:	f3bf 8f4f 	dsb	sy
 80124c2:	f3bf 8f6f 	isb	sy
 80124c6:	df00      	svc	0
 80124c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80124ca:	bf00      	nop
 80124cc:	e000ed08 	.word	0xe000ed08

080124d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b086      	sub	sp, #24
 80124d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80124d6:	4b46      	ldr	r3, [pc, #280]	; (80125f0 <xPortStartScheduler+0x120>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	4a46      	ldr	r2, [pc, #280]	; (80125f4 <xPortStartScheduler+0x124>)
 80124dc:	4293      	cmp	r3, r2
 80124de:	d10a      	bne.n	80124f6 <xPortStartScheduler+0x26>
	__asm volatile
 80124e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124e4:	f383 8811 	msr	BASEPRI, r3
 80124e8:	f3bf 8f6f 	isb	sy
 80124ec:	f3bf 8f4f 	dsb	sy
 80124f0:	613b      	str	r3, [r7, #16]
}
 80124f2:	bf00      	nop
 80124f4:	e7fe      	b.n	80124f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80124f6:	4b3e      	ldr	r3, [pc, #248]	; (80125f0 <xPortStartScheduler+0x120>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	4a3f      	ldr	r2, [pc, #252]	; (80125f8 <xPortStartScheduler+0x128>)
 80124fc:	4293      	cmp	r3, r2
 80124fe:	d10a      	bne.n	8012516 <xPortStartScheduler+0x46>
	__asm volatile
 8012500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012504:	f383 8811 	msr	BASEPRI, r3
 8012508:	f3bf 8f6f 	isb	sy
 801250c:	f3bf 8f4f 	dsb	sy
 8012510:	60fb      	str	r3, [r7, #12]
}
 8012512:	bf00      	nop
 8012514:	e7fe      	b.n	8012514 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012516:	4b39      	ldr	r3, [pc, #228]	; (80125fc <xPortStartScheduler+0x12c>)
 8012518:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801251a:	697b      	ldr	r3, [r7, #20]
 801251c:	781b      	ldrb	r3, [r3, #0]
 801251e:	b2db      	uxtb	r3, r3
 8012520:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012522:	697b      	ldr	r3, [r7, #20]
 8012524:	22ff      	movs	r2, #255	; 0xff
 8012526:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	781b      	ldrb	r3, [r3, #0]
 801252c:	b2db      	uxtb	r3, r3
 801252e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012530:	78fb      	ldrb	r3, [r7, #3]
 8012532:	b2db      	uxtb	r3, r3
 8012534:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012538:	b2da      	uxtb	r2, r3
 801253a:	4b31      	ldr	r3, [pc, #196]	; (8012600 <xPortStartScheduler+0x130>)
 801253c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801253e:	4b31      	ldr	r3, [pc, #196]	; (8012604 <xPortStartScheduler+0x134>)
 8012540:	2207      	movs	r2, #7
 8012542:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012544:	e009      	b.n	801255a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8012546:	4b2f      	ldr	r3, [pc, #188]	; (8012604 <xPortStartScheduler+0x134>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	3b01      	subs	r3, #1
 801254c:	4a2d      	ldr	r2, [pc, #180]	; (8012604 <xPortStartScheduler+0x134>)
 801254e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012550:	78fb      	ldrb	r3, [r7, #3]
 8012552:	b2db      	uxtb	r3, r3
 8012554:	005b      	lsls	r3, r3, #1
 8012556:	b2db      	uxtb	r3, r3
 8012558:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801255a:	78fb      	ldrb	r3, [r7, #3]
 801255c:	b2db      	uxtb	r3, r3
 801255e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012562:	2b80      	cmp	r3, #128	; 0x80
 8012564:	d0ef      	beq.n	8012546 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012566:	4b27      	ldr	r3, [pc, #156]	; (8012604 <xPortStartScheduler+0x134>)
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f1c3 0307 	rsb	r3, r3, #7
 801256e:	2b04      	cmp	r3, #4
 8012570:	d00a      	beq.n	8012588 <xPortStartScheduler+0xb8>
	__asm volatile
 8012572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012576:	f383 8811 	msr	BASEPRI, r3
 801257a:	f3bf 8f6f 	isb	sy
 801257e:	f3bf 8f4f 	dsb	sy
 8012582:	60bb      	str	r3, [r7, #8]
}
 8012584:	bf00      	nop
 8012586:	e7fe      	b.n	8012586 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012588:	4b1e      	ldr	r3, [pc, #120]	; (8012604 <xPortStartScheduler+0x134>)
 801258a:	681b      	ldr	r3, [r3, #0]
 801258c:	021b      	lsls	r3, r3, #8
 801258e:	4a1d      	ldr	r2, [pc, #116]	; (8012604 <xPortStartScheduler+0x134>)
 8012590:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012592:	4b1c      	ldr	r3, [pc, #112]	; (8012604 <xPortStartScheduler+0x134>)
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801259a:	4a1a      	ldr	r2, [pc, #104]	; (8012604 <xPortStartScheduler+0x134>)
 801259c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	b2da      	uxtb	r2, r3
 80125a2:	697b      	ldr	r3, [r7, #20]
 80125a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80125a6:	4b18      	ldr	r3, [pc, #96]	; (8012608 <xPortStartScheduler+0x138>)
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	4a17      	ldr	r2, [pc, #92]	; (8012608 <xPortStartScheduler+0x138>)
 80125ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80125b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80125b2:	4b15      	ldr	r3, [pc, #84]	; (8012608 <xPortStartScheduler+0x138>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	4a14      	ldr	r2, [pc, #80]	; (8012608 <xPortStartScheduler+0x138>)
 80125b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80125bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80125be:	f000 f8dd 	bl	801277c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80125c2:	4b12      	ldr	r3, [pc, #72]	; (801260c <xPortStartScheduler+0x13c>)
 80125c4:	2200      	movs	r2, #0
 80125c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80125c8:	f000 f8fc 	bl	80127c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80125cc:	4b10      	ldr	r3, [pc, #64]	; (8012610 <xPortStartScheduler+0x140>)
 80125ce:	681b      	ldr	r3, [r3, #0]
 80125d0:	4a0f      	ldr	r2, [pc, #60]	; (8012610 <xPortStartScheduler+0x140>)
 80125d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80125d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80125d8:	f7ff ff66 	bl	80124a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80125dc:	f7fe ff4c 	bl	8011478 <vTaskSwitchContext>
	prvTaskExitError();
 80125e0:	f7ff ff20 	bl	8012424 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80125e4:	2300      	movs	r3, #0
}
 80125e6:	4618      	mov	r0, r3
 80125e8:	3718      	adds	r7, #24
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
 80125ee:	bf00      	nop
 80125f0:	e000ed00 	.word	0xe000ed00
 80125f4:	410fc271 	.word	0x410fc271
 80125f8:	410fc270 	.word	0x410fc270
 80125fc:	e000e400 	.word	0xe000e400
 8012600:	20001620 	.word	0x20001620
 8012604:	20001624 	.word	0x20001624
 8012608:	e000ed20 	.word	0xe000ed20
 801260c:	20000084 	.word	0x20000084
 8012610:	e000ef34 	.word	0xe000ef34

08012614 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012614:	b480      	push	{r7}
 8012616:	b083      	sub	sp, #12
 8012618:	af00      	add	r7, sp, #0
	__asm volatile
 801261a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801261e:	f383 8811 	msr	BASEPRI, r3
 8012622:	f3bf 8f6f 	isb	sy
 8012626:	f3bf 8f4f 	dsb	sy
 801262a:	607b      	str	r3, [r7, #4]
}
 801262c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801262e:	4b0f      	ldr	r3, [pc, #60]	; (801266c <vPortEnterCritical+0x58>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	3301      	adds	r3, #1
 8012634:	4a0d      	ldr	r2, [pc, #52]	; (801266c <vPortEnterCritical+0x58>)
 8012636:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012638:	4b0c      	ldr	r3, [pc, #48]	; (801266c <vPortEnterCritical+0x58>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	2b01      	cmp	r3, #1
 801263e:	d10f      	bne.n	8012660 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012640:	4b0b      	ldr	r3, [pc, #44]	; (8012670 <vPortEnterCritical+0x5c>)
 8012642:	681b      	ldr	r3, [r3, #0]
 8012644:	b2db      	uxtb	r3, r3
 8012646:	2b00      	cmp	r3, #0
 8012648:	d00a      	beq.n	8012660 <vPortEnterCritical+0x4c>
	__asm volatile
 801264a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801264e:	f383 8811 	msr	BASEPRI, r3
 8012652:	f3bf 8f6f 	isb	sy
 8012656:	f3bf 8f4f 	dsb	sy
 801265a:	603b      	str	r3, [r7, #0]
}
 801265c:	bf00      	nop
 801265e:	e7fe      	b.n	801265e <vPortEnterCritical+0x4a>
	}
}
 8012660:	bf00      	nop
 8012662:	370c      	adds	r7, #12
 8012664:	46bd      	mov	sp, r7
 8012666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266a:	4770      	bx	lr
 801266c:	20000084 	.word	0x20000084
 8012670:	e000ed04 	.word	0xe000ed04

08012674 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801267a:	4b12      	ldr	r3, [pc, #72]	; (80126c4 <vPortExitCritical+0x50>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d10a      	bne.n	8012698 <vPortExitCritical+0x24>
	__asm volatile
 8012682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012686:	f383 8811 	msr	BASEPRI, r3
 801268a:	f3bf 8f6f 	isb	sy
 801268e:	f3bf 8f4f 	dsb	sy
 8012692:	607b      	str	r3, [r7, #4]
}
 8012694:	bf00      	nop
 8012696:	e7fe      	b.n	8012696 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012698:	4b0a      	ldr	r3, [pc, #40]	; (80126c4 <vPortExitCritical+0x50>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	3b01      	subs	r3, #1
 801269e:	4a09      	ldr	r2, [pc, #36]	; (80126c4 <vPortExitCritical+0x50>)
 80126a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80126a2:	4b08      	ldr	r3, [pc, #32]	; (80126c4 <vPortExitCritical+0x50>)
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d105      	bne.n	80126b6 <vPortExitCritical+0x42>
 80126aa:	2300      	movs	r3, #0
 80126ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80126ae:	683b      	ldr	r3, [r7, #0]
 80126b0:	f383 8811 	msr	BASEPRI, r3
}
 80126b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80126b6:	bf00      	nop
 80126b8:	370c      	adds	r7, #12
 80126ba:	46bd      	mov	sp, r7
 80126bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c0:	4770      	bx	lr
 80126c2:	bf00      	nop
 80126c4:	20000084 	.word	0x20000084
	...

080126d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80126d0:	f3ef 8009 	mrs	r0, PSP
 80126d4:	f3bf 8f6f 	isb	sy
 80126d8:	4b15      	ldr	r3, [pc, #84]	; (8012730 <pxCurrentTCBConst>)
 80126da:	681a      	ldr	r2, [r3, #0]
 80126dc:	f01e 0f10 	tst.w	lr, #16
 80126e0:	bf08      	it	eq
 80126e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80126e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126ea:	6010      	str	r0, [r2, #0]
 80126ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80126f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80126f4:	f380 8811 	msr	BASEPRI, r0
 80126f8:	f3bf 8f4f 	dsb	sy
 80126fc:	f3bf 8f6f 	isb	sy
 8012700:	f7fe feba 	bl	8011478 <vTaskSwitchContext>
 8012704:	f04f 0000 	mov.w	r0, #0
 8012708:	f380 8811 	msr	BASEPRI, r0
 801270c:	bc09      	pop	{r0, r3}
 801270e:	6819      	ldr	r1, [r3, #0]
 8012710:	6808      	ldr	r0, [r1, #0]
 8012712:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012716:	f01e 0f10 	tst.w	lr, #16
 801271a:	bf08      	it	eq
 801271c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012720:	f380 8809 	msr	PSP, r0
 8012724:	f3bf 8f6f 	isb	sy
 8012728:	4770      	bx	lr
 801272a:	bf00      	nop
 801272c:	f3af 8000 	nop.w

08012730 <pxCurrentTCBConst>:
 8012730:	20000ff4 	.word	0x20000ff4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012734:	bf00      	nop
 8012736:	bf00      	nop

08012738 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
	__asm volatile
 801273e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012742:	f383 8811 	msr	BASEPRI, r3
 8012746:	f3bf 8f6f 	isb	sy
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	607b      	str	r3, [r7, #4]
}
 8012750:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012752:	f7fe fdd7 	bl	8011304 <xTaskIncrementTick>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d003      	beq.n	8012764 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801275c:	4b06      	ldr	r3, [pc, #24]	; (8012778 <SysTick_Handler+0x40>)
 801275e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012762:	601a      	str	r2, [r3, #0]
 8012764:	2300      	movs	r3, #0
 8012766:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012768:	683b      	ldr	r3, [r7, #0]
 801276a:	f383 8811 	msr	BASEPRI, r3
}
 801276e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012770:	bf00      	nop
 8012772:	3708      	adds	r7, #8
 8012774:	46bd      	mov	sp, r7
 8012776:	bd80      	pop	{r7, pc}
 8012778:	e000ed04 	.word	0xe000ed04

0801277c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801277c:	b480      	push	{r7}
 801277e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012780:	4b0b      	ldr	r3, [pc, #44]	; (80127b0 <vPortSetupTimerInterrupt+0x34>)
 8012782:	2200      	movs	r2, #0
 8012784:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012786:	4b0b      	ldr	r3, [pc, #44]	; (80127b4 <vPortSetupTimerInterrupt+0x38>)
 8012788:	2200      	movs	r2, #0
 801278a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801278c:	4b0a      	ldr	r3, [pc, #40]	; (80127b8 <vPortSetupTimerInterrupt+0x3c>)
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	4a0a      	ldr	r2, [pc, #40]	; (80127bc <vPortSetupTimerInterrupt+0x40>)
 8012792:	fba2 2303 	umull	r2, r3, r2, r3
 8012796:	099b      	lsrs	r3, r3, #6
 8012798:	4a09      	ldr	r2, [pc, #36]	; (80127c0 <vPortSetupTimerInterrupt+0x44>)
 801279a:	3b01      	subs	r3, #1
 801279c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801279e:	4b04      	ldr	r3, [pc, #16]	; (80127b0 <vPortSetupTimerInterrupt+0x34>)
 80127a0:	2207      	movs	r2, #7
 80127a2:	601a      	str	r2, [r3, #0]
}
 80127a4:	bf00      	nop
 80127a6:	46bd      	mov	sp, r7
 80127a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ac:	4770      	bx	lr
 80127ae:	bf00      	nop
 80127b0:	e000e010 	.word	0xe000e010
 80127b4:	e000e018 	.word	0xe000e018
 80127b8:	20000000 	.word	0x20000000
 80127bc:	10624dd3 	.word	0x10624dd3
 80127c0:	e000e014 	.word	0xe000e014

080127c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80127c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80127d4 <vPortEnableVFP+0x10>
 80127c8:	6801      	ldr	r1, [r0, #0]
 80127ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80127ce:	6001      	str	r1, [r0, #0]
 80127d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80127d2:	bf00      	nop
 80127d4:	e000ed88 	.word	0xe000ed88

080127d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80127d8:	b480      	push	{r7}
 80127da:	b085      	sub	sp, #20
 80127dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80127de:	f3ef 8305 	mrs	r3, IPSR
 80127e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	2b0f      	cmp	r3, #15
 80127e8:	d914      	bls.n	8012814 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80127ea:	4a17      	ldr	r2, [pc, #92]	; (8012848 <vPortValidateInterruptPriority+0x70>)
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	4413      	add	r3, r2
 80127f0:	781b      	ldrb	r3, [r3, #0]
 80127f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80127f4:	4b15      	ldr	r3, [pc, #84]	; (801284c <vPortValidateInterruptPriority+0x74>)
 80127f6:	781b      	ldrb	r3, [r3, #0]
 80127f8:	7afa      	ldrb	r2, [r7, #11]
 80127fa:	429a      	cmp	r2, r3
 80127fc:	d20a      	bcs.n	8012814 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80127fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012802:	f383 8811 	msr	BASEPRI, r3
 8012806:	f3bf 8f6f 	isb	sy
 801280a:	f3bf 8f4f 	dsb	sy
 801280e:	607b      	str	r3, [r7, #4]
}
 8012810:	bf00      	nop
 8012812:	e7fe      	b.n	8012812 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012814:	4b0e      	ldr	r3, [pc, #56]	; (8012850 <vPortValidateInterruptPriority+0x78>)
 8012816:	681b      	ldr	r3, [r3, #0]
 8012818:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801281c:	4b0d      	ldr	r3, [pc, #52]	; (8012854 <vPortValidateInterruptPriority+0x7c>)
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	429a      	cmp	r2, r3
 8012822:	d90a      	bls.n	801283a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8012824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012828:	f383 8811 	msr	BASEPRI, r3
 801282c:	f3bf 8f6f 	isb	sy
 8012830:	f3bf 8f4f 	dsb	sy
 8012834:	603b      	str	r3, [r7, #0]
}
 8012836:	bf00      	nop
 8012838:	e7fe      	b.n	8012838 <vPortValidateInterruptPriority+0x60>
	}
 801283a:	bf00      	nop
 801283c:	3714      	adds	r7, #20
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr
 8012846:	bf00      	nop
 8012848:	e000e3f0 	.word	0xe000e3f0
 801284c:	20001620 	.word	0x20001620
 8012850:	e000ed0c 	.word	0xe000ed0c
 8012854:	20001624 	.word	0x20001624

08012858 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b08a      	sub	sp, #40	; 0x28
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8012860:	2300      	movs	r3, #0
 8012862:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8012864:	f7fe fc92 	bl	801118c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8012868:	4b58      	ldr	r3, [pc, #352]	; (80129cc <pvPortMalloc+0x174>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d101      	bne.n	8012874 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8012870:	f000 f910 	bl	8012a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8012874:	4b56      	ldr	r3, [pc, #344]	; (80129d0 <pvPortMalloc+0x178>)
 8012876:	681a      	ldr	r2, [r3, #0]
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	4013      	ands	r3, r2
 801287c:	2b00      	cmp	r3, #0
 801287e:	f040 808e 	bne.w	801299e <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d01d      	beq.n	80128c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8012888:	2208      	movs	r2, #8
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	4413      	add	r3, r2
 801288e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f003 0307 	and.w	r3, r3, #7
 8012896:	2b00      	cmp	r3, #0
 8012898:	d014      	beq.n	80128c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	f023 0307 	bic.w	r3, r3, #7
 80128a0:	3308      	adds	r3, #8
 80128a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	f003 0307 	and.w	r3, r3, #7
 80128aa:	2b00      	cmp	r3, #0
 80128ac:	d00a      	beq.n	80128c4 <pvPortMalloc+0x6c>
	__asm volatile
 80128ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128b2:	f383 8811 	msr	BASEPRI, r3
 80128b6:	f3bf 8f6f 	isb	sy
 80128ba:	f3bf 8f4f 	dsb	sy
 80128be:	617b      	str	r3, [r7, #20]
}
 80128c0:	bf00      	nop
 80128c2:	e7fe      	b.n	80128c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d069      	beq.n	801299e <pvPortMalloc+0x146>
 80128ca:	4b42      	ldr	r3, [pc, #264]	; (80129d4 <pvPortMalloc+0x17c>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d864      	bhi.n	801299e <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80128d4:	4b40      	ldr	r3, [pc, #256]	; (80129d8 <pvPortMalloc+0x180>)
 80128d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80128d8:	4b3f      	ldr	r3, [pc, #252]	; (80129d8 <pvPortMalloc+0x180>)
 80128da:	681b      	ldr	r3, [r3, #0]
 80128dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128de:	e004      	b.n	80128ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80128e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80128e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e6:	681b      	ldr	r3, [r3, #0]
 80128e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80128ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d903      	bls.n	80128fc <pvPortMalloc+0xa4>
 80128f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f6:	681b      	ldr	r3, [r3, #0]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d1f1      	bne.n	80128e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80128fc:	4b33      	ldr	r3, [pc, #204]	; (80129cc <pvPortMalloc+0x174>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012902:	429a      	cmp	r2, r3
 8012904:	d04b      	beq.n	801299e <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8012906:	6a3b      	ldr	r3, [r7, #32]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2208      	movs	r2, #8
 801290c:	4413      	add	r3, r2
 801290e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012912:	681a      	ldr	r2, [r3, #0]
 8012914:	6a3b      	ldr	r3, [r7, #32]
 8012916:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8012918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291a:	685a      	ldr	r2, [r3, #4]
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	1ad2      	subs	r2, r2, r3
 8012920:	2308      	movs	r3, #8
 8012922:	005b      	lsls	r3, r3, #1
 8012924:	429a      	cmp	r2, r3
 8012926:	d91f      	bls.n	8012968 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8012928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	4413      	add	r3, r2
 801292e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012930:	69bb      	ldr	r3, [r7, #24]
 8012932:	f003 0307 	and.w	r3, r3, #7
 8012936:	2b00      	cmp	r3, #0
 8012938:	d00a      	beq.n	8012950 <pvPortMalloc+0xf8>
	__asm volatile
 801293a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801293e:	f383 8811 	msr	BASEPRI, r3
 8012942:	f3bf 8f6f 	isb	sy
 8012946:	f3bf 8f4f 	dsb	sy
 801294a:	613b      	str	r3, [r7, #16]
}
 801294c:	bf00      	nop
 801294e:	e7fe      	b.n	801294e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8012950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012952:	685a      	ldr	r2, [r3, #4]
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	1ad2      	subs	r2, r2, r3
 8012958:	69bb      	ldr	r3, [r7, #24]
 801295a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801295c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295e:	687a      	ldr	r2, [r7, #4]
 8012960:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8012962:	69b8      	ldr	r0, [r7, #24]
 8012964:	f000 f8f8 	bl	8012b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8012968:	4b1a      	ldr	r3, [pc, #104]	; (80129d4 <pvPortMalloc+0x17c>)
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296e:	685b      	ldr	r3, [r3, #4]
 8012970:	1ad3      	subs	r3, r2, r3
 8012972:	4a18      	ldr	r2, [pc, #96]	; (80129d4 <pvPortMalloc+0x17c>)
 8012974:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8012976:	4b17      	ldr	r3, [pc, #92]	; (80129d4 <pvPortMalloc+0x17c>)
 8012978:	681a      	ldr	r2, [r3, #0]
 801297a:	4b18      	ldr	r3, [pc, #96]	; (80129dc <pvPortMalloc+0x184>)
 801297c:	681b      	ldr	r3, [r3, #0]
 801297e:	429a      	cmp	r2, r3
 8012980:	d203      	bcs.n	801298a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8012982:	4b14      	ldr	r3, [pc, #80]	; (80129d4 <pvPortMalloc+0x17c>)
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	4a15      	ldr	r2, [pc, #84]	; (80129dc <pvPortMalloc+0x184>)
 8012988:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298c:	685a      	ldr	r2, [r3, #4]
 801298e:	4b10      	ldr	r3, [pc, #64]	; (80129d0 <pvPortMalloc+0x178>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	431a      	orrs	r2, r3
 8012994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012996:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801299a:	2200      	movs	r2, #0
 801299c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801299e:	f7fe fc03 	bl	80111a8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80129a2:	69fb      	ldr	r3, [r7, #28]
 80129a4:	f003 0307 	and.w	r3, r3, #7
 80129a8:	2b00      	cmp	r3, #0
 80129aa:	d00a      	beq.n	80129c2 <pvPortMalloc+0x16a>
	__asm volatile
 80129ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b0:	f383 8811 	msr	BASEPRI, r3
 80129b4:	f3bf 8f6f 	isb	sy
 80129b8:	f3bf 8f4f 	dsb	sy
 80129bc:	60fb      	str	r3, [r7, #12]
}
 80129be:	bf00      	nop
 80129c0:	e7fe      	b.n	80129c0 <pvPortMalloc+0x168>
	return pvReturn;
 80129c2:	69fb      	ldr	r3, [r7, #28]
}
 80129c4:	4618      	mov	r0, r3
 80129c6:	3728      	adds	r7, #40	; 0x28
 80129c8:	46bd      	mov	sp, r7
 80129ca:	bd80      	pop	{r7, pc}
 80129cc:	20005230 	.word	0x20005230
 80129d0:	2000523c 	.word	0x2000523c
 80129d4:	20005234 	.word	0x20005234
 80129d8:	20005228 	.word	0x20005228
 80129dc:	20005238 	.word	0x20005238

080129e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b086      	sub	sp, #24
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d048      	beq.n	8012a84 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80129f2:	2308      	movs	r3, #8
 80129f4:	425b      	negs	r3, r3
 80129f6:	697a      	ldr	r2, [r7, #20]
 80129f8:	4413      	add	r3, r2
 80129fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	685a      	ldr	r2, [r3, #4]
 8012a04:	4b21      	ldr	r3, [pc, #132]	; (8012a8c <vPortFree+0xac>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	4013      	ands	r3, r2
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d10a      	bne.n	8012a24 <vPortFree+0x44>
	__asm volatile
 8012a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a12:	f383 8811 	msr	BASEPRI, r3
 8012a16:	f3bf 8f6f 	isb	sy
 8012a1a:	f3bf 8f4f 	dsb	sy
 8012a1e:	60fb      	str	r3, [r7, #12]
}
 8012a20:	bf00      	nop
 8012a22:	e7fe      	b.n	8012a22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8012a24:	693b      	ldr	r3, [r7, #16]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d00a      	beq.n	8012a42 <vPortFree+0x62>
	__asm volatile
 8012a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a30:	f383 8811 	msr	BASEPRI, r3
 8012a34:	f3bf 8f6f 	isb	sy
 8012a38:	f3bf 8f4f 	dsb	sy
 8012a3c:	60bb      	str	r3, [r7, #8]
}
 8012a3e:	bf00      	nop
 8012a40:	e7fe      	b.n	8012a40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	685a      	ldr	r2, [r3, #4]
 8012a46:	4b11      	ldr	r3, [pc, #68]	; (8012a8c <vPortFree+0xac>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	4013      	ands	r3, r2
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d019      	beq.n	8012a84 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	681b      	ldr	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d115      	bne.n	8012a84 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8012a58:	693b      	ldr	r3, [r7, #16]
 8012a5a:	685a      	ldr	r2, [r3, #4]
 8012a5c:	4b0b      	ldr	r3, [pc, #44]	; (8012a8c <vPortFree+0xac>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	43db      	mvns	r3, r3
 8012a62:	401a      	ands	r2, r3
 8012a64:	693b      	ldr	r3, [r7, #16]
 8012a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012a68:	f7fe fb90 	bl	801118c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	685a      	ldr	r2, [r3, #4]
 8012a70:	4b07      	ldr	r3, [pc, #28]	; (8012a90 <vPortFree+0xb0>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	4413      	add	r3, r2
 8012a76:	4a06      	ldr	r2, [pc, #24]	; (8012a90 <vPortFree+0xb0>)
 8012a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012a7a:	6938      	ldr	r0, [r7, #16]
 8012a7c:	f000 f86c 	bl	8012b58 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012a80:	f7fe fb92 	bl	80111a8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012a84:	bf00      	nop
 8012a86:	3718      	adds	r7, #24
 8012a88:	46bd      	mov	sp, r7
 8012a8a:	bd80      	pop	{r7, pc}
 8012a8c:	2000523c 	.word	0x2000523c
 8012a90:	20005234 	.word	0x20005234

08012a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012a94:	b480      	push	{r7}
 8012a96:	b085      	sub	sp, #20
 8012a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8012a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012aa0:	4b27      	ldr	r3, [pc, #156]	; (8012b40 <prvHeapInit+0xac>)
 8012aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	f003 0307 	and.w	r3, r3, #7
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d00c      	beq.n	8012ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012aae:	68fb      	ldr	r3, [r7, #12]
 8012ab0:	3307      	adds	r3, #7
 8012ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f023 0307 	bic.w	r3, r3, #7
 8012aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012abc:	68ba      	ldr	r2, [r7, #8]
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	1ad3      	subs	r3, r2, r3
 8012ac2:	4a1f      	ldr	r2, [pc, #124]	; (8012b40 <prvHeapInit+0xac>)
 8012ac4:	4413      	add	r3, r2
 8012ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012acc:	4a1d      	ldr	r2, [pc, #116]	; (8012b44 <prvHeapInit+0xb0>)
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012ad2:	4b1c      	ldr	r3, [pc, #112]	; (8012b44 <prvHeapInit+0xb0>)
 8012ad4:	2200      	movs	r2, #0
 8012ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	68ba      	ldr	r2, [r7, #8]
 8012adc:	4413      	add	r3, r2
 8012ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012ae0:	2208      	movs	r2, #8
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	1a9b      	subs	r3, r3, r2
 8012ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	f023 0307 	bic.w	r3, r3, #7
 8012aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	4a15      	ldr	r2, [pc, #84]	; (8012b48 <prvHeapInit+0xb4>)
 8012af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012af6:	4b14      	ldr	r3, [pc, #80]	; (8012b48 <prvHeapInit+0xb4>)
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2200      	movs	r2, #0
 8012afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012afe:	4b12      	ldr	r3, [pc, #72]	; (8012b48 <prvHeapInit+0xb4>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	2200      	movs	r2, #0
 8012b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	68fa      	ldr	r2, [r7, #12]
 8012b0e:	1ad2      	subs	r2, r2, r3
 8012b10:	683b      	ldr	r3, [r7, #0]
 8012b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012b14:	4b0c      	ldr	r3, [pc, #48]	; (8012b48 <prvHeapInit+0xb4>)
 8012b16:	681a      	ldr	r2, [r3, #0]
 8012b18:	683b      	ldr	r3, [r7, #0]
 8012b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	685b      	ldr	r3, [r3, #4]
 8012b20:	4a0a      	ldr	r2, [pc, #40]	; (8012b4c <prvHeapInit+0xb8>)
 8012b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	685b      	ldr	r3, [r3, #4]
 8012b28:	4a09      	ldr	r2, [pc, #36]	; (8012b50 <prvHeapInit+0xbc>)
 8012b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012b2c:	4b09      	ldr	r3, [pc, #36]	; (8012b54 <prvHeapInit+0xc0>)
 8012b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8012b32:	601a      	str	r2, [r3, #0]
}
 8012b34:	bf00      	nop
 8012b36:	3714      	adds	r7, #20
 8012b38:	46bd      	mov	sp, r7
 8012b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b3e:	4770      	bx	lr
 8012b40:	20001628 	.word	0x20001628
 8012b44:	20005228 	.word	0x20005228
 8012b48:	20005230 	.word	0x20005230
 8012b4c:	20005238 	.word	0x20005238
 8012b50:	20005234 	.word	0x20005234
 8012b54:	2000523c 	.word	0x2000523c

08012b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012b58:	b480      	push	{r7}
 8012b5a:	b085      	sub	sp, #20
 8012b5c:	af00      	add	r7, sp, #0
 8012b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012b60:	4b28      	ldr	r3, [pc, #160]	; (8012c04 <prvInsertBlockIntoFreeList+0xac>)
 8012b62:	60fb      	str	r3, [r7, #12]
 8012b64:	e002      	b.n	8012b6c <prvInsertBlockIntoFreeList+0x14>
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	60fb      	str	r3, [r7, #12]
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	687a      	ldr	r2, [r7, #4]
 8012b72:	429a      	cmp	r2, r3
 8012b74:	d8f7      	bhi.n	8012b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012b7a:	68fb      	ldr	r3, [r7, #12]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	68ba      	ldr	r2, [r7, #8]
 8012b80:	4413      	add	r3, r2
 8012b82:	687a      	ldr	r2, [r7, #4]
 8012b84:	429a      	cmp	r2, r3
 8012b86:	d108      	bne.n	8012b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	685a      	ldr	r2, [r3, #4]
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	685b      	ldr	r3, [r3, #4]
 8012b90:	441a      	add	r2, r3
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	68ba      	ldr	r2, [r7, #8]
 8012ba4:	441a      	add	r2, r3
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	681b      	ldr	r3, [r3, #0]
 8012baa:	429a      	cmp	r2, r3
 8012bac:	d118      	bne.n	8012be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	681a      	ldr	r2, [r3, #0]
 8012bb2:	4b15      	ldr	r3, [pc, #84]	; (8012c08 <prvInsertBlockIntoFreeList+0xb0>)
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	429a      	cmp	r2, r3
 8012bb8:	d00d      	beq.n	8012bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	685a      	ldr	r2, [r3, #4]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	681b      	ldr	r3, [r3, #0]
 8012bc2:	685b      	ldr	r3, [r3, #4]
 8012bc4:	441a      	add	r2, r3
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	681a      	ldr	r2, [r3, #0]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	601a      	str	r2, [r3, #0]
 8012bd4:	e008      	b.n	8012be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012bd6:	4b0c      	ldr	r3, [pc, #48]	; (8012c08 <prvInsertBlockIntoFreeList+0xb0>)
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	601a      	str	r2, [r3, #0]
 8012bde:	e003      	b.n	8012be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012be0:	68fb      	ldr	r3, [r7, #12]
 8012be2:	681a      	ldr	r2, [r3, #0]
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	429a      	cmp	r2, r3
 8012bee:	d002      	beq.n	8012bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	687a      	ldr	r2, [r7, #4]
 8012bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012bf6:	bf00      	nop
 8012bf8:	3714      	adds	r7, #20
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c00:	4770      	bx	lr
 8012c02:	bf00      	nop
 8012c04:	20005228 	.word	0x20005228
 8012c08:	20005230 	.word	0x20005230

08012c0c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012c10:	2201      	movs	r2, #1
 8012c12:	490e      	ldr	r1, [pc, #56]	; (8012c4c <MX_USB_HOST_Init+0x40>)
 8012c14:	480e      	ldr	r0, [pc, #56]	; (8012c50 <MX_USB_HOST_Init+0x44>)
 8012c16:	f7f9 ff3d 	bl	800ca94 <USBH_Init>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	2b00      	cmp	r3, #0
 8012c1e:	d001      	beq.n	8012c24 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012c20:	f7ee fac4 	bl	80011ac <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8012c24:	490b      	ldr	r1, [pc, #44]	; (8012c54 <MX_USB_HOST_Init+0x48>)
 8012c26:	480a      	ldr	r0, [pc, #40]	; (8012c50 <MX_USB_HOST_Init+0x44>)
 8012c28:	f7f9 ffe4 	bl	800cbf4 <USBH_RegisterClass>
 8012c2c:	4603      	mov	r3, r0
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d001      	beq.n	8012c36 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012c32:	f7ee fabb 	bl	80011ac <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012c36:	4806      	ldr	r0, [pc, #24]	; (8012c50 <MX_USB_HOST_Init+0x44>)
 8012c38:	f7fa f868 	bl	800cd0c <USBH_Start>
 8012c3c:	4603      	mov	r3, r0
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d001      	beq.n	8012c46 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012c42:	f7ee fab3 	bl	80011ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012c46:	bf00      	nop
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	08012c59 	.word	0x08012c59
 8012c50:	20005240 	.word	0x20005240
 8012c54:	20000064 	.word	0x20000064

08012c58 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012c58:	b480      	push	{r7}
 8012c5a:	b083      	sub	sp, #12
 8012c5c:	af00      	add	r7, sp, #0
 8012c5e:	6078      	str	r0, [r7, #4]
 8012c60:	460b      	mov	r3, r1
 8012c62:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012c64:	78fb      	ldrb	r3, [r7, #3]
 8012c66:	3b01      	subs	r3, #1
 8012c68:	2b04      	cmp	r3, #4
 8012c6a:	d819      	bhi.n	8012ca0 <USBH_UserProcess+0x48>
 8012c6c:	a201      	add	r2, pc, #4	; (adr r2, 8012c74 <USBH_UserProcess+0x1c>)
 8012c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c72:	bf00      	nop
 8012c74:	08012ca1 	.word	0x08012ca1
 8012c78:	08012c91 	.word	0x08012c91
 8012c7c:	08012ca1 	.word	0x08012ca1
 8012c80:	08012c99 	.word	0x08012c99
 8012c84:	08012c89 	.word	0x08012c89
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012c88:	4b09      	ldr	r3, [pc, #36]	; (8012cb0 <USBH_UserProcess+0x58>)
 8012c8a:	2203      	movs	r2, #3
 8012c8c:	701a      	strb	r2, [r3, #0]
  break;
 8012c8e:	e008      	b.n	8012ca2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012c90:	4b07      	ldr	r3, [pc, #28]	; (8012cb0 <USBH_UserProcess+0x58>)
 8012c92:	2202      	movs	r2, #2
 8012c94:	701a      	strb	r2, [r3, #0]
  break;
 8012c96:	e004      	b.n	8012ca2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012c98:	4b05      	ldr	r3, [pc, #20]	; (8012cb0 <USBH_UserProcess+0x58>)
 8012c9a:	2201      	movs	r2, #1
 8012c9c:	701a      	strb	r2, [r3, #0]
  break;
 8012c9e:	e000      	b.n	8012ca2 <USBH_UserProcess+0x4a>

  default:
  break;
 8012ca0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012ca2:	bf00      	nop
 8012ca4:	370c      	adds	r7, #12
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cac:	4770      	bx	lr
 8012cae:	bf00      	nop
 8012cb0:	20005624 	.word	0x20005624

08012cb4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012cb4:	b580      	push	{r7, lr}
 8012cb6:	b08a      	sub	sp, #40	; 0x28
 8012cb8:	af00      	add	r7, sp, #0
 8012cba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012cbc:	f107 0314 	add.w	r3, r7, #20
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	601a      	str	r2, [r3, #0]
 8012cc4:	605a      	str	r2, [r3, #4]
 8012cc6:	609a      	str	r2, [r3, #8]
 8012cc8:	60da      	str	r2, [r3, #12]
 8012cca:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8012cd4:	d147      	bne.n	8012d66 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	613b      	str	r3, [r7, #16]
 8012cda:	4b25      	ldr	r3, [pc, #148]	; (8012d70 <HAL_HCD_MspInit+0xbc>)
 8012cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cde:	4a24      	ldr	r2, [pc, #144]	; (8012d70 <HAL_HCD_MspInit+0xbc>)
 8012ce0:	f043 0301 	orr.w	r3, r3, #1
 8012ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8012ce6:	4b22      	ldr	r3, [pc, #136]	; (8012d70 <HAL_HCD_MspInit+0xbc>)
 8012ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cea:	f003 0301 	and.w	r3, r3, #1
 8012cee:	613b      	str	r3, [r7, #16]
 8012cf0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8012cf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012cf6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cfc:	2300      	movs	r3, #0
 8012cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8012d00:	f107 0314 	add.w	r3, r7, #20
 8012d04:	4619      	mov	r1, r3
 8012d06:	481b      	ldr	r0, [pc, #108]	; (8012d74 <HAL_HCD_MspInit+0xc0>)
 8012d08:	f7f1 f8e2 	bl	8003ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8012d0c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8012d10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012d12:	2302      	movs	r3, #2
 8012d14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012d16:	2300      	movs	r3, #0
 8012d18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012d1a:	2303      	movs	r3, #3
 8012d1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012d1e:	230a      	movs	r3, #10
 8012d20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012d22:	f107 0314 	add.w	r3, r7, #20
 8012d26:	4619      	mov	r1, r3
 8012d28:	4812      	ldr	r0, [pc, #72]	; (8012d74 <HAL_HCD_MspInit+0xc0>)
 8012d2a:	f7f1 f8d1 	bl	8003ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012d2e:	4b10      	ldr	r3, [pc, #64]	; (8012d70 <HAL_HCD_MspInit+0xbc>)
 8012d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012d32:	4a0f      	ldr	r2, [pc, #60]	; (8012d70 <HAL_HCD_MspInit+0xbc>)
 8012d34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012d38:	6353      	str	r3, [r2, #52]	; 0x34
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	60fb      	str	r3, [r7, #12]
 8012d3e:	4b0c      	ldr	r3, [pc, #48]	; (8012d70 <HAL_HCD_MspInit+0xbc>)
 8012d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d42:	4a0b      	ldr	r2, [pc, #44]	; (8012d70 <HAL_HCD_MspInit+0xbc>)
 8012d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012d48:	6453      	str	r3, [r2, #68]	; 0x44
 8012d4a:	4b09      	ldr	r3, [pc, #36]	; (8012d70 <HAL_HCD_MspInit+0xbc>)
 8012d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012d52:	60fb      	str	r3, [r7, #12]
 8012d54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012d56:	2200      	movs	r2, #0
 8012d58:	2100      	movs	r1, #0
 8012d5a:	2043      	movs	r0, #67	; 0x43
 8012d5c:	f7f0 fd70 	bl	8003840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012d60:	2043      	movs	r0, #67	; 0x43
 8012d62:	f7f0 fd89 	bl	8003878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012d66:	bf00      	nop
 8012d68:	3728      	adds	r7, #40	; 0x28
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	40023800 	.word	0x40023800
 8012d74:	40020000 	.word	0x40020000

08012d78 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b082      	sub	sp, #8
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012d86:	4618      	mov	r0, r3
 8012d88:	f7fa fc6d 	bl	800d666 <USBH_LL_IncTimer>
}
 8012d8c:	bf00      	nop
 8012d8e:	3708      	adds	r7, #8
 8012d90:	46bd      	mov	sp, r7
 8012d92:	bd80      	pop	{r7, pc}

08012d94 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012d94:	b580      	push	{r7, lr}
 8012d96:	b082      	sub	sp, #8
 8012d98:	af00      	add	r7, sp, #0
 8012d9a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7fa fcb1 	bl	800d70a <USBH_LL_Connect>
}
 8012da8:	bf00      	nop
 8012daa:	3708      	adds	r7, #8
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b082      	sub	sp, #8
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7fa fcc6 	bl	800d750 <USBH_LL_Disconnect>
}
 8012dc4:	bf00      	nop
 8012dc6:	3708      	adds	r7, #8
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	460b      	mov	r3, r1
 8012dd6:	70fb      	strb	r3, [r7, #3]
 8012dd8:	4613      	mov	r3, r2
 8012dda:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012de2:	4618      	mov	r0, r3
 8012de4:	f7fa fcfd 	bl	800d7e2 <USBH_LL_NotifyURBChange>
#endif
}
 8012de8:	bf00      	nop
 8012dea:	3708      	adds	r7, #8
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}

08012df0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b082      	sub	sp, #8
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012dfe:	4618      	mov	r0, r3
 8012e00:	f7fa fc5b 	bl	800d6ba <USBH_LL_PortEnabled>
}
 8012e04:	bf00      	nop
 8012e06:	3708      	adds	r7, #8
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b082      	sub	sp, #8
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f7fa fc67 	bl	800d6ee <USBH_LL_PortDisabled>
}
 8012e20:	bf00      	nop
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012e36:	2b01      	cmp	r3, #1
 8012e38:	d12a      	bne.n	8012e90 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012e3a:	4a18      	ldr	r2, [pc, #96]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	4a15      	ldr	r2, [pc, #84]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e46:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012e4a:	4b14      	ldr	r3, [pc, #80]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e4c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012e50:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 12;
 8012e52:	4b12      	ldr	r3, [pc, #72]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e54:	220c      	movs	r2, #12
 8012e56:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012e58:	4b10      	ldr	r3, [pc, #64]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e5a:	2201      	movs	r2, #1
 8012e5c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012e5e:	4b0f      	ldr	r3, [pc, #60]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e60:	2200      	movs	r2, #0
 8012e62:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012e64:	4b0d      	ldr	r3, [pc, #52]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e66:	2202      	movs	r2, #2
 8012e68:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012e6a:	4b0c      	ldr	r3, [pc, #48]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e6c:	2200      	movs	r2, #0
 8012e6e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012e70:	480a      	ldr	r0, [pc, #40]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e72:	f7f1 f9f5 	bl	8004260 <HAL_HCD_Init>
 8012e76:	4603      	mov	r3, r0
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d001      	beq.n	8012e80 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012e7c:	f7ee f996 	bl	80011ac <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012e80:	4806      	ldr	r0, [pc, #24]	; (8012e9c <USBH_LL_Init+0x74>)
 8012e82:	f7f1 fdf9 	bl	8004a78 <HAL_HCD_GetCurrentFrame>
 8012e86:	4603      	mov	r3, r0
 8012e88:	4619      	mov	r1, r3
 8012e8a:	6878      	ldr	r0, [r7, #4]
 8012e8c:	f7fa fbdc 	bl	800d648 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012e90:	2300      	movs	r3, #0
}
 8012e92:	4618      	mov	r0, r3
 8012e94:	3708      	adds	r7, #8
 8012e96:	46bd      	mov	sp, r7
 8012e98:	bd80      	pop	{r7, pc}
 8012e9a:	bf00      	nop
 8012e9c:	20005628 	.word	0x20005628

08012ea0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b084      	sub	sp, #16
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ea8:	2300      	movs	r3, #0
 8012eaa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012eac:	2300      	movs	r3, #0
 8012eae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7f1 fd66 	bl	8004988 <HAL_HCD_Start>
 8012ebc:	4603      	mov	r3, r0
 8012ebe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012ec0:	7bfb      	ldrb	r3, [r7, #15]
 8012ec2:	4618      	mov	r0, r3
 8012ec4:	f000 f992 	bl	80131ec <USBH_Get_USB_Status>
 8012ec8:	4603      	mov	r3, r0
 8012eca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ecc:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ece:	4618      	mov	r0, r3
 8012ed0:	3710      	adds	r7, #16
 8012ed2:	46bd      	mov	sp, r7
 8012ed4:	bd80      	pop	{r7, pc}

08012ed6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012ed6:	b580      	push	{r7, lr}
 8012ed8:	b084      	sub	sp, #16
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012ede:	2300      	movs	r3, #0
 8012ee0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ee2:	2300      	movs	r3, #0
 8012ee4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012eec:	4618      	mov	r0, r3
 8012eee:	f7f1 fd6e 	bl	80049ce <HAL_HCD_Stop>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012ef6:	7bfb      	ldrb	r3, [r7, #15]
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f000 f977 	bl	80131ec <USBH_Get_USB_Status>
 8012efe:	4603      	mov	r3, r0
 8012f00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f02:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f04:	4618      	mov	r0, r3
 8012f06:	3710      	adds	r7, #16
 8012f08:	46bd      	mov	sp, r7
 8012f0a:	bd80      	pop	{r7, pc}

08012f0c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b084      	sub	sp, #16
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012f14:	2301      	movs	r3, #1
 8012f16:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012f1e:	4618      	mov	r0, r3
 8012f20:	f7f1 fdb8 	bl	8004a94 <HAL_HCD_GetCurrentSpeed>
 8012f24:	4603      	mov	r3, r0
 8012f26:	2b02      	cmp	r3, #2
 8012f28:	d00c      	beq.n	8012f44 <USBH_LL_GetSpeed+0x38>
 8012f2a:	2b02      	cmp	r3, #2
 8012f2c:	d80d      	bhi.n	8012f4a <USBH_LL_GetSpeed+0x3e>
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d002      	beq.n	8012f38 <USBH_LL_GetSpeed+0x2c>
 8012f32:	2b01      	cmp	r3, #1
 8012f34:	d003      	beq.n	8012f3e <USBH_LL_GetSpeed+0x32>
 8012f36:	e008      	b.n	8012f4a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8012f3c:	e008      	b.n	8012f50 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012f3e:	2301      	movs	r3, #1
 8012f40:	73fb      	strb	r3, [r7, #15]
    break;
 8012f42:	e005      	b.n	8012f50 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012f44:	2302      	movs	r3, #2
 8012f46:	73fb      	strb	r3, [r7, #15]
    break;
 8012f48:	e002      	b.n	8012f50 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012f4a:	2301      	movs	r3, #1
 8012f4c:	73fb      	strb	r3, [r7, #15]
    break;
 8012f4e:	bf00      	nop
  }
  return  speed;
 8012f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3710      	adds	r7, #16
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}

08012f5a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012f5a:	b580      	push	{r7, lr}
 8012f5c:	b084      	sub	sp, #16
 8012f5e:	af00      	add	r7, sp, #0
 8012f60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f62:	2300      	movs	r3, #0
 8012f64:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012f66:	2300      	movs	r3, #0
 8012f68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012f70:	4618      	mov	r0, r3
 8012f72:	f7f1 fd49 	bl	8004a08 <HAL_HCD_ResetPort>
 8012f76:	4603      	mov	r3, r0
 8012f78:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012f7a:	7bfb      	ldrb	r3, [r7, #15]
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f000 f935 	bl	80131ec <USBH_Get_USB_Status>
 8012f82:	4603      	mov	r3, r0
 8012f84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f86:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f88:	4618      	mov	r0, r3
 8012f8a:	3710      	adds	r7, #16
 8012f8c:	46bd      	mov	sp, r7
 8012f8e:	bd80      	pop	{r7, pc}

08012f90 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
 8012f98:	460b      	mov	r3, r1
 8012f9a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012fa2:	78fa      	ldrb	r2, [r7, #3]
 8012fa4:	4611      	mov	r1, r2
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	f7f1 fd51 	bl	8004a4e <HAL_HCD_HC_GetXferCount>
 8012fac:	4603      	mov	r3, r0
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	3708      	adds	r7, #8
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	bd80      	pop	{r7, pc}

08012fb6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012fb6:	b590      	push	{r4, r7, lr}
 8012fb8:	b089      	sub	sp, #36	; 0x24
 8012fba:	af04      	add	r7, sp, #16
 8012fbc:	6078      	str	r0, [r7, #4]
 8012fbe:	4608      	mov	r0, r1
 8012fc0:	4611      	mov	r1, r2
 8012fc2:	461a      	mov	r2, r3
 8012fc4:	4603      	mov	r3, r0
 8012fc6:	70fb      	strb	r3, [r7, #3]
 8012fc8:	460b      	mov	r3, r1
 8012fca:	70bb      	strb	r3, [r7, #2]
 8012fcc:	4613      	mov	r3, r2
 8012fce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fd0:	2300      	movs	r3, #0
 8012fd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012fd4:	2300      	movs	r3, #0
 8012fd6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012fde:	787c      	ldrb	r4, [r7, #1]
 8012fe0:	78ba      	ldrb	r2, [r7, #2]
 8012fe2:	78f9      	ldrb	r1, [r7, #3]
 8012fe4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012fe6:	9302      	str	r3, [sp, #8]
 8012fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012fec:	9301      	str	r3, [sp, #4]
 8012fee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012ff2:	9300      	str	r3, [sp, #0]
 8012ff4:	4623      	mov	r3, r4
 8012ff6:	f7f1 f995 	bl	8004324 <HAL_HCD_HC_Init>
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012ffe:	7bfb      	ldrb	r3, [r7, #15]
 8013000:	4618      	mov	r0, r3
 8013002:	f000 f8f3 	bl	80131ec <USBH_Get_USB_Status>
 8013006:	4603      	mov	r3, r0
 8013008:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801300a:	7bbb      	ldrb	r3, [r7, #14]
}
 801300c:	4618      	mov	r0, r3
 801300e:	3714      	adds	r7, #20
 8013010:	46bd      	mov	sp, r7
 8013012:	bd90      	pop	{r4, r7, pc}

08013014 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b084      	sub	sp, #16
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
 801301c:	460b      	mov	r3, r1
 801301e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013020:	2300      	movs	r3, #0
 8013022:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013024:	2300      	movs	r3, #0
 8013026:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8013028:	687b      	ldr	r3, [r7, #4]
 801302a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801302e:	78fa      	ldrb	r2, [r7, #3]
 8013030:	4611      	mov	r1, r2
 8013032:	4618      	mov	r0, r3
 8013034:	f7f1 fa0e 	bl	8004454 <HAL_HCD_HC_Halt>
 8013038:	4603      	mov	r3, r0
 801303a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801303c:	7bfb      	ldrb	r3, [r7, #15]
 801303e:	4618      	mov	r0, r3
 8013040:	f000 f8d4 	bl	80131ec <USBH_Get_USB_Status>
 8013044:	4603      	mov	r3, r0
 8013046:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013048:	7bbb      	ldrb	r3, [r7, #14]
}
 801304a:	4618      	mov	r0, r3
 801304c:	3710      	adds	r7, #16
 801304e:	46bd      	mov	sp, r7
 8013050:	bd80      	pop	{r7, pc}

08013052 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013052:	b590      	push	{r4, r7, lr}
 8013054:	b089      	sub	sp, #36	; 0x24
 8013056:	af04      	add	r7, sp, #16
 8013058:	6078      	str	r0, [r7, #4]
 801305a:	4608      	mov	r0, r1
 801305c:	4611      	mov	r1, r2
 801305e:	461a      	mov	r2, r3
 8013060:	4603      	mov	r3, r0
 8013062:	70fb      	strb	r3, [r7, #3]
 8013064:	460b      	mov	r3, r1
 8013066:	70bb      	strb	r3, [r7, #2]
 8013068:	4613      	mov	r3, r2
 801306a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801306c:	2300      	movs	r3, #0
 801306e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013070:	2300      	movs	r3, #0
 8013072:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801307a:	787c      	ldrb	r4, [r7, #1]
 801307c:	78ba      	ldrb	r2, [r7, #2]
 801307e:	78f9      	ldrb	r1, [r7, #3]
 8013080:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8013084:	9303      	str	r3, [sp, #12]
 8013086:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013088:	9302      	str	r3, [sp, #8]
 801308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801308c:	9301      	str	r3, [sp, #4]
 801308e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013092:	9300      	str	r3, [sp, #0]
 8013094:	4623      	mov	r3, r4
 8013096:	f7f1 fa01 	bl	800449c <HAL_HCD_HC_SubmitRequest>
 801309a:	4603      	mov	r3, r0
 801309c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801309e:	7bfb      	ldrb	r3, [r7, #15]
 80130a0:	4618      	mov	r0, r3
 80130a2:	f000 f8a3 	bl	80131ec <USBH_Get_USB_Status>
 80130a6:	4603      	mov	r3, r0
 80130a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80130aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3714      	adds	r7, #20
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd90      	pop	{r4, r7, pc}

080130b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	460b      	mov	r3, r1
 80130be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80130c6:	78fa      	ldrb	r2, [r7, #3]
 80130c8:	4611      	mov	r1, r2
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7f1 fcaa 	bl	8004a24 <HAL_HCD_HC_GetURBState>
 80130d0:	4603      	mov	r3, r0
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3708      	adds	r7, #8
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}

080130da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80130da:	b580      	push	{r7, lr}
 80130dc:	b082      	sub	sp, #8
 80130de:	af00      	add	r7, sp, #0
 80130e0:	6078      	str	r0, [r7, #4]
 80130e2:	460b      	mov	r3, r1
 80130e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80130ec:	2b01      	cmp	r3, #1
 80130ee:	d103      	bne.n	80130f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80130f0:	78fb      	ldrb	r3, [r7, #3]
 80130f2:	4618      	mov	r0, r3
 80130f4:	f000 f8a6 	bl	8013244 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80130f8:	20c8      	movs	r0, #200	; 0xc8
 80130fa:	f7f0 f853 	bl	80031a4 <HAL_Delay>
  return USBH_OK;
 80130fe:	2300      	movs	r3, #0
}
 8013100:	4618      	mov	r0, r3
 8013102:	3708      	adds	r7, #8
 8013104:	46bd      	mov	sp, r7
 8013106:	bd80      	pop	{r7, pc}

08013108 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8013108:	b480      	push	{r7}
 801310a:	b085      	sub	sp, #20
 801310c:	af00      	add	r7, sp, #0
 801310e:	6078      	str	r0, [r7, #4]
 8013110:	460b      	mov	r3, r1
 8013112:	70fb      	strb	r3, [r7, #3]
 8013114:	4613      	mov	r3, r2
 8013116:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801311e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8013120:	78fa      	ldrb	r2, [r7, #3]
 8013122:	68f9      	ldr	r1, [r7, #12]
 8013124:	4613      	mov	r3, r2
 8013126:	009b      	lsls	r3, r3, #2
 8013128:	4413      	add	r3, r2
 801312a:	00db      	lsls	r3, r3, #3
 801312c:	440b      	add	r3, r1
 801312e:	333b      	adds	r3, #59	; 0x3b
 8013130:	781b      	ldrb	r3, [r3, #0]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d00a      	beq.n	801314c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8013136:	78fa      	ldrb	r2, [r7, #3]
 8013138:	68f9      	ldr	r1, [r7, #12]
 801313a:	4613      	mov	r3, r2
 801313c:	009b      	lsls	r3, r3, #2
 801313e:	4413      	add	r3, r2
 8013140:	00db      	lsls	r3, r3, #3
 8013142:	440b      	add	r3, r1
 8013144:	3350      	adds	r3, #80	; 0x50
 8013146:	78ba      	ldrb	r2, [r7, #2]
 8013148:	701a      	strb	r2, [r3, #0]
 801314a:	e009      	b.n	8013160 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 801314c:	78fa      	ldrb	r2, [r7, #3]
 801314e:	68f9      	ldr	r1, [r7, #12]
 8013150:	4613      	mov	r3, r2
 8013152:	009b      	lsls	r3, r3, #2
 8013154:	4413      	add	r3, r2
 8013156:	00db      	lsls	r3, r3, #3
 8013158:	440b      	add	r3, r1
 801315a:	3351      	adds	r3, #81	; 0x51
 801315c:	78ba      	ldrb	r2, [r7, #2]
 801315e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8013160:	2300      	movs	r3, #0
}
 8013162:	4618      	mov	r0, r3
 8013164:	3714      	adds	r7, #20
 8013166:	46bd      	mov	sp, r7
 8013168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316c:	4770      	bx	lr

0801316e <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801316e:	b480      	push	{r7}
 8013170:	b085      	sub	sp, #20
 8013172:	af00      	add	r7, sp, #0
 8013174:	6078      	str	r0, [r7, #4]
 8013176:	460b      	mov	r3, r1
 8013178:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 801317a:	2300      	movs	r3, #0
 801317c:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8013184:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8013186:	78fa      	ldrb	r2, [r7, #3]
 8013188:	68b9      	ldr	r1, [r7, #8]
 801318a:	4613      	mov	r3, r2
 801318c:	009b      	lsls	r3, r3, #2
 801318e:	4413      	add	r3, r2
 8013190:	00db      	lsls	r3, r3, #3
 8013192:	440b      	add	r3, r1
 8013194:	333b      	adds	r3, #59	; 0x3b
 8013196:	781b      	ldrb	r3, [r3, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d00a      	beq.n	80131b2 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801319c:	78fa      	ldrb	r2, [r7, #3]
 801319e:	68b9      	ldr	r1, [r7, #8]
 80131a0:	4613      	mov	r3, r2
 80131a2:	009b      	lsls	r3, r3, #2
 80131a4:	4413      	add	r3, r2
 80131a6:	00db      	lsls	r3, r3, #3
 80131a8:	440b      	add	r3, r1
 80131aa:	3350      	adds	r3, #80	; 0x50
 80131ac:	781b      	ldrb	r3, [r3, #0]
 80131ae:	73fb      	strb	r3, [r7, #15]
 80131b0:	e009      	b.n	80131c6 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 80131b2:	78fa      	ldrb	r2, [r7, #3]
 80131b4:	68b9      	ldr	r1, [r7, #8]
 80131b6:	4613      	mov	r3, r2
 80131b8:	009b      	lsls	r3, r3, #2
 80131ba:	4413      	add	r3, r2
 80131bc:	00db      	lsls	r3, r3, #3
 80131be:	440b      	add	r3, r1
 80131c0:	3351      	adds	r3, #81	; 0x51
 80131c2:	781b      	ldrb	r3, [r3, #0]
 80131c4:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 80131c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80131c8:	4618      	mov	r0, r3
 80131ca:	3714      	adds	r7, #20
 80131cc:	46bd      	mov	sp, r7
 80131ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d2:	4770      	bx	lr

080131d4 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80131d4:	b580      	push	{r7, lr}
 80131d6:	b082      	sub	sp, #8
 80131d8:	af00      	add	r7, sp, #0
 80131da:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f7ef ffe1 	bl	80031a4 <HAL_Delay>
}
 80131e2:	bf00      	nop
 80131e4:	3708      	adds	r7, #8
 80131e6:	46bd      	mov	sp, r7
 80131e8:	bd80      	pop	{r7, pc}
	...

080131ec <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80131ec:	b480      	push	{r7}
 80131ee:	b085      	sub	sp, #20
 80131f0:	af00      	add	r7, sp, #0
 80131f2:	4603      	mov	r3, r0
 80131f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80131f6:	2300      	movs	r3, #0
 80131f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80131fa:	79fb      	ldrb	r3, [r7, #7]
 80131fc:	2b03      	cmp	r3, #3
 80131fe:	d817      	bhi.n	8013230 <USBH_Get_USB_Status+0x44>
 8013200:	a201      	add	r2, pc, #4	; (adr r2, 8013208 <USBH_Get_USB_Status+0x1c>)
 8013202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013206:	bf00      	nop
 8013208:	08013219 	.word	0x08013219
 801320c:	0801321f 	.word	0x0801321f
 8013210:	08013225 	.word	0x08013225
 8013214:	0801322b 	.word	0x0801322b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8013218:	2300      	movs	r3, #0
 801321a:	73fb      	strb	r3, [r7, #15]
    break;
 801321c:	e00b      	b.n	8013236 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801321e:	2302      	movs	r3, #2
 8013220:	73fb      	strb	r3, [r7, #15]
    break;
 8013222:	e008      	b.n	8013236 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8013224:	2301      	movs	r3, #1
 8013226:	73fb      	strb	r3, [r7, #15]
    break;
 8013228:	e005      	b.n	8013236 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 801322a:	2302      	movs	r3, #2
 801322c:	73fb      	strb	r3, [r7, #15]
    break;
 801322e:	e002      	b.n	8013236 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8013230:	2302      	movs	r3, #2
 8013232:	73fb      	strb	r3, [r7, #15]
    break;
 8013234:	bf00      	nop
  }
  return usb_status;
 8013236:	7bfb      	ldrb	r3, [r7, #15]
}
 8013238:	4618      	mov	r0, r3
 801323a:	3714      	adds	r7, #20
 801323c:	46bd      	mov	sp, r7
 801323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013242:	4770      	bx	lr

08013244 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8013244:	b580      	push	{r7, lr}
 8013246:	b084      	sub	sp, #16
 8013248:	af00      	add	r7, sp, #0
 801324a:	4603      	mov	r3, r0
 801324c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801324e:	79fb      	ldrb	r3, [r7, #7]
 8013250:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8013252:	79fb      	ldrb	r3, [r7, #7]
 8013254:	2b00      	cmp	r3, #0
 8013256:	d102      	bne.n	801325e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 8013258:	2301      	movs	r3, #1
 801325a:	73fb      	strb	r3, [r7, #15]
 801325c:	e001      	b.n	8013262 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 801325e:	2300      	movs	r3, #0
 8013260:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOG,GPIO_PIN_8,(GPIO_PinState)data);
 8013262:	7bfb      	ldrb	r3, [r7, #15]
 8013264:	461a      	mov	r2, r3
 8013266:	f44f 7180 	mov.w	r1, #256	; 0x100
 801326a:	4803      	ldr	r0, [pc, #12]	; (8013278 <MX_DriverVbusFS+0x34>)
 801326c:	f7f0 ffc4 	bl	80041f8 <HAL_GPIO_WritePin>
}
 8013270:	bf00      	nop
 8013272:	3710      	adds	r7, #16
 8013274:	46bd      	mov	sp, r7
 8013276:	bd80      	pop	{r7, pc}
 8013278:	40021800 	.word	0x40021800

0801327c <__errno>:
 801327c:	4b01      	ldr	r3, [pc, #4]	; (8013284 <__errno+0x8>)
 801327e:	6818      	ldr	r0, [r3, #0]
 8013280:	4770      	bx	lr
 8013282:	bf00      	nop
 8013284:	20000088 	.word	0x20000088

08013288 <__libc_init_array>:
 8013288:	b570      	push	{r4, r5, r6, lr}
 801328a:	4d0d      	ldr	r5, [pc, #52]	; (80132c0 <__libc_init_array+0x38>)
 801328c:	4c0d      	ldr	r4, [pc, #52]	; (80132c4 <__libc_init_array+0x3c>)
 801328e:	1b64      	subs	r4, r4, r5
 8013290:	10a4      	asrs	r4, r4, #2
 8013292:	2600      	movs	r6, #0
 8013294:	42a6      	cmp	r6, r4
 8013296:	d109      	bne.n	80132ac <__libc_init_array+0x24>
 8013298:	4d0b      	ldr	r5, [pc, #44]	; (80132c8 <__libc_init_array+0x40>)
 801329a:	4c0c      	ldr	r4, [pc, #48]	; (80132cc <__libc_init_array+0x44>)
 801329c:	f000 f9a6 	bl	80135ec <_init>
 80132a0:	1b64      	subs	r4, r4, r5
 80132a2:	10a4      	asrs	r4, r4, #2
 80132a4:	2600      	movs	r6, #0
 80132a6:	42a6      	cmp	r6, r4
 80132a8:	d105      	bne.n	80132b6 <__libc_init_array+0x2e>
 80132aa:	bd70      	pop	{r4, r5, r6, pc}
 80132ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80132b0:	4798      	blx	r3
 80132b2:	3601      	adds	r6, #1
 80132b4:	e7ee      	b.n	8013294 <__libc_init_array+0xc>
 80132b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80132ba:	4798      	blx	r3
 80132bc:	3601      	adds	r6, #1
 80132be:	e7f2      	b.n	80132a6 <__libc_init_array+0x1e>
 80132c0:	080162d8 	.word	0x080162d8
 80132c4:	080162d8 	.word	0x080162d8
 80132c8:	080162d8 	.word	0x080162d8
 80132cc:	080162dc 	.word	0x080162dc

080132d0 <__retarget_lock_acquire_recursive>:
 80132d0:	4770      	bx	lr

080132d2 <__retarget_lock_release_recursive>:
 80132d2:	4770      	bx	lr

080132d4 <malloc>:
 80132d4:	4b02      	ldr	r3, [pc, #8]	; (80132e0 <malloc+0xc>)
 80132d6:	4601      	mov	r1, r0
 80132d8:	6818      	ldr	r0, [r3, #0]
 80132da:	f000 b88d 	b.w	80133f8 <_malloc_r>
 80132de:	bf00      	nop
 80132e0:	20000088 	.word	0x20000088

080132e4 <free>:
 80132e4:	4b02      	ldr	r3, [pc, #8]	; (80132f0 <free+0xc>)
 80132e6:	4601      	mov	r1, r0
 80132e8:	6818      	ldr	r0, [r3, #0]
 80132ea:	f000 b819 	b.w	8013320 <_free_r>
 80132ee:	bf00      	nop
 80132f0:	20000088 	.word	0x20000088

080132f4 <memcpy>:
 80132f4:	440a      	add	r2, r1
 80132f6:	4291      	cmp	r1, r2
 80132f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80132fc:	d100      	bne.n	8013300 <memcpy+0xc>
 80132fe:	4770      	bx	lr
 8013300:	b510      	push	{r4, lr}
 8013302:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013306:	f803 4f01 	strb.w	r4, [r3, #1]!
 801330a:	4291      	cmp	r1, r2
 801330c:	d1f9      	bne.n	8013302 <memcpy+0xe>
 801330e:	bd10      	pop	{r4, pc}

08013310 <memset>:
 8013310:	4402      	add	r2, r0
 8013312:	4603      	mov	r3, r0
 8013314:	4293      	cmp	r3, r2
 8013316:	d100      	bne.n	801331a <memset+0xa>
 8013318:	4770      	bx	lr
 801331a:	f803 1b01 	strb.w	r1, [r3], #1
 801331e:	e7f9      	b.n	8013314 <memset+0x4>

08013320 <_free_r>:
 8013320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013322:	2900      	cmp	r1, #0
 8013324:	d044      	beq.n	80133b0 <_free_r+0x90>
 8013326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801332a:	9001      	str	r0, [sp, #4]
 801332c:	2b00      	cmp	r3, #0
 801332e:	f1a1 0404 	sub.w	r4, r1, #4
 8013332:	bfb8      	it	lt
 8013334:	18e4      	addlt	r4, r4, r3
 8013336:	f000 f94d 	bl	80135d4 <__malloc_lock>
 801333a:	4a1e      	ldr	r2, [pc, #120]	; (80133b4 <_free_r+0x94>)
 801333c:	9801      	ldr	r0, [sp, #4]
 801333e:	6813      	ldr	r3, [r2, #0]
 8013340:	b933      	cbnz	r3, 8013350 <_free_r+0x30>
 8013342:	6063      	str	r3, [r4, #4]
 8013344:	6014      	str	r4, [r2, #0]
 8013346:	b003      	add	sp, #12
 8013348:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801334c:	f000 b948 	b.w	80135e0 <__malloc_unlock>
 8013350:	42a3      	cmp	r3, r4
 8013352:	d908      	bls.n	8013366 <_free_r+0x46>
 8013354:	6825      	ldr	r5, [r4, #0]
 8013356:	1961      	adds	r1, r4, r5
 8013358:	428b      	cmp	r3, r1
 801335a:	bf01      	itttt	eq
 801335c:	6819      	ldreq	r1, [r3, #0]
 801335e:	685b      	ldreq	r3, [r3, #4]
 8013360:	1949      	addeq	r1, r1, r5
 8013362:	6021      	streq	r1, [r4, #0]
 8013364:	e7ed      	b.n	8013342 <_free_r+0x22>
 8013366:	461a      	mov	r2, r3
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	b10b      	cbz	r3, 8013370 <_free_r+0x50>
 801336c:	42a3      	cmp	r3, r4
 801336e:	d9fa      	bls.n	8013366 <_free_r+0x46>
 8013370:	6811      	ldr	r1, [r2, #0]
 8013372:	1855      	adds	r5, r2, r1
 8013374:	42a5      	cmp	r5, r4
 8013376:	d10b      	bne.n	8013390 <_free_r+0x70>
 8013378:	6824      	ldr	r4, [r4, #0]
 801337a:	4421      	add	r1, r4
 801337c:	1854      	adds	r4, r2, r1
 801337e:	42a3      	cmp	r3, r4
 8013380:	6011      	str	r1, [r2, #0]
 8013382:	d1e0      	bne.n	8013346 <_free_r+0x26>
 8013384:	681c      	ldr	r4, [r3, #0]
 8013386:	685b      	ldr	r3, [r3, #4]
 8013388:	6053      	str	r3, [r2, #4]
 801338a:	4421      	add	r1, r4
 801338c:	6011      	str	r1, [r2, #0]
 801338e:	e7da      	b.n	8013346 <_free_r+0x26>
 8013390:	d902      	bls.n	8013398 <_free_r+0x78>
 8013392:	230c      	movs	r3, #12
 8013394:	6003      	str	r3, [r0, #0]
 8013396:	e7d6      	b.n	8013346 <_free_r+0x26>
 8013398:	6825      	ldr	r5, [r4, #0]
 801339a:	1961      	adds	r1, r4, r5
 801339c:	428b      	cmp	r3, r1
 801339e:	bf04      	itt	eq
 80133a0:	6819      	ldreq	r1, [r3, #0]
 80133a2:	685b      	ldreq	r3, [r3, #4]
 80133a4:	6063      	str	r3, [r4, #4]
 80133a6:	bf04      	itt	eq
 80133a8:	1949      	addeq	r1, r1, r5
 80133aa:	6021      	streq	r1, [r4, #0]
 80133ac:	6054      	str	r4, [r2, #4]
 80133ae:	e7ca      	b.n	8013346 <_free_r+0x26>
 80133b0:	b003      	add	sp, #12
 80133b2:	bd30      	pop	{r4, r5, pc}
 80133b4:	200058f0 	.word	0x200058f0

080133b8 <sbrk_aligned>:
 80133b8:	b570      	push	{r4, r5, r6, lr}
 80133ba:	4e0e      	ldr	r6, [pc, #56]	; (80133f4 <sbrk_aligned+0x3c>)
 80133bc:	460c      	mov	r4, r1
 80133be:	6831      	ldr	r1, [r6, #0]
 80133c0:	4605      	mov	r5, r0
 80133c2:	b911      	cbnz	r1, 80133ca <sbrk_aligned+0x12>
 80133c4:	f000 f8f6 	bl	80135b4 <_sbrk_r>
 80133c8:	6030      	str	r0, [r6, #0]
 80133ca:	4621      	mov	r1, r4
 80133cc:	4628      	mov	r0, r5
 80133ce:	f000 f8f1 	bl	80135b4 <_sbrk_r>
 80133d2:	1c43      	adds	r3, r0, #1
 80133d4:	d00a      	beq.n	80133ec <sbrk_aligned+0x34>
 80133d6:	1cc4      	adds	r4, r0, #3
 80133d8:	f024 0403 	bic.w	r4, r4, #3
 80133dc:	42a0      	cmp	r0, r4
 80133de:	d007      	beq.n	80133f0 <sbrk_aligned+0x38>
 80133e0:	1a21      	subs	r1, r4, r0
 80133e2:	4628      	mov	r0, r5
 80133e4:	f000 f8e6 	bl	80135b4 <_sbrk_r>
 80133e8:	3001      	adds	r0, #1
 80133ea:	d101      	bne.n	80133f0 <sbrk_aligned+0x38>
 80133ec:	f04f 34ff 	mov.w	r4, #4294967295
 80133f0:	4620      	mov	r0, r4
 80133f2:	bd70      	pop	{r4, r5, r6, pc}
 80133f4:	200058f4 	.word	0x200058f4

080133f8 <_malloc_r>:
 80133f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133fc:	1ccd      	adds	r5, r1, #3
 80133fe:	f025 0503 	bic.w	r5, r5, #3
 8013402:	3508      	adds	r5, #8
 8013404:	2d0c      	cmp	r5, #12
 8013406:	bf38      	it	cc
 8013408:	250c      	movcc	r5, #12
 801340a:	2d00      	cmp	r5, #0
 801340c:	4607      	mov	r7, r0
 801340e:	db01      	blt.n	8013414 <_malloc_r+0x1c>
 8013410:	42a9      	cmp	r1, r5
 8013412:	d905      	bls.n	8013420 <_malloc_r+0x28>
 8013414:	230c      	movs	r3, #12
 8013416:	603b      	str	r3, [r7, #0]
 8013418:	2600      	movs	r6, #0
 801341a:	4630      	mov	r0, r6
 801341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013420:	4e2e      	ldr	r6, [pc, #184]	; (80134dc <_malloc_r+0xe4>)
 8013422:	f000 f8d7 	bl	80135d4 <__malloc_lock>
 8013426:	6833      	ldr	r3, [r6, #0]
 8013428:	461c      	mov	r4, r3
 801342a:	bb34      	cbnz	r4, 801347a <_malloc_r+0x82>
 801342c:	4629      	mov	r1, r5
 801342e:	4638      	mov	r0, r7
 8013430:	f7ff ffc2 	bl	80133b8 <sbrk_aligned>
 8013434:	1c43      	adds	r3, r0, #1
 8013436:	4604      	mov	r4, r0
 8013438:	d14d      	bne.n	80134d6 <_malloc_r+0xde>
 801343a:	6834      	ldr	r4, [r6, #0]
 801343c:	4626      	mov	r6, r4
 801343e:	2e00      	cmp	r6, #0
 8013440:	d140      	bne.n	80134c4 <_malloc_r+0xcc>
 8013442:	6823      	ldr	r3, [r4, #0]
 8013444:	4631      	mov	r1, r6
 8013446:	4638      	mov	r0, r7
 8013448:	eb04 0803 	add.w	r8, r4, r3
 801344c:	f000 f8b2 	bl	80135b4 <_sbrk_r>
 8013450:	4580      	cmp	r8, r0
 8013452:	d13a      	bne.n	80134ca <_malloc_r+0xd2>
 8013454:	6821      	ldr	r1, [r4, #0]
 8013456:	3503      	adds	r5, #3
 8013458:	1a6d      	subs	r5, r5, r1
 801345a:	f025 0503 	bic.w	r5, r5, #3
 801345e:	3508      	adds	r5, #8
 8013460:	2d0c      	cmp	r5, #12
 8013462:	bf38      	it	cc
 8013464:	250c      	movcc	r5, #12
 8013466:	4629      	mov	r1, r5
 8013468:	4638      	mov	r0, r7
 801346a:	f7ff ffa5 	bl	80133b8 <sbrk_aligned>
 801346e:	3001      	adds	r0, #1
 8013470:	d02b      	beq.n	80134ca <_malloc_r+0xd2>
 8013472:	6823      	ldr	r3, [r4, #0]
 8013474:	442b      	add	r3, r5
 8013476:	6023      	str	r3, [r4, #0]
 8013478:	e00e      	b.n	8013498 <_malloc_r+0xa0>
 801347a:	6822      	ldr	r2, [r4, #0]
 801347c:	1b52      	subs	r2, r2, r5
 801347e:	d41e      	bmi.n	80134be <_malloc_r+0xc6>
 8013480:	2a0b      	cmp	r2, #11
 8013482:	d916      	bls.n	80134b2 <_malloc_r+0xba>
 8013484:	1961      	adds	r1, r4, r5
 8013486:	42a3      	cmp	r3, r4
 8013488:	6025      	str	r5, [r4, #0]
 801348a:	bf18      	it	ne
 801348c:	6059      	strne	r1, [r3, #4]
 801348e:	6863      	ldr	r3, [r4, #4]
 8013490:	bf08      	it	eq
 8013492:	6031      	streq	r1, [r6, #0]
 8013494:	5162      	str	r2, [r4, r5]
 8013496:	604b      	str	r3, [r1, #4]
 8013498:	4638      	mov	r0, r7
 801349a:	f104 060b 	add.w	r6, r4, #11
 801349e:	f000 f89f 	bl	80135e0 <__malloc_unlock>
 80134a2:	f026 0607 	bic.w	r6, r6, #7
 80134a6:	1d23      	adds	r3, r4, #4
 80134a8:	1af2      	subs	r2, r6, r3
 80134aa:	d0b6      	beq.n	801341a <_malloc_r+0x22>
 80134ac:	1b9b      	subs	r3, r3, r6
 80134ae:	50a3      	str	r3, [r4, r2]
 80134b0:	e7b3      	b.n	801341a <_malloc_r+0x22>
 80134b2:	6862      	ldr	r2, [r4, #4]
 80134b4:	42a3      	cmp	r3, r4
 80134b6:	bf0c      	ite	eq
 80134b8:	6032      	streq	r2, [r6, #0]
 80134ba:	605a      	strne	r2, [r3, #4]
 80134bc:	e7ec      	b.n	8013498 <_malloc_r+0xa0>
 80134be:	4623      	mov	r3, r4
 80134c0:	6864      	ldr	r4, [r4, #4]
 80134c2:	e7b2      	b.n	801342a <_malloc_r+0x32>
 80134c4:	4634      	mov	r4, r6
 80134c6:	6876      	ldr	r6, [r6, #4]
 80134c8:	e7b9      	b.n	801343e <_malloc_r+0x46>
 80134ca:	230c      	movs	r3, #12
 80134cc:	603b      	str	r3, [r7, #0]
 80134ce:	4638      	mov	r0, r7
 80134d0:	f000 f886 	bl	80135e0 <__malloc_unlock>
 80134d4:	e7a1      	b.n	801341a <_malloc_r+0x22>
 80134d6:	6025      	str	r5, [r4, #0]
 80134d8:	e7de      	b.n	8013498 <_malloc_r+0xa0>
 80134da:	bf00      	nop
 80134dc:	200058f0 	.word	0x200058f0

080134e0 <cleanup_glue>:
 80134e0:	b538      	push	{r3, r4, r5, lr}
 80134e2:	460c      	mov	r4, r1
 80134e4:	6809      	ldr	r1, [r1, #0]
 80134e6:	4605      	mov	r5, r0
 80134e8:	b109      	cbz	r1, 80134ee <cleanup_glue+0xe>
 80134ea:	f7ff fff9 	bl	80134e0 <cleanup_glue>
 80134ee:	4621      	mov	r1, r4
 80134f0:	4628      	mov	r0, r5
 80134f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80134f6:	f7ff bf13 	b.w	8013320 <_free_r>
	...

080134fc <_reclaim_reent>:
 80134fc:	4b2c      	ldr	r3, [pc, #176]	; (80135b0 <_reclaim_reent+0xb4>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4283      	cmp	r3, r0
 8013502:	b570      	push	{r4, r5, r6, lr}
 8013504:	4604      	mov	r4, r0
 8013506:	d051      	beq.n	80135ac <_reclaim_reent+0xb0>
 8013508:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801350a:	b143      	cbz	r3, 801351e <_reclaim_reent+0x22>
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d14a      	bne.n	80135a8 <_reclaim_reent+0xac>
 8013512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013514:	6819      	ldr	r1, [r3, #0]
 8013516:	b111      	cbz	r1, 801351e <_reclaim_reent+0x22>
 8013518:	4620      	mov	r0, r4
 801351a:	f7ff ff01 	bl	8013320 <_free_r>
 801351e:	6961      	ldr	r1, [r4, #20]
 8013520:	b111      	cbz	r1, 8013528 <_reclaim_reent+0x2c>
 8013522:	4620      	mov	r0, r4
 8013524:	f7ff fefc 	bl	8013320 <_free_r>
 8013528:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801352a:	b111      	cbz	r1, 8013532 <_reclaim_reent+0x36>
 801352c:	4620      	mov	r0, r4
 801352e:	f7ff fef7 	bl	8013320 <_free_r>
 8013532:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013534:	b111      	cbz	r1, 801353c <_reclaim_reent+0x40>
 8013536:	4620      	mov	r0, r4
 8013538:	f7ff fef2 	bl	8013320 <_free_r>
 801353c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801353e:	b111      	cbz	r1, 8013546 <_reclaim_reent+0x4a>
 8013540:	4620      	mov	r0, r4
 8013542:	f7ff feed 	bl	8013320 <_free_r>
 8013546:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8013548:	b111      	cbz	r1, 8013550 <_reclaim_reent+0x54>
 801354a:	4620      	mov	r0, r4
 801354c:	f7ff fee8 	bl	8013320 <_free_r>
 8013550:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8013552:	b111      	cbz	r1, 801355a <_reclaim_reent+0x5e>
 8013554:	4620      	mov	r0, r4
 8013556:	f7ff fee3 	bl	8013320 <_free_r>
 801355a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801355c:	b111      	cbz	r1, 8013564 <_reclaim_reent+0x68>
 801355e:	4620      	mov	r0, r4
 8013560:	f7ff fede 	bl	8013320 <_free_r>
 8013564:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013566:	b111      	cbz	r1, 801356e <_reclaim_reent+0x72>
 8013568:	4620      	mov	r0, r4
 801356a:	f7ff fed9 	bl	8013320 <_free_r>
 801356e:	69a3      	ldr	r3, [r4, #24]
 8013570:	b1e3      	cbz	r3, 80135ac <_reclaim_reent+0xb0>
 8013572:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8013574:	4620      	mov	r0, r4
 8013576:	4798      	blx	r3
 8013578:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801357a:	b1b9      	cbz	r1, 80135ac <_reclaim_reent+0xb0>
 801357c:	4620      	mov	r0, r4
 801357e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013582:	f7ff bfad 	b.w	80134e0 <cleanup_glue>
 8013586:	5949      	ldr	r1, [r1, r5]
 8013588:	b941      	cbnz	r1, 801359c <_reclaim_reent+0xa0>
 801358a:	3504      	adds	r5, #4
 801358c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801358e:	2d80      	cmp	r5, #128	; 0x80
 8013590:	68d9      	ldr	r1, [r3, #12]
 8013592:	d1f8      	bne.n	8013586 <_reclaim_reent+0x8a>
 8013594:	4620      	mov	r0, r4
 8013596:	f7ff fec3 	bl	8013320 <_free_r>
 801359a:	e7ba      	b.n	8013512 <_reclaim_reent+0x16>
 801359c:	680e      	ldr	r6, [r1, #0]
 801359e:	4620      	mov	r0, r4
 80135a0:	f7ff febe 	bl	8013320 <_free_r>
 80135a4:	4631      	mov	r1, r6
 80135a6:	e7ef      	b.n	8013588 <_reclaim_reent+0x8c>
 80135a8:	2500      	movs	r5, #0
 80135aa:	e7ef      	b.n	801358c <_reclaim_reent+0x90>
 80135ac:	bd70      	pop	{r4, r5, r6, pc}
 80135ae:	bf00      	nop
 80135b0:	20000088 	.word	0x20000088

080135b4 <_sbrk_r>:
 80135b4:	b538      	push	{r3, r4, r5, lr}
 80135b6:	4d06      	ldr	r5, [pc, #24]	; (80135d0 <_sbrk_r+0x1c>)
 80135b8:	2300      	movs	r3, #0
 80135ba:	4604      	mov	r4, r0
 80135bc:	4608      	mov	r0, r1
 80135be:	602b      	str	r3, [r5, #0]
 80135c0:	f7ee fc22 	bl	8001e08 <_sbrk>
 80135c4:	1c43      	adds	r3, r0, #1
 80135c6:	d102      	bne.n	80135ce <_sbrk_r+0x1a>
 80135c8:	682b      	ldr	r3, [r5, #0]
 80135ca:	b103      	cbz	r3, 80135ce <_sbrk_r+0x1a>
 80135cc:	6023      	str	r3, [r4, #0]
 80135ce:	bd38      	pop	{r3, r4, r5, pc}
 80135d0:	200058f8 	.word	0x200058f8

080135d4 <__malloc_lock>:
 80135d4:	4801      	ldr	r0, [pc, #4]	; (80135dc <__malloc_lock+0x8>)
 80135d6:	f7ff be7b 	b.w	80132d0 <__retarget_lock_acquire_recursive>
 80135da:	bf00      	nop
 80135dc:	200058ec 	.word	0x200058ec

080135e0 <__malloc_unlock>:
 80135e0:	4801      	ldr	r0, [pc, #4]	; (80135e8 <__malloc_unlock+0x8>)
 80135e2:	f7ff be76 	b.w	80132d2 <__retarget_lock_release_recursive>
 80135e6:	bf00      	nop
 80135e8:	200058ec 	.word	0x200058ec

080135ec <_init>:
 80135ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ee:	bf00      	nop
 80135f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135f2:	bc08      	pop	{r3}
 80135f4:	469e      	mov	lr, r3
 80135f6:	4770      	bx	lr

080135f8 <_fini>:
 80135f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135fa:	bf00      	nop
 80135fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80135fe:	bc08      	pop	{r3}
 8013600:	469e      	mov	lr, r3
 8013602:	4770      	bx	lr
